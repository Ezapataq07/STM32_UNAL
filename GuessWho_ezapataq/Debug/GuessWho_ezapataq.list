
GuessWho_ezapataq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000050c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006ac  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006b0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004f3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011b  00000000  00000000  00020527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00020648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  000206f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000a9b  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000303  00000000  00000000  0002122b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002f00  00000000  00000000  0002152e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002442e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000260  00000000  00000000  00024480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800068c 	.word	0x0800068c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800068c 	.word	0x0800068c

080001d8 <main>:
signed char uniqueNumber (void);
signed char uniqueNumber2 (void);

#define NOP() __asm("NOP")

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
	 * 		ii) (-27) + (+51) = 0b00011000
	 * 		iii) (-27) + (-51) = 0b10110010
	 *
	 */

	initSystem();
 80001de:	f000 f87f 	bl	80002e0 <initSystem>

	int bang=1000000;
 80001e2:	4b3c      	ldr	r3, [pc, #240]	; (80002d4 <main+0xfc>)
 80001e4:	61fb      	str	r3, [r7, #28]
	bang=!bang;
 80001e6:	69fb      	ldr	r3, [r7, #28]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	bf0c      	ite	eq
 80001ec:	2301      	moveq	r3, #1
 80001ee:	2300      	movne	r3, #0
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	61fb      	str	r3, [r7, #28]
	bang=!bang;
 80001f4:	69fb      	ldr	r3, [r7, #28]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	bf0c      	ite	eq
 80001fa:	2301      	moveq	r3, #1
 80001fc:	2300      	movne	r3, #0
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	61fb      	str	r3, [r7, #28]
	bang=!bang;
 8000202:	69fb      	ldr	r3, [r7, #28]
 8000204:	2b00      	cmp	r3, #0
 8000206:	bf0c      	ite	eq
 8000208:	2301      	moveq	r3, #1
 800020a:	2300      	movne	r3, #0
 800020c:	b2db      	uxtb	r3, r3
 800020e:	61fb      	str	r3, [r7, #28]
 * cualquier número diferente de 0 tendrá como resultado 0 al aplicarle dicho operador, y para
 * el 0 retorna 1. Así, cuando se aplica la operación NOT a una variable que contiene un
 * número mucho más grande que 1, se obtiene un 0 como resultado. True/False
 */

	unsigned short posGirls = getPosGirls(facesSetComplete1);	// La variable posGirls toma el valor que retorna la función getPosGirls aplicada a facesSetComplete1
 8000210:	4b31      	ldr	r3, [pc, #196]	; (80002d8 <main+0x100>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f877 	bl	8000308 <getPosGirls>
 800021a:	4603      	mov	r3, r0
 800021c:	837b      	strh	r3, [r7, #26]
	NOP();
 800021e:	bf00      	nop
	unsigned short posMustages = getPosMustages(facesSetComplete1);	// La variable posMustages toma el valor que retorna la función getPosMustages aplicada a
 8000220:	4b2d      	ldr	r3, [pc, #180]	; (80002d8 <main+0x100>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f87e 	bl	8000326 <getPosMustages>
 800022a:	4603      	mov	r3, r0
 800022c:	833b      	strh	r3, [r7, #24]
																	// facesSetComplete1
	NOP();
 800022e:	bf00      	nop
	unsigned short posMGlasses1 = getPosMGlasses1(facesSetComplete1);	// La variable posMGlasses1 toma el valor que retorna la función getPosMGlasses1 aplicada a
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <main+0x100>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f8bd 	bl	80003b4 <getPosMGlasses1>
 800023a:	4603      	mov	r3, r0
 800023c:	82fb      	strh	r3, [r7, #22]
																		// facesSetComplete1
	unsigned short posFGlasses1 = getPosFGlasses1(facesSetComplete1);	// La variable posFGlasses1 toma el valor que retorna la función getPosFGlasses1 aplicada a
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <main+0x100>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f8ca 	bl	80003dc <getPosFGlasses1>
 8000248:	4603      	mov	r3, r0
 800024a:	82bb      	strh	r3, [r7, #20]
																		// facesSetComplete1

	unsigned short posMGlasses2 = getPosMGlasses2(facesSetComplete2);	// La variable posMGlasses2 toma el valor que retorna la función getPosMGlasses2 aplicada a
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <main+0x104>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f8db 	bl	800040c <getPosMGlasses2>
 8000256:	4603      	mov	r3, r0
 8000258:	827b      	strh	r3, [r7, #18]
																		// facesSetComplete2
	unsigned short posFGlasses2 = getPosFGlasses2(facesSetComplete2);	// La variable posFGlasses2 toma el valor que retorna la función getPosFGlasses2 aplicada a
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <main+0x104>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f8e8 	bl	8000434 <getPosFGlasses2>
 8000264:	4603      	mov	r3, r0
 8000266:	823b      	strh	r3, [r7, #16]
																		// facesSetComplete2
	NOP();
 8000268:	bf00      	nop
	unsigned short posMaleFaces = maleFaces (facesSetComplete1, facesSetComplete2);		// La variable posMaleFaces toma el valor que retorna la función maleFaces
 800026a:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <main+0x100>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <main+0x104>)
 8000270:	8812      	ldrh	r2, [r2, #0]
 8000272:	4611      	mov	r1, r2
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f8f5 	bl	8000464 <maleFaces>
 800027a:	4603      	mov	r3, r0
 800027c:	81fb      	strh	r3, [r7, #14]
																						// aplicada a ambos conjuntos de imágenes
	unsigned short posFemaleFaces = femaleFaces (facesSetComplete1, facesSetComplete2);	// La variable posFemaleFaces toma el valor que retorna la función femaleFaces
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <main+0x100>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	4a16      	ldr	r2, [pc, #88]	; (80002dc <main+0x104>)
 8000284:	8812      	ldrh	r2, [r2, #0]
 8000286:	4611      	mov	r1, r2
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f8fe 	bl	800048a <femaleFaces>
 800028e:	4603      	mov	r3, r0
 8000290:	81bb      	strh	r3, [r7, #12]
																						// aplicada a ambos conjuntos de imágenes
	unsigned short posMixFaces = mixFaces (facesSetComplete1, facesSetComplete2);		// La variable posMixFaces toma el valor que retorna la función mixFaces
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <main+0x100>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	4a11      	ldr	r2, [pc, #68]	; (80002dc <main+0x104>)
 8000298:	8812      	ldrh	r2, [r2, #0]
 800029a:	4611      	mov	r1, r2
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f909 	bl	80004b4 <mixFaces>
 80002a2:	4603      	mov	r3, r0
 80002a4:	817b      	strh	r3, [r7, #10]
																						// aplicada a ambos conjuntos de imágenes
	NOP();
 80002a6:	bf00      	nop
	unsigned int facesSetTotal= totalSet(facesSetComplete1, facesSetComplete2); // La variable facesSetTotal toma el valor que retorna la función totalSet aplicada a
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0x100>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <main+0x104>)
 80002ae:	8812      	ldrh	r2, [r2, #0]
 80002b0:	4611      	mov	r1, r2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f911 	bl	80004da <totalSet>
 80002b8:	6078      	str	r0, [r7, #4]
																				// ambos conjuntos de imágenes
	signed char negativeNumber = uniqueNumber(); 		// La variable negativeNumber toma el valor que retorna la función uniqueNumber
 80002ba:	f000 f926 	bl	800050a <uniqueNumber>
 80002be:	4603      	mov	r3, r0
 80002c0:	70fb      	strb	r3, [r7, #3]

	signed char negativeNumber2 = uniqueNumber2();		// La variable negativeNumber2 toma el valor que retorna la función uniqueNumber2
 80002c2:	f000 f93a 	bl	800053a <uniqueNumber2>
 80002c6:	4603      	mov	r3, r0
 80002c8:	70bb      	strb	r3, [r7, #2]

	return 0;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3720      	adds	r7, #32
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	000f4240 	.word	0x000f4240
 80002d8:	20000020 	.word	0x20000020
 80002dc:	20000022 	.word	0x20000022

080002e0 <initSystem>:

void initSystem(void){
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	facesSetComplete1 = 0b1111100100110001;		//0xF931
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <initSystem+0x20>)
 80002e6:	f64f 1231 	movw	r2, #63793	; 0xf931
 80002ea:	801a      	strh	r2, [r3, #0]
	facesSetComplete2 = 0b0010011110111000;		//0x27B8
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <initSystem+0x24>)
 80002ee:	f242 72b8 	movw	r2, #10168	; 0x27b8
 80002f2:	801a      	strh	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000020 	.word	0x20000020
 8000304:	20000022 	.word	0x20000022

08000308 <getPosGirls>:


unsigned short getPosGirls(unsigned short facesSet){
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
	/**
	 * La función getPosGirls retorna una variable de 16 bits sin signo con '1s' en la posición donde
	 * hay mujeres en el primer conjunto de imágenes
	 */
	unsigned short posGirls = ~facesSet;	// Se aplica la operación NOT bit a bit sobre la variable de entrada de la función
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	43db      	mvns	r3, r3
 8000316:	81fb      	strh	r3, [r7, #14]
	return posGirls;						// Retorna la posición de las mujeres
 8000318:	89fb      	ldrh	r3, [r7, #14]

}
 800031a:	4618      	mov	r0, r3
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <getPosMustages>:


unsigned short getPosMustages(unsigned short facesSet){
 8000326:	b480      	push	{r7}
 8000328:	b085      	sub	sp, #20
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	80fb      	strh	r3, [r7, #6]
	/**
	 * La función getPosMustages retorna una variable de 16 bits sin signo con '1s' en la posición donde
	 * hay bigotes en el primer conjunto de imágenes
	 */
	unsigned short constant = 14;				// Se asigna la constante 14 a una variable
 8000330:	230e      	movs	r3, #14
 8000332:	81fb      	strh	r3, [r7, #14]
	unsigned short uno = constant/constant;		// Se divide la constante por sí misma para obtener el valor de 1, y esto se asigna a una varible
 8000334:	2301      	movs	r3, #1
 8000336:	81bb      	strh	r3, [r7, #12]
	unsigned short posMustages;					// Se define la varible posMustages

	posMustages = uno;							// Se le asigna la variable uno a posMustages
 8000338:	89bb      	ldrh	r3, [r7, #12]
 800033a:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 800033c:	897a      	ldrh	r2, [r7, #10]
 800033e:	89bb      	ldrh	r3, [r7, #12]
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 8000346:	897a      	ldrh	r2, [r7, #10]
 8000348:	89bb      	ldrh	r3, [r7, #12]
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 8000350:	897a      	ldrh	r2, [r7, #10]
 8000352:	89bb      	ldrh	r3, [r7, #12]
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 800035a:	897a      	ldrh	r2, [r7, #10]
 800035c:	89bb      	ldrh	r3, [r7, #12]
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages | uno;			// Se aplica el operador OR bit a bit entre uno y posMustages, para obtener el número 0b10001
 8000364:	897a      	ldrh	r2, [r7, #10]
 8000366:	89bb      	ldrh	r3, [r7, #12]
 8000368:	4313      	orrs	r3, r2
 800036a:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 800036c:	897a      	ldrh	r2, [r7, #10]
 800036e:	89bb      	ldrh	r3, [r7, #12]
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 8000376:	897a      	ldrh	r2, [r7, #10]
 8000378:	89bb      	ldrh	r3, [r7, #12]
 800037a:	fa02 f303 	lsl.w	r3, r2, r3
 800037e:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 8000380:	897a      	ldrh	r2, [r7, #10]
 8000382:	89bb      	ldrh	r3, [r7, #12]
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages << uno;			// Se aplica la operación shift a la izquierda una vez a posMustages y se reasigna el resultado a la misma variable
 800038a:	897a      	ldrh	r2, [r7, #10]
 800038c:	89bb      	ldrh	r3, [r7, #12]
 800038e:	fa02 f303 	lsl.w	r3, r2, r3
 8000392:	817b      	strh	r3, [r7, #10]
	posMustages = posMustages | uno;			// Se aplica el operador OR bit a bit entre uno y posMustages, para obtener el número 0b100010001
 8000394:	897a      	ldrh	r2, [r7, #10]
 8000396:	89bb      	ldrh	r3, [r7, #12]
 8000398:	4313      	orrs	r3, r2
 800039a:	817b      	strh	r3, [r7, #10]


	posMustages=posMustages & facesSet;			// Se aplica el operador AND bit a bit entre posMustages y facesSet, teniendo en cuenta que posMustages contiene las
 800039c:	897a      	ldrh	r2, [r7, #10]
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	4013      	ands	r3, r2
 80003a2:	817b      	strh	r3, [r7, #10]
												// posiciones de hombres con bigote, de manera que dicho operador hace 0 las posiciones de hombres sin bigote

	return posMustages;							// Se retorna la posicion de hombres con bigote en facesSet
 80003a4:	897b      	ldrh	r3, [r7, #10]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <getPosMGlasses1>:


unsigned short mask1 = 0b1110010000000000;	// Se crea una máscara con las posiciones de las personas que tienen gafas en el primer conjunto de imágenes

unsigned short getPosMGlasses1(unsigned short facesSet1){
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
	/**
	 * La función getPosMGlasses1 retorna una variable de 16 bits sin signo con "1s" en las posiciones de hombres con gafas en el primer conjunto de imágenes
	 */
	unsigned short posMGlasses1 = facesSet1 & mask1; // Se aplica el operador AND bit a bit entre facesSet1 y la máscara
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <getPosMGlasses1+0x24>)
 80003c0:	881a      	ldrh	r2, [r3, #0]
 80003c2:	88fb      	ldrh	r3, [r7, #6]
 80003c4:	4013      	ands	r3, r2
 80003c6:	81fb      	strh	r3, [r7, #14]

	return posMGlasses1;							// Se retorna las posiciones de hombres con gafas
 80003c8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000000 	.word	0x20000000

080003dc <getPosFGlasses1>:

unsigned short getPosFGlasses1(unsigned short facesSet1){
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	80fb      	strh	r3, [r7, #6]
	/**
	 * La función getPosFGlasses1 retorna una variable de 16 bits sin signo con "1s" en las posiciones de mujeres con gafas en el primer conjunto de imágenes
	 */
	unsigned short posFGlasses1 = (~facesSet1) & mask1;	// Se aplica el operador NOT a facesSet1 para obtener "1s" en las posiciones de las mujeres y luego se aplica
 80003e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ea:	43db      	mvns	r3, r3
 80003ec:	b21a      	sxth	r2, r3
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <getPosFGlasses1+0x2c>)
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	b21b      	sxth	r3, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	b21b      	sxth	r3, r3
 80003f8:	81fb      	strh	r3, [r7, #14]
														// el operador AND bit a bit con la máscara

	return posFGlasses1;								// Se retorna la posicion de mujeres con gafas
 80003fa:	89fb      	ldrh	r3, [r7, #14]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	20000000 	.word	0x20000000

0800040c <getPosMGlasses2>:



unsigned short mask2 = 0b0101001000000000;	// Se crea una máscara con las posiciones de las personas que tienen gafas en el segundo conjunto de imágenes

unsigned short getPosMGlasses2(unsigned short facesSet2){
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
	/**
	 * La función getPosMGlasses2 retorna una variable de 16 bits sin signo con "1s" en las posiciones de hombres con gafas en el segundo conjunto de imágenes
	 */
	unsigned short posMGlasses2 = facesSet2 & mask2; // Se aplica el operador AND bit a bit entre facesSet2 y la máscara
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <getPosMGlasses2+0x24>)
 8000418:	881a      	ldrh	r2, [r3, #0]
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	4013      	ands	r3, r2
 800041e:	81fb      	strh	r3, [r7, #14]

	return posMGlasses2;							// Se retorna las posiciones de hombres con gafas
 8000420:	89fb      	ldrh	r3, [r7, #14]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000002 	.word	0x20000002

08000434 <getPosFGlasses2>:

unsigned short getPosFGlasses2(unsigned short facesSet2){
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	80fb      	strh	r3, [r7, #6]
	/**
	 * La función getPosFGlasses2 retorna una variable de 16 bits sin signo con "1s" en las posiciones de mujeres con gafas en el segundo conjunto de imágenes
	 */
	unsigned short posFGlasses2 = (~facesSet2) & mask2;	// Se aplica el operador NOT a facesSet2 para obtener "1s" en las posiciones de las mujeres y luego se aplica
 800043e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000442:	43db      	mvns	r3, r3
 8000444:	b21a      	sxth	r2, r3
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <getPosFGlasses2+0x2c>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	b21b      	sxth	r3, r3
 800044c:	4013      	ands	r3, r2
 800044e:	b21b      	sxth	r3, r3
 8000450:	81fb      	strh	r3, [r7, #14]
														// el operador AND bit a bit con la máscara

	return posFGlasses2;								// Se retorna la posicion de mujeres con gafas
 8000452:	89fb      	ldrh	r3, [r7, #14]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	20000002 	.word	0x20000002

08000464 <maleFaces>:



unsigned short maleFaces (unsigned short facesSet1, unsigned short facesSet2){
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	460a      	mov	r2, r1
 800046e:	80fb      	strh	r3, [r7, #6]
 8000470:	4613      	mov	r3, r2
 8000472:	80bb      	strh	r3, [r7, #4]
	/**
	 * La función maleFaces toma ambos conjuntos de imágenes y retorna una variable de 16 bits sin signo con "1s" en las posiciones donde en la misma posición hay
	 * una cara masculina
	 */
	unsigned short posMaleFaces = facesSet1 & facesSet2;	// Se aplica el operador AND bit a bit entre los conjuntos de imágenes
 8000474:	88fa      	ldrh	r2, [r7, #6]
 8000476:	88bb      	ldrh	r3, [r7, #4]
 8000478:	4013      	ands	r3, r2
 800047a:	81fb      	strh	r3, [r7, #14]

	return posMaleFaces;									// Se retorna las posiciones donde coinciden caras masculinas
 800047c:	89fb      	ldrh	r3, [r7, #14]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <femaleFaces>:

unsigned short femaleFaces (unsigned short facesSet1, unsigned short facesSet2){
 800048a:	b480      	push	{r7}
 800048c:	b085      	sub	sp, #20
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	460a      	mov	r2, r1
 8000494:	80fb      	strh	r3, [r7, #6]
 8000496:	4613      	mov	r3, r2
 8000498:	80bb      	strh	r3, [r7, #4]
	/**
	 * La función femaleFaces toma ambos conjuntos de imágenes y retorna una variable de 16 bits sin signo con "1s" en las posiciones donde en la misma posición hay
	 * una cara femenina
	 */
	unsigned short posFemaleFaces = (~facesSet1) & (~facesSet2); 	// Se aplica el operador NOT bit a bit a cada conjunto de imágenes y luego entre los resultantes
 800049a:	88fa      	ldrh	r2, [r7, #6]
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	81fb      	strh	r3, [r7, #14]
																	// se aplica la operación AND bit a bit

	return posFemaleFaces;											// Se retorna las posiciones donde coinciden caras femeninas
 80004a6:	89fb      	ldrh	r3, [r7, #14]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <mixFaces>:

unsigned short mixFaces (unsigned short facesSet1, unsigned short facesSet2){
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	460a      	mov	r2, r1
 80004be:	80fb      	strh	r3, [r7, #6]
 80004c0:	4613      	mov	r3, r2
 80004c2:	80bb      	strh	r3, [r7, #4]
	/**
	 * La función mixFaces toma ambos conjuntos de imágenes y retorna una variable de 16 bits sin signo con "1s" en las posiciones donde en la misma posición hay
	 * caras de sexos opuestos
	 */
	unsigned short posMixFaces = facesSet1 ^ facesSet2;		// Se aplica el operador XOR bit a bit entre los conjuntos de imágenes
 80004c4:	88fa      	ldrh	r2, [r7, #6]
 80004c6:	88bb      	ldrh	r3, [r7, #4]
 80004c8:	4053      	eors	r3, r2
 80004ca:	81fb      	strh	r3, [r7, #14]

	return posMixFaces;										// Se retorna las posiciones donde coinciden caras de sexos opuestos
 80004cc:	89fb      	ldrh	r3, [r7, #14]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <totalSet>:



unsigned int totalSet (unsigned short facesSet1, unsigned short facesSet2){
 80004da:	b480      	push	{r7}
 80004dc:	b085      	sub	sp, #20
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4603      	mov	r3, r0
 80004e2:	460a      	mov	r2, r1
 80004e4:	80fb      	strh	r3, [r7, #6]
 80004e6:	4613      	mov	r3, r2
 80004e8:	80bb      	strh	r3, [r7, #4]
	/**
	 * La función totalSet retorna ambos conjuntos de imágenes unidos en una sola variable de 32bits sin signo, siendo facesSet1 el 'word' más significativo
	 * y facesSet2 el menos significativo
	 */
	unsigned int facesSetTotal = facesSet1; // Se define una variable de 32 bits sin signo y se inicializa con el valor de facesSet1
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	60fb      	str	r3, [r7, #12]
	facesSetTotal <<= 16;					// Se hace la operación de shift a la izquierda 16 veces y se reasigna a la misma variable
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	041b      	lsls	r3, r3, #16
 80004f2:	60fb      	str	r3, [r7, #12]
	facesSetTotal |= facesSet2;				// Se hace la operación OR bit a bit entre facesSetTotal  y faceSet2 y se reasigna el valor a la primer variable
 80004f4:	88bb      	ldrh	r3, [r7, #4]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]

	return facesSetTotal;
 80004fc:	68fb      	ldr	r3, [r7, #12]
	 * Binario: 0b11111001001100010010011110111000
	 * HEX: 0xF93127B8
	 * DEC: 4180748216
	 */

}
 80004fe:	4618      	mov	r0, r3
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <uniqueNumber>:

signed char uniqueNumber (void){
 800050a:	b480      	push	{r7}
 800050c:	b083      	sub	sp, #12
 800050e:	af00      	add	r7, sp, #0
	/**
	 * La función uniqueNumber retorna el negativo del único número entero que existe entre un cuadrado perfecto y un cubo perfecto, utilizando el un método equivalente
	 * al complemento A 2
	 */
	char constant1 = 0b00011010;		// Se define la constante 1 como el número 26 en su represetación binario
 8000510:	231a      	movs	r3, #26
 8000512:	71fb      	strb	r3, [r7, #7]
	char constant2 = constant1>>3;		// Se define la constante 2 desplazando 3 veces a la derecha la constante 1 (en realidad las constante utilizadas son 26 y 3)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	71bb      	strb	r3, [r7, #6]
	signed char negativeNumber;				// Se define una variable de 8 bits con signo

	constant1 = ~constant1;				// Se aplica el operador NOT bit a bit sobre la constante 1 y se reasigna a sí misma
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	43db      	mvns	r3, r3
 800051e:	71fb      	strb	r3, [r7, #7]
	negativeNumber = constant1 ^ constant2;	// Se define el valor de negativeNumber con la operación XOR entre la constante 1 y 2
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	4053      	eors	r3, r2
 8000526:	b2db      	uxtb	r3, r3
 8000528:	717b      	strb	r3, [r7, #5]

	return negativeNumber;				// Se retorna el número -26 en su representación binaria
 800052a:	f997 3005 	ldrsb.w	r3, [r7, #5]

}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <uniqueNumber2>:


signed char uniqueNumber2 (void){
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
	/**
	 * La función uniqueNumber retorna el negativo del único número entero que existe entre un cuadrado perfecto y un cubo perfecto
	 */
	char constante = 0b11111101;				// Se define e inicializa la constante a utilizar
 8000540:	23fd      	movs	r3, #253	; 0xfd
 8000542:	71fb      	strb	r3, [r7, #7]
	char uno = !(!constante);					// Se aplica el operador "bang!" dos veces sobre la constante para asignarlo a la variable "uno"
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	bf14      	ite	ne
 800054a:	2301      	movne	r3, #1
 800054c:	2300      	moveq	r3, #0
 800054e:	b2db      	uxtb	r3, r3
 8000550:	71bb      	strb	r3, [r7, #6]
	signed char negativeNumber2;						// Se define la variable de retorno de 8 bits con signo
	char midvar;								// Se define una variable para cálculos intermedios

	midvar = constante >> uno;					// Se desplaza la constante una vez a la derecha y se le asigna a la variable midvar
 8000552:	79fa      	ldrb	r2, [r7, #7]
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	fa42 f303 	asr.w	r3, r2, r3
 800055a:	717b      	strb	r3, [r7, #5]
	midvar = midvar & constante;				// Se aplica la operación AND bit a bit entre midvar y la constante y se reasigna a midvar
 800055c:	797a      	ldrb	r2, [r7, #5]
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4013      	ands	r3, r2
 8000562:	717b      	strb	r3, [r7, #5]
	midvar = midvar >> uno;						// Se desplaza la variable midvar una vez a la derecha y se reasigna a sí misma
 8000564:	797a      	ldrb	r2, [r7, #5]
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	fa42 f303 	asr.w	r3, r2, r3
 800056c:	717b      	strb	r3, [r7, #5]
	midvar = midvar & constante;				// Se aplica la operación AND bit a bit entre midvar y la constante y se reasigna a midvar
 800056e:	797a      	ldrb	r2, [r7, #5]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4013      	ands	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
	midvar = midvar >> uno;						// Se desplaza la variable midvar una vez a la derecha y se reasigna a sí misma
 8000576:	797a      	ldrb	r2, [r7, #5]
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	fa42 f303 	asr.w	r3, r2, r3
 800057e:	717b      	strb	r3, [r7, #5]
	midvar = midvar & constante;				// Se aplica la operación AND bit a bit entre midvar y la constante y se reasigna a midvar
 8000580:	797a      	ldrb	r2, [r7, #5]
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4013      	ands	r3, r2
 8000586:	717b      	strb	r3, [r7, #5]

	negativeNumber2 = constante ^ midvar;		// Se aplica la operación XOR bit a bit entre la constante y midvar
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	4053      	eors	r3, r2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	713b      	strb	r3, [r7, #4]

	midvar = midvar >> uno;						// Se desplaza la variable midvar una vez a la derecha y se reasigna a sí misma
 8000592:	797a      	ldrb	r2, [r7, #5]
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	fa42 f303 	asr.w	r3, r2, r3
 800059a:	717b      	strb	r3, [r7, #5]
	midvar = midvar & constante;				// Se aplica la operación AND bit a bit entre midvar y la constante y se reasigna a midvar
 800059c:	797a      	ldrb	r2, [r7, #5]
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4013      	ands	r3, r2
 80005a2:	717b      	strb	r3, [r7, #5]

	char tres;									// Se define la variable que contendrá el número tres
	tres = midvar >> uno;						// Se desplaza la variable midvar una vez a la derecha
 80005a4:	797a      	ldrb	r2, [r7, #5]
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	fa42 f303 	asr.w	r3, r2, r3
 80005ac:	70fb      	strb	r3, [r7, #3]
	tres = tres >> uno;							// Se desplaza la variable midvar una vez a la derecha
 80005ae:	78fa      	ldrb	r2, [r7, #3]
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	fa42 f303 	asr.w	r3, r2, r3
 80005b6:	70fb      	strb	r3, [r7, #3]

	midvar = midvar >> uno;						// Se desplaza la variable midvar una vez a la derecha y se reasigna a sí misma
 80005b8:	797a      	ldrb	r2, [r7, #5]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	fa42 f303 	asr.w	r3, r2, r3
 80005c0:	717b      	strb	r3, [r7, #5]
	midvar = midvar & constante;				// Se aplica la operación AND bit a bit entre midvar y la constante y se reasigna a midvar
 80005c2:	797a      	ldrb	r2, [r7, #5]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4013      	ands	r3, r2
 80005c8:	717b      	strb	r3, [r7, #5]

	negativeNumber2 = negativeNumber2 ^ midvar;	// Se aplica la operación XNOR entre negativeNumber2 y midvar y se reasigna a la primera variable
 80005ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80005ce:	793b      	ldrb	r3, [r7, #4]
 80005d0:	4053      	eors	r3, r2
 80005d2:	713b      	strb	r3, [r7, #4]
	negativeNumber2 = negativeNumber2 ^ tres;	// Se aplica la operación XNOR entre negativeNumber2 y tres y se reasigna a la primera variable
 80005d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80005d8:	793b      	ldrb	r3, [r7, #4]
 80005da:	4053      	eors	r3, r2
 80005dc:	713b      	strb	r3, [r7, #4]

	return negativeNumber2;						// Se retorna el número -26 en su representación binaria
 80005de:	f997 3004 	ldrsb.w	r3, [r7, #4]


}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f811 	bl	8000644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fdd9 	bl	80001d8 <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000634:	080006ac 	.word	0x080006ac
  ldr r2, =_sbss
 8000638:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800063c:	20000024 	.word	0x20000024

08000640 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC_IRQHandler>
	...

08000644 <__libc_init_array>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	4d0d      	ldr	r5, [pc, #52]	; (800067c <__libc_init_array+0x38>)
 8000648:	4c0d      	ldr	r4, [pc, #52]	; (8000680 <__libc_init_array+0x3c>)
 800064a:	1b64      	subs	r4, r4, r5
 800064c:	10a4      	asrs	r4, r4, #2
 800064e:	2600      	movs	r6, #0
 8000650:	42a6      	cmp	r6, r4
 8000652:	d109      	bne.n	8000668 <__libc_init_array+0x24>
 8000654:	4d0b      	ldr	r5, [pc, #44]	; (8000684 <__libc_init_array+0x40>)
 8000656:	4c0c      	ldr	r4, [pc, #48]	; (8000688 <__libc_init_array+0x44>)
 8000658:	f000 f818 	bl	800068c <_init>
 800065c:	1b64      	subs	r4, r4, r5
 800065e:	10a4      	asrs	r4, r4, #2
 8000660:	2600      	movs	r6, #0
 8000662:	42a6      	cmp	r6, r4
 8000664:	d105      	bne.n	8000672 <__libc_init_array+0x2e>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f855 3b04 	ldr.w	r3, [r5], #4
 800066c:	4798      	blx	r3
 800066e:	3601      	adds	r6, #1
 8000670:	e7ee      	b.n	8000650 <__libc_init_array+0xc>
 8000672:	f855 3b04 	ldr.w	r3, [r5], #4
 8000676:	4798      	blx	r3
 8000678:	3601      	adds	r6, #1
 800067a:	e7f2      	b.n	8000662 <__libc_init_array+0x1e>
 800067c:	080006a4 	.word	0x080006a4
 8000680:	080006a4 	.word	0x080006a4
 8000684:	080006a4 	.word	0x080006a4
 8000688:	080006a8 	.word	0x080006a8

0800068c <_init>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr

08000698 <_fini>:
 8000698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069a:	bf00      	nop
 800069c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069e:	bc08      	pop	{r3}
 80006a0:	469e      	mov	lr, r3
 80006a2:	4770      	bx	lr
