
IntroEXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000658  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f0  080007f8  000107f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f0  080007f0  000107f8  2**0
                  CONTENTS
  4 .ARM          00000000  080007f0  080007f0  000107f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f0  080007f8  000107f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f0  080007f0  000107f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007f4  080007f4  000107f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000000  080007f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080007f8  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000107f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000143d  00000000  00000000  00010822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a9  00000000  00000000  00011c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00012108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00012208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000efc9  00000000  00000000  000122d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015ac  00000000  00000000  00021299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000549c6  00000000  00000000  00022845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007720b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c4  00000000  00000000  0007725c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080007d8 	.word	0x080007d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080007d8 	.word	0x080007d8

080001d8 <main>:

EXTI_Config_t 		extiConfig				= {0};

void initSystem(void);

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	initSystem();
 80001dc:	f000 f802 	bl	80001e4 <initSystem>

	while(1){
 80001e0:	e7fe      	b.n	80001e0 <main+0x8>
	...

080001e4 <initSystem>:


	return 0;
}

void initSystem(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	// Configuración para el State LED
	handlerStateLED.pGPIOx 								= GPIOA;
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <initSystem+0x9c>)
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <initSystem+0xa0>)
 80001ec:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80001ee:	4b24      	ldr	r3, [pc, #144]	; (8000280 <initSystem+0x9c>)
 80001f0:	2205      	movs	r2, #5
 80001f2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 80001f4:	4b22      	ldr	r3, [pc, #136]	; (8000280 <initSystem+0x9c>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 80001fa:	4b21      	ldr	r3, [pc, #132]	; (8000280 <initSystem+0x9c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <initSystem+0x9c>)
 8000202:	2200      	movs	r2, #0
 8000204:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000206:	4b1e      	ldr	r3, [pc, #120]	; (8000280 <initSystem+0x9c>)
 8000208:	2201      	movs	r2, #1
 800020a:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Está configuración no es relevante para el PIN en este caso
 800020c:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <initSystem+0x9c>)
 800020e:	2200      	movs	r2, #0
 8000210:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8000212:	481b      	ldr	r0, [pc, #108]	; (8000280 <initSystem+0x9c>)
 8000214:	f000 f994 	bl	8000540 <GPIO_Config>

	// Configuración para el Test LED
	handlerExtLED.pGPIOx 								= GPIOB;
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <initSystem+0xa4>)
 800021a:	4a1c      	ldr	r2, [pc, #112]	; (800028c <initSystem+0xa8>)
 800021c:	601a      	str	r2, [r3, #0]
	handlerExtLED.GPIO_PinConfig.GPIO_PinNumber			= PIN_9;
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <initSystem+0xa4>)
 8000220:	2209      	movs	r2, #9
 8000222:	711a      	strb	r2, [r3, #4]
	handlerExtLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <initSystem+0xa4>)
 8000226:	2201      	movs	r2, #1
 8000228:	715a      	strb	r2, [r3, #5]
	handlerExtLED.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <initSystem+0xa4>)
 800022c:	2200      	movs	r2, #0
 800022e:	721a      	strb	r2, [r3, #8]
	handlerExtLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <initSystem+0xa4>)
 8000232:	2200      	movs	r2, #0
 8000234:	71da      	strb	r2, [r3, #7]
	handlerExtLED.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <initSystem+0xa4>)
 8000238:	2201      	movs	r2, #1
 800023a:	719a      	strb	r2, [r3, #6]
	handlerExtLED.GPIO_PinConfig.GPIO_PinAltFunMode		= AF0;					// Está configuración no es relevante para el PIN en este caso
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <initSystem+0xa4>)
 800023e:	2200      	movs	r2, #0
 8000240:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del State LED
	GPIO_Config(&handlerExtLED);
 8000242:	4811      	ldr	r0, [pc, #68]	; (8000288 <initSystem+0xa4>)
 8000244:	f000 f97c 	bl	8000540 <GPIO_Config>

	// Configuración del Timer 2
	handlerTIM2.ptrTIMx						= TIM2;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <initSystem+0xac>)
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	601a      	str	r2, [r3, #0]
	handlerTIM2.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <initSystem+0xac>)
 8000252:	2201      	movs	r2, #1
 8000254:	711a      	strb	r2, [r3, #4]
	handlerTIM2.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <initSystem+0xac>)
 8000258:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800025c:	80da      	strh	r2, [r3, #6]
	handlerTIM2.timerConfig.Timer_period	= 250;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <initSystem+0xac>)
 8000260:	22fa      	movs	r2, #250	; 0xfa
 8000262:	609a      	str	r2, [r3, #8]

	//Cargamos la configuración TIM2
	BTimer_Config(&handlerTIM2);
 8000264:	480a      	ldr	r0, [pc, #40]	; (8000290 <initSystem+0xac>)
 8000266:	f000 f897 	bl	8000398 <BTimer_Config>

	extiConfig.EXTIx 			= EXTI8;
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <initSystem+0xb0>)
 800026c:	2208      	movs	r2, #8
 800026e:	701a      	strb	r2, [r3, #0]
	extiConfig.pinPort 			= PB;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <initSystem+0xb0>)
 8000272:	2201      	movs	r2, #1
 8000274:	705a      	strb	r2, [r3, #1]
	extiConfig.triggerMode 		= RISING_TRIGGER;
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <initSystem+0xb0>)
 8000278:	2200      	movs	r2, #0
 800027a:	709a      	strb	r2, [r3, #2]


}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000001c 	.word	0x2000001c
 8000284:	40020000 	.word	0x40020000
 8000288:	20000028 	.word	0x20000028
 800028c:	40020400 	.word	0x40020400
 8000290:	20000034 	.word	0x20000034
 8000294:	20000044 	.word	0x20000044

08000298 <BTimer2_Callback>:


/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <BTimer2_Callback+0x1c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	695a      	ldr	r2, [r3, #20]
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <BTimer2_Callback+0x1c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f082 0220 	eor.w	r2, r2, #32
 80002aa:	615a      	str	r2, [r3, #20]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fa53 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff75 	bl	80001d8 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	080007f8 	.word	0x080007f8
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000004c 	.word	0x2000004c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	2b00      	cmp	r3, #0
 800031c:	db0b      	blt.n	8000336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f003 021f 	and.w	r2, r3, #31
 8000324:	4906      	ldr	r1, [pc, #24]	; (8000340 <__NVIC_EnableIRQ+0x34>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	095b      	lsrs	r3, r3, #5
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100

08000344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	db0a      	blt.n	800036e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	490c      	ldr	r1, [pc, #48]	; (8000390 <__NVIC_SetPriority+0x4c>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036c:	e00a      	b.n	8000384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4908      	ldr	r1, [pc, #32]	; (8000394 <__NVIC_SetPriority+0x50>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 030f 	and.w	r3, r3, #15
 800037a:	3b04      	subs	r3, #4
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	440b      	add	r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a46      	ldr	r2, [pc, #280]	; (80004c0 <BTimer_Config+0x128>)
 80003a6:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003b4:	d106      	bne.n	80003c4 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <BTimer_Config+0x12c>)
 80003b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ba:	4a42      	ldr	r2, [pc, #264]	; (80004c4 <BTimer_Config+0x12c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6413      	str	r3, [r2, #64]	; 0x40
 80003c2:	e016      	b.n	80003f2 <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <BTimer_Config+0x130>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80003ce:	4b3d      	ldr	r3, [pc, #244]	; (80004c4 <BTimer_Config+0x12c>)
 80003d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d2:	4a3c      	ldr	r2, [pc, #240]	; (80004c4 <BTimer_Config+0x12c>)
 80003d4:	f043 0302 	orr.w	r3, r3, #2
 80003d8:	6413      	str	r3, [r2, #64]	; 0x40
 80003da:	e00a      	b.n	80003f2 <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a3a      	ldr	r2, [pc, #232]	; (80004cc <BTimer_Config+0x134>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d105      	bne.n	80003f2 <BTimer_Config+0x5a>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80003e6:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <BTimer_Config+0x12c>)
 80003e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ea:	4a36      	ldr	r2, [pc, #216]	; (80004c4 <BTimer_Config+0x12c>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d10c      	bne.n	8000414 <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f022 0210 	bic.w	r2, r2, #16
 8000408:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2200      	movs	r2, #0
 8000410:	625a      	str	r2, [r3, #36]	; 0x24
 8000412:	e00d      	b.n	8000430 <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f042 0210 	orr.w	r2, r2, #16
 8000422:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3a01      	subs	r2, #1
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	88db      	ldrh	r3, [r3, #6]
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	689a      	ldr	r2, [r3, #8]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3a01      	subs	r2, #1
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f042 0201 	orr.w	r2, r2, #1
 8000456:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	68da      	ldr	r2, [r3, #12]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f042 0201 	orr.w	r2, r2, #1
 8000466:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000470:	d107      	bne.n	8000482 <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000472:	201c      	movs	r0, #28
 8000474:	f7ff ff4a 	bl	800030c <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000478:	2103      	movs	r1, #3
 800047a:	201c      	movs	r0, #28
 800047c:	f7ff ff62 	bl	8000344 <__NVIC_SetPriority>
 8000480:	e018      	b.n	80004b4 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <BTimer_Config+0x130>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d107      	bne.n	800049c <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 800048c:	201d      	movs	r0, #29
 800048e:	f7ff ff3d 	bl	800030c <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8000492:	2103      	movs	r1, #3
 8000494:	201d      	movs	r0, #29
 8000496:	f7ff ff55 	bl	8000344 <__NVIC_SetPriority>
 800049a:	e00b      	b.n	80004b4 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <BTimer_Config+0x134>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 80004a6:	201e      	movs	r0, #30
 80004a8:	f7ff ff30 	bl	800030c <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 80004ac:	2103      	movs	r1, #3
 80004ae:	201e      	movs	r0, #30
 80004b0:	f7ff ff48 	bl	8000344 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80004b4:	b662      	cpsie	i
}
 80004b6:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000048 	.word	0x20000048
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40000400 	.word	0x40000400
 80004cc:	40000800 	.word	0x40000800

080004d0 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	 __NOP();
 80004d4:	bf00      	nop
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
	 __NOP();
 80004e2:	bf00      	nop
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8000500:	f7ff feca 	bl	8000298 <BTimer2_Callback>

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <TIM3_IRQHandler+0x18>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <TIM3_IRQHandler+0x18>)
 8000512:	f023 0301 	bic.w	r3, r3, #1
 8000516:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000518:	f7ff ffda 	bl	80004d0 <BTimer3_Callback>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40000400 	.word	0x40000400

08000524 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <TIM4_IRQHandler+0x18>)
 800052a:	691b      	ldr	r3, [r3, #16]
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <TIM4_IRQHandler+0x18>)
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000534:	f7ff ffd3 	bl	80004de <BTimer4_Callback>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40000800 	.word	0x40000800

08000540 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a87      	ldr	r2, [pc, #540]	; (8000774 <GPIO_Config+0x234>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800055a:	4b87      	ldr	r3, [pc, #540]	; (8000778 <GPIO_Config+0x238>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a86      	ldr	r2, [pc, #536]	; (8000778 <GPIO_Config+0x238>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	e03a      	b.n	80005de <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a83      	ldr	r2, [pc, #524]	; (800077c <GPIO_Config+0x23c>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000572:	4b81      	ldr	r3, [pc, #516]	; (8000778 <GPIO_Config+0x238>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a80      	ldr	r2, [pc, #512]	; (8000778 <GPIO_Config+0x238>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	e02e      	b.n	80005de <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a7e      	ldr	r2, [pc, #504]	; (8000780 <GPIO_Config+0x240>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 800058a:	4b7b      	ldr	r3, [pc, #492]	; (8000778 <GPIO_Config+0x238>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a7a      	ldr	r2, [pc, #488]	; (8000778 <GPIO_Config+0x238>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	e022      	b.n	80005de <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a79      	ldr	r2, [pc, #484]	; (8000784 <GPIO_Config+0x244>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80005a2:	4b75      	ldr	r3, [pc, #468]	; (8000778 <GPIO_Config+0x238>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a74      	ldr	r2, [pc, #464]	; (8000778 <GPIO_Config+0x238>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	e016      	b.n	80005de <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a74      	ldr	r2, [pc, #464]	; (8000788 <GPIO_Config+0x248>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 80005ba:	4b6f      	ldr	r3, [pc, #444]	; (8000778 <GPIO_Config+0x238>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a6e      	ldr	r2, [pc, #440]	; (8000778 <GPIO_Config+0x238>)
 80005c0:	f043 0310 	orr.w	r3, r3, #16
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	e00a      	b.n	80005de <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a6f      	ldr	r2, [pc, #444]	; (800078c <GPIO_Config+0x24c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d105      	bne.n	80005de <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 80005d2:	4b69      	ldr	r3, [pc, #420]	; (8000778 <GPIO_Config+0x238>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a68      	ldr	r2, [pc, #416]	; (8000778 <GPIO_Config+0x238>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	2103      	movs	r1, #3
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	400a      	ands	r2, r1
 800060c:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	430a      	orrs	r2, r1
 800061c:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7a1b      	ldrb	r3, [r3, #8]
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	4619      	mov	r1, r3
 800063a:	2301      	movs	r3, #1
 800063c:	408b      	lsls	r3, r1
 800063e:	43db      	mvns	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	400a      	ands	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6859      	ldr	r1, [r3, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	430a      	orrs	r2, r1
 8000658:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	799b      	ldrb	r3, [r3, #6]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	2103      	movs	r1, #3
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	79db      	ldrb	r3, [r3, #7]
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	2103      	movs	r1, #3
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68d9      	ldr	r1, [r3, #12]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	430a      	orrs	r2, r1
 80006d8:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d143      	bne.n	800076a <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d81f      	bhi.n	800072a <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6a1a      	ldr	r2, [r3, #32]
 80006f8:	210f      	movs	r1, #15
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6a1a      	ldr	r2, [r3, #32]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7a5b      	ldrb	r3, [r3, #9]
 8000716:	4619      	mov	r1, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	4619      	mov	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000728:	e01f      	b.n	800076a <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	3b08      	subs	r3, #8
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800073a:	210f      	movs	r1, #15
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7a5b      	ldrb	r3, [r3, #9]
 8000758:	4619      	mov	r1, r3
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	430a      	orrs	r2, r1
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40020000 	.word	0x40020000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020400 	.word	0x40020400
 8000780:	40020800 	.word	0x40020800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40021000 	.word	0x40021000
 800078c:	40021c00 	.word	0x40021c00

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4d0d      	ldr	r5, [pc, #52]	; (80007c8 <__libc_init_array+0x38>)
 8000794:	4c0d      	ldr	r4, [pc, #52]	; (80007cc <__libc_init_array+0x3c>)
 8000796:	1b64      	subs	r4, r4, r5
 8000798:	10a4      	asrs	r4, r4, #2
 800079a:	2600      	movs	r6, #0
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	4d0b      	ldr	r5, [pc, #44]	; (80007d0 <__libc_init_array+0x40>)
 80007a2:	4c0c      	ldr	r4, [pc, #48]	; (80007d4 <__libc_init_array+0x44>)
 80007a4:	f000 f818 	bl	80007d8 <_init>
 80007a8:	1b64      	subs	r4, r4, r5
 80007aa:	10a4      	asrs	r4, r4, #2
 80007ac:	2600      	movs	r6, #0
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	080007f0 	.word	0x080007f0
 80007cc:	080007f0 	.word	0x080007f0
 80007d0:	080007f0 	.word	0x080007f0
 80007d4:	080007f4 	.word	0x080007f4

080007d8 <_init>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	bf00      	nop
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr

080007e4 <_fini>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	bf00      	nop
 80007e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ea:	bc08      	pop	{r3}
 80007ec:	469e      	mov	lr, r3
 80007ee:	4770      	bx	lr
