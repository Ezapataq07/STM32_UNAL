
EjemploLibrerias.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dec  08001dec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001dec  08001dec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dec  08001dec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08001df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000078  08001e6c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08001e6c  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e4c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a9b  00000000  00000000  00022eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00023990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  00023bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6ff  00000000  00000000  00023d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e33  00000000  00000000  00033497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055247  00000000  00000000  000362ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b511  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000afc  00000000  00000000  0008b564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d8c 	.word	0x08001d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08001d8c 	.word	0x08001d8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:


void initSystem(void);
void setPeriod(BTIMER_Handler_t *ptrUsartHandler, uint16_t period);

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

	initSystem();
 8000286:	f000 f861 	bl	800034c <initSystem>
	char hola[10] = "Hola";
 800028a:	4a28      	ldr	r2, [pc, #160]	; (800032c <main+0xac>)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000292:	6018      	str	r0, [r3, #0]
 8000294:	3304      	adds	r3, #4
 8000296:	7019      	strb	r1, [r3, #0]
 8000298:	f107 0309 	add.w	r3, r7, #9
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	711a      	strb	r2, [r3, #4]
	writeMsg(&handlerUSART2, hola);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4822      	ldr	r0, [pc, #136]	; (8000330 <main+0xb0>)
 80002a8:	f001 f81e 	bl	80012e8 <writeMsg>
	stopTimer(&handlerAdcSamplingTimer);
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <main+0xb4>)
 80002ae:	f000 fcae 	bl	8000c0e <stopTimer>
	while(1){

		// Hacemos un "eco" con el valor que nos llega por el serial

		if (rxData != '\0'){
 80002b2:	4b21      	ldr	r3, [pc, #132]	; (8000338 <main+0xb8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d016      	beq.n	80002e8 <main+0x68>
			//writeChar(&handlerUSART2, rxData);
			if (rxData == 's'){
 80002ba:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <main+0xb8>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b73      	cmp	r3, #115	; 0x73
 80002c0:	d101      	bne.n	80002c6 <main+0x46>
				// Lanzamos una nueva conversi√≥n ADC
				startSingleConversion();
 80002c2:	f000 fad3 	bl	800086c <startSingleConversion>
			}
			if (rxData == 'c'){
 80002c6:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <main+0xb8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b63      	cmp	r3, #99	; 0x63
 80002cc:	d102      	bne.n	80002d4 <main+0x54>
				startTimer(&handlerAdcSamplingTimer);
 80002ce:	4819      	ldr	r0, [pc, #100]	; (8000334 <main+0xb4>)
 80002d0:	f000 fc8c 	bl	8000bec <startTimer>
			}
			if (rxData == 'p'){
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <main+0xb8>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b70      	cmp	r3, #112	; 0x70
 80002da:	d102      	bne.n	80002e2 <main+0x62>
				stopTimer(&handlerAdcSamplingTimer);
 80002dc:	4815      	ldr	r0, [pc, #84]	; (8000334 <main+0xb4>)
 80002de:	f000 fc96 	bl	8000c0e <stopTimer>
			}

			rxData = '\0';
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <main+0xb8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
		}

		if (adcIsComplete == true){
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <main+0xbc>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d1e0      	bne.n	80002b2 <main+0x32>
			stopTimer(&handlerAdcSamplingTimer);
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <main+0xb4>)
 80002f2:	f000 fc8c 	bl	8000c0e <stopTimer>
			for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 80002f6:	2300      	movs	r3, #0
 80002f8:	81fb      	strh	r3, [r7, #14]
 80002fa:	e00f      	b.n	800031c <main+0x9c>
				sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
 80002fc:	89fb      	ldrh	r3, [r7, #14]
 80002fe:	4a10      	ldr	r2, [pc, #64]	; (8000340 <main+0xc0>)
 8000300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000304:	461a      	mov	r2, r3
 8000306:	490f      	ldr	r1, [pc, #60]	; (8000344 <main+0xc4>)
 8000308:	480f      	ldr	r0, [pc, #60]	; (8000348 <main+0xc8>)
 800030a:	f001 f8d3 	bl	80014b4 <siprintf>
				writeMsg(&handlerUSART2, bufferData);
 800030e:	490e      	ldr	r1, [pc, #56]	; (8000348 <main+0xc8>)
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <main+0xb0>)
 8000312:	f000 ffe9 	bl	80012e8 <writeMsg>
			for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 8000316:	89fb      	ldrh	r3, [r7, #14]
 8000318:	3301      	adds	r3, #1
 800031a:	81fb      	strh	r3, [r7, #14]
 800031c:	89fb      	ldrh	r3, [r7, #14]
 800031e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000322:	d3eb      	bcc.n	80002fc <main+0x7c>
			}
			adcIsComplete = false;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <main+0xbc>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 800032a:	e7c2      	b.n	80002b2 <main+0x32>
 800032c:	08001dac 	.word	0x08001dac
 8000330:	200000e4 	.word	0x200000e4
 8000334:	200000d4 	.word	0x200000d4
 8000338:	20000176 	.word	0x20000176
 800033c:	20000177 	.word	0x20000177
 8000340:	20000178 	.word	0x20000178
 8000344:	08001da4 	.word	0x08001da4
 8000348:	20000000 	.word	0x20000000

0800034c <initSystem>:


	return 0;
}

void initSystem(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

	// Configuraci√≥n para el State LED
	handlerStateLED.pGPIOx 								= GPIOA;
 8000350:	4b54      	ldr	r3, [pc, #336]	; (80004a4 <initSystem+0x158>)
 8000352:	4a55      	ldr	r2, [pc, #340]	; (80004a8 <initSystem+0x15c>)
 8000354:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000356:	4b53      	ldr	r3, [pc, #332]	; (80004a4 <initSystem+0x158>)
 8000358:	2205      	movs	r2, #5
 800035a:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 800035c:	4b51      	ldr	r3, [pc, #324]	; (80004a4 <initSystem+0x158>)
 800035e:	2201      	movs	r2, #1
 8000360:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8000362:	4b50      	ldr	r3, [pc, #320]	; (80004a4 <initSystem+0x158>)
 8000364:	2200      	movs	r2, #0
 8000366:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Est√° configuraci√≥n no es relevante para el PIN en este caso
 8000368:	4b4e      	ldr	r3, [pc, #312]	; (80004a4 <initSystem+0x158>)
 800036a:	2200      	movs	r2, #0
 800036c:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 800036e:	4b4d      	ldr	r3, [pc, #308]	; (80004a4 <initSystem+0x158>)
 8000370:	2201      	movs	r2, #1
 8000372:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Est√° configuraci√≥n no es relevante para el PIN en este caso
 8000374:	4b4b      	ldr	r3, [pc, #300]	; (80004a4 <initSystem+0x158>)
 8000376:	2200      	movs	r2, #0
 8000378:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del State LED
	GPIO_Config(&handlerStateLED);
 800037a:	484a      	ldr	r0, [pc, #296]	; (80004a4 <initSystem+0x158>)
 800037c:	f000 fc8a 	bl	8000c94 <GPIO_Config>

	// Configuraci√≥n para el Test LED
	handlerTestLED.pGPIOx 								= GPIOB;
 8000380:	4b4a      	ldr	r3, [pc, #296]	; (80004ac <initSystem+0x160>)
 8000382:	4a4b      	ldr	r2, [pc, #300]	; (80004b0 <initSystem+0x164>)
 8000384:	601a      	str	r2, [r3, #0]
	handlerTestLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 8000386:	4b49      	ldr	r3, [pc, #292]	; (80004ac <initSystem+0x160>)
 8000388:	2209      	movs	r2, #9
 800038a:	711a      	strb	r2, [r3, #4]
	handlerTestLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 800038c:	4b47      	ldr	r3, [pc, #284]	; (80004ac <initSystem+0x160>)
 800038e:	2201      	movs	r2, #1
 8000390:	715a      	strb	r2, [r3, #5]
	handlerTestLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8000392:	4b46      	ldr	r3, [pc, #280]	; (80004ac <initSystem+0x160>)
 8000394:	2200      	movs	r2, #0
 8000396:	721a      	strb	r2, [r3, #8]
	handlerTestLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Est√° configuraci√≥n no es relevante para el PIN en este caso
 8000398:	4b44      	ldr	r3, [pc, #272]	; (80004ac <initSystem+0x160>)
 800039a:	2200      	movs	r2, #0
 800039c:	71da      	strb	r2, [r3, #7]
	handlerTestLED.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 800039e:	4b43      	ldr	r3, [pc, #268]	; (80004ac <initSystem+0x160>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	719a      	strb	r2, [r3, #6]
	handlerTestLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Est√° configuraci√≥n no es relevante para el PIN en este caso
 80003a4:	4b41      	ldr	r3, [pc, #260]	; (80004ac <initSystem+0x160>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del State LED
	GPIO_Config(&handlerTestLED);
 80003aa:	4840      	ldr	r0, [pc, #256]	; (80004ac <initSystem+0x160>)
 80003ac:	f000 fc72 	bl	8000c94 <GPIO_Config>

	// Configuraci√≥n del PIN que recibe la informaci√≥n por la USB
	handlerRxPIN.pGPIOx								= GPIOA;
 80003b0:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <initSystem+0x168>)
 80003b2:	4a3d      	ldr	r2, [pc, #244]	; (80004a8 <initSystem+0x15c>)
 80003b4:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 80003b6:	4b3f      	ldr	r3, [pc, #252]	; (80004b4 <initSystem+0x168>)
 80003b8:	2203      	movs	r2, #3
 80003ba:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	; (80004b4 <initSystem+0x168>)
 80003be:	2202      	movs	r2, #2
 80003c0:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003c2:	4b3c      	ldr	r3, [pc, #240]	; (80004b4 <initSystem+0x168>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80003c8:	4b3a      	ldr	r3, [pc, #232]	; (80004b4 <initSystem+0x168>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80003ce:	4b39      	ldr	r3, [pc, #228]	; (80004b4 <initSystem+0x168>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 80003d4:	4b37      	ldr	r3, [pc, #220]	; (80004b4 <initSystem+0x168>)
 80003d6:	2207      	movs	r2, #7
 80003d8:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del Rx PIN
	GPIO_Config(&handlerRxPIN);
 80003da:	4836      	ldr	r0, [pc, #216]	; (80004b4 <initSystem+0x168>)
 80003dc:	f000 fc5a 	bl	8000c94 <GPIO_Config>

	// Configuraci√≥n del PIN que env√≠a la informaci√≥n por la USB (TX)
	handlerTxPIN.pGPIOx								= GPIOA;
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <initSystem+0x16c>)
 80003e2:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <initSystem+0x15c>)
 80003e4:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 80003e6:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <initSystem+0x16c>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <initSystem+0x16c>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003f2:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <initSystem+0x16c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80003f8:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <initSystem+0x16c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80003fe:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <initSystem+0x16c>)
 8000400:	2201      	movs	r2, #1
 8000402:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <initSystem+0x16c>)
 8000406:	2207      	movs	r2, #7
 8000408:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del Tx PIN
	GPIO_Config(&handlerTxPIN);
 800040a:	482b      	ldr	r0, [pc, #172]	; (80004b8 <initSystem+0x16c>)
 800040c:	f000 fc42 	bl	8000c94 <GPIO_Config>

	// Configuraci√≥n del USART2
	handlerUSART2.ptrUSARTx							= USART2;
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <initSystem+0x170>)
 8000412:	4a2b      	ldr	r2, [pc, #172]	; (80004c0 <initSystem+0x174>)
 8000414:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_mode			= USART_MODE_RXTX;
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <initSystem+0x170>)
 8000418:	2202      	movs	r2, #2
 800041a:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <initSystem+0x170>)
 800041e:	2202      	movs	r2, #2
 8000420:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <initSystem+0x170>)
 8000424:	2200      	movs	r2, #0
 8000426:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity			= USART_PARITY_NONE;
 8000428:	4b24      	ldr	r3, [pc, #144]	; (80004bc <initSystem+0x170>)
 800042a:	2200      	movs	r2, #0
 800042c:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <initSystem+0x170>)
 8000430:	2200      	movs	r2, #0
 8000432:	721a      	strb	r2, [r3, #8]
	handlerUSART2.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <initSystem+0x170>)
 8000436:	2201      	movs	r2, #1
 8000438:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del USART
	USART_Config(&handlerUSART2);
 800043a:	4820      	ldr	r0, [pc, #128]	; (80004bc <initSystem+0x170>)
 800043c:	f000 fd92 	bl	8000f64 <USART_Config>

	// Configuraci√≥n del Timer 2
	handlerTIM2.ptrTIMx						= TIM2;
 8000440:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <initSystem+0x178>)
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	601a      	str	r2, [r3, #0]
	handlerTIM2.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <initSystem+0x178>)
 800044a:	2201      	movs	r2, #1
 800044c:	711a      	strb	r2, [r3, #4]
	handlerTIM2.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <initSystem+0x178>)
 8000450:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000454:	80da      	strh	r2, [r3, #6]
	handlerTIM2.timerConfig.Timer_period	= 250;
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <initSystem+0x178>)
 8000458:	22fa      	movs	r2, #250	; 0xfa
 800045a:	609a      	str	r2, [r3, #8]

	//Cargamos la configuraci√≥n TIM2
	BTimer_Config(&handlerTIM2);
 800045c:	4819      	ldr	r0, [pc, #100]	; (80004c4 <initSystem+0x178>)
 800045e:	f000 fb29 	bl	8000ab4 <BTimer_Config>

	// Configuraci√≥n del Timer para el ADC
	handlerAdcSamplingTimer.ptrTIMx						= TIM4;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <initSystem+0x17c>)
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <initSystem+0x180>)
 8000466:	601a      	str	r2, [r3, #0]
	handlerAdcSamplingTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <initSystem+0x17c>)
 800046a:	2201      	movs	r2, #1
 800046c:	711a      	strb	r2, [r3, #4]
	handlerAdcSamplingTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_10us;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <initSystem+0x17c>)
 8000470:	22a0      	movs	r2, #160	; 0xa0
 8000472:	80da      	strh	r2, [r3, #6]
	handlerAdcSamplingTimer.timerConfig.Timer_period	= 2;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <initSystem+0x17c>)
 8000476:	2202      	movs	r2, #2
 8000478:	609a      	str	r2, [r3, #8]

	//Cargamos la configuraci√≥n TIM2
	BTimer_Config(&handlerAdcSamplingTimer);
 800047a:	4813      	ldr	r0, [pc, #76]	; (80004c8 <initSystem+0x17c>)
 800047c:	f000 fb1a 	bl	8000ab4 <BTimer_Config>

	// Configuracion del ADC
	adcConfig.channel			= ADC_CHANNEL_0;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <initSystem+0x184>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
	adcConfig.dataAlignment		= ADC_ALIGNMENT_RIGHT;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <initSystem+0x184>)
 8000488:	2200      	movs	r2, #0
 800048a:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution		= ADC_RESOLUTION_12_BIT;
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <initSystem+0x184>)
 800048e:	2200      	movs	r2, #0
 8000490:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod	= ADC_SAMPLING_PERIOD_3_CYCLES;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <initSystem+0x184>)
 8000494:	2200      	movs	r2, #0
 8000496:	805a      	strh	r2, [r3, #2]

	adc_Config(&adcConfig);
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <initSystem+0x184>)
 800049a:	f000 f91b 	bl	80006d4 <adc_Config>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000094 	.word	0x20000094
 80004a8:	40020000 	.word	0x40020000
 80004ac:	200000a0 	.word	0x200000a0
 80004b0:	40020400 	.word	0x40020400
 80004b4:	200000ac 	.word	0x200000ac
 80004b8:	200000b8 	.word	0x200000b8
 80004bc:	200000e4 	.word	0x200000e4
 80004c0:	40004400 	.word	0x40004400
 80004c4:	200000c4 	.word	0x200000c4
 80004c8:	200000d4 	.word	0x200000d4
 80004cc:	40000800 	.word	0x40000800
 80004d0:	20000170 	.word	0x20000170

080004d4 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <BTimer2_Callback+0x1c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <BTimer2_Callback+0x1c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f082 0220 	eor.w	r2, r2, #32
 80004e6:	615a      	str	r2, [r3, #20]
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	20000094 	.word	0x20000094

080004f4 <BTimer4_Callback>:

/* Implementacion del Callback para el timer4 */
void BTimer4_Callback(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	handlerTestLED.pGPIOx->ODR ^= GPIO_ODR_OD9;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <BTimer4_Callback+0x1c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <BTimer4_Callback+0x1c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8000506:	615a      	str	r2, [r3, #20]
	startSingleConversion();
 8000508:	f000 f9b0 	bl	800086c <startSingleConversion>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000a0 	.word	0x200000a0

08000514 <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000518:	f000 fefe 	bl	8001318 <getRxData>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <Usart2_RX_Callback+0x14>)
 8000522:	701a      	strb	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000176 	.word	0x20000176

0800052c <Usart2_TX_Callback>:

void Usart2_TX_Callback(void){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	__NOP();
 8000530:	bf00      	nop
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <adcComplete_Callback>:

void adcComplete_Callback(void){
 800053c:	b598      	push	{r3, r4, r7, lr}
 800053e:	af00      	add	r7, sp, #0
	adcSignal[dataPosition] = getADC();
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <adcComplete_Callback+0x40>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	461c      	mov	r4, r3
 8000546:	f000 f99f 	bl	8000888 <getADC>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <adcComplete_Callback+0x44>)
 8000550:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <adcComplete_Callback+0x40>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <adcComplete_Callback+0x40>)
 800055e:	801a      	strh	r2, [r3, #0]
	if (dataPosition >= ADC_SIGNAL_SIZE){
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <adcComplete_Callback+0x40>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000568:	d305      	bcc.n	8000576 <adcComplete_Callback+0x3a>
		dataPosition = 0;
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <adcComplete_Callback+0x40>)
 800056c:	2200      	movs	r2, #0
 800056e:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <adcComplete_Callback+0x48>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
	}
}
 8000576:	bf00      	nop
 8000578:	bd98      	pop	{r3, r4, r7, pc}
 800057a:	bf00      	nop
 800057c:	20000578 	.word	0x20000578
 8000580:	20000178 	.word	0x20000178
 8000584:	20000177 	.word	0x20000177

08000588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <_sbrk+0x5c>)
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <_sbrk+0x60>)
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <_sbrk+0x64>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <_sbrk+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d207      	bcs.n	80005c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b8:	f000 ff52 	bl	8001460 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	220c      	movs	r2, #12
 80005c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	e009      	b.n	80005dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <_sbrk+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20020000 	.word	0x20020000
 80005e8:	00000400 	.word	0x00000400
 80005ec:	2000057c 	.word	0x2000057c
 80005f0:	200005a8 	.word	0x200005a8

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f000 ff23 	bl	800146c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fe2b 	bl	8000280 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000638:	08001df4 	.word	0x08001df4
  ldr r2, =_sbss
 800063c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000640:	200005a8 	.word	0x200005a8

08000644 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <BusFault_Handler>
	...

08000648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db0b      	blt.n	8000672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 021f 	and.w	r2, r3, #31
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <__NVIC_EnableIRQ+0x34>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2001      	movs	r0, #1
 800066a:	fa00 f202 	lsl.w	r2, r0, r2
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <adc_Config>:
#include "GPIOxDriver.h"

GPIO_Handler_t 	handlerAdcPin 	= {0};
uint16_t		adcRawData 		= 0;

void adc_Config(ADC_Config_t *adcConfig){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	/* 1. Configuramos el PinX para que cumpla la funci√≥n de canal an√°logo deseado */
	configAnalogPin(adcConfig->channel);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f8f1 	bl	80008c8 <configAnalogPin>

	/* 2. Activamos la se√±al de reloj para el perif√©rico ADC1 (bus APB2) */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006e6:	4b5e      	ldr	r3, [pc, #376]	; (8000860 <adc_Config+0x18c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <adc_Config+0x18c>)
 80006ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurarlos
	ADC1->CR1 = 0;
 80006f2:	4b5c      	ldr	r3, [pc, #368]	; (8000864 <adc_Config+0x190>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 80006f8:	4b5a      	ldr	r3, [pc, #360]	; (8000864 <adc_Config+0x190>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuraci√≥n del ADC1 */
	/* 3. Resoluci√≥n del ADC */
	switch(adcConfig->resolution){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	2b03      	cmp	r3, #3
 8000704:	d83e      	bhi.n	8000784 <adc_Config+0xb0>
 8000706:	a201      	add	r2, pc, #4	; (adr r2, 800070c <adc_Config+0x38>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	0800071d 	.word	0x0800071d
 8000710:	08000737 	.word	0x08000737
 8000714:	08000751 	.word	0x08000751
 8000718:	0800076b 	.word	0x0800076b
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <adc_Config+0x190>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a50      	ldr	r2, [pc, #320]	; (8000864 <adc_Config+0x190>)
 8000722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000726:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8000728:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <adc_Config+0x190>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4a4d      	ldr	r2, [pc, #308]	; (8000864 <adc_Config+0x190>)
 800072e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000732:	6053      	str	r3, [r2, #4]
		break;
 8000734:	e027      	b.n	8000786 <adc_Config+0xb2>
	}
	case ADC_RESOLUTION_10_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <adc_Config+0x190>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	4a4a      	ldr	r2, [pc, #296]	; (8000864 <adc_Config+0x190>)
 800073c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000740:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <adc_Config+0x190>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4a47      	ldr	r2, [pc, #284]	; (8000864 <adc_Config+0x190>)
 8000748:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800074c:	6053      	str	r3, [r2, #4]
		break;
 800074e:	e01a      	b.n	8000786 <adc_Config+0xb2>
	}
	case ADC_RESOLUTION_8_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000750:	4b44      	ldr	r3, [pc, #272]	; (8000864 <adc_Config+0x190>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a43      	ldr	r2, [pc, #268]	; (8000864 <adc_Config+0x190>)
 8000756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800075a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <adc_Config+0x190>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	4a40      	ldr	r2, [pc, #256]	; (8000864 <adc_Config+0x190>)
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000766:	6053      	str	r3, [r2, #4]
		break;
 8000768:	e00d      	b.n	8000786 <adc_Config+0xb2>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <adc_Config+0x190>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <adc_Config+0x190>)
 8000770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000774:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <adc_Config+0x190>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <adc_Config+0x190>)
 800077c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000780:	6053      	str	r3, [r2, #4]
		break;
 8000782:	e000      	b.n	8000786 <adc_Config+0xb2>
	}
	default:
	{
		break;
 8000784:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1->CR1 &= ~ADC_CR1_SCAN;
 8000786:	4b37      	ldr	r3, [pc, #220]	; (8000864 <adc_Config+0x190>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a36      	ldr	r2, [pc, #216]	; (8000864 <adc_Config+0x190>)
 800078c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000790:	6053      	str	r3, [r2, #4]

	/* 5. Configuramos la alineaci√≥n de los datos (derecha o izquierda) */

	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d106      	bne.n	80007a8 <adc_Config+0xd4>
		//Alineaci√≥n a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <adc_Config+0x190>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <adc_Config+0x190>)
 80007a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007a4:	6093      	str	r3, [r2, #8]
 80007a6:	e005      	b.n	80007b4 <adc_Config+0xe0>
	}
	else {
		// Alineaci√≥n a la izquierda (para algunos c√°lculos matem√°ticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <adc_Config+0x190>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <adc_Config+0x190>)
 80007ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b2:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <adc_Config+0x190>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <adc_Config+0x190>)
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	6093      	str	r3, [r2, #8]

	/* 7. Ac√° se deber√≠a configurar el sampling */
	if (adcConfig->channel < ADC_CHANNEL_10){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b09      	cmp	r3, #9
 80007c6:	d810      	bhi.n	80007ea <adc_Config+0x116>
		ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel)));
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <adc_Config+0x190>)
 80007ca:	691a      	ldr	r2, [r3, #16]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	885b      	ldrh	r3, [r3, #2]
 80007d0:	4618      	mov	r0, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	440b      	add	r3, r1
 80007de:	fa00 f303 	lsl.w	r3, r0, r3
 80007e2:	4920      	ldr	r1, [pc, #128]	; (8000864 <adc_Config+0x190>)
 80007e4:	4313      	orrs	r3, r2
 80007e6:	610b      	str	r3, [r1, #16]
 80007e8:	e010      	b.n	800080c <adc_Config+0x138>
	}
	else{
		ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel - 9)));
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <adc_Config+0x190>)
 80007ec:	68d9      	ldr	r1, [r3, #12]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	885b      	ldrh	r3, [r3, #2]
 80007f2:	4618      	mov	r0, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	f1a3 0209 	sub.w	r2, r3, #9
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	fa00 f303 	lsl.w	r3, r0, r3
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <adc_Config+0x190>)
 8000808:	430b      	orrs	r3, r1
 800080a:	60d3      	str	r3, [r2, #12]
	}

	/* 8. Configuramos la secuencia y cuantos elemenos hay en la secuencia */
	// Al hacerlo to.do 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 = 0;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <adc_Config+0x190>)
 800080e:	2200      	movs	r2, #0
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el canal de la conversi√≥n a la primera posici√≥n en la secuencia
	ADC1->SQR3 |= (adcConfig->channel << 0);
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <adc_Config+0x190>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	4611      	mov	r1, r2
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <adc_Config+0x190>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6353      	str	r3, [r2, #52]	; 0x34

	/* 9. Configuramos el preescaler del ADC en 2:1 (el m√°s r√°pido que se puede tener) */
	ADC->CCR = ADC_CCR_ADCPRE_0;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <adc_Config+0x194>)
 8000824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000828:	605a      	str	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082a:	b672      	cpsid	i
}
 800082c:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupci√≥n debida a la finalizaci√≥n de una conversi√≥n EOC */
	ADC1->CR1 |= ADC_CR1_EOCIE;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <adc_Config+0x190>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <adc_Config+0x190>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6053      	str	r3, [r2, #4]

	/* 11.a. Matriculamos la interrupci√≥n en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 800083a:	2012      	movs	r0, #18
 800083c:	f7ff ff04 	bl	8000648 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(ADC_IRQn, 4);
 8000840:	2104      	movs	r1, #4
 8000842:	2012      	movs	r0, #18
 8000844:	f7ff ff1c 	bl	8000680 <__NVIC_SetPriority>

	/* 12. Activamos el m√≥dulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <adc_Config+0x190>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <adc_Config+0x190>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000854:	b662      	cpsie	i
}
 8000856:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40012000 	.word	0x40012000
 8000868:	40012300 	.word	0x40012300

0800086c <startSingleConversion>:

/* */
void startSingleConversion(void){
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversi√≥n ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <startSingleConversion+0x18>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4a03      	ldr	r2, [pc, #12]	; (8000884 <startSingleConversion+0x18>)
 8000876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800087a:	6093      	str	r3, [r2, #8]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40012000 	.word	0x40012000

08000888 <getADC>:
void stopContinuousConversion(void){
	ADC1->CR2 &= ~ADC_CR2_CONT;
}

/* Funci√≥n que me retorna el √∫ltimo dato adquirido por la ADC */
uint16_t getADC(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	return adcRawData;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <getADC+0x10>)
 800088e:	881b      	ldrh	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	2000058c 	.word	0x2000058c

0800089c <ADC_IRQHandler>:

/* Esta es la ISR de la interrupci√≥n por conversi√≥n ADC */
void ADC_IRQHandler(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interupci√≥n por conversi√≥n ADC
	if (ADC1->SR & ADC_SR_EOC){
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <ADC_IRQHandler+0x24>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversi√≥n ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1->DR;
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <ADC_IRQHandler+0x24>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <ADC_IRQHandler+0x28>)
 80008b4:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la funci√≥n que se ejecutar√° en el main
		adcComplete_Callback();
 80008b6:	f7ff fe41 	bl	800053c <adcComplete_Callback>
	}
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40012000 	.word	0x40012000
 80008c4:	2000058c 	.word	0x2000058c

080008c8 <configAnalogPin>:
__attribute__ ((weak)) void adcComplete_Callback(void){
	__NOP();
}

/* con esta funci√≥n configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como an√°logo
	switch (adcChannel){
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	f200 8093 	bhi.w	8000a00 <configAnalogPin+0x138>
 80008da:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <configAnalogPin+0x18>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	08000921 	.word	0x08000921
 80008e4:	0800092f 	.word	0x0800092f
 80008e8:	0800093d 	.word	0x0800093d
 80008ec:	0800094b 	.word	0x0800094b
 80008f0:	08000959 	.word	0x08000959
 80008f4:	08000967 	.word	0x08000967
 80008f8:	08000975 	.word	0x08000975
 80008fc:	08000983 	.word	0x08000983
 8000900:	08000991 	.word	0x08000991
 8000904:	0800099f 	.word	0x0800099f
 8000908:	080009ad 	.word	0x080009ad
 800090c:	080009bb 	.word	0x080009bb
 8000910:	080009c9 	.word	0x080009c9
 8000914:	080009d7 	.word	0x080009d7
 8000918:	080009e5 	.word	0x080009e5
 800091c:	080009f3 	.word	0x080009f3

	case ADC_CHANNEL_0:
	{
		// Es el Pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <configAnalogPin+0x150>)
 8000922:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <configAnalogPin+0x154>)
 8000924:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <configAnalogPin+0x150>)
 8000928:	2200      	movs	r2, #0
 800092a:	711a      	strb	r2, [r3, #4]
		break;
 800092c:	e069      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1:
	{
		//Es el pin PA1
		handlerAdcPin.pGPIOx						= GPIOA;
 800092e:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <configAnalogPin+0x150>)
 8000930:	4a3a      	ldr	r2, [pc, #232]	; (8000a1c <configAnalogPin+0x154>)
 8000932:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <configAnalogPin+0x150>)
 8000936:	2201      	movs	r2, #1
 8000938:	711a      	strb	r2, [r3, #4]
		break;
 800093a:	e062      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_2:
	{
		//Es el pin PA2
		handlerAdcPin.pGPIOx						= GPIOA;
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <configAnalogPin+0x150>)
 800093e:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <configAnalogPin+0x154>)
 8000940:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <configAnalogPin+0x150>)
 8000944:	2202      	movs	r2, #2
 8000946:	711a      	strb	r2, [r3, #4]
		break;
 8000948:	e05b      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_3:
	{
		//Es el pin PA3
		handlerAdcPin.pGPIOx						= GPIOA;
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <configAnalogPin+0x150>)
 800094c:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <configAnalogPin+0x154>)
 800094e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <configAnalogPin+0x150>)
 8000952:	2203      	movs	r2, #3
 8000954:	711a      	strb	r2, [r3, #4]
		break;
 8000956:	e054      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_4:
	{
		//Es el pin PA4
		handlerAdcPin.pGPIOx						= GPIOA;
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <configAnalogPin+0x150>)
 800095a:	4a30      	ldr	r2, [pc, #192]	; (8000a1c <configAnalogPin+0x154>)
 800095c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <configAnalogPin+0x150>)
 8000960:	2204      	movs	r2, #4
 8000962:	711a      	strb	r2, [r3, #4]
		break;
 8000964:	e04d      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_5:
	{
		//Es el pin PA5
		handlerAdcPin.pGPIOx						= GPIOA;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <configAnalogPin+0x150>)
 8000968:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <configAnalogPin+0x154>)
 800096a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <configAnalogPin+0x150>)
 800096e:	2205      	movs	r2, #5
 8000970:	711a      	strb	r2, [r3, #4]
		break;
 8000972:	e046      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6:
	{
		//Es el pin PA6
		handlerAdcPin.pGPIOx						= GPIOA;
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <configAnalogPin+0x150>)
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <configAnalogPin+0x154>)
 8000978:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <configAnalogPin+0x150>)
 800097c:	2206      	movs	r2, #6
 800097e:	711a      	strb	r2, [r3, #4]
		break;
 8000980:	e03f      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7:
	{
		//Es el pin PA7
		handlerAdcPin.pGPIOx						= GPIOA;
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <configAnalogPin+0x150>)
 8000984:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <configAnalogPin+0x154>)
 8000986:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <configAnalogPin+0x150>)
 800098a:	2207      	movs	r2, #7
 800098c:	711a      	strb	r2, [r3, #4]
		break;
 800098e:	e038      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8:
	{
		//Es el pin PB0
		handlerAdcPin.pGPIOx						= GPIOB;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <configAnalogPin+0x150>)
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <configAnalogPin+0x158>)
 8000994:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <configAnalogPin+0x150>)
 8000998:	2200      	movs	r2, #0
 800099a:	711a      	strb	r2, [r3, #4]
		break;
 800099c:	e031      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9:
	{
		//Es el pin PB1
		handlerAdcPin.pGPIOx						= GPIOB;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <configAnalogPin+0x150>)
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <configAnalogPin+0x158>)
 80009a2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <configAnalogPin+0x150>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	711a      	strb	r2, [r3, #4]
		break;
 80009aa:	e02a      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10:
	{
		//Es el pin PC0
		handlerAdcPin.pGPIOx						= GPIOC;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <configAnalogPin+0x150>)
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <configAnalogPin+0x15c>)
 80009b0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <configAnalogPin+0x150>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	711a      	strb	r2, [r3, #4]
		break;
 80009b8:	e023      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11:
	{
		//Es el pin PC1
		handlerAdcPin.pGPIOx						= GPIOC;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <configAnalogPin+0x150>)
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <configAnalogPin+0x15c>)
 80009be:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <configAnalogPin+0x150>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	711a      	strb	r2, [r3, #4]
		break;
 80009c6:	e01c      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12:
	{
		//Es el pin PC2
		handlerAdcPin.pGPIOx						= GPIOC;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <configAnalogPin+0x150>)
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <configAnalogPin+0x15c>)
 80009cc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <configAnalogPin+0x150>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	711a      	strb	r2, [r3, #4]
		break;
 80009d4:	e015      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13:
	{
		//Es el pin PC3
		handlerAdcPin.pGPIOx						= GPIOC;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <configAnalogPin+0x150>)
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <configAnalogPin+0x15c>)
 80009da:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <configAnalogPin+0x150>)
 80009de:	2203      	movs	r2, #3
 80009e0:	711a      	strb	r2, [r3, #4]
		break;
 80009e2:	e00e      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14:
	{
		//Es el pin PC4
		handlerAdcPin.pGPIOx						= GPIOC;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <configAnalogPin+0x150>)
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <configAnalogPin+0x15c>)
 80009e8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <configAnalogPin+0x150>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	711a      	strb	r2, [r3, #4]
		break;
 80009f0:	e007      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15:
	{
		//Es el pin PC5
		handlerAdcPin.pGPIOx						= GPIOC;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <configAnalogPin+0x150>)
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <configAnalogPin+0x15c>)
 80009f6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <configAnalogPin+0x150>)
 80009fa:	2205      	movs	r2, #5
 80009fc:	711a      	strb	r2, [r3, #4]
		break;
 80009fe:	e000      	b.n	8000a02 <configAnalogPin+0x13a>
	}
	default:
	{
		break;
 8000a00:	bf00      	nop
	}
	}

	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <configAnalogPin+0x150>)
 8000a04:	2203      	movs	r2, #3
 8000a06:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <configAnalogPin+0x150>)
 8000a0a:	f000 f943 	bl	8000c94 <GPIO_Config>

}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000580 	.word	0x20000580
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020800 	.word	0x40020800

08000a28 <__NVIC_EnableIRQ>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4906      	ldr	r1, [pc, #24]	; (8000a5c <__NVIC_EnableIRQ+0x34>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <BTimer_Config>:

/*
 * Funci√≥n que configura un Timer b√°sico para que genere interrupcines de forma peri√≥dica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <BTimer_Config+0x128>)
 8000ac2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la se√±al de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d106      	bne.n	8000ae0 <BTimer_Config+0x2c>
		// Activamos la se√±al del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ad2:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <BTimer_Config+0x12c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a42      	ldr	r2, [pc, #264]	; (8000be0 <BTimer_Config+0x12c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	e016      	b.n	8000b0e <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3f      	ldr	r2, [pc, #252]	; (8000be4 <BTimer_Config+0x130>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <BTimer_Config+0x44>
		// Activamos la se√±al del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <BTimer_Config+0x12c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a3c      	ldr	r2, [pc, #240]	; (8000be0 <BTimer_Config+0x12c>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	e00a      	b.n	8000b0e <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a3a      	ldr	r2, [pc, #232]	; (8000be8 <BTimer_Config+0x134>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d105      	bne.n	8000b0e <BTimer_Config+0x5a>
		// Activamos la se√±al del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <BTimer_Config+0x12c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a36      	ldr	r2, [pc, #216]	; (8000be0 <BTimer_Config+0x12c>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d10c      	bne.n	8000b30 <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0210 	bic.w	r2, r2, #16
 8000b24:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000b2e:	e00d      	b.n	8000b4c <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0210 	orr.w	r2, r2, #16
 8000b3e:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuraci√≥n del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	88db      	ldrh	r3, [r3, #6]
 8000b50:	1e5a      	subs	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3a01      	subs	r2, #1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 0201 	orr.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0201 	orr.w	r2, r2, #1
 8000b82:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la se√±al de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8c:	d107      	bne.n	8000b9e <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000b8e:	201c      	movs	r0, #28
 8000b90:	f7ff ff4a 	bl	8000a28 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000b94:	2103      	movs	r1, #3
 8000b96:	201c      	movs	r0, #28
 8000b98:	f7ff ff62 	bl	8000a60 <__NVIC_SetPriority>
 8000b9c:	e018      	b.n	8000bd0 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <BTimer_Config+0x130>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d107      	bne.n	8000bb8 <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000ba8:	201d      	movs	r0, #29
 8000baa:	f7ff ff3d 	bl	8000a28 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8000bae:	2103      	movs	r1, #3
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff ff55 	bl	8000a60 <__NVIC_SetPriority>
 8000bb6:	e00b      	b.n	8000bd0 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <BTimer_Config+0x134>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d106      	bne.n	8000bd0 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000bc2:	201e      	movs	r0, #30
 8000bc4:	f7ff ff30 	bl	8000a28 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 8000bc8:	2103      	movs	r1, #3
 8000bca:	201e      	movs	r0, #30
 8000bcc:	f7ff ff48 	bl	8000a60 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bd0:	b662      	cpsie	i
}
 8000bd2:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000590 	.word	0x20000590
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40000400 	.word	0x40000400
 8000be8:	40000800 	.word	0x40000800

08000bec <startTimer>:

/* Activa el contador para que el timer se incremente */
void startTimer(BTIMER_Handler_t *ptrTimerConfig){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <stopTimer>:

/* Desctiva el contador para que el timer se incremente */
void stopTimer(BTIMER_Handler_t *ptrTimerConfig){
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0201 	bic.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	 __NOP();
 8000c34:	bf00      	nop
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <TIM2_IRQHandler>:
__attribute__((weak)) void BTimer4_Callback(void){
	 __NOP();
}

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8000c52:	f7ff fc3f 	bl	80004d4 <BTimer2_Callback>

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <TIM3_IRQHandler+0x18>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <TIM3_IRQHandler+0x18>)
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000c6c:	f7ff ffe0 	bl	8000c30 <BTimer3_Callback>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40000400 	.word	0x40000400

08000c78 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <TIM4_IRQHandler+0x18>)
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <TIM4_IRQHandler+0x18>)
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000c88:	f7ff fc34 	bl	80004f4 <BTimer4_Callback>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40000800 	.word	0x40000800

08000c94 <GPIO_Config>:
 *  que el sistema permita configurar el perif√©rico X.Lo primero y m√°s importante es activar la se√±al del
 *  reloj principal hacia ese elemento espec√≠fico relacionado con el perif√©rico RCC, a esto llamaremos
 *  simplemente "activar el perif√©rico o activar la se√±al de reloj del perif√©rico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el perif√©rico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a87      	ldr	r2, [pc, #540]	; (8000ec8 <GPIO_Config+0x234>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d106      	bne.n	8000cbc <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000cae:	4b87      	ldr	r3, [pc, #540]	; (8000ecc <GPIO_Config+0x238>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a86      	ldr	r2, [pc, #536]	; (8000ecc <GPIO_Config+0x238>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	e03a      	b.n	8000d32 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a83      	ldr	r2, [pc, #524]	; (8000ed0 <GPIO_Config+0x23c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d106      	bne.n	8000cd4 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000cc6:	4b81      	ldr	r3, [pc, #516]	; (8000ecc <GPIO_Config+0x238>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a80      	ldr	r2, [pc, #512]	; (8000ecc <GPIO_Config+0x238>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	e02e      	b.n	8000d32 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7e      	ldr	r2, [pc, #504]	; (8000ed4 <GPIO_Config+0x240>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d106      	bne.n	8000cec <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <GPIO_Config+0x238>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a7a      	ldr	r2, [pc, #488]	; (8000ecc <GPIO_Config+0x238>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	e022      	b.n	8000d32 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a79      	ldr	r2, [pc, #484]	; (8000ed8 <GPIO_Config+0x244>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d106      	bne.n	8000d04 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000cf6:	4b75      	ldr	r3, [pc, #468]	; (8000ecc <GPIO_Config+0x238>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a74      	ldr	r2, [pc, #464]	; (8000ecc <GPIO_Config+0x238>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	e016      	b.n	8000d32 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a74      	ldr	r2, [pc, #464]	; (8000edc <GPIO_Config+0x248>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d106      	bne.n	8000d1c <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <GPIO_Config+0x238>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a6e      	ldr	r2, [pc, #440]	; (8000ecc <GPIO_Config+0x238>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	e00a      	b.n	8000d32 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a6f      	ldr	r2, [pc, #444]	; (8000ee0 <GPIO_Config+0x24c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d105      	bne.n	8000d32 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000d26:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <GPIO_Config+0x238>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a68      	ldr	r2, [pc, #416]	; (8000ecc <GPIO_Config+0x238>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
	//Despu√©s de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Ac√° estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	795b      	ldrb	r3, [r3, #5]
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits espec√≠ficos de ese registro (0b00)
	// para lo cual aplicamos una m√°scara y una operaci√≥n bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	400a      	ands	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7a1b      	ldrb	r3, [r3, #8]
 8000d76:	461a      	mov	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2301      	movs	r3, #1
 8000d90:	408b      	lsls	r3, r1
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6859      	ldr	r1, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	799b      	ldrb	r3, [r3, #6]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2103      	movs	r1, #3
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	400a      	ands	r2, r1
 8000ddc:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6899      	ldr	r1, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	79db      	ldrb	r3, [r3, #7]
 8000df2:	461a      	mov	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	791b      	ldrb	r3, [r3, #4]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68d9      	ldr	r1, [r3, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	795b      	ldrb	r3, [r3, #5]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d143      	bne.n	8000ebe <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	2b07      	cmp	r3, #7
 8000e3c:	d81f      	bhi.n	8000e7e <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a1a      	ldr	r2, [r3, #32]
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a1a      	ldr	r2, [r3, #32]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7a5b      	ldrb	r3, [r3, #9]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000e7c:	e01f      	b.n	8000ebe <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	3b08      	subs	r3, #8
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8e:	210f      	movs	r1, #15
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7a5b      	ldrb	r3, [r3, #9]
 8000eac:	4619      	mov	r1, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021c00 	.word	0x40021c00

08000ee4 <__NVIC_EnableIRQ>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4906      	ldr	r1, [pc, #24]	; (8000f18 <__NVIC_EnableIRQ+0x34>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_DisableIRQ>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db12      	blt.n	8000f54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	490a      	ldr	r1, [pc, #40]	; (8000f60 <__NVIC_DisableIRQ+0x44>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	3320      	adds	r3, #32
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f48:	f3bf 8f4f 	dsb	sy
}
 8000f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4e:	f3bf 8f6f 	isb	sy
}
 8000f52:	bf00      	nop
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la se√±al de reloj del perif√©rico que se est√° utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la se√±al del reloj que viene desde el BUS al que pertenece el perif√©rico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a88      	ldr	r2, [pc, #544]	; (8001194 <USART_Config+0x230>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000f76:	4b88      	ldr	r3, [pc, #544]	; (8001198 <USART_Config+0x234>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a87      	ldr	r2, [pc, #540]	; (8001198 <USART_Config+0x234>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	e016      	b.n	8000fb2 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a84      	ldr	r2, [pc, #528]	; (800119c <USART_Config+0x238>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000f8e:	4b82      	ldr	r3, [pc, #520]	; (8001198 <USART_Config+0x234>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a81      	ldr	r2, [pc, #516]	; (8001198 <USART_Config+0x234>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	e00a      	b.n	8000fb2 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a7f      	ldr	r2, [pc, #508]	; (80011a0 <USART_Config+0x23c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d105      	bne.n	8000fb2 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000fa6:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <USART_Config+0x234>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a7b      	ldr	r2, [pc, #492]	; (8001198 <USART_Config+0x234>)
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por √∫ltimo activamos el m√≥dulo USART cuando to-do est√° correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuraci√≥n desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuraci√≥n del Parity: */
	//Verificamos si el parity est√° activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d023      	beq.n	8001012 <USART_Config+0xae>
		// Si se entra aqu√≠, entonces se desea el parity-check, as√≠ que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fd8:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	79db      	ldrb	r3, [r3, #7]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d10b      	bne.n	8000ffa <USART_Config+0x96>
			// Es Even, entonces cargamos la configuraci√≥n adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ff0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	719a      	strb	r2, [r3, #6]
 8000ff8:	e013      	b.n	8001022 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuraci√≥n
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	719a      	strb	r2, [r3, #6]
 8001010:	e007      	b.n	8001022 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos ac√°, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001020:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tama√±o del dato */
	// Verificamos si el tama√±o es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	799b      	ldrb	r3, [r3, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e007      	b.n	800104c <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800104a:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7a1b      	ldrb	r3, [r3, #8]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d82f      	bhi.n	80010b4 <USART_Config+0x150>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <USART_Config+0xf8>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800106d 	.word	0x0800106d
 8001060:	0800107f 	.word	0x0800107f
 8001064:	08001091 	.word	0x08001091
 8001068:	080010a3 	.word	0x080010a3
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800107a:	611a      	str	r2, [r3, #16]
		break;
 800107c:	e01a      	b.n	80010b4 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800108c:	611a      	str	r2, [r3, #16]
		break;
 800108e:	e011      	b.n	80010b4 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800109e:	611a      	str	r2, [r3, #16]
		break;
 80010a0:	e008      	b.n	80010b4 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80010b0:	611a      	str	r2, [r3, #16]
		break;
 80010b2:	bf00      	nop
	}
	}

	/* 2.5. Configuraci√≥n del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	795b      	ldrb	r3, [r3, #5]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f240 6283 	movw	r2, #1667	; 0x683
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	e01a      	b.n	80010fe <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	795b      	ldrb	r3, [r3, #5]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d105      	bne.n	80010dc <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f240 3241 	movw	r2, #833	; 0x341
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	e010      	b.n	80010fe <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d104      	bne.n	80010ee <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	228b      	movs	r2, #139	; 0x8b
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	e007      	b.n	80010fe <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	795b      	ldrb	r3, [r3, #5]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d103      	bne.n	80010fe <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2211      	movs	r2, #17
 80010fc:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d84e      	bhi.n	80011a4 <USART_Config+0x240>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <USART_Config+0x1a8>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	0800112f 	.word	0x0800112f
 8001114:	08001141 	.word	0x08001141
 8001118:	08001163 	.word	0x08001163
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0208 	orr.w	r2, r2, #8
 800112a:	60da      	str	r2, [r3, #12]
		break;
 800112c:	e053      	b.n	80011d6 <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0204 	orr.w	r2, r2, #4
 800113c:	60da      	str	r2, [r3, #12]
		break;
 800113e:	e04a      	b.n	80011d6 <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisi√≥n como recepci√≥n
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0204 	orr.w	r2, r2, #4
 800115e:	60da      	str	r2, [r3, #12]
		break;
 8001160:	e039      	b.n	80011d6 <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0208 	bic.w	r2, r2, #8
 8001170:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0204 	bic.w	r2, r2, #4
 8001180:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001190:	60da      	str	r2, [r3, #12]
		break;
 8001192:	e020      	b.n	80011d6 <USART_Config+0x272>
 8001194:	40011000 	.word	0x40011000
 8001198:	40023800 	.word	0x40023800
 800119c:	40004400 	.word	0x40004400
 80011a0:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0208 	bic.w	r2, r2, #8
 80011b2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0204 	bic.w	r2, r2, #4
 80011c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011d2:	60da      	str	r2, [r3, #12]
		break;
 80011d4:	bf00      	nop
	}
	}


	/* 2.7. Activamos el m√≥dulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	791b      	ldrb	r3, [r3, #4]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d007      	beq.n	80011ee <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011ec:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80011ee:	b672      	cpsid	i
}
 80011f0:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7a5b      	ldrb	r3, [r3, #9]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d01a      	beq.n	8001240 <USART_Config+0x2dc>
		/* Activamos la se√±al de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <USART_Config+0x31c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d103      	bne.n	800121c <USART_Config+0x2b8>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001214:	2025      	movs	r0, #37	; 0x25
 8001216:	f7ff fe65 	bl	8000ee4 <__NVIC_EnableIRQ>
 800121a:	e01a      	b.n	8001252 <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <USART_Config+0x320>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d103      	bne.n	800122e <USART_Config+0x2ca>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f7ff fe5c 	bl	8000ee4 <__NVIC_EnableIRQ>
 800122c:	e011      	b.n	8001252 <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <USART_Config+0x324>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d10c      	bne.n	8001252 <USART_Config+0x2ee>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001238:	2047      	movs	r0, #71	; 0x47
 800123a:	f7ff fe53 	bl	8000ee4 <__NVIC_EnableIRQ>
 800123e:	e008      	b.n	8001252 <USART_Config+0x2ee>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 8001240:	2025      	movs	r0, #37	; 0x25
 8001242:	f7ff fe6b 	bl	8000f1c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 8001246:	2026      	movs	r0, #38	; 0x26
 8001248:	f7ff fe68 	bl	8000f1c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 800124c:	2047      	movs	r0, #71	; 0x47
 800124e:	f7ff fe65 	bl	8000f1c <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7a5b      	ldrb	r3, [r3, #9]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d003      	beq.n	8001262 <USART_Config+0x2fe>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7a5b      	ldrb	r3, [r3, #9]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d107      	bne.n	8001272 <USART_Config+0x30e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0220 	orr.w	r2, r2, #32
 8001270:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001272:	b662      	cpsie	i
}
 8001274:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40011000 	.word	0x40011000
 8001284:	40004400 	.word	0x40004400
 8001288:	40011400 	.word	0x40011400

0800128c <writeChar>:

/* Funci√≥n para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7a5b      	ldrb	r3, [r3, #9]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <writeChar+0x1c>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7a5b      	ldrb	r3, [r3, #9]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d10c      	bne.n	80012c2 <writeChar+0x36>
		auxDataToSend = dataToSend;
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <writeChar+0x58>)
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	e00c      	b.n	80012da <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 80012c0:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f7      	beq.n	80012c0 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	605a      	str	r2, [r3, #4]
	}
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000595 	.word	0x20000595

080012e8 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80012f2:	e008      	b.n	8001306 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffc6 	bl	800128c <writeChar>
		msgToSend++;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f2      	bne.n	80012f4 <writeMsg+0xc>
	}
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	return auxRxData;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <getRxData+0x10>)
 800131e:	781b      	ldrb	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000594 	.word	0x20000594

0800132c <Usart1_TX_Callback>:

/*
 * *** Configuraci√≥n de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	 __NOP();
 8001330:	bf00      	nop
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <Usart6_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_TX_Callback(void){
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
	 __NOP();
 800133e:	bf00      	nop
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	 __NOP();
 800134c:	bf00      	nop
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
	 __NOP();
 800135a:	bf00      	nop
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <USART1_IRQHandler+0x48>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <USART1_IRQHandler+0x48>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <USART1_IRQHandler+0x4c>)
 800137c:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 800137e:	f7ff ffe3 	bl	8001348 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 8001382:	e011      	b.n	80013a8 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <USART1_IRQHandler+0x48>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <USART1_IRQHandler+0x50>)
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <USART1_IRQHandler+0x48>)
 8001396:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <USART1_IRQHandler+0x48>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <USART1_IRQHandler+0x48>)
 800139e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013a2:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 80013a4:	f7ff ffc2 	bl	800132c <Usart1_TX_Callback>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40011000 	.word	0x40011000
 80013b0:	20000594 	.word	0x20000594
 80013b4:	20000595 	.word	0x20000595

080013b8 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <USART2_IRQHandler+0x48>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0320 	and.w	r3, r3, #32
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <USART2_IRQHandler+0x48>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <USART2_IRQHandler+0x4c>)
 80013d0:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 80013d2:	f7ff f89f 	bl	8000514 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 80013d6:	e011      	b.n	80013fc <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <USART2_IRQHandler+0x48>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00b      	beq.n	80013fc <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <USART2_IRQHandler+0x50>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <USART2_IRQHandler+0x48>)
 80013ea:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <USART2_IRQHandler+0x48>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <USART2_IRQHandler+0x48>)
 80013f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013f6:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80013f8:	f7ff f898 	bl	800052c <Usart2_TX_Callback>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40004400 	.word	0x40004400
 8001404:	20000594 	.word	0x20000594
 8001408:	20000595 	.word	0x20000595

0800140c <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <USART6_IRQHandler+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <USART6_IRQHandler+0x48>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <USART6_IRQHandler+0x4c>)
 8001424:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 8001426:	f7ff ff96 	bl	8001356 <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 800142a:	e011      	b.n	8001450 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <USART6_IRQHandler+0x48>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <USART6_IRQHandler+0x50>)
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <USART6_IRQHandler+0x48>)
 800143e:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <USART6_IRQHandler+0x48>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4a03      	ldr	r2, [pc, #12]	; (8001454 <USART6_IRQHandler+0x48>)
 8001446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800144a:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 800144c:	f7ff ff75 	bl	800133a <Usart6_TX_Callback>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40011400 	.word	0x40011400
 8001458:	20000594 	.word	0x20000594
 800145c:	20000595 	.word	0x20000595

08001460 <__errno>:
 8001460:	4b01      	ldr	r3, [pc, #4]	; (8001468 <__errno+0x8>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000014 	.word	0x20000014

0800146c <__libc_init_array>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	4d0d      	ldr	r5, [pc, #52]	; (80014a4 <__libc_init_array+0x38>)
 8001470:	4c0d      	ldr	r4, [pc, #52]	; (80014a8 <__libc_init_array+0x3c>)
 8001472:	1b64      	subs	r4, r4, r5
 8001474:	10a4      	asrs	r4, r4, #2
 8001476:	2600      	movs	r6, #0
 8001478:	42a6      	cmp	r6, r4
 800147a:	d109      	bne.n	8001490 <__libc_init_array+0x24>
 800147c:	4d0b      	ldr	r5, [pc, #44]	; (80014ac <__libc_init_array+0x40>)
 800147e:	4c0c      	ldr	r4, [pc, #48]	; (80014b0 <__libc_init_array+0x44>)
 8001480:	f000 fc84 	bl	8001d8c <_init>
 8001484:	1b64      	subs	r4, r4, r5
 8001486:	10a4      	asrs	r4, r4, #2
 8001488:	2600      	movs	r6, #0
 800148a:	42a6      	cmp	r6, r4
 800148c:	d105      	bne.n	800149a <__libc_init_array+0x2e>
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	f855 3b04 	ldr.w	r3, [r5], #4
 8001494:	4798      	blx	r3
 8001496:	3601      	adds	r6, #1
 8001498:	e7ee      	b.n	8001478 <__libc_init_array+0xc>
 800149a:	f855 3b04 	ldr.w	r3, [r5], #4
 800149e:	4798      	blx	r3
 80014a0:	3601      	adds	r6, #1
 80014a2:	e7f2      	b.n	800148a <__libc_init_array+0x1e>
 80014a4:	08001dec 	.word	0x08001dec
 80014a8:	08001dec 	.word	0x08001dec
 80014ac:	08001dec 	.word	0x08001dec
 80014b0:	08001df0 	.word	0x08001df0

080014b4 <siprintf>:
 80014b4:	b40e      	push	{r1, r2, r3}
 80014b6:	b500      	push	{lr}
 80014b8:	b09c      	sub	sp, #112	; 0x70
 80014ba:	ab1d      	add	r3, sp, #116	; 0x74
 80014bc:	9002      	str	r0, [sp, #8]
 80014be:	9006      	str	r0, [sp, #24]
 80014c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <siprintf+0x38>)
 80014c6:	9107      	str	r1, [sp, #28]
 80014c8:	9104      	str	r1, [sp, #16]
 80014ca:	4909      	ldr	r1, [pc, #36]	; (80014f0 <siprintf+0x3c>)
 80014cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80014d0:	9105      	str	r1, [sp, #20]
 80014d2:	6800      	ldr	r0, [r0, #0]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	a902      	add	r1, sp, #8
 80014d8:	f000 f868 	bl	80015ac <_svfiprintf_r>
 80014dc:	9b02      	ldr	r3, [sp, #8]
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	b01c      	add	sp, #112	; 0x70
 80014e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80014e8:	b003      	add	sp, #12
 80014ea:	4770      	bx	lr
 80014ec:	20000014 	.word	0x20000014
 80014f0:	ffff0208 	.word	0xffff0208

080014f4 <__ssputs_r>:
 80014f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014f8:	688e      	ldr	r6, [r1, #8]
 80014fa:	429e      	cmp	r6, r3
 80014fc:	4682      	mov	sl, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	4690      	mov	r8, r2
 8001502:	461f      	mov	r7, r3
 8001504:	d838      	bhi.n	8001578 <__ssputs_r+0x84>
 8001506:	898a      	ldrh	r2, [r1, #12]
 8001508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800150c:	d032      	beq.n	8001574 <__ssputs_r+0x80>
 800150e:	6825      	ldr	r5, [r4, #0]
 8001510:	6909      	ldr	r1, [r1, #16]
 8001512:	eba5 0901 	sub.w	r9, r5, r1
 8001516:	6965      	ldr	r5, [r4, #20]
 8001518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800151c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001520:	3301      	adds	r3, #1
 8001522:	444b      	add	r3, r9
 8001524:	106d      	asrs	r5, r5, #1
 8001526:	429d      	cmp	r5, r3
 8001528:	bf38      	it	cc
 800152a:	461d      	movcc	r5, r3
 800152c:	0553      	lsls	r3, r2, #21
 800152e:	d531      	bpl.n	8001594 <__ssputs_r+0xa0>
 8001530:	4629      	mov	r1, r5
 8001532:	f000 fb61 	bl	8001bf8 <_malloc_r>
 8001536:	4606      	mov	r6, r0
 8001538:	b950      	cbnz	r0, 8001550 <__ssputs_r+0x5c>
 800153a:	230c      	movs	r3, #12
 800153c:	f8ca 3000 	str.w	r3, [sl]
 8001540:	89a3      	ldrh	r3, [r4, #12]
 8001542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001546:	81a3      	strh	r3, [r4, #12]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001550:	6921      	ldr	r1, [r4, #16]
 8001552:	464a      	mov	r2, r9
 8001554:	f000 fabe 	bl	8001ad4 <memcpy>
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001562:	81a3      	strh	r3, [r4, #12]
 8001564:	6126      	str	r6, [r4, #16]
 8001566:	6165      	str	r5, [r4, #20]
 8001568:	444e      	add	r6, r9
 800156a:	eba5 0509 	sub.w	r5, r5, r9
 800156e:	6026      	str	r6, [r4, #0]
 8001570:	60a5      	str	r5, [r4, #8]
 8001572:	463e      	mov	r6, r7
 8001574:	42be      	cmp	r6, r7
 8001576:	d900      	bls.n	800157a <__ssputs_r+0x86>
 8001578:	463e      	mov	r6, r7
 800157a:	6820      	ldr	r0, [r4, #0]
 800157c:	4632      	mov	r2, r6
 800157e:	4641      	mov	r1, r8
 8001580:	f000 fab6 	bl	8001af0 <memmove>
 8001584:	68a3      	ldr	r3, [r4, #8]
 8001586:	1b9b      	subs	r3, r3, r6
 8001588:	60a3      	str	r3, [r4, #8]
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	4433      	add	r3, r6
 800158e:	6023      	str	r3, [r4, #0]
 8001590:	2000      	movs	r0, #0
 8001592:	e7db      	b.n	800154c <__ssputs_r+0x58>
 8001594:	462a      	mov	r2, r5
 8001596:	f000 fba3 	bl	8001ce0 <_realloc_r>
 800159a:	4606      	mov	r6, r0
 800159c:	2800      	cmp	r0, #0
 800159e:	d1e1      	bne.n	8001564 <__ssputs_r+0x70>
 80015a0:	6921      	ldr	r1, [r4, #16]
 80015a2:	4650      	mov	r0, sl
 80015a4:	f000 fabe 	bl	8001b24 <_free_r>
 80015a8:	e7c7      	b.n	800153a <__ssputs_r+0x46>
	...

080015ac <_svfiprintf_r>:
 80015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b0:	4698      	mov	r8, r3
 80015b2:	898b      	ldrh	r3, [r1, #12]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	b09d      	sub	sp, #116	; 0x74
 80015b8:	4607      	mov	r7, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	4614      	mov	r4, r2
 80015be:	d50e      	bpl.n	80015de <_svfiprintf_r+0x32>
 80015c0:	690b      	ldr	r3, [r1, #16]
 80015c2:	b963      	cbnz	r3, 80015de <_svfiprintf_r+0x32>
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	f000 fb17 	bl	8001bf8 <_malloc_r>
 80015ca:	6028      	str	r0, [r5, #0]
 80015cc:	6128      	str	r0, [r5, #16]
 80015ce:	b920      	cbnz	r0, 80015da <_svfiprintf_r+0x2e>
 80015d0:	230c      	movs	r3, #12
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	e0d1      	b.n	800177e <_svfiprintf_r+0x1d2>
 80015da:	2340      	movs	r3, #64	; 0x40
 80015dc:	616b      	str	r3, [r5, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	9309      	str	r3, [sp, #36]	; 0x24
 80015e2:	2320      	movs	r3, #32
 80015e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80015ec:	2330      	movs	r3, #48	; 0x30
 80015ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001798 <_svfiprintf_r+0x1ec>
 80015f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015f6:	f04f 0901 	mov.w	r9, #1
 80015fa:	4623      	mov	r3, r4
 80015fc:	469a      	mov	sl, r3
 80015fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001602:	b10a      	cbz	r2, 8001608 <_svfiprintf_r+0x5c>
 8001604:	2a25      	cmp	r2, #37	; 0x25
 8001606:	d1f9      	bne.n	80015fc <_svfiprintf_r+0x50>
 8001608:	ebba 0b04 	subs.w	fp, sl, r4
 800160c:	d00b      	beq.n	8001626 <_svfiprintf_r+0x7a>
 800160e:	465b      	mov	r3, fp
 8001610:	4622      	mov	r2, r4
 8001612:	4629      	mov	r1, r5
 8001614:	4638      	mov	r0, r7
 8001616:	f7ff ff6d 	bl	80014f4 <__ssputs_r>
 800161a:	3001      	adds	r0, #1
 800161c:	f000 80aa 	beq.w	8001774 <_svfiprintf_r+0x1c8>
 8001620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001622:	445a      	add	r2, fp
 8001624:	9209      	str	r2, [sp, #36]	; 0x24
 8001626:	f89a 3000 	ldrb.w	r3, [sl]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80a2 	beq.w	8001774 <_svfiprintf_r+0x1c8>
 8001630:	2300      	movs	r3, #0
 8001632:	f04f 32ff 	mov.w	r2, #4294967295
 8001636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800163a:	f10a 0a01 	add.w	sl, sl, #1
 800163e:	9304      	str	r3, [sp, #16]
 8001640:	9307      	str	r3, [sp, #28]
 8001642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001646:	931a      	str	r3, [sp, #104]	; 0x68
 8001648:	4654      	mov	r4, sl
 800164a:	2205      	movs	r2, #5
 800164c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001650:	4851      	ldr	r0, [pc, #324]	; (8001798 <_svfiprintf_r+0x1ec>)
 8001652:	f7fe fdc5 	bl	80001e0 <memchr>
 8001656:	9a04      	ldr	r2, [sp, #16]
 8001658:	b9d8      	cbnz	r0, 8001692 <_svfiprintf_r+0xe6>
 800165a:	06d0      	lsls	r0, r2, #27
 800165c:	bf44      	itt	mi
 800165e:	2320      	movmi	r3, #32
 8001660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001664:	0711      	lsls	r1, r2, #28
 8001666:	bf44      	itt	mi
 8001668:	232b      	movmi	r3, #43	; 0x2b
 800166a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800166e:	f89a 3000 	ldrb.w	r3, [sl]
 8001672:	2b2a      	cmp	r3, #42	; 0x2a
 8001674:	d015      	beq.n	80016a2 <_svfiprintf_r+0xf6>
 8001676:	9a07      	ldr	r2, [sp, #28]
 8001678:	4654      	mov	r4, sl
 800167a:	2000      	movs	r0, #0
 800167c:	f04f 0c0a 	mov.w	ip, #10
 8001680:	4621      	mov	r1, r4
 8001682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001686:	3b30      	subs	r3, #48	; 0x30
 8001688:	2b09      	cmp	r3, #9
 800168a:	d94e      	bls.n	800172a <_svfiprintf_r+0x17e>
 800168c:	b1b0      	cbz	r0, 80016bc <_svfiprintf_r+0x110>
 800168e:	9207      	str	r2, [sp, #28]
 8001690:	e014      	b.n	80016bc <_svfiprintf_r+0x110>
 8001692:	eba0 0308 	sub.w	r3, r0, r8
 8001696:	fa09 f303 	lsl.w	r3, r9, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	9304      	str	r3, [sp, #16]
 800169e:	46a2      	mov	sl, r4
 80016a0:	e7d2      	b.n	8001648 <_svfiprintf_r+0x9c>
 80016a2:	9b03      	ldr	r3, [sp, #12]
 80016a4:	1d19      	adds	r1, r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	9103      	str	r1, [sp, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bfbb      	ittet	lt
 80016ae:	425b      	neglt	r3, r3
 80016b0:	f042 0202 	orrlt.w	r2, r2, #2
 80016b4:	9307      	strge	r3, [sp, #28]
 80016b6:	9307      	strlt	r3, [sp, #28]
 80016b8:	bfb8      	it	lt
 80016ba:	9204      	strlt	r2, [sp, #16]
 80016bc:	7823      	ldrb	r3, [r4, #0]
 80016be:	2b2e      	cmp	r3, #46	; 0x2e
 80016c0:	d10c      	bne.n	80016dc <_svfiprintf_r+0x130>
 80016c2:	7863      	ldrb	r3, [r4, #1]
 80016c4:	2b2a      	cmp	r3, #42	; 0x2a
 80016c6:	d135      	bne.n	8001734 <_svfiprintf_r+0x188>
 80016c8:	9b03      	ldr	r3, [sp, #12]
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	9203      	str	r2, [sp, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bfb8      	it	lt
 80016d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80016d8:	3402      	adds	r4, #2
 80016da:	9305      	str	r3, [sp, #20]
 80016dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800179c <_svfiprintf_r+0x1f0>
 80016e0:	7821      	ldrb	r1, [r4, #0]
 80016e2:	2203      	movs	r2, #3
 80016e4:	4650      	mov	r0, sl
 80016e6:	f7fe fd7b 	bl	80001e0 <memchr>
 80016ea:	b140      	cbz	r0, 80016fe <_svfiprintf_r+0x152>
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	eba0 000a 	sub.w	r0, r0, sl
 80016f2:	fa03 f000 	lsl.w	r0, r3, r0
 80016f6:	9b04      	ldr	r3, [sp, #16]
 80016f8:	4303      	orrs	r3, r0
 80016fa:	3401      	adds	r4, #1
 80016fc:	9304      	str	r3, [sp, #16]
 80016fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <_svfiprintf_r+0x1f4>)
 8001704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001708:	2206      	movs	r2, #6
 800170a:	f7fe fd69 	bl	80001e0 <memchr>
 800170e:	2800      	cmp	r0, #0
 8001710:	d038      	beq.n	8001784 <_svfiprintf_r+0x1d8>
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <_svfiprintf_r+0x1f8>)
 8001714:	bb1b      	cbnz	r3, 800175e <_svfiprintf_r+0x1b2>
 8001716:	9b03      	ldr	r3, [sp, #12]
 8001718:	3307      	adds	r3, #7
 800171a:	f023 0307 	bic.w	r3, r3, #7
 800171e:	3308      	adds	r3, #8
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001724:	4433      	add	r3, r6
 8001726:	9309      	str	r3, [sp, #36]	; 0x24
 8001728:	e767      	b.n	80015fa <_svfiprintf_r+0x4e>
 800172a:	fb0c 3202 	mla	r2, ip, r2, r3
 800172e:	460c      	mov	r4, r1
 8001730:	2001      	movs	r0, #1
 8001732:	e7a5      	b.n	8001680 <_svfiprintf_r+0xd4>
 8001734:	2300      	movs	r3, #0
 8001736:	3401      	adds	r4, #1
 8001738:	9305      	str	r3, [sp, #20]
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 0c0a 	mov.w	ip, #10
 8001740:	4620      	mov	r0, r4
 8001742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001746:	3a30      	subs	r2, #48	; 0x30
 8001748:	2a09      	cmp	r2, #9
 800174a:	d903      	bls.n	8001754 <_svfiprintf_r+0x1a8>
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0c5      	beq.n	80016dc <_svfiprintf_r+0x130>
 8001750:	9105      	str	r1, [sp, #20]
 8001752:	e7c3      	b.n	80016dc <_svfiprintf_r+0x130>
 8001754:	fb0c 2101 	mla	r1, ip, r1, r2
 8001758:	4604      	mov	r4, r0
 800175a:	2301      	movs	r3, #1
 800175c:	e7f0      	b.n	8001740 <_svfiprintf_r+0x194>
 800175e:	ab03      	add	r3, sp, #12
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	462a      	mov	r2, r5
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <_svfiprintf_r+0x1fc>)
 8001766:	a904      	add	r1, sp, #16
 8001768:	4638      	mov	r0, r7
 800176a:	f3af 8000 	nop.w
 800176e:	1c42      	adds	r2, r0, #1
 8001770:	4606      	mov	r6, r0
 8001772:	d1d6      	bne.n	8001722 <_svfiprintf_r+0x176>
 8001774:	89ab      	ldrh	r3, [r5, #12]
 8001776:	065b      	lsls	r3, r3, #25
 8001778:	f53f af2c 	bmi.w	80015d4 <_svfiprintf_r+0x28>
 800177c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800177e:	b01d      	add	sp, #116	; 0x74
 8001780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001784:	ab03      	add	r3, sp, #12
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	462a      	mov	r2, r5
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <_svfiprintf_r+0x1fc>)
 800178c:	a904      	add	r1, sp, #16
 800178e:	4638      	mov	r0, r7
 8001790:	f000 f87a 	bl	8001888 <_printf_i>
 8001794:	e7eb      	b.n	800176e <_svfiprintf_r+0x1c2>
 8001796:	bf00      	nop
 8001798:	08001db6 	.word	0x08001db6
 800179c:	08001dbc 	.word	0x08001dbc
 80017a0:	08001dc0 	.word	0x08001dc0
 80017a4:	00000000 	.word	0x00000000
 80017a8:	080014f5 	.word	0x080014f5

080017ac <_printf_common>:
 80017ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b0:	4616      	mov	r6, r2
 80017b2:	4699      	mov	r9, r3
 80017b4:	688a      	ldr	r2, [r1, #8]
 80017b6:	690b      	ldr	r3, [r1, #16]
 80017b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017bc:	4293      	cmp	r3, r2
 80017be:	bfb8      	it	lt
 80017c0:	4613      	movlt	r3, r2
 80017c2:	6033      	str	r3, [r6, #0]
 80017c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017c8:	4607      	mov	r7, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	b10a      	cbz	r2, 80017d2 <_printf_common+0x26>
 80017ce:	3301      	adds	r3, #1
 80017d0:	6033      	str	r3, [r6, #0]
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	0699      	lsls	r1, r3, #26
 80017d6:	bf42      	ittt	mi
 80017d8:	6833      	ldrmi	r3, [r6, #0]
 80017da:	3302      	addmi	r3, #2
 80017dc:	6033      	strmi	r3, [r6, #0]
 80017de:	6825      	ldr	r5, [r4, #0]
 80017e0:	f015 0506 	ands.w	r5, r5, #6
 80017e4:	d106      	bne.n	80017f4 <_printf_common+0x48>
 80017e6:	f104 0a19 	add.w	sl, r4, #25
 80017ea:	68e3      	ldr	r3, [r4, #12]
 80017ec:	6832      	ldr	r2, [r6, #0]
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	42ab      	cmp	r3, r5
 80017f2:	dc26      	bgt.n	8001842 <_printf_common+0x96>
 80017f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017f8:	1e13      	subs	r3, r2, #0
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	bf18      	it	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	0692      	lsls	r2, r2, #26
 8001802:	d42b      	bmi.n	800185c <_printf_common+0xb0>
 8001804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001808:	4649      	mov	r1, r9
 800180a:	4638      	mov	r0, r7
 800180c:	47c0      	blx	r8
 800180e:	3001      	adds	r0, #1
 8001810:	d01e      	beq.n	8001850 <_printf_common+0xa4>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	68e5      	ldr	r5, [r4, #12]
 8001816:	6832      	ldr	r2, [r6, #0]
 8001818:	f003 0306 	and.w	r3, r3, #6
 800181c:	2b04      	cmp	r3, #4
 800181e:	bf08      	it	eq
 8001820:	1aad      	subeq	r5, r5, r2
 8001822:	68a3      	ldr	r3, [r4, #8]
 8001824:	6922      	ldr	r2, [r4, #16]
 8001826:	bf0c      	ite	eq
 8001828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800182c:	2500      	movne	r5, #0
 800182e:	4293      	cmp	r3, r2
 8001830:	bfc4      	itt	gt
 8001832:	1a9b      	subgt	r3, r3, r2
 8001834:	18ed      	addgt	r5, r5, r3
 8001836:	2600      	movs	r6, #0
 8001838:	341a      	adds	r4, #26
 800183a:	42b5      	cmp	r5, r6
 800183c:	d11a      	bne.n	8001874 <_printf_common+0xc8>
 800183e:	2000      	movs	r0, #0
 8001840:	e008      	b.n	8001854 <_printf_common+0xa8>
 8001842:	2301      	movs	r3, #1
 8001844:	4652      	mov	r2, sl
 8001846:	4649      	mov	r1, r9
 8001848:	4638      	mov	r0, r7
 800184a:	47c0      	blx	r8
 800184c:	3001      	adds	r0, #1
 800184e:	d103      	bne.n	8001858 <_printf_common+0xac>
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001858:	3501      	adds	r5, #1
 800185a:	e7c6      	b.n	80017ea <_printf_common+0x3e>
 800185c:	18e1      	adds	r1, r4, r3
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	2030      	movs	r0, #48	; 0x30
 8001862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001866:	4422      	add	r2, r4
 8001868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800186c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001870:	3302      	adds	r3, #2
 8001872:	e7c7      	b.n	8001804 <_printf_common+0x58>
 8001874:	2301      	movs	r3, #1
 8001876:	4622      	mov	r2, r4
 8001878:	4649      	mov	r1, r9
 800187a:	4638      	mov	r0, r7
 800187c:	47c0      	blx	r8
 800187e:	3001      	adds	r0, #1
 8001880:	d0e6      	beq.n	8001850 <_printf_common+0xa4>
 8001882:	3601      	adds	r6, #1
 8001884:	e7d9      	b.n	800183a <_printf_common+0x8e>
	...

08001888 <_printf_i>:
 8001888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800188c:	7e0f      	ldrb	r7, [r1, #24]
 800188e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001890:	2f78      	cmp	r7, #120	; 0x78
 8001892:	4691      	mov	r9, r2
 8001894:	4680      	mov	r8, r0
 8001896:	460c      	mov	r4, r1
 8001898:	469a      	mov	sl, r3
 800189a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800189e:	d807      	bhi.n	80018b0 <_printf_i+0x28>
 80018a0:	2f62      	cmp	r7, #98	; 0x62
 80018a2:	d80a      	bhi.n	80018ba <_printf_i+0x32>
 80018a4:	2f00      	cmp	r7, #0
 80018a6:	f000 80d8 	beq.w	8001a5a <_printf_i+0x1d2>
 80018aa:	2f58      	cmp	r7, #88	; 0x58
 80018ac:	f000 80a3 	beq.w	80019f6 <_printf_i+0x16e>
 80018b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80018b8:	e03a      	b.n	8001930 <_printf_i+0xa8>
 80018ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80018be:	2b15      	cmp	r3, #21
 80018c0:	d8f6      	bhi.n	80018b0 <_printf_i+0x28>
 80018c2:	a101      	add	r1, pc, #4	; (adr r1, 80018c8 <_printf_i+0x40>)
 80018c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018c8:	08001921 	.word	0x08001921
 80018cc:	08001935 	.word	0x08001935
 80018d0:	080018b1 	.word	0x080018b1
 80018d4:	080018b1 	.word	0x080018b1
 80018d8:	080018b1 	.word	0x080018b1
 80018dc:	080018b1 	.word	0x080018b1
 80018e0:	08001935 	.word	0x08001935
 80018e4:	080018b1 	.word	0x080018b1
 80018e8:	080018b1 	.word	0x080018b1
 80018ec:	080018b1 	.word	0x080018b1
 80018f0:	080018b1 	.word	0x080018b1
 80018f4:	08001a41 	.word	0x08001a41
 80018f8:	08001965 	.word	0x08001965
 80018fc:	08001a23 	.word	0x08001a23
 8001900:	080018b1 	.word	0x080018b1
 8001904:	080018b1 	.word	0x080018b1
 8001908:	08001a63 	.word	0x08001a63
 800190c:	080018b1 	.word	0x080018b1
 8001910:	08001965 	.word	0x08001965
 8001914:	080018b1 	.word	0x080018b1
 8001918:	080018b1 	.word	0x080018b1
 800191c:	08001a2b 	.word	0x08001a2b
 8001920:	682b      	ldr	r3, [r5, #0]
 8001922:	1d1a      	adds	r2, r3, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	602a      	str	r2, [r5, #0]
 8001928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800192c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001930:	2301      	movs	r3, #1
 8001932:	e0a3      	b.n	8001a7c <_printf_i+0x1f4>
 8001934:	6820      	ldr	r0, [r4, #0]
 8001936:	6829      	ldr	r1, [r5, #0]
 8001938:	0606      	lsls	r6, r0, #24
 800193a:	f101 0304 	add.w	r3, r1, #4
 800193e:	d50a      	bpl.n	8001956 <_printf_i+0xce>
 8001940:	680e      	ldr	r6, [r1, #0]
 8001942:	602b      	str	r3, [r5, #0]
 8001944:	2e00      	cmp	r6, #0
 8001946:	da03      	bge.n	8001950 <_printf_i+0xc8>
 8001948:	232d      	movs	r3, #45	; 0x2d
 800194a:	4276      	negs	r6, r6
 800194c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001950:	485e      	ldr	r0, [pc, #376]	; (8001acc <_printf_i+0x244>)
 8001952:	230a      	movs	r3, #10
 8001954:	e019      	b.n	800198a <_printf_i+0x102>
 8001956:	680e      	ldr	r6, [r1, #0]
 8001958:	602b      	str	r3, [r5, #0]
 800195a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800195e:	bf18      	it	ne
 8001960:	b236      	sxthne	r6, r6
 8001962:	e7ef      	b.n	8001944 <_printf_i+0xbc>
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	1d19      	adds	r1, r3, #4
 800196a:	6029      	str	r1, [r5, #0]
 800196c:	0601      	lsls	r1, r0, #24
 800196e:	d501      	bpl.n	8001974 <_printf_i+0xec>
 8001970:	681e      	ldr	r6, [r3, #0]
 8001972:	e002      	b.n	800197a <_printf_i+0xf2>
 8001974:	0646      	lsls	r6, r0, #25
 8001976:	d5fb      	bpl.n	8001970 <_printf_i+0xe8>
 8001978:	881e      	ldrh	r6, [r3, #0]
 800197a:	4854      	ldr	r0, [pc, #336]	; (8001acc <_printf_i+0x244>)
 800197c:	2f6f      	cmp	r7, #111	; 0x6f
 800197e:	bf0c      	ite	eq
 8001980:	2308      	moveq	r3, #8
 8001982:	230a      	movne	r3, #10
 8001984:	2100      	movs	r1, #0
 8001986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800198a:	6865      	ldr	r5, [r4, #4]
 800198c:	60a5      	str	r5, [r4, #8]
 800198e:	2d00      	cmp	r5, #0
 8001990:	bfa2      	ittt	ge
 8001992:	6821      	ldrge	r1, [r4, #0]
 8001994:	f021 0104 	bicge.w	r1, r1, #4
 8001998:	6021      	strge	r1, [r4, #0]
 800199a:	b90e      	cbnz	r6, 80019a0 <_printf_i+0x118>
 800199c:	2d00      	cmp	r5, #0
 800199e:	d04d      	beq.n	8001a3c <_printf_i+0x1b4>
 80019a0:	4615      	mov	r5, r2
 80019a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80019a6:	fb03 6711 	mls	r7, r3, r1, r6
 80019aa:	5dc7      	ldrb	r7, [r0, r7]
 80019ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80019b0:	4637      	mov	r7, r6
 80019b2:	42bb      	cmp	r3, r7
 80019b4:	460e      	mov	r6, r1
 80019b6:	d9f4      	bls.n	80019a2 <_printf_i+0x11a>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d10b      	bne.n	80019d4 <_printf_i+0x14c>
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	07de      	lsls	r6, r3, #31
 80019c0:	d508      	bpl.n	80019d4 <_printf_i+0x14c>
 80019c2:	6923      	ldr	r3, [r4, #16]
 80019c4:	6861      	ldr	r1, [r4, #4]
 80019c6:	4299      	cmp	r1, r3
 80019c8:	bfde      	ittt	le
 80019ca:	2330      	movle	r3, #48	; 0x30
 80019cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80019d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80019d4:	1b52      	subs	r2, r2, r5
 80019d6:	6122      	str	r2, [r4, #16]
 80019d8:	f8cd a000 	str.w	sl, [sp]
 80019dc:	464b      	mov	r3, r9
 80019de:	aa03      	add	r2, sp, #12
 80019e0:	4621      	mov	r1, r4
 80019e2:	4640      	mov	r0, r8
 80019e4:	f7ff fee2 	bl	80017ac <_printf_common>
 80019e8:	3001      	adds	r0, #1
 80019ea:	d14c      	bne.n	8001a86 <_printf_i+0x1fe>
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	b004      	add	sp, #16
 80019f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019f6:	4835      	ldr	r0, [pc, #212]	; (8001acc <_printf_i+0x244>)
 80019f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80019fc:	6829      	ldr	r1, [r5, #0]
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a04:	6029      	str	r1, [r5, #0]
 8001a06:	061d      	lsls	r5, r3, #24
 8001a08:	d514      	bpl.n	8001a34 <_printf_i+0x1ac>
 8001a0a:	07df      	lsls	r7, r3, #31
 8001a0c:	bf44      	itt	mi
 8001a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8001a12:	6023      	strmi	r3, [r4, #0]
 8001a14:	b91e      	cbnz	r6, 8001a1e <_printf_i+0x196>
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	f023 0320 	bic.w	r3, r3, #32
 8001a1c:	6023      	str	r3, [r4, #0]
 8001a1e:	2310      	movs	r3, #16
 8001a20:	e7b0      	b.n	8001984 <_printf_i+0xfc>
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f043 0320 	orr.w	r3, r3, #32
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	2378      	movs	r3, #120	; 0x78
 8001a2c:	4828      	ldr	r0, [pc, #160]	; (8001ad0 <_printf_i+0x248>)
 8001a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a32:	e7e3      	b.n	80019fc <_printf_i+0x174>
 8001a34:	0659      	lsls	r1, r3, #25
 8001a36:	bf48      	it	mi
 8001a38:	b2b6      	uxthmi	r6, r6
 8001a3a:	e7e6      	b.n	8001a0a <_printf_i+0x182>
 8001a3c:	4615      	mov	r5, r2
 8001a3e:	e7bb      	b.n	80019b8 <_printf_i+0x130>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	6826      	ldr	r6, [r4, #0]
 8001a44:	6961      	ldr	r1, [r4, #20]
 8001a46:	1d18      	adds	r0, r3, #4
 8001a48:	6028      	str	r0, [r5, #0]
 8001a4a:	0635      	lsls	r5, r6, #24
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	d501      	bpl.n	8001a54 <_printf_i+0x1cc>
 8001a50:	6019      	str	r1, [r3, #0]
 8001a52:	e002      	b.n	8001a5a <_printf_i+0x1d2>
 8001a54:	0670      	lsls	r0, r6, #25
 8001a56:	d5fb      	bpl.n	8001a50 <_printf_i+0x1c8>
 8001a58:	8019      	strh	r1, [r3, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	6123      	str	r3, [r4, #16]
 8001a5e:	4615      	mov	r5, r2
 8001a60:	e7ba      	b.n	80019d8 <_printf_i+0x150>
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	602a      	str	r2, [r5, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	6862      	ldr	r2, [r4, #4]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f7fe fbb6 	bl	80001e0 <memchr>
 8001a74:	b108      	cbz	r0, 8001a7a <_printf_i+0x1f2>
 8001a76:	1b40      	subs	r0, r0, r5
 8001a78:	6060      	str	r0, [r4, #4]
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	6123      	str	r3, [r4, #16]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a84:	e7a8      	b.n	80019d8 <_printf_i+0x150>
 8001a86:	6923      	ldr	r3, [r4, #16]
 8001a88:	462a      	mov	r2, r5
 8001a8a:	4649      	mov	r1, r9
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	47d0      	blx	sl
 8001a90:	3001      	adds	r0, #1
 8001a92:	d0ab      	beq.n	80019ec <_printf_i+0x164>
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	079b      	lsls	r3, r3, #30
 8001a98:	d413      	bmi.n	8001ac2 <_printf_i+0x23a>
 8001a9a:	68e0      	ldr	r0, [r4, #12]
 8001a9c:	9b03      	ldr	r3, [sp, #12]
 8001a9e:	4298      	cmp	r0, r3
 8001aa0:	bfb8      	it	lt
 8001aa2:	4618      	movlt	r0, r3
 8001aa4:	e7a4      	b.n	80019f0 <_printf_i+0x168>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	4649      	mov	r1, r9
 8001aac:	4640      	mov	r0, r8
 8001aae:	47d0      	blx	sl
 8001ab0:	3001      	adds	r0, #1
 8001ab2:	d09b      	beq.n	80019ec <_printf_i+0x164>
 8001ab4:	3501      	adds	r5, #1
 8001ab6:	68e3      	ldr	r3, [r4, #12]
 8001ab8:	9903      	ldr	r1, [sp, #12]
 8001aba:	1a5b      	subs	r3, r3, r1
 8001abc:	42ab      	cmp	r3, r5
 8001abe:	dcf2      	bgt.n	8001aa6 <_printf_i+0x21e>
 8001ac0:	e7eb      	b.n	8001a9a <_printf_i+0x212>
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	f104 0619 	add.w	r6, r4, #25
 8001ac8:	e7f5      	b.n	8001ab6 <_printf_i+0x22e>
 8001aca:	bf00      	nop
 8001acc:	08001dc7 	.word	0x08001dc7
 8001ad0:	08001dd8 	.word	0x08001dd8

08001ad4 <memcpy>:
 8001ad4:	440a      	add	r2, r1
 8001ad6:	4291      	cmp	r1, r2
 8001ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001adc:	d100      	bne.n	8001ae0 <memcpy+0xc>
 8001ade:	4770      	bx	lr
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001aea:	4291      	cmp	r1, r2
 8001aec:	d1f9      	bne.n	8001ae2 <memcpy+0xe>
 8001aee:	bd10      	pop	{r4, pc}

08001af0 <memmove>:
 8001af0:	4288      	cmp	r0, r1
 8001af2:	b510      	push	{r4, lr}
 8001af4:	eb01 0402 	add.w	r4, r1, r2
 8001af8:	d902      	bls.n	8001b00 <memmove+0x10>
 8001afa:	4284      	cmp	r4, r0
 8001afc:	4623      	mov	r3, r4
 8001afe:	d807      	bhi.n	8001b10 <memmove+0x20>
 8001b00:	1e43      	subs	r3, r0, #1
 8001b02:	42a1      	cmp	r1, r4
 8001b04:	d008      	beq.n	8001b18 <memmove+0x28>
 8001b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b0e:	e7f8      	b.n	8001b02 <memmove+0x12>
 8001b10:	4402      	add	r2, r0
 8001b12:	4601      	mov	r1, r0
 8001b14:	428a      	cmp	r2, r1
 8001b16:	d100      	bne.n	8001b1a <memmove+0x2a>
 8001b18:	bd10      	pop	{r4, pc}
 8001b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b22:	e7f7      	b.n	8001b14 <memmove+0x24>

08001b24 <_free_r>:
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	4605      	mov	r5, r0
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d041      	beq.n	8001bb0 <_free_r+0x8c>
 8001b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b30:	1f0c      	subs	r4, r1, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bfb8      	it	lt
 8001b36:	18e4      	addlt	r4, r4, r3
 8001b38:	f000 f912 	bl	8001d60 <__malloc_lock>
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <_free_r+0x90>)
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	b933      	cbnz	r3, 8001b50 <_free_r+0x2c>
 8001b42:	6063      	str	r3, [r4, #4]
 8001b44:	6014      	str	r4, [r2, #0]
 8001b46:	4628      	mov	r0, r5
 8001b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b4c:	f000 b90e 	b.w	8001d6c <__malloc_unlock>
 8001b50:	42a3      	cmp	r3, r4
 8001b52:	d908      	bls.n	8001b66 <_free_r+0x42>
 8001b54:	6820      	ldr	r0, [r4, #0]
 8001b56:	1821      	adds	r1, r4, r0
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	bf01      	itttt	eq
 8001b5c:	6819      	ldreq	r1, [r3, #0]
 8001b5e:	685b      	ldreq	r3, [r3, #4]
 8001b60:	1809      	addeq	r1, r1, r0
 8001b62:	6021      	streq	r1, [r4, #0]
 8001b64:	e7ed      	b.n	8001b42 <_free_r+0x1e>
 8001b66:	461a      	mov	r2, r3
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	b10b      	cbz	r3, 8001b70 <_free_r+0x4c>
 8001b6c:	42a3      	cmp	r3, r4
 8001b6e:	d9fa      	bls.n	8001b66 <_free_r+0x42>
 8001b70:	6811      	ldr	r1, [r2, #0]
 8001b72:	1850      	adds	r0, r2, r1
 8001b74:	42a0      	cmp	r0, r4
 8001b76:	d10b      	bne.n	8001b90 <_free_r+0x6c>
 8001b78:	6820      	ldr	r0, [r4, #0]
 8001b7a:	4401      	add	r1, r0
 8001b7c:	1850      	adds	r0, r2, r1
 8001b7e:	4283      	cmp	r3, r0
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	d1e0      	bne.n	8001b46 <_free_r+0x22>
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	6053      	str	r3, [r2, #4]
 8001b8a:	4401      	add	r1, r0
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	e7da      	b.n	8001b46 <_free_r+0x22>
 8001b90:	d902      	bls.n	8001b98 <_free_r+0x74>
 8001b92:	230c      	movs	r3, #12
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	e7d6      	b.n	8001b46 <_free_r+0x22>
 8001b98:	6820      	ldr	r0, [r4, #0]
 8001b9a:	1821      	adds	r1, r4, r0
 8001b9c:	428b      	cmp	r3, r1
 8001b9e:	bf04      	itt	eq
 8001ba0:	6819      	ldreq	r1, [r3, #0]
 8001ba2:	685b      	ldreq	r3, [r3, #4]
 8001ba4:	6063      	str	r3, [r4, #4]
 8001ba6:	bf04      	itt	eq
 8001ba8:	1809      	addeq	r1, r1, r0
 8001baa:	6021      	streq	r1, [r4, #0]
 8001bac:	6054      	str	r4, [r2, #4]
 8001bae:	e7ca      	b.n	8001b46 <_free_r+0x22>
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000598 	.word	0x20000598

08001bb8 <sbrk_aligned>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	4e0e      	ldr	r6, [pc, #56]	; (8001bf4 <sbrk_aligned+0x3c>)
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	6831      	ldr	r1, [r6, #0]
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	b911      	cbnz	r1, 8001bca <sbrk_aligned+0x12>
 8001bc4:	f000 f8bc 	bl	8001d40 <_sbrk_r>
 8001bc8:	6030      	str	r0, [r6, #0]
 8001bca:	4621      	mov	r1, r4
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f000 f8b7 	bl	8001d40 <_sbrk_r>
 8001bd2:	1c43      	adds	r3, r0, #1
 8001bd4:	d00a      	beq.n	8001bec <sbrk_aligned+0x34>
 8001bd6:	1cc4      	adds	r4, r0, #3
 8001bd8:	f024 0403 	bic.w	r4, r4, #3
 8001bdc:	42a0      	cmp	r0, r4
 8001bde:	d007      	beq.n	8001bf0 <sbrk_aligned+0x38>
 8001be0:	1a21      	subs	r1, r4, r0
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 f8ac 	bl	8001d40 <_sbrk_r>
 8001be8:	3001      	adds	r0, #1
 8001bea:	d101      	bne.n	8001bf0 <sbrk_aligned+0x38>
 8001bec:	f04f 34ff 	mov.w	r4, #4294967295
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	2000059c 	.word	0x2000059c

08001bf8 <_malloc_r>:
 8001bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bfc:	1ccd      	adds	r5, r1, #3
 8001bfe:	f025 0503 	bic.w	r5, r5, #3
 8001c02:	3508      	adds	r5, #8
 8001c04:	2d0c      	cmp	r5, #12
 8001c06:	bf38      	it	cc
 8001c08:	250c      	movcc	r5, #12
 8001c0a:	2d00      	cmp	r5, #0
 8001c0c:	4607      	mov	r7, r0
 8001c0e:	db01      	blt.n	8001c14 <_malloc_r+0x1c>
 8001c10:	42a9      	cmp	r1, r5
 8001c12:	d905      	bls.n	8001c20 <_malloc_r+0x28>
 8001c14:	230c      	movs	r3, #12
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	2600      	movs	r6, #0
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c20:	4e2e      	ldr	r6, [pc, #184]	; (8001cdc <_malloc_r+0xe4>)
 8001c22:	f000 f89d 	bl	8001d60 <__malloc_lock>
 8001c26:	6833      	ldr	r3, [r6, #0]
 8001c28:	461c      	mov	r4, r3
 8001c2a:	bb34      	cbnz	r4, 8001c7a <_malloc_r+0x82>
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4638      	mov	r0, r7
 8001c30:	f7ff ffc2 	bl	8001bb8 <sbrk_aligned>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	4604      	mov	r4, r0
 8001c38:	d14d      	bne.n	8001cd6 <_malloc_r+0xde>
 8001c3a:	6834      	ldr	r4, [r6, #0]
 8001c3c:	4626      	mov	r6, r4
 8001c3e:	2e00      	cmp	r6, #0
 8001c40:	d140      	bne.n	8001cc4 <_malloc_r+0xcc>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	4631      	mov	r1, r6
 8001c46:	4638      	mov	r0, r7
 8001c48:	eb04 0803 	add.w	r8, r4, r3
 8001c4c:	f000 f878 	bl	8001d40 <_sbrk_r>
 8001c50:	4580      	cmp	r8, r0
 8001c52:	d13a      	bne.n	8001cca <_malloc_r+0xd2>
 8001c54:	6821      	ldr	r1, [r4, #0]
 8001c56:	3503      	adds	r5, #3
 8001c58:	1a6d      	subs	r5, r5, r1
 8001c5a:	f025 0503 	bic.w	r5, r5, #3
 8001c5e:	3508      	adds	r5, #8
 8001c60:	2d0c      	cmp	r5, #12
 8001c62:	bf38      	it	cc
 8001c64:	250c      	movcc	r5, #12
 8001c66:	4629      	mov	r1, r5
 8001c68:	4638      	mov	r0, r7
 8001c6a:	f7ff ffa5 	bl	8001bb8 <sbrk_aligned>
 8001c6e:	3001      	adds	r0, #1
 8001c70:	d02b      	beq.n	8001cca <_malloc_r+0xd2>
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	442b      	add	r3, r5
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	e00e      	b.n	8001c98 <_malloc_r+0xa0>
 8001c7a:	6822      	ldr	r2, [r4, #0]
 8001c7c:	1b52      	subs	r2, r2, r5
 8001c7e:	d41e      	bmi.n	8001cbe <_malloc_r+0xc6>
 8001c80:	2a0b      	cmp	r2, #11
 8001c82:	d916      	bls.n	8001cb2 <_malloc_r+0xba>
 8001c84:	1961      	adds	r1, r4, r5
 8001c86:	42a3      	cmp	r3, r4
 8001c88:	6025      	str	r5, [r4, #0]
 8001c8a:	bf18      	it	ne
 8001c8c:	6059      	strne	r1, [r3, #4]
 8001c8e:	6863      	ldr	r3, [r4, #4]
 8001c90:	bf08      	it	eq
 8001c92:	6031      	streq	r1, [r6, #0]
 8001c94:	5162      	str	r2, [r4, r5]
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	4638      	mov	r0, r7
 8001c9a:	f104 060b 	add.w	r6, r4, #11
 8001c9e:	f000 f865 	bl	8001d6c <__malloc_unlock>
 8001ca2:	f026 0607 	bic.w	r6, r6, #7
 8001ca6:	1d23      	adds	r3, r4, #4
 8001ca8:	1af2      	subs	r2, r6, r3
 8001caa:	d0b6      	beq.n	8001c1a <_malloc_r+0x22>
 8001cac:	1b9b      	subs	r3, r3, r6
 8001cae:	50a3      	str	r3, [r4, r2]
 8001cb0:	e7b3      	b.n	8001c1a <_malloc_r+0x22>
 8001cb2:	6862      	ldr	r2, [r4, #4]
 8001cb4:	42a3      	cmp	r3, r4
 8001cb6:	bf0c      	ite	eq
 8001cb8:	6032      	streq	r2, [r6, #0]
 8001cba:	605a      	strne	r2, [r3, #4]
 8001cbc:	e7ec      	b.n	8001c98 <_malloc_r+0xa0>
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	6864      	ldr	r4, [r4, #4]
 8001cc2:	e7b2      	b.n	8001c2a <_malloc_r+0x32>
 8001cc4:	4634      	mov	r4, r6
 8001cc6:	6876      	ldr	r6, [r6, #4]
 8001cc8:	e7b9      	b.n	8001c3e <_malloc_r+0x46>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4638      	mov	r0, r7
 8001cd0:	f000 f84c 	bl	8001d6c <__malloc_unlock>
 8001cd4:	e7a1      	b.n	8001c1a <_malloc_r+0x22>
 8001cd6:	6025      	str	r5, [r4, #0]
 8001cd8:	e7de      	b.n	8001c98 <_malloc_r+0xa0>
 8001cda:	bf00      	nop
 8001cdc:	20000598 	.word	0x20000598

08001ce0 <_realloc_r>:
 8001ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	460e      	mov	r6, r1
 8001cea:	b921      	cbnz	r1, 8001cf6 <_realloc_r+0x16>
 8001cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	f7ff bf81 	b.w	8001bf8 <_malloc_r>
 8001cf6:	b92a      	cbnz	r2, 8001d04 <_realloc_r+0x24>
 8001cf8:	f7ff ff14 	bl	8001b24 <_free_r>
 8001cfc:	4625      	mov	r5, r4
 8001cfe:	4628      	mov	r0, r5
 8001d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d04:	f000 f838 	bl	8001d78 <_malloc_usable_size_r>
 8001d08:	4284      	cmp	r4, r0
 8001d0a:	4607      	mov	r7, r0
 8001d0c:	d802      	bhi.n	8001d14 <_realloc_r+0x34>
 8001d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001d12:	d812      	bhi.n	8001d3a <_realloc_r+0x5a>
 8001d14:	4621      	mov	r1, r4
 8001d16:	4640      	mov	r0, r8
 8001d18:	f7ff ff6e 	bl	8001bf8 <_malloc_r>
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d0ed      	beq.n	8001cfe <_realloc_r+0x1e>
 8001d22:	42bc      	cmp	r4, r7
 8001d24:	4622      	mov	r2, r4
 8001d26:	4631      	mov	r1, r6
 8001d28:	bf28      	it	cs
 8001d2a:	463a      	movcs	r2, r7
 8001d2c:	f7ff fed2 	bl	8001ad4 <memcpy>
 8001d30:	4631      	mov	r1, r6
 8001d32:	4640      	mov	r0, r8
 8001d34:	f7ff fef6 	bl	8001b24 <_free_r>
 8001d38:	e7e1      	b.n	8001cfe <_realloc_r+0x1e>
 8001d3a:	4635      	mov	r5, r6
 8001d3c:	e7df      	b.n	8001cfe <_realloc_r+0x1e>
	...

08001d40 <_sbrk_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4d06      	ldr	r5, [pc, #24]	; (8001d5c <_sbrk_r+0x1c>)
 8001d44:	2300      	movs	r3, #0
 8001d46:	4604      	mov	r4, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	602b      	str	r3, [r5, #0]
 8001d4c:	f7fe fc1c 	bl	8000588 <_sbrk>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_sbrk_r+0x1a>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_sbrk_r+0x1a>
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	200005a0 	.word	0x200005a0

08001d60 <__malloc_lock>:
 8001d60:	4801      	ldr	r0, [pc, #4]	; (8001d68 <__malloc_lock+0x8>)
 8001d62:	f000 b811 	b.w	8001d88 <__retarget_lock_acquire_recursive>
 8001d66:	bf00      	nop
 8001d68:	200005a4 	.word	0x200005a4

08001d6c <__malloc_unlock>:
 8001d6c:	4801      	ldr	r0, [pc, #4]	; (8001d74 <__malloc_unlock+0x8>)
 8001d6e:	f000 b80c 	b.w	8001d8a <__retarget_lock_release_recursive>
 8001d72:	bf00      	nop
 8001d74:	200005a4 	.word	0x200005a4

08001d78 <_malloc_usable_size_r>:
 8001d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d7c:	1f18      	subs	r0, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bfbc      	itt	lt
 8001d82:	580b      	ldrlt	r3, [r1, r0]
 8001d84:	18c0      	addlt	r0, r0, r3
 8001d86:	4770      	bx	lr

08001d88 <__retarget_lock_acquire_recursive>:
 8001d88:	4770      	bx	lr

08001d8a <__retarget_lock_release_recursive>:
 8001d8a:	4770      	bx	lr

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
