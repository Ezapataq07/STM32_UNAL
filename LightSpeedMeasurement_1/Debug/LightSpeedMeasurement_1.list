
LightSpeedMeasurement_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  0801b360  0801b360  0002b360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bfb4  0801bfb4  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  0801bfb4  0801bfb4  0002bfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bfbc  0801bfbc  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bfbc  0801bfbc  0002bfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bfc0  0801bfc0  0002bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0801bfc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037f0  20000210  0801c1d4  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003a00  0801c1d4  00033a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004aa2a  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005165  00000000  00000000  0007ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  0007fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  00081e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ebb  00000000  00000000  00083cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d902  00000000  00000000  000a5b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0d4c  00000000  00000000  000d346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001941b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a27c  00000000  00000000  0019420c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b344 	.word	0x0801b344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0801b344 	.word	0x0801b344

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010d0:	1d39      	adds	r1, r7, #4
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2201      	movs	r2, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <__io_putchar+0x20>)
 80010da:	f014 fcd4 	bl	8015a86 <HAL_UART_Transmit>
  return ch;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002c8 	.word	0x200002c8

080010ec <HAL_GPIO_EXTI_Callback>:

/* Implementación del Callback para mediciones por interrupciones */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin==VL53L1X_INT_Pin)
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d104      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    IntCount++;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_GPIO_EXTI_Callback+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_GPIO_EXTI_Callback+0x28>)
 8001104:	6013      	str	r3, [r2, #0]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20002d8c 	.word	0x20002d8c

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f012 f9ac 	bl	8013478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f872 	bl	8001208 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initSystem();
 8001124:	f000 fbe6 	bl	80018f4 <initSystem>
  initEXTI();
 8001128:	f000 fe74 	bl	8001e14 <initEXTI>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 f97e 	bl	800142c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001130:	f000 f952 	bl	80013d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001134:	f000 f8d4 	bl	80012e0 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001138:	f000 f900 	bl	800133c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /**Configure the Systick interrupt time
  */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800113c:	f014 f928 	bl	8015390 <HAL_RCC_GetHCLKFreq>
 8001140:	4603      	mov	r3, r0
 8001142:	4a29      	ldr	r2, [pc, #164]	; (80011e8 <main+0xd0>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	099b      	lsrs	r3, r3, #6
 800114a:	4618      	mov	r0, r3
 800114c:	f012 fb2f 	bl	80137ae <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001150:	2004      	movs	r0, #4
 8001152:	f012 fb39 	bl	80137c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	f012 fafc 	bl	801375a <HAL_NVIC_SetPriority>

  // Mensaje de bienvenida
  WelcomeMsg();
 8001162:	f000 fe27 	bl	8001db4 <WelcomeMsg>

  HAL_TIM_Base_Start(&htim5);
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <main+0xd4>)
 8001168:	f014 f996 	bl	8015498 <HAL_TIM_Base_Start>


  Dev->I2cHandle = &hi2c1;
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <main+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001174:	461a      	mov	r2, r3
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <main+0xdc>)
 8001178:	f8c2 3a4c 	str.w	r3, [r2, #2636]	; 0xa4c
  Dev->I2cDevAddr = 0x52;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <main+0xd8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001184:	2252      	movs	r2, #82	; 0x52
 8001186:	f883 2a50 	strb.w	r2, [r3, #2640]	; 0xa50
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Las siguientes operaciones se ejecutan cuando el USART utilizado reciba información
	if (rxData != '\0'){
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <main+0xe0>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01f      	beq.n	80011d2 <main+0xba>
		// Se comienzan a acumular los caracteres recibidos en un buffer
		bufferReception[counterReception] = rxData;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <main+0xe4>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <main+0xe0>)
 800119a:	7819      	ldrb	r1, [r3, #0]
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <main+0xe8>)
 800119e:	5499      	strb	r1, [r3, r2]
		counterReception++;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <main+0xe4>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <main+0xe4>)
 80011aa:	801a      	strh	r2, [r3, #0]
		// Si se recibe el caracter @ se activa la variable de estado que indica que se recibió la información necesaria
		if (rxData == '@'){
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <main+0xe0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b40      	cmp	r3, #64	; 0x40
 80011b2:	d10b      	bne.n	80011cc <main+0xb4>
			stringComplete = true;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <main+0xec>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
			bufferReception[counterReception] = '\0';  // Se hace nulo la posición del caracter @
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <main+0xe4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <main+0xe8>)
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]
			counterReception = 0;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <main+0xe4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	801a      	strh	r2, [r3, #0]
		}
		rxData = '\0'; // Se hace nulo la variable rxData con el fin de que sólo se entre a la condición cuando el Usart recibe datos
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <main+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	}
	// Las siguientes operaciones se ejecutan cuando el buffer de recepción tiene la información completa
	if (stringComplete){
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <main+0xec>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0d7      	beq.n	800118a <main+0x72>
		// Se llama a la función parseCommands, la cual ejecuta el código correspondiente al comando enviado vía USART
		stringComplete = false;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <main+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
		parseCommands(bufferReception);
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <main+0xe8>)
 80011e2:	f000 f9b5 	bl	8001550 <parseCommands>
	if (rxData != '\0'){
 80011e6:	e7d0      	b.n	800118a <main+0x72>
 80011e8:	10624dd3 	.word	0x10624dd3
 80011ec:	20000280 	.word	0x20000280
 80011f0:	20000000 	.word	0x20000000
 80011f4:	2000022c 	.word	0x2000022c
 80011f8:	20002f0c 	.word	0x20002f0c
 80011fc:	20002f0e 	.word	0x20002f0e
 8001200:	20002e88 	.word	0x20002e88
 8001204:	20002f58 	.word	0x20002f58

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f014 ffe2 	bl	80161e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <SystemClock_Config+0xd0>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <SystemClock_Config+0xd0>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <SystemClock_Config+0xd0>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <SystemClock_Config+0xd4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <SystemClock_Config+0xd4>)
 8001256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <SystemClock_Config+0xd4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001270:	2310      	movs	r3, #16
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	2302      	movs	r3, #2
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800127c:	2310      	movs	r3, #16
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001280:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001286:	2304      	movs	r3, #4
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f013 fc18 	bl	8014ac8 <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800129e:	f000 ff95 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f013 fe7a 	bl	8014fb8 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ca:	f000 ff7f 	bl	80021cc <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	; 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C1_Init+0x50>)
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <MX_I2C1_Init+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C1_Init+0x50>)
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_I2C1_Init+0x58>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_I2C1_Init+0x50>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_I2C1_Init+0x50>)
 800131e:	f012 fc3d 	bl	8013b9c <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001328:	f000 ff50 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000022c 	.word	0x2000022c
 8001334:	40005400 	.word	0x40005400
 8001338:	000186a0 	.word	0x000186a0

0800133c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM5_Init+0x94>)
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_TIM5_Init+0x98>)
 800135c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_TIM5_Init+0x94>)
 8001360:	2253      	movs	r2, #83	; 0x53
 8001362:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM5_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM5_Init+0x94>)
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_TIM5_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM5_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <MX_TIM5_Init+0x94>)
 8001380:	f014 f83a 	bl	80153f8 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 ff1f 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4619      	mov	r1, r3
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_TIM5_Init+0x94>)
 800139c:	f014 f8d6 	bl	801554c <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f000 ff11 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MX_TIM5_Init+0x94>)
 80013b8:	f014 faaa 	bl	8015910 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80013c2:	f000 ff03 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000280 	.word	0x20000280
 80013d4:	40000c00 	.word	0x40000c00

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_USART2_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 8001410:	f014 faec 	bl	80159ec <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 fed7 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200002c8 	.word	0x200002c8
 8001428:	40004400 	.word	0x40004400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <MX_GPIO_Init+0x118>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <MX_GPIO_Init+0x118>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <MX_GPIO_Init+0x118>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <MX_GPIO_Init+0x118>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a37      	ldr	r2, [pc, #220]	; (8001544 <MX_GPIO_Init+0x118>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MX_GPIO_Init+0x118>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <MX_GPIO_Init+0x118>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a30      	ldr	r2, [pc, #192]	; (8001544 <MX_GPIO_Init+0x118>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <MX_GPIO_Init+0x118>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <MX_GPIO_Init+0x118>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <MX_GPIO_Init+0x118>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <MX_GPIO_Init+0x118>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2160      	movs	r1, #96	; 0x60
 80014b6:	4824      	ldr	r0, [pc, #144]	; (8001548 <MX_GPIO_Init+0x11c>)
 80014b8:	f012 fb3e 	bl	8013b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	481e      	ldr	r0, [pc, #120]	; (800154c <MX_GPIO_Init+0x120>)
 80014d4:	f012 f994 	bl	8013800 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L1X_INT_Pin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 80014d8:	2310      	movs	r3, #16
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4816      	ldr	r0, [pc, #88]	; (8001548 <MX_GPIO_Init+0x11c>)
 80014ee:	f012 f987 	bl	8013800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014f2:	2320      	movs	r3, #32
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480f      	ldr	r0, [pc, #60]	; (8001548 <MX_GPIO_Init+0x11c>)
 800150a:	f012 f979 	bl	8013800 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800150e:	2340      	movs	r3, #64	; 0x40
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <MX_GPIO_Init+0x11c>)
 8001526:	f012 f96b 	bl	8013800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	200a      	movs	r0, #10
 8001530:	f012 f913 	bl	801375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001534:	200a      	movs	r0, #10
 8001536:	f012 f92c 	bl	8013792 <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020800 	.word	0x40020800

08001550 <parseCommands>:

/* USER CODE BEGIN 4 */

void parseCommands(char *ptrBufferReception){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af02      	add	r7, sp, #8
 8001556:	6078      	str	r0, [r7, #4]
	/**
	 * La función parseCommands se encarga del control del programa por medio de comandos mediante el USART
	 */
	// Se toma la información del buffer recibido, leyendo el comando y el parámetro ingresado
	sscanf(ptrBufferReception, "%s %u %u %s",  cmd, &firstParameter, &secondParameter, userMsg);
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <parseCommands+0xbc>)
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <parseCommands+0xc0>)
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <parseCommands+0xc4>)
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <parseCommands+0xc8>)
 8001564:	492d      	ldr	r1, [pc, #180]	; (800161c <parseCommands+0xcc>)
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f015 fce2 	bl	8016f30 <siscanf>
	// Se ejecuta si el comando es "Menu"
	if (strcmp(cmd, "Menu") == 0){
 800156c:	492c      	ldr	r1, [pc, #176]	; (8001620 <parseCommands+0xd0>)
 800156e:	482a      	ldr	r0, [pc, #168]	; (8001618 <parseCommands+0xc8>)
 8001570:	f7fe fe36 	bl	80001e0 <strcmp>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d110      	bne.n	800159c <parseCommands+0x4c>
		// Se imprime el Menu de comandos
		writeMsg(&handlerUSART1, "\nHelp Menu CMDS:\n");
 800157a:	492a      	ldr	r1, [pc, #168]	; (8001624 <parseCommands+0xd4>)
 800157c:	482a      	ldr	r0, [pc, #168]	; (8001628 <parseCommands+0xd8>)
 800157e:	f011 feb1 	bl	80132e4 <writeMsg>
		writeMsg(&handlerUSART1, "1)  Menu              -- Print this menu\n");
 8001582:	492a      	ldr	r1, [pc, #168]	; (800162c <parseCommands+0xdc>)
 8001584:	4828      	ldr	r0, [pc, #160]	; (8001628 <parseCommands+0xd8>)
 8001586:	f011 fead 	bl	80132e4 <writeMsg>
		writeMsg(&handlerUSART1, "8)  initToF           -- Initialize ToF Sensor\n");
 800158a:	4929      	ldr	r1, [pc, #164]	; (8001630 <parseCommands+0xe0>)
 800158c:	4826      	ldr	r0, [pc, #152]	; (8001628 <parseCommands+0xd8>)
 800158e:	f011 fea9 	bl	80132e4 <writeMsg>
		writeMsg(&handlerUSART1, "2)  StartMeasurement  -- Start Light Speed Measurement\n");
 8001592:	4928      	ldr	r1, [pc, #160]	; (8001634 <parseCommands+0xe4>)
 8001594:	4824      	ldr	r0, [pc, #144]	; (8001628 <parseCommands+0xd8>)
 8001596:	f011 fea5 	bl	80132e4 <writeMsg>
	}
	else {
		// En caso de que el comando no sea ninguno de los anteriores, se indica por consola que es incorrecto
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
	}
}
 800159a:	e033      	b.n	8001604 <parseCommands+0xb4>
	else if (strcmp(cmd, "initToF") == 0){
 800159c:	4926      	ldr	r1, [pc, #152]	; (8001638 <parseCommands+0xe8>)
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <parseCommands+0xc8>)
 80015a0:	f7fe fe1e 	bl	80001e0 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <parseCommands+0x68>
		writeMsg(&handlerUSART1, "CMD: initToF\n");
 80015aa:	4924      	ldr	r1, [pc, #144]	; (800163c <parseCommands+0xec>)
 80015ac:	481e      	ldr	r0, [pc, #120]	; (8001628 <parseCommands+0xd8>)
 80015ae:	f011 fe99 	bl	80132e4 <writeMsg>
		Initial_Boot_VL53L3CX();
 80015b2:	f000 fa69 	bl	8001a88 <Initial_Boot_VL53L3CX>
}
 80015b6:	e025      	b.n	8001604 <parseCommands+0xb4>
	else if (strcmp(cmd, "StartMeasurement") == 0){
 80015b8:	4921      	ldr	r1, [pc, #132]	; (8001640 <parseCommands+0xf0>)
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <parseCommands+0xc8>)
 80015bc:	f7fe fe10 	bl	80001e0 <strcmp>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <parseCommands+0x8a>
		writeMsg(&handlerUSART1, "CMD: Start\n");
 80015c6:	491f      	ldr	r1, [pc, #124]	; (8001644 <parseCommands+0xf4>)
 80015c8:	4817      	ldr	r0, [pc, #92]	; (8001628 <parseCommands+0xd8>)
 80015ca:	f011 fe8b 	bl	80132e4 <writeMsg>
		StaticRanging(firstParameter);
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <parseCommands+0xc4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f840 	bl	8001658 <StaticRanging>
}
 80015d8:	e014      	b.n	8001604 <parseCommands+0xb4>
	else if (strcmp(cmd, "staticRanging") == 0){
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <parseCommands+0xf8>)
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <parseCommands+0xc8>)
 80015de:	f7fe fdff 	bl	80001e0 <strcmp>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <parseCommands+0xac>
		writeMsg(&handlerUSART1, "CMD: staticRanging\n");
 80015e8:	4918      	ldr	r1, [pc, #96]	; (800164c <parseCommands+0xfc>)
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <parseCommands+0xd8>)
 80015ec:	f011 fe7a 	bl	80132e4 <writeMsg>
		Static(firstParameter);
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <parseCommands+0xc4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fd95 	bl	8002124 <Static>
}
 80015fa:	e003      	b.n	8001604 <parseCommands+0xb4>
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
 80015fc:	4914      	ldr	r1, [pc, #80]	; (8001650 <parseCommands+0x100>)
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <parseCommands+0xd8>)
 8001600:	f011 fe70 	bl	80132e4 <writeMsg>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20002f38 	.word	0x20002f38
 8001610:	20002f14 	.word	0x20002f14
 8001614:	20002f10 	.word	0x20002f10
 8001618:	20002f18 	.word	0x20002f18
 800161c:	0801b360 	.word	0x0801b360
 8001620:	0801b36c 	.word	0x0801b36c
 8001624:	0801b374 	.word	0x0801b374
 8001628:	20002dd4 	.word	0x20002dd4
 800162c:	0801b388 	.word	0x0801b388
 8001630:	0801b3b4 	.word	0x0801b3b4
 8001634:	0801b3e4 	.word	0x0801b3e4
 8001638:	0801b41c 	.word	0x0801b41c
 800163c:	0801b424 	.word	0x0801b424
 8001640:	0801b434 	.word	0x0801b434
 8001644:	0801b448 	.word	0x0801b448
 8001648:	0801b454 	.word	0x0801b454
 800164c:	0801b464 	.word	0x0801b464
 8001650:	0801b478 	.word	0x0801b478
 8001654:	00000000 	.word	0x00000000

08001658 <StaticRanging>:
		sprintf(bufferData, "%5f       %5f\n", angleData[k], rangingData[k]);
		writeMsg(&handlerUSART1, bufferData);
	}
}

void StaticRanging(unsigned int numData){
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b087      	sub	sp, #28
 800165c:	af02      	add	r7, sp, #8
 800165e:	6078      	str	r0, [r7, #4]
	/**
	 * StaticRanging hace numData mediciones con el sensor ToF
	 */
	for(uint8_t i = 0; i<11; i++){
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e047      	b.n	80016f6 <StaticRanging+0x9e>
		counterRangigData = 0;
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <StaticRanging+0xc8>)
 8001668:	2200      	movs	r2, #0
 800166a:	801a      	strh	r2, [r3, #0]
		RangingMeasurment();
 800166c:	f000 f86c 	bl	8001748 <RangingMeasurment>
		SendUltraPulse();
 8001670:	f000 fc12 	bl	8001e98 <SendUltraPulse>
		while (flag == 0){
 8001674:	bf00      	nop
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <StaticRanging+0xcc>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0fb      	beq.n	8001676 <StaticRanging+0x1e>
		}
		distances[i] = distance;
 800167e:	7bf9      	ldrb	r1, [r7, #15]
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <StaticRanging+0xd0>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	4829      	ldr	r0, [pc, #164]	; (800172c <StaticRanging+0xd4>)
 8001688:	00c9      	lsls	r1, r1, #3
 800168a:	4401      	add	r1, r0
 800168c:	e9c1 2300 	strd	r2, r3, [r1]
		flag = 0;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <StaticRanging+0xcc>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
		times[i] = (float) rangingData[0] * 3.335640952;
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <StaticRanging+0xd8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff6c 	bl	8000578 <__aeabi_f2d>
 80016a0:	7bfc      	ldrb	r4, [r7, #15]
 80016a2:	a31d      	add	r3, pc, #116	; (adr r3, 8001718 <StaticRanging+0xc0>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffbe 	bl	8000628 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4820      	ldr	r0, [pc, #128]	; (8001734 <StaticRanging+0xdc>)
 80016b2:	00e1      	lsls	r1, r4, #3
 80016b4:	4401      	add	r1, r0
 80016b6:	e9c1 2300 	strd	r2, r3, [r1]
		sprintf(bufferData, "Time = %f ps    Distance= %f cm\n",times[i], distances[i]);
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <StaticRanging+0xdc>)
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4413      	add	r3, r2
 80016c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <StaticRanging+0xd4>)
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	e9cd 2300 	strd	r2, r3, [sp]
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4917      	ldr	r1, [pc, #92]	; (8001738 <StaticRanging+0xe0>)
 80016dc:	4817      	ldr	r0, [pc, #92]	; (800173c <StaticRanging+0xe4>)
 80016de:	f015 fc07 	bl	8016ef0 <siprintf>
		send_uart2(bufferData);
 80016e2:	4816      	ldr	r0, [pc, #88]	; (800173c <StaticRanging+0xe4>)
 80016e4:	f000 fd5c 	bl	80021a0 <send_uart2>
		HAL_Delay(3000);
 80016e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016ec:	f011 ff36 	bl	801355c <HAL_Delay>
	for(uint8_t i = 0; i<11; i++){
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	3301      	adds	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b0a      	cmp	r3, #10
 80016fa:	d9b4      	bls.n	8001666 <StaticRanging+0xe>
	}
	writeMsg(&handlerUSART1, "The Static Ranging has finished\n");
 80016fc:	4910      	ldr	r1, [pc, #64]	; (8001740 <StaticRanging+0xe8>)
 80016fe:	4811      	ldr	r0, [pc, #68]	; (8001744 <StaticRanging+0xec>)
 8001700:	f011 fdf0 	bl	80132e4 <writeMsg>
	getLightSpeed(times, distances);
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <StaticRanging+0xd4>)
 8001706:	480b      	ldr	r0, [pc, #44]	; (8001734 <StaticRanging+0xdc>)
 8001708:	f000 fc36 	bl	8001f78 <getLightSpeed>

}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	f3af 8000 	nop.w
 8001718:	86004e73 	.word	0x86004e73
 800171c:	400aaf64 	.word	0x400aaf64
 8001720:	20003760 	.word	0x20003760
 8001724:	20003828 	.word	0x20003828
 8001728:	20003770 	.word	0x20003770
 800172c:	20003778 	.word	0x20003778
 8001730:	20002f5c 	.word	0x20002f5c
 8001734:	200037d0 	.word	0x200037d0
 8001738:	0801b4c4 	.word	0x0801b4c4
 800173c:	20002ea8 	.word	0x20002ea8
 8001740:	0801b4e8 	.word	0x0801b4e8
 8001744:	20002dd4 	.word	0x20002dd4

08001748 <RangingMeasurment>:

void RangingMeasurment(void){
 8001748:	b580      	push	{r7, lr}
 800174a:	b09c      	sub	sp, #112	; 0x70
 800174c:	af00      	add	r7, sp, #0
	/**
	 * RangingMeasurment se encarga de hacer una medición con el sensor ToF y guardarla en un arreglo, realmente hace 5 mediciones y toma el
	 * promedio. Está configurada para que no guarde medidas en caso de que sean erróneas, y que tome medidas solo cuando detecte un objeto
	 */
	int numObjects = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53LX_MultiRangingData_t MultiRangingData;
	VL53LX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t NewDataReady=0;
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	HAL_Delay(2);
 8001762:	2002      	movs	r0, #2
 8001764:	f011 fefa 	bl	801355c <HAL_Delay>
	if(status){
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <RangingMeasurment+0x178>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <RangingMeasurment+0x32>
		writeMsg(&handlerUSART1, "VL53LX_StartMeasurement failed\n");
 8001770:	4954      	ldr	r1, [pc, #336]	; (80018c4 <RangingMeasurment+0x17c>)
 8001772:	4855      	ldr	r0, [pc, #340]	; (80018c8 <RangingMeasurment+0x180>)
 8001774:	f011 fdb6 	bl	80132e4 <writeMsg>
		while(1);
 8001778:	e7fe      	b.n	8001778 <RangingMeasurment+0x30>
	}
	if (isInterrupt){
	do // HW interrupt mode
	{
	  __WFI();
 800177a:	bf30      	wfi
	  if(IntCount !=0 ){
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <RangingMeasurment+0x184>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d076      	beq.n	8001872 <RangingMeasurment+0x12a>
		IntCount=0;
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <RangingMeasurment+0x184>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <RangingMeasurment+0x188>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fa4d 	bl	8003c30 <VL53LX_GetMultiRangingData>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <RangingMeasurment+0x178>)
 800179c:	601a      	str	r2, [r3, #0]
		numObjects = pMultiRangingData->NumberOfObjectsFound;
 800179e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017a0:	795b      	ldrb	r3, [r3, #5]
 80017a2:	66bb      	str	r3, [r7, #104]	; 0x68
		RangeStatus = pMultiRangingData->RangeData->RangeStatus;
 80017a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017a6:	7e9a      	ldrb	r2, [r3, #26]
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <RangingMeasurment+0x18c>)
 80017aa:	701a      	strb	r2, [r3, #0]
		// Control de errores, si se detecta un error se muestra por consola cúal es y se reinicia la medición
		// En caso de que hayan muchos errores se manda por consola un mensaje de error general
		if (RangeStatus){
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <RangingMeasurment+0x18c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01f      	beq.n	80017f4 <RangingMeasurment+0xac>
			if (numMeasurmentErrors >= 3){
 80017b4:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <RangingMeasurment+0x190>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d903      	bls.n	80017c4 <RangingMeasurment+0x7c>
				writeMsg(&handlerUSART1, "The Tof Sensor is Failing, probably for the above reasons.\n");
 80017bc:	4947      	ldr	r1, [pc, #284]	; (80018dc <RangingMeasurment+0x194>)
 80017be:	4842      	ldr	r0, [pc, #264]	; (80018c8 <RangingMeasurment+0x180>)
 80017c0:	f011 fd90 	bl	80132e4 <writeMsg>
			}
			RangeErrorsMsg(RangeStatus);
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <RangingMeasurment+0x18c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa4b 	bl	8001c64 <RangeErrorsMsg>
			numMeasurmentErrors++;
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <RangingMeasurment+0x190>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <RangingMeasurment+0x190>)
 80017d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(250);
 80017da:	20fa      	movs	r0, #250	; 0xfa
 80017dc:	f011 febe 	bl	801355c <HAL_Delay>
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 80017e0:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <RangingMeasurment+0x188>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fe60 	bl	80034aa <VL53LX_ClearInterruptAndStartMeasurement>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <RangingMeasurment+0x178>)
 80017f0:	601a      	str	r2, [r3, #0]
			continue;
 80017f2:	e03e      	b.n	8001872 <RangingMeasurment+0x12a>
		}
		// Control de múltiples objetos, si se detecta más de un objeto se reinicia la medición
		// En caso de que se detecte varias veces la presencia de más de un objeto se manda el mensaje por consola
		if (numObjects > 1){
 80017f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	dd1a      	ble.n	8001830 <RangingMeasurment+0xe8>
			if (errorMultipleObjects >= 3){
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <RangingMeasurment+0x198>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d903      	bls.n	800180a <RangingMeasurment+0xc2>
				writeMsg(&handlerUSART1, "There are multiple objects to range. There must only be one.\n");
 8001802:	4938      	ldr	r1, [pc, #224]	; (80018e4 <RangingMeasurment+0x19c>)
 8001804:	4830      	ldr	r0, [pc, #192]	; (80018c8 <RangingMeasurment+0x180>)
 8001806:	f011 fd6d 	bl	80132e4 <writeMsg>
			}
			errorMultipleObjects++;
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <RangingMeasurment+0x198>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <RangingMeasurment+0x198>)
 8001814:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250);
 8001816:	20fa      	movs	r0, #250	; 0xfa
 8001818:	f011 fea0 	bl	801355c <HAL_Delay>
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <RangingMeasurment+0x188>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fe42 	bl	80034aa <VL53LX_ClearInterruptAndStartMeasurement>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <RangingMeasurment+0x178>)
 800182c:	601a      	str	r2, [r3, #0]
			continue;
 800182e:	e020      	b.n	8001872 <RangingMeasurment+0x12a>
		}
		meanRangingData += (float) pMultiRangingData->RangeData[0].RangeMilliMeter;
 8001830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001832:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <RangingMeasurment+0x1a0>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <RangingMeasurment+0x1a0>)
 800184a:	edc3 7a00 	vstr	s15, [r3]
		i++;
 800184e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001852:	3301      	adds	r3, #1
 8001854:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (status==0){
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <RangingMeasurment+0x178>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d108      	bne.n	8001872 <RangingMeasurment+0x12a>
		  status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <RangingMeasurment+0x188>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fe20 	bl	80034aa <VL53LX_ClearInterruptAndStartMeasurement>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <RangingMeasurment+0x178>)
 8001870:	601a      	str	r2, [r3, #0]
		}

	  }
	}
	while(i < 5);
 8001872:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001876:	2b04      	cmp	r3, #4
 8001878:	f67f af7f 	bls.w	800177a <RangingMeasurment+0x32>
		}
	  }
	}
	while (i < 1);
	}
	rangingData[counterRangigData] = meanRangingData/5.0;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <RangingMeasurment+0x1a0>)
 800187e:	ed93 7a00 	vldr	s14, [r3]
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <RangingMeasurment+0x1a4>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <RangingMeasurment+0x1a8>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	edc3 7a00 	vstr	s15, [r3]
	counterRangigData++;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <RangingMeasurment+0x1a4>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <RangingMeasurment+0x1a4>)
 80018a2:	801a      	strh	r2, [r3, #0]
	numMeasurmentErrors = 0;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <RangingMeasurment+0x190>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
	errorMultipleObjects = 0;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <RangingMeasurment+0x198>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	meanRangingData = 0;
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <RangingMeasurment+0x1a0>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	3770      	adds	r7, #112	; 0x70
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20002d88 	.word	0x20002d88
 80018c4:	0801b50c 	.word	0x0801b50c
 80018c8:	20002dd4 	.word	0x20002dd4
 80018cc:	20002d8c 	.word	0x20002d8c
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20002e87 	.word	0x20002e87
 80018d8:	20002e84 	.word	0x20002e84
 80018dc:	0801b52c 	.word	0x0801b52c
 80018e0:	20002e86 	.word	0x20002e86
 80018e4:	0801b568 	.word	0x0801b568
 80018e8:	2000375c 	.word	0x2000375c
 80018ec:	20003760 	.word	0x20003760
 80018f0:	20002f5c 	.word	0x20002f5c

080018f4 <initSystem>:

void initSystem(void){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	// Se configura el SysTick
	config_SysTickMs();
 80018f8:	f011 fa8a 	bl	8012e10 <config_SysTickMs>

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOC;
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <initSystem+0x164>)
 80018fe:	4a57      	ldr	r2, [pc, #348]	; (8001a5c <initSystem+0x168>)
 8001900:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_6;
 8001902:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <initSystem+0x164>)
 8001904:	2206      	movs	r2, #6
 8001906:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <initSystem+0x164>)
 800190a:	2201      	movs	r2, #1
 800190c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800190e:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <initSystem+0x164>)
 8001910:	2200      	movs	r2, #0
 8001912:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <initSystem+0x164>)
 8001916:	2201      	movs	r2, #1
 8001918:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 800191a:	484f      	ldr	r0, [pc, #316]	; (8001a58 <initSystem+0x164>)
 800191c:	f011 f89c 	bl	8012a58 <GPIO_Config>



	/* Configuración para el suicheo del Sensor */
	VL53L3CX_VDD.pGPIOx = GPIOB;
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <initSystem+0x16c>)
 8001922:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <initSystem+0x170>)
 8001924:	601a      	str	r2, [r3, #0]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 8001926:	4b4e      	ldr	r3, [pc, #312]	; (8001a60 <initSystem+0x16c>)
 8001928:	220d      	movs	r2, #13
 800192a:	711a      	strb	r2, [r3, #4]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <initSystem+0x16c>)
 800192e:	2201      	movs	r2, #1
 8001930:	715a      	strb	r2, [r3, #5]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <initSystem+0x16c>)
 8001934:	2200      	movs	r2, #0
 8001936:	721a      	strb	r2, [r3, #8]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001938:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <initSystem+0x16c>)
 800193a:	2200      	movs	r2, #0
 800193c:	71da      	strb	r2, [r3, #7]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;
 800193e:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <initSystem+0x16c>)
 8001940:	2203      	movs	r2, #3
 8001942:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración y se inicia con el sensor apagado
	GPIO_Config(&VL53L3CX_VDD);
 8001944:	4846      	ldr	r0, [pc, #280]	; (8001a60 <initSystem+0x16c>)
 8001946:	f011 f887 	bl	8012a58 <GPIO_Config>
	GPIO_WritePin(&VL53L3CX_VDD, 0);
 800194a:	2100      	movs	r1, #0
 800194c:	4844      	ldr	r0, [pc, #272]	; (8001a60 <initSystem+0x16c>)
 800194e:	f011 f9ad 	bl	8012cac <GPIO_WritePin>

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 8001952:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <initSystem+0x174>)
 8001954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001958:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <initSystem+0x174>)
 800195c:	2201      	movs	r2, #1
 800195e:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_100us;
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <initSystem+0x174>)
 8001962:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001966:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 2500;
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <initSystem+0x174>)
 800196a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800196e:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 8001970:	483d      	ldr	r0, [pc, #244]	; (8001a68 <initSystem+0x174>)
 8001972:	f010 fc6f 	bl	8012254 <BTimer_Config>

	// Configuración del PIN que recibe la información por la USB (RX) */
	handlerRxPIN.pGPIOx								= GPIOA;
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <initSystem+0x178>)
 8001978:	4a3d      	ldr	r2, [pc, #244]	; (8001a70 <initSystem+0x17c>)
 800197a:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_10;
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <initSystem+0x178>)
 800197e:	220a      	movs	r2, #10
 8001980:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <initSystem+0x178>)
 8001984:	2202      	movs	r2, #2
 8001986:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <initSystem+0x178>)
 800198a:	2200      	movs	r2, #0
 800198c:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <initSystem+0x178>)
 8001990:	2200      	movs	r2, #0
 8001992:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <initSystem+0x178>)
 8001996:	2201      	movs	r2, #1
 8001998:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <initSystem+0x178>)
 800199c:	2207      	movs	r2, #7
 800199e:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 80019a0:	4832      	ldr	r0, [pc, #200]	; (8001a6c <initSystem+0x178>)
 80019a2:	f011 f859 	bl	8012a58 <GPIO_Config>

	/* Configuración del PIN que envía la información por la USB (TX) */
	handlerTxPIN.pGPIOx								= GPIOA;
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <initSystem+0x180>)
 80019a8:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <initSystem+0x17c>)
 80019aa:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <initSystem+0x180>)
 80019ae:	2209      	movs	r2, #9
 80019b0:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <initSystem+0x180>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <initSystem+0x180>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <initSystem+0x180>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <initSystem+0x180>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <initSystem+0x180>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 80019d0:	4828      	ldr	r0, [pc, #160]	; (8001a74 <initSystem+0x180>)
 80019d2:	f011 f841 	bl	8012a58 <GPIO_Config>

	/* Configuración del USART1 */
	handlerUSART1.ptrUSARTx							= USART2;
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <initSystem+0x184>)
 80019d8:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <initSystem+0x188>)
 80019da:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_mode			= USART_MODE_RXTX;
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <initSystem+0x184>)
 80019de:	2202      	movs	r2, #2
 80019e0:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <initSystem+0x184>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <initSystem+0x184>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity			= USART_PARITY_NONE;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <initSystem+0x184>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <initSystem+0x184>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	721a      	strb	r2, [r3, #8]
	handlerUSART1.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <initSystem+0x184>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del USART
	USART_Config(&handlerUSART1);
 8001a00:	481d      	ldr	r0, [pc, #116]	; (8001a78 <initSystem+0x184>)
 8001a02:	f011 faa1 	bl	8012f48 <USART_Config>

	/* Configuración para el output A del encoder */
	encoderOutA.pGPIOx 								= GPIOC;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <initSystem+0x18c>)
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <initSystem+0x168>)
 8001a0a:	601a      	str	r2, [r3, #0]
	encoderOutA.GPIO_PinConfig.GPIO_PinNumber 		= PIN_15;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <initSystem+0x18c>)
 8001a0e:	220f      	movs	r2, #15
 8001a10:	711a      	strb	r2, [r3, #4]
	encoderOutA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_INPUT;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <initSystem+0x18c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	715a      	strb	r2, [r3, #5]
	encoderOutA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <initSystem+0x18c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	71da      	strb	r2, [r3, #7]
	encoderOutA.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <initSystem+0x18c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración
	GPIO_Config(&encoderOutA);
 8001a24:	4816      	ldr	r0, [pc, #88]	; (8001a80 <initSystem+0x18c>)
 8001a26:	f011 f817 	bl	8012a58 <GPIO_Config>

	/* Configuració para el output B del encoder */
	encoderOutB.pGPIOx 								= GPIOC;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <initSystem+0x190>)
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <initSystem+0x168>)
 8001a2e:	601a      	str	r2, [r3, #0]
	encoderOutB.GPIO_PinConfig.GPIO_PinNumber 		= PIN_14;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <initSystem+0x190>)
 8001a32:	220e      	movs	r2, #14
 8001a34:	711a      	strb	r2, [r3, #4]
	encoderOutB.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_INPUT;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <initSystem+0x190>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	715a      	strb	r2, [r3, #5]
	encoderOutB.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <initSystem+0x190>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	71da      	strb	r2, [r3, #7]
	encoderOutB.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <initSystem+0x190>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración
	GPIO_Config(&encoderOutB);
 8001a48:	480e      	ldr	r0, [pc, #56]	; (8001a84 <initSystem+0x190>)
 8001a4a:	f011 f805 	bl	8012a58 <GPIO_Config>

	// Inicialización del EXTI en el driver del motor
	initStepMotor();
 8001a4e:	f011 f971 	bl	8012d34 <initStepMotor>


}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20002d90 	.word	0x20002d90
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	20002e78 	.word	0x20002e78
 8001a64:	40020400 	.word	0x40020400
 8001a68:	20002d9c 	.word	0x20002d9c
 8001a6c:	20002dac 	.word	0x20002dac
 8001a70:	40020000 	.word	0x40020000
 8001a74:	20002db8 	.word	0x20002db8
 8001a78:	20002dd4 	.word	0x20002dd4
 8001a7c:	40004400 	.word	0x40004400
 8001a80:	20002e60 	.word	0x20002e60
 8001a84:	20002e6c 	.word	0x20002e6c

08001a88 <Initial_Boot_VL53L3CX>:

void Initial_Boot_VL53L3CX(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
	/**
	 * Esta función se encarga de inicializar correctamente el Sensor ToF, en caso de no logralo se informará por consola
	 */
	uint8_t byteData;
	uint16_t wordData;
	uint8_t ToFSensor = 1; // 0=Left, 1=Center(default), 2=Right
 8001a8e:	2301      	movs	r3, #1
 8001a90:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&VL53L3CX_VDD, 0);
 8001a92:	2100      	movs	r1, #0
 8001a94:	4865      	ldr	r0, [pc, #404]	; (8001c2c <Initial_Boot_VL53L3CX+0x1a4>)
 8001a96:	f011 f909 	bl	8012cac <GPIO_WritePin>
	HAL_Delay(2000);
 8001a9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a9e:	f011 fd5d 	bl	801355c <HAL_Delay>
	GPIO_WritePin(&VL53L3CX_VDD, 1);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4861      	ldr	r0, [pc, #388]	; (8001c2c <Initial_Boot_VL53L3CX+0x1a4>)
 8001aa6:	f011 f901 	bl	8012cac <GPIO_WritePin>
	HAL_Delay(2);
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f011 fd56 	bl	801355c <HAL_Delay>
	XNUCLEO53L3A2_Init();
 8001ab0:	f001 f96e 	bl	8002d90 <XNUCLEO53L3A2_Init>
	ToFSensor = 'c'; // Select ToFSensor: 0=Left, 1=Center, 2=Right
 8001ab4:	2363      	movs	r3, #99	; 0x63
 8001ab6:	71fb      	strb	r3, [r7, #7]
	status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 f9c1 	bl	8002e44 <XNUCLEO53L3A2_ResetId>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001ac6:	6013      	str	r3, [r2, #0]
	HAL_Delay(2);
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f011 fd47 	bl	801355c <HAL_Delay>
	status = XNUCLEO53L3A2_ResetId(ToFSensor, 1); // Reset ToF sensor
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 f9b6 	bl	8002e44 <XNUCLEO53L3A2_ResetId>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a55      	ldr	r2, [pc, #340]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001adc:	6013      	str	r3, [r2, #0]
	HAL_Delay(2);
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f011 fd3c 	bl	801355c <HAL_Delay>
	VL53LX_RdByte(Dev, 0x010F, &byteData);
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1dba      	adds	r2, r7, #6
 8001aea:	f240 110f 	movw	r1, #271	; 0x10f
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fea0 	bl	8002834 <VL53LX_RdByte>
	sprintf(bufferData, "VL53LX Model_ID: %02X\n\r", byteData);
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	461a      	mov	r2, r3
 8001af8:	494f      	ldr	r1, [pc, #316]	; (8001c38 <Initial_Boot_VL53L3CX+0x1b0>)
 8001afa:	4850      	ldr	r0, [pc, #320]	; (8001c3c <Initial_Boot_VL53L3CX+0x1b4>)
 8001afc:	f015 f9f8 	bl	8016ef0 <siprintf>
	writeMsg(&handlerUSART1, bufferData);
 8001b00:	494e      	ldr	r1, [pc, #312]	; (8001c3c <Initial_Boot_VL53L3CX+0x1b4>)
 8001b02:	484f      	ldr	r0, [pc, #316]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001b04:	f011 fbee 	bl	80132e4 <writeMsg>
	VL53LX_RdByte(Dev, 0x0110, &byteData);
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	1dba      	adds	r2, r7, #6
 8001b0e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fe8e 	bl	8002834 <VL53LX_RdByte>
	sprintf(bufferData, "VL53LX Module_Type: %02X\n\r", byteData);
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4949      	ldr	r1, [pc, #292]	; (8001c44 <Initial_Boot_VL53L3CX+0x1bc>)
 8001b1e:	4847      	ldr	r0, [pc, #284]	; (8001c3c <Initial_Boot_VL53L3CX+0x1b4>)
 8001b20:	f015 f9e6 	bl	8016ef0 <siprintf>
	writeMsg(&handlerUSART1, bufferData);
 8001b24:	4945      	ldr	r1, [pc, #276]	; (8001c3c <Initial_Boot_VL53L3CX+0x1b4>)
 8001b26:	4846      	ldr	r0, [pc, #280]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001b28:	f011 fbdc 	bl	80132e4 <writeMsg>
	VL53LX_RdWord(Dev, 0x010F, &wordData);
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1d3a      	adds	r2, r7, #4
 8001b32:	f240 110f 	movw	r1, #271	; 0x10f
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 feb0 	bl	800289c <VL53LX_RdWord>
	sprintf(bufferData, "VL53LX: %02X\n\r", wordData);
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4941      	ldr	r1, [pc, #260]	; (8001c48 <Initial_Boot_VL53L3CX+0x1c0>)
 8001b42:	483e      	ldr	r0, [pc, #248]	; (8001c3c <Initial_Boot_VL53L3CX+0x1b4>)
 8001b44:	f015 f9d4 	bl	8016ef0 <siprintf>
	writeMsg(&handlerUSART1, bufferData);
 8001b48:	493c      	ldr	r1, [pc, #240]	; (8001c3c <Initial_Boot_VL53L3CX+0x1b4>)
 8001b4a:	483d      	ldr	r0, [pc, #244]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001b4c:	f011 fbca 	bl	80132e4 <writeMsg>
	  //////////////////////////////////////////////////////////////////////////////////////////////////
	status = VL53LX_WaitDeviceBooted(Dev);
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fac8 	bl	80030ea <VL53LX_WaitDeviceBooted>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001b60:	601a      	str	r2, [r3, #0]
	while(status != VL53LX_ERROR_NONE){
 8001b62:	e00f      	b.n	8001b84 <Initial_Boot_VL53L3CX+0xfc>
		writeMsg(&handlerUSART1, "Not Booted\n");
 8001b64:	4939      	ldr	r1, [pc, #228]	; (8001c4c <Initial_Boot_VL53L3CX+0x1c4>)
 8001b66:	4836      	ldr	r0, [pc, #216]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001b68:	f011 fbbc 	bl	80132e4 <writeMsg>
		status = VL53LX_WaitDeviceBooted(Dev);
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 faba 	bl	80030ea <VL53LX_WaitDeviceBooted>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001b7c:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f011 fcec 	bl	801355c <HAL_Delay>
	while(status != VL53LX_ERROR_NONE){
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1eb      	bne.n	8001b64 <Initial_Boot_VL53L3CX+0xdc>
	}
	writeMsg(&handlerUSART1, "Device Booted\n");
 8001b8c:	4930      	ldr	r1, [pc, #192]	; (8001c50 <Initial_Boot_VL53L3CX+0x1c8>)
 8001b8e:	482c      	ldr	r0, [pc, #176]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001b90:	f011 fba8 	bl	80132e4 <writeMsg>
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	status = VL53LX_DataInit(Dev);
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fa4b 	bl	8003034 <VL53LX_DataInit>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001ba4:	601a      	str	r2, [r3, #0]
	while(status != VL53LX_ERROR_NONE){
 8001ba6:	e00f      	b.n	8001bc8 <Initial_Boot_VL53L3CX+0x140>
		status = VL53LX_DataInit(Dev);
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 fa41 	bl	8003034 <VL53LX_DataInit>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001bb8:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f011 fcce 	bl	801355c <HAL_Delay>
		writeMsg(&handlerUSART1, "Not Initialized\n");
 8001bc0:	4924      	ldr	r1, [pc, #144]	; (8001c54 <Initial_Boot_VL53L3CX+0x1cc>)
 8001bc2:	481f      	ldr	r0, [pc, #124]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001bc4:	f011 fb8e 	bl	80132e4 <writeMsg>
	while(status != VL53LX_ERROR_NONE){
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1eb      	bne.n	8001ba8 <Initial_Boot_VL53L3CX+0x120>
	}
	writeMsg(&handlerUSART1, "Device Initialized\n");
 8001bd0:	4921      	ldr	r1, [pc, #132]	; (8001c58 <Initial_Boot_VL53L3CX+0x1d0>)
 8001bd2:	481b      	ldr	r0, [pc, #108]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001bd4:	f011 fb86 	bl	80132e4 <writeMsg>
	status = VL53LX_SetDistanceMode(Dev, VL53LX_DISTANCEMODE_MEDIUM);
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2102      	movs	r1, #2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fb3c 	bl	800325c <VL53LX_SetDistanceMode>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001bea:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////////////////////////////
	status = 1;
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
	while(status != VL53LX_ERROR_NONE){
 8001bf2:	e00f      	b.n	8001c14 <Initial_Boot_VL53L3CX+0x18c>
		status = VL53LX_StartMeasurement(Dev);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <Initial_Boot_VL53L3CX+0x1ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fc0f 	bl	800341c <VL53LX_StartMeasurement>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001c04:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f011 fca8 	bl	801355c <HAL_Delay>
		writeMsg(&handlerUSART1, "Not Measuring\n");
 8001c0c:	4913      	ldr	r1, [pc, #76]	; (8001c5c <Initial_Boot_VL53L3CX+0x1d4>)
 8001c0e:	480c      	ldr	r0, [pc, #48]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001c10:	f011 fb68 	bl	80132e4 <writeMsg>
	while(status != VL53LX_ERROR_NONE){
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <Initial_Boot_VL53L3CX+0x1a8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1eb      	bne.n	8001bf4 <Initial_Boot_VL53L3CX+0x16c>
	}
	writeMsg(&handlerUSART1, "Device ready to measure\n");
 8001c1c:	4910      	ldr	r1, [pc, #64]	; (8001c60 <Initial_Boot_VL53L3CX+0x1d8>)
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <Initial_Boot_VL53L3CX+0x1b8>)
 8001c20:	f011 fb60 	bl	80132e4 <writeMsg>
//	status = VL53LX_SmudgeCorrectionEnable(Dev, VL53LX_SMUDGE_CORRECTION_CONTINUOUS);
//	status = VL53LX_SetXTalkCompensationEnable(Dev, 1);
//	status = VL53LX_SetOffsetCorrectionMode(Dev, VL53LX_OFFSETCORRECTIONMODE_STANDARD);
//	status = VL53LX_PerformOffsetZeroDistanceCalibration(Dev);
//	status = VL53LX_PerformXTalkCalibration(Dev);
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20002e78 	.word	0x20002e78
 8001c30:	20002d88 	.word	0x20002d88
 8001c34:	20000000 	.word	0x20000000
 8001c38:	0801b5a8 	.word	0x0801b5a8
 8001c3c:	20002ea8 	.word	0x20002ea8
 8001c40:	20002dd4 	.word	0x20002dd4
 8001c44:	0801b5c0 	.word	0x0801b5c0
 8001c48:	0801b5dc 	.word	0x0801b5dc
 8001c4c:	0801b5ec 	.word	0x0801b5ec
 8001c50:	0801b5f8 	.word	0x0801b5f8
 8001c54:	0801b608 	.word	0x0801b608
 8001c58:	0801b61c 	.word	0x0801b61c
 8001c5c:	0801b630 	.word	0x0801b630
 8001c60:	0801b640 	.word	0x0801b640

08001c64 <RangeErrorsMsg>:

void RangeErrorsMsg(uint8_t status){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	/**
	 * Esta función contiene los posibles errores que pueden darse durante la etapa de medición, con su respectivo mensaje de error por consola
	 */
	switch(status){
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b0e      	cmp	r3, #14
 8001c72:	dc23      	bgt.n	8001cbc <RangeErrorsMsg+0x58>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	dd60      	ble.n	8001d3a <RangeErrorsMsg+0xd6>
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	2b0d      	cmp	r3, #13
 8001c7c:	d85d      	bhi.n	8001d3a <RangeErrorsMsg+0xd6>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <RangeErrorsMsg+0x20>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001cc3 	.word	0x08001cc3
 8001c88:	08001ccd 	.word	0x08001ccd
 8001c8c:	08001d3b 	.word	0x08001d3b
 8001c90:	08001cd7 	.word	0x08001cd7
 8001c94:	08001ce1 	.word	0x08001ce1
 8001c98:	08001ceb 	.word	0x08001ceb
 8001c9c:	08001cf5 	.word	0x08001cf5
 8001ca0:	08001cff 	.word	0x08001cff
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001d09 	.word	0x08001d09
 8001cac:	08001d13 	.word	0x08001d13
 8001cb0:	08001d1d 	.word	0x08001d1d
 8001cb4:	08001d3b 	.word	0x08001d3b
 8001cb8:	08001d27 	.word	0x08001d27
 8001cbc:	2bff      	cmp	r3, #255	; 0xff
 8001cbe:	d037      	beq.n	8001d30 <RangeErrorsMsg+0xcc>
		writeMsg(&handlerUSART1, "Target not detected, without no warning or errors raised\n");
		break;
	}
	default:
	{
		break;
 8001cc0:	e03b      	b.n	8001d3a <RangeErrorsMsg+0xd6>
		writeMsg(&handlerUSART1, "Sigma estimator outofbounds\n");
 8001cc2:	4920      	ldr	r1, [pc, #128]	; (8001d44 <RangeErrorsMsg+0xe0>)
 8001cc4:	4820      	ldr	r0, [pc, #128]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001cc6:	f011 fb0d 	bl	80132e4 <writeMsg>
		break;
 8001cca:	e037      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Signal too low to detect target\n");
 8001ccc:	491f      	ldr	r1, [pc, #124]	; (8001d4c <RangeErrorsMsg+0xe8>)
 8001cce:	481e      	ldr	r0, [pc, #120]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001cd0:	f011 fb08 	bl	80132e4 <writeMsg>
		break;
 8001cd4:	e032      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Target out of bounds\n");
 8001cd6:	491e      	ldr	r1, [pc, #120]	; (8001d50 <RangeErrorsMsg+0xec>)
 8001cd8:	481b      	ldr	r0, [pc, #108]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001cda:	f011 fb03 	bl	80132e4 <writeMsg>
		break;
 8001cde:	e02d      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Hardware or Tof sensor failure\n");
 8001ce0:	491c      	ldr	r1, [pc, #112]	; (8001d54 <RangeErrorsMsg+0xf0>)
 8001ce2:	4819      	ldr	r0, [pc, #100]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001ce4:	f011 fafe 	bl	80132e4 <writeMsg>
		break;
 8001ce8:	e028      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "No wraparound check has been done (this is the very first range)\n");
 8001cea:	491b      	ldr	r1, [pc, #108]	; (8001d58 <RangeErrorsMsg+0xf4>)
 8001cec:	4816      	ldr	r0, [pc, #88]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001cee:	f011 faf9 	bl	80132e4 <writeMsg>
		break;
 8001cf2:	e023      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Wraparound occurred\n");
 8001cf4:	4919      	ldr	r1, [pc, #100]	; (8001d5c <RangeErrorsMsg+0xf8>)
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001cf8:	f011 faf4 	bl	80132e4 <writeMsg>
		break;
 8001cfc:	e01e      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Internal processing error\n");
 8001cfe:	4918      	ldr	r1, [pc, #96]	; (8001d60 <RangeErrorsMsg+0xfc>)
 8001d00:	4811      	ldr	r0, [pc, #68]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001d02:	f011 faef 	bl	80132e4 <writeMsg>
		break;
 8001d06:	e019      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Raised one time after init, ranging value has to be ignored\n");
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <RangeErrorsMsg+0x100>)
 8001d0a:	480f      	ldr	r0, [pc, #60]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001d0c:	f011 faea 	bl	80132e4 <writeMsg>
		break;
 8001d10:	e014      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Ranging is OK, but distance reported is the result of multiple targets merged together.\n");
 8001d12:	4915      	ldr	r1, [pc, #84]	; (8001d68 <RangeErrorsMsg+0x104>)
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001d16:	f011 fae5 	bl	80132e4 <writeMsg>
		break;
 8001d1a:	e00f      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "There is a target, but signal is too low to report ranging\n");
 8001d1c:	4913      	ldr	r1, [pc, #76]	; (8001d6c <RangeErrorsMsg+0x108>)
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001d20:	f011 fae0 	bl	80132e4 <writeMsg>
		break;
 8001d24:	e00a      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Ranging data is negative and has to be ignored\n");
 8001d26:	4912      	ldr	r1, [pc, #72]	; (8001d70 <RangeErrorsMsg+0x10c>)
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001d2a:	f011 fadb 	bl	80132e4 <writeMsg>
		break;
 8001d2e:	e005      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Target not detected, without no warning or errors raised\n");
 8001d30:	4910      	ldr	r1, [pc, #64]	; (8001d74 <RangeErrorsMsg+0x110>)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <RangeErrorsMsg+0xe4>)
 8001d34:	f011 fad6 	bl	80132e4 <writeMsg>
		break;
 8001d38:	e000      	b.n	8001d3c <RangeErrorsMsg+0xd8>
		break;
 8001d3a:	bf00      	nop
	}
	}
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	0801b65c 	.word	0x0801b65c
 8001d48:	20002dd4 	.word	0x20002dd4
 8001d4c:	0801b67c 	.word	0x0801b67c
 8001d50:	0801b6a0 	.word	0x0801b6a0
 8001d54:	0801b6b8 	.word	0x0801b6b8
 8001d58:	0801b6d8 	.word	0x0801b6d8
 8001d5c:	0801b71c 	.word	0x0801b71c
 8001d60:	0801b734 	.word	0x0801b734
 8001d64:	0801b750 	.word	0x0801b750
 8001d68:	0801b790 	.word	0x0801b790
 8001d6c:	0801b7ec 	.word	0x0801b7ec
 8001d70:	0801b828 	.word	0x0801b828
 8001d74:	0801b858 	.word	0x0801b858

08001d78 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD6;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <BTimer2_Callback+0x20>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <BTimer2_Callback+0x20>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8001d8a:	615a      	str	r2, [r3, #20]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20002d90 	.word	0x20002d90

08001d9c <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001da0:	f011 fab8 	bl	8013314 <getRxData>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <Usart2_RX_Callback+0x14>)
 8001daa:	701a      	strb	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20002f0c 	.word	0x20002f0c

08001db4 <WelcomeMsg>:

void WelcomeMsg(void){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	writeMsg(&handlerUSART1, "\n");
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <WelcomeMsg+0x40>)
 8001dba:	480f      	ldr	r0, [pc, #60]	; (8001df8 <WelcomeMsg+0x44>)
 8001dbc:	f011 fa92 	bl	80132e4 <writeMsg>
	writeMsg(&handlerUSART1, " @@@@  @@@@@     @@    @@ @@@@@   @@@@  @@@@@      @@@@  @@@@ @@  @@  @@@@   @@@@  @@@@@ \n");
 8001dc0:	490e      	ldr	r1, [pc, #56]	; (8001dfc <WelcomeMsg+0x48>)
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <WelcomeMsg+0x44>)
 8001dc4:	f011 fa8e 	bl	80132e4 <writeMsg>
	writeMsg(&handlerUSART1, "@@  @@ @@  @@    @@       @@  @@ @@  @@ @@  @@    @@     @@   @@@ @@ @@     @@  @@ @@  @@\n");
 8001dc8:	490d      	ldr	r1, [pc, #52]	; (8001e00 <WelcomeMsg+0x4c>)
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <WelcomeMsg+0x44>)
 8001dcc:	f011 fa8a 	bl	80132e4 <writeMsg>
	writeMsg(&handlerUSART1, "   @@  @@  @@    @@    @@ @@  @@ @@@@@@ @@@@@      @@@@  @@@@ @@ @@@  @@@@  @@  @@ @@@@@_\n");
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <WelcomeMsg+0x50>)
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <WelcomeMsg+0x44>)
 8001dd4:	f011 fa86 	bl	80132e4 <writeMsg>
	writeMsg(&handlerUSART1, " @@    @@  @@    @@    @@ @@  @@ @@  @@ @@  @@        @@ @@   @@  @@     @@ @@  @@ @@  @@\n");
 8001dd8:	490b      	ldr	r1, [pc, #44]	; (8001e08 <WelcomeMsg+0x54>)
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <WelcomeMsg+0x44>)
 8001ddc:	f011 fa82 	bl	80132e4 <writeMsg>
	writeMsg(&handlerUSART1, "@@@@@  @@@@@     @@@@@ @@ @@@@@  @@  @@ @@  @@     @@@@  @@@@ @@  @@  @@@@   @@@@  @@  @@\n\n");
 8001de0:	490a      	ldr	r1, [pc, #40]	; (8001e0c <WelcomeMsg+0x58>)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <WelcomeMsg+0x44>)
 8001de4:	f011 fa7e 	bl	80132e4 <writeMsg>
	writeMsg(&handlerUSART1, "Write 'Menu @' to see the options\n");
 8001de8:	4909      	ldr	r1, [pc, #36]	; (8001e10 <WelcomeMsg+0x5c>)
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <WelcomeMsg+0x44>)
 8001dec:	f011 fa7a 	bl	80132e4 <writeMsg>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0801b894 	.word	0x0801b894
 8001df8:	20002dd4 	.word	0x20002dd4
 8001dfc:	0801b898 	.word	0x0801b898
 8001e00:	0801b8f4 	.word	0x0801b8f4
 8001e04:	0801b950 	.word	0x0801b950
 8001e08:	0801b9ac 	.word	0x0801b9ac
 8001e0c:	0801ba08 	.word	0x0801ba08
 8001e10:	0801ba64 	.word	0x0801ba64

08001e14 <initEXTI>:

void initEXTI(void){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	handlerEchoExti.EXTIx				= EXTI10;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <initEXTI+0x28>)
 8001e1a:	220a      	movs	r2, #10
 8001e1c:	701a      	strb	r2, [r3, #0]
	handlerEchoExti.pinPort				= PC;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <initEXTI+0x28>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	705a      	strb	r2, [r3, #1]
	handlerEchoExti.pinPUPD_Mode     	= GPIO_PUPDR_PULLDOWN;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <initEXTI+0x28>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	709a      	strb	r2, [r3, #2]
	handlerEchoExti.triggerMode			= FALLING_RISING_TRIGGER;
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <initEXTI+0x28>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	70da      	strb	r2, [r3, #3]
	exti_Config(&handlerEchoExti);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <initEXTI+0x28>)
 8001e32:	f010 fb35 	bl	80124a0 <exti_Config>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20002dc4 	.word	0x20002dc4

08001e40 <Exti10_Rising_Callback>:



void Exti10_Rising_Callback(void){
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	timeStamp = htim5.Instance->CNT;
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <Exti10_Rising_Callback+0x18>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <Exti10_Rising_Callback+0x1c>)
 8001e4c:	6013      	str	r3, [r2, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000280 	.word	0x20000280
 8001e5c:	20003764 	.word	0x20003764

08001e60 <Exti10_Falling_Callback>:

void Exti10_Falling_Callback(void){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	timeTravel = htim5.Instance->CNT-timeStamp;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <Exti10_Falling_Callback+0x2c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <Exti10_Falling_Callback+0x30>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <Exti10_Falling_Callback+0x34>)
 8001e72:	6013      	str	r3, [r2, #0]
	getDistance(timeTravel);
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <Exti10_Falling_Callback+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 f83d 	bl	8001ef8 <getDistance>
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001e7e:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <Exti10_Falling_Callback+0x2c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000280 	.word	0x20000280
 8001e90:	20003764 	.word	0x20003764
 8001e94:	20003768 	.word	0x20003768

08001e98 <SendUltraPulse>:


void SendUltraPulse(void){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	Delay_us(5);
 8001e9c:	2005      	movs	r0, #5
 8001e9e:	f000 f811 	bl	8001ec4 <Delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2140      	movs	r1, #64	; 0x40
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <SendUltraPulse+0x28>)
 8001ea8:	f011 fe46 	bl	8013b38 <HAL_GPIO_WritePin>
	Delay_us(10);
 8001eac:	200a      	movs	r0, #10
 8001eae:	f000 f809 	bl	8001ec4 <Delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <SendUltraPulse+0x28>)
 8001eb8:	f011 fe3e 	bl	8013b38 <HAL_GPIO_WritePin>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <Delay_us>:

void Delay_us(uint16_t us){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <Delay_us+0x30>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim5) < us);
 8001ed6:	bf00      	nop
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <Delay_us+0x30>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3f9      	bcc.n	8001ed8 <Delay_us+0x14>
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000280 	.word	0x20000280

08001ef8 <getDistance>:


void getDistance(uint32_t time){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	distance = (double) time / 58.0;
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe fb17 	bl	8000534 <__aeabi_ui2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <getDistance+0x70>)
 8001f0c:	f7fe fcb6 	bl	800087c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4915      	ldr	r1, [pc, #84]	; (8001f6c <getDistance+0x74>)
 8001f16:	e9c1 2300 	strd	r2, r3, [r1]
	if (distance < 2.0 || distance > 300.0){
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <getDistance+0x74>)
 8001f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f28:	f7fe fdf0 	bl	8000b0c <__aeabi_dcmplt>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <getDistance+0x50>
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <getDistance+0x74>)
 8001f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f38:	a309      	add	r3, pc, #36	; (adr r3, 8001f60 <getDistance+0x68>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fe03 	bl	8000b48 <__aeabi_dcmpgt>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <getDistance+0x56>
		SendUltraPulse();
 8001f48:	f7ff ffa6 	bl	8001e98 <SendUltraPulse>
 8001f4c:	e003      	b.n	8001f56 <getDistance+0x5e>
	} else{
		flag = 1;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <getDistance+0x78>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
	}
//	sprintf(bufferData, "Distance = %f cm\n", distance);
//	send_uart2(bufferData);
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	00000000 	.word	0x00000000
 8001f64:	4072c000 	.word	0x4072c000
 8001f68:	404d0000 	.word	0x404d0000
 8001f6c:	20003770 	.word	0x20003770
 8001f70:	20003828 	.word	0x20003828
 8001f74:	00000000 	.word	0x00000000

08001f78 <getLightSpeed>:

void getLightSpeed(double* times, double* distances){
 8001f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f7c:	b08e      	sub	sp, #56	; 0x38
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
	double lightSpeed = 0;
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double sumaX = 0;
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double sumaY = 0;
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double sumaX2 = 0;
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double sumaXY = 0;
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Sumas
	for (uint8_t i = 1; i<11; i++){
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
 8001fc4:	e04e      	b.n	8002064 <getLightSpeed+0xec>
		sumaX += times[i];
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001fd6:	f7fe f971 	bl	80002bc <__adddf3>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		sumaY += distances[i];
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ff2:	f7fe f963 	bl	80002bc <__adddf3>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sumaX2 += times[i]*times[i];
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fb07 	bl	8000628 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002022:	f7fe f94b 	bl	80002bc <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		sumaXY += times[i]*distances[i];
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800203a:	7dfb      	ldrb	r3, [r7, #23]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe faef 	bl	8000628 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002052:	f7fe f933 	bl	80002bc <__adddf3>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (uint8_t i = 1; i<11; i++){
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	3301      	adds	r3, #1
 8002062:	75fb      	strb	r3, [r7, #23]
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b0a      	cmp	r3, #10
 8002068:	d9ad      	bls.n	8001fc6 <getLightSpeed+0x4e>
	}

	lightSpeed = (((10.0*sumaXY)-(sumaX*sumaY))*10000000000.0)/((10.0*sumaX2)-(sumaX*sumaX));
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <getLightSpeed+0x1a0>)
 8002070:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002074:	f7fe fad8 	bl	8000628 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002084:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002088:	f7fe face 	bl	8000628 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe f910 	bl	80002b8 <__aeabi_dsub>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	a31b      	add	r3, pc, #108	; (adr r3, 8002110 <getLightSpeed+0x198>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fabf 	bl	8000628 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4614      	mov	r4, r2
 80020b0:	461d      	mov	r5, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <getLightSpeed+0x1a0>)
 80020b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020bc:	f7fe fab4 	bl	8000628 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4690      	mov	r8, r2
 80020c6:	4699      	mov	r9, r3
 80020c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020d0:	f7fe faaa 	bl	8000628 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4640      	mov	r0, r8
 80020da:	4649      	mov	r1, r9
 80020dc:	f7fe f8ec 	bl	80002b8 <__aeabi_dsub>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe fbc8 	bl	800087c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	sprintf(bufferData, "The Measured Speed of Light is %lf km/s\n", lightSpeed);
 80020f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f8:	4908      	ldr	r1, [pc, #32]	; (800211c <getLightSpeed+0x1a4>)
 80020fa:	4809      	ldr	r0, [pc, #36]	; (8002120 <getLightSpeed+0x1a8>)
 80020fc:	f014 fef8 	bl	8016ef0 <siprintf>
	send_uart2(bufferData);
 8002100:	4807      	ldr	r0, [pc, #28]	; (8002120 <getLightSpeed+0x1a8>)
 8002102:	f000 f84d 	bl	80021a0 <send_uart2>
}
 8002106:	bf00      	nop
 8002108:	3738      	adds	r7, #56	; 0x38
 800210a:	46bd      	mov	sp, r7
 800210c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002110:	20000000 	.word	0x20000000
 8002114:	4202a05f 	.word	0x4202a05f
 8002118:	40240000 	.word	0x40240000
 800211c:	0801ba88 	.word	0x0801ba88
 8002120:	20002ea8 	.word	0x20002ea8

08002124 <Static>:

void Static(unsigned int numData){
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	/**
	 * StaticRanging hace numData mediciones con el sensor ToF
	 */
	while (numData > 0){
 800212c:	e019      	b.n	8002162 <Static+0x3e>
		counterRangigData = 0;
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <Static+0x5c>)
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
		RangingMeasurment();
 8002134:	f7ff fb08 	bl	8001748 <RangingMeasurment>
		sprintf(bufferData, "Distance = %f mm\n",rangingData[0]);
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <Static+0x60>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa1b 	bl	8000578 <__aeabi_f2d>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4910      	ldr	r1, [pc, #64]	; (8002188 <Static+0x64>)
 8002148:	4810      	ldr	r0, [pc, #64]	; (800218c <Static+0x68>)
 800214a:	f014 fed1 	bl	8016ef0 <siprintf>
		writeMsg(&handlerUSART1, bufferData);
 800214e:	490f      	ldr	r1, [pc, #60]	; (800218c <Static+0x68>)
 8002150:	480f      	ldr	r0, [pc, #60]	; (8002190 <Static+0x6c>)
 8002152:	f011 f8c7 	bl	80132e4 <writeMsg>
		numData--;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3b01      	subs	r3, #1
 800215a:	607b      	str	r3, [r7, #4]
		HAL_Delay(10);
 800215c:	200a      	movs	r0, #10
 800215e:	f011 f9fd 	bl	801355c <HAL_Delay>
	while (numData > 0){
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e2      	bne.n	800212e <Static+0xa>
	}
	writeMsg(&handlerUSART1, "The Static Ranging has finished\n");
 8002168:	490a      	ldr	r1, [pc, #40]	; (8002194 <Static+0x70>)
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <Static+0x6c>)
 800216c:	f011 f8ba 	bl	80132e4 <writeMsg>
	getLightSpeed(times, distances);
 8002170:	4909      	ldr	r1, [pc, #36]	; (8002198 <Static+0x74>)
 8002172:	480a      	ldr	r0, [pc, #40]	; (800219c <Static+0x78>)
 8002174:	f7ff ff00 	bl	8001f78 <getLightSpeed>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20003760 	.word	0x20003760
 8002184:	20002f5c 	.word	0x20002f5c
 8002188:	0801bab4 	.word	0x0801bab4
 800218c:	20002ea8 	.word	0x20002ea8
 8002190:	20002dd4 	.word	0x20002dd4
 8002194:	0801b4e8 	.word	0x0801b4e8
 8002198:	20003778 	.word	0x20003778
 800219c:	200037d0 	.word	0x200037d0

080021a0 <send_uart2>:


void send_uart2 (char *string)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen (string);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe f823 	bl	80001f4 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <send_uart2+0x28>)
 80021bc:	f013 fc63 	bl	8015a86 <HAL_UART_Transmit>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200002c8 	.word	0x200002c8

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <Error_Handler+0x8>
	...

080021d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_MspInit+0xa0>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a24      	ldr	r2, [pc, #144]	; (8002278 <HAL_MspInit+0xa0>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_MspInit+0xa0>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_MspInit+0xa0>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_MspInit+0xa0>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_MspInit+0xa0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002216:	2007      	movs	r0, #7
 8002218:	f011 fa94 	bl	8013744 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	f06f 000b 	mvn.w	r0, #11
 8002224:	f011 fa99 	bl	801375a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	f06f 000a 	mvn.w	r0, #10
 8002230:	f011 fa93 	bl	801375a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	f06f 0009 	mvn.w	r0, #9
 800223c:	f011 fa8d 	bl	801375a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	f06f 0004 	mvn.w	r0, #4
 8002248:	f011 fa87 	bl	801375a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	f06f 0003 	mvn.w	r0, #3
 8002254:	f011 fa81 	bl	801375a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	f06f 0001 	mvn.w	r0, #1
 8002260:	f011 fa7b 	bl	801375a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f011 fa75 	bl	801375a <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_I2C_MspInit+0x84>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12c      	bne.n	80022f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_I2C_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a17      	ldr	r2, [pc, #92]	; (8002304 <HAL_I2C_MspInit+0x88>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_I2C_MspInit+0x88>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c0:	2312      	movs	r3, #18
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022cc:	2304      	movs	r3, #4
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	480c      	ldr	r0, [pc, #48]	; (8002308 <HAL_I2C_MspInit+0x8c>)
 80022d8:	f011 fa92 	bl	8013800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_I2C_MspInit+0x88>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_I2C_MspInit+0x88>)
 80022e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_I2C_MspInit+0x88>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40005400 	.word	0x40005400
 8002304:	40023800 	.word	0x40023800
 8002308:	40020400 	.word	0x40020400

0800230c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <HAL_TIM_Base_MspInit+0x3c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10d      	bne.n	800233a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_TIM_Base_MspInit+0x40>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_TIM_Base_MspInit+0x40>)
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_TIM_Base_MspInit+0x40>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40000c00 	.word	0x40000c00
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_UART_MspInit+0x84>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12b      	bne.n	80023ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <HAL_UART_MspInit+0x88>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <HAL_UART_MspInit+0x88>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_UART_MspInit+0x88>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_UART_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_UART_MspInit+0x88>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_UART_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023aa:	230c      	movs	r3, #12
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ba:	2307      	movs	r3, #7
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_UART_MspInit+0x8c>)
 80023c6:	f011 fa1b 	bl	8013800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40004400 	.word	0x40004400
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <NMI_Handler+0x4>

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f011 f876 	bl	801351c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL53L1X_INT_Pin);
 8002438:	2010      	movs	r0, #16
 800243a:	f011 fb97 	bl	8013b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}

08002442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
	return 1;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_kill>:

int _kill(int pid, int sig)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800245c:	f013 fe88 	bl	8016170 <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	2216      	movs	r2, #22
 8002464:	601a      	str	r2, [r3, #0]
	return -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_exit>:

void _exit (int status)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800247a:	f04f 31ff 	mov.w	r1, #4294967295
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffe7 	bl	8002452 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002484:	e7fe      	b.n	8002484 <_exit+0x12>

08002486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e00a      	b.n	80024ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002498:	f3af 8000 	nop.w
 800249c:	4601      	mov	r1, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	60ba      	str	r2, [r7, #8]
 80024a4:	b2ca      	uxtb	r2, r1
 80024a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	dbf0      	blt.n	8002498 <_read+0x12>
	}

return len;
 80024b6:	687b      	ldr	r3, [r7, #4]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e009      	b.n	80024e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	60ba      	str	r2, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fdf4 	bl	80010c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf1      	blt.n	80024d2 <_write+0x12>
	}
	return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002520:	605a      	str	r2, [r3, #4]
	return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_isatty>:

int _isatty(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
	return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <_sbrk+0x5c>)
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <_sbrk+0x60>)
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <_sbrk+0x64>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <_sbrk+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d207      	bcs.n	80025a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002590:	f013 fdee 	bl	8016170 <__errno>
 8002594:	4603      	mov	r3, r0
 8002596:	220c      	movs	r2, #12
 8002598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e009      	b.n	80025b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <_sbrk+0x64>)
 80025b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20020000 	.word	0x20020000
 80025c0:	00000400 	.word	0x00000400
 80025c4:	2000382c 	.word	0x2000382c
 80025c8:	20003a00 	.word	0x20003a00

080025cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SystemInit+0x20>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <SystemInit+0x20>)
 80025d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <_I2CWrite>:
#   define VL53LX_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	330a      	adds	r3, #10
 8002600:	617b      	str	r3, [r7, #20]
//    int i;
    i2cwriteCount+=count;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <_I2CWrite+0x54>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <_I2CWrite+0x54>)
 800260c:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002614:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800261e:	f893 3a50 	ldrb.w	r3, [r3, #2640]	; 0xa50
 8002622:	b299      	uxth	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	b29a      	uxth	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f011 fbf8 	bl	8013e24 <HAL_I2C_Master_Transmit>
 8002634:	4603      	mov	r3, r0
 8002636:	613b      	str	r3, [r7, #16]

    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002638:	693b      	ldr	r3, [r7, #16]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20003834 	.word	0x20003834

08002648 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	330a      	adds	r3, #10
 8002658:	617b      	str	r3, [r7, #20]

    i2creadCount+=count;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_I2CRead+0x58>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <_I2CRead+0x58>)
 8002664:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800266c:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002676:	f893 3a50 	ldrb.w	r3, [r3, #2640]	; 0xa50
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	b299      	uxth	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	b29a      	uxth	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	f011 fcc7 	bl	8014020 <HAL_I2C_Master_Receive>
 8002692:	4603      	mov	r3, r0
 8002694:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002696:	693b      	ldr	r3, [r7, #16]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20003830 	.word	0x20003830

080026a4 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d902      	bls.n	80026c4 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 80026be:	f06f 0303 	mvn.w	r3, #3
 80026c2:	e01d      	b.n	8002700 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <VL53LX_WriteMulti+0x64>)
 80026ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <VL53LX_WriteMulti+0x64>)
 80026d6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <VL53LX_WriteMulti+0x68>)
 80026de:	f013 fd71 	bl	80161c4 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3302      	adds	r3, #2
 80026e6:	461a      	mov	r2, r3
 80026e8:	4907      	ldr	r1, [pc, #28]	; (8002708 <VL53LX_WriteMulti+0x64>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff ff80 	bl	80025f0 <_I2CWrite>
 80026f0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80026f8:	23f3      	movs	r3, #243	; 0xf3
 80026fa:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80026fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20003838 	.word	0x20003838
 800270c:	2000383a 	.word	0x2000383a

08002710 <VL53LX_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <VL53LX_ReadMulti+0x68>)
 800272e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <VL53LX_ReadMulti+0x68>)
 8002736:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002738:	2202      	movs	r2, #2
 800273a:	490f      	ldr	r1, [pc, #60]	; (8002778 <VL53LX_ReadMulti+0x68>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ff57 	bl	80025f0 <_I2CWrite>
 8002742:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800274a:	23f3      	movs	r3, #243	; 0xf3
 800274c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800274e:	e00c      	b.n	800276a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff ff77 	bl	8002648 <_I2CRead>
 800275a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8002762:	23f3      	movs	r3, #243	; 0xf3
 8002764:	75fb      	strb	r3, [r7, #23]
 8002766:	e000      	b.n	800276a <VL53LX_ReadMulti+0x5a>
    }
done:
 8002768:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 800276a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20003838 	.word	0x20003838

0800277c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b29b      	uxth	r3, r3
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <VL53LX_WrByte+0x50>)
 800279a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <VL53LX_WrByte+0x50>)
 80027a2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80027a4:	4a09      	ldr	r2, [pc, #36]	; (80027cc <VL53LX_WrByte+0x50>)
 80027a6:	787b      	ldrb	r3, [r7, #1]
 80027a8:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80027aa:	2203      	movs	r2, #3
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <VL53LX_WrByte+0x50>)
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff1e 	bl	80025f0 <_I2CWrite>
 80027b4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80027bc:	23f3      	movs	r3, #243	; 0xf3
 80027be:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80027c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20003838 	.word	0x20003838

080027d0 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <VL53LX_WrWord+0x60>)
 80027ee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <VL53LX_WrWord+0x60>)
 80027f6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80027f8:	883b      	ldrh	r3, [r7, #0]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <VL53LX_WrWord+0x60>)
 8002802:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8002804:	883b      	ldrh	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <VL53LX_WrWord+0x60>)
 800280a:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800280c:	2204      	movs	r2, #4
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <VL53LX_WrWord+0x60>)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff feed 	bl	80025f0 <_I2CWrite>
 8002816:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800281e:	23f3      	movs	r3, #243	; 0xf3
 8002820:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20003838 	.word	0x20003838

08002834 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	460b      	mov	r3, r1
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	b29b      	uxth	r3, r3
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <VL53LX_RdByte+0x64>)
 8002850:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <VL53LX_RdByte+0x64>)
 8002858:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800285a:	2202      	movs	r2, #2
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <VL53LX_RdByte+0x64>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fec6 	bl	80025f0 <_I2CWrite>
 8002864:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800286c:	23f3      	movs	r3, #243	; 0xf3
 800286e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002870:	e00c      	b.n	800288c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8002872:	2201      	movs	r2, #1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fee6 	bl	8002648 <_I2CRead>
 800287c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8002884:	23f3      	movs	r3, #243	; 0xf3
 8002886:	75fb      	strb	r3, [r7, #23]
 8002888:	e000      	b.n	800288c <VL53LX_RdByte+0x58>
    }
done:
 800288a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 800288c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20003838 	.word	0x20003838

0800289c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	460b      	mov	r3, r1
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <VL53LX_RdWord+0x7c>)
 80028b8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <VL53LX_RdWord+0x7c>)
 80028c0:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80028c2:	2202      	movs	r2, #2
 80028c4:	4914      	ldr	r1, [pc, #80]	; (8002918 <VL53LX_RdWord+0x7c>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fe92 	bl	80025f0 <_I2CWrite>
 80028cc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80028d4:	23f3      	movs	r3, #243	; 0xf3
 80028d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80028d8:	e017      	b.n	800290a <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80028da:	2202      	movs	r2, #2
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <VL53LX_RdWord+0x7c>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff feb2 	bl	8002648 <_I2CRead>
 80028e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80028ec:	23f3      	movs	r3, #243	; 0xf3
 80028ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 80028f0:	e00b      	b.n	800290a <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <VL53LX_RdWord+0x7c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <VL53LX_RdWord+0x7c>)
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	b29b      	uxth	r3, r3
 8002902:	4413      	add	r3, r2
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 800290a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20003838 	.word	0x20003838

0800291c <VL53LX_GetTickCount>:
}

VL53LX_Error VL53LX_GetTickCount(
	VL53LX_DEV Dev,
	uint32_t *ptick_count_ms)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <VL53LX_WaitMs>:
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}


VL53LX_Error VL53LX_WaitMs(VL53LX_Dev_t *pdev, int32_t wait_ms){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f010 fe05 	bl	801355c <HAL_Delay>
    return VL53LX_ERROR_NONE;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_Dev_t *pdev, int32_t wait_us){
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <VL53LX_WaitUs+0x28>)
 800296a:	fb82 1203 	smull	r1, r2, r2, r3
 800296e:	1192      	asrs	r2, r2, #6
 8002970:	17db      	asrs	r3, r3, #31
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4618      	mov	r0, r3
 8002976:	f010 fdf1 	bl	801355c <HAL_Delay>
    return VL53LX_ERROR_NONE;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	10624dd3 	.word	0x10624dd3

08002988 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800298e:	af00      	add	r7, sp, #0
 8002990:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8002994:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8002998:	6020      	str	r0, [r4, #0]
 800299a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800299e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 80029a2:	6001      	str	r1, [r0, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80029aa:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80029b4:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 80029b8:	460a      	mov	r2, r1
 80029ba:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029e8:	4940      	ldr	r1, [pc, #256]	; (8002aec <VL53LX_WaitValueMaskEx+0x164>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f014 fb11 	bl	8017012 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(pdev, &start_time_ms);
 80029f0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80029f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80029f8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80029fc:	4611      	mov	r1, r2
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	f7ff ff8c 	bl	800291c <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8002a04:	e04e      	b.n	8002aa4 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8002a06:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d110      	bne.n	8002a30 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 8002a0e:	f207 2213 	addw	r2, r7, #531	; 0x213
 8002a12:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002a16:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8002a1a:	8819      	ldrh	r1, [r3, #0]
 8002a1c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002a20:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f7ff ff05 	bl	8002834 <VL53LX_RdByte>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8002a30:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8002a34:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002a40:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8002a44:	7812      	ldrb	r2, [r2, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d102      	bne.n	8002a50 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8002a50:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d114      	bne.n	8002a82 <VL53LX_WaitValueMaskEx+0xfa>
 8002a58:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d110      	bne.n	8002a82 <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8002a60:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8002a68:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8002a6c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002a70:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002a74:	4611      	mov	r1, r2
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f7ff ff62 	bl	8002940 <VL53LX_WaitMs>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(pdev, &current_time_ms);
 8002a82:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8002a86:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002a8a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002a8e:	4611      	mov	r1, r2
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	f7ff ff43 	bl	800291c <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8002a96:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002a9a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8002aa4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10c      	bne.n	8002ac6 <VL53LX_WaitValueMaskEx+0x13e>
 8002aac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002ab0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002ab4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d203      	bcs.n	8002ac6 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8002abe:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d09f      	beq.n	8002a06 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8002ac6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <VL53LX_WaitValueMaskEx+0x154>
 8002ace:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 8002ad6:	23f9      	movs	r3, #249	; 0xf9
 8002ad8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8002adc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	0801bac8 	.word	0x0801bac8

08002af0 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af06      	add	r7, sp, #24
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	9304      	str	r3, [sp, #16]
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	9303      	str	r3, [sp, #12]
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	9302      	str	r3, [sp, #8]
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68b8      	ldr	r0, [r7, #8]
 8002b1e:	f00c fe6d 	bl	800f7fc <VL53LX_hist_process_data>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8002b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b50:	4c0b      	ldr	r4, [pc, #44]	; (8002b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b5e:	f7ff fd35 	bl	80025cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f013 fb0b 	bl	801617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b66:	f7fe fad7 	bl	8001118 <main>
  bx  lr    
 8002b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b74:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002b78:	0801bfc4 	.word	0x0801bfc4
  ldr r2, =_sbss
 8002b7c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002b80:	20003a00 	.word	0x20003a00

08002b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <_I2cFailRecover+0x138>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <_I2cFailRecover+0x138>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <_I2cFailRecover+0x138>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb4:	4843      	ldr	r0, [pc, #268]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002bb6:	f010 ffbf 	bl	8013b38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bc0:	4840      	ldr	r0, [pc, #256]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002bc2:	f010 ffb9 	bl	8013b38 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 8002bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002bcc:	2311      	movs	r3, #17
 8002bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	4619      	mov	r1, r3
 8002bda:	483a      	ldr	r0, [pc, #232]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002bdc:	f010 fe10 	bl	8013800 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e014      	b.n	8002c10 <_I2cFailRecover+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bec:	4835      	ldr	r0, [pc, #212]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002bee:	f010 ffa3 	bl	8013b38 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f010 fcb2 	bl	801355c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bfe:	4831      	ldr	r0, [pc, #196]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002c00:	f010 ff9a 	bl	8013b38 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8002c04:	2001      	movs	r0, #1
 8002c06:	f010 fca9 	bl	801355c <HAL_Delay>
        for( i=0; i<10; i++){
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	dde7      	ble.n	8002be6 <_I2cFailRecover+0x5e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8002c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c1a:	482a      	ldr	r0, [pc, #168]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002c1c:	f010 ff74 	bl	8013b08 <HAL_GPIO_ReadPin>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <_I2cFailRecover+0xa8>
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	623a      	str	r2, [r7, #32]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	ddd7      	ble.n	8002be0 <_I2cFailRecover+0x58>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8002c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c34:	4823      	ldr	r0, [pc, #140]	; (8002cc4 <_I2cFailRecover+0x13c>)
 8002c36:	f010 ff67 	bl	8013b08 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d13b      	bne.n	8002cb8 <_I2cFailRecover+0x130>
        __GPIOA_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <_I2cFailRecover+0x138>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <_I2cFailRecover+0x138>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <_I2cFailRecover+0x138>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4816      	ldr	r0, [pc, #88]	; (8002cc8 <_I2cFailRecover+0x140>)
 8002c70:	f010 fdc6 	bl	8013800 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	2120      	movs	r1, #32
 8002c78:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <_I2cFailRecover+0x140>)
 8002c7a:	f010 ff5d 	bl	8013b38 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8002c7e:	2021      	movs	r0, #33	; 0x21
 8002c80:	f010 fc6c 	bl	801355c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2120      	movs	r1, #32
 8002c88:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <_I2cFailRecover+0x140>)
 8002c8a:	f010 ff55 	bl	8013b38 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8002c8e:	2021      	movs	r0, #33	; 0x21
 8002c90:	f010 fc64 	bl	801355c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002c94:	2201      	movs	r2, #1
 8002c96:	2120      	movs	r1, #32
 8002c98:	480b      	ldr	r0, [pc, #44]	; (8002cc8 <_I2cFailRecover+0x140>)
 8002c9a:	f010 ff4d 	bl	8013b38 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8002c9e:	2021      	movs	r0, #33	; 0x21
 8002ca0:	f010 fc5c 	bl	801355c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <_I2cFailRecover+0x140>)
 8002caa:	f010 ff45 	bl	8013b38 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8002cae:	f44f 7025 	mov.w	r0, #660	; 0x294
 8002cb2:	f010 fc53 	bl	801355c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002cb6:	e7dd      	b.n	8002c74 <_I2cFailRecover+0xec>
        }while(1);
    }
}
 8002cb8:	bf00      	nop
 8002cba:	3728      	adds	r7, #40	; 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020000 	.word	0x40020000

08002ccc <XNUCLEO53L3A2_I2C1Configure>:



int XNUCLEO53L3A2_I2C1Configure() {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 8002cd2:	f7ff ff59 	bl	8002b88 <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d12:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d14:	2312      	movs	r3, #18
 8002d16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d20:	2304      	movs	r3, #4
 8002d22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4815      	ldr	r0, [pc, #84]	; (8002d80 <XNUCLEO53L3A2_I2C1Configure+0xb4>)
 8002d2c:	f010 fd68 	bl	8013800 <HAL_GPIO_Init>

    XNUCLEO53L3A2_hi2c.Instance = I2C1;
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <XNUCLEO53L3A2_I2C1Configure+0xbc>)
 8002d34:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L3A2_hi2c.Init.ClockSpeed = 400000;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <XNUCLEO53L3A2_I2C1Configure+0xc0>)
 8002d3a:	605a      	str	r2, [r3, #4]
    XNUCLEO53L3A2_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L3A2_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
#endif
    XNUCLEO53L3A2_hi2c.Init.OwnAddress1 = 0;
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
    XNUCLEO53L3A2_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d4e:	611a      	str	r2, [r3, #16]
    XNUCLEO53L3A2_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
    XNUCLEO53L3A2_hi2c.Init.OwnAddress2 = 0;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
    XNUCLEO53L3A2_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
    XNUCLEO53L3A2_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L3A2_hi2c);
 8002d68:	4806      	ldr	r0, [pc, #24]	; (8002d84 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002d6a:	f010 ff17 	bl	8013b9c <HAL_I2C_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	61fb      	str	r3, [r7, #28]
    return status;
 8002d72:	69fb      	ldr	r3, [r7, #28]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40020400 	.word	0x40020400
 8002d84:	20003938 	.word	0x20003938
 8002d88:	40005400 	.word	0x40005400
 8002d8c:	00061a80 	.word	0x00061a80

08002d90 <XNUCLEO53L3A2_Init>:
done:
    return status;
}


int XNUCLEO53L3A2_Init(void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L3A2_USART2_UART_Init();
    XNUCLEO53L3A2_I2C1Configure();
 8002d96:	f7ff ff99 	bl	8002ccc <XNUCLEO53L3A2_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8002d9a:	463a      	mov	r2, r7
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	2100      	movs	r1, #0
 8002da0:	2086      	movs	r0, #134	; 0x86
 8002da2:	f000 f8ed 	bl	8002f80 <_ExpanderRd>
 8002da6:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13c      	bne.n	8002e28 <XNUCLEO53L3A2_Init+0x98>
 8002dae:	783b      	ldrb	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d139      	bne.n	8002e28 <XNUCLEO53L3A2_Init+0x98>
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b16      	cmp	r3, #22
 8002db8:	d136      	bne.n	8002e28 <XNUCLEO53L3A2_Init+0x98>
        XNUCLEO53L3A2_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
        goto done_err;

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 8002dba:	463a      	mov	r2, r7
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2084      	movs	r0, #132	; 0x84
 8002dc2:	f000 f8dd 	bl	8002f80 <_ExpanderRd>
 8002dc6:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d12e      	bne.n	8002e2c <XNUCLEO53L3A2_Init+0x9c>
 8002dce:	783b      	ldrb	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d12b      	bne.n	8002e2c <XNUCLEO53L3A2_Init+0x9c>
 8002dd4:	787b      	ldrb	r3, [r7, #1]
 8002dd6:	2b16      	cmp	r3, #22
 8002dd8:	d128      	bne.n	8002e2c <XNUCLEO53L3A2_Init+0x9c>
        XNUCLEO53L3A2_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
        goto done_err;
    }

    CurIOVal.u32=0x0;
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <XNUCLEO53L3A2_Init+0xb0>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 8002de0:	23ff      	movs	r3, #255	; 0xff
 8002de2:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 8002de4:	23ff      	movs	r3, #255	; 0xff
 8002de6:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8002de8:	463a      	mov	r2, r7
 8002dea:	2302      	movs	r3, #2
 8002dec:	2114      	movs	r1, #20
 8002dee:	2086      	movs	r0, #134	; 0x86
 8002df0:	f000 f8f8 	bl	8002fe4 <_ExpanderWR>
 8002df4:	6078      	str	r0, [r7, #4]
    if (status) {
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d119      	bne.n	8002e30 <XNUCLEO53L3A2_Init+0xa0>
        XNUCLEO53L3A2_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
        goto done_err;
    }
    ExpanderData[0] = 0xFF;
 8002dfc:	23ff      	movs	r3, #255	; 0xff
 8002dfe:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8002e00:	23bf      	movs	r3, #191	; 0xbf
 8002e02:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8002e04:	463a      	mov	r2, r7
 8002e06:	2302      	movs	r3, #2
 8002e08:	2114      	movs	r1, #20
 8002e0a:	2084      	movs	r0, #132	; 0x84
 8002e0c:	f000 f8ea 	bl	8002fe4 <_ExpanderWR>
 8002e10:	6078      	str	r0, [r7, #4]
    if (status) {
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <XNUCLEO53L3A2_Init+0xa4>
        XNUCLEO53L3A2_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
        goto done_err;
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <XNUCLEO53L3A2_Init+0xb0>)
 8002e1a:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8002e1e:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 8002e20:	f000 f88e 	bl	8002f40 <_ExpandersSetAllIO>
 8002e24:	6078      	str	r0, [r7, #4]
    if( status ){
        XNUCLEO53L3A2_ErrLog("Set initial i/o ");
    }

done_err:
 8002e26:	e006      	b.n	8002e36 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002e28:	bf00      	nop
 8002e2a:	e004      	b.n	8002e36 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002e2c:	bf00      	nop
 8002e2e:	e002      	b.n	8002e36 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002e34:	bf00      	nop
    return status;
 8002e36:	687b      	ldr	r3, [r7, #4]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2000398c 	.word	0x2000398c

08002e44 <XNUCLEO53L3A2_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L3A2_ResetId(int DevNo, int state) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b72      	cmp	r3, #114	; 0x72
 8002e52:	d04c      	beq.n	8002eee <XNUCLEO53L3A2_ResetId+0xaa>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b72      	cmp	r3, #114	; 0x72
 8002e58:	dc62      	bgt.n	8002f20 <XNUCLEO53L3A2_ResetId+0xdc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b6c      	cmp	r3, #108	; 0x6c
 8002e5e:	d02d      	beq.n	8002ebc <XNUCLEO53L3A2_ResetId+0x78>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b6c      	cmp	r3, #108	; 0x6c
 8002e64:	dc5c      	bgt.n	8002f20 <XNUCLEO53L3A2_ResetId+0xdc>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b63      	cmp	r3, #99	; 0x63
 8002e6a:	d00e      	beq.n	8002e8a <XNUCLEO53L3A2_ResetId+0x46>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b63      	cmp	r3, #99	; 0x63
 8002e70:	dc56      	bgt.n	8002f20 <XNUCLEO53L3A2_ResetId+0xdc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d03a      	beq.n	8002eee <XNUCLEO53L3A2_ResetId+0xaa>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	dc50      	bgt.n	8002f20 <XNUCLEO53L3A2_ResetId+0xdc>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <XNUCLEO53L3A2_ResetId+0x78>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d14a      	bne.n	8002f20 <XNUCLEO53L3A2_ResetId+0xdc>
    case XNUCLEO53L3A2_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002e96:	70da      	strb	r2, [r3, #3]
        if( state )
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <XNUCLEO53L3A2_ResetId+0x68>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002eaa:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 8002eac:	2301      	movs	r3, #1
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <XNUCLEO53L3A2_ResetId+0xf4>)
 8002eb0:	2113      	movs	r1, #19
 8002eb2:	2084      	movs	r0, #132	; 0x84
 8002eb4:	f000 f896 	bl	8002fe4 <_ExpanderWR>
 8002eb8:	60f8      	str	r0, [r7, #12]
        break;
 8002eba:	e035      	b.n	8002f28 <XNUCLEO53L3A2_ResetId+0xe4>
    case XNUCLEO53L3A2_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002ec8:	705a      	strb	r2, [r3, #1]
        if( state )
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <XNUCLEO53L3A2_ResetId+0x9a>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002edc:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <XNUCLEO53L3A2_ResetId+0xf8>)
 8002ee2:	2113      	movs	r1, #19
 8002ee4:	2086      	movs	r0, #134	; 0x86
 8002ee6:	f000 f87d 	bl	8002fe4 <_ExpanderWR>
 8002eea:	60f8      	str	r0, [r7, #12]
        break;
 8002eec:	e01c      	b.n	8002f28 <XNUCLEO53L3A2_ResetId+0xe4>
    case 'r' :
    case XNUCLEO53L3A2_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002efa:	705a      	strb	r2, [r3, #1]
        if( state )
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <XNUCLEO53L3A2_ResetId+0xcc>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002f0e:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8002f10:	2301      	movs	r3, #1
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <XNUCLEO53L3A2_ResetId+0xf8>)
 8002f14:	2113      	movs	r1, #19
 8002f16:	2086      	movs	r0, #134	; 0x86
 8002f18:	f000 f864 	bl	8002fe4 <_ExpanderWR>
 8002f1c:	60f8      	str	r0, [r7, #12]
        break;
 8002f1e:	e003      	b.n	8002f28 <XNUCLEO53L3A2_ResetId+0xe4>
    default:
        XNUCLEO53L3A2_ErrLog("Invalid DevNo %d",DevNo);
        status = -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	60fb      	str	r3, [r7, #12]
        goto done;
 8002f26:	e000      	b.n	8002f2a <XNUCLEO53L3A2_ResetId+0xe6>
    }
//error with valid id
    if( status ){
        XNUCLEO53L3A2_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
    }
done:
 8002f28:	bf00      	nop
    return status;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000398c 	.word	0x2000398c
 8002f38:	2000398f 	.word	0x2000398f
 8002f3c:	2000398d 	.word	0x2000398d

08002f40 <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8002f46:	2302      	movs	r3, #2
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <_ExpandersSetAllIO+0x38>)
 8002f4a:	2112      	movs	r1, #18
 8002f4c:	2086      	movs	r0, #134	; 0x86
 8002f4e:	f000 f849 	bl	8002fe4 <_ExpanderWR>
 8002f52:	6078      	str	r0, [r7, #4]
    if( status ){
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <_ExpandersSetAllIO+0x3c>)
 8002f5e:	2112      	movs	r1, #18
 8002f60:	2084      	movs	r0, #132	; 0x84
 8002f62:	f000 f83f 	bl	8002fe4 <_ExpanderWR>
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	e000      	b.n	8002f6c <_ExpandersSetAllIO+0x2c>
        goto done_err;
 8002f6a:	bf00      	nop
done_err:
    return status;
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	2000398c 	.word	0x2000398c
 8002f7c:	2000398e 	.word	0x2000398e

08002f80 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L3A2_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	b299      	uxth	r1, r3
 8002f98:	f107 0213 	add.w	r2, r7, #19
 8002f9c:	2364      	movs	r3, #100	; 0x64
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <_ExpanderRd+0x60>)
 8002fa4:	f010 ff3e 	bl	8013e24 <HAL_I2C_Master_Transmit>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	617b      	str	r3, [r7, #20]
        if (status)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d110      	bne.n	8002fd4 <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	b299      	uxth	r1, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2064      	movs	r0, #100	; 0x64
 8002fbe:	fb00 f303 	mul.w	r3, r0, r3
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <_ExpanderRd+0x60>)
 8002fca:	f011 f829 	bl	8014020 <HAL_I2C_Master_Receive>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e000      	b.n	8002fd6 <_ExpanderRd+0x56>
            break;
 8002fd4:	bf00      	nop
    } while (0);
    XNUCLEO53L3A2_PutI2cBus();
    return status;
 8002fd6:	697b      	ldr	r3, [r7, #20]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20003938 	.word	0x20003938

08002fe4 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	; 0x30
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f013 f8de 	bl	80161c4 <memcpy>
    XNUCLEO53L3A2_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	b299      	uxth	r1, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	3301      	adds	r3, #1
 8003012:	b29b      	uxth	r3, r3
 8003014:	f107 0214 	add.w	r2, r7, #20
 8003018:	2064      	movs	r0, #100	; 0x64
 800301a:	9000      	str	r0, [sp, #0]
 800301c:	4804      	ldr	r0, [pc, #16]	; (8003030 <_ExpanderWR+0x4c>)
 800301e:	f010 ff01 	bl	8013e24 <HAL_I2C_Master_Transmit>
 8003022:	4603      	mov	r3, r0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L3A2_PutI2cBus();
    return status;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003028:	4618      	mov	r0, r3
 800302a:	3728      	adds	r7, #40	; 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20003938 	.word	0x20003938

08003034 <VL53LX_DataInit>:
	return Status;
}


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800303c:	2300      	movs	r3, #0
 800303e:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8003040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8003048:	2101      	movs	r1, #1
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f001 fa20 	bl	8004490 <VL53LX_data_init>
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8003054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800305c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003060:	2102      	movs	r1, #2
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f884 	bl	8003170 <SetPresetModeL3CX>
 8003068:	4603      	mov	r3, r0
 800306a:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800306c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003074:	f248 2135 	movw	r1, #33333	; 0x8235
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f957 	bl	800332c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 800307e:	4603      	mov	r3, r0
 8003080:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8003082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003094:	3318      	adds	r3, #24
 8003096:	220c      	movs	r2, #12
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f013 f8a0 	bl	80161e0 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 80030a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 80030a8:	2102      	movs	r1, #2
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f003 fb5e 	bl	800676c <VL53LX_set_dmax_mode>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 80030b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fdde 	bl	8003c80 <VL53LX_SmudgeCorrectionEnable>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80030c8:	2320      	movs	r3, #32
 80030ca:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	70da      	strb	r2, [r3, #3]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 2a40 	strb.w	r2, [r3, #2624]	; 0xa40
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80030de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80030f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f00e fcd9 	bl	8011ab2 <VL53LX_poll_for_boot_completion>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003104:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800311c:	2300      	movs	r3, #0
 800311e:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <ComputeDevicePresetMode+0x5c>)
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4611      	mov	r1, r2
 800312a:	8019      	strh	r1, [r3, #0]
 800312c:	3302      	adds	r3, #2
 800312e:	0c12      	lsrs	r2, r2, #16
 8003130:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <ComputeDevicePresetMode+0x2e>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d003      	beq.n	8003144 <ComputeDevicePresetMode+0x34>
 800313c:	e005      	b.n	800314a <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
		break;
 8003142:	e004      	b.n	800314e <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
		break;
 8003148:	e001      	b.n	800314e <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800314a:	2302      	movs	r3, #2
 800314c:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3310      	adds	r3, #16
 8003152:	443b      	add	r3, r7
 8003154:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	701a      	strb	r2, [r3, #0]

	return Status;
 800315c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	0801bacc 	.word	0x0801bacc

08003170 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b08e      	sub	sp, #56	; 0x38
 8003174:	af04      	add	r7, sp, #16
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	460b      	mov	r3, r1
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003194:	2320      	movs	r3, #32
 8003196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 800319a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ffb4 	bl	8003110 <ComputeDevicePresetMode>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 80031ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d112      	bne.n	80031dc <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80031b6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80031ba:	f107 001c 	add.w	r0, r7, #28
 80031be:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	f107 0318 	add.w	r3, r7, #24
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4603      	mov	r3, r0
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f001 fd5b 	bl	8004c8c <VL53LX_get_preset_mode_timing_cfg>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80031dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d112      	bne.n	800320a <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80031e4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80031e8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80031ea:	69fd      	ldr	r5, [r7, #28]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	9102      	str	r1, [sp, #8]
 80031f4:	9201      	str	r2, [sp, #4]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	462b      	mov	r3, r5
 80031fa:	4622      	mov	r2, r4
 80031fc:	4601      	mov	r1, r0
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f001 fda4 	bl	8004d4c <VL53LX_set_preset_mode>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 800320a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003218:	70da      	strb	r2, [r3, #3]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 800321a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bdb0      	pop	{r4, r5, r7, pc}

08003226 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 800323c:	2baa      	cmp	r3, #170	; 0xaa
 800323e:	d106      	bne.n	800324e <IsL4+0x28>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8003246:	2beb      	cmp	r3, #235	; 0xeb
 8003248:	d101      	bne.n	800324e <IsL4+0x28>
		devL4 = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
	return devL4;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <VL53LX_SetDistanceMode>:
}


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003268:	2300      	movs	r3, #0
 800326a:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d008      	beq.n	8003290 <VL53LX_SetDistanceMode+0x34>
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d005      	beq.n	8003290 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d002      	beq.n	8003290 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 800328a:	f06f 0303 	mvn.w	r3, #3
 800328e:	e049      	b.n	8003324 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ffc8 	bl	8003226 <IsL4>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <VL53LX_SetDistanceMode+0x4c>
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 80032a2:	f06f 0303 	mvn.w	r3, #3
 80032a6:	e03d      	b.n	8003324 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80032ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	f107 0210 	add.w	r2, r7, #16
 80032be:	f107 010c 	add.w	r1, r7, #12
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f001 fc20 	bl	8004b08 <VL53LX_get_timeouts_us>
 80032c8:	4603      	mov	r3, r0
 80032ca:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 80032cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ff48 	bl	8003170 <SetPresetModeL3CX>
 80032e0:	4603      	mov	r3, r0
 80032e2:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 80032e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032f2:	461a      	mov	r2, r3
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f882 3a40 	strb.w	r3, [r2, #2624]	; 0xa40
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80032fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10e      	bne.n	8003320 <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f001 fbc5 	bl	8004a98 <VL53LX_set_timeouts_us>
 800330e:	4603      	mov	r3, r0
 8003310:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8003312:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003320:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800334a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4a31      	ldr	r2, [pc, #196]	; (8003414 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d902      	bls.n	800335a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003354:	23fc      	movs	r3, #252	; 0xfc
 8003356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 800335a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	f107 0210 	add.w	r2, r7, #16
 800336a:	f107 010c 	add.w	r1, r7, #12
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f001 fbca 	bl	8004b08 <VL53LX_get_timeouts_us>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 800337a:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800337e:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8003380:	2306      	movs	r3, #6
 8003382:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff4e 	bl	8003226 <IsL4>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8003392:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	429a      	cmp	r2, r3
 800339a:	d803      	bhi.n	80033a4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800339c:	23fc      	movs	r3, #252	; 0xfc
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033a2:	e003      	b.n	80033ac <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80033aa:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80033ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11c      	bne.n	80033ee <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6a3a      	ldr	r2, [r7, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d203      	bcs.n	80033c4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 80033bc:	23fc      	movs	r3, #252	; 0xfc
 80033be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033c2:	e00d      	b.n	80033e0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f001 fb5f 	bl	8004a98 <VL53LX_set_timeouts_us>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 80033e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80033ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033fc:	461a      	mov	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f8c2 3a44 	str.w	r3, [r2, #2628]	; 0xa44
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	00086470 	.word	0x00086470
 8003414:	00989680 	.word	0x00989680
 8003418:	00030d40 	.word	0x00030d40

0800341c <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003424:	2300      	movs	r3, #0
 8003426:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 ff01 	bl	8004234 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003432:	2300      	movs	r3, #0
 8003434:	75bb      	strb	r3, [r7, #22]
 8003436:	e01a      	b.n	800346e <VL53LX_StartMeasurement+0x52>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003438:	7dbb      	ldrb	r3, [r7, #22]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003440:	3304      	adds	r3, #4
 8003442:	2100      	movs	r1, #0
 8003444:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003448:	7dbb      	ldrb	r3, [r7, #22]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003452:	3310      	adds	r3, #16
 8003454:	22ff      	movs	r2, #255	; 0xff
 8003456:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003458:	7dbb      	ldrb	r3, [r7, #22]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003462:	3314      	adds	r3, #20
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003468:	7dbb      	ldrb	r3, [r7, #22]
 800346a:	3301      	adds	r3, #1
 800346c:	75bb      	strb	r3, [r7, #22]
 800346e:	7dbb      	ldrb	r3, [r7, #22]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d9e1      	bls.n	8003438 <VL53LX_StartMeasurement+0x1c>
	}
	pdev->PreviousStreamCount = 0;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800347a:	2200      	movs	r2, #0
 800347c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	78db      	ldrb	r3, [r3, #3]
 8003484:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8003486:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <VL53LX_StartMeasurement+0x82>
		Status = VL53LX_init_and_start_range(
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2206      	movs	r2, #6
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f001 fd1d 	bl	8004ed4 <VL53LX_init_and_start_range>
 800349a:	4603      	mov	r3, r0
 800349c:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <VL53LX_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	78db      	ldrb	r3, [r3, #3]
 80034ba:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f002 fc97 	bl	8005df4 <VL53LX_clear_interrupt_and_enable_next_range>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	3b05      	subs	r3, #5
 80034e6:	2b12      	cmp	r3, #18
 80034e8:	d840      	bhi.n	800356c <ConvertStatusHisto+0x94>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <ConvertStatusHisto+0x18>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	0800353d 	.word	0x0800353d
 80034f4:	08003543 	.word	0x08003543
 80034f8:	0800354f 	.word	0x0800354f
 80034fc:	0800356d 	.word	0x0800356d
 8003500:	08003567 	.word	0x08003567
 8003504:	0800356d 	.word	0x0800356d
 8003508:	0800356d 	.word	0x0800356d
 800350c:	0800356d 	.word	0x0800356d
 8003510:	0800356d 	.word	0x0800356d
 8003514:	0800356d 	.word	0x0800356d
 8003518:	0800356d 	.word	0x0800356d
 800351c:	0800356d 	.word	0x0800356d
 8003520:	0800356d 	.word	0x0800356d
 8003524:	0800356d 	.word	0x0800356d
 8003528:	08003549 	.word	0x08003549
 800352c:	0800355b 	.word	0x0800355b
 8003530:	0800356d 	.word	0x0800356d
 8003534:	08003561 	.word	0x08003561
 8003538:	08003555 	.word	0x08003555
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800353c:	2304      	movs	r3, #4
 800353e:	73fb      	strb	r3, [r7, #15]
		break;
 8003540:	e016      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
		break;
 8003546:	e013      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8003548:	2306      	movs	r3, #6
 800354a:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 800354c:	e010      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800354e:	2307      	movs	r3, #7
 8003550:	73fb      	strb	r3, [r7, #15]
		break;
 8003552:	e00d      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003554:	230c      	movs	r3, #12
 8003556:	73fb      	strb	r3, [r7, #15]
		break;
 8003558:	e00a      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800355a:	2307      	movs	r3, #7
 800355c:	73fb      	strb	r3, [r7, #15]
		break;
 800355e:	e007      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8003560:	230b      	movs	r3, #11
 8003562:	73fb      	strb	r3, [r7, #15]
		break;
 8003564:	e004      	b.n	8003570 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
		break;
 800356a:	e001      	b.n	8003570 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 800356c:	23ff      	movs	r3, #255	; 0xff
 800356e:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop

08003580 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08e      	sub	sp, #56	; 0x38
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4603      	mov	r3, r0
 8003590:	70fb      	strb	r3, [r7, #3]
 8003592:	460b      	mov	r3, r1
 8003594:	70bb      	strb	r3, [r7, #2]
 8003596:	4613      	mov	r3, r2
 8003598:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80035b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80035be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80035d0:	025b      	lsls	r3, r3, #9
 80035d2:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80035d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80035da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035de:	025b      	lsls	r3, r3, #9
 80035e0:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80035e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ea:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80035f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fa:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003604:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8003606:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800360a:	2b11      	cmp	r3, #17
 800360c:	d009      	beq.n	8003622 <SetTargetData+0xa2>
 800360e:	2b11      	cmp	r3, #17
 8003610:	dc0f      	bgt.n	8003632 <SetTargetData+0xb2>
 8003612:	2b03      	cmp	r3, #3
 8003614:	dc02      	bgt.n	800361c <SetTargetData+0x9c>
 8003616:	2b00      	cmp	r3, #0
 8003618:	dc03      	bgt.n	8003622 <SetTargetData+0xa2>
 800361a:	e00a      	b.n	8003632 <SetTargetData+0xb2>
 800361c:	2b0d      	cmp	r3, #13
 800361e:	d004      	beq.n	800362a <SetTargetData+0xaa>
 8003620:	e007      	b.n	8003632 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	2205      	movs	r2, #5
 8003626:	749a      	strb	r2, [r3, #18]
		break;
 8003628:	e006      	b.n	8003638 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	220d      	movs	r2, #13
 800362e:	749a      	strb	r2, [r3, #18]
		break;
 8003630:	e002      	b.n	8003638 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8003632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003634:	2200      	movs	r2, #0
 8003636:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363a:	7c9b      	ldrb	r3, [r3, #18]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d117      	bne.n	8003670 <SetTargetData+0xf0>
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d114      	bne.n	8003670 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8003646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 800364c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800365e:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003666:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8003668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800366e:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	7c9b      	ldrb	r3, [r3, #18]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d108      	bne.n	800368a <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8003678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff2b 	bl	80034d8 <ConvertStatusHisto>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8003686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003688:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	461a      	mov	r2, r3
 8003690:	f248 0191 	movw	r1, #32913	; 0x8091
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f003 f8a7 	bl	80067e8 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 800369a:	78bb      	ldrb	r3, [r7, #2]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 80036a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036aa:	8a1b      	ldrh	r3, [r3, #16]
 80036ac:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b4:	2200      	movs	r2, #0
 80036b6:	74da      	strb	r2, [r3, #19]

	if (ExtendedRangeEnabled &&
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 81dc 	beq.w	8003a78 <SetTargetData+0x4f8>
		(pRangeData->RangeStatus ==
 80036c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c2:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	d004      	beq.n	80036d2 <SetTargetData+0x152>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80036c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ca:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	f040 81d3 	bne.w	8003a78 <SetTargetData+0x4f8>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80036d2:	787b      	ldrb	r3, [r7, #1]
 80036d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80036dc:	3310      	adds	r3, #16
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b07      	cmp	r3, #7
 80036e2:	d01c      	beq.n	800371e <SetTargetData+0x19e>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80036ee:	3310      	adds	r3, #16
 80036f0:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d013      	beq.n	800371e <SetTargetData+0x19e>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80036f6:	787b      	ldrb	r3, [r7, #1]
 80036f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003700:	3310      	adds	r3, #16
 8003702:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8003704:	2b00      	cmp	r3, #0
 8003706:	f040 81b7 	bne.w	8003a78 <SetTargetData+0x4f8>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800370a:	787b      	ldrb	r3, [r7, #1]
 800370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370e:	4413      	add	r3, r2
 8003710:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003714:	3314      	adds	r3, #20
 8003716:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8003718:	2b01      	cmp	r3, #1
 800371a:	f040 81ad 	bne.w	8003a78 <SetTargetData+0x4f8>
	{
		if (((pdev->PreviousStreamCount) ==
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003724:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8003728:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	f893 3477 	ldrb.w	r3, [r3, #1143]	; 0x477
 8003730:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003732:	429a      	cmp	r2, r3
 8003734:	d00c      	beq.n	8003750 <SetTargetData+0x1d0>
		|| ((pdev->PreviousStreamCount) ==
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800373c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8003740:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	f893 3477 	ldrb.w	r3, [r3, #1143]	; 0x477
 8003748:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800374a:	429a      	cmp	r2, r3
 800374c:	f040 816b 	bne.w	8003a26 <SetTargetData+0x4a6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003752:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003756:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800375c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003760:	3304      	adds	r3, #4
 8003762:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003766:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	b29b      	uxth	r3, r3
 800376c:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b21      	cmp	r3, #33	; 0x21
 800377a:	d008      	beq.n	800378e <SetTargetData+0x20e>
 800377c:	2b21      	cmp	r3, #33	; 0x21
 800377e:	f300 814e 	bgt.w	8003a1e <SetTargetData+0x49e>
 8003782:	2b1b      	cmp	r3, #27
 8003784:	f000 80d7 	beq.w	8003936 <SetTargetData+0x3b6>
 8003788:	2b1e      	cmp	r3, #30
 800378a:	d004      	beq.n	8003796 <SetTargetData+0x216>
 800378c:	e147      	b.n	8003a1e <SetTargetData+0x49e>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003794:	e148      	b.n	8003a28 <SetTargetData+0x4a8>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800379c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dd0e      	ble.n	80037c2 <SetTargetData+0x242>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80037aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	da07      	bge.n	80037c2 <SetTargetData+0x242>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d104      	bne.n	80037c2 <SetTargetData+0x242>
					sequency == 1) {
					AddOffset =
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80037be:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037c0:	e0b8      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80037c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80037cc:	425b      	negs	r3, r3
 80037ce:	429a      	cmp	r2, r3
 80037d0:	da0f      	bge.n	80037f2 <SetTargetData+0x272>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80037d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80037dc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80037de:	429a      	cmp	r2, r3
 80037e0:	dd07      	ble.n	80037f2 <SetTargetData+0x272>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <SetTargetData+0x272>
					sequency == 0) {
					AddOffset =
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80037ee:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037f0:	e0a0      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80037f8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	dd0e      	ble.n	800381e <SetTargetData+0x29e>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8003806:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800380a:	429a      	cmp	r2, r3
 800380c:	da07      	bge.n	800381e <SetTargetData+0x29e>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <SetTargetData+0x29e>
					sequency == 0) {
					AddOffset =
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800381a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800381c:	e08a      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800381e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8003828:	425b      	negs	r3, r3
 800382a:	429a      	cmp	r2, r3
 800382c:	da0f      	bge.n	800384e <SetTargetData+0x2ce>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800382e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8003838:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800383a:	429a      	cmp	r2, r3
 800383c:	dd07      	ble.n	800384e <SetTargetData+0x2ce>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d104      	bne.n	800384e <SetTargetData+0x2ce>
					sequency == 1) {
					AddOffset =
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800384a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800384c:	e072      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003854:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003858:	429a      	cmp	r2, r3
 800385a:	dd0e      	ble.n	800387a <SetTargetData+0x2fa>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003862:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003866:	429a      	cmp	r2, r3
 8003868:	da07      	bge.n	800387a <SetTargetData+0x2fa>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d104      	bne.n	800387a <SetTargetData+0x2fa>
					sequency == 1) {
					AddOffset =
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003876:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003878:	e05c      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800387a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003884:	425b      	negs	r3, r3
 8003886:	429a      	cmp	r2, r3
 8003888:	da0f      	bge.n	80038aa <SetTargetData+0x32a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800388a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8003894:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003896:	429a      	cmp	r2, r3
 8003898:	dd07      	ble.n	80038aa <SetTargetData+0x32a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <SetTargetData+0x32a>
					sequency == 0) {
					AddOffset =
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80038a6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038a8:	e044      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80038b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	dd0e      	ble.n	80038d6 <SetTargetData+0x356>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80038be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	da07      	bge.n	80038d6 <SetTargetData+0x356>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <SetTargetData+0x356>
					sequency == 0) {
					AddOffset =
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80038d2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038d4:	e02e      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80038d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80038e0:	425b      	negs	r3, r3
 80038e2:	429a      	cmp	r2, r3
 80038e4:	da0f      	bge.n	8003906 <SetTargetData+0x386>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80038e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80038f0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80038f2:	429a      	cmp	r2, r3
 80038f4:	dd07      	ble.n	8003906 <SetTargetData+0x386>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d104      	bne.n	8003906 <SetTargetData+0x386>
					sequency == 1) {
					AddOffset =
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003902:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003904:	e016      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 800390c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003910:	429a      	cmp	r2, r3
 8003912:	da0b      	bge.n	800392c <SetTargetData+0x3ac>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800391a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800391e:	429a      	cmp	r2, r3
 8003920:	dd04      	ble.n	800392c <SetTargetData+0x3ac>
					AddOffset =
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8003928:	86bb      	strh	r3, [r7, #52]	; 0x34
 800392a:	e003      	b.n	8003934 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003932:	e079      	b.n	8003a28 <SetTargetData+0x4a8>
 8003934:	e078      	b.n	8003a28 <SetTargetData+0x4a8>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800393c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003940:	429a      	cmp	r2, r3
 8003942:	dd0e      	ble.n	8003962 <SetTargetData+0x3e2>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800394a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800394e:	429a      	cmp	r2, r3
 8003950:	da07      	bge.n	8003962 <SetTargetData+0x3e2>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <SetTargetData+0x3e2>
					sequency == 0) {
					AddOffset =
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800395e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003960:	e05c      	b.n	8003a1c <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003962:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800396c:	425b      	negs	r3, r3
 800396e:	429a      	cmp	r2, r3
 8003970:	da0f      	bge.n	8003992 <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003972:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 800397c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800397e:	429a      	cmp	r2, r3
 8003980:	dd07      	ble.n	8003992 <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d104      	bne.n	8003992 <SetTargetData+0x412>
					sequency == 1) {
					AddOffset =
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800398e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003990:	e044      	b.n	8003a1c <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8003998:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800399c:	429a      	cmp	r2, r3
 800399e:	dd0e      	ble.n	80039be <SetTargetData+0x43e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80039a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	da07      	bge.n	80039be <SetTargetData+0x43e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d104      	bne.n	80039be <SetTargetData+0x43e>
					sequency == 1) {
					AddOffset =
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80039ba:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039bc:	e02e      	b.n	8003a1c <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80039be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 80039c8:	425b      	negs	r3, r3
 80039ca:	429a      	cmp	r2, r3
 80039cc:	da0f      	bge.n	80039ee <SetTargetData+0x46e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80039ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 80039d8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80039da:	429a      	cmp	r2, r3
 80039dc:	dd07      	ble.n	80039ee <SetTargetData+0x46e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <SetTargetData+0x46e>
					sequency == 0) {
					AddOffset =
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80039ea:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039ec:	e016      	b.n	8003a1c <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80039f4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	da0b      	bge.n	8003a14 <SetTargetData+0x494>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003a02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	dd04      	ble.n	8003a14 <SetTargetData+0x494>
					AddOffset =
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8003a10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a12:	e003      	b.n	8003a1c <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003a1a:	e005      	b.n	8003a28 <SetTargetData+0x4a8>
 8003a1c:	e004      	b.n	8003a28 <SetTargetData+0x4a8>

			default:
				uwr_status = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003a24:	e000      	b.n	8003a28 <SetTargetData+0x4a8>
			}
		}
 8003a26:	bf00      	nop

		if (uwr_status) {
 8003a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d023      	beq.n	8003a78 <SetTargetData+0x4f8>
			pRangeData->RangeMilliMeter += AddOffset;
 8003a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a32:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a3a:	4413      	add	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b21a      	sxth	r2, r3
 8003a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a42:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8003a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a4e:	4413      	add	r3, r2
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b21a      	sxth	r2, r3
 8003a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a56:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a62:	4413      	add	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b21a      	sxth	r2, r3
 8003a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6a:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6e:	2201      	movs	r2, #1
 8003a70:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a74:	2200      	movs	r2, #0
 8003a76:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003a80:	3304      	adds	r3, #4
 8003a82:	8ab9      	ldrh	r1, [r7, #20]
 8003a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a8c:	7c91      	ldrb	r1, [r2, #18]
 8003a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003a96:	3310      	adds	r3, #16
 8003a98:	460a      	mov	r2, r1
 8003a9a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa0:	7cd1      	ldrb	r1, [r2, #19]
 8003aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003aaa:	3314      	adds	r3, #20
 8003aac:	460a      	mov	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8003ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab2:	8a1b      	ldrh	r3, [r3, #16]
 8003ab4:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab8:	7c9b      	ldrb	r3, [r3, #18]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d110      	bne.n	8003ae0 <SetTargetData+0x560>
 8003abe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da0c      	bge.n	8003ae0 <SetTargetData+0x560>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8003ac6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <SetTargetData+0x56c>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	da03      	bge.n	8003ada <SetTargetData+0x55a>
			pRangeData->RangeStatus =
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	220e      	movs	r2, #14
 8003ad6:	749a      	strb	r2, [r3, #18]
 8003ad8:	e002      	b.n	8003ae0 <SetTargetData+0x560>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8003ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003adc:	2200      	movs	r2, #0
 8003ade:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8003ae0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3738      	adds	r7, #56	; 0x38
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000008 	.word	0x20000008

08003af0 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b08f      	sub	sp, #60	; 0x3c
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	7c9a      	ldrb	r2, [r3, #18]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	78da      	ldrb	r2, [r3, #3]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	7c9b      	ldrb	r3, [r3, #18]
 8003b2c:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <SetMeasurementData+0x4c>

		iteration = 1;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b3a:	e002      	b.n	8003b42 <SetMeasurementData+0x52>
	else
		iteration = ActiveResults;
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b48:	e035      	b.n	8003bb6 <SetMeasurementData+0xc6>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003b4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	3308      	adds	r3, #8
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8003b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b62:	224c      	movs	r2, #76	; 0x4c
 8003b64:	fb02 f303 	mul.w	r3, r2, r3
 8003b68:	3310      	adds	r3, #16
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8003b72:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d113      	bne.n	8003ba2 <SetMeasurementData+0xb2>
			Status = SetTargetData(Dev, ActiveResults,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7918      	ldrb	r0, [r3, #4]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	7c1b      	ldrb	r3, [r3, #16]
 8003b82:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003b86:	7ff9      	ldrb	r1, [r7, #31]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	9201      	str	r2, [sp, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4623      	mov	r3, r4
 8003b94:	4602      	mov	r2, r0
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fcf2 	bl	8003580 <SetTargetData>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8003bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3c3      	bcc.n	8003b4a <SetMeasurementData+0x5a>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f893 2477 	ldrb.w	r2, [r3, #1143]	; 0x477
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bce:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bda:	e01f      	b.n	8003c1c <SetMeasurementData+0x12c>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003be6:	3304      	adds	r3, #4
 8003be8:	2100      	movs	r1, #0
 8003bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf2:	6a3a      	ldr	r2, [r7, #32]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003bfa:	3310      	adds	r3, #16
 8003bfc:	22ff      	movs	r2, #255	; 0xff
 8003bfe:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c16:	3301      	adds	r3, #1
 8003c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d9db      	bls.n	8003bdc <SetMeasurementData+0xec>
	}

	return Status;
 8003c24:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	372c      	adds	r7, #44	; 0x2c
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c48:	3318      	adds	r3, #24
 8003c4a:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003c4c:	225c      	movs	r2, #92	; 0x5c
 8003c4e:	21ff      	movs	r1, #255	; 0xff
 8003c50:	6838      	ldr	r0, [r7, #0]
 8003c52:	f012 fac5 	bl	80161e0 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	2102      	movs	r1, #2
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f001 fcc6 	bl	80055ec <VL53LX_get_device_results>
 8003c60:	4603      	mov	r3, r0
 8003c62:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff41 	bl	8003af0 <SetMeasurementData>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8003c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <VL53LX_SmudgeCorrectionEnable>:
}


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d84a      	bhi.n	8003d38 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cf9 	.word	0x08003cf9
 8003cb4:	08003d19 	.word	0x08003d19
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f003 fc9d 	bl	80075f8 <VL53LX_dynamic_xtalk_correction_disable>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f003 fcae 	bl	8007624 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f003 fcd5 	bl	800767c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	733b      	strb	r3, [r7, #12]
		break;
 8003cd6:	e032      	b.n	8003d3e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f003 fc77 	bl	80075cc <VL53LX_dynamic_xtalk_correction_enable>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f003 fce0 	bl	80076a8 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f003 fcc5 	bl	800767c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	733b      	strb	r3, [r7, #12]
		break;
 8003cf6:	e022      	b.n	8003d3e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f003 fc67 	bl	80075cc <VL53LX_dynamic_xtalk_correction_enable>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f003 fcd0 	bl	80076a8 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f003 fc9f 	bl	8007650 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8003d12:	4603      	mov	r3, r0
 8003d14:	733b      	strb	r3, [r7, #12]
		break;
 8003d16:	e012      	b.n	8003d3e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f003 fc57 	bl	80075cc <VL53LX_dynamic_xtalk_correction_enable>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f003 fc7e 	bl	8007624 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f003 fca5 	bl	800767c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003d32:	4603      	mov	r3, r0
 8003d34:	733b      	strb	r3, [r7, #12]
		break;
 8003d36:	e002      	b.n	8003d3e <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003d38:	23fc      	movs	r3, #252	; 0xfc
 8003d3a:	73fb      	strb	r3, [r7, #15]
		break;
 8003d3c:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003d46:	7bbb      	ldrb	r3, [r7, #14]
 8003d48:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003d5e:	7b3b      	ldrb	r3, [r7, #12]
 8003d60:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b21      	cmp	r3, #33	; 0x21
 8003d84:	d006      	beq.n	8003d94 <select_offset_per_vcsel+0x24>
 8003d86:	2b21      	cmp	r3, #33	; 0x21
 8003d88:	dc2b      	bgt.n	8003de2 <select_offset_per_vcsel+0x72>
 8003d8a:	2b1b      	cmp	r3, #27
 8003d8c:	d01c      	beq.n	8003dc8 <select_offset_per_vcsel+0x58>
 8003d8e:	2b1e      	cmp	r3, #30
 8003d90:	d00d      	beq.n	8003dae <select_offset_per_vcsel+0x3e>
 8003d92:	e026      	b.n	8003de2 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	f8b3 3c38 	ldrh.w	r3, [r3, #3128]	; 0xc38
 8003d9e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da6:	f8b3 3c3a 	ldrh.w	r3, [r3, #3130]	; 0xc3a
 8003daa:	817b      	strh	r3, [r7, #10]
		break;
 8003dac:	e02b      	b.n	8003e06 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db4:	f8b3 3c3c 	ldrh.w	r3, [r3, #3132]	; 0xc3c
 8003db8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc0:	f8b3 3c3e 	ldrh.w	r3, [r3, #3134]	; 0xc3e
 8003dc4:	817b      	strh	r3, [r7, #10]
		break;
 8003dc6:	e01e      	b.n	8003e06 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dce:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	; 0xc40
 8003dd2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dda:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	; 0xc42
 8003dde:	817b      	strh	r3, [r7, #10]
		break;
 8003de0:	e011      	b.n	8003e06 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de8:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	; 0xc40
 8003dec:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	; 0xc42
 8003df8:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003dfa:	23fc      	movs	r3, #252	; 0xfc
 8003dfc:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	801a      	strh	r2, [r3, #0]
		break;
 8003e04:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e0c:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003e16:	7a7b      	ldrb	r3, [r7, #9]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <select_offset_per_vcsel+0xb6>
 8003e20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e24:	e001      	b.n	8003e2a <select_offset_per_vcsel+0xba>
 8003e26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	8013      	strh	r3, [r2, #0]

	return status;
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003e3e:	b490      	push	{r4, r7}
 8003e40:	b08a      	sub	sp, #40	; 0x28
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	71fb      	strb	r3, [r7, #7]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e70:	e021      	b.n	8003eb6 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003e72:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	0052      	lsls	r2, r2, #1
 8003e80:	441a      	add	r2, r3
 8003e82:	00d3      	lsls	r3, r2, #3
 8003e84:	461a      	mov	r2, r3
 8003e86:	460b      	mov	r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	440b      	add	r3, r1
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	4423      	add	r3, r4
 8003e92:	f203 7312 	addw	r3, r3, #1810	; 0x712
 8003e96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003e9a:	6a3a      	ldr	r2, [r7, #32]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003ea0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3206      	adds	r2, #6
 8003ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	4413      	add	r3, r2
 8003eae:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003eb6:	79bb      	ldrb	r3, [r7, #6]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d3d8      	bcc.n	8003e72 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d047      	beq.n	8003f56 <vl53lx_diff_histo_stddev+0x118>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d044      	beq.n	8003f56 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ed4:	e03a      	b.n	8003f4c <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003ed6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	0052      	lsls	r2, r2, #1
 8003ee4:	441a      	add	r2, r3
 8003ee6:	00d3      	lsls	r3, r2, #3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	460b      	mov	r3, r1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	440b      	add	r3, r1
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4423      	add	r3, r4
 8003ef6:	f203 7312 	addw	r3, r3, #1810	; 0x712
 8003efa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003efe:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f06:	fb03 f202 	mul.w	r2, r3, r2
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f10:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003f12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3206      	adds	r2, #6
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f20:	fb03 f202 	mul.w	r2, r3, r2
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f2a:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003f36:	69b8      	ldr	r0, [r7, #24]
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	441a      	add	r2, r3
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f48:	3301      	adds	r3, #1
 8003f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f4c:	79bb      	ldrb	r3, [r7, #6]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3bf      	bcc.n	8003ed6 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003f56:	bf00      	nop
 8003f58:	3728      	adds	r7, #40	; 0x28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc90      	pop	{r4, r7}
 8003f5e:	4770      	bx	lr

08003f60 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8003f60:	b5b0      	push	{r4, r5, r7, lr}
 8003f62:	b08c      	sub	sp, #48	; 0x30
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8003f8e:	2318      	movs	r3, #24
 8003f90:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	461a      	mov	r2, r3
 8003f98:	f248 018f 	movw	r1, #32911	; 0x808f
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f002 fc23 	bl	80067e8 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003fa2:	f107 0310 	add.w	r3, r7, #16
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f248 018e 	movw	r1, #32910	; 0x808e
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f002 fc1b 	bl	80067e8 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb8:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 811b 	bne.w	80041f8 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003fdc:	7efb      	ldrb	r3, [r7, #27]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	7eba      	ldrb	r2, [r7, #26]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fee:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <vl53lx_histo_merge+0xa8>
			prev_pos = pdev->bin_rec_pos - 1;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffc:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8004000:	3b01      	subs	r3, #1
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e004      	b.n	8004012 <vl53lx_histo_merge+0xb2>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8004012:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8004016:	7efb      	ldrb	r3, [r7, #27]
 8004018:	69f8      	ldr	r0, [r7, #28]
 800401a:	461a      	mov	r2, r3
 800401c:	0052      	lsls	r2, r2, #1
 800401e:	441a      	add	r2, r3
 8004020:	0153      	lsls	r3, r2, #5
 8004022:	461a      	mov	r2, r3
 8004024:	460b      	mov	r3, r1
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	440b      	add	r3, r1
 800402a:	019b      	lsls	r3, r3, #6
 800402c:	4413      	add	r3, r2
 800402e:	4403      	add	r3, r0
 8004030:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004034:	3318      	adds	r3, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	dd0c      	ble.n	8004056 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 800403c:	7e79      	ldrb	r1, [r7, #25]
 800403e:	7efa      	ldrb	r2, [r7, #27]
 8004040:	f107 030c 	add.w	r3, r7, #12
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	460b      	mov	r3, r1
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	69f8      	ldr	r0, [r7, #28]
 8004052:	f7ff fef4 	bl	8003e3e <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	429a      	cmp	r2, r3
 800405c:	db23      	blt.n	80040a6 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004064:	3308      	adds	r3, #8
 8004066:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f012 f8b7 	bl	80161e0 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

			recom_been_reset = 1;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8004084:	7efb      	ldrb	r3, [r7, #27]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004090:	2206      	movs	r2, #6
 8004092:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
 8004096:	e034      	b.n	8004102 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409e:	2207      	movs	r2, #7
 80040a0:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
 80040a4:	e02d      	b.n	8004102 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 80040b0:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040b8:	e01e      	b.n	80040f8 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80040ba:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80040be:	7e39      	ldrb	r1, [r7, #24]
 80040c0:	7efb      	ldrb	r3, [r7, #27]
 80040c2:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	3006      	adds	r0, #6
 80040ca:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80040ce:	69f8      	ldr	r0, [r7, #28]
 80040d0:	461a      	mov	r2, r3
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	441a      	add	r2, r3
 80040d6:	00d3      	lsls	r3, r2, #3
 80040d8:	461a      	mov	r2, r3
 80040da:	460b      	mov	r3, r1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	440b      	add	r3, r1
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	4413      	add	r3, r2
 80040e4:	442b      	add	r3, r5
 80040e6:	f203 7312 	addw	r3, r3, #1810	; 0x712
 80040ea:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80040ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80040f2:	3301      	adds	r3, #1
 80040f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80040fc:	7ebb      	ldrb	r3, [r7, #26]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3db      	bcc.n	80040ba <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 800410c:	461a      	mov	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3b01      	subs	r3, #1
 8004112:	429a      	cmp	r2, r3
 8004114:	d109      	bne.n	800412a <vl53lx_histo_merge+0x1ca>
 8004116:	7efb      	ldrb	r3, [r7, #27]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
 8004128:	e00e      	b.n	8004148 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 800412a:	7efb      	ldrb	r3, [r7, #27]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10b      	bne.n	8004148 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004136:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 800413a:	3301      	adds	r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004144:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <vl53lx_histo_merge+0x1f6>
 8004150:	7efb      	ldrb	r3, [r7, #27]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d069      	beq.n	800422a <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415c:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004160:	2b00      	cmp	r3, #0
 8004162:	d162      	bne.n	800422a <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8004164:	2300      	movs	r3, #0
 8004166:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004168:	e008      	b.n	800417c <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 800416a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	3206      	adds	r2, #6
 8004170:	2100      	movs	r1, #0
 8004172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8004176:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004178:	3301      	adds	r3, #1
 800417a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800417c:	7ebb      	ldrb	r3, [r7, #26]
 800417e:	b29b      	uxth	r3, r3
 8004180:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004182:	429a      	cmp	r2, r3
 8004184:	d3f1      	bcc.n	800416a <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8004186:	2300      	movs	r3, #0
 8004188:	84fb      	strh	r3, [r7, #38]	; 0x26
 800418a:	e02f      	b.n	80041ec <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004192:	e023      	b.n	80041dc <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8004194:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3206      	adds	r2, #6
 800419a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800419e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80041a2:	7efb      	ldrb	r3, [r7, #27]
 80041a4:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80041a6:	69fc      	ldr	r4, [r7, #28]
 80041a8:	461a      	mov	r2, r3
 80041aa:	0052      	lsls	r2, r2, #1
 80041ac:	441a      	add	r2, r3
 80041ae:	00d3      	lsls	r3, r2, #3
 80041b0:	461a      	mov	r2, r3
 80041b2:	460b      	mov	r3, r1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	440b      	add	r3, r1
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4413      	add	r3, r2
 80041bc:	442b      	add	r3, r5
 80041be:	f203 7312 	addw	r3, r3, #1810	; 0x712
 80041c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80041c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041c8:	18c1      	adds	r1, r0, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	3206      	adds	r2, #6
 80041ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80041d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041d6:	3301      	adds	r3, #1
 80041d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80041dc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	dbd6      	blt.n	8004194 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 80041e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041e8:	3301      	adds	r3, #1
 80041ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041ec:	7ebb      	ldrb	r3, [r7, #26]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3ca      	bcc.n	800418c <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80041f6:	e018      	b.n	800422a <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 8004202:	3b01      	subs	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420c:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
		if (pdev->pos_before_next_recom == 255)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 800421a:	2bff      	cmp	r3, #255	; 0xff
 800421c:	d105      	bne.n	800422a <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
}
 800422a:	bf00      	nop
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004234 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b0c6      	sub	sp, #280	; 0x118
 8004238:	af00      	add	r7, sp, #0
 800423a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800423e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004242:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004250:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8004258:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800425c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004260:	2200      	movs	r2, #0
 8004262:	2185      	movs	r1, #133	; 0x85
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	f7fe fa89 	bl	800277c <VL53LX_WrByte>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8004270:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8004278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800427c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f005 f99d 	bl	80095c0 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8004286:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800428a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800428e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004292:	f248 018c 	movw	r1, #32908	; 0x808c
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	f002 faa6 	bl	80067e8 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d81b      	bhi.n	80042dc <VL53LX_load_patch+0xa8>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <VL53LX_load_patch+0x78>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042c5 	.word	0x080042c5
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042d5 	.word	0x080042d5
	case 0:
		patch_power = 0x00;
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042c2:	e00e      	b.n	80042e2 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80042c4:	2310      	movs	r3, #16
 80042c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042ca:	e00a      	b.n	80042e2 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80042cc:	2320      	movs	r3, #32
 80042ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042d2:	e006      	b.n	80042e2 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042da:	e002      	b.n	80042e2 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 80042dc:	2300      	movs	r3, #0
 80042de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80042e2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d134      	bne.n	8004354 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80042ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042f2:	2229      	movs	r2, #41	; 0x29
 80042f4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80042f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042fe:	22c9      	movs	r2, #201	; 0xc9
 8004300:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8004302:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004306:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800430a:	220e      	movs	r2, #14
 800430c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800430e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004312:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800431a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800431e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004322:	2228      	movs	r2, #40	; 0x28
 8004324:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004326:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800432a:	b2da      	uxtb	r2, r3
 800432c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004334:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8004336:	f107 020c 	add.w	r2, r7, #12
 800433a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800433e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004342:	2306      	movs	r3, #6
 8004344:	f240 4176 	movw	r1, #1142	; 0x476
 8004348:	6800      	ldr	r0, [r0, #0]
 800434a:	f7fe f9ab 	bl	80026a4 <VL53LX_WriteMulti>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004354:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004358:	2b00      	cmp	r3, #0
 800435a:	d132      	bne.n	80043c2 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 800435c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004360:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004364:	2203      	movs	r2, #3
 8004366:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004368:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800436c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004370:	226d      	movs	r2, #109	; 0x6d
 8004372:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004374:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004378:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800437c:	2203      	movs	r2, #3
 800437e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004380:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004384:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004388:	226f      	movs	r2, #111	; 0x6f
 800438a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800438c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004390:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004394:	2207      	movs	r2, #7
 8004396:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8004398:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800439c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043a0:	2229      	movs	r2, #41	; 0x29
 80043a2:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 80043a4:	f107 020c 	add.w	r2, r7, #12
 80043a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043ac:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80043b0:	2306      	movs	r3, #6
 80043b2:	f240 4196 	movw	r1, #1174	; 0x496
 80043b6:	6800      	ldr	r0, [r0, #0]
 80043b8:	f7fe f974 	bl	80026a4 <VL53LX_WriteMulti>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80043c2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11a      	bne.n	8004400 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80043ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80043d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043de:	2207      	movs	r2, #7
 80043e0:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80043e2:	f107 020c 	add.w	r2, r7, #12
 80043e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043ea:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80043ee:	2302      	movs	r3, #2
 80043f0:	f240 4172 	movw	r1, #1138	; 0x472
 80043f4:	6800      	ldr	r0, [r0, #0]
 80043f6:	f7fe f955 	bl	80026a4 <VL53LX_WriteMulti>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004400:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11a      	bne.n	800443e <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800440c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004414:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004418:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800441c:	2207      	movs	r2, #7
 800441e:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8004420:	f107 020c 	add.w	r2, r7, #12
 8004424:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004428:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800442c:	2302      	movs	r3, #2
 800442e:	f240 4174 	movw	r1, #1140	; 0x474
 8004432:	6800      	ldr	r0, [r0, #0]
 8004434:	f7fe f936 	bl	80026a4 <VL53LX_WriteMulti>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 800443e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8004446:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800444a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800444e:	2201      	movs	r2, #1
 8004450:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f7fe f991 	bl	800277c <VL53LX_WrByte>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8004460:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8004468:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800446c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004470:	2201      	movs	r2, #1
 8004472:	2185      	movs	r1, #133	; 0x85
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f7fe f981 	bl	800277c <VL53LX_WrByte>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004480:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004484:	4618      	mov	r0, r3
 8004486:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop

08004490 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af04      	add	r7, sp, #16
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80044aa:	3320      	adds	r3, #32
 80044ac:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80044b2:	2162      	movs	r1, #98	; 0x62
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f004 f95c 	bl	8008772 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2204      	movs	r2, #4
 80044be:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2210      	movs	r2, #16
 80044ca:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80044d6:	2300      	movs	r3, #0
 80044d8:	75bb      	strb	r3, [r7, #22]
 80044da:	e01b      	b.n	8004514 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80044dc:	7dba      	ldrb	r2, [r7, #22]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	3308      	adds	r3, #8
 80044f0:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800450e:	7dbb      	ldrb	r3, [r7, #22]
 8004510:	3301      	adds	r3, #1
 8004512:	75bb      	strb	r3, [r7, #22]
 8004514:	7dbb      	ldrb	r3, [r7, #22]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	d9e0      	bls.n	80044dc <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2210      	movs	r2, #16
 800451e:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2210      	movs	r2, #16
 800452e:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800453a:	2300      	movs	r3, #0
 800453c:	75bb      	strb	r3, [r7, #22]
 800453e:	e039      	b.n	80045b4 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8004540:	7dba      	ldrb	r2, [r7, #22]
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8004556:	7dba      	ldrb	r2, [r7, #22]
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 800456c:	7dba      	ldrb	r2, [r7, #22]
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8004582:	7dba      	ldrb	r2, [r7, #22]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8004598:	7dba      	ldrb	r2, [r7, #22]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80045ae:	7dbb      	ldrb	r3, [r7, #22]
 80045b0:	3301      	adds	r3, #1
 80045b2:	75bb      	strb	r3, [r7, #22]
 80045b4:	7dbb      	ldrb	r3, [r7, #22]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d9c2      	bls.n	8004540 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	221e      	movs	r2, #30
 80045c4:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2200      	movs	r2, #0
 80045ca:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2200      	movs	r2, #0
 80045d0:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2201      	movs	r2, #1
 80045d6:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2201      	movs	r2, #1
 80045dc:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2201      	movs	r2, #1
 80045e2:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045ea:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045f2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80045fa:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2264      	movs	r2, #100	; 0x64
 8004600:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004608:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004618:	2203      	movs	r2, #3
 800461a:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
	pdev->offset_results.active_results = 0;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	2200      	movs	r2, #0
 8004626:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b



	pdev->gain_cal.standard_ranging_gain_factor =
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f240 72db 	movw	r2, #2011	; 0x7db
 8004630:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800463a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f004 f87c 	bl	800873c <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 800464a:	3308      	adds	r3, #8
 800464c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f011 fdc4 	bl	80161e0 <memset>
	pdev->bin_rec_pos = 0;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
	pdev->pos_before_next_recom = 0;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <VL53LX_data_init+0x1f8>
 8004676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8b8 	bl	80047f4 <VL53LX_read_p2p_data>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8004688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004696:	4618      	mov	r0, r3
 8004698:	f003 f81c 	bl	80076d4 <VL53LX_init_refspadchar_config_struct>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80046a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 f834 	bl	800771c <VL53LX_init_ssc_config_struct>
 80046b4:	4603      	mov	r3, r0
 80046b6:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80046b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f003 f845 	bl	800775e <VL53LX_init_xtalk_config_struct>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80046d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80046e6:	4618      	mov	r0, r3
 80046e8:	f003 f8ac 	bl	8007844 <VL53LX_init_xtalk_extract_config_struct>
 80046ec:	4603      	mov	r3, r0
 80046ee:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80046f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d107      	bne.n	8004708 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80046fe:	4618      	mov	r0, r3
 8004700:	f003 f8cf 	bl	80078a2 <VL53LX_init_offset_cal_config_struct>
 8004704:	4603      	mov	r3, r0
 8004706:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8004716:	4618      	mov	r0, r3
 8004718:	f003 f8ea 	bl	80078f0 <VL53LX_init_zone_cal_config_struct>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f893 22d4 	ldrb.w	r2, [r3, #724]	; 0x2d4
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f003 f8fe 	bl	8007938 <VL53LX_init_hist_post_process_config_struct>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8004740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d107      	bne.n	8004758 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800474e:	4618      	mov	r0, r3
 8004750:	f003 fafd 	bl	8007d4e <VL53LX_init_hist_gen3_dmax_config_struct>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <VL53LX_data_init+0x2e0>
		status = VL53LX_init_tuning_parm_storage_struct(
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004766:	4618      	mov	r0, r3
 8004768:	f003 f955 	bl	8007a16 <VL53LX_init_tuning_parm_storage_struct>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8004770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <VL53LX_data_init+0x316>
		status = VL53LX_set_preset_mode(
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	7858      	ldrb	r0, [r3, #1]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	8b1c      	ldrh	r4, [r3, #24]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	689d      	ldr	r5, [r3, #8]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	6912      	ldr	r2, [r2, #16]
 800478c:	6939      	ldr	r1, [r7, #16]
 800478e:	6949      	ldr	r1, [r1, #20]
 8004790:	9102      	str	r1, [sp, #8]
 8004792:	9201      	str	r2, [sp, #4]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	462b      	mov	r3, r5
 8004798:	4622      	mov	r2, r4
 800479a:	4601      	mov	r1, r0
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fad5 	bl	8004d4c <VL53LX_set_preset_mode>
 80047a2:	4603      	mov	r3, r0
 80047a4:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80047ac:	461a      	mov	r2, r3
 80047ae:	2118      	movs	r1, #24
 80047b0:	2000      	movs	r0, #0
 80047b2:	f008 fa50 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 80047bc:	461a      	mov	r2, r3
 80047be:	2118      	movs	r1, #24
 80047c0:	2000      	movs	r0, #0
 80047c2:	f008 fa48 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f203 5354 	addw	r3, r3, #1364	; 0x554
 80047cc:	461a      	mov	r2, r3
 80047ce:	210c      	movs	r1, #12
 80047d0:	2000      	movs	r0, #0
 80047d2:	f004 fd36 	bl	8009242 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f007 fc73 	bl	800c0c2 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f007 fb79 	bl	800bed4 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f007 fc97 	bl	800c116 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80047e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bdb0      	pop	{r4, r5, r7, pc}

080047f4 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b091      	sub	sp, #68	; 0x44
 80047f8:	af04      	add	r7, sp, #16
 80047fa:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	3348      	adds	r3, #72	; 0x48
 8004812:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	339c      	adds	r3, #156	; 0x9c
 8004818:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800481a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <VL53LX_read_p2p_data+0x42>
		status = VL53LX_get_static_nvm_managed(
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f00b fd92 	bl	8010354 <VL53LX_get_static_nvm_managed>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8004836:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <VL53LX_read_p2p_data+0x5c>
		status = VL53LX_get_customer_nvm_managed(
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	3348      	adds	r3, #72	; 0x48
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f00b fec3 	bl	80105d0 <VL53LX_get_customer_nvm_managed>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8004850:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004854:	2b00      	cmp	r3, #0
 8004856:	d117      	bne.n	8004888 <VL53LX_read_p2p_data+0x94>

		status = VL53LX_get_nvm_copy_data(
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f00c fd98 	bl	8011396 <VL53LX_get_nvm_copy_data>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 800486c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <VL53LX_read_p2p_data+0x94>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f203 32ca 	addw	r2, r3, #970	; 0x3ca
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f004 fa68 	bl	8008d58 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8004888:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10e      	bne.n	80048ae <VL53LX_read_p2p_data+0xba>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	895b      	ldrh	r3, [r3, #10]
 8004894:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80048ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <VL53LX_read_p2p_data+0xd4>
		status =
			VL53LX_read_nvm_optical_centre(
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	33c0      	adds	r3, #192	; 0xc0
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f00b fbfd 	bl	80100bc <VL53LX_read_nvm_optical_centre>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80048c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <VL53LX_read_p2p_data+0xee>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	3360      	adds	r3, #96	; 0x60
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f00b fc13 	bl	8010102 <VL53LX_read_nvm_cal_peak_rate_map>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 80048e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12d      	bne.n	8004946 <VL53LX_read_p2p_data+0x152>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	339c      	adds	r3, #156	; 0x9c
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f00b fc2c 	bl	801014e <VL53LX_read_nvm_additional_offset_cal_data>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	889b      	ldrh	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d120      	bne.n	8004946 <VL53LX_read_p2p_data+0x152>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11c      	bne.n	8004946 <VL53LX_read_p2p_data+0x152>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004918:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	f893 03fa 	ldrb.w	r0, [r3, #1018]	; 0x3fa
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	f893 43fb 	ldrb.w	r4, [r3, #1019]	; 0x3fb
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	69f9      	ldr	r1, [r7, #28]
 8004930:	3102      	adds	r1, #2
 8004932:	9103      	str	r1, [sp, #12]
 8004934:	9202      	str	r2, [sp, #8]
 8004936:	2238      	movs	r2, #56	; 0x38
 8004938:	9201      	str	r2, [sp, #4]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	23ff      	movs	r3, #255	; 0xff
 800493e:	22c7      	movs	r2, #199	; 0xc7
 8004940:	4621      	mov	r1, r4
 8004942:	f006 fa0a 	bl	800ad5a <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8004946:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800494a:	2b00      	cmp	r3, #0
 800494c:	d12f      	bne.n	80049ae <VL53LX_read_p2p_data+0x1ba>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	461a      	mov	r2, r3
 8004954:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f00b fc1b 	bl	8010194 <VL53LX_read_nvm_fmt_range_results_data>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8004964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004968:	2b00      	cmp	r3, #0
 800496a:	d120      	bne.n	80049ae <VL53LX_read_p2p_data+0x1ba>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 800496c:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004974:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 800497c:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <VL53LX_read_p2p_data+0x1a8>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800499a:	e003      	b.n	80049a4 <VL53LX_read_p2p_data+0x1b0>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	2214      	movs	r2, #20
 80049a0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049aa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80049ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <VL53LX_read_p2p_data+0x1da>
		status =
			VL53LX_RdWord(
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80049bc:	331c      	adds	r3, #28
 80049be:	461a      	mov	r2, r3
 80049c0:	21de      	movs	r1, #222	; 0xde
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd ff6a 	bl	800289c <VL53LX_RdWord>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d204      	bcs.n	80049e4 <VL53LX_read_p2p_data+0x1f0>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80049e0:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
	}



	if (status == VL53LX_ERROR_NONE)
 80049e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d108      	bne.n	80049fe <VL53LX_read_p2p_data+0x20a>
		status =
			VL53LX_get_mode_mitigation_roi(
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	33bc      	adds	r3, #188	; 0xbc
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f916 	bl	8004c24 <VL53LX_get_mode_mitigation_roi>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d114      	bne.n	8004a32 <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.y_centre == 0) {
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004a32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3734      	adds	r7, #52	; 0x34
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a56:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <VL53LX_set_inter_measurement_period_ms+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004a5e:	23f1      	movs	r3, #241	; 0xf1
 8004a60:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10e      	bne.n	8004a88 <VL53LX_set_inter_measurement_period_ms+0x4a>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a76:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 8004a7a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	}

	LOG_FUNCTION_END(status);

	return status;
 8004a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <VL53LX_set_timeouts_us+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004ab8:	23f1      	movs	r3, #241	; 0xf1
 8004aba:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8004abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11b      	bne.n	8004afc <VL53LX_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f8b3 1316 	ldrh.w	r1, [r3, #790]	; 0x316
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	f502 725b 	add.w	r2, r2, #876	; 0x36c
 8004ae8:	9201      	str	r2, [sp, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	460b      	mov	r3, r1
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	68b8      	ldr	r0, [r7, #8]
 8004af4:	f004 ff11 	bl	800991a <VL53LX_calc_timeout_register_values>
 8004af8:	4603      	mov	r3, r0
 8004afa:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <VL53LX_get_timeouts_us+0x2c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004b30:	23f1      	movs	r3, #241	; 0xf1
 8004b32:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8004b34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d14a      	bne.n	8004bd2 <VL53LX_get_timeouts_us+0xca>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f8b3 2316 	ldrh.w	r2, [r3, #790]	; 0x316
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f893 3372 	ldrb.w	r3, [r3, #882]	; 0x372
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f004 fd5c 	bl	8009608 <VL53LX_calc_macro_period_us>
 8004b50:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
			VL53LX_calc_timeout_us(
 8004b58:	6979      	ldr	r1, [r7, #20]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f004 fe1b 	bl	8009796 <VL53LX_calc_timeout_us>
 8004b60:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f893 336c 	ldrb.w	r3, [r3, #876]	; 0x36c
		timeout_encoded =
 8004b6c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004b6e:	8a7b      	ldrh	r3, [r7, #18]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f893 336d 	ldrb.w	r3, [r3, #877]	; 0x36d
 8004b7a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004b7c:	4413      	add	r3, r2
 8004b7e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8004b80:	8a7b      	ldrh	r3, [r7, #18]
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f004 fe6d 	bl	8009864 <VL53LX_calc_decoded_timeout_us>
 8004b8a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
		timeout_encoded =
 8004b96:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004b98:	8a7b      	ldrh	r3, [r7, #18]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8004ba4:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004ba6:	4413      	add	r3, r2
 8004ba8:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8004baa:	8a7b      	ldrh	r3, [r7, #18]
 8004bac:	6979      	ldr	r1, [r7, #20]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f004 fe58 	bl	8009864 <VL53LX_calc_decoded_timeout_us>
 8004bb4:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	7858      	ldrb	r0, [r3, #1]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	7819      	ldrb	r1, [r3, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f203 3393 	addw	r3, r3, #915	; 0x393
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f005 ff28 	bl	800aa54 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	7898      	ldrb	r0, [r3, #2]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	78d9      	ldrb	r1, [r3, #3]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8004c12:	461a      	mov	r2, r3
 8004c14:	f005 ff5d 	bl	800aad2 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 8004c48:	f107 020e 	add.w	r2, r7, #14
 8004c4c:	f107 010d 	add.w	r1, r7, #13
 8004c50:	4618      	mov	r0, r3
 8004c52:	f008 f8a9 	bl	800cda8 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004c56:	7bba      	ldrb	r2, [r7, #14]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004c5c:	7b7a      	ldrb	r2, [r7, #13]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f893 33fb 	ldrb.w	r3, [r3, #1019]	; 0x3fb
 8004c68:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004ca4:	7afb      	ldrb	r3, [r7, #11]
 8004ca6:	2b21      	cmp	r3, #33	; 0x21
 8004ca8:	d030      	beq.n	8004d0c <VL53LX_get_preset_mode_timing_cfg+0x80>
 8004caa:	2b21      	cmp	r3, #33	; 0x21
 8004cac:	dc43      	bgt.n	8004d36 <VL53LX_get_preset_mode_timing_cfg+0xaa>
 8004cae:	2b1b      	cmp	r3, #27
 8004cb0:	d002      	beq.n	8004cb8 <VL53LX_get_preset_mode_timing_cfg+0x2c>
 8004cb2:	2b1e      	cmp	r3, #30
 8004cb4:	d015      	beq.n	8004ce2 <VL53LX_get_preset_mode_timing_cfg+0x56>
 8004cb6:	e03e      	b.n	8004d36 <VL53LX_get_preset_mode_timing_cfg+0xaa>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	601a      	str	r2, [r3, #0]

	break;
 8004ce0:	e02c      	b.n	8004d3c <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	601a      	str	r2, [r3, #0]
	break;
 8004d0a:	e017      	b.n	8004d3c <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	601a      	str	r2, [r3, #0]
	break;
 8004d34:	e002      	b.n	8004d3c <VL53LX_get_preset_mode_timing_cfg+0xb0>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004d36:	23fc      	movs	r3, #252	; 0xfc
 8004d38:	75fb      	strb	r3, [r7, #23]
		break;
 8004d3a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b096      	sub	sp, #88	; 0x58
 8004d50:	af06      	add	r7, sp, #24
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	72fb      	strb	r3, [r7, #11]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004d6e:	3320      	adds	r3, #32
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8004d98:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8004da0:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004da8:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	33c2      	adds	r3, #194	; 0xc2
 8004dae:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004db6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	7afa      	ldrb	r2, [r7, #11]
 8004dbc:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dce:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f003 fccd 	bl	8008772 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8004dd8:	7afb      	ldrb	r3, [r7, #11]
 8004dda:	2b21      	cmp	r3, #33	; 0x21
 8004ddc:	d02e      	beq.n	8004e3c <VL53LX_set_preset_mode+0xf0>
 8004dde:	2b21      	cmp	r3, #33	; 0x21
 8004de0:	dc40      	bgt.n	8004e64 <VL53LX_set_preset_mode+0x118>
 8004de2:	2b1b      	cmp	r3, #27
 8004de4:	d002      	beq.n	8004dec <VL53LX_set_preset_mode+0xa0>
 8004de6:	2b1e      	cmp	r3, #30
 8004de8:	d014      	beq.n	8004e14 <VL53LX_set_preset_mode+0xc8>
 8004dea:	e03b      	b.n	8004e64 <VL53LX_set_preset_mode+0x118>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	9303      	str	r3, [sp, #12]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	9302      	str	r3, [sp, #8]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e08:	f003 f9e5 	bl	80081d6 <VL53LX_preset_mode_histogram_long_range>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e12:	e02b      	b.n	8004e6c <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	9302      	str	r3, [sp, #8]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e30:	f003 fa6f 	bl	8008312 <VL53LX_preset_mode_histogram_medium_range>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e3a:	e017      	b.n	8004e6c <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	9304      	str	r3, [sp, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	9303      	str	r3, [sp, #12]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	9302      	str	r3, [sp, #8]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e58:	f003 faf9 	bl	800844e <VL53LX_preset_mode_histogram_short_range>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e62:	e003      	b.n	8004e6c <VL53LX_set_preset_mode+0x120>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004e64:	23fc      	movs	r3, #252	; 0xfc
 8004e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8004e6a:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8004e6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <VL53LX_set_preset_mode+0x134>

		pstatic->dss_config__target_total_rate_mcps =
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	893a      	ldrh	r2, [r7, #8]
 8004e78:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8004e80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d108      	bne.n	8004e9a <VL53LX_set_preset_mode+0x14e>
		status =
			VL53LX_set_timeouts_us(
 8004e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff fe02 	bl	8004a98 <VL53LX_set_timeouts_us>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8004e9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <VL53LX_set_preset_mode+0x164>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8004ea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fdca 	bl	8004a3e <VL53LX_set_inter_measurement_period_ms>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebc:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f004 f868 	bl	8008f98 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8004ec8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3740      	adds	r7, #64	; 0x40
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b0d2      	sub	sp, #328	; 0x148
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004ede:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004ee2:	6018      	str	r0, [r3, #0]
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004eec:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004ef8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8004efc:	460a      	mov	r2, r1
 8004efe:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004f06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 8004f14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004f22:	3320      	adds	r3, #32
 8004f24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8004f28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f2c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004f30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004f34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f38:	3348      	adds	r3, #72	; 0x48
 8004f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004f3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f42:	f203 3336 	addw	r3, r3, #822	; 0x336
 8004f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004f4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004f52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004f56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f5a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8004f5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004f62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f66:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8004f6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004f6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f72:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004f76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004f7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f7e:	332c      	adds	r3, #44	; 0x2c
 8004f80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004f84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f88:	3348      	adds	r3, #72	; 0x48
 8004f8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8004fae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fb2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004fb6:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004fbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fc2:	791b      	ldrb	r3, [r3, #4]
 8004fc4:	b25b      	sxtb	r3, r3
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004fcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004fd0:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8004fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004fde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fe2:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8004fe4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fe8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8004fec:	3336      	adds	r3, #54	; 0x36
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004ff4:	4413      	add	r3, r2
 8004ff6:	1d9a      	adds	r2, r3, #6
 8004ff8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004ffc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005000:	4611      	mov	r1, r2
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	f7ff fdeb 	bl	8004bde <VL53LX_set_user_zone>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 800500e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005012:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 800501a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800501e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005022:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005030:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005034:	4413      	add	r3, r2
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800503c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005040:	4611      	mov	r1, r2
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	f001 fb6c 	bl	8006720 <VL53LX_set_zone_dss_config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 800504e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005052:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 800505e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005062:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800506a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800506e:	f8b3 22dc 	ldrh.w	r2, [r3, #732]	; 0x2dc
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005072:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005076:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 800507a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800507e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005082:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
 8005086:	2bff      	cmp	r3, #255	; 0xff
 8005088:	d106      	bne.n	8005098 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800508a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800508e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005092:	2200      	movs	r2, #0
 8005094:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005098:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800509c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a0:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d139      	bne.n	800511c <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80050a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b0:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d131      	bne.n	800511c <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80050b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050bc:	f893 2358 	ldrb.w	r2, [r3, #856]	; 0x358
		pdev->low_power_auto_data.saved_interrupt_config =
 80050c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c8:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80050cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

		if ((pdev->dyn_cfg.system__sequence_config & (
 80050d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050da:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80050de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 80050e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80050ee:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80050f0:	b21a      	sxth	r2, r3
 80050f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050f6:	825a      	strh	r2, [r3, #18]
 80050f8:	e003      	b.n	8005102 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 80050fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050fe:	2200      	movs	r2, #0
 8005100:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005102:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005106:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d805      	bhi.n	800511c <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005110:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005114:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005118:	2205      	movs	r2, #5
 800511a:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800511c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005124:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8005128:	2b01      	cmp	r3, #1
 800512a:	d117      	bne.n	800515c <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800512c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005134:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10f      	bne.n	800515c <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800513c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005144:	f893 242b 	ldrb.w	r2, [r3, #1067]	; 0x42b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005148:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800514c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8005150:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005154:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005158:	2206      	movs	r2, #6
 800515a:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 800515c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8005164:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005168:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	f005 ff5e 	bl	800b02e <VL53LX_save_cfg_data>
 8005172:	4603      	mov	r3, r0
 8005174:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005178:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800517c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	2b05      	cmp	r3, #5
 8005186:	d827      	bhi.n	80051d8 <VL53LX_init_and_start_range+0x304>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <VL53LX_init_and_start_range+0x2bc>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051d1 	.word	0x080051d1
 8005194:	080051c9 	.word	0x080051c9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051a9 	.word	0x080051a9
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051ae:	e017      	b.n	80051e0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80051b0:	230d      	movs	r3, #13
 80051b2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051b6:	e013      	b.n	80051e0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 80051b8:	2324      	movs	r3, #36	; 0x24
 80051ba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051be:	e00f      	b.n	80051e0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 80051c0:	2344      	movs	r3, #68	; 0x44
 80051c2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051c6:	e00b      	b.n	80051e0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 80051c8:	235a      	movs	r3, #90	; 0x5a
 80051ca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051ce:	e007      	b.n	80051e0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 80051d0:	2371      	movs	r3, #113	; 0x71
 80051d2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051d6:	e003      	b.n	80051e0 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 80051d8:	2383      	movs	r3, #131	; 0x83
 80051da:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80051de:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80051e0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80051e4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 80051e8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80051ec:	f107 030c 	add.w	r3, r7, #12
 80051f0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80051fa:	e00b      	b.n	8005214 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 80051fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800520a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800520e:	3301      	adds	r3, #1
 8005210:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005214:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005218:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800521c:	429a      	cmp	r2, r3
 800521e:	d3ed      	bcc.n	80051fc <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8005220:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005224:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b05      	cmp	r3, #5
 800522c:	d917      	bls.n	800525e <VL53LX_init_and_start_range+0x38a>
 800522e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005232:	2b00      	cmp	r3, #0
 8005234:	d113      	bne.n	800525e <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005236:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800523a:	f1c3 0301 	rsb	r3, r3, #1
 800523e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005242:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8005246:	f107 020c 	add.w	r2, r7, #12
 800524a:	4413      	add	r3, r2
 800524c:	461a      	mov	r2, r3
 800524e:	210b      	movs	r1, #11
 8005250:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005254:	f00a ffc9 	bl	80101ea <VL53LX_i2c_encode_static_nvm_managed>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800525e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005262:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b04      	cmp	r3, #4
 800526a:	d917      	bls.n	800529c <VL53LX_init_and_start_range+0x3c8>
 800526c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005270:	2b00      	cmp	r3, #0
 8005272:	d113      	bne.n	800529c <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005274:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005278:	f1c3 030d 	rsb	r3, r3, #13
 800527c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005280:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8005284:	f107 020c 	add.w	r2, r7, #12
 8005288:	4413      	add	r3, r2
 800528a:	461a      	mov	r2, r3
 800528c:	2117      	movs	r1, #23
 800528e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005292:	f00b f886 	bl	80103a2 <VL53LX_i2c_encode_customer_nvm_managed>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800529c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80052a0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d917      	bls.n	80052da <VL53LX_init_and_start_range+0x406>
 80052aa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d113      	bne.n	80052da <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80052b2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80052b6:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80052ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80052be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 80052c2:	f107 020c 	add.w	r2, r7, #12
 80052c6:	4413      	add	r3, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	2120      	movs	r1, #32
 80052cc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80052d0:	f00b f9c9 	bl	8010666 <VL53LX_i2c_encode_static_config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80052da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80052de:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d917      	bls.n	8005318 <VL53LX_init_and_start_range+0x444>
 80052e8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80052f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80052f4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80052f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80052fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8005300:	f107 020c 	add.w	r2, r7, #12
 8005304:	4413      	add	r3, r2
 8005306:	461a      	mov	r2, r3
 8005308:	2116      	movs	r1, #22
 800530a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800530e:	f00b fa8d 	bl	801082c <VL53LX_i2c_encode_general_config>
 8005312:	4603      	mov	r3, r0
 8005314:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005318:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800531c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d917      	bls.n	8005356 <VL53LX_init_and_start_range+0x482>
 8005326:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800532a:	2b00      	cmp	r3, #0
 800532c:	d113      	bne.n	8005356 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800532e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005332:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005336:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800533a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 800533e:	f107 020c 	add.w	r2, r7, #12
 8005342:	4413      	add	r3, r2
 8005344:	461a      	mov	r2, r3
 8005346:	2117      	movs	r1, #23
 8005348:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800534c:	f00b faf2 	bl	8010934 <VL53LX_i2c_encode_timing_config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005356:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800535a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d036      	beq.n	80053d2 <VL53LX_init_and_start_range+0x4fe>
 8005364:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005368:	2b00      	cmp	r3, #0
 800536a:	d132      	bne.n	80053d2 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800536c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005370:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005374:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005378:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	b2da      	uxtb	r2, r3
 8005392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005396:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053a8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ae:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80053b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80053ba:	f107 020c 	add.w	r2, r7, #12
 80053be:	4413      	add	r3, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	2112      	movs	r1, #18
 80053c4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80053c8:	f00b fb36 	bl	8010a38 <VL53LX_i2c_encode_dynamic_config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80053d2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d113      	bne.n	8005402 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 80053da:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80053de:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80053e2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80053e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 80053ea:	f107 020c 	add.w	r2, r7, #12
 80053ee:	4413      	add	r3, r2
 80053f0:	461a      	mov	r2, r3
 80053f2:	2105      	movs	r1, #5
 80053f4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80053f8:	f00b fba3 	bl	8010b42 <VL53LX_i2c_encode_system_control>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8005402:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10f      	bne.n	800542a <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 800540a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800540e:	f107 020c 	add.w	r2, r7, #12
 8005412:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8005416:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800541a:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f7fd f940 	bl	80026a4 <VL53LX_WriteMulti>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 800542a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8005432:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005436:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	f003 f9c8 	bl	80087d0 <VL53LX_update_ll_driver_rd_state>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 8005446:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 800544e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005452:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	f003 fb58 	bl	8008b0c <VL53LX_update_ll_driver_cfg_state>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005462:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005466:	4618      	mov	r0, r3
 8005468:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b0c8      	sub	sp, #288	; 0x120
 8005474:	af00      	add	r7, sp, #0
 8005476:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800547a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800547e:	6018      	str	r0, [r3, #0]
 8005480:	460a      	mov	r2, r1
 8005482:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005486:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800548a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800548c:	2300      	movs	r3, #0
 800548e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005492:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005496:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 80054a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054a4:	f203 339e 	addw	r3, r3, #926	; 0x39e
 80054a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 80054ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054b0:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80054b4:	3310      	adds	r3, #16
 80054b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80054ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054be:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80054c2:	3314      	adds	r3, #20
 80054c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80054c8:	2388      	movs	r3, #136	; 0x88
 80054ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80054da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054de:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d008      	beq.n	80054fa <VL53LX_get_measurement_results+0x8a>
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d10d      	bne.n	8005508 <VL53LX_get_measurement_results+0x98>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80054ec:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80054f0:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80054f4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80054f8:	e00a      	b.n	8005510 <VL53LX_get_measurement_results+0xa0>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80054fa:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80054fe:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005502:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005506:	e003      	b.n	8005510 <VL53LX_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8005508:	232c      	movs	r3, #44	; 0x2c
 800550a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800550e:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8005510:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <VL53LX_get_measurement_results+0xc8>
		status =
			VL53LX_ReadMulti(
 8005518:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800551c:	f107 0208 	add.w	r2, r7, #8
 8005520:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005524:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005528:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800552c:	6800      	ldr	r0, [r0, #0]
 800552e:	f7fd f8ef 	bl	8002710 <VL53LX_ReadMulti>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8005538:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800553c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d917      	bls.n	8005576 <VL53LX_get_measurement_results+0x106>
 8005546:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800554a:	2b00      	cmp	r3, #0
 800554c:	d113      	bne.n	8005576 <VL53LX_get_measurement_results+0x106>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800554e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005552:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005556:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800555a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 800555e:	f107 0208 	add.w	r2, r7, #8
 8005562:	4413      	add	r3, r2
 8005564:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005568:	4619      	mov	r1, r3
 800556a:	2038      	movs	r0, #56	; 0x38
 800556c:	f00b fc7b 	bl	8010e66 <VL53LX_i2c_decode_debug_results>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005576:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800557a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d017      	beq.n	80055b4 <VL53LX_get_measurement_results+0x144>
 8005584:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005588:	2b00      	cmp	r3, #0
 800558a:	d113      	bne.n	80055b4 <VL53LX_get_measurement_results+0x144>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800558c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005590:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005594:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005598:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 800559c:	f107 0208 	add.w	r2, r7, #8
 80055a0:	4413      	add	r3, r2
 80055a2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80055a6:	4619      	mov	r1, r3
 80055a8:	2021      	movs	r0, #33	; 0x21
 80055aa:	f00b fbfb 	bl	8010da4 <VL53LX_i2c_decode_core_results>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80055b4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d110      	bne.n	80055de <VL53LX_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80055c2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 80055c6:	f107 0208 	add.w	r2, r7, #8
 80055ca:	4413      	add	r3, r2
 80055cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80055d0:	4619      	mov	r1, r3
 80055d2:	202c      	movs	r0, #44	; 0x2c
 80055d4:	f00b faf0 	bl	8010bb8 <VL53LX_i2c_decode_system_results>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80055de:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f0:	b0a0      	sub	sp, #128	; 0x80
 80055f2:	af06      	add	r7, sp, #24
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	460b      	mov	r3, r1
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800560c:	3320      	adds	r3, #32
 800560e:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8005610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005612:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8005614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005616:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800561a:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 800561c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800561e:	332c      	adds	r3, #44	; 0x2c
 8005620:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8005622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005624:	33c2      	adds	r3, #194	; 0xc2
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8005628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800562a:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800562e:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005638:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800563c:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 800563e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005640:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8005646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005648:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800564c:	3308      	adds	r3, #8
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005652:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8005658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800565a:	3348      	adds	r3, #72	; 0x48
 800565c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 800565e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005660:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8005666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005668:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800566c:	3314      	adds	r3, #20
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8005670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005672:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8292 	beq.w	8005ba4 <VL53LX_get_device_results+0x5b8>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8005680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005682:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fbcd 	bl	8005e28 <VL53LX_get_histogram_bin_data>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8005694:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005698:	2b00      	cmp	r3, #0
 800569a:	d118      	bne.n	80056ce <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d114      	bne.n	80056ce <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 80056a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 80056ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b6:	4413      	add	r3, r2
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056bc:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f004 f9a2 	bl	8009a0c <VL53LX_hist_copy_and_scale_ambient_info>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80056ce:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f040 8208 	bne.w	8005ae8 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80056d8:	f107 0313 	add.w	r3, r7, #19
 80056dc:	4619      	mov	r1, r3
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f006 fe39 	bl	800c356 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80056ea:	2301      	movs	r3, #1
 80056ec:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80056ee:	7cfb      	ldrb	r3, [r7, #19]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80056f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056f8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d107      	bne.n	8005710 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8005700:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	3202      	adds	r2, #2
 8005708:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8005710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005712:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8005716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005718:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f004 f876 	bl	8009818 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 800572c:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 800572e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005730:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005734:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573a:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800573c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005744:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800574a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800574c:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005752:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005756:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800575a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575c:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 800575e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005766:	f8b3 2336 	ldrh.w	r2, [r3, #822]	; 0x336
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800576a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005772:	f893 2369 	ldrb.w	r2, [r3, #873]	; 0x369
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8005776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005778:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800578c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578e:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005792:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005796:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800579c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579e:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 80057a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a2:	f203 32ca 	addw	r2, r3, #970	; 0x3ca
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f003 fad2 	bl	8008d58 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80057b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057b6:	795b      	ldrb	r3, [r3, #5]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d002      	beq.n	80057c2 <VL53LX_get_device_results+0x1d6>
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d02e      	beq.n	800581e <VL53LX_get_device_results+0x232>
 80057c0:	e03d      	b.n	800583e <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80057c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057c4:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 80057c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80057d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057da:	f893 e3fa 	ldrb.w	lr, [r3, #1018]	; 0x3fa
 80057de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057e0:	f893 83fb 	ldrb.w	r8, [r3, #1019]	; 0x3fb
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80057ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ec:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80057f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80057f2:	319c      	adds	r1, #156	; 0x9c
 80057f4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80057f6:	f500 7004 	add.w	r0, r0, #528	; 0x210
 80057fa:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80057fe:	b2a4      	uxth	r4, r4
 8005800:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8005802:	351c      	adds	r5, #28
 8005804:	9505      	str	r5, [sp, #20]
 8005806:	9404      	str	r4, [sp, #16]
 8005808:	9003      	str	r0, [sp, #12]
 800580a:	9102      	str	r1, [sp, #8]
 800580c:	9201      	str	r2, [sp, #4]
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	4643      	mov	r3, r8
 8005812:	4672      	mov	r2, lr
 8005814:	4661      	mov	r1, ip
 8005816:	4630      	mov	r0, r6
 8005818:	f005 f86c 	bl	800a8f4 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800581c:	e013      	b.n	8005846 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 800581e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005820:	331c      	adds	r3, #28
 8005822:	4619      	mov	r1, r3
 8005824:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005826:	f7fe faa3 	bl	8003d70 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800582a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005830:	b29b      	uxth	r3, r3
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	b29b      	uxth	r3, r3
 8005836:	b21a      	sxth	r2, r3
 8005838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583a:	839a      	strh	r2, [r3, #28]
		break;
 800583c:	e003      	b.n	8005846 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 800583e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005840:	2200      	movs	r2, #0
 8005842:	839a      	strh	r2, [r3, #28]
		break;
 8005844:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8005846:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800584a:	2b00      	cmp	r3, #0
 800584c:	f040 814e 	bne.w	8005aec <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800585c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800585e:	f503 7204 	add.w	r2, r3, #528	; 0x210
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005864:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
		VL53LX_calc_max_effective_spads(
 8005868:	b29c      	uxth	r4, r3
 800586a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800586c:	f203 23a2 	addw	r3, r3, #674	; 0x2a2
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	4623      	mov	r3, r4
 8005874:	f005 f9e3 	bl	800ac3e <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8005878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800587a:	799b      	ldrb	r3, [r3, #6]
 800587c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587e:	4619      	mov	r1, r3
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 ff88 	bl	8006796 <VL53LX_get_dmax_calibration_data>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 800588c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 812d 	bne.w	8005af0 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8005896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005898:	f503 7523 	add.w	r5, r3, #652	; 0x28c
 800589c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800589e:	f503 7613 	add.w	r6, r3, #588	; 0x24c
 80058a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a4:	f503 717f 	add.w	r1, r3, #1020	; 0x3fc
 80058a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058aa:	f203 5054 	addw	r0, r3, #1364	; 0x554
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80058ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80058b4:	3318      	adds	r3, #24
				pdev->wArea2,
 80058b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b8:	f502 52d1 	add.w	r2, r2, #6688	; 0x1a20
 80058bc:	3218      	adds	r2, #24
		status = VL53LX_ipp_hist_process_data(
 80058be:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80058c0:	9405      	str	r4, [sp, #20]
 80058c2:	f107 0413 	add.w	r4, r7, #19
 80058c6:	9404      	str	r4, [sp, #16]
 80058c8:	9203      	str	r2, [sp, #12]
 80058ca:	9302      	str	r3, [sp, #8]
 80058cc:	9001      	str	r0, [sp, #4]
 80058ce:	9100      	str	r1, [sp, #0]
 80058d0:	4633      	mov	r3, r6
 80058d2:	462a      	mov	r2, r5
 80058d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7fd f90a 	bl	8002af0 <VL53LX_ipp_hist_process_data>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80058e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e4:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d150      	bne.n	800598e <VL53LX_get_device_results+0x3a2>
			(histo_merge_nb > 1))
 80058ec:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d94d      	bls.n	800598e <VL53LX_get_device_results+0x3a2>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80058f2:	2300      	movs	r3, #0
 80058f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80058f8:	e045      	b.n	8005986 <VL53LX_get_device_results+0x39a>
			pdata = &(presults->VL53LX_p_003[i]);
 80058fa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80058fe:	224c      	movs	r2, #76	; 0x4c
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	3310      	adds	r3, #16
 8005906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005908:	4413      	add	r3, r2
 800590a:	3304      	adds	r3, #4
 800590c:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	7cfa      	ldrb	r2, [r7, #19]
 8005914:	fbb3 f2f2 	udiv	r2, r3, r2
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	7cfa      	ldrb	r2, [r7, #19]
 8005922:	fbb3 f2f2 	udiv	r2, r3, r2
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	7cfa      	ldrb	r2, [r7, #19]
 8005930:	fb93 f2f2 	sdiv	r2, r3, r2
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800593c:	461a      	mov	r2, r3
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	fb92 f3f3 	sdiv	r3, r2, r3
 8005944:	b29a      	uxth	r2, r3
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800594e:	461a      	mov	r2, r3
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	fb92 f3f3 	sdiv	r3, r2, r3
 8005956:	b29a      	uxth	r2, r3
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005960:	461a      	mov	r2, r3
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	fb92 f3f3 	sdiv	r3, r2, r3
 8005968:	b29a      	uxth	r2, r3
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	7cfa      	ldrb	r2, [r7, #19]
 8005974:	fbb3 f2f2 	udiv	r2, r3, r2
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800597c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005980:	3301      	adds	r3, #1
 8005982:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005986:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800598a:	2b03      	cmp	r3, #3
 800598c:	d9b5      	bls.n	80058fa <VL53LX_get_device_results+0x30e>
		}


		if (status != VL53LX_ERROR_NONE)
 800598e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 80ae 	bne.w	8005af4 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8005998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800599a:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 800599e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a0:	f503 717f 	add.w	r1, r3, #1020	; 0x3fc
 80059a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a6:	330e      	adds	r3, #14
 80059a8:	461a      	mov	r2, r3
 80059aa:	f004 ff6d 	bl	800a888 <VL53LX_hist_wrap_dmax>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 80059b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f040 809d 	bne.w	8005af8 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80059be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80059c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d0:	4413      	add	r3, r2
 80059d2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80059d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80059d8:	4613      	mov	r3, r2
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80059e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059e6:	4413      	add	r3, r2
 80059e8:	f103 0208 	add.w	r2, r3, #8
 80059ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f004 fa6a 	bl	8009ec8 <VL53LX_hist_phase_consistency_check>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80059fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d17c      	bne.n	8005afc <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8005a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8005a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a14:	4413      	add	r3, r2
 8005a16:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8005a18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f103 0208 	add.w	r2, r3, #8
 8005a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f004 fecf 	bl	800a7da <VL53LX_hist_xmonitor_consistency_check>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8005a42:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d15a      	bne.n	8005b00 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8005a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	2210      	movs	r2, #16
 8005a58:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8005a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a5c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005a60:	3301      	adds	r3, #1
 8005a62:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a6e:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8005a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a72:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 8005a76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d222      	bcs.n	8005ac4 <VL53LX_get_device_results+0x4d8>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8005a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8005a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a92:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8005a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9a:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8005aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa4:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa8:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8005aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aae:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab8:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8005aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac2:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8005ac4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d11b      	bne.n	8005b04 <VL53LX_get_device_results+0x518>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8005acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ace:	f503 707f 	add.w	r0, r3, #1020	; 0x3fc
 8005ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ad4:	f203 329e 	addw	r2, r3, #926	; 0x39e
 8005ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ada:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005ade:	3310      	adds	r3, #16
 8005ae0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ae2:	f005 fa09 	bl	800aef8 <VL53LX_hist_copy_results_to_sys_and_core>
 8005ae6:	e00e      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005ae8:	bf00      	nop
 8005aea:	e00c      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005aec:	bf00      	nop
 8005aee:	e00a      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005af0:	bf00      	nop
 8005af2:	e008      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005af4:	bf00      	nop
 8005af6:	e006      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8005b04:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d036      	beq.n	8005b7c <VL53LX_get_device_results+0x590>
			if (pstate->rd_device_state !=
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b10:	79db      	ldrb	r3, [r3, #7]
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d00a      	beq.n	8005b2c <VL53LX_get_device_results+0x540>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8005b16:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <VL53LX_get_device_results+0x540>
					status = VL53LX_dynamic_zone_update(
 8005b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f005 fabd 	bl	800b0a0 <VL53LX_dynamic_zone_update>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005b32:	e015      	b.n	8005b60 <VL53LX_get_device_results+0x574>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8005b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8005b3a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <VL53LX_get_device_results+0x55a>
 8005b42:	2103      	movs	r1, #3
 8005b44:	e000      	b.n	8005b48 <VL53LX_get_device_results+0x55c>
 8005b46:	2101      	movs	r1, #1
 8005b48:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b4e:	4413      	add	r3, r2
 8005b50:	460a      	mov	r2, r1
 8005b52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005b56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005b60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d9e5      	bls.n	8005b34 <VL53LX_get_device_results+0x548>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8005b68:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <VL53LX_get_device_results+0x590>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f005 fb0f 	bl	800b194 <VL53LX_multizone_hist_bins_update>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8005b7c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <VL53LX_get_device_results+0x5a4>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f005 feff 	bl	800b988 <VL53LX_dynamic_xtalk_correction_corrector>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8005b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b92:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d151      	bne.n	8005c3e <VL53LX_get_device_results+0x652>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e04c      	b.n	8005c3e <VL53LX_get_device_results+0x652>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8005ba4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <VL53LX_get_device_results+0x5d0>
			status = VL53LX_get_measurement_results(
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fc5d 	bl	8005470 <VL53LX_get_measurement_results>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8005bbc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <VL53LX_get_device_results+0x5f4>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bc6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8005bca:	4618      	mov	r0, r3
 8005bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bce:	f203 319e 	addw	r1, r3, #926	; 0x39e
 8005bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bd4:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8005bd8:	3210      	adds	r2, #16
 8005bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bdc:	f000 fc2c 	bl	8006438 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d12a      	bne.n	8005c3e <VL53LX_get_device_results+0x652>

			if ((status == VL53LX_ERROR_NONE) &&
 8005be8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10d      	bne.n	8005c0c <VL53LX_get_device_results+0x620>
				(pL->low_power_auto_range_count == 0)) {
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d109      	bne.n	8005c0c <VL53LX_get_device_results+0x620>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f006 fad3 	bl	800c1a4 <VL53LX_low_power_auto_setup_manual_calibration>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2201      	movs	r2, #1
 8005c08:	709a      	strb	r2, [r3, #2]
 8005c0a:	e00a      	b.n	8005c22 <VL53LX_get_device_results+0x636>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8005c0c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <VL53LX_get_device_results+0x636>
				(pL->low_power_auto_range_count == 1)) {
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d102      	bne.n	8005c22 <VL53LX_get_device_results+0x636>
				pL->low_power_auto_range_count = 2;
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2202      	movs	r2, #2
 8005c20:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	2bff      	cmp	r3, #255	; 0xff
 8005c28:	d009      	beq.n	8005c3e <VL53LX_get_device_results+0x652>
 8005c2a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <VL53LX_get_device_results+0x652>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f006 fb07 	bl	800c246 <VL53LX_low_power_auto_update_DSS>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c40:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c46:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c50:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8005c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c54:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8005c5c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 80b0 	bne.w	8005dc6 <VL53LX_get_device_results+0x7da>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8005c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c68:	2210      	movs	r2, #16
 8005c6a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c70:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005c74:	3301      	adds	r3, #1
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7a:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8005c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8005c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8005c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c92:	429a      	cmp	r2, r3
 8005c94:	f080 8097 	bcs.w	8005dc6 <VL53LX_get_device_results+0x7da>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8005c98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005ca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005caa:	4413      	add	r3, r2
 8005cac:	3308      	adds	r3, #8
 8005cae:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8005cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb2:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8005cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cba:	785a      	ldrb	r2, [r3, #1]
 8005cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cbe:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8005cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc2:	789a      	ldrb	r2, [r3, #2]
 8005cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc6:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8005cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cca:	78da      	ldrb	r2, [r3, #3]
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cce:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8005cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8005cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cdc:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8005ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce6:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8005cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8005cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf2:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8005cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8005cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cfe:	7c5a      	ldrb	r2, [r3, #17]
 8005d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d02:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8005d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d06:	7c9a      	ldrb	r2, [r3, #18]
 8005d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0a:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005d12:	e052      	b.n	8005dba <VL53LX_get_device_results+0x7ce>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8005d14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8005d18:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8005d1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d1e:	204c      	movs	r0, #76	; 0x4c
 8005d20:	fb00 f303 	mul.w	r3, r0, r3
 8005d24:	440b      	add	r3, r1
 8005d26:	3338      	adds	r3, #56	; 0x38
 8005d28:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8005d2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4403      	add	r3, r0
 8005d36:	3308      	adds	r3, #8
 8005d38:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005d3a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8005d3e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d44:	204c      	movs	r0, #76	; 0x4c
 8005d46:	fb00 f303 	mul.w	r3, r0, r3
 8005d4a:	440b      	add	r3, r1
 8005d4c:	333c      	adds	r3, #60	; 0x3c
 8005d4e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8005d50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4403      	add	r3, r0
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005d60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005d64:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005d68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d6a:	204c      	movs	r0, #76	; 0x4c
 8005d6c:	fb00 f303 	mul.w	r3, r0, r3
 8005d70:	440b      	add	r3, r1
 8005d72:	3354      	adds	r3, #84	; 0x54
 8005d74:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d78:	4613      	mov	r3, r2
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3310      	adds	r3, #16
 8005d84:	4602      	mov	r2, r0
 8005d86:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8005d88:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8005d8c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8005d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d92:	204c      	movs	r0, #76	; 0x4c
 8005d94:	fb00 f303 	mul.w	r3, r0, r3
 8005d98:	440b      	add	r3, r1
 8005d9a:	335e      	adds	r3, #94	; 0x5e
 8005d9c:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8005d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	3312      	adds	r3, #18
 8005dac:	4602      	mov	r2, r0
 8005dae:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005db0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005db4:	3301      	adds	r3, #1
 8005db6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dbc:	7c9b      	ldrb	r3, [r3, #18]
 8005dbe:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3a6      	bcc.n	8005d14 <VL53LX_get_device_results+0x728>
		}
	}



	memcpy(
 8005dc6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8005dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f010 f9f9 	bl	80161c4 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8005dd2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <VL53LX_get_device_results+0x7fa>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f002 fde4 	bl	80089a8 <VL53LX_check_ll_driver_rd_state>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005de6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3768      	adds	r7, #104	; 0x68
 8005dee:	46bd      	mov	sp, r7
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005df4 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8005e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d107      	bne.n	8005e1c <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	2203      	movs	r2, #3
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff f85e 	bl	8004ed4 <VL53LX_init_and_start_range>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b0d2      	sub	sp, #328	; 0x148
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005e36:	6018      	str	r0, [r3, #0]
 8005e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e40:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8005e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005e56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005e64:	3320      	adds	r3, #32
 8005e66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8005e6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e6e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8005e76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e7a:	f203 3336 	addw	r3, r3, #822	; 0x336
 8005e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8005e82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e86:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8005e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e92:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8005e96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8005e9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8005ea2:	f107 030c 	add.w	r3, r7, #12
 8005ea6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8005ed4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8005ee0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8005ee8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eec:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8005ef0:	2353      	movs	r3, #83	; 0x53
 8005ef2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005ef6:	2188      	movs	r1, #136	; 0x88
 8005ef8:	6800      	ldr	r0, [r0, #0]
 8005efa:	f7fc fc09 	bl	8002710 <VL53LX_ReadMulti>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8005f04:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8005f18:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f1c:	785a      	ldrb	r2, [r3, #1]
 8005f1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f22:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8005f2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f30:	789a      	ldrb	r2, [r3, #2]
 8005f32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f36:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8005f40:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f44:	78da      	ldrb	r2, [r3, #3]
 8005f46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f4a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8005f54:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	f003 f9ee 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8005f66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f6a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8005f74:	234e      	movs	r3, #78	; 0x4e
 8005f76:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005f7a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005f7e:	f107 020c 	add.w	r2, r7, #12
 8005f82:	4413      	add	r3, r2
 8005f84:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005f88:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005f8c:	2002      	movs	r0, #2
 8005f8e:	f003 f9d6 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8005f96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f9a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8005fa4:	2350      	movs	r3, #80	; 0x50
 8005fa6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8005faa:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005fae:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005fb2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005fb6:	5cd2      	ldrb	r2, [r2, r3]
 8005fb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8005fc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8005fd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fdc:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005fe0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fe4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8005fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396



	i2c_buffer_offset_bytes =
 8005ffa:	2351      	movs	r3, #81	; 0x51
 8005ffc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006000:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006004:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006008:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800600c:	5cd3      	ldrb	r3, [r2, r3]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006014:	2352      	movs	r3, #82	; 0x52
 8006016:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 800601a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800601e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006022:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006026:	5cd2      	ldrb	r2, [r2, r3]
 8006028:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800602c:	4413      	add	r3, r2
 800602e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006032:	234d      	movs	r3, #77	; 0x4d
 8006034:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006038:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800603c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006040:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006044:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006048:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800604a:	2306      	movs	r3, #6
 800604c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006050:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006054:	f107 020c 	add.w	r2, r7, #12
 8006058:	4413      	add	r3, r2
 800605a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800605e:	2300      	movs	r3, #0
 8006060:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006064:	e01a      	b.n	800609c <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8006066:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800606a:	2003      	movs	r0, #3
 800606c:	f003 fa06 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8006070:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006072:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8006076:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006078:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800607c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3206      	adds	r2, #6
 8006084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006088:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800608c:	3303      	adds	r3, #3
 800608e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006092:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006096:	3301      	adds	r3, #1
 8006098:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800609c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80060a0:	2b17      	cmp	r3, #23
 80060a2:	d9e0      	bls.n	8006066 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 80060a4:	f107 0208 	add.w	r2, r7, #8
 80060a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060b0:	f248 018d 	movw	r1, #32909	; 0x808d
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f000 fb97 	bl	80067e8 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 80060ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d118      	bne.n	80060fe <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80060cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060d0:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80060d4:	3308      	adds	r3, #8
 80060d6:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f010 f87f 	bl	80161e0 <memset>
		pdev->bin_rec_pos = 0;
 80060e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
		pdev->pos_before_next_recom = 0;
 80060f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
	}

	if (hist_merge == 1)
 80060fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006102:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10b      	bne.n	8006124 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 800610c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006110:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006114:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006118:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	f7fd ff1e 	bl	8003f60 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006124:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006128:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800612c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006130:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8006138:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800613c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8006146:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800614a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2218      	movs	r2, #24
 8006152:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8006154:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006158:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2218      	movs	r2, #24
 8006160:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006162:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006166:	78da      	ldrb	r2, [r3, #3]
 8006168:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800616c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006176:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800617a:	799b      	ldrb	r3, [r3, #6]
 800617c:	b29b      	uxth	r3, r3
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006182:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006186:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006190:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006194:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800619e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061a2:	7c1b      	ldrb	r3, [r3, #16]
 80061a4:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 80061a6:	4413      	add	r3, r2
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061ae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80061b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061bc:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 80061be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80061cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061d0:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80061d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061d8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80061dc:	6811      	ldr	r1, [r2, #0]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	f003 fd15 	bl	8009c0e <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80061e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d117      	bne.n	8006220 <VL53LX_get_histogram_bin_data+0x3f8>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80061f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061f4:	791b      	ldrb	r3, [r3, #4]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80061fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006200:	795b      	ldrb	r3, [r3, #5]
 8006202:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006204:	4413      	add	r3, r2
 8006206:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800620a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800620e:	799a      	ldrb	r2, [r3, #6]
 8006210:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006214:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800621e:	e016      	b.n	800624e <VL53LX_get_histogram_bin_data+0x426>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006220:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006224:	79db      	ldrb	r3, [r3, #7]
 8006226:	b29b      	uxth	r3, r3
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800622c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006230:	7a1b      	ldrb	r3, [r3, #8]
 8006232:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006234:	4413      	add	r3, r2
 8006236:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 800623a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800623e:	7a5a      	ldrb	r2, [r3, #9]
 8006240:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006244:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800624e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006252:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800625c:	2300      	movs	r3, #0
 800625e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006262:	e01f      	b.n	80062a4 <VL53LX_get_histogram_bin_data+0x47c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006264:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006268:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800626c:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	4413      	add	r3, r2
 8006274:	7b1b      	ldrb	r3, [r3, #12]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b07      	cmp	r3, #7
 800627c:	d10d      	bne.n	800629a <VL53LX_get_histogram_bin_data+0x472>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800627e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006282:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	7adb      	ldrb	r3, [r3, #11]
 800628a:	3304      	adds	r3, #4
 800628c:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800628e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006292:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800629a:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800629e:	3301      	adds	r3, #1
 80062a0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80062a4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80062a8:	2b05      	cmp	r3, #5
 80062aa:	d9db      	bls.n	8006264 <VL53LX_get_histogram_bin_data+0x43c>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 80062ac:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80062b0:	4618      	mov	r0, r3
 80062b2:	f003 fb1c 	bl	80098ee <VL53LX_decode_timeout>
 80062b6:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80062b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80062c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062ca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80062d4:	4618      	mov	r0, r3
 80062d6:	f006 f87d 	bl	800c3d4 <VL53LX_calc_pll_period_us>
 80062da:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80062de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062e2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ec:	3301      	adds	r3, #1
 80062ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80062f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062f6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8006300:	4619      	mov	r1, r3
 8006302:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800630a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800630e:	f006 f878 	bl	800c402 <VL53LX_duration_maths>
 8006312:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006314:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006318:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006322:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006326:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8006332:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006336:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	f006 f987 	bl	800c64e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8006340:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006344:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f006 fd9e 	bl	800ce8a <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800634e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006352:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006356:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800635a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006366:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800636a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800636e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8006376:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800637a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	789b      	ldrb	r3, [r3, #2]
 8006382:	461a      	mov	r2, r3
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006390:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006394:	4413      	add	r3, r2
 8006396:	3302      	adds	r3, #2
 8006398:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a0:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80063a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80063a6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80063b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b4:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80063b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80063ba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80063c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c8:	2200      	movs	r2, #0
 80063ca:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80063cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80063d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2b11      	cmp	r3, #17
 80063e0:	bf8c      	ite	hi
 80063e2:	2201      	movhi	r2, #1
 80063e4:	2200      	movls	r2, #0
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	d11b      	bne.n	8006424 <VL53LX_get_histogram_bin_data+0x5fc>
 80063ec:	2201      	movs	r2, #1
 80063ee:	409a      	lsls	r2, r3
 80063f0:	4b10      	ldr	r3, [pc, #64]	; (8006434 <VL53LX_get_histogram_bin_data+0x60c>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d010      	beq.n	8006424 <VL53LX_get_histogram_bin_data+0x5fc>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006402:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006406:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	b2da      	uxtb	r2, r3
 8006416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800641a:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 800641c:	23fa      	movs	r3, #250	; 0xfa
 800641e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006422:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006424:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006428:	4618      	mov	r0, r3
 800642a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	0002200e 	.word	0x0002200e

08006438 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8006438:	b480      	push	{r7}
 800643a:	b08b      	sub	sp, #44	; 0x2c
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	78da      	ldrb	r2, [r3, #3]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2204      	movs	r2, #4
 800646c:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	8a1b      	ldrh	r3, [r3, #16]
 8006478:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	8a9b      	ldrh	r3, [r3, #20]
 800647e:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	8a5b      	ldrh	r3, [r3, #18]
 8006484:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8006486:	2300      	movs	r3, #0
 8006488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800648c:	e00b      	b.n	80064a6 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800648e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	4413      	add	r3, r2
 8006498:	2200      	movs	r2, #0
 800649a:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800649c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064a0:	3301      	adds	r3, #1
 80064a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d9ef      	bls.n	800648e <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064ba:	e0fe      	b.n	80066ba <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80064c2:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2200      	movs	r2, #0
 80064c8:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80064da:	2b09      	cmp	r3, #9
 80064dc:	d104      	bne.n	80064e8 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2213      	movs	r2, #19
 80064e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80064e6:	e007      	b.n	80064f8 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	2200      	movs	r2, #0
 80064fc:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	2200      	movs	r2, #0
 8006502:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	2200      	movs	r2, #0
 8006508:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	2200      	movs	r2, #0
 800650e:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	2200      	movs	r2, #0
 8006514:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2200      	movs	r2, #0
 800651a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 800651c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8006524:	2b01      	cmp	r3, #1
 8006526:	d05c      	beq.n	80065e2 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8006528:	e0a8      	b.n	800667c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	789b      	ldrb	r3, [r3, #2]
 800652e:	2b07      	cmp	r3, #7
 8006530:	d103      	bne.n	800653a <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	8a7a      	ldrh	r2, [r7, #18]
 8006536:	82da      	strh	r2, [r3, #22]
 8006538:	e00b      	b.n	8006552 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	789b      	ldrb	r3, [r3, #2]
 800653e:	2b08      	cmp	r3, #8
 8006540:	d103      	bne.n	800654a <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	8aba      	ldrh	r2, [r7, #20]
 8006546:	82da      	strh	r2, [r3, #22]
 8006548:	e003      	b.n	8006552 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	8afa      	ldrh	r2, [r7, #22]
 8006556:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	895b      	ldrh	r3, [r3, #10]
 800656c:	015b      	lsls	r3, r3, #5
 800656e:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d302      	bcc.n	800657e <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800657c:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	b29a      	uxth	r2, r3
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006594:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a6:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da01      	bge.n	80065b2 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80065ae:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80065b2:	12db      	asrs	r3, r3, #11
 80065b4:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	b21a      	sxth	r2, r3
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80065e0:	e04c      	b.n	800667c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065f8:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	8bdb      	ldrh	r3, [r3, #30]
 8006606:	015b      	lsls	r3, r3, #5
 8006608:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d302      	bcc.n	8006618 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8006612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006616:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	b29a      	uxth	r2, r3
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800662e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006640:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	da01      	bge.n	800664c <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8006648:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800664c:	12db      	asrs	r3, r3, #11
 800664e:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	b21a      	sxth	r2, r3
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800667a:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	334c      	adds	r3, #76	; 0x4c
 80066ae:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80066b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b4:	3301      	adds	r3, #1
 80066b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066be:	2b01      	cmp	r3, #1
 80066c0:	f67f aefc 	bls.w	80064bc <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b11      	cmp	r3, #17
 80066d4:	bf8c      	ite	hi
 80066d6:	2201      	movhi	r2, #1
 80066d8:	2200      	movls	r2, #0
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	2a00      	cmp	r2, #0
 80066de:	d116      	bne.n	800670e <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 80066e0:	2201      	movs	r2, #1
 80066e2:	409a      	lsls	r2, r3
 80066e4:	4b0d      	ldr	r3, [pc, #52]	; (800671c <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 800670c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800670e:	bf00      	nop
 8006710:	372c      	adds	r7, #44	; 0x2c
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	0002200e 	.word	0x0002200e

08006720 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	332c      	adds	r3, #44	; 0x2c
 8006736:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b05      	cmp	r3, #5
 800673e:	d109      	bne.n	8006754 <VL53LX_set_zone_dss_config+0x34>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
 8006752:	e003      	b.n	800675c <VL53LX_set_zone_dss_config+0x3c>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800675c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8006786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	460b      	mov	r3, r1
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d009      	beq.n	80067c6 <VL53LX_get_dmax_calibration_data+0x30>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d10f      	bne.n	80067d6 <VL53LX_get_dmax_calibration_data+0x40>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 80067ba:	220a      	movs	r2, #10
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f00f fd00 	bl	80161c4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80067c4:	e00a      	b.n	80067dc <VL53LX_get_dmax_calibration_data+0x46>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 80067ca:	220a      	movs	r2, #10
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f00f fcf8 	bl	80161c4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80067d4:	e002      	b.n	80067dc <VL53LX_get_dmax_calibration_data+0x46>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80067d6:	23fc      	movs	r3, #252	; 0xfc
 80067d8:	75fb      	strb	r3, [r7, #23]
	break;
 80067da:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80067dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b089      	sub	sp, #36	; 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	460b      	mov	r3, r1
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8006804:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800680c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800680e:	897b      	ldrh	r3, [r7, #10]
 8006810:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006814:	2bb9      	cmp	r3, #185	; 0xb9
 8006816:	f200 86c9 	bhi.w	80075ac <VL53LX_get_tuning_parm+0xdc4>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <VL53LX_get_tuning_parm+0x38>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006b09 	.word	0x08006b09
 8006824:	08006b19 	.word	0x08006b19
 8006828:	08006b29 	.word	0x08006b29
 800682c:	08006b39 	.word	0x08006b39
 8006830:	08006b47 	.word	0x08006b47
 8006834:	08006b55 	.word	0x08006b55
 8006838:	08006b63 	.word	0x08006b63
 800683c:	08006b71 	.word	0x08006b71
 8006840:	08006b7f 	.word	0x08006b7f
 8006844:	08006b8d 	.word	0x08006b8d
 8006848:	08006b9b 	.word	0x08006b9b
 800684c:	08006ba7 	.word	0x08006ba7
 8006850:	08006bb5 	.word	0x08006bb5
 8006854:	08006bc3 	.word	0x08006bc3
 8006858:	08006bcf 	.word	0x08006bcf
 800685c:	08006bdd 	.word	0x08006bdd
 8006860:	08006beb 	.word	0x08006beb
 8006864:	08006bfb 	.word	0x08006bfb
 8006868:	08006c0b 	.word	0x08006c0b
 800686c:	08006c19 	.word	0x08006c19
 8006870:	08006c29 	.word	0x08006c29
 8006874:	08006c37 	.word	0x08006c37
 8006878:	08006c47 	.word	0x08006c47
 800687c:	08006c57 	.word	0x08006c57
 8006880:	08006c67 	.word	0x08006c67
 8006884:	08006c77 	.word	0x08006c77
 8006888:	08006c87 	.word	0x08006c87
 800688c:	08006c97 	.word	0x08006c97
 8006890:	08006ca7 	.word	0x08006ca7
 8006894:	08006cb7 	.word	0x08006cb7
 8006898:	08006cc7 	.word	0x08006cc7
 800689c:	08006cd5 	.word	0x08006cd5
 80068a0:	08006ce5 	.word	0x08006ce5
 80068a4:	08006cf5 	.word	0x08006cf5
 80068a8:	08006d05 	.word	0x08006d05
 80068ac:	08006d15 	.word	0x08006d15
 80068b0:	08006d25 	.word	0x08006d25
 80068b4:	08006d35 	.word	0x08006d35
 80068b8:	08006d45 	.word	0x08006d45
 80068bc:	08006d55 	.word	0x08006d55
 80068c0:	08006d65 	.word	0x08006d65
 80068c4:	08006d75 	.word	0x08006d75
 80068c8:	08006d85 	.word	0x08006d85
 80068cc:	08006d95 	.word	0x08006d95
 80068d0:	08006da5 	.word	0x08006da5
 80068d4:	08006db5 	.word	0x08006db5
 80068d8:	08006dc3 	.word	0x08006dc3
 80068dc:	08006dd1 	.word	0x08006dd1
 80068e0:	08006ddf 	.word	0x08006ddf
 80068e4:	08006ded 	.word	0x08006ded
 80068e8:	08006dfb 	.word	0x08006dfb
 80068ec:	08006e09 	.word	0x08006e09
 80068f0:	08006e17 	.word	0x08006e17
 80068f4:	08006e25 	.word	0x08006e25
 80068f8:	08006e33 	.word	0x08006e33
 80068fc:	08006e41 	.word	0x08006e41
 8006900:	08006e4f 	.word	0x08006e4f
 8006904:	08006e5d 	.word	0x08006e5d
 8006908:	08006e6b 	.word	0x08006e6b
 800690c:	08006e79 	.word	0x08006e79
 8006910:	08006e87 	.word	0x08006e87
 8006914:	08006e95 	.word	0x08006e95
 8006918:	08006ea3 	.word	0x08006ea3
 800691c:	08006eb1 	.word	0x08006eb1
 8006920:	08006ebf 	.word	0x08006ebf
 8006924:	08006ecd 	.word	0x08006ecd
 8006928:	08006edb 	.word	0x08006edb
 800692c:	08006ee9 	.word	0x08006ee9
 8006930:	08006ef7 	.word	0x08006ef7
 8006934:	08006f05 	.word	0x08006f05
 8006938:	08006f13 	.word	0x08006f13
 800693c:	08006f21 	.word	0x08006f21
 8006940:	08006f2f 	.word	0x08006f2f
 8006944:	08006f3d 	.word	0x08006f3d
 8006948:	08006f49 	.word	0x08006f49
 800694c:	08006f57 	.word	0x08006f57
 8006950:	08006f65 	.word	0x08006f65
 8006954:	08006f71 	.word	0x08006f71
 8006958:	08006f7d 	.word	0x08006f7d
 800695c:	08006f89 	.word	0x08006f89
 8006960:	08006f95 	.word	0x08006f95
 8006964:	08006fa1 	.word	0x08006fa1
 8006968:	08006fad 	.word	0x08006fad
 800696c:	08006fbb 	.word	0x08006fbb
 8006970:	08006fc9 	.word	0x08006fc9
 8006974:	08006fd7 	.word	0x08006fd7
 8006978:	08006fe5 	.word	0x08006fe5
 800697c:	08006ff3 	.word	0x08006ff3
 8006980:	08007001 	.word	0x08007001
 8006984:	0800700f 	.word	0x0800700f
 8006988:	0800701d 	.word	0x0800701d
 800698c:	0800702b 	.word	0x0800702b
 8006990:	08007039 	.word	0x08007039
 8006994:	08007047 	.word	0x08007047
 8006998:	08007055 	.word	0x08007055
 800699c:	08007063 	.word	0x08007063
 80069a0:	08007071 	.word	0x08007071
 80069a4:	0800707f 	.word	0x0800707f
 80069a8:	0800708d 	.word	0x0800708d
 80069ac:	0800709b 	.word	0x0800709b
 80069b0:	080070a9 	.word	0x080070a9
 80069b4:	080070b7 	.word	0x080070b7
 80069b8:	080070c5 	.word	0x080070c5
 80069bc:	080070d3 	.word	0x080070d3
 80069c0:	080070e1 	.word	0x080070e1
 80069c4:	080070ef 	.word	0x080070ef
 80069c8:	080070fd 	.word	0x080070fd
 80069cc:	0800710b 	.word	0x0800710b
 80069d0:	08007119 	.word	0x08007119
 80069d4:	08007127 	.word	0x08007127
 80069d8:	08007135 	.word	0x08007135
 80069dc:	08007143 	.word	0x08007143
 80069e0:	08007151 	.word	0x08007151
 80069e4:	0800715f 	.word	0x0800715f
 80069e8:	0800716d 	.word	0x0800716d
 80069ec:	0800717b 	.word	0x0800717b
 80069f0:	08007189 	.word	0x08007189
 80069f4:	08007197 	.word	0x08007197
 80069f8:	080071a5 	.word	0x080071a5
 80069fc:	080071b7 	.word	0x080071b7
 8006a00:	080071c9 	.word	0x080071c9
 8006a04:	080071db 	.word	0x080071db
 8006a08:	080071ed 	.word	0x080071ed
 8006a0c:	080071ff 	.word	0x080071ff
 8006a10:	08007211 	.word	0x08007211
 8006a14:	08007223 	.word	0x08007223
 8006a18:	08007235 	.word	0x08007235
 8006a1c:	08007247 	.word	0x08007247
 8006a20:	08007259 	.word	0x08007259
 8006a24:	0800726b 	.word	0x0800726b
 8006a28:	0800727d 	.word	0x0800727d
 8006a2c:	0800728f 	.word	0x0800728f
 8006a30:	080072a1 	.word	0x080072a1
 8006a34:	080072b3 	.word	0x080072b3
 8006a38:	080072c5 	.word	0x080072c5
 8006a3c:	080072d7 	.word	0x080072d7
 8006a40:	080072e9 	.word	0x080072e9
 8006a44:	080072fb 	.word	0x080072fb
 8006a48:	08007309 	.word	0x08007309
 8006a4c:	08007317 	.word	0x08007317
 8006a50:	08007325 	.word	0x08007325
 8006a54:	08007333 	.word	0x08007333
 8006a58:	08007341 	.word	0x08007341
 8006a5c:	0800734f 	.word	0x0800734f
 8006a60:	0800735d 	.word	0x0800735d
 8006a64:	0800736f 	.word	0x0800736f
 8006a68:	0800737d 	.word	0x0800737d
 8006a6c:	0800738b 	.word	0x0800738b
 8006a70:	08007399 	.word	0x08007399
 8006a74:	080073a7 	.word	0x080073a7
 8006a78:	080073b5 	.word	0x080073b5
 8006a7c:	080073c3 	.word	0x080073c3
 8006a80:	080073d1 	.word	0x080073d1
 8006a84:	080073df 	.word	0x080073df
 8006a88:	080073ed 	.word	0x080073ed
 8006a8c:	080073fb 	.word	0x080073fb
 8006a90:	08007409 	.word	0x08007409
 8006a94:	08007417 	.word	0x08007417
 8006a98:	08007425 	.word	0x08007425
 8006a9c:	08007433 	.word	0x08007433
 8006aa0:	08007441 	.word	0x08007441
 8006aa4:	0800744f 	.word	0x0800744f
 8006aa8:	0800745d 	.word	0x0800745d
 8006aac:	0800746b 	.word	0x0800746b
 8006ab0:	08007479 	.word	0x08007479
 8006ab4:	08007487 	.word	0x08007487
 8006ab8:	08007495 	.word	0x08007495
 8006abc:	080074a3 	.word	0x080074a3
 8006ac0:	080074b1 	.word	0x080074b1
 8006ac4:	080074bf 	.word	0x080074bf
 8006ac8:	080074cd 	.word	0x080074cd
 8006acc:	080074db 	.word	0x080074db
 8006ad0:	080074e9 	.word	0x080074e9
 8006ad4:	080074f7 	.word	0x080074f7
 8006ad8:	08007505 	.word	0x08007505
 8006adc:	08007513 	.word	0x08007513
 8006ae0:	08007521 	.word	0x08007521
 8006ae4:	0800752f 	.word	0x0800752f
 8006ae8:	0800753d 	.word	0x0800753d
 8006aec:	0800754b 	.word	0x0800754b
 8006af0:	08007559 	.word	0x08007559
 8006af4:	08007567 	.word	0x08007567
 8006af8:	08007575 	.word	0x08007575
 8006afc:	08007583 	.word	0x08007583
 8006b00:	08007591 	.word	0x08007591
 8006b04:	0800759f 	.word	0x0800759f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8006b0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
	break;
 8006b14:	f000 bd51 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8006b1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
	break;
 8006b24:	f000 bd49 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8006b2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
	break;
 8006b34:	f000 bd41 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	break;
 8006b42:	f000 bd3a 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
	break;
 8006b50:	f000 bd33 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	789b      	ldrb	r3, [r3, #2]
 8006b58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
	break;
 8006b5e:	f000 bd2c 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	78db      	ldrb	r3, [r3, #3]
 8006b66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
	break;
 8006b6c:	f000 bd25 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
	break;
 8006b7a:	f000 bd1e 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	795b      	ldrb	r3, [r3, #5]
 8006b82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
	break;
 8006b88:	f000 bd17 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	799b      	ldrb	r3, [r3, #6]
 8006b90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	601a      	str	r2, [r3, #0]
	break;
 8006b96:	f000 bd10 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	break;
 8006ba2:	f000 bd0a 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	891b      	ldrh	r3, [r3, #8]
 8006baa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
	break;
 8006bb0:	f000 bd03 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	8a1b      	ldrh	r3, [r3, #16]
 8006bb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
	break;
 8006bbe:	f000 bcfc 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
	break;
 8006bca:	f000 bcf6 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	7e1b      	ldrb	r3, [r3, #24]
 8006bd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
	break;
 8006bd8:	f000 bcef 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	8b5b      	ldrh	r3, [r3, #26]
 8006be0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	break;
 8006be6:	f000 bce8 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8006bf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	break;
 8006bf6:	f000 bce0 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006c00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
	break;
 8006c06:	f000 bcd8 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
	break;
 8006c14:	f000 bcd1 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
	break;
 8006c24:	f000 bcc9 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
	break;
 8006c32:	f000 bcc2 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006c3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
	break;
 8006c42:	f000 bcba 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8006c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
	break;
 8006c52:	f000 bcb2 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8006c5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
	break;
 8006c62:	f000 bcaa 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8006c6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
	break;
 8006c72:	f000 bca2 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006c7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	601a      	str	r2, [r3, #0]
	break;
 8006c82:	f000 bc9a 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8006c8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
	break;
 8006c92:	f000 bc92 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f9b3 32de 	ldrsh.w	r3, [r3, #734]	; 0x2de
		*ptuning_parm_value = (int32_t)(
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	601a      	str	r2, [r3, #0]
	break;
 8006ca2:	f000 bc8a 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f9b3 32e0 	ldrsh.w	r3, [r3, #736]	; 0x2e0
		*ptuning_parm_value = (int32_t)(
 8006cac:	461a      	mov	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
	break;
 8006cb2:	f000 bc82 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f8b3 32e4 	ldrh.w	r3, [r3, #740]	; 0x2e4
 8006cbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
	break;
 8006cc2:	f000 bc7a 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	601a      	str	r2, [r3, #0]
	break;
 8006cd0:	f000 bc73 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f8b3 32e2 	ldrh.w	r3, [r3, #738]	; 0x2e2
		*ptuning_parm_value = (int32_t)(
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
	break;
 8006ce0:	f000 bc6b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]
	break;
 8006cf0:	f000 bc63 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f9b3 32d6 	ldrsh.w	r3, [r3, #726]	; 0x2d6
 8006cfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
	break;
 8006d00:	f000 bc5b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006d0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
	break;
 8006d10:	f000 bc53 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006d1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	601a      	str	r2, [r3, #0]
	break;
 8006d20:	f000 bc4b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8006d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
	break;
 8006d30:	f000 bc43 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8006d3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	601a      	str	r2, [r3, #0]
	break;
 8006d40:	f000 bc3b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8006d4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]
	break;
 8006d50:	f000 bc33 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8006d5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
	break;
 8006d60:	f000 bc2b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8006d6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	601a      	str	r2, [r3, #0]
	break;
 8006d70:	f000 bc23 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8006d7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
	break;
 8006d80:	f000 bc1b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
	break;
 8006d90:	f000 bc13 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8006d9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	601a      	str	r2, [r3, #0]
	break;
 8006da0:	f000 bc0b 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
	break;
 8006db0:	f000 bc03 	b.w	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8006dba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
	break;
 8006dc0:	e3fb      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8006dc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
	break;
 8006dce:	e3f4      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8006dd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
	break;
 8006ddc:	e3ed      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8006de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
	break;
 8006dea:	e3e6      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8006df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]
	break;
 8006df8:	e3df      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	break;
 8006e06:	e3d8      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8006e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]
	break;
 8006e14:	e3d1      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8006e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
	break;
 8006e22:	e3ca      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8006e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	601a      	str	r2, [r3, #0]
	break;
 8006e30:	e3c3      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8006e38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
	break;
 8006e3e:	e3bc      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006e46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
	break;
 8006e4c:	e3b5      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8006e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
	break;
 8006e5a:	e3ae      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
	break;
 8006e68:	e3a7      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8006e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
	break;
 8006e76:	e3a0      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006e7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
	break;
 8006e84:	e399      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8006e8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
	break;
 8006e92:	e392      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 8006e9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	601a      	str	r2, [r3, #0]
	break;
 8006ea0:	e38b      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 8006ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
	break;
 8006eae:	e384      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f8b3 329c 	ldrh.w	r3, [r3, #668]	; 0x29c
 8006eb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
	break;
 8006ebc:	e37d      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f8b3 329e 	ldrh.w	r3, [r3, #670]	; 0x29e
 8006ec4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	601a      	str	r2, [r3, #0]
	break;
 8006eca:	e376      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 8006ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
	break;
 8006ed8:	e36f      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8006ee0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	break;
 8006ee6:	e368      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8006eee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	break;
 8006ef4:	e361      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8006efc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
	break;
 8006f02:	e35a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8006f0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
	break;
 8006f10:	e353      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8006f18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
	break;
 8006f1e:	e34c      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8006f26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
	break;
 8006f2c:	e345      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 8006f34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]
	break;
 8006f3a:	e33e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	7c1b      	ldrb	r3, [r3, #16]
 8006f40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
	break;
 8006f46:	e338      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
	break;
 8006f54:	e331      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	601a      	str	r2, [r3, #0]
	break;
 8006f62:	e32a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
	break;
 8006f6e:	e324      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	601a      	str	r2, [r3, #0]
	break;
 8006f7a:	e31e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	8adb      	ldrh	r3, [r3, #22]
 8006f80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
	break;
 8006f86:	e318      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	8b1b      	ldrh	r3, [r3, #24]
 8006f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
	break;
 8006f92:	e312      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
	break;
 8006f9e:	e30c      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
	break;
 8006faa:	e306      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8006fb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
	break;
 8006fb8:	e2ff      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	601a      	str	r2, [r3, #0]
	break;
 8006fc6:	e2f8      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8006fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
	break;
 8006fd4:	e2f1      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006fdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
	break;
 8006fe2:	e2ea      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006fea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
	break;
 8006ff0:	e2e3      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006ff8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
	break;
 8006ffe:	e2dc      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 8007006:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
	break;
 800700c:	e2d5      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8007014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
	break;
 800701a:	e2ce      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]
	break;
 8007028:	e2c7      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8007030:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
	break;
 8007036:	e2c0      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 800703e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
	break;
 8007044:	e2b9      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800704c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	601a      	str	r2, [r3, #0]
	break;
 8007052:	e2b2      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 800705a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	601a      	str	r2, [r3, #0]
	break;
 8007060:	e2ab      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8007068:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
	break;
 800706e:	e2a4      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
 8007076:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
	break;
 800707c:	e29d      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007084:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
	break;
 800708a:	e296      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007092:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	601a      	str	r2, [r3, #0]
	break;
 8007098:	e28f      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80070a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]
	break;
 80070a6:	e288      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80070ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
	break;
 80070b4:	e281      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 80070bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
	break;
 80070c2:	e27a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80070ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]
	break;
 80070d0:	e273      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80070d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]
	break;
 80070de:	e26c      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80070e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
	break;
 80070ec:	e265      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80070f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
	break;
 80070fa:	e25e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]
	break;
 8007108:	e257      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
	break;
 8007116:	e250      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800711e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
	break;
 8007124:	e249      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800712c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]
	break;
 8007132:	e242      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800713a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	601a      	str	r2, [r3, #0]
	break;
 8007140:	e23b      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
	break;
 800714e:	e234      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007156:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	601a      	str	r2, [r3, #0]
	break;
 800715c:	e22d      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
	break;
 800716a:	e226      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
	break;
 8007178:	e21f      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007180:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
	break;
 8007186:	e218      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800718e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
	break;
 8007194:	e211      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800719c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
	break;
 80071a2:	e20a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071aa:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	; 0x3d0
 80071ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
	break;
 80071b4:	e201      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	break;
 80071c6:	e1f8      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ce:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80071d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
	break;
 80071d8:	e1ef      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	f893 33dc 	ldrb.w	r3, [r3, #988]	; 0x3dc
 80071e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
	break;
 80071ea:	e1e6      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	break;
 80071fc:	e1dd      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007204:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007208:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
	break;
 800720e:	e1d4      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800721a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	601a      	str	r2, [r3, #0]
	break;
 8007220:	e1cb      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800722c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
	break;
 8007232:	e1c2      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800723e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]
	break;
 8007244:	e1b9      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724c:	f9b3 33f6 	ldrsh.w	r3, [r3, #1014]	; 0x3f6
 8007250:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
	break;
 8007256:	e1b0      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	f9b3 33f8 	ldrsh.w	r3, [r3, #1016]	; 0x3f8
 8007262:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]
	break;
 8007268:	e1a7      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007270:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 8007274:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	601a      	str	r2, [r3, #0]
	break;
 800727a:	e19e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007282:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8007286:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]
	break;
 800728c:	e195      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007294:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
		*ptuning_parm_value = (int32_t)(
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	601a      	str	r2, [r3, #0]
	break;
 800729e:	e18c      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80072aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	601a      	str	r2, [r3, #0]
	break;
 80072b0:	e183      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
	break;
 80072c2:	e17a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
	break;
 80072d4:	e171      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072dc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80072e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
	break;
 80072e6:	e168      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ee:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80072f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	601a      	str	r2, [r3, #0]
	break;
 80072f8:	e15f      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007300:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	601a      	str	r2, [r3, #0]
	break;
 8007306:	e158      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800730e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
	break;
 8007314:	e151      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800731c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
	break;
 8007322:	e14a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800732a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
	break;
 8007330:	e143      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007338:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
	break;
 800733e:	e13c      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
	break;
 800734c:	e135      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	601a      	str	r2, [r3, #0]
	break;
 800735a:	e12e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007362:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007366:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
	break;
 800736c:	e125      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007374:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
	break;
 800737a:	e11e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007382:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]
	break;
 8007388:	e117      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007390:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
	break;
 8007396:	e110      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800739e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
	break;
 80073a4:	e109      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 80073ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]
	break;
 80073b2:	e102      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 80073ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	601a      	str	r2, [r3, #0]
	break;
 80073c0:	e0fb      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80073c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
	break;
 80073ce:	e0f4      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80073d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
	break;
 80073dc:	e0ed      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80073e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
	break;
 80073ea:	e0e6      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80073f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
	break;
 80073f8:	e0df      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8007400:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	break;
 8007406:	e0d8      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800740e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
	break;
 8007414:	e0d1      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800741c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	601a      	str	r2, [r3, #0]
	break;
 8007422:	e0ca      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800742a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]
	break;
 8007430:	e0c3      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8007438:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
	break;
 800743e:	e0bc      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8007446:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	601a      	str	r2, [r3, #0]
	break;
 800744c:	e0b5      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8007454:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
	break;
 800745a:	e0ae      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8007462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	break;
 8007468:	e0a7      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8007470:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	break;
 8007476:	e0a0      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800747e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
	break;
 8007484:	e099      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800748c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
	break;
 8007492:	e092      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800749a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
	break;
 80074a0:	e08b      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 80074a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
	break;
 80074ae:	e084      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 80074b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	break;
 80074bc:	e07d      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 80074c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
	break;
 80074ca:	e076      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 80074d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
	break;
 80074d8:	e06f      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80074e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
	break;
 80074e6:	e068      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 80074ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
	break;
 80074f4:	e061      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 80074fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
	break;
 8007502:	e05a      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800750a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
	break;
 8007510:	e053      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8007518:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
	break;
 800751e:	e04c      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8007526:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	601a      	str	r2, [r3, #0]
	break;
 800752c:	e045      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8007534:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
	break;
 800753a:	e03e      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8007542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
	break;
 8007548:	e037      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8007550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	break;
 8007556:	e030      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800755e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	601a      	str	r2, [r3, #0]
	break;
 8007564:	e029      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800756c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
	break;
 8007572:	e022      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800757a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
	break;
 8007580:	e01b      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8007588:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
	break;
 800758e:	e014      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8007596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
	break;
 800759c:	e00d      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 80075a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	601a      	str	r2, [r3, #0]
	break;
 80075aa:	e006      	b.n	80075ba <VL53LX_get_tuning_parm+0xdd2>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80075b2:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80075b4:	23fc      	movs	r3, #252	; 0xfc
 80075b6:	77fb      	strb	r3, [r7, #31]
	break;
 80075b8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80075ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3724      	adds	r7, #36	; 0x24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop

080075cc <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 80075e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760e:	2200      	movs	r2, #0
 8007610:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 8007614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	2200      	movs	r2, #0
 800763c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 8007640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007666:	2201      	movs	r2, #1
 8007668:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 800766c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007692:	2200      	movs	r2, #0
 8007694:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 8007698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 80076c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2208      	movs	r2, #8
 80076e4:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	220b      	movs	r2, #11
 80076ea:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076f2:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80076fa:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007702:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800770a:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800770c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007724:	2300      	movs	r3, #0
 8007726:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2212      	movs	r2, #18
 8007732:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	220f      	movs	r2, #15
 8007738:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8007746:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	220c      	movs	r2, #12
 800774c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800774e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	895b      	ldrh	r3, [r3, #10]
 8007770:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	895b      	ldrh	r3, [r3, #10]
 800778e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2200      	movs	r2, #0
 80077ac:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2200      	movs	r2, #0
 80077b2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2240      	movs	r2, #64	; 0x40
 80077b8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d108      	bne.n	80077de <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d103      	bne.n	80077de <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2200      	movs	r2, #0
 80077da:	741a      	strb	r2, [r3, #16]
 80077dc:	e002      	b.n	80077e4 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2201      	movs	r2, #1
 80077e2:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 80077e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d114      	bne.n	8007816 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d110      	bne.n	8007816 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	7d9b      	ldrb	r3, [r3, #22]
 8007808:	f001 ff2e 	bl	8009668 <VL53LX_calc_range_ignore_threshold>
 800780c:	4603      	mov	r3, r0
 800780e:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	831a      	strh	r2, [r3, #24]
 8007814:	e002      	b.n	800781c <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2200      	movs	r2, #0
 800781a:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8007822:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2232      	movs	r2, #50	; 0x32
 8007828:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007830:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	228c      	movs	r2, #140	; 0x8c
 8007836:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007838:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007856:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800785e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2207      	movs	r2, #7
 8007864:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f643 2298 	movw	r2, #15000	; 0x3a98
 800786c:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f242 7210 	movw	r2, #10000	; 0x2710
 8007874:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800787c:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2246      	movs	r2, #70	; 0x46
 8007882:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f44f 7220 	mov.w	r2, #640	; 0x280
 800788a:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	228c      	movs	r2, #140	; 0x8c
 8007890:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8007892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80078b4:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80078bc:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80078c4:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80078cc:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2208      	movs	r2, #8
 80078d2:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2228      	movs	r2, #40	; 0x28
 80078d8:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2209      	movs	r2, #9
 80078de:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80078e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007902:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f643 2298 	movw	r2, #15000	; 0x3a98
 800790a:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007912:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800791a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2210      	movs	r2, #16
 8007920:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2208      	movs	r2, #8
 8007926:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2204      	movs	r2, #4
 800794c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2201      	movs	r2, #1
 8007952:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2201      	movs	r2, #1
 8007958:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2202      	movs	r2, #2
 800795e:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2201      	movs	r2, #1
 8007964:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2250      	movs	r2, #80	; 0x50
 800796a:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2264      	movs	r2, #100	; 0x64
 8007970:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f241 023d 	movw	r2, #4157	; 0x103d
 8007978:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2210      	movs	r2, #16
 800797e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2232      	movs	r2, #50	; 0x32
 8007984:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2264      	movs	r2, #100	; 0x64
 800798a:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2201      	movs	r2, #1
 8007990:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	22b4      	movs	r2, #180	; 0xb4
 8007996:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2200      	movs	r2, #0
 800799c:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80079a4:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2208      	movs	r2, #8
 80079aa:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2288      	movs	r2, #136	; 0x88
 80079b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2208      	movs	r2, #8
 80079ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079cc:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2200      	movs	r2, #0
 80079d2:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	79fa      	ldrb	r2, [r7, #7]
 80079d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80079e2:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2232      	movs	r2, #50	; 0x32
 80079e8:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80079f0:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	228c      	movs	r2, #140	; 0x8c
 80079f6:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2250      	movs	r2, #80	; 0x50
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2232      	movs	r2, #50	; 0x32
 8007a04:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8007a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	221e      	movs	r2, #30
 8007a26:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	220e      	movs	r2, #14
 8007a2c:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f642 7294 	movw	r2, #12180	; 0x2f94
 8007a34:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	220e      	movs	r2, #14
 8007a3a:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	220a      	movs	r2, #10
 8007a40:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2206      	movs	r2, #6
 8007a46:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	220e      	movs	r2, #14
 8007a4c:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	220a      	movs	r2, #10
 8007a52:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2206      	movs	r2, #6
 8007a58:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2209      	movs	r2, #9
 8007a5e:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2205      	movs	r2, #5
 8007a64:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2203      	movs	r2, #3
 8007a6a:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2206      	movs	r2, #6
 8007a70:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2206      	movs	r2, #6
 8007a76:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2206      	movs	r2, #6
 8007a7c:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2221      	movs	r2, #33	; 0x21
 8007a88:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	223c      	movs	r2, #60	; 0x3c
 8007a9a:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	223c      	movs	r2, #60	; 0x3c
 8007aa0:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	223c      	movs	r2, #60	; 0x3c
 8007aa6:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2280      	movs	r2, #128	; 0x80
 8007aac:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2280      	movs	r2, #128	; 0x80
 8007ab8:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2208      	movs	r2, #8
 8007abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2210      	movs	r2, #16
 8007ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007b00:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f640 22be 	movw	r2, #2750	; 0xabe
 8007b0a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	22fa      	movs	r2, #250	; 0xfa
 8007b12:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b1c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007b26:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8007b30:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007b3a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8007b44:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f64f 7238 	movw	r2, #65336	; 0xff38
 8007b4e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	22c8      	movs	r2, #200	; 0xc8
 8007b56:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8007b60:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8007b72:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007b7c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007b86:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007b90:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007b9a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f641 0238 	movw	r2, #6200	; 0x1838
 8007ba4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	22fa      	movs	r2, #250	; 0xfa
 8007bbc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007bc6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8007bd0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f241 1294 	movw	r2, #4500	; 0x1194
 8007bda:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f64f 7238 	movw	r2, #65336	; 0xff38
 8007be4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	22c8      	movs	r2, #200	; 0xc8
 8007bec:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f640 720a 	movw	r2, #3850	; 0xf0a
 8007c16:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007c20:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f640 720a 	movw	r2, #3850	; 0xf0a
 8007c2a:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007c6c:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007c74:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007c7c:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007c84:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c8c:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007c94:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f242 3228 	movw	r2, #9000	; 0x2328
 8007c9c:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f241 7270 	movw	r2, #6000	; 0x1770
 8007ca4:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007cac:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f242 3228 	movw	r2, #9000	; 0x2328
 8007cb4:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f241 7270 	movw	r2, #6000	; 0x1770
 8007cbc:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007ccc:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007cd4:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007cdc:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007ce4:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f24f 6218 	movw	r2, #63000	; 0xf618
 8007cec:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007cf4:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007cfc:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007d04:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007d12:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007d1a:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2206      	movs	r2, #6
 8007d3a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007d60:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2238      	movs	r2, #56	; 0x38
 8007d66:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2270      	movs	r2, #112	; 0x70
 8007d72:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2210      	movs	r2, #16
 8007d78:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2264      	movs	r2, #100	; 0x64
 8007d7e:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d86:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	220f      	movs	r2, #15
 8007d8c:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2234      	movs	r2, #52	; 0x34
 8007d92:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	22c8      	movs	r2, #200	; 0xc8
 8007d98:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007da0:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007da8:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b087      	sub	sp, #28
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007dd2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2211      	movs	r2, #17
 8007e14:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2202      	movs	r2, #2
 8007e26:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2201      	movs	r2, #1
 8007e56:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	220b      	movs	r2, #11
 8007ea8:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	220d      	movs	r2, #13
 8007ebc:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007ee4:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2238      	movs	r2, #56	; 0x38
 8007ef0:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	221a      	movs	r2, #26
 8007f08:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2220      	movs	r2, #32
 8007f14:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	22cc      	movs	r2, #204	; 0xcc
 8007f20:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	220b      	movs	r2, #11
 8007f26:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	22f5      	movs	r2, #245	; 0xf5
 8007f32:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2209      	movs	r2, #9
 8007f38:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2278      	movs	r2, #120	; 0x78
 8007f54:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2207      	movs	r2, #7
 8007f66:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2221      	movs	r2, #33	; 0x21
 8007f6c:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2243      	movs	r2, #67	; 0x43
 8007f72:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2210      	movs	r2, #16
 8007f78:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2232      	movs	r2, #50	; 0x32
 8007f7e:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2254      	movs	r2, #84	; 0x54
 8007f84:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2207      	movs	r2, #7
 8007f8a:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2221      	movs	r2, #33	; 0x21
 8007f90:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2243      	movs	r2, #67	; 0x43
 8007f96:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2210      	movs	r2, #16
 8007f9c:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2243      	movs	r2, #67	; 0x43
 8007fa8:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2205      	movs	r2, #5
 8007fae:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2207      	movs	r2, #7
 8007fba:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2221      	movs	r2, #33	; 0x21
 8007fc0:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2243      	movs	r2, #67	; 0x43
 8007fc6:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2210      	movs	r2, #16
 8007fcc:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2232      	movs	r2, #50	; 0x32
 8007fd2:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2254      	movs	r2, #84	; 0x54
 8007fd8:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fe0:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fe8:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	2210      	movs	r2, #16
 8007ff4:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	220f      	movs	r2, #15
 8008000:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	220f      	movs	r2, #15
 8008006:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	2208      	movs	r2, #8
 800800c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2208      	movs	r2, #8
 8008012:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	2201      	movs	r2, #1
 8008018:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	2200      	movs	r2, #0
 800801e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	2200      	movs	r2, #0
 8008024:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	2200      	movs	r2, #0
 800802a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	220b      	movs	r2, #11
 800803a:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	2209      	movs	r2, #9
 8008040:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2201      	movs	r2, #1
 8008056:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	22c7      	movs	r2, #199	; 0xc7
 8008070:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	22db      	movs	r2, #219	; 0xdb
 800807c:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	2202      	movs	r2, #2
 8008082:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	2200      	movs	r2, #0
 8008088:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	2201      	movs	r2, #1
 800808e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	2201      	movs	r2, #1
 8008094:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	2221      	movs	r2, #33	; 0x21
 800809a:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800809c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b090      	sub	sp, #64	; 0x40
 80080b0:	af0a      	add	r7, sp, #40	; 0x28
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	9303      	str	r3, [sp, #12]
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	9302      	str	r3, [sp, #8]
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	68b8      	ldr	r0, [r7, #8]
 80080d6:	f7ff fe70 	bl	8007dba <VL53LX_preset_mode_standard_ranging>
 80080da:	4603      	mov	r3, r0
 80080dc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80080de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d171      	bne.n	80081ca <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80080ec:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	9308      	str	r3, [sp, #32]
 80080f2:	2305      	movs	r3, #5
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	2304      	movs	r3, #4
 80080f8:	9306      	str	r3, [sp, #24]
 80080fa:	2303      	movs	r3, #3
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	2302      	movs	r3, #2
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	2301      	movs	r3, #1
 8008104:	9303      	str	r3, [sp, #12]
 8008106:	2300      	movs	r3, #0
 8008108:	9302      	str	r3, [sp, #8]
 800810a:	2304      	movs	r3, #4
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	2303      	movs	r3, #3
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2302      	movs	r3, #2
 8008114:	2201      	movs	r2, #1
 8008116:	2100      	movs	r1, #0
 8008118:	2007      	movs	r0, #7
 800811a:	f000 ff72 	bl	8009002 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	3302      	adds	r3, #2
 8008122:	9308      	str	r3, [sp, #32]
 8008124:	2305      	movs	r3, #5
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	2304      	movs	r3, #4
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	2303      	movs	r3, #3
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	2302      	movs	r3, #2
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	2301      	movs	r3, #1
 8008136:	9303      	str	r3, [sp, #12]
 8008138:	2300      	movs	r3, #0
 800813a:	9302      	str	r3, [sp, #8]
 800813c:	2304      	movs	r3, #4
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	2303      	movs	r3, #3
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2302      	movs	r3, #2
 8008146:	2201      	movs	r2, #1
 8008148:	2100      	movs	r1, #0
 800814a:	2007      	movs	r0, #7
 800814c:	f000 ffe9 	bl	8009122 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	2209      	movs	r2, #9
 8008154:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	220b      	movs	r2, #11
 800815a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	2209      	movs	r2, #9
 8008160:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	220b      	movs	r2, #11
 8008166:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	2220      	movs	r2, #32
 8008172:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	2200      	movs	r2, #0
 8008178:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	221a      	movs	r2, #26
 800817e:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	2200      	movs	r2, #0
 8008184:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	2228      	movs	r2, #40	; 0x28
 800818a:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	2200      	movs	r2, #0
 8008190:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2221      	movs	r2, #33	; 0x21
 8008196:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	22f5      	movs	r2, #245	; 0xf5
 800819c:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2208      	movs	r2, #8
 80081a2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2288      	movs	r2, #136	; 0x88
 80081aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9e6 	bl	800858a <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	229b      	movs	r2, #155	; 0x9b
 80081c2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	2226      	movs	r2, #38	; 0x26
 80081c8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80081ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b090      	sub	sp, #64	; 0x40
 80081da:	af0a      	add	r7, sp, #40	; 0x28
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	9302      	str	r3, [sp, #8]
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff ff52 	bl	80080ac <VL53LX_preset_mode_histogram_ranging>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800820c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d178      	bne.n	8008306 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9308      	str	r3, [sp, #32]
 8008218:	2305      	movs	r3, #5
 800821a:	9307      	str	r3, [sp, #28]
 800821c:	2304      	movs	r3, #4
 800821e:	9306      	str	r3, [sp, #24]
 8008220:	2303      	movs	r3, #3
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	2302      	movs	r3, #2
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	2301      	movs	r3, #1
 800822a:	9303      	str	r3, [sp, #12]
 800822c:	2300      	movs	r3, #0
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	2304      	movs	r3, #4
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	2303      	movs	r3, #3
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2302      	movs	r3, #2
 800823a:	2201      	movs	r2, #1
 800823c:	2100      	movs	r1, #0
 800823e:	2007      	movs	r0, #7
 8008240:	f000 fedf 	bl	8009002 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	3302      	adds	r3, #2
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	2305      	movs	r3, #5
 800824c:	9307      	str	r3, [sp, #28]
 800824e:	2304      	movs	r3, #4
 8008250:	9306      	str	r3, [sp, #24]
 8008252:	2303      	movs	r3, #3
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	2302      	movs	r3, #2
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	2301      	movs	r3, #1
 800825c:	9303      	str	r3, [sp, #12]
 800825e:	2300      	movs	r3, #0
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	2304      	movs	r3, #4
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	2303      	movs	r3, #3
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	2302      	movs	r3, #2
 800826c:	2201      	movs	r2, #1
 800826e:	2100      	movs	r1, #0
 8008270:	2007      	movs	r0, #7
 8008272:	f000 ff56 	bl	8009122 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f982 	bl	800858a <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	2209      	movs	r2, #9
 800828a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	220b      	movs	r2, #11
 8008290:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	2200      	movs	r2, #0
 8008296:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	2221      	movs	r2, #33	; 0x21
 800829c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800829e:	6a3b      	ldr	r3, [r7, #32]
 80082a0:	2200      	movs	r2, #0
 80082a2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	221b      	movs	r2, #27
 80082a8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	2200      	movs	r2, #0
 80082ae:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	2229      	movs	r2, #41	; 0x29
 80082b4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	2200      	movs	r2, #0
 80082ba:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	2222      	movs	r2, #34	; 0x22
 80082c0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2209      	movs	r2, #9
 80082c6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	22f5      	movs	r2, #245	; 0xf5
 80082cc:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	2209      	movs	r2, #9
 80082d2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	220b      	movs	r2, #11
 80082d8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2208      	movs	r2, #8
 80082ee:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2288      	movs	r2, #136	; 0x88
 80082f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	229b      	movs	r2, #155	; 0x9b
 80082fe:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	2226      	movs	r2, #38	; 0x26
 8008304:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b090      	sub	sp, #64	; 0x40
 8008316:	af0a      	add	r7, sp, #40	; 0x28
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	607a      	str	r2, [r7, #4]
 800831e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008320:	2300      	movs	r3, #0
 8008322:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	9304      	str	r3, [sp, #16]
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff feb4 	bl	80080ac <VL53LX_preset_mode_histogram_ranging>
 8008344:	4603      	mov	r3, r0
 8008346:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008348:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d178      	bne.n	8008442 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	2303      	movs	r3, #3
 8008356:	9307      	str	r3, [sp, #28]
 8008358:	2302      	movs	r3, #2
 800835a:	9306      	str	r3, [sp, #24]
 800835c:	2301      	movs	r3, #1
 800835e:	9305      	str	r3, [sp, #20]
 8008360:	2302      	movs	r3, #2
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	2301      	movs	r3, #1
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	2300      	movs	r3, #0
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	2302      	movs	r3, #2
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	2302      	movs	r3, #2
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2301      	movs	r3, #1
 8008376:	2201      	movs	r2, #1
 8008378:	2100      	movs	r1, #0
 800837a:	2007      	movs	r0, #7
 800837c:	f000 fe41 	bl	8009002 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	3302      	adds	r3, #2
 8008384:	9308      	str	r3, [sp, #32]
 8008386:	2303      	movs	r3, #3
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	2302      	movs	r3, #2
 800838c:	9306      	str	r3, [sp, #24]
 800838e:	2301      	movs	r3, #1
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	2302      	movs	r3, #2
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	2301      	movs	r3, #1
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	2300      	movs	r3, #0
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	2302      	movs	r3, #2
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	2302      	movs	r3, #2
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	2301      	movs	r3, #1
 80083a8:	2201      	movs	r2, #1
 80083aa:	2100      	movs	r1, #0
 80083ac:	2007      	movs	r0, #7
 80083ae:	f000 feb8 	bl	8009122 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f8e4 	bl	800858a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	2205      	movs	r2, #5
 80083c6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	2207      	movs	r2, #7
 80083cc:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	2236      	movs	r2, #54	; 0x36
 80083d8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	2200      	movs	r2, #0
 80083de:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	2228      	movs	r2, #40	; 0x28
 80083e4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	2200      	movs	r2, #0
 80083ea:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	2244      	movs	r2, #68	; 0x44
 80083f0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	2200      	movs	r2, #0
 80083f6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	2233      	movs	r2, #51	; 0x33
 80083fc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2205      	movs	r2, #5
 8008402:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	22f5      	movs	r2, #245	; 0xf5
 8008408:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	2205      	movs	r2, #5
 800840e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	2207      	movs	r2, #7
 8008414:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2208      	movs	r2, #8
 800842a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2248      	movs	r2, #72	; 0x48
 8008432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	229b      	movs	r2, #155	; 0x9b
 800843a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	2226      	movs	r2, #38	; 0x26
 8008440:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b090      	sub	sp, #64	; 0x40
 8008452:	af0a      	add	r7, sp, #40	; 0x28
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	607a      	str	r2, [r7, #4]
 800845a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800845c:	2300      	movs	r3, #0
 800845e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7ff fe16 	bl	80080ac <VL53LX_preset_mode_histogram_ranging>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d178      	bne.n	800857e <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	9308      	str	r3, [sp, #32]
 8008490:	2302      	movs	r3, #2
 8008492:	9307      	str	r3, [sp, #28]
 8008494:	2302      	movs	r3, #2
 8008496:	9306      	str	r3, [sp, #24]
 8008498:	2301      	movs	r3, #1
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	2301      	movs	r3, #1
 800849e:	9304      	str	r3, [sp, #16]
 80084a0:	2301      	movs	r3, #1
 80084a2:	9303      	str	r3, [sp, #12]
 80084a4:	2300      	movs	r3, #0
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	2301      	movs	r3, #1
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	2301      	movs	r3, #1
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	2301      	movs	r3, #1
 80084b2:	2200      	movs	r2, #0
 80084b4:	2107      	movs	r1, #7
 80084b6:	2007      	movs	r0, #7
 80084b8:	f000 fda3 	bl	8009002 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	3302      	adds	r3, #2
 80084c0:	9308      	str	r3, [sp, #32]
 80084c2:	2302      	movs	r3, #2
 80084c4:	9307      	str	r3, [sp, #28]
 80084c6:	2302      	movs	r3, #2
 80084c8:	9306      	str	r3, [sp, #24]
 80084ca:	2301      	movs	r3, #1
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	2301      	movs	r3, #1
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	2301      	movs	r3, #1
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9302      	str	r3, [sp, #8]
 80084da:	2301      	movs	r3, #1
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2301      	movs	r3, #1
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2301      	movs	r3, #1
 80084e4:	2200      	movs	r2, #0
 80084e6:	2107      	movs	r1, #7
 80084e8:	2007      	movs	r0, #7
 80084ea:	f000 fe1a 	bl	8009122 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	68b9      	ldr	r1, [r7, #8]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f846 	bl	800858a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	2203      	movs	r2, #3
 8008502:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	2205      	movs	r2, #5
 8008508:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	2252      	movs	r2, #82	; 0x52
 8008514:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	2200      	movs	r2, #0
 800851a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	2237      	movs	r2, #55	; 0x37
 8008520:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	2200      	movs	r2, #0
 8008526:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	2266      	movs	r2, #102	; 0x66
 800852c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	2200      	movs	r2, #0
 8008532:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	2244      	movs	r2, #68	; 0x44
 8008538:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2203      	movs	r2, #3
 800853e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	22f5      	movs	r2, #245	; 0xf5
 8008544:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	2203      	movs	r2, #3
 800854a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	2205      	movs	r2, #5
 8008550:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2208      	movs	r2, #8
 8008566:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2228      	movs	r2, #40	; 0x28
 800856e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	22bb      	movs	r2, #187	; 0xbb
 8008576:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	2226      	movs	r2, #38	; 0x26
 800857c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800857e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	79db      	ldrb	r3, [r3, #7]
 80085cc:	b29b      	uxth	r3, r3
				<< 8)
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	7a1b      	ldrb	r3, [r3, #8]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	4413      	add	r3, r2
 80085da:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	b29b      	uxth	r3, r3
				<< 8)
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	789b      	ldrb	r3, [r3, #2]
 800861e:	b29b      	uxth	r3, r3
 8008620:	4413      	add	r3, r2
 8008622:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	78db      	ldrb	r3, [r3, #3]
 800862c:	b29b      	uxth	r3, r3
				<< 8)
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	791b      	ldrb	r3, [r3, #4]
 8008636:	b29b      	uxth	r3, r3
 8008638:	4413      	add	r3, r2
 800863a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8008668:	bf00      	nop
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	79db      	ldrb	r3, [r3, #7]
 80086b4:	b29b      	uxth	r3, r3
				<< 8)
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	7a1b      	ldrb	r3, [r3, #8]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4413      	add	r3, r2
 80086c2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	b29b      	uxth	r3, r3
				<< 8)
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	789b      	ldrb	r3, [r3, #2]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4413      	add	r3, r2
 8008702:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	78db      	ldrb	r3, [r3, #3]
 800870c:	b29b      	uxth	r3, r3
				<< 8)
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	791b      	ldrb	r3, [r3, #4]
 8008716:	b29b      	uxth	r3, r3
 8008718:	4413      	add	r3, r2
 800871a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8008730:	bf00      	nop
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	332c      	adds	r3, #44	; 0x2c
 8008786:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2202      	movs	r2, #2
 8008798:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2200      	movs	r2, #0
 800879e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2200      	movs	r2, #0
 80087a4:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	78fa      	ldrb	r2, [r7, #3]
 80087aa:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2200      	movs	r2, #0
 80087b0:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2202      	movs	r2, #2
 80087b6:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2200      	movs	r2, #0
 80087bc:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2200      	movs	r2, #0
 80087c2:	735a      	strb	r2, [r3, #13]

}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80087d8:	2300      	movs	r3, #0
 80087da:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	332c      	adds	r3, #44	; 0x2c
 80087e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 80087ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d115      	bne.n	8008820 <VL53LX_update_ll_driver_rd_state+0x50>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2203      	movs	r2, #3
 80087f8:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2202      	movs	r2, #2
 8008810:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	735a      	strb	r2, [r3, #13]
 800881e:	e0bd      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	7a1b      	ldrb	r3, [r3, #8]
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	d103      	bne.n	8008830 <VL53LX_update_ll_driver_rd_state+0x60>
			pstate->rd_stream_count = 0x80;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2280      	movs	r2, #128	; 0x80
 800882c:	721a      	strb	r2, [r3, #8]
 800882e:	e005      	b.n	800883c <VL53LX_update_ll_driver_rd_state+0x6c>
		else
			pstate->rd_stream_count++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	7a1b      	ldrb	r3, [r3, #8]
 8008834:	3301      	adds	r3, #1
 8008836:	b2da      	uxtb	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	7a19      	ldrb	r1, [r3, #8]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f103 0209 	add.w	r2, r3, #9
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	330a      	adds	r3, #10
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f002 fd4b 	bl	800b2e6 <VL53LX_update_internal_stream_counters>
 8008850:	4603      	mov	r3, r0
 8008852:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	7adb      	ldrb	r3, [r3, #11]
 8008858:	f083 0302 	eor.w	r3, r3, #2
 800885c:	b2da      	uxtb	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	79db      	ldrb	r3, [r3, #7]
 8008866:	3b03      	subs	r3, #3
 8008868:	2b05      	cmp	r3, #5
 800886a:	f200 8081 	bhi.w	8008970 <VL53LX_update_ll_driver_rd_state+0x1a0>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <VL53LX_update_ll_driver_rd_state+0xa4>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	0800888d 	.word	0x0800888d
 8008878:	08008971 	.word	0x08008971
 800887c:	08008971 	.word	0x08008971
 8008880:	080088df 	.word	0x080088df
 8008884:	08008915 	.word	0x08008915
 8008888:	0800893f 	.word	0x0800893f

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f893 3396 	ldrb.w	r3, [r3, #918]	; 0x396
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd03      	ble.n	80088a2 <VL53LX_update_ll_driver_rd_state+0xd2>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2206      	movs	r2, #6
 800889e:	71da      	strb	r2, [r3, #7]
 80088a0:	e00d      	b.n	80088be <VL53LX_update_ll_driver_rd_state+0xee>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d303      	bcc.n	80088b8 <VL53LX_update_ll_driver_rd_state+0xe8>
					pstate->rd_device_state =
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2208      	movs	r2, #8
 80088b4:	71da      	strb	r2, [r3, #7]
 80088b6:	e002      	b.n	80088be <VL53LX_update_ll_driver_rd_state+0xee>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2207      	movs	r2, #7
 80088bc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	735a      	strb	r2, [r3, #13]

			break;
 80088dc:	e05e      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8008900:	429a      	cmp	r2, r3
 8008902:	d303      	bcc.n	800890c <VL53LX_update_ll_driver_rd_state+0x13c>
				pstate->rd_device_state =
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2208      	movs	r2, #8
 8008908:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800890a:	e047      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2207      	movs	r2, #7
 8008910:	71da      	strb	r2, [r3, #7]
			break;
 8008912:	e043      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	7b5b      	ldrb	r3, [r3, #13]
 8008918:	3301      	adds	r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800892a:	429a      	cmp	r2, r3
 800892c:	d303      	bcc.n	8008936 <VL53LX_update_ll_driver_rd_state+0x166>
				pstate->rd_device_state =
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2208      	movs	r2, #8
 8008932:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8008934:	e032      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2207      	movs	r2, #7
 800893a:	71da      	strb	r2, [r3, #7]
			break;
 800893c:	e02e      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	7b1b      	ldrb	r3, [r3, #12]
 8008948:	f083 0301 	eor.w	r3, r3, #1
 800894c:	b2da      	uxtb	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800895c:	429a      	cmp	r2, r3
 800895e:	d303      	bcc.n	8008968 <VL53LX_update_ll_driver_rd_state+0x198>
				pstate->rd_device_state =
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2208      	movs	r2, #8
 8008964:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8008966:	e019      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2207      	movs	r2, #7
 800896c:	71da      	strb	r2, [r3, #7]
			break;
 800896e:	e015      	b.n	800899c <VL53LX_update_ll_driver_rd_state+0x1cc>

		default:
			pstate->rd_device_state  =
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2203      	movs	r2, #3
 8008974:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2202      	movs	r2, #2
 800898c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	735a      	strb	r2, [r3, #13]
			break;
 800899a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800899c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b08d      	sub	sp, #52	; 0x34
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089c0:	3320      	adds	r3, #32
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	332c      	adds	r3, #44	; 0x2c
 80089c8:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	f203 339e 	addw	r3, r3, #926	; 0x39e
 80089d0:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80089d8:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80089e0:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8008a00:	f003 031f 	and.w	r3, r3, #31
 8008a04:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	78db      	ldrb	r3, [r3, #3]
 8008a0a:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8008a12:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bf14      	ite	ne
 8008a1a:	2301      	movne	r3, #1
 8008a1c:	2300      	moveq	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
	histogram_mode =
 8008a20:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8008a26:	111b      	asrs	r3, r3, #4
 8008a28:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8008a32:	7c7b      	ldrb	r3, [r7, #17]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8008a3e:	111b      	asrs	r3, r3, #4
 8008a40:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d04e      	beq.n	8008af6 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	79db      	ldrb	r3, [r3, #7]
 8008a5c:	2b06      	cmp	r3, #6
 8008a5e:	d109      	bne.n	8008a74 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8008a60:	7c7b      	ldrb	r3, [r7, #17]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d14a      	bne.n	8008afc <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8008a66:	7cfb      	ldrb	r3, [r7, #19]
 8008a68:	2b12      	cmp	r3, #18
 8008a6a:	d047      	beq.n	8008afc <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8008a6c:	23ef      	movs	r3, #239	; 0xef
 8008a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008a72:	e043      	b.n	8008afc <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	7a1b      	ldrb	r3, [r3, #8]
 8008a78:	7cba      	ldrb	r2, [r7, #18]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d002      	beq.n	8008a84 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8008a7e:	23ee      	movs	r3, #238	; 0xee
 8008a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	7adb      	ldrb	r3, [r3, #11]
 8008a88:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d002      	beq.n	8008a96 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8008a90:	23ed      	movs	r3, #237	; 0xed
 8008a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	7b5b      	ldrb	r3, [r3, #13]
 8008a9a:	4619      	mov	r1, r3
		expected_stream_count =
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	7b5b      	ldrb	r3, [r3, #13]
 8008ab2:	4619      	mov	r1, r3
		expected_gph_id =
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8008ac6:	7c3a      	ldrb	r2, [r7, #16]
 8008ac8:	7cbb      	ldrb	r3, [r7, #18]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d00a      	beq.n	8008ae4 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <VL53LX_check_ll_driver_rd_state+0x136>
 8008ad8:	7cbb      	ldrb	r3, [r7, #18]
 8008ada:	2bff      	cmp	r3, #255	; 0xff
 8008adc:	d002      	beq.n	8008ae4 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8008ade:	23ec      	movs	r3, #236	; 0xec
 8008ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d005      	beq.n	8008afa <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8008aee:	23eb      	movs	r3, #235	; 0xeb
 8008af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008af4:	e002      	b.n	8008afc <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8008af6:	bf00      	nop
 8008af8:	e000      	b.n	8008afc <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8008afa:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8008afc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3734      	adds	r7, #52	; 0x34
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008b22:	3320      	adds	r3, #32
 8008b24:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	332c      	adds	r3, #44	; 0x2c
 8008b2a:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008b32:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8008b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d11b      	bne.n	8008b7a <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2203      	movs	r2, #3
 8008b46:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2200      	movs	r2, #0
 8008b52:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2200      	movs	r2, #0
 8008b58:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2200      	movs	r2, #0
 8008b64:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	773b      	strb	r3, [r7, #28]
 8008b78:	e0b1      	b.n	8008cde <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	791b      	ldrb	r3, [r3, #4]
 8008b7e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	799b      	ldrb	r3, [r3, #6]
 8008b84:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2bff      	cmp	r3, #255	; 0xff
 8008b92:	d103      	bne.n	8008b9c <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2280      	movs	r2, #128	; 0x80
 8008b98:	705a      	strb	r2, [r3, #1]
 8008b9a:	e005      	b.n	8008ba8 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	7859      	ldrb	r1, [r3, #1]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	1c9a      	adds	r2, r3, #2
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3303      	adds	r3, #3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f002 fb96 	bl	800b2e6 <VL53LX_update_internal_stream_counters>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	791b      	ldrb	r3, [r3, #4]
 8008bc2:	f083 0302 	eor.w	r3, r3, #2
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	d053      	beq.n	8008c7c <VL53LX_update_ll_driver_cfg_state+0x170>
 8008bd4:	2b05      	cmp	r3, #5
 8008bd6:	dc69      	bgt.n	8008cac <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d002      	beq.n	8008be2 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d02d      	beq.n	8008c3c <VL53LX_update_ll_driver_cfg_state+0x130>
 8008be0:	e064      	b.n	8008cac <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2201      	movs	r2, #1
 8008be6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d909      	bls.n	8008c0a <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	795b      	ldrb	r3, [r3, #5]
 8008c00:	f083 0301 	eor.w	r3, r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f893 3357 	ldrb.w	r3, [r3, #855]	; 0x357
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2200      	movs	r2, #0
 8008c24:	70da      	strb	r2, [r3, #3]
 8008c26:	e005      	b.n	8008c34 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2201      	movs	r2, #1
 8008c32:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2204      	movs	r2, #4
 8008c38:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8008c3a:	e050      	b.n	8008cde <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	799b      	ldrb	r3, [r3, #6]
 8008c40:	3301      	adds	r3, #1
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d940      	bls.n	8008cd8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	795b      	ldrb	r3, [r3, #5]
 8008c60:	f083 0301 	eor.w	r3, r3, #1
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d031      	beq.n	8008cd8 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2205      	movs	r2, #5
 8008c78:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8008c7a:	e02d      	b.n	8008cd8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	799b      	ldrb	r3, [r3, #6]
 8008c80:	3301      	adds	r3, #1
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d922      	bls.n	8008cdc <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	795b      	ldrb	r3, [r3, #5]
 8008ca0:	f083 0301 	eor.w	r3, r3, #1
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	715a      	strb	r2, [r3, #5]
			}
			break;
 8008caa:	e017      	b.n	8008cdc <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	719a      	strb	r2, [r3, #6]
			break;
 8008cd6:	e002      	b.n	8008cde <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008cd8:	bf00      	nop
 8008cda:	e000      	b.n	8008cde <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008cdc:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11d      	bne.n	8008d24 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8008ce8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8008cea:	7f3b      	ldrb	r3, [r7, #28]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b2d8      	uxtb	r0, r3
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	4602      	mov	r2, r0
 8008d00:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	7b5b      	ldrb	r3, [r3, #13]
 8008d06:	4619      	mov	r1, r3
 8008d08:	7f7b      	ldrb	r3, [r7, #29]
 8008d0a:	f083 0302 	eor.w	r3, r3, #2
 8008d0e:	b2d8      	uxtb	r0, r3
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	460b      	mov	r3, r1
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3303      	adds	r3, #3
 8008d1e:	4602      	mov	r2, r0
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	e013      	b.n	8008d4c <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8008d24:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	440b      	add	r3, r1
 8008d32:	3302      	adds	r3, #2
 8008d34:	7f3a      	ldrb	r2, [r7, #28]
 8008d36:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8008d38:	7fba      	ldrb	r2, [r7, #30]
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	440b      	add	r3, r1
 8008d46:	3303      	adds	r3, #3
 8008d48:	7f7a      	ldrb	r2, [r7, #29]
 8008d4a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8008d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7c1a      	ldrb	r2, [r3, #16]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	7c52      	ldrb	r2, [r2, #17]
 8008d72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	3302      	adds	r3, #2
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7c92      	ldrb	r2, [r2, #18]
 8008d7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	3303      	adds	r3, #3
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	7cd2      	ldrb	r2, [r2, #19]
 8008d86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7d12      	ldrb	r2, [r2, #20]
 8008d90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	3305      	adds	r3, #5
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	7d52      	ldrb	r2, [r2, #21]
 8008d9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	3306      	adds	r3, #6
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7d92      	ldrb	r2, [r2, #22]
 8008da4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	3307      	adds	r3, #7
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	7dd2      	ldrb	r2, [r2, #23]
 8008dae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7e12      	ldrb	r2, [r2, #24]
 8008db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	3309      	adds	r3, #9
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	7e52      	ldrb	r2, [r2, #25]
 8008dc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	330a      	adds	r3, #10
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7e92      	ldrb	r2, [r2, #26]
 8008dcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	330b      	adds	r3, #11
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	7ed2      	ldrb	r2, [r2, #27]
 8008dd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	7f12      	ldrb	r2, [r2, #28]
 8008de0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	330d      	adds	r3, #13
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	7f52      	ldrb	r2, [r2, #29]
 8008dea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	330e      	adds	r3, #14
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7f92      	ldrb	r2, [r2, #30]
 8008df4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	330f      	adds	r3, #15
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	7fd2      	ldrb	r2, [r2, #31]
 8008dfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	3310      	adds	r3, #16
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008e0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	3311      	adds	r3, #17
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008e16:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	3312      	adds	r3, #18
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8008e22:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	3313      	adds	r3, #19
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8008e2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	3314      	adds	r3, #20
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008e3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3315      	adds	r3, #21
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008e46:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	3316      	adds	r3, #22
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008e52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	3317      	adds	r3, #23
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008e5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	3318      	adds	r3, #24
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8008e6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	3319      	adds	r3, #25
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8008e76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	331a      	adds	r3, #26
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8008e82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	331b      	adds	r3, #27
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8008e8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	331c      	adds	r3, #28
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008e9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	331d      	adds	r3, #29
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008ea6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	331e      	adds	r3, #30
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008eb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	331f      	adds	r3, #31
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8008ebe:	701a      	strb	r2, [r3, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	22ff      	movs	r2, #255	; 0xff
 8008ed8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	22ff      	movs	r2, #255	; 0xff
 8008ede:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	22ff      	movs	r2, #255	; 0xff
 8008ee4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	22ff      	movs	r2, #255	; 0xff
 8008eea:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ef2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008efa:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f02:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f0a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f12:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f1a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f22:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f2a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f32:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f3a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f42:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f4a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f52:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f5a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f62:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f6a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f72:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f7a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f82:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	22ff      	movs	r2, #255	; 0xff
 8008f88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2210      	movs	r2, #16
 8008fac:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	79fa      	ldrb	r2, [r7, #7]
 8008fb2:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	e017      	b.n	8008fea <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8008fba:	7bfa      	ldrb	r2, [r7, #15]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3304      	adds	r3, #4
 8008fca:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2203      	movs	r2, #3
 8008fd0:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	73fb      	strb	r3, [r7, #15]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	7bfa      	ldrb	r2, [r7, #15]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d3e2      	bcc.n	8008fba <V53L1_init_zone_results_structure+0x22>
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8009002:	b490      	push	{r4, r7}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	4604      	mov	r4, r0
 800900a:	4608      	mov	r0, r1
 800900c:	4611      	mov	r1, r2
 800900e:	461a      	mov	r2, r3
 8009010:	4623      	mov	r3, r4
 8009012:	71fb      	strb	r3, [r7, #7]
 8009014:	4603      	mov	r3, r0
 8009016:	71bb      	strb	r3, [r7, #6]
 8009018:	460b      	mov	r3, r1
 800901a:	717b      	strb	r3, [r7, #5]
 800901c:	4613      	mov	r3, r2
 800901e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8009020:	79bb      	ldrb	r3, [r7, #6]
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	b2da      	uxtb	r2, r3
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	4413      	add	r3, r2
 800902a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8009030:	793b      	ldrb	r3, [r7, #4]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	b2da      	uxtb	r2, r3
 8009036:	797b      	ldrb	r3, [r7, #5]
 8009038:	4413      	add	r3, r2
 800903a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8009040:	7d3b      	ldrb	r3, [r7, #20]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	b2da      	uxtb	r2, r3
 8009046:	7c3b      	ldrb	r3, [r7, #16]
 8009048:	4413      	add	r3, r2
 800904a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8009050:	7f3b      	ldrb	r3, [r7, #28]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	b2da      	uxtb	r2, r3
 8009056:	7e3b      	ldrb	r3, [r7, #24]
 8009058:	4413      	add	r3, r2
 800905a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8009060:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	b2da      	uxtb	r2, r3
 8009068:	f897 3020 	ldrb.w	r3, [r7, #32]
 800906c:	4413      	add	r3, r2
 800906e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8009074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	b2da      	uxtb	r2, r3
 800907c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009080:	4413      	add	r3, r2
 8009082:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80090ae:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80090b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090bc:	4413      	add	r3, r2
 80090be:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80090ca:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	2200      	movs	r2, #0
 80090d0:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009108:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009110:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8009112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]

}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bc90      	pop	{r4, r7}
 8009120:	4770      	bx	lr

08009122 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8009122:	b490      	push	{r4, r7}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	4604      	mov	r4, r0
 800912a:	4608      	mov	r0, r1
 800912c:	4611      	mov	r1, r2
 800912e:	461a      	mov	r2, r3
 8009130:	4623      	mov	r3, r4
 8009132:	71fb      	strb	r3, [r7, #7]
 8009134:	4603      	mov	r3, r0
 8009136:	71bb      	strb	r3, [r7, #6]
 8009138:	460b      	mov	r3, r1
 800913a:	717b      	strb	r3, [r7, #5]
 800913c:	4613      	mov	r3, r2
 800913e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8009140:	79bb      	ldrb	r3, [r7, #6]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	b2da      	uxtb	r2, r3
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	4413      	add	r3, r2
 800914a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8009150:	793b      	ldrb	r3, [r7, #4]
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	b2da      	uxtb	r2, r3
 8009156:	797b      	ldrb	r3, [r7, #5]
 8009158:	4413      	add	r3, r2
 800915a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8009160:	7d3b      	ldrb	r3, [r7, #20]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	b2da      	uxtb	r2, r3
 8009166:	7c3b      	ldrb	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	789a      	ldrb	r2, [r3, #2]
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	78da      	ldrb	r2, [r3, #3]
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	789a      	ldrb	r2, [r3, #2]
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	78da      	ldrb	r2, [r3, #3]
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	791a      	ldrb	r2, [r3, #4]
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80091ae:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80091b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091bc:	4413      	add	r3, r2
 80091be:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80091ca:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	2200      	movs	r2, #0
 80091d0:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 80091d2:	7f3b      	ldrb	r3, [r7, #28]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	7e3b      	ldrb	r3, [r7, #24]
 80091da:	4413      	add	r3, r2
 80091dc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 80091e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 80091f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009202:	4413      	add	r3, r2
 8009204:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	7bda      	ldrb	r2, [r3, #15]
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	7c1a      	ldrb	r2, [r3, #16]
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	7c5a      	ldrb	r2, [r3, #17]
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009228:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009230:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	2200      	movs	r2, #0
 8009236:	701a      	strb	r2, [r3, #0]
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bc90      	pop	{r4, r7}
 8009240:	4770      	bx	lr

08009242 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8009242:	b480      	push	{r7}
 8009244:	b087      	sub	sp, #28
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	460b      	mov	r3, r1
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	220c      	movs	r2, #12
 800926a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800926c:	897b      	ldrh	r3, [r7, #10]
 800926e:	b2da      	uxtb	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80092a2:	2300      	movs	r3, #0
 80092a4:	82fb      	strh	r3, [r7, #22]
 80092a6:	e015      	b.n	80092d4 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80092a8:	8afa      	ldrh	r2, [r7, #22]
 80092aa:	897b      	ldrh	r3, [r7, #10]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d207      	bcs.n	80092c0 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80092b0:	8afb      	ldrh	r3, [r7, #22]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	3302      	adds	r3, #2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	605a      	str	r2, [r3, #4]
 80092be:	e006      	b.n	80092ce <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80092c0:	8afb      	ldrh	r3, [r7, #22]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	3302      	adds	r3, #2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	2200      	movs	r2, #0
 80092cc:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80092ce:	8afb      	ldrh	r3, [r7, #22]
 80092d0:	3301      	adds	r3, #1
 80092d2:	82fb      	strh	r3, [r7, #22]
 80092d4:	8afb      	ldrh	r3, [r7, #22]
 80092d6:	2b0b      	cmp	r3, #11
 80092d8:	d9e6      	bls.n	80092a8 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	371c      	adds	r7, #28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	603a      	str	r2, [r7, #0]
 80092f2:	80fb      	strh	r3, [r7, #6]
 80092f4:	460b      	mov	r3, r1
 80092f6:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8009300:	88fb      	ldrh	r3, [r7, #6]
 8009302:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8009304:	2300      	movs	r3, #0
 8009306:	81fb      	strh	r3, [r7, #14]
 8009308:	e00e      	b.n	8009328 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800930a:	88ba      	ldrh	r2, [r7, #4]
 800930c:	89fb      	ldrh	r3, [r7, #14]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4413      	add	r3, r2
 8009316:	89ba      	ldrh	r2, [r7, #12]
 8009318:	b2d2      	uxtb	r2, r2
 800931a:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800931c:	89bb      	ldrh	r3, [r7, #12]
 800931e:	0a1b      	lsrs	r3, r3, #8
 8009320:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8009322:	89fb      	ldrh	r3, [r7, #14]
 8009324:	3301      	adds	r3, #1
 8009326:	81fb      	strh	r3, [r7, #14]
 8009328:	89fa      	ldrh	r2, [r7, #14]
 800932a:	88bb      	ldrh	r3, [r7, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d3ec      	bcc.n	800930a <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	4603      	mov	r3, r0
 8009346:	6039      	str	r1, [r7, #0]
 8009348:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800934a:	2300      	movs	r3, #0
 800934c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800934e:	e00a      	b.n	8009366 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8009350:	89fb      	ldrh	r3, [r7, #14]
 8009352:	021b      	lsls	r3, r3, #8
 8009354:	b21a      	sxth	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	1c59      	adds	r1, r3, #1
 800935a:	6039      	str	r1, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b21b      	sxth	r3, r3
 8009360:	4313      	orrs	r3, r2
 8009362:	b21b      	sxth	r3, r3
 8009364:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	1e5a      	subs	r2, r3, #1
 800936a:	80fa      	strh	r2, [r7, #6]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1ef      	bne.n	8009350 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8009370:	89fb      	ldrh	r3, [r7, #14]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	4603      	mov	r3, r0
 8009386:	603a      	str	r2, [r7, #0]
 8009388:	80fb      	strh	r3, [r7, #6]
 800938a:	460b      	mov	r3, r1
 800938c:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8009396:	88fb      	ldrh	r3, [r7, #6]
 8009398:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800939a:	2300      	movs	r3, #0
 800939c:	81fb      	strh	r3, [r7, #14]
 800939e:	e00f      	b.n	80093c0 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80093a0:	88ba      	ldrh	r2, [r7, #4]
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	4413      	add	r3, r2
 80093ac:	89ba      	ldrh	r2, [r7, #12]
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80093b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80093b6:	121b      	asrs	r3, r3, #8
 80093b8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80093ba:	89fb      	ldrh	r3, [r7, #14]
 80093bc:	3301      	adds	r3, #1
 80093be:	81fb      	strh	r3, [r7, #14]
 80093c0:	89fa      	ldrh	r2, [r7, #14]
 80093c2:	88bb      	ldrh	r3, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d3eb      	bcc.n	80093a0 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	4603      	mov	r3, r0
 80093de:	6039      	str	r1, [r7, #0]
 80093e0:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 80093e2:	2300      	movs	r3, #0
 80093e4:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	b25b      	sxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	da0e      	bge.n	800940e <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80093f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093f4:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80093f6:	e00a      	b.n	800940e <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80093f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	b21a      	sxth	r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	1c59      	adds	r1, r3, #1
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	b21b      	sxth	r3, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800940e:	88fb      	ldrh	r3, [r7, #6]
 8009410:	1e5a      	subs	r2, r3, #1
 8009412:	80fa      	strh	r2, [r7, #6]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1ef      	bne.n	80093f8 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8009418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	460b      	mov	r3, r1
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8009442:	2300      	movs	r3, #0
 8009444:	82fb      	strh	r3, [r7, #22]
 8009446:	e00e      	b.n	8009466 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009448:	897a      	ldrh	r2, [r7, #10]
 800944a:	8afb      	ldrh	r3, [r7, #22]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	3b01      	subs	r3, #1
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	0a1b      	lsrs	r3, r3, #8
 800945e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8009460:	8afb      	ldrh	r3, [r7, #22]
 8009462:	3301      	adds	r3, #1
 8009464:	82fb      	strh	r3, [r7, #22]
 8009466:	8afa      	ldrh	r2, [r7, #22]
 8009468:	897b      	ldrh	r3, [r7, #10]
 800946a:	429a      	cmp	r2, r3
 800946c:	d3ec      	bcc.n	8009448 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	6039      	str	r1, [r7, #0]
 8009486:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800948c:	e007      	b.n	800949e <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	021a      	lsls	r2, r3, #8
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	1c59      	adds	r1, r3, #1
 8009496:	6039      	str	r1, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	80fa      	strh	r2, [r7, #6]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1f2      	bne.n	800948e <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80094a8:	68fb      	ldr	r3, [r7, #12]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	4603      	mov	r3, r0
 80094be:	6039      	str	r1, [r7, #0]
 80094c0:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	b25b      	sxtb	r3, r3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da0b      	bge.n	80094e8 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80094d0:	f04f 33ff 	mov.w	r3, #4294967295
 80094d4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80094d6:	e007      	b.n	80094e8 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	021a      	lsls	r2, r3, #8
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	6039      	str	r1, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	1e5a      	subs	r2, r3, #1
 80094ec:	80fa      	strh	r2, [r7, #6]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f2      	bne.n	80094d8 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 80094f2:	68fb      	ldr	r3, [r7, #12]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a

	status = VL53LX_WrByte(
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f893 339a 	ldrb.w	r3, [r3, #922]	; 0x39a
 8009522:	461a      	mov	r2, r3
 8009524:	2185      	movs	r1, #133	; 0x85
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7f9 f928 	bl	800277c <VL53LX_WrByte>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8009530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8009548:	2101      	movs	r1, #1
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff ffd8 	bl	8009500 <VL53LX_set_firmware_enable_register>
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800956c:	2100      	movs	r1, #0
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff ffc6 	bl	8009500 <VL53LX_set_firmware_enable_register>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009578:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	status = VL53LX_WrByte(
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 80095a6:	461a      	mov	r2, r3
 80095a8:	2183      	movs	r1, #131	; 0x83
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7f9 f8e6 	bl	800277c <VL53LX_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 80095b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 80095cc:	2101      	movs	r1, #1
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ffd8 	bl	8009584 <VL53LX_set_powerforce_register>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80095d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff ffc6 	bl	8009584 <VL53LX_set_powerforce_register>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80095fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	460a      	mov	r2, r1
 8009612:	80fb      	strh	r3, [r7, #6]
 8009614:	4613      	mov	r3, r2
 8009616:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8009624:	88fb      	ldrh	r3, [r7, #6]
 8009626:	4618      	mov	r0, r3
 8009628:	f002 fed4 	bl	800c3d4 <VL53LX_calc_pll_period_us>
 800962c:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 800962e:	797b      	ldrb	r3, [r7, #5]
 8009630:	4618      	mov	r0, r3
 8009632:	f003 fabf 	bl	800cbb4 <VL53LX_decode_vcsel_period>
 8009636:	4603      	mov	r3, r0
 8009638:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4613      	mov	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	4413      	add	r3, r2
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	099b      	lsrs	r3, r3, #6
 800964a:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 800964c:	7cfa      	ldrb	r2, [r7, #19]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	fb02 f303 	mul.w	r3, r2, r3
 8009654:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	099b      	lsrs	r3, r3, #6
 800965a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800965c:	68fb      	ldr	r3, [r7, #12]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8009668:	b480      	push	{r7}
 800966a:	b089      	sub	sp, #36	; 0x24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	4608      	mov	r0, r1
 8009672:	4611      	mov	r1, r2
 8009674:	461a      	mov	r2, r3
 8009676:	4603      	mov	r3, r0
 8009678:	817b      	strh	r3, [r7, #10]
 800967a:	460b      	mov	r3, r1
 800967c:	813b      	strh	r3, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	4a23      	ldr	r2, [pc, #140]	; (8009728 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800969c:	fb82 1203 	smull	r1, r2, r2, r3
 80096a0:	1192      	asrs	r2, r2, #6
 80096a2:	17db      	asrs	r3, r3, #31
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 80096a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da03      	bge.n	80096b8 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80096b0:	897b      	ldrh	r3, [r7, #10]
 80096b2:	425b      	negs	r3, r3
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 80096b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	da03      	bge.n	80096c8 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80096c0:	893b      	ldrh	r3, [r7, #8]
 80096c2:	425b      	negs	r3, r3
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80096c8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80096cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096d0:	4413      	add	r3, r2
 80096d2:	015b      	lsls	r3, r3, #5
 80096d4:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	4a13      	ldr	r2, [pc, #76]	; (8009728 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80096da:	fb82 1203 	smull	r1, r2, r2, r3
 80096de:	1192      	asrs	r2, r2, #6
 80096e0:	17db      	asrs	r3, r3, #31
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80096ee:	79fa      	ldrb	r2, [r7, #7]
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	fb02 f303 	mul.w	r3, r2, r3
 80096f6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	3310      	adds	r3, #16
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	da00      	bge.n	8009702 <VL53LX_calc_range_ignore_threshold+0x9a>
 8009700:	331f      	adds	r3, #31
 8009702:	115b      	asrs	r3, r3, #5
 8009704:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970c:	db03      	blt.n	8009716 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800970e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009712:	83fb      	strh	r3, [r7, #30]
 8009714:	e001      	b.n	800971a <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800971a:	8bfb      	ldrh	r3, [r7, #30]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3724      	adds	r7, #36	; 0x24
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	10624dd3 	.word	0x10624dd3

0800972c <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	e008      	b.n	8009758 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	031a      	lsls	r2, r3, #12
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	085b      	lsrs	r3, r3, #1
 800974e:	441a      	add	r2, r3
		timeout_mclks   =
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	fbb2 f3f3 	udiv	r3, r2, r3
 8009756:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8009758:	68fb      	ldr	r3, [r7, #12]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff ffd6 	bl	800972c <VL53LX_calc_timeout_mclks>
 8009780:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f887 	bl	8009896 <VL53LX_encode_timeout>
 8009788:	4603      	mov	r3, r0
 800978a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800978c:	897b      	ldrh	r3, [r7, #10]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8009796:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 80097a2:	2100      	movs	r1, #0
 80097a4:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80097a6:	f04f 0000 	mov.w	r0, #0
 80097aa:	f04f 0100 	mov.w	r1, #0
 80097ae:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	2000      	movs	r0, #0
 80097b6:	4688      	mov	r8, r1
 80097b8:	4681      	mov	r9, r0
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	2000      	movs	r0, #0
 80097be:	460c      	mov	r4, r1
 80097c0:	4605      	mov	r5, r0
 80097c2:	fb04 f009 	mul.w	r0, r4, r9
 80097c6:	fb08 f105 	mul.w	r1, r8, r5
 80097ca:	4401      	add	r1, r0
 80097cc:	fba8 2304 	umull	r2, r3, r8, r4
 80097d0:	4419      	add	r1, r3
 80097d2:	460b      	mov	r3, r1
 80097d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80097d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80097dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097e0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 80097e4:	f143 0b00 	adc.w	fp, r3, #0
 80097e8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80097ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	0b02      	lsrs	r2, r0, #12
 80097fa:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80097fe:	0b0b      	lsrs	r3, r1, #12
 8009800:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8009808:	697b      	ldr	r3, [r7, #20]
}
 800980a:	4618      	mov	r0, r3
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009814:	4770      	bx	lr
	...

08009818 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800982c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8009830:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8009832:	4413      	add	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	da02      	bge.n	8009842 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	e005      	b.n	800984e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009848:	db01      	blt.n	800984e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 800984c:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8009852:	68bb      	ldr	r3, [r7, #8]

}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	0003ffff 	.word	0x0003ffff

08009864 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f837 	bl	80098ee <VL53LX_decode_timeout>
 8009880:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f7ff ff86 	bl	8009796 <VL53LX_calc_timeout_us>
 800988a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800988c:	68bb      	ldr	r3, [r7, #8]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8009896:	b480      	push	{r7}
 8009898:	b087      	sub	sp, #28
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d017      	beq.n	80098e0 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80098b6:	e005      	b.n	80098c4 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	085b      	lsrs	r3, r3, #1
 80098bc:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80098be:	89fb      	ldrh	r3, [r7, #14]
 80098c0:	3301      	adds	r3, #1
 80098c2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1f4      	bne.n	80098b8 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80098ce:	89fb      	ldrh	r3, [r7, #14]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80098dc:	4413      	add	r3, r2
 80098de:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80098e0:	8afb      	ldrh	r3, [r7, #22]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	4603      	mov	r3, r0
 80098f6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009900:	88fa      	ldrh	r2, [r7, #6]
 8009902:	0a12      	lsrs	r2, r2, #8
 8009904:	b292      	uxth	r2, r2
 8009906:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b088      	sub	sp, #32
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
 8009926:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009928:	2300      	movs	r3, #0
 800992a:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8009938:	887b      	ldrh	r3, [r7, #2]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800993e:	23f1      	movs	r3, #241	; 0xf1
 8009940:	77fb      	strb	r3, [r7, #31]
 8009942:	e05d      	b.n	8009a00 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	799a      	ldrb	r2, [r3, #6]
 8009948:	887b      	ldrh	r3, [r7, #2]
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff fe5b 	bl	8009608 <VL53LX_calc_macro_period_us>
 8009952:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8009954:	6979      	ldr	r1, [r7, #20]
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7ff fee8 	bl	800972c <VL53LX_calc_timeout_mclks>
 800995c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2bff      	cmp	r3, #255	; 0xff
 8009962:	d901      	bls.n	8009968 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8009964:	23ff      	movs	r3, #255	; 0xff
 8009966:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8009970:	6979      	ldr	r1, [r7, #20]
 8009972:	68b8      	ldr	r0, [r7, #8]
 8009974:	f7ff fef7 	bl	8009766 <VL53LX_calc_encoded_timeout>
 8009978:	4603      	mov	r3, r0
 800997a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800997c:	8a7b      	ldrh	r3, [r7, #18]
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	b29b      	uxth	r3, r3
 8009982:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009988:	8a7b      	ldrh	r3, [r7, #18]
 800998a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8009990:	6979      	ldr	r1, [r7, #20]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff fee7 	bl	8009766 <VL53LX_calc_encoded_timeout>
 8009998:	4603      	mov	r3, r0
 800999a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800999c:	8a7b      	ldrh	r3, [r7, #18]
 800999e:	0a1b      	lsrs	r3, r3, #8
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80099a8:	8a7b      	ldrh	r3, [r7, #18]
 80099aa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	7a5a      	ldrb	r2, [r3, #9]
 80099b4:	887b      	ldrh	r3, [r7, #2]
 80099b6:	4611      	mov	r1, r2
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff fe25 	bl	8009608 <VL53LX_calc_macro_period_us>
 80099be:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	68b8      	ldr	r0, [r7, #8]
 80099c4:	f7ff fecf 	bl	8009766 <VL53LX_calc_encoded_timeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80099cc:	8a7b      	ldrh	r3, [r7, #18]
 80099ce:	0a1b      	lsrs	r3, r3, #8
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80099d8:	8a7b      	ldrh	r3, [r7, #18]
 80099da:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80099dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099de:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 80099e0:	6979      	ldr	r1, [r7, #20]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff febf 	bl	8009766 <VL53LX_calc_encoded_timeout>
 80099e8:	4603      	mov	r3, r0
 80099ea:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80099ec:	8a7b      	ldrh	r3, [r7, #18]
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80099f8:	8a7b      	ldrh	r3, [r7, #18]
 80099fa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8009a00:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8009a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a10:	b09e      	sub	sp, #120	; 0x78
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6578      	str	r0, [r7, #84]	; 0x54
 8009a16:	6539      	str	r1, [r7, #80]	; 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 8009a1e:	f04f 0200 	mov.w	r2, #0
 8009a22:	f04f 0300 	mov.w	r3, #0
 8009a26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8009a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8009a4a:	23f1      	movs	r3, #241	; 0xf1
 8009a4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009a50:	e0d6      	b.n	8009c00 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8009a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80d2 	beq.w	8009c00 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a5e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f040 80cd 	bne.w	8009c00 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8009a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a70:	647a      	str	r2, [r7, #68]	; 0x44
 8009a72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009a76:	460b      	mov	r3, r1
 8009a78:	3301      	adds	r3, #1
 8009a7a:	623b      	str	r3, [r7, #32]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	f143 0300 	adc.w	r3, r3, #0
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
 8009a84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a88:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	2200      	movs	r2, #0
 8009a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a98:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 8009a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	fb02 f203 	mul.w	r2, r2, r3
 8009aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aa8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8009aac:	fb01 f303 	mul.w	r3, r1, r3
 8009ab0:	441a      	add	r2, r3
 8009ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ab6:	fba3 4501 	umull	r4, r5, r3, r1
 8009aba:	1953      	adds	r3, r2, r5
 8009abc:	461d      	mov	r5, r3
 8009abe:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 8009ac2:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8009ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ace:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ad0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	4613      	mov	r3, r2
 8009adc:	f143 0300 	adc.w	r3, r3, #0
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009ae6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8009aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aec:	885b      	ldrh	r3, [r3, #2]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	2200      	movs	r2, #0
 8009af2:	633b      	str	r3, [r7, #48]	; 0x30
 8009af4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 8009af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009afc:	4622      	mov	r2, r4
 8009afe:	fb02 f203 	mul.w	r2, r2, r3
 8009b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b04:	4629      	mov	r1, r5
 8009b06:	fb01 f303 	mul.w	r3, r1, r3
 8009b0a:	441a      	add	r2, r3
 8009b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b0e:	4621      	mov	r1, r4
 8009b10:	fba3 ab01 	umull	sl, fp, r3, r1
 8009b14:	eb02 030b 	add.w	r3, r2, fp
 8009b18:	469b      	mov	fp, r3
 8009b1a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8009b1e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8009b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	17da      	asrs	r2, r3, #31
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 8009b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b2e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8009b32:	4622      	mov	r2, r4
 8009b34:	fb02 f203 	mul.w	r2, r2, r3
 8009b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	4413      	add	r3, r2
 8009b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b44:	4621      	mov	r1, r4
 8009b46:	fba2 8901 	umull	r8, r9, r2, r1
 8009b4a:	444b      	add	r3, r9
 8009b4c:	4699      	mov	r9, r3
 8009b4e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 8009b52:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 8009b56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009b5a:	0fd9      	lsrs	r1, r3, #31
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	6139      	str	r1, [r7, #16]
 8009b60:	6178      	str	r0, [r7, #20]
 8009b62:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009b66:	4621      	mov	r1, r4
 8009b68:	1889      	adds	r1, r1, r2
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	eb43 0101 	adc.w	r1, r3, r1
 8009b72:	60f9      	str	r1, [r7, #12]
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	f04f 0300 	mov.w	r3, #0
 8009b7c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009b80:	4621      	mov	r1, r4
 8009b82:	084a      	lsrs	r2, r1, #1
 8009b84:	4629      	mov	r1, r5
 8009b86:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	104b      	asrs	r3, r1, #1
 8009b8e:	4610      	mov	r0, r2
 8009b90:	4619      	mov	r1, r3
 8009b92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b96:	1814      	adds	r4, r2, r0
 8009b98:	603c      	str	r4, [r7, #0]
 8009b9a:	414b      	adcs	r3, r1
 8009b9c:	607b      	str	r3, [r7, #4]
 8009b9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009ba2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 8009ba6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009baa:	4313      	orrs	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8009bae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bb6:	f7f7 f87f 	bl	8000cb8 <__aeabi_ldivmod>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8009bc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8009bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bcc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8009bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8009bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8009bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bde:	7852      	ldrb	r2, [r2, #1]
 8009be0:	0852      	lsrs	r2, r2, #1
 8009be2:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8009be4:	441a      	add	r2, r3
 8009be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8009bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8009bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bf4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8009bf6:	fb93 f2f2 	sdiv	r2, r3, r2
 8009bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8009c00:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3778      	adds	r7, #120	; 0x78
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009c0e <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b087      	sub	sp, #28
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
	amb_thresh_low  = 1024 *
 8009c2e:	029b      	lsls	r3, r3, #10
 8009c30:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	amb_thresh_high = 1024 *
 8009c38:	029b      	lsls	r3, r3, #10
 8009c3a:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 8095 	bne.w	8009d76 <VL53LX_hist_get_bin_sequence_config+0x168>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
		pdata->bin_seq[5] =
 8009c52:	091b      	lsrs	r3, r3, #4
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 8009c60:	f003 030f 	and.w	r3, r3, #15
 8009c64:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		pdata->bin_seq[3] =
 8009c70:	091b      	lsrs	r3, r3, #4
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8009c7e:	f003 030f 	and.w	r3, r3, #15
 8009c82:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
		pdata->bin_seq[1] =
 8009c8e:	091b      	lsrs	r3, r3, #4
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	da2c      	bge.n	8009d0c <VL53LX_hist_get_bin_sequence_config+0xfe>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[5] =
 8009cb8:	091b      	lsrs	r3, r3, #4
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[3] =
 8009cd6:	091b      	lsrs	r3, r3, #4
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 8009ce4:	f003 030f 	and.w	r3, r3, #15
 8009ce8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[1] =
 8009cf4:	091b      	lsrs	r3, r3, #4
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 8009d02:	f003 030f 	and.w	r3, r3, #15
 8009d06:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	f340 80c2 	ble.w	8009e9e <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
			pdata->bin_seq[5] =
 8009d20:	091b      	lsrs	r3, r3, #4
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
			& 0x0F;
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
			pdata->bin_seq[3] =
 8009d3e:	091b      	lsrs	r3, r3, #4
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
			& 0x0F;
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
			pdata->bin_seq[1] =
 8009d5c:	091b      	lsrs	r3, r3, #4
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
			& 0x0F;
 8009d6a:	f003 030f 	and.w	r3, r3, #15
 8009d6e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	731a      	strb	r2, [r3, #12]
 8009d74:	e093      	b.n	8009e9e <VL53LX_hist_get_bin_sequence_config+0x290>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
			& 0x0F;
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
		pdata->bin_seq[3] =
 8009d9c:	091b      	lsrs	r3, r3, #4
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f893 3326 	ldrb.w	r3, [r3, #806]	; 0x326
		pdata->bin_seq[1] =
 8009dba:	091b      	lsrs	r3, r3, #4
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f893 3326 	ldrb.w	r3, [r3, #806]	; 0x326
			& 0x0F;
 8009dc8:	f003 030f 	and.w	r3, r3, #15
 8009dcc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	da2c      	bge.n	8009e38 <VL53LX_hist_get_bin_sequence_config+0x22a>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
			pdata->bin_seq[5] =
 8009de4:	091b      	lsrs	r3, r3, #4
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
			& 0x0F;
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
			pdata->bin_seq[3] =
 8009e02:	091b      	lsrs	r3, r3, #4
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
			& 0x0F;
 8009e10:	f003 030f 	and.w	r3, r3, #15
 8009e14:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[1] =
 8009e20:	091b      	lsrs	r3, r3, #4
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 8009e2e:	f003 030f 	and.w	r3, r3, #15
 8009e32:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	dd2c      	ble.n	8009e9e <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
			pdata->bin_seq[5] =
 8009e4a:	091b      	lsrs	r3, r3, #4
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
			& 0x0F;
 8009e58:	f003 030f 	and.w	r3, r3, #15
 8009e5c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
			pdata->bin_seq[3] =
 8009e68:	091b      	lsrs	r3, r3, #4
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
			& 0x0F;
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
			pdata->bin_seq[1] =
 8009e86:	091b      	lsrs	r3, r3, #4
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
			& 0x0F;
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75fb      	strb	r3, [r7, #23]
 8009ea2:	e007      	b.n	8009eb4 <VL53LX_hist_get_bin_sequence_config+0x2a6>
		pdata->bin_rep[i] = 1;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	2201      	movs	r2, #1
 8009eac:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	75fb      	strb	r3, [r7, #23]
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	d9f4      	bls.n	8009ea4 <VL53LX_hist_get_bin_sequence_config+0x296>

	LOG_FUNCTION_END(0);

}
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
 8009ebe:	371c      	adds	r7, #28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8009ec8:	b590      	push	{r4, r7, lr}
 8009eca:	b093      	sub	sp, #76	; 0x4c
 8009ecc:	af04      	add	r7, sp, #16
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	f893 326f 	ldrb.w	r3, [r3, #623]	; 0x26f
 8009f06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8009f10:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	f8b3 3272 	ldrh.w	r3, [r3, #626]	; 0x272
 8009f18:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
 8009f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8009f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f28:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8009f2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	785b      	ldrb	r3, [r3, #1]
 8009f34:	2b07      	cmp	r3, #7
 8009f36:	d006      	beq.n	8009f46 <VL53LX_hist_phase_consistency_check+0x7e>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d002      	beq.n	8009f46 <VL53LX_hist_phase_consistency_check+0x7e>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8009f40:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f44:	e0ec      	b.n	800a120 <VL53LX_hist_phase_consistency_check+0x258>



	if (phase_tolerance == 0)
 8009f46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d102      	bne.n	8009f52 <VL53LX_hist_phase_consistency_check+0x8a>
		return status;
 8009f4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f50:	e0e6      	b.n	800a120 <VL53LX_hist_phase_consistency_check+0x258>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009f52:	2300      	movs	r3, #0
 8009f54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009f58:	e0d9      	b.n	800a10e <VL53LX_hist_phase_consistency_check+0x246>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009f5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	214c      	movs	r1, #76	; 0x4c
 8009f62:	fb01 f303 	mul.w	r3, r1, r3
 8009f66:	4413      	add	r3, r2
 8009f68:	335e      	adds	r3, #94	; 0x5e
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b09      	cmp	r3, #9
 8009f6e:	d00b      	beq.n	8009f88 <VL53LX_hist_phase_consistency_check+0xc0>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8009f70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	214c      	movs	r1, #76	; 0x4c
 8009f78:	fb01 f303 	mul.w	r3, r1, r3
 8009f7c:	4413      	add	r3, r2
 8009f7e:	335e      	adds	r3, #94	; 0x5e
 8009f80:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009f82:	2b13      	cmp	r3, #19
 8009f84:	f040 80bd 	bne.w	800a102 <VL53LX_hist_phase_consistency_check+0x23a>





		if (prange_prev->active_objects == 0)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	795b      	ldrb	r3, [r3, #5]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <VL53LX_hist_phase_consistency_check+0xde>
			prange_curr->VL53LX_p_003[lc].range_status =
 8009f90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	214c      	movs	r1, #76	; 0x4c
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	335e      	adds	r3, #94	; 0x5e
 8009fa0:	2217      	movs	r2, #23
 8009fa2:	701a      	strb	r2, [r3, #0]
 8009fa4:	e009      	b.n	8009fba <VL53LX_hist_phase_consistency_check+0xf2>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8009fa6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	214c      	movs	r1, #76	; 0x4c
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	335e      	adds	r3, #94	; 0x5e
 8009fb6:	2207      	movs	r2, #7
 8009fb8:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009fc0:	e097      	b.n	800a0f2 <VL53LX_hist_phase_consistency_check+0x22a>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009fc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	214c      	movs	r1, #76	; 0x4c
 8009fca:	fb01 f303 	mul.w	r3, r1, r3
 8009fce:	4413      	add	r3, r2
 8009fd0:	3354      	adds	r3, #84	; 0x54
 8009fd2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8009fd4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4403      	add	r3, r0
 8009fe4:	3310      	adds	r3, #16
 8009fe6:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009fe8:	4299      	cmp	r1, r3
 8009fea:	d915      	bls.n	800a018 <VL53LX_hist_phase_consistency_check+0x150>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009fec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	214c      	movs	r1, #76	; 0x4c
 8009ff4:	fb01 f303 	mul.w	r3, r1, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3354      	adds	r3, #84	; 0x54
 8009ffc:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8009ffe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4613      	mov	r3, r2
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4403      	add	r3, r0
 800a00e:	3310      	adds	r3, #16
 800a010:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800a012:	1acb      	subs	r3, r1, r3
 800a014:	867b      	strh	r3, [r7, #50]	; 0x32
 800a016:	e014      	b.n	800a042 <VL53LX_hist_phase_consistency_check+0x17a>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 800a018:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	4613      	mov	r3, r2
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	440b      	add	r3, r1
 800a028:	3310      	adds	r3, #16
 800a02a:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 800a02c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	204c      	movs	r0, #76	; 0x4c
 800a034:	fb00 f303 	mul.w	r3, r0, r3
 800a038:	440b      	add	r3, r1
 800a03a:	3354      	adds	r3, #84	; 0x54
 800a03c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800a042:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a044:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a046:	429a      	cmp	r2, r3
 800a048:	d24e      	bcs.n	800a0e8 <VL53LX_hist_phase_consistency_check+0x220>





				if (status == VL53LX_ERROR_NONE)
 800a04a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d125      	bne.n	800a09e <VL53LX_hist_phase_consistency_check+0x1d6>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800a052:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 800a056:	4613      	mov	r3, r2
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	3308      	adds	r3, #8
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800a064:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 800a068:	224c      	movs	r2, #76	; 0x4c
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
 800a06e:	3310      	adds	r3, #16
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800a078:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800a07c:	f107 0217 	add.w	r2, r7, #23
 800a080:	9203      	str	r2, [sp, #12]
 800a082:	f107 021c 	add.w	r2, r7, #28
 800a086:	9202      	str	r2, [sp, #8]
 800a088:	f107 0218 	add.w	r2, r7, #24
 800a08c:	9201      	str	r2, [sp, #4]
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	4623      	mov	r3, r4
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	f000 f848 	bl	800a128 <VL53LX_hist_events_consistency_check>
 800a098:	4603      	mov	r3, r0
 800a09a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800a09e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d115      	bne.n	800a0d2 <VL53LX_hist_phase_consistency_check+0x20a>
					range_status ==
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d112      	bne.n	800a0d2 <VL53LX_hist_phase_consistency_check+0x20a>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 800a0ac:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800a0b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 800a0b4:	224c      	movs	r2, #76	; 0x4c
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	3310      	adds	r3, #16
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	4413      	add	r3, r2
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	f107 0217 	add.w	r2, r7, #23
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	f000 fb44 	bl	800a754 <VL53LX_hist_merged_pulse_check>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 800a0d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a0d6:	7df8      	ldrb	r0, [r7, #23]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	214c      	movs	r1, #76	; 0x4c
 800a0dc:	fb01 f303 	mul.w	r3, r1, r3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	335e      	adds	r3, #94	; 0x5e
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800a0e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	795b      	ldrb	r3, [r3, #5]
 800a0f6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	f4ff af61 	bcc.w	8009fc2 <VL53LX_hist_phase_consistency_check+0xfa>
 800a100:	e000      	b.n	800a104 <VL53LX_hist_phase_consistency_check+0x23c>
			continue;
 800a102:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800a104:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a108:	3301      	adds	r3, #1
 800a10a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	7c9b      	ldrb	r3, [r3, #18]
 800a112:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a116:	429a      	cmp	r2, r3
 800a118:	f4ff af1f 	bcc.w	8009f5a <VL53LX_hist_phase_consistency_check+0x92>

	}

	LOG_FUNCTION_END(status);

	return status;
 800a11c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a120:	4618      	mov	r0, r3
 800a122:	373c      	adds	r7, #60	; 0x3c
 800a124:	46bd      	mov	sp, r7
 800a126:	bd90      	pop	{r4, r7, pc}

0800a128 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800a128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a12c:	b0d4      	sub	sp, #336	; 0x150
 800a12e:	af00      	add	r7, sp, #0
 800a130:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800a134:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800a13e:	460b      	mov	r3, r1
 800a140:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a144:	2300      	movs	r3, #0
 800a146:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800a14a:	f04f 0200 	mov.w	r2, #0
 800a14e:	f04f 0300 	mov.w	r3, #0
 800a152:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800a162:	f04f 0200 	mov.w	r2, #0
 800a166:	f04f 0300 	mov.w	r3, #0
 800a16a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	f04f 0300 	mov.w	r3, #0
 800a176:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800a186:	f04f 0200 	mov.w	r2, #0
 800a18a:	f04f 0300 	mov.w	r3, #0
 800a18e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	f04f 0300 	mov.w	r3, #0
 800a19a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	f04f 0300 	mov.w	r3, #0
 800a1a6:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800a1b6:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a1be:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a1c2:	2209      	movs	r2, #9
 800a1c4:	701a      	strb	r2, [r3, #0]
		return status;
 800a1c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a1ca:	e2bd      	b.n	800a748 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800a1cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1d8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800a1dc:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	f143 0300 	adc.w	r3, r3, #0
 800a1ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1f2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800a1f6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800a1fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1fe:	885b      	ldrh	r3, [r3, #2]
 800a200:	b29b      	uxth	r3, r3
 800a202:	2200      	movs	r2, #0
 800a204:	469a      	mov	sl, r3
 800a206:	4693      	mov	fp, r2
 800a208:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a20c:	fb0a f203 	mul.w	r2, sl, r3
 800a210:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a214:	fb0b f303 	mul.w	r3, fp, r3
 800a218:	441a      	add	r2, r3
 800a21a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a21e:	fba3 450a 	umull	r4, r5, r3, sl
 800a222:	1953      	adds	r3, r2, r5
 800a224:	461d      	mov	r5, r3
 800a226:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800a22a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800a22e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a23a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a23e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a242:	460b      	mov	r3, r1
 800a244:	3301      	adds	r3, #1
 800a246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a24a:	4613      	mov	r3, r2
 800a24c:	f143 0300 	adc.w	r3, r3, #0
 800a250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a254:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800a258:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800a25c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a260:	8adb      	ldrh	r3, [r3, #22]
 800a262:	b29b      	uxth	r3, r3
 800a264:	2200      	movs	r2, #0
 800a266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a26a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a26e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a272:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800a276:	4622      	mov	r2, r4
 800a278:	fb02 f203 	mul.w	r2, r2, r3
 800a27c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a280:	4629      	mov	r1, r5
 800a282:	fb01 f303 	mul.w	r3, r1, r3
 800a286:	441a      	add	r2, r3
 800a288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a28c:	4621      	mov	r1, r4
 800a28e:	fba3 8901 	umull	r8, r9, r3, r1
 800a292:	eb02 0309 	add.w	r3, r2, r9
 800a296:	4699      	mov	r9, r3
 800a298:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800a29c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800a2a0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a2a4:	f04f 0000 	mov.w	r0, #0
 800a2a8:	f04f 0100 	mov.w	r1, #0
 800a2ac:	0319      	lsls	r1, r3, #12
 800a2ae:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800a2b2:	0310      	lsls	r0, r2, #12
 800a2b4:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	if (tmpc != 0) {
 800a2b8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	d035      	beq.n	800a32c <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 800a2c0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a2c4:	0fd9      	lsrs	r1, r3, #31
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a2cc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800a2d0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	1889      	adds	r1, r1, r2
 800a2d8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a2dc:	4629      	mov	r1, r5
 800a2de:	eb43 0101 	adc.w	r1, r3, r1
 800a2e2:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800a2e6:	f04f 0200 	mov.w	r2, #0
 800a2ea:	f04f 0300 	mov.w	r3, #0
 800a2ee:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	084a      	lsrs	r2, r1, #1
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	104b      	asrs	r3, r1, #1
 800a300:	4610      	mov	r0, r2
 800a302:	4619      	mov	r1, r3
 800a304:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a308:	1814      	adds	r4, r2, r0
 800a30a:	67bc      	str	r4, [r7, #120]	; 0x78
 800a30c:	414b      	adcs	r3, r1
 800a30e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a310:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800a314:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 800a318:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a31c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a320:	f7f6 fcca 	bl	8000cb8 <__aeabi_ldivmod>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800a32c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a330:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a334:	fb03 f102 	mul.w	r1, r3, r2
 800a338:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a33c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a340:	fb02 f303 	mul.w	r3, r2, r3
 800a344:	18ca      	adds	r2, r1, r3
 800a346:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a34a:	fba3 1303 	umull	r1, r3, r3, r3
 800a34e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a352:	460b      	mov	r3, r1
 800a354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a362:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800a366:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800a36a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800a36e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a372:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a376:	6739      	str	r1, [r7, #112]	; 0x70
 800a378:	f143 0300 	adc.w	r3, r3, #0
 800a37c:	677b      	str	r3, [r7, #116]	; 0x74
 800a37e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800a382:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800a386:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	da08      	bge.n	800a3a0 <VL53LX_hist_events_consistency_check+0x278>
 800a38e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a392:	1851      	adds	r1, r2, r1
 800a394:	66b9      	str	r1, [r7, #104]	; 0x68
 800a396:	f143 0300 	adc.w	r3, r3, #0
 800a39a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a39c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a3a0:	f04f 0000 	mov.w	r0, #0
 800a3a4:	f04f 0100 	mov.w	r1, #0
 800a3a8:	0b10      	lsrs	r0, r2, #12
 800a3aa:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a3ae:	1319      	asrs	r1, r3, #12
 800a3b0:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 800a3b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a3be:	667a      	str	r2, [r7, #100]	; 0x64
 800a3c0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800a3c4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800a3c8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800a3d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a3dc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	1a51      	subs	r1, r2, r1
 800a3e4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	eb63 0301 	sbc.w	r3, r3, r1
 800a3ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ee:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800a3f2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800a3f6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a3fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a3fe:	fb03 f102 	mul.w	r1, r3, r2
 800a402:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a406:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a40a:	fb02 f303 	mul.w	r3, r2, r3
 800a40e:	4419      	add	r1, r3
 800a410:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a414:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a418:	fba2 2303 	umull	r2, r3, r2, r3
 800a41c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a420:	4613      	mov	r3, r2
 800a422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42a:	18cb      	adds	r3, r1, r3
 800a42c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a430:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800a434:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800a438:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800a43c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a440:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a444:	6539      	str	r1, [r7, #80]	; 0x50
 800a446:	f143 0300 	adc.w	r3, r3, #0
 800a44a:	657b      	str	r3, [r7, #84]	; 0x54
 800a44c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800a450:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800a454:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da08      	bge.n	800a46e <VL53LX_hist_events_consistency_check+0x346>
 800a45c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a460:	1851      	adds	r1, r2, r1
 800a462:	64b9      	str	r1, [r7, #72]	; 0x48
 800a464:	f143 0300 	adc.w	r3, r3, #0
 800a468:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a46a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a46e:	f04f 0000 	mov.w	r0, #0
 800a472:	f04f 0100 	mov.w	r1, #0
 800a476:	0b10      	lsrs	r0, r2, #12
 800a478:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a47c:	1319      	asrs	r1, r3, #12
 800a47e:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800a482:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a486:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800a48a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	2200      	movs	r2, #0
 800a492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a496:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a49a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a49e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	fb02 f203 	mul.w	r2, r2, r3
 800a4a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	fb01 f303 	mul.w	r3, r1, r3
 800a4b2:	441a      	add	r2, r3
 800a4b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	fba3 1301 	umull	r1, r3, r3, r1
 800a4be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4cc:	18d3      	adds	r3, r2, r3
 800a4ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a4d2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800a4d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800a4da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800a4de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a4e2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a4e6:	6439      	str	r1, [r7, #64]	; 0x40
 800a4e8:	f143 0300 	adc.w	r3, r3, #0
 800a4ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800a4f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800a4f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da08      	bge.n	800a510 <VL53LX_hist_events_consistency_check+0x3e8>
 800a4fe:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a502:	1851      	adds	r1, r2, r1
 800a504:	63b9      	str	r1, [r7, #56]	; 0x38
 800a506:	f143 0300 	adc.w	r3, r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a510:	f04f 0000 	mov.w	r0, #0
 800a514:	f04f 0100 	mov.w	r1, #0
 800a518:	0b10      	lsrs	r0, r2, #12
 800a51a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a51e:	1319      	asrs	r1, r3, #12
 800a520:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800a524:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a528:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800a52c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2200      	movs	r2, #0
 800a534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a538:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a540:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800a544:	4622      	mov	r2, r4
 800a546:	fb02 f203 	mul.w	r2, r2, r3
 800a54a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a54e:	4629      	mov	r1, r5
 800a550:	fb01 f303 	mul.w	r3, r1, r3
 800a554:	441a      	add	r2, r3
 800a556:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a55a:	4621      	mov	r1, r4
 800a55c:	fba3 1301 	umull	r1, r3, r3, r1
 800a560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a564:	460b      	mov	r3, r1
 800a566:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a56a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a56e:	18d3      	adds	r3, r2, r3
 800a570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a574:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800a578:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800a57c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800a580:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a584:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a588:	6339      	str	r1, [r7, #48]	; 0x30
 800a58a:	f143 0300 	adc.w	r3, r3, #0
 800a58e:	637b      	str	r3, [r7, #52]	; 0x34
 800a590:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800a594:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800a598:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a59c:	4610      	mov	r0, r2
 800a59e:	4619      	mov	r1, r3
 800a5a0:	2900      	cmp	r1, #0
 800a5a2:	da08      	bge.n	800a5b6 <VL53LX_hist_events_consistency_check+0x48e>
 800a5a4:	f640 73ff 	movw	r3, #4095	; 0xfff
 800a5a8:	18c3      	adds	r3, r0, r3
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ac:	f141 0300 	adc.w	r3, r1, #0
 800a5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a5b6:	f04f 0200 	mov.w	r2, #0
 800a5ba:	f04f 0300 	mov.w	r3, #0
 800a5be:	0b02      	lsrs	r2, r0, #12
 800a5c0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a5c4:	130b      	asrs	r3, r1, #12
 800a5c6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800a5ca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a5ce:	1c91      	adds	r1, r2, #2
 800a5d0:	6239      	str	r1, [r7, #32]
 800a5d2:	f143 0300 	adc.w	r3, r3, #0
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a5dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800a5e0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	da06      	bge.n	800a5f6 <VL53LX_hist_events_consistency_check+0x4ce>
 800a5e8:	1cd1      	adds	r1, r2, #3
 800a5ea:	61b9      	str	r1, [r7, #24]
 800a5ec:	f143 0300 	adc.w	r3, r3, #0
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5f6:	f04f 0000 	mov.w	r0, #0
 800a5fa:	f04f 0100 	mov.w	r1, #0
 800a5fe:	0890      	lsrs	r0, r2, #2
 800a600:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a604:	1099      	asrs	r1, r3, #2
 800a606:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800a60a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a60e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800a610:	2200      	movs	r2, #0
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	617a      	str	r2, [r7, #20]
 800a616:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a61a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800a61e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a622:	1c91      	adds	r1, r2, #2
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	f143 0300 	adc.w	r3, r3, #0
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a630:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800a634:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a638:	2b00      	cmp	r3, #0
 800a63a:	da06      	bge.n	800a64a <VL53LX_hist_events_consistency_check+0x522>
 800a63c:	1cd1      	adds	r1, r2, #3
 800a63e:	6039      	str	r1, [r7, #0]
 800a640:	f143 0300 	adc.w	r3, r3, #0
 800a644:	607b      	str	r3, [r7, #4]
 800a646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64a:	f04f 0000 	mov.w	r0, #0
 800a64e:	f04f 0100 	mov.w	r1, #0
 800a652:	0890      	lsrs	r0, r2, #2
 800a654:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a658:	1099      	asrs	r1, r3, #2
 800a65a:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800a65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a662:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800a664:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 800a668:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800a66a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800a66e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800a670:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800a674:	4413      	add	r3, r2
 800a676:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800a67a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	4618      	mov	r0, r3
 800a682:	f001 ffb0 	bl	800c5e6 <VL53LX_isqrt>
 800a686:	4603      	mov	r3, r0
 800a688:	461a      	mov	r2, r3
	*pevents_tolerance =
 800a68a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a68e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800a690:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800a69a:	fb03 f202 	mul.w	r2, r3, r2
 800a69e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a6a2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800a6a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f103 0220 	add.w	r2, r3, #32
 800a6ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a6b2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800a6b4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da00      	bge.n	800a6c0 <VL53LX_hist_events_consistency_check+0x598>
 800a6be:	333f      	adds	r3, #63	; 0x3f
 800a6c0:	119b      	asrs	r3, r3, #6
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a6c8:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800a6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800a6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e0:	1a9b      	subs	r3, r3, r2
 800a6e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800a6e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	da08      	bge.n	800a704 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800a6f2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fa:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a6fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	e007      	b.n	800a714 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800a704:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a708:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a70c:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a70e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a712:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800a714:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	dd0b      	ble.n	800a73c <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800a724:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a728:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800a72a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800a72e:	429a      	cmp	r2, r3
 800a730:	d204      	bcs.n	800a73c <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800a732:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a736:	2214      	movs	r2, #20
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e003      	b.n	800a744 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a73c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a740:	2209      	movs	r2, #9
 800a742:	701a      	strb	r2, [r3, #0]





	return status;
 800a744:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800a748:	4618      	mov	r0, r3
 800a74a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800a74e:	46bd      	mov	sp, r7
 800a750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a754 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800a762:	2300      	movs	r3, #0
 800a764:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a776:	429a      	cmp	r2, r3
 800a778:	dd0b      	ble.n	800a792 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a780:	b29a      	uxth	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a788:	b29b      	uxth	r3, r3
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	b29b      	uxth	r3, r3
		delta_mm =
 800a78e:	82fb      	strh	r3, [r7, #22]
 800a790:	e00a      	b.n	800a7a8 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	b29b      	uxth	r3, r3
		delta_mm =
 800a7a6:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800a7a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dd09      	ble.n	800a7c4 <VL53LX_hist_merged_pulse_check+0x70>
 800a7b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	dd03      	ble.n	800a7c4 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2216      	movs	r2, #22
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	e002      	b.n	800a7ca <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2209      	movs	r2, #9
 800a7c8:	701a      	strb	r2, [r3, #0]

	return status;
 800a7ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b08e      	sub	sp, #56	; 0x38
 800a7de:	af04      	add	r7, sp, #16
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	60b9      	str	r1, [r7, #8]
 800a7e4:	607a      	str	r2, [r7, #4]
 800a7e6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	f893 3288 	ldrb.w	r3, [r3, #648]	; 0x288
 800a800:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800a808:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a810:	2b09      	cmp	r3, #9
 800a812:	d009      	beq.n	800a828 <VL53LX_hist_xmonitor_consistency_check+0x4e>
		prange_curr->range_status ==
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a81a:	2b13      	cmp	r3, #19
 800a81c:	d004      	beq.n	800a828 <VL53LX_hist_xmonitor_consistency_check+0x4e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a824:	2b14      	cmp	r3, #20
 800a826:	d129      	bne.n	800a87c <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d009      	beq.n	800a846 <VL53LX_hist_xmonitor_consistency_check+0x6c>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a838:	2b13      	cmp	r3, #19
 800a83a:	d004      	beq.n	800a846 <VL53LX_hist_xmonitor_consistency_check+0x6c>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a842:	2b14      	cmp	r3, #20
 800a844:	d11a      	bne.n	800a87c <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2209      	movs	r2, #9
 800a84a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800a858:	8bb9      	ldrh	r1, [r7, #28]
 800a85a:	7ff8      	ldrb	r0, [r7, #31]
 800a85c:	9303      	str	r3, [sp, #12]
 800a85e:	f107 0318 	add.w	r3, r7, #24
 800a862:	9302      	str	r3, [sp, #8]
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	4613      	mov	r3, r2
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	f7ff fc59 	bl	800a128 <VL53LX_hist_events_consistency_check>
 800a876:	4603      	mov	r3, r0
 800a878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800a87c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a880:	4618      	mov	r0, r3
 800a882:	3728      	adds	r7, #40	; 0x28
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a894:	2300      	movs	r3, #0
 800a896:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d019      	beq.n	800a8e8 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 fffa 	bl	800c8b4 <VL53LX_calc_pll_period_mm>
 800a8c0:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	fb02 f303 	mul.w	r3, r2, r3
 800a8d4:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a8dc:	0bdb      	lsrs	r3, r3, #15
 800a8de:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	b21a      	sxth	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a8e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3720      	adds	r7, #32
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800a8f4:	b590      	push	{r4, r7, lr}
 800a8f6:	b08d      	sub	sp, #52	; 0x34
 800a8f8:	af04      	add	r7, sp, #16
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	461a      	mov	r2, r3
 800a902:	4623      	mov	r3, r4
 800a904:	80fb      	strh	r3, [r7, #6]
 800a906:	4603      	mov	r3, r0
 800a908:	80bb      	strh	r3, [r7, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70fb      	strb	r3, [r7, #3]
 800a90e:	4613      	mov	r3, r2
 800a910:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800a932:	78b9      	ldrb	r1, [r7, #2]
 800a934:	78f8      	ldrb	r0, [r7, #3]
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	9303      	str	r3, [sp, #12]
 800a93c:	f107 030e 	add.w	r3, r7, #14
 800a940:	9302      	str	r3, [sp, #8]
 800a942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	23ff      	movs	r3, #255	; 0xff
 800a94e:	22c7      	movs	r2, #199	; 0xc7
 800a950:	f000 fa03 	bl	800ad5a <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d050      	beq.n	800a9fc <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800a95a:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d04d      	beq.n	800a9fc <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800a960:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800a964:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a968:	78b9      	ldrb	r1, [r7, #2]
 800a96a:	78f8      	ldrb	r0, [r7, #3]
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	9303      	str	r3, [sp, #12]
 800a972:	f107 030a 	add.w	r3, r7, #10
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	4623      	mov	r3, r4
 800a984:	f000 f9e9 	bl	800ad5a <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800a98c:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800a98e:	897b      	ldrh	r3, [r7, #10]
 800a990:	461a      	mov	r2, r3
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800a99a:	89fb      	ldrh	r3, [r7, #14]
 800a99c:	461a      	mov	r2, r3
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9a4:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800a9aa:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800a9ac:	893b      	ldrh	r3, [r7, #8]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	fb02 f303 	mul.w	r3, r2, r3
 800a9b6:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800a9b8:	89bb      	ldrh	r3, [r7, #12]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9c2:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800a9c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
 800a9ce:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800a9d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	fb02 f303 	mul.w	r3, r2, r3
 800a9da:	69fa      	ldr	r2, [r7, #28]
 800a9dc:	4413      	add	r3, r2
 800a9de:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a9e0:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800a9e2:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a9e4:	4413      	add	r3, r2
 800a9e6:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d008      	beq.n	800aa00 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	009a      	lsls	r2, r3, #2
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a9f8:	61fb      	str	r3, [r7, #28]
 800a9fa:	e002      	b.n	800aa02 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800a9fc:	bf00      	nop
 800a9fe:	e000      	b.n	800aa02 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800aa00:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	b21a      	sxth	r2, r3
 800aa06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa08:	801a      	strh	r2, [r3, #0]

}
 800aa0a:	bf00      	nop
 800aa0c:	3724      	adds	r7, #36	; 0x24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd90      	pop	{r4, r7, pc}

0800aa12 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	603b      	str	r3, [r7, #0]
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	08db      	lsrs	r3, r3, #3
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	f003 0307 	and.w	r3, r3, #7
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4093      	lsls	r3, r2
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	701a      	strb	r2, [r3, #0]

}
 800aa48:	bf00      	nop
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	603a      	str	r2, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
 800aa60:	460b      	mov	r3, r1
 800aa62:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	2b07      	cmp	r3, #7
 800aa68:	d90a      	bls.n	800aa80 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800aa6a:	79bb      	ldrb	r3, [r7, #6]
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	3b71      	subs	r3, #113	; 0x71
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800aa7e:	e00a      	b.n	800aa96 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800aa80:	79bb      	ldrb	r3, [r7, #6]
 800aa82:	f1c3 030f 	rsb	r3, r3, #15
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	4413      	add	r3, r2
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	701a      	strb	r2, [r3, #0]
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
 800aaae:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	091b      	lsrs	r3, r3, #4
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	f003 030f 	and.w	r3, r3, #15
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	701a      	strb	r2, [r3, #0]

}
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	4603      	mov	r3, r0
 800aada:	603a      	str	r2, [r7, #0]
 800aadc:	71fb      	strb	r3, [r7, #7]
 800aade:	460b      	mov	r3, r1
 800aae0:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800aae2:	79bb      	ldrb	r3, [r7, #6]
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	4413      	add	r3, r2
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	701a      	strb	r2, [r3, #0]

}
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b086      	sub	sp, #24
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	60ba      	str	r2, [r7, #8]
 800ab06:	607b      	str	r3, [r7, #4]
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800ab20:	f107 0217 	add.w	r2, r7, #23
 800ab24:	f107 0116 	add.w	r1, r7, #22
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f002 f93c 	bl	800cda8 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800ab30:	f107 0214 	add.w	r2, r7, #20
 800ab34:	f107 0115 	add.w	r1, r7, #21
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff ffb1 	bl	800aaa2 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	7d7b      	ldrb	r3, [r7, #21]
 800ab46:	3301      	adds	r3, #1
 800ab48:	0fd9      	lsrs	r1, r3, #31
 800ab4a:	440b      	add	r3, r1
 800ab4c:	105b      	asrs	r3, r3, #1
 800ab4e:	425b      	negs	r3, r3
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	4413      	add	r3, r2
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	b21a      	sxth	r2, r3
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	da02      	bge.n	800ab6c <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	7d7b      	ldrb	r3, [r7, #21]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	b21a      	sxth	r2, r3
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab88:	2b0f      	cmp	r3, #15
 800ab8a:	dd02      	ble.n	800ab92 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	220f      	movs	r2, #15
 800ab90:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800ab92:	7dbb      	ldrb	r3, [r7, #22]
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	7d3b      	ldrb	r3, [r7, #20]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	0fd9      	lsrs	r1, r3, #31
 800ab9c:	440b      	add	r3, r1
 800ab9e:	105b      	asrs	r3, r3, #1
 800aba0:	425b      	negs	r3, r3
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	4413      	add	r3, r2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	b21a      	sxth	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	da02      	bge.n	800abbe <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	7d3b      	ldrb	r3, [r7, #20]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	4413      	add	r3, r2
 800abcc:	b29b      	uxth	r3, r3
 800abce:	b21a      	sxth	r2, r3
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abda:	2b0f      	cmp	r3, #15
 800abdc:	dd02      	ble.n	800abe4 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	220f      	movs	r2, #15
 800abe2:	801a      	strh	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	460a      	mov	r2, r1
 800abf6:	71fb      	strb	r3, [r7, #7]
 800abf8:	4613      	mov	r3, r2
 800abfa:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	f003 0303 	and.w	r3, r3, #3
 800ac06:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800ac08:	79bb      	ldrb	r3, [r7, #6]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d104      	bne.n	800ac20 <VL53LX_is_aperture_location+0x34>
 800ac16:	7b7b      	ldrb	r3, [r7, #13]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d101      	bne.n	800ac20 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d104      	bne.n	800ac30 <VL53LX_is_aperture_location+0x44>
 800ac26:	7b7b      	ldrb	r3, [r7, #13]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800ac3e:	b590      	push	{r4, r7, lr}
 800ac40:	b08b      	sub	sp, #44	; 0x2c
 800ac42:	af02      	add	r7, sp, #8
 800ac44:	603a      	str	r2, [r7, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	4603      	mov	r3, r0
 800ac4a:	71fb      	strb	r3, [r7, #7]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	71bb      	strb	r3, [r7, #6]
 800ac50:	4613      	mov	r3, r2
 800ac52:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800ac80:	f107 0416 	add.w	r4, r7, #22
 800ac84:	f107 0218 	add.w	r2, r7, #24
 800ac88:	79b9      	ldrb	r1, [r7, #6]
 800ac8a:	79f8      	ldrb	r0, [r7, #7]
 800ac8c:	f107 0312 	add.w	r3, r7, #18
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	f107 0314 	add.w	r3, r7, #20
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	4623      	mov	r3, r4
 800ac9a:	f7ff ff30 	bl	800aafe <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2200      	movs	r2, #0
 800aca2:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800aca4:	8afb      	ldrh	r3, [r7, #22]
 800aca6:	83bb      	strh	r3, [r7, #28]
 800aca8:	e04c      	b.n	800ad44 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800acaa:	8b3b      	ldrh	r3, [r7, #24]
 800acac:	83fb      	strh	r3, [r7, #30]
 800acae:	e03d      	b.n	800ad2c <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800acb0:	8bbb      	ldrh	r3, [r7, #28]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	8bfa      	ldrh	r2, [r7, #30]
 800acb6:	b2d1      	uxtb	r1, r2
 800acb8:	f107 0211 	add.w	r2, r7, #17
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fec9 	bl	800aa54 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800acc2:	7c78      	ldrb	r0, [r7, #17]
 800acc4:	f107 030e 	add.w	r3, r7, #14
 800acc8:	f107 020f 	add.w	r2, r7, #15
 800accc:	f107 0110 	add.w	r1, r7, #16
 800acd0:	f7ff fe9f 	bl	800aa12 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800acd4:	7c3b      	ldrb	r3, [r7, #16]
 800acd6:	461a      	mov	r2, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	4413      	add	r3, r2
 800acdc:	781a      	ldrb	r2, [r3, #0]
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	4013      	ands	r3, r2
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01b      	beq.n	800ad20 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800ace8:	8bbb      	ldrh	r3, [r7, #28]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	8bfa      	ldrh	r2, [r7, #30]
 800acee:	b2d2      	uxtb	r2, r2
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7ff ff7a 	bl	800abec <VL53LX_is_aperture_location>
 800acf8:	4603      	mov	r3, r0
 800acfa:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800acfc:	7efb      	ldrb	r3, [r7, #27]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d007      	beq.n	800ad12 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	881a      	ldrh	r2, [r3, #0]
 800ad06:	88bb      	ldrh	r3, [r7, #4]
 800ad08:	4413      	add	r3, r2
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	801a      	strh	r2, [r3, #0]
 800ad10:	e006      	b.n	800ad20 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ad20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	3301      	adds	r3, #1
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	83fb      	strh	r3, [r7, #30]
 800ad2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ad30:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	ddbb      	ble.n	800acb0 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ad38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	3301      	adds	r3, #1
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	83bb      	strh	r3, [r7, #28]
 800ad44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad48:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	ddac      	ble.n	800acaa <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	3724      	adds	r7, #36	; 0x24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd90      	pop	{r4, r7, pc}

0800ad5a <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800ad5a:	b590      	push	{r4, r7, lr}
 800ad5c:	b08d      	sub	sp, #52	; 0x34
 800ad5e:	af02      	add	r7, sp, #8
 800ad60:	4604      	mov	r4, r0
 800ad62:	4608      	mov	r0, r1
 800ad64:	4611      	mov	r1, r2
 800ad66:	461a      	mov	r2, r3
 800ad68:	4623      	mov	r3, r4
 800ad6a:	71fb      	strb	r3, [r7, #7]
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	71bb      	strb	r3, [r7, #6]
 800ad70:	460b      	mov	r3, r1
 800ad72:	717b      	strb	r3, [r7, #5]
 800ad74:	4613      	mov	r3, r2
 800ad76:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800adba:	f107 041c 	add.w	r4, r7, #28
 800adbe:	f107 021e 	add.w	r2, r7, #30
 800adc2:	79b9      	ldrb	r1, [r7, #6]
 800adc4:	79f8      	ldrb	r0, [r7, #7]
 800adc6:	f107 0318 	add.w	r3, r7, #24
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	f107 031a 	add.w	r3, r7, #26
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	4623      	mov	r3, r4
 800add4:	f7ff fe93 	bl	800aafe <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800add8:	f107 0414 	add.w	r4, r7, #20
 800addc:	f107 0216 	add.w	r2, r7, #22
 800ade0:	7939      	ldrb	r1, [r7, #4]
 800ade2:	7978      	ldrb	r0, [r7, #5]
 800ade4:	f107 0310 	add.w	r3, r7, #16
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	f107 0312 	add.w	r3, r7, #18
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	4623      	mov	r3, r4
 800adf2:	f7ff fe84 	bl	800aafe <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800adf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf8:	2200      	movs	r2, #0
 800adfa:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800adfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adfe:	2200      	movs	r2, #0
 800ae00:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ae02:	8abb      	ldrh	r3, [r7, #20]
 800ae04:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ae06:	e06c      	b.n	800aee2 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ae08:	8afb      	ldrh	r3, [r7, #22]
 800ae0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ae0c:	e05d      	b.n	800aeca <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800ae0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae14:	b2d1      	uxtb	r1, r2
 800ae16:	f107 020f 	add.w	r2, r7, #15
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff fe1a 	bl	800aa54 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800ae20:	7bf8      	ldrb	r0, [r7, #15]
 800ae22:	f107 030c 	add.w	r3, r7, #12
 800ae26:	f107 020d 	add.w	r2, r7, #13
 800ae2a:	f107 010e 	add.w	r1, r7, #14
 800ae2e:	f7ff fdf0 	bl	800aa12 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae38:	4413      	add	r3, r2
 800ae3a:	781a      	ldrb	r2, [r3, #0]
 800ae3c:	7b3b      	ldrb	r3, [r7, #12]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d03b      	beq.n	800aebe <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800ae46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	4611      	mov	r1, r2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff fecb 	bl	800abec <VL53LX_is_aperture_location>
 800ae56:	4603      	mov	r3, r0
 800ae58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800ae5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800ae64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae66:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae68:	e002      	b.n	800ae70 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800ae6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae6e:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ae70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ae74:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	db19      	blt.n	800aeb0 <VL53LX_calc_mm_effective_spads+0x156>
 800ae7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ae80:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ae84:	429a      	cmp	r2, r3
 800ae86:	dc13      	bgt.n	800aeb0 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ae88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ae8c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ae90:	429a      	cmp	r2, r3
 800ae92:	db0d      	blt.n	800aeb0 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ae94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ae98:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	dc07      	bgt.n	800aeb0 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800aea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea2:	881a      	ldrh	r2, [r3, #0]
 800aea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aea6:	4413      	add	r3, r2
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeac:	801a      	strh	r2, [r3, #0]
 800aeae:	e006      	b.n	800aebe <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800aeb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb2:	881a      	ldrh	r2, [r3, #0]
 800aeb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeb6:	4413      	add	r3, r2
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aebc:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800aebe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	3301      	adds	r3, #1
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aeca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aece:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800aed2:	429a      	cmp	r2, r3
 800aed4:	dd9b      	ble.n	800ae0e <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800aed6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	3301      	adds	r3, #1
 800aede:	b29b      	uxth	r3, r3
 800aee0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aee2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800aee6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800aeea:	429a      	cmp	r2, r3
 800aeec:	dd8c      	ble.n	800ae08 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	372c      	adds	r7, #44	; 0x2c
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd90      	pop	{r4, r7, pc}

0800aef8 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7fd ffde 	bl	8008ecc <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	7c9a      	ldrb	r2, [r3, #18]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3314      	adds	r3, #20
 800af3a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800af3c:	2300      	movs	r3, #0
 800af3e:	75fb      	strb	r3, [r7, #23]
 800af40:	e06b      	b.n	800b01a <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800af42:	7dfb      	ldrb	r3, [r7, #23]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d034      	beq.n	800afb6 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800af4c:	e05f      	b.n	800b00e <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800af86:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	8a9a      	ldrh	r2, [r3, #20]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	601a      	str	r2, [r3, #0]

			break;
 800afb4:	e02b      	b.n	800b00e <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800afe6:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	611a      	str	r2, [r3, #16]
			break;
 800b00c:	bf00      	nop
		}

		pdata++;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	334c      	adds	r3, #76	; 0x4c
 800b012:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	3301      	adds	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	7c9b      	ldrb	r3, [r3, #18]
 800b01e:	7dfa      	ldrb	r2, [r7, #23]
 800b020:	429a      	cmp	r2, r3
 800b022:	d38e      	bcc.n	800af42 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800b024:	bf00      	nop
 800b026:	bf00      	nop
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800b02e:	b480      	push	{r7}
 800b030:	b089      	sub	sp, #36	; 0x24
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b036:	2300      	movs	r3, #0
 800b038:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b044:	3320      	adds	r3, #32
 800b046:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800b04e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b056:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	4413      	add	r3, r2
 800b068:	3302      	adds	r3, #2
 800b06a:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800b090:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3724      	adds	r7, #36	; 0x24
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b08b      	sub	sp, #44	; 0x2c
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b0b8:	3320      	adds	r3, #32
 800b0ba:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b0c2:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b0ca:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800b0d2:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800b0d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0d8:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800b0da:	7bfa      	ldrb	r2, [r7, #15]
 800b0dc:	6939      	ldr	r1, [r7, #16]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3306      	adds	r3, #6
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b0f4:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0fc:	e01a      	b.n	800b134 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800b0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	214c      	movs	r1, #76	; 0x4c
 800b106:	fb01 f303 	mul.w	r3, r1, r3
 800b10a:	4413      	add	r3, r2
 800b10c:	334a      	adds	r3, #74	; 0x4a
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b112:	429a      	cmp	r2, r3
 800b114:	d209      	bcs.n	800b12a <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800b116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	214c      	movs	r1, #76	; 0x4c
 800b11e:	fb01 f303 	mul.w	r3, r1, r3
 800b122:	4413      	add	r3, r2
 800b124:	334a      	adds	r3, #74	; 0x4a
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800b12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b12e:	3301      	adds	r3, #1
 800b130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	7c9b      	ldrb	r3, [r3, #18]
 800b138:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d3de      	bcc.n	800b0fe <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800b140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d103      	bne.n	800b14e <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800b146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b14a:	623b      	str	r3, [r7, #32]
 800b14c:	e00e      	b.n	800b16c <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800b14e:	89bb      	ldrh	r3, [r7, #12]
 800b150:	039b      	lsls	r3, r3, #14
 800b152:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800b154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b156:	6a3a      	ldr	r2, [r7, #32]
 800b158:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b164:	d302      	bcc.n	800b16c <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800b166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b16a:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800b16c:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800b172:	6939      	ldr	r1, [r7, #16]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	440b      	add	r3, r1
 800b17e:	3306      	adds	r3, #6
 800b180:	4602      	mov	r2, r0
 800b182:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800b184:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	372c      	adds	r7, #44	; 0x2c
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	; 0x28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	332c      	adds	r3, #44	; 0x2c
 800b1aa:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	33c2      	adds	r3, #194	; 0xc2
 800b1b0:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800b1b8:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	3302      	adds	r3, #2
 800b1be:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d11e      	bne.n	800b21c <VL53LX_multizone_hist_bins_update+0x88>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10b      	bne.n	800b1fc <VL53LX_multizone_hist_bins_update+0x68>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d05d      	beq.n	800b2be <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	719a      	strb	r2, [r3, #6]
 800b21a:	e050      	b.n	800b2be <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b222:	461a      	mov	r2, r3
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	4413      	add	r3, r2
 800b228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d11e      	bne.n	800b26e <VL53LX_multizone_hist_bins_update+0xda>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10b      	bne.n	800b24e <VL53LX_multizone_hist_bins_update+0xba>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d034      	beq.n	800b2be <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	719a      	strb	r2, [r3, #6]
 800b26c:	e027      	b.n	800b2be <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b274:	461a      	mov	r2, r3
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	4413      	add	r3, r2
 800b27a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d11d      	bne.n	800b2be <VL53LX_multizone_hist_bins_update+0x12a>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800b282:	7bfb      	ldrb	r3, [r7, #15]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10b      	bne.n	800b2a0 <VL53LX_multizone_hist_bins_update+0x10c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00b      	beq.n	800b2be <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800b2be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d109      	bne.n	800b2da <VL53LX_multizone_hist_bins_update+0x146>
		VL53LX_copy_hist_bins_to_static_cfg(
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	f203 3136 	addw	r1, r3, #822	; 0x336
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6978      	ldr	r0, [r7, #20]
 800b2d6:	f7fd f9cd 	bl	8008674 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800b2da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3728      	adds	r7, #40	; 0x28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b089      	sub	sp, #36	; 0x24
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	f893 3357 	ldrb.w	r3, [r3, #855]	; 0x357
 800b304:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d103      	bne.n	800b314 <VL53LX_update_internal_stream_counters+0x2e>


		*pinternal_stream_count = external_stream_count;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7afa      	ldrb	r2, [r7, #11]
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	e01e      	b.n	800b352 <VL53LX_update_internal_stream_counters+0x6c>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	429a      	cmp	r2, r3
 800b320:	d111      	bne.n	800b346 <VL53LX_update_internal_stream_counters+0x60>


		if (*pinternal_stream_count == 0xFF)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2bff      	cmp	r3, #255	; 0xff
 800b328:	d103      	bne.n	800b332 <VL53LX_update_internal_stream_counters+0x4c>
			*pinternal_stream_count = 0x80;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2280      	movs	r2, #128	; 0x80
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	e005      	b.n	800b33e <VL53LX_update_internal_stream_counters+0x58>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	3301      	adds	r3, #1
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
 800b344:	e005      	b.n	800b352 <VL53LX_update_internal_stream_counters+0x6c>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	3301      	adds	r3, #1
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800b352:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3724      	adds	r7, #36	; 0x24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800b362:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b366:	b0a2      	sub	sp, #136	; 0x88
 800b368:	af00      	add	r7, sp, #0
 800b36a:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b374:	673b      	str	r3, [r7, #112]	; 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b378:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b37c:	3320      	adds	r3, #32
 800b37e:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800b380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b382:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b386:	330c      	adds	r3, #12
 800b388:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b38a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b38c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800b390:	3310      	adds	r3, #16
 800b392:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800b394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b396:	663b      	str	r3, [r7, #96]	; 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800b398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b39a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b39e:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800b3a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a2:	69db      	ldr	r3, [r3, #28]
 800b3a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800b3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800b3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800b3b0:	4413      	add	r3, r2
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	4615      	mov	r5, r2
 800b3b8:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	if (peak_duration_us == 0)
 800b3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d103      	bne.n	800b3cc <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800b3c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800b3cc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f04f 0000 	mov.w	r0, #0
 800b3d8:	f04f 0100 	mov.w	r1, #0
 800b3dc:	0159      	lsls	r1, r3, #5
 800b3de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b3e2:	0150      	lsls	r0, r2, #5
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	ebb2 0804 	subs.w	r8, r2, r4
 800b3ec:	eb63 0905 	sbc.w	r9, r3, r5
 800b3f0:	f04f 0200 	mov.w	r2, #0
 800b3f4:	f04f 0300 	mov.w	r3, #0
 800b3f8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b3fc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800b400:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b404:	4690      	mov	r8, r2
 800b406:	4699      	mov	r9, r3
 800b408:	eb18 0304 	adds.w	r3, r8, r4
 800b40c:	633b      	str	r3, [r7, #48]	; 0x30
 800b40e:	eb49 0305 	adc.w	r3, r9, r5
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b420:	4629      	mov	r1, r5
 800b422:	00cb      	lsls	r3, r1, #3
 800b424:	4621      	mov	r1, r4
 800b426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b42a:	4621      	mov	r1, r4
 800b42c:	00ca      	lsls	r2, r1, #3
 800b42e:	4610      	mov	r0, r2
 800b430:	4619      	mov	r1, r3
 800b432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b436:	2200      	movs	r2, #0
 800b438:	643b      	str	r3, [r7, #64]	; 0x40
 800b43a:	647a      	str	r2, [r7, #68]	; 0x44
 800b43c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b440:	f7f5 fc8a 	bl	8000d58 <__aeabi_uldivmod>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800b44c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800b450:	4622      	mov	r2, r4
 800b452:	462b      	mov	r3, r5
 800b454:	f04f 0000 	mov.w	r0, #0
 800b458:	f04f 0100 	mov.w	r1, #0
 800b45c:	0159      	lsls	r1, r3, #5
 800b45e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b462:	0150      	lsls	r0, r2, #5
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	ebb2 0a04 	subs.w	sl, r2, r4
 800b46c:	eb63 0b05 	sbc.w	fp, r3, r5
 800b470:	f04f 0200 	mov.w	r2, #0
 800b474:	f04f 0300 	mov.w	r3, #0
 800b478:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b47c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800b480:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800b484:	4692      	mov	sl, r2
 800b486:	469b      	mov	fp, r3
 800b488:	eb1a 0304 	adds.w	r3, sl, r4
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b48e:	eb4b 0305 	adc.w	r3, fp, r5
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	f04f 0300 	mov.w	r3, #0
 800b49c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	00cb      	lsls	r3, r1, #3
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	00ca      	lsls	r2, r1, #3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ba:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b4bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b4c0:	f7f5 fc4a 	bl	8000d58 <__aeabi_uldivmod>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800b4cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4d2:	8ad2      	ldrh	r2, [r2, #22]
 800b4d4:	fb02 f303 	mul.w	r3, r2, r3
 800b4d8:	2200      	movs	r2, #0
 800b4da:	623b      	str	r3, [r7, #32]
 800b4dc:	627a      	str	r2, [r7, #36]	; 0x24
 800b4de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b4e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800b4e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	d105      	bne.n	800b4fa <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800b4ee:	f04f 0201 	mov.w	r2, #1
 800b4f2:	f04f 0300 	mov.w	r3, #0
 800b4f6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800b4fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	f04f 0400 	mov.w	r4, #0
 800b506:	f04f 0500 	mov.w	r5, #0
 800b50a:	015d      	lsls	r5, r3, #5
 800b50c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b510:	0154      	lsls	r4, r2, #5
 800b512:	4622      	mov	r2, r4
 800b514:	462b      	mov	r3, r5
 800b516:	1a14      	subs	r4, r2, r0
 800b518:	61bc      	str	r4, [r7, #24]
 800b51a:	eb63 0301 	sbc.w	r3, r3, r1
 800b51e:	61fb      	str	r3, [r7, #28]
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800b52c:	464c      	mov	r4, r9
 800b52e:	00a3      	lsls	r3, r4, #2
 800b530:	4644      	mov	r4, r8
 800b532:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b536:	4644      	mov	r4, r8
 800b538:	00a2      	lsls	r2, r4, #2
 800b53a:	4614      	mov	r4, r2
 800b53c:	461d      	mov	r5, r3
 800b53e:	4623      	mov	r3, r4
 800b540:	181b      	adds	r3, r3, r0
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	462b      	mov	r3, r5
 800b546:	eb41 0303 	adc.w	r3, r1, r3
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	f04f 0200 	mov.w	r2, #0
 800b550:	f04f 0300 	mov.w	r3, #0
 800b554:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b558:	4629      	mov	r1, r5
 800b55a:	02cb      	lsls	r3, r1, #11
 800b55c:	4621      	mov	r1, r4
 800b55e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800b562:	4621      	mov	r1, r4
 800b564:	02ca      	lsls	r2, r1, #11
 800b566:	461c      	mov	r4, r3
 800b568:	4613      	mov	r3, r2
 800b56a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800b56e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b576:	f7f5 fbef 	bl	8000d58 <__aeabi_uldivmod>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800b582:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	f04f 0400 	mov.w	r4, #0
 800b58e:	f04f 0500 	mov.w	r5, #0
 800b592:	015d      	lsls	r5, r3, #5
 800b594:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b598:	0154      	lsls	r4, r2, #5
 800b59a:	4622      	mov	r2, r4
 800b59c:	462b      	mov	r3, r5
 800b59e:	1a14      	subs	r4, r2, r0
 800b5a0:	60bc      	str	r4, [r7, #8]
 800b5a2:	eb63 0301 	sbc.w	r3, r3, r1
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	f04f 0200 	mov.w	r2, #0
 800b5ac:	f04f 0300 	mov.w	r3, #0
 800b5b0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800b5b4:	464c      	mov	r4, r9
 800b5b6:	00a3      	lsls	r3, r4, #2
 800b5b8:	4644      	mov	r4, r8
 800b5ba:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b5be:	4644      	mov	r4, r8
 800b5c0:	00a2      	lsls	r2, r4, #2
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	461d      	mov	r5, r3
 800b5c6:	4623      	mov	r3, r4
 800b5c8:	181b      	adds	r3, r3, r0
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	eb41 0303 	adc.w	r3, r1, r3
 800b5d2:	607b      	str	r3, [r7, #4]
 800b5d4:	f04f 0200 	mov.w	r2, #0
 800b5d8:	f04f 0300 	mov.w	r3, #0
 800b5dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	02cb      	lsls	r3, r1, #11
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	02ca      	lsls	r2, r1, #11
 800b5ee:	461c      	mov	r4, r3
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800b5f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b5fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b5fe:	f7f5 fbab 	bl	8000d58 <__aeabi_uldivmod>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800b60a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b60e:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800b610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d802      	bhi.n	800b61e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800b618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b61a:	2202      	movs	r2, #2
 800b61c:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800b61e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800b622:	4618      	mov	r0, r3
 800b624:	3788      	adds	r7, #136	; 0x88
 800b626:	46bd      	mov	sp, r7
 800b628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b62c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b094      	sub	sp, #80	; 0x50
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	633b      	str	r3, [r7, #48]	; 0x30
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800b652:	3314      	adds	r3, #20
 800b654:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t max, nXtalk, cXtalk;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800b656:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d107      	bne.n	800b66e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x42>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	889b      	ldrh	r3, [r3, #4]
 800b662:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	609a      	str	r2, [r3, #8]
 800b66c:	e002      	b.n	800b674 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x48>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	64bb      	str	r3, [r7, #72]	; 0x48
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	899b      	ldrh	r3, [r3, #12]
 800b67e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	89db      	ldrh	r3, [r3, #14]
 800b686:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x72>
		(pconfig->scaler_calc_method == 1)) &&
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d126      	bne.n	800b6ec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d022      	beq.n	800b6ec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b6a6:	f107 0317 	add.w	r3, r7, #23
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 fe52 	bl	800c356 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x90>
			histo_merge_nb = 1;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d003      	beq.n	800b6ce <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa2>
			orig_xtalk_offset =
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6cc:	e006      	b.n	800b6dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	3202      	adds	r2, #2
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	64bb      	str	r3, [r7, #72]	; 0x48

		orig_x_gradient =
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6de:	889b      	ldrh	r3, [r3, #4]
 800b6e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	88db      	ldrh	r3, [r3, #6]
 800b6e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
 800b6f6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		pout->gradient_zero_flag |= 0x01;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	795b      	ldrb	r3, [r3, #5]
 800b702:	f043 0301 	orr.w	r3, r3, #1
 800b706:	b2da      	uxtb	r2, r3
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800b716:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x02;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	795b      	ldrb	r3, [r3, #5]
 800b722:	f043 0302 	orr.w	r3, r3, #2
 800b726:	b2da      	uxtb	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800b72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10a>
		orig_xtalk_offset = 1;
 800b732:	2301      	movs	r3, #1
 800b734:	64bb      	str	r3, [r7, #72]	; 0x48



	if (pconfig->user_scaler_set == 1) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d108      	bne.n	800b752 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x126>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b74c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b750:	e019      	b.n	800b786 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800b752:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b756:	019b      	lsls	r3, r3, #6
 800b758:	461a      	mov	r2, r3
 800b75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b75c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b760:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b76a:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800b76c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b770:	019b      	lsls	r3, r3, #6
 800b772:	461a      	mov	r2, r3
 800b774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b776:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b784:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d12a      	bne.n	800b7e6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ba>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800b798:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a0:	119b      	asrs	r3, r3, #6
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7aa:	db02      	blt.n	800b7b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x186>
			itemp32 = 0xFFFF;
 800b7ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800b7c2:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ca:	119b      	asrs	r3, r3, #6
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d4:	db02      	blt.n	800b7dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b0>
			itemp32 = 0xFFFF;
 800b7d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7de:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	81da      	strh	r2, [r3, #14]
 800b7e4:	e042      	b.n	800b86c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x240>
	} else if (pconfig->scaler_calc_method == 1) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d13d      	bne.n	800b86c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x240>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b7f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800b7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	da00      	bge.n	800b802 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d6>
 800b800:	330f      	adds	r3, #15
 800b802:	111b      	asrs	r3, r3, #4
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 << 2;
 800b806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800b80c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b812:	4413      	add	r3, r2
 800b814:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b81c:	db02      	blt.n	800b824 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f8>
			itemp32 = 0xFFFF;
 800b81e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b822:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b826:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800b836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b838:	4a52      	ldr	r2, [pc, #328]	; (800b984 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800b83a:	fb82 1203 	smull	r1, r2, r2, r3
 800b83e:	1152      	asrs	r2, r2, #5
 800b840:	17db      	asrs	r3, r3, #31
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 << 2;
 800b846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800b84c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b852:	4413      	add	r3, r2
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b85c:	db02      	blt.n	800b864 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x238>
			itemp32 = 0xFFFF;
 800b85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b866:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	785b      	ldrb	r3, [r3, #1]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d179      	bne.n	800b968 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800b874:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d075      	beq.n	800b968 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2201      	movs	r2, #1
 800b880:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	627b      	str	r3, [r7, #36]	; 0x24

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b888:	f107 0317 	add.w	r3, r7, #23
 800b88c:	4619      	mov	r1, r3
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f000 fd61 	bl	800c356 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800b89a:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	3308      	adds	r3, #8
 800b8a0:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((histo_merge_nb > 0) &&
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d043      	beq.n	800b930 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
		if ((histo_merge_nb > 0) &&
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d13e      	bne.n	800b930 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d03b      	beq.n	800b930 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	1e5a      	subs	r2, r3, #1
			cXtalk =
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	3202      	adds	r2, #2
 800b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c4:	61fb      	str	r3, [r7, #28]
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8cc:	fb03 f202 	mul.w	r2, r3, r2
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d6:	61bb      	str	r3, [r7, #24]
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d303      	bcc.n	800b8ea <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	719a      	strb	r2, [r3, #6]
 800b8e8:	e022      	b.n	800b930 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else if (SmudgeFactor > 0)
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01f      	beq.n	800b930 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
				for (i = 0; i < max; i++) {
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8f6:	e016      	b.n	800b926 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fa>
				*pcpo *= 1000;
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b900:	fb03 f202 	mul.w	r2, r3, r2
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	601a      	str	r2, [r3, #0]
				*pcpo /= SmudgeFactor;
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	601a      	str	r2, [r3, #0]
				pcpo++;
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	3304      	adds	r3, #4
 800b91a:	63bb      	str	r3, [r7, #56]	; 0x38
				for (i = 0; i < max; i++) {
 800b91c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b920:	3301      	adds	r3, #1
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b92a:	6a3a      	ldr	r2, [r7, #32]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d8e3      	bhi.n	800b8f8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2cc>
				}
		}
		if (pout->new_xtalk_applied_flag) {
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	799b      	ldrb	r3, [r3, #6]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d017      	beq.n	800b968 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b948:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	789b      	ldrb	r3, [r3, #2]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d105      	bne.n	800b968 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800b968:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d002      	beq.n	800b976 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2201      	movs	r2, #1
 800b974:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b976:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3750      	adds	r7, #80	; 0x50
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	66666667 	.word	0x66666667

0800b988 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800b988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b98c:	b0a2      	sub	sp, #136	; 0x88
 800b98e:	af02      	add	r7, sp, #8
 800b990:	6278      	str	r0, [r7, #36]	; 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b992:	2300      	movs	r3, #0
 800b994:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b9a2:	3320      	adds	r3, #32
 800b9a4:	667b      	str	r3, [r7, #100]	; 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800b9a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9a8:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b9b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9b2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800b9b6:	3310      	adds	r3, #16
 800b9b8:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800b9ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b9c0:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800b9c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9c4:	657b      	str	r3, [r7, #84]	; 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b9c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800b9cc:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800b9ea:	f04f 0200 	mov.w	r2, #0
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ba18:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba20:	f000 fc99 	bl	800c356 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800ba24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800ba2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba2e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
	if ((histo_merge_nb == 0) ||
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d002      	beq.n	800ba3c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800ba36:	2301      	movs	r3, #1
 800ba38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800ba3c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ba3e:	f000 fb10 	bl	800c062 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ba42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800ba4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba52:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ba56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba58:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d901      	bls.n	800ba64 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e000      	b.n	800ba66 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ba6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba6c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d106      	bne.n	800ba82 <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800ba74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba76:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800ba7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d101      	bne.n	800ba86 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800ba86:	2300      	movs	r3, #0
	merging_complete =
 800ba88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ba8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba8e:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d10e      	bne.n	800bab2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800ba94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00a      	beq.n	800bab2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800ba9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba9e:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800baa2:	2b09      	cmp	r3, #9
 800baa4:	d105      	bne.n	800bab2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800baa6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800bab2:	2300      	movs	r3, #0
	run_smudge_detection =
 800bab4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800bab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baba:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800babe:	2b09      	cmp	r3, #9
 800bac0:	f000 80a6 	beq.w	800bc10 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800bac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bac6:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800bac8:	2b01      	cmp	r3, #1
 800baca:	f040 80a1 	bne.w	800bc10 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800bace:	2302      	movs	r3, #2
 800bad0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800bad4:	2300      	movs	r3, #0
 800bad6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800bada:	e02d      	b.n	800bb38 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800badc:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800bae0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bae2:	234c      	movs	r3, #76	; 0x4c
 800bae4:	fb01 f303 	mul.w	r3, r1, r3
 800bae8:	4413      	add	r3, r2
 800baea:	335e      	adds	r3, #94	; 0x5e
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b09      	cmp	r3, #9
 800baf0:	d11d      	bne.n	800bb2e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800baf2:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800baf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800baf8:	234c      	movs	r3, #76	; 0x4c
 800bafa:	fb01 f303 	mul.w	r3, r1, r3
 800bafe:	4413      	add	r3, r2
 800bb00:	335a      	adds	r3, #90	; 0x5a
 800bb02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb06:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800bb08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	dc03      	bgt.n	800bb18 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800bb16:	e00a      	b.n	800bb2e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800bb18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d106      	bne.n	800bb2e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800bb20:	2301      	movs	r3, #1
 800bb22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800bb26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb2a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800bb2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb32:	3301      	adds	r3, #1
 800bb34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800bb38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb3a:	7c9a      	ldrb	r2, [r3, #18]
 800bb3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d3cb      	bcc.n	800badc <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800bb44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d102      	bne.n	800bb52 <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800bb52:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800bb56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb58:	234c      	movs	r3, #76	; 0x4c
 800bb5a:	fb01 f303 	mul.w	r3, r1, r3
 800bb5e:	4413      	add	r3, r2
 800bb60:	3348      	adds	r3, #72	; 0x48
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	867b      	strh	r3, [r7, #50]	; 0x32

		if (run_nodetect == 1) {
 800bb66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d150      	bne.n	800bc10 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800bb6e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bb70:	2200      	movs	r2, #0
 800bb72:	469a      	mov	sl, r3
 800bb74:	4693      	mov	fp, r2
 800bb76:	4652      	mov	r2, sl
 800bb78:	465b      	mov	r3, fp
 800bb7a:	f04f 0000 	mov.w	r0, #0
 800bb7e:	f04f 0100 	mov.w	r1, #0
 800bb82:	0159      	lsls	r1, r3, #5
 800bb84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bb88:	0150      	lsls	r0, r2, #5
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	ebb2 040a 	subs.w	r4, r2, sl
 800bb92:	eb63 050b 	sbc.w	r5, r3, fp
 800bb96:	f04f 0200 	mov.w	r2, #0
 800bb9a:	f04f 0300 	mov.w	r3, #0
 800bb9e:	00ab      	lsls	r3, r5, #2
 800bba0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bba4:	00a2      	lsls	r2, r4, #2
 800bba6:	4614      	mov	r4, r2
 800bba8:	461d      	mov	r5, r3
 800bbaa:	eb14 080a 	adds.w	r8, r4, sl
 800bbae:	eb45 090b 	adc.w	r9, r5, fp
 800bbb2:	f04f 0200 	mov.w	r2, #0
 800bbb6:	f04f 0300 	mov.w	r3, #0
 800bbba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bbbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bbc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bbc6:	4690      	mov	r8, r2
 800bbc8:	4699      	mov	r9, r3
 800bbca:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800bbce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bbd2:	f04f 0200 	mov.w	r2, #0
 800bbd6:	f04f 0300 	mov.w	r3, #0
 800bbda:	024b      	lsls	r3, r1, #9
 800bbdc:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800bbe0:	0242      	lsls	r2, r0, #9
 800bbe2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800bbe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbea:	2200      	movs	r2, #0
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	61fa      	str	r2, [r7, #28]
 800bbf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bbf4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	428a      	cmp	r2, r1
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	418b      	sbcs	r3, r1
 800bc00:	d203      	bcs.n	800bc0a <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800bc02:	2301      	movs	r3, #1
 800bc04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800bc08:	e002      	b.n	800bc10 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800bc10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 810b 	beq.w	800be30 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800bc1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800bc20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc22:	f7ff fb9e 	bl	800b362 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800bc26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc28:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800bc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800bc3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc3c:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800bc42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	4413      	add	r3, r2
 800bc4c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800bc4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da02      	bge.n	800bc5a <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800bc54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc56:	425b      	negs	r3, r3
 800bc58:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800bc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc62:	4293      	cmp	r3, r2
 800bc64:	dd0c      	ble.n	800bc80 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800bc66:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800bc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800bc6a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	da03      	bge.n	800bc7a <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800bc72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc74:	2201      	movs	r2, #1
 800bc76:	709a      	strb	r2, [r3, #2]
 800bc78:	e002      	b.n	800bc80 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800bc7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800bc80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc88:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800bc8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d906      	bls.n	800bca4 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800bc96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc98:	2201      	movs	r2, #1
 800bc9a:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bca2:	e014      	b.n	800bcce <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800bca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bca6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bcaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcac:	2000      	movs	r0, #0
 800bcae:	6139      	str	r1, [r7, #16]
 800bcb0:	6178      	str	r0, [r7, #20]
 800bcb2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	1851      	adds	r1, r2, r1
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	eb43 0101 	adc.w	r1, r3, r1
 800bcc2:	60f9      	str	r1, [r7, #12]
 800bcc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcc6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bcca:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800bcce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d202      	bcs.n	800bce0 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800bce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bce2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2200      	movs	r2, #0
 800bcec:	603b      	str	r3, [r7, #0]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf4:	f7f5 f830 	bl	8000d58 <__aeabi_uldivmod>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
		xtalk_offset_out =
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800bd00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	1ad2      	subs	r2, r2, r3
 800bd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd08:	4413      	add	r3, r2
 800bd0a:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800bd0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da02      	bge.n	800bd18 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800bd12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd14:	425b      	negs	r3, r3
 800bd16:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800bd18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d112      	bne.n	800bd46 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800bd20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800bd26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	db0c      	blt.n	800bd46 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800bd2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800bd30:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800bd32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd34:	429a      	cmp	r2, r3
 800bd36:	da03      	bge.n	800bd40 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800bd38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	70da      	strb	r2, [r3, #3]
 800bd3e:	e002      	b.n	800bd46 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800bd40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd42:	2202      	movs	r2, #2
 800bd44:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800bd46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d108      	bne.n	800bd60 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800bd4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800bd54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd56:	4293      	cmp	r3, r2
 800bd58:	da02      	bge.n	800bd60 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800bd60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd62:	2200      	movs	r2, #0
 800bd64:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800bd66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d112      	bne.n	800bd94 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800bd6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd70:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00e      	beq.n	800bd94 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800bd76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bd7e:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800bd82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d905      	bls.n	800bd94 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800bd88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800bd8e:	2302      	movs	r3, #2
 800bd90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800bd94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd96:	7c1b      	ldrb	r3, [r3, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800bd9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd9e:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800bda0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d902      	bls.n	800bdac <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800bda6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800bdac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdae:	7c1b      	ldrb	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d107      	bne.n	800bdc4 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800bdb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdb6:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800bdb8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d202      	bcs.n	800bdc4 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800bdbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800bdc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdc6:	089b      	lsrs	r3, r3, #2
 800bdc8:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800bdca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bdd0:	d301      	bcc.n	800bdd6 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800bdd2:	4b3f      	ldr	r3, [pc, #252]	; (800bed0 <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800bdd4:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800bdd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10d      	bne.n	800bdfa <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800bdde:	2300      	movs	r3, #0
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	2301      	movs	r3, #1
 800bde4:	9300      	str	r3, [sp, #0]
 800bde6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bde8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bdec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdee:	f7ff fc1d 	bl	800b62c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800bdf2:	2302      	movs	r3, #2
 800bdf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bdf8:	e009      	b.n	800be0e <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	2301      	movs	r3, #1
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be06:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800be08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be0a:	f7ff fc0f 	bl	800b62c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800be0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800be12:	2b02      	cmp	r3, #2
 800be14:	d10c      	bne.n	800be30 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800be16:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800be18:	f04f 0200 	mov.w	r2, #0
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800be24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800be2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be2c:	2200      	movs	r2, #0
 800be2e:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800be30:	2300      	movs	r3, #0
 800be32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800be36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d140      	bne.n	800bec0 <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800be3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be46:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800be48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be4a:	691a      	ldr	r2, [r3, #16]
 800be4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be50:	429a      	cmp	r2, r3
 800be52:	d202      	bcs.n	800be5a <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800be54:	2301      	movs	r3, #1
 800be56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800be5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5e:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800be60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800be64:	2b00      	cmp	r3, #0
 800be66:	d110      	bne.n	800be8a <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800be68:	2300      	movs	r3, #0
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	2300      	movs	r3, #0
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be74:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800be76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be78:	f7ff fbd8 	bl	800b62c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800be7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be7e:	2202      	movs	r2, #2
 800be80:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800be82:	2302      	movs	r3, #2
 800be84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800be88:	e009      	b.n	800be9e <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800be8a:	2301      	movs	r3, #1
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	2300      	movs	r3, #0
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800be98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be9a:	f7ff fbc7 	bl	800b62c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800be9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d10c      	bne.n	800bec0 <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800bea6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bea8:	f04f 0200 	mov.w	r2, #0
 800beac:	f04f 0300 	mov.w	r3, #0
 800beb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800beb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb6:	2200      	movs	r2, #0
 800beb8:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800beba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bebc:	2200      	movs	r2, #0
 800bebe:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bec0:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3780      	adds	r7, #128	; 0x80
 800bec8:	46bd      	mov	sp, r7
 800beca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bece:	bf00      	nop
 800bed0:	0003ffff 	.word	0x0003ffff

0800bed4 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bedc:	2300      	movs	r3, #0
 800bede:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800beea:	3320      	adds	r3, #32
 800beec:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf24:	461a      	mov	r2, r3
 800bf26:	2364      	movs	r3, #100	; 0x64
 800bf28:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf32:	461a      	mov	r2, r3
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c2 33d8 	str.w	r3, [r2, #984]	; 0x3d8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	23c8      	movs	r3, #200	; 0xc8
 800bf50:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf60:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f44f 739a 	mov.w	r3, #308	; 0x134
 800bf70:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf80:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfa8:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfb6:	f8a3 23f8 	strh.w	r2, [r3, #1016]	; 0x3f8
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfcc:	461a      	mov	r2, r3
 800bfce:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800bfd2:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfdc:	461a      	mov	r2, r3
 800bfde:	2328      	movs	r3, #40	; 0x28
 800bfe0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfea:	461a      	mov	r2, r3
 800bfec:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bff0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bffa:	f44f 7261 	mov.w	r2, #900	; 0x384
 800bffe:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c008:	461a      	mov	r2, r3
 800c00a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c00e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c018:	461a      	mov	r2, r3
 800c01a:	2300      	movs	r3, #0
 800c01c:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
	pdev->smudge_corrector_internals.required_samples = 0;
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c026:	461a      	mov	r2, r3
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
	pdev->smudge_corrector_internals.accumulator = 0;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800c034:	4619      	mov	r1, r3
 800c036:	f04f 0200 	mov.w	r2, #0
 800c03a:	f04f 0300 	mov.w	r3, #0
 800c03e:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c048:	461a      	mov	r2, r3
 800c04a:	2300      	movs	r3, #0
 800c04c:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 f806 	bl	800c062 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800c056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800c062:	b480      	push	{r7}
 800c064:	b085      	sub	sp, #20
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c074:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2200      	movs	r2, #0
 800c07a:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2200      	movs	r2, #0
 800c080:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2200      	movs	r2, #0
 800c086:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2200      	movs	r2, #0
 800c08c:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2200      	movs	r2, #0
 800c098:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800c0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b084      	sub	sp, #16
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d8:	461a      	mov	r2, r3
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800c0fe:	331c      	adds	r3, #28
 800c100:	2218      	movs	r2, #24
 800c102:	2100      	movs	r1, #0
 800c104:	4618      	mov	r0, r3
 800c106:	f00a f86b 	bl	80161e0 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800c10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800c116:	b480      	push	{r7}
 800c118:	b085      	sub	sp, #20
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12c:	2203      	movs	r2, #3
 800c12e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c144:	2200      	movs	r2, #0
 800c146:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c150:	2200      	movs	r2, #0
 800c152:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c174:	2200      	movs	r2, #0
 800c176:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c180:	461a      	mov	r2, r3
 800c182:	2300      	movs	r3, #0
 800c184:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18e:	2200      	movs	r2, #0
 800c190:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434

	LOG_FUNCTION_END(status);

	return status;
 800c194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f893 231b 	ldrb.w	r2, [r3, #795]	; 0x31b
	pdev->low_power_auto_data.saved_vhv_init =
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f893 2318 	ldrb.w	r2, [r3, #792]	; 0x318
	pdev->low_power_auto_data.saved_vhv_timeout =
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d0:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f893 331b 	ldrb.w	r3, [r3, #795]	; 0x31b
 800c1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800c1ec:	f003 0303 	and.w	r3, r3, #3
 800c1f0:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c200:	4413      	add	r3, r2
 800c202:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c218:	f893 2396 	ldrb.w	r2, [r3, #918]	; 0x396
	pdev->low_power_auto_data.first_run_phasecal_result =
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c222:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c22c:	f893 242e 	ldrb.w	r2, [r3, #1070]	; 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359

	LOG_FUNCTION_END(status);

	return status;
 800c236:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr

0800c246 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800c246:	b480      	push	{r7}
 800c248:	b087      	sub	sp, #28
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f203 339e 	addw	r3, r3, #926	; 0x39e
 800c258:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c25a:	2300      	movs	r3, #0
 800c25c:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	8a1b      	ldrh	r3, [r3, #16]
 800c262:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	891b      	ldrh	r3, [r3, #8]
 800c268:	4413      	add	r3, r2
	utemp32a =
 800c26a:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c272:	d302      	bcc.n	800c27a <VL53LX_low_power_auto_update_DSS+0x34>
		utemp32a = 0xFFFF;
 800c274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c278:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	041b      	lsls	r3, r3, #16
 800c27e:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <VL53LX_low_power_auto_update_DSS+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800c28a:	23f1      	movs	r3, #241	; 0xf1
 800c28c:	75fb      	strb	r3, [r7, #23]
 800c28e:	e040      	b.n	800c312 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800c296:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c29e:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800c2b4:	041b      	lsls	r3, r3, #16
 800c2b6:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2be:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800c2c6:	23f1      	movs	r3, #241	; 0xf1
 800c2c8:	75fb      	strb	r3, [r7, #23]
 800c2ca:	e022      	b.n	800c312 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
			utemp32a = utemp32a /
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2dc:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e4:	d302      	bcc.n	800c2ec <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800c2e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2ea:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f6:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c300:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	; 0x434
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
			pdev->gen_cfg.dss_config__roi_mode_control =
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2202      	movs	r2, #2
 800c30e:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800c312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c316:	f113 0f0f 	cmn.w	r3, #15
 800c31a:	d114      	bne.n	800c346 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c322:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c326:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c330:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	; 0x434
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
		pdev->gen_cfg.dss_config__roi_mode_control =
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2202      	movs	r2, #2
 800c33e:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800c342:	2300      	movs	r3, #0
 800c344:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	371c      	adds	r7, #28
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800c356:	b480      	push	{r7}
 800c358:	b087      	sub	sp, #28
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800c372:	2b07      	cmp	r3, #7
 800c374:	bf0c      	ite	eq
 800c376:	2301      	moveq	r3, #1
 800c378:	2300      	movne	r3, #0
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800c37e:	2300      	movs	r3, #0
 800c380:	75fb      	strb	r3, [r7, #23]
 800c382:	e019      	b.n	800c3b8 <VL53LX_compute_histo_merge_nb+0x62>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800c384:	7df9      	ldrb	r1, [r7, #23]
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	6938      	ldr	r0, [r7, #16]
 800c38a:	461a      	mov	r2, r3
 800c38c:	0052      	lsls	r2, r2, #1
 800c38e:	441a      	add	r2, r3
 800c390:	0153      	lsls	r3, r2, #5
 800c392:	461a      	mov	r2, r3
 800c394:	460b      	mov	r3, r1
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	440b      	add	r3, r1
 800c39a:	019b      	lsls	r3, r3, #6
 800c39c:	4413      	add	r3, r2
 800c39e:	4403      	add	r3, r0
 800c3a0:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dd02      	ble.n	800c3b2 <VL53LX_compute_histo_merge_nb+0x5c>
			sum++;
 800c3ac:	7dbb      	ldrb	r3, [r7, #22]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	75fb      	strb	r3, [r7, #23]
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	d9e2      	bls.n	800c384 <VL53LX_compute_histo_merge_nb+0x2e>
	*histo_merge_nb = sum;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	7dba      	ldrb	r2, [r7, #22]
 800c3c2:	701a      	strb	r2, [r3, #0]

	return status;
 800c3c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	371c      	adds	r7, #28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d005      	beq.n	800c3f4 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 800c3f2:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800c402:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c406:	b089      	sub	sp, #36	; 0x24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800c412:	f04f 0200 	mov.w	r2, #0
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	fb02 f303 	mul.w	r3, r2, r3
 800c42a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	0b1b      	lsrs	r3, r3, #12
 800c430:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2200      	movs	r2, #0
 800c436:	469a      	mov	sl, r3
 800c438:	4693      	mov	fp, r2
 800c43a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	fb02 f303 	mul.w	r3, r2, r3
 800c446:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	091b      	lsrs	r3, r3, #4
 800c44c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2200      	movs	r2, #0
 800c452:	4698      	mov	r8, r3
 800c454:	4691      	mov	r9, r2
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	fb08 f203 	mul.w	r2, r8, r3
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	fb09 f303 	mul.w	r3, r9, r3
 800c462:	4413      	add	r3, r2
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	fba2 4508 	umull	r4, r5, r2, r8
 800c46a:	442b      	add	r3, r5
 800c46c:	461d      	mov	r5, r3
 800c46e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800c472:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800c476:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c47a:	f04f 0200 	mov.w	r2, #0
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	0b02      	lsrs	r2, r0, #12
 800c484:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c488:	0b0b      	lsrs	r3, r1, #12
 800c48a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800c48e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d305      	bcc.n	800c4a2 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800c496:	f04f 32ff 	mov.w	r2, #4294967295
 800c49a:	f04f 0300 	mov.w	r3, #0
 800c49e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	617b      	str	r3, [r7, #20]

	return duration_us;
 800c4a6:	697b      	ldr	r3, [r7, #20]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3724      	adds	r7, #36	; 0x24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c4b2:	4770      	bx	lr

0800c4b4 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800c4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4b8:	b096      	sub	sp, #88	; 0x58
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c4be:	460b      	mov	r3, r1
 800c4c0:	627a      	str	r2, [r7, #36]	; 0x24
 800c4c2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	f04f 0300 	mov.w	r3, #0
 800c4cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	f04f 0300 	mov.w	r3, #0
 800c4d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	17da      	asrs	r2, r3, #31
 800c4e4:	469a      	mov	sl, r3
 800c4e6:	4693      	mov	fp, r2
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	465b      	mov	r3, fp
 800c4ec:	f04f 0000 	mov.w	r0, #0
 800c4f0:	f04f 0100 	mov.w	r1, #0
 800c4f4:	0159      	lsls	r1, r3, #5
 800c4f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c4fa:	0150      	lsls	r0, r2, #5
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	ebb2 040a 	subs.w	r4, r2, sl
 800c504:	eb63 050b 	sbc.w	r5, r3, fp
 800c508:	f04f 0200 	mov.w	r2, #0
 800c50c:	f04f 0300 	mov.w	r3, #0
 800c510:	00ab      	lsls	r3, r5, #2
 800c512:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c516:	00a2      	lsls	r2, r4, #2
 800c518:	4614      	mov	r4, r2
 800c51a:	461d      	mov	r5, r3
 800c51c:	eb14 080a 	adds.w	r8, r4, sl
 800c520:	eb45 090b 	adc.w	r9, r5, fp
 800c524:	f04f 0200 	mov.w	r2, #0
 800c528:	f04f 0300 	mov.w	r3, #0
 800c52c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800c530:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800c534:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800c538:	4690      	mov	r8, r2
 800c53a:	4699      	mov	r9, r3
 800c53c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800c540:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00d      	beq.n	800c562 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800c546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c548:	2200      	movs	r2, #0
 800c54a:	61bb      	str	r3, [r7, #24]
 800c54c:	61fa      	str	r2, [r7, #28]
 800c54e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c552:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c556:	f7f4 fbff 	bl	8000d58 <__aeabi_uldivmod>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	2b00      	cmp	r3, #0
 800c566:	d02a      	beq.n	800c5be <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800c568:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c56c:	f04f 0200 	mov.w	r2, #0
 800c570:	f04f 0300 	mov.w	r3, #0
 800c574:	02cb      	lsls	r3, r1, #11
 800c576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c57a:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800c57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c57e:	0849      	lsrs	r1, r1, #1
 800c580:	2000      	movs	r0, #0
 800c582:	6139      	str	r1, [r7, #16]
 800c584:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800c586:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c58a:	4621      	mov	r1, r4
 800c58c:	1851      	adds	r1, r2, r1
 800c58e:	6039      	str	r1, [r7, #0]
 800c590:	4629      	mov	r1, r5
 800c592:	eb43 0101 	adc.w	r1, r3, r1
 800c596:	6079      	str	r1, [r7, #4]
 800c598:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c59c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	60bb      	str	r3, [r7, #8]
 800c5a6:	60fa      	str	r2, [r7, #12]
 800c5a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5ac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c5b0:	f7f4 fbd2 	bl	8000d58 <__aeabi_uldivmod>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c5bc:	e00b      	b.n	800c5d6 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800c5be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c5c2:	f04f 0200 	mov.w	r2, #0
 800c5c6:	f04f 0300 	mov.w	r3, #0
 800c5ca:	02cb      	lsls	r3, r1, #11
 800c5cc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c5d0:	02c2      	lsls	r2, r0, #11
 800c5d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800c5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5d8:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800c5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3758      	adds	r7, #88	; 0x58
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c5e6 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c5f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5f6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800c5f8:	e002      	b.n	800c600 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	089b      	lsrs	r3, r3, #2
 800c5fe:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d8f8      	bhi.n	800c5fa <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800c608:	e017      	b.n	800c63a <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	4413      	add	r3, r2
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	429a      	cmp	r2, r3
 800c614:	d30b      	bcc.n	800c62e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	4413      	add	r3, r2
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	085b      	lsrs	r3, r3, #1
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	4413      	add	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	e002      	b.n	800c634 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	085b      	lsrs	r3, r3, #1
 800c632:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	089b      	lsrs	r3, r3, #2
 800c638:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e4      	bne.n	800c60a <VL53LX_isqrt+0x24>
	}

	return res;
 800c640:	68fb      	ldr	r3, [r7, #12]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c664:	4618      	mov	r0, r3
 800c666:	f000 faa5 	bl	800cbb4 <VL53LX_decode_vcsel_period>
 800c66a:	4603      	mov	r3, r0
	period = 2048 *
 800c66c:	02db      	lsls	r3, r3, #11
 800c66e:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c67a:	461a      	mov	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4413      	add	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c688:	02db      	lsls	r3, r3, #11
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	4413      	add	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c696:	02db      	lsls	r3, r3, #11
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d009      	beq.n	800c6b8 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6ac:	68b9      	ldr	r1, [r7, #8]
 800c6ae:	fb01 f202 	mul.w	r2, r1, r2
 800c6b2:	1a9b      	subs	r3, r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
 800c6b6:	e001      	b.n	800c6bc <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800c6c6:	bf00      	nop
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800c6e0:	6838      	ldr	r0, [r7, #0]
 800c6e2:	f000 fb90 	bl	800ce06 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff ff7a 	bl	800c5e6 <VL53LX_isqrt>
 800c6f2:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800c6f4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	fb02 f303 	mul.w	r3, r2, r3
 800c6fe:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	3307      	adds	r3, #7
 800c704:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	111b      	asrs	r3, r3, #4
 800c70a:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	4413      	add	r3, r2
 800c716:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2200      	movs	r2, #0
 800c724:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c728:	2300      	movs	r3, #0
 800c72a:	73fb      	strb	r3, [r7, #15]
 800c72c:	e01e      	b.n	800c76c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800c72e:	7bfa      	ldrb	r2, [r7, #15]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	3206      	adds	r2, #6
 800c734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	dd13      	ble.n	800c766 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c744:	7bf9      	ldrb	r1, [r7, #15]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	3106      	adds	r1, #6
 800c74a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c74e:	441a      	add	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c75c:	3301      	adds	r3, #1
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	3301      	adds	r3, #1
 800c76a:	73fb      	strb	r3, [r7, #15]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	7a9b      	ldrb	r3, [r3, #10]
 800c770:	7bfa      	ldrb	r2, [r7, #15]
 800c772:	429a      	cmp	r2, r3
 800c774:	d3db      	bcc.n	800c72e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d01c      	beq.n	800c7ba <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800c798:	0852      	lsrs	r2, r2, #1
 800c79a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c79c:	441a      	add	r2, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800c7b0:	fb93 f2f2 	sdiv	r2, r3, r2
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800c7ba:	bf00      	nop
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	7b1b      	ldrb	r3, [r3, #12]
 800c7da:	f003 0307 	and.w	r3, r3, #7
 800c7de:	2b07      	cmp	r3, #7
 800c7e0:	d13a      	bne.n	800c858 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73bb      	strb	r3, [r7, #14]
 800c7ea:	e01f      	b.n	800c82c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	7b1b      	ldrb	r3, [r3, #12]
 800c7f4:	f003 0307 	and.w	r3, r3, #7
 800c7f8:	2b07      	cmp	r3, #7
 800c7fa:	d014      	beq.n	800c826 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800c7fc:	7bba      	ldrb	r2, [r7, #14]
 800c7fe:	7b7b      	ldrb	r3, [r7, #13]
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	440a      	add	r2, r1
 800c804:	7b11      	ldrb	r1, [r2, #12]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	4413      	add	r3, r2
 800c80a:	460a      	mov	r2, r1
 800c80c:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800c80e:	7bba      	ldrb	r2, [r7, #14]
 800c810:	7b7b      	ldrb	r3, [r7, #13]
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	440a      	add	r2, r1
 800c816:	7c91      	ldrb	r1, [r2, #18]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	4413      	add	r3, r2
 800c81c:	460a      	mov	r2, r1
 800c81e:	749a      	strb	r2, [r3, #18]
				i++;
 800c820:	7b7b      	ldrb	r3, [r7, #13]
 800c822:	3301      	adds	r3, #1
 800c824:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c826:	7bbb      	ldrb	r3, [r7, #14]
 800c828:	3301      	adds	r3, #1
 800c82a:	73bb      	strb	r3, [r7, #14]
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
 800c82e:	2b05      	cmp	r3, #5
 800c830:	d9dc      	bls.n	800c7ec <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c832:	7b7b      	ldrb	r3, [r7, #13]
 800c834:	73bb      	strb	r3, [r7, #14]
 800c836:	e00c      	b.n	800c852 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800c838:	7bbb      	ldrb	r3, [r7, #14]
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	4413      	add	r3, r2
 800c83e:	2210      	movs	r2, #16
 800c840:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800c842:	7bbb      	ldrb	r3, [r7, #14]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	4413      	add	r3, r2
 800c848:	2200      	movs	r2, #0
 800c84a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
 800c84e:	3301      	adds	r3, #1
 800c850:	73bb      	strb	r3, [r7, #14]
 800c852:	7bbb      	ldrb	r3, [r7, #14]
 800c854:	2b05      	cmp	r3, #5
 800c856:	d9ef      	bls.n	800c838 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7adb      	ldrb	r3, [r3, #11]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d023      	beq.n	800c8a8 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7adb      	ldrb	r3, [r3, #11]
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	e00f      	b.n	800c888 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800c868:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	7ad2      	ldrb	r2, [r2, #11]
 800c870:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3106      	adds	r1, #6
 800c876:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3206      	adds	r2, #6
 800c87e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	3301      	adds	r3, #1
 800c886:	73fb      	strb	r3, [r7, #15]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800c88c:	7bfa      	ldrb	r2, [r7, #15]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d3ea      	bcc.n	800c868 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	72da      	strb	r2, [r3, #11]
	}
}
 800c8a8:	bf00      	nop
 800c8aa:	3714      	adds	r7, #20
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff fd83 	bl	800c3d4 <VL53LX_calc_pll_period_us>
 800c8ce:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800c8d4:	f249 2257 	movw	r2, #37463	; 0x9257
 800c8d8:	fb02 f303 	mul.w	r3, r2, r3
 800c8dc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c8e4:	0c1b      	lsrs	r3, r3, #16
 800c8e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b087      	sub	sp, #28
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800c900:	2307      	movs	r3, #7
 800c902:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c90e:	db03      	blt.n	800c918 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800c910:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c914:	617b      	str	r3, [r7, #20]
 800c916:	e004      	b.n	800c922 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	dd01      	ble.n	800c922 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c928:	dd02      	ble.n	800c930 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800c92a:	2303      	movs	r3, #3
 800c92c:	613b      	str	r3, [r7, #16]
 800c92e:	e001      	b.n	800c934 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800c930:	2307      	movs	r3, #7
 800c932:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d009      	beq.n	800c94e <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	409a      	lsls	r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	441a      	add	r2, r3
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c954:	dd02      	ble.n	800c95c <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	011b      	lsls	r3, r3, #4
 800c95a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c962:	d302      	bcc.n	800c96a <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800c964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c968:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800c96e:	89fb      	ldrh	r3, [r7, #14]
}
 800c970:	4618      	mov	r0, r3
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b087      	sub	sp, #28
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	4613      	mov	r3, r2
 800c98a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800c994:	88fb      	ldrh	r3, [r7, #6]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d010      	beq.n	800c9bc <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	021a      	lsls	r2, r3, #8
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a4:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800c9a6:	88fb      	ldrh	r3, [r7, #6]
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800c9b2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800c9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9b8:	617b      	str	r3, [r7, #20]
 800c9ba:	e004      	b.n	800c9c6 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d901      	bls.n	800c9d2 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800c9d6:	8a7b      	ldrh	r3, [r7, #18]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	371c      	adds	r7, #28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	b093      	sub	sp, #76	; 0x4c
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	461e      	mov	r6, r3
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c9fa:	4633      	mov	r3, r6
 800c9fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800ca04:	f04f 0200 	mov.w	r2, #0
 800ca08:	f04f 0300 	mov.w	r3, #0
 800ca0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800ca18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff fcda 	bl	800c3d4 <VL53LX_calc_pll_period_us>
 800ca20:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800ca22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca24:	2200      	movs	r2, #0
 800ca26:	623b      	str	r3, [r7, #32]
 800ca28:	627a      	str	r2, [r7, #36]	; 0x24
 800ca2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	61bb      	str	r3, [r7, #24]
 800ca30:	61fa      	str	r2, [r7, #28]
 800ca32:	6a3b      	ldr	r3, [r7, #32]
 800ca34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca38:	4602      	mov	r2, r0
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	613b      	str	r3, [r7, #16]
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	460a      	mov	r2, r1
 800ca42:	eb63 0302 	sbc.w	r3, r3, r2
 800ca46:	617b      	str	r3, [r7, #20]
 800ca48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ca50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca52:	2200      	movs	r2, #0
 800ca54:	469a      	mov	sl, r3
 800ca56:	4693      	mov	fp, r2
 800ca58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5a:	fb0a f203 	mul.w	r2, sl, r3
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	fb0b f303 	mul.w	r3, fp, r3
 800ca64:	4413      	add	r3, r2
 800ca66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca68:	fba2 890a 	umull	r8, r9, r2, sl
 800ca6c:	444b      	add	r3, r9
 800ca6e:	4699      	mov	r9, r3
 800ca70:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ca74:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ca78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da08      	bge.n	800ca92 <VL53LX_range_maths+0xae>
 800ca80:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ca84:	1851      	adds	r1, r2, r1
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	f143 0300 	adc.w	r3, r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	f04f 0100 	mov.w	r1, #0
 800ca9a:	0a50      	lsrs	r0, r2, #9
 800ca9c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800caa0:	1259      	asrs	r1, r3, #9
 800caa2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800caa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa8:	f249 2257 	movw	r2, #37463	; 0x9257
 800caac:	fb03 f202 	mul.w	r2, r3, r2
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	2100      	movs	r1, #0
 800cab4:	fb01 f303 	mul.w	r3, r1, r3
 800cab8:	4413      	add	r3, r2
 800caba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cabc:	f249 2157 	movw	r1, #37463	; 0x9257
 800cac0:	fba2 4501 	umull	r4, r5, r2, r1
 800cac4:	442b      	add	r3, r5
 800cac6:	461d      	mov	r5, r3
 800cac8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800cacc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800cad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	da07      	bge.n	800cae8 <VL53LX_range_maths+0x104>
 800cad8:	4934      	ldr	r1, [pc, #208]	; (800cbac <VL53LX_range_maths+0x1c8>)
 800cada:	1851      	adds	r1, r2, r1
 800cadc:	6039      	str	r1, [r7, #0]
 800cade:	f143 0300 	adc.w	r3, r3, #0
 800cae2:	607b      	str	r3, [r7, #4]
 800cae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae8:	f04f 0000 	mov.w	r0, #0
 800caec:	f04f 0100 	mov.w	r1, #0
 800caf0:	0d90      	lsrs	r0, r2, #22
 800caf2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800caf6:	1599      	asrs	r1, r3, #22
 800caf8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cb00:	4413      	add	r3, r2
 800cb02:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800cb04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb08:	fb02 f303 	mul.w	r3, r2, r3
 800cb0c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800cb0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb14:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800cb16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	da01      	bge.n	800cb20 <VL53LX_range_maths+0x13c>
 800cb1c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cb20:	12db      	asrs	r3, r3, #11
 800cb22:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800cb24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d130      	bne.n	800cb8e <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800cb2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb2e:	4613      	mov	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	da00      	bge.n	800cb40 <VL53LX_range_maths+0x15c>
 800cb3e:	3303      	adds	r3, #3
 800cb40:	109b      	asrs	r3, r3, #2
 800cb42:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800cb44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb46:	4b1a      	ldr	r3, [pc, #104]	; (800cbb0 <VL53LX_range_maths+0x1cc>)
 800cb48:	fb83 2301 	smull	r2, r3, r3, r1
 800cb4c:	109a      	asrs	r2, r3, #2
 800cb4e:	17cb      	asrs	r3, r1, #31
 800cb50:	1ad2      	subs	r2, r2, r3
 800cb52:	4613      	mov	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	1aca      	subs	r2, r1, r3
 800cb5c:	2a04      	cmp	r2, #4
 800cb5e:	dc09      	bgt.n	800cb74 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	4a13      	ldr	r2, [pc, #76]	; (800cbb0 <VL53LX_range_maths+0x1cc>)
 800cb64:	fb82 1203 	smull	r1, r2, r2, r3
 800cb68:	1092      	asrs	r2, r2, #2
 800cb6a:	17db      	asrs	r3, r3, #31
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	b21b      	sxth	r3, r3
 800cb70:	647b      	str	r3, [r7, #68]	; 0x44
 800cb72:	e015      	b.n	800cba0 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800cb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb76:	4a0e      	ldr	r2, [pc, #56]	; (800cbb0 <VL53LX_range_maths+0x1cc>)
 800cb78:	fb82 1203 	smull	r1, r2, r2, r3
 800cb7c:	1092      	asrs	r2, r2, #2
 800cb7e:	17db      	asrs	r3, r3, #31
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	3301      	adds	r3, #1
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	b21b      	sxth	r3, r3
 800cb8a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb8c:	e008      	b.n	800cba0 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800cb8e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d104      	bne.n	800cba0 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800cb96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb98:	0fda      	lsrs	r2, r3, #31
 800cb9a:	4413      	add	r3, r2
 800cb9c:	105b      	asrs	r3, r3, #1
 800cb9e:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800cba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	374c      	adds	r7, #76	; 0x4c
 800cba6:	46bd      	mov	sp, r7
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	003fffff 	.word	0x003fffff
 800cbb0:	66666667 	.word	0x66666667

0800cbb4 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b083      	sub	sp, #12
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	7a5a      	ldrb	r2, [r3, #9]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	605a      	str	r2, [r3, #4]
}
 800cc4a:	bf00      	nop
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b087      	sub	sp, #28
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2203      	movs	r2, #3
 800cc6c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2203      	movs	r2, #3
 800cc72:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2218      	movs	r2, #24
 800cc8a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800cc8c:	897b      	ldrh	r3, [r7, #10]
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	82fb      	strh	r3, [r7, #22]
 800cd2e:	e009      	b.n	800cd44 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800cd30:	8afb      	ldrh	r3, [r7, #22]
 800cd32:	8afa      	ldrh	r2, [r7, #22]
 800cd34:	b2d1      	uxtb	r1, r2
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	460a      	mov	r2, r1
 800cd3c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cd3e:	8afb      	ldrh	r3, [r7, #22]
 800cd40:	3301      	adds	r3, #1
 800cd42:	82fb      	strh	r3, [r7, #22]
 800cd44:	8afb      	ldrh	r3, [r7, #22]
 800cd46:	2b05      	cmp	r3, #5
 800cd48:	d9f2      	bls.n	800cd30 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	82fb      	strh	r3, [r7, #22]
 800cd4e:	e007      	b.n	800cd60 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800cd50:	8afb      	ldrh	r3, [r7, #22]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4413      	add	r3, r2
 800cd56:	2201      	movs	r2, #1
 800cd58:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cd5a:	8afb      	ldrh	r3, [r7, #22]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	82fb      	strh	r3, [r7, #22]
 800cd60:	8afb      	ldrh	r3, [r7, #22]
 800cd62:	2b05      	cmp	r3, #5
 800cd64:	d9f4      	bls.n	800cd50 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800cd66:	2300      	movs	r3, #0
 800cd68:	82fb      	strh	r3, [r7, #22]
 800cd6a:	e013      	b.n	800cd94 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800cd6c:	8afa      	ldrh	r2, [r7, #22]
 800cd6e:	897b      	ldrh	r3, [r7, #10]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d206      	bcs.n	800cd82 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800cd74:	8afa      	ldrh	r2, [r7, #22]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3206      	adds	r2, #6
 800cd7a:	68f9      	ldr	r1, [r7, #12]
 800cd7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cd80:	e005      	b.n	800cd8e <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800cd82:	8afa      	ldrh	r2, [r7, #22]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3206      	adds	r2, #6
 800cd88:	2100      	movs	r1, #0
 800cd8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800cd8e:	8afb      	ldrh	r3, [r7, #22]
 800cd90:	3301      	adds	r3, #1
 800cd92:	82fb      	strh	r3, [r7, #22]
 800cd94:	8afb      	ldrh	r3, [r7, #22]
 800cd96:	2b17      	cmp	r3, #23
 800cd98:	d9e8      	bls.n	800cd6c <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800cd9a:	bf00      	nop
 800cd9c:	bf00      	nop
 800cd9e:	371c      	adds	r7, #28
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
 800cdb4:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800cdb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	da10      	bge.n	800cde0 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	43db      	mvns	r3, r3
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	f003 0307 	and.w	r3, r3, #7
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	3308      	adds	r3, #8
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
 800cdd4:	3b80      	subs	r3, #128	; 0x80
 800cdd6:	10db      	asrs	r3, r3, #3
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800cdde:	e00c      	b.n	800cdfa <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800cdf2:	10db      	asrs	r3, r3, #3
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	701a      	strb	r2, [r3, #0]
}
 800cdfa:	bf00      	nop
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b085      	sub	sp, #20
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800ce12:	2300      	movs	r3, #0
 800ce14:	73fb      	strb	r3, [r7, #15]
 800ce16:	e02c      	b.n	800ce72 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d009      	beq.n	800ce32 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ce24:	7bf9      	ldrb	r1, [r7, #15]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	3106      	adds	r1, #6
 800ce2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	db07      	blt.n	800ce42 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ce32:	7bfa      	ldrb	r2, [r7, #15]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3206      	adds	r2, #6
 800ce38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d009      	beq.n	800ce5c <VL53LX_hist_find_min_max_bin_values+0x56>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ce4e:	7bf9      	ldrb	r1, [r7, #15]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3106      	adds	r1, #6
 800ce54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	dc07      	bgt.n	800ce6c <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800ce5c:	7bfa      	ldrb	r2, [r7, #15]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3206      	adds	r2, #6
 800ce62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	73fb      	strb	r3, [r7, #15]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	7a9b      	ldrb	r3, [r3, #10]
 800ce76:	7bfa      	ldrb	r2, [r7, #15]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3cd      	bcc.n	800ce18 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800ce8a:	b480      	push	{r7}
 800ce8c:	b085      	sub	sp, #20
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7adb      	ldrb	r3, [r3, #11]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d03a      	beq.n	800cf14 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	73fb      	strb	r3, [r7, #15]
 800ceb4:	e00e      	b.n	800ced4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800cebc:	7bf9      	ldrb	r1, [r7, #15]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3106      	adds	r1, #6
 800cec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cec6:	441a      	add	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	3301      	adds	r3, #1
 800ced2:	73fb      	strb	r3, [r7, #15]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7adb      	ldrb	r3, [r3, #11]
 800ced8:	7bfa      	ldrb	r2, [r7, #15]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d3eb      	bcc.n	800ceb6 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	7ad2      	ldrb	r2, [r2, #11]
 800cef4:	0852      	lsrs	r2, r2, #1
 800cef6:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800cef8:	441a      	add	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800cf0a:	fb93 f2f2 	sdiv	r2, r3, r2
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800cf14:	bf00      	nop
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800cf20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf24:	b0ca      	sub	sp, #296	; 0x128
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800cf2c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800cf30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cf34:	4603      	mov	r3, r0
 800cf36:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800cf52:	f04f 0200 	mov.w	r2, #0
 800cf56:	f04f 0300 	mov.w	r3, #0
 800cf5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800cf64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf68:	2300      	movs	r3, #0
 800cf6a:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800cf6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf70:	2300      	movs	r3, #0
 800cf72:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800cf74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf78:	2300      	movs	r3, #0
 800cf7a:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800cf7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf80:	2300      	movs	r3, #0
 800cf82:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800cf84:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf88:	2300      	movs	r3, #0
 800cf8a:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800cf8c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf90:	2300      	movs	r3, #0
 800cf92:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800cf94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf98:	2300      	movs	r3, #0
 800cf9a:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800cf9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800cfa4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800cfac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfb0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 80e1 	beq.w	800d17c <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800cfba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 80da 	beq.w	800d17c <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800cfc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfcc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff f9ff 	bl	800c3d4 <VL53LX_calc_pll_period_us>
 800cfd6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800cfda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800cfe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cff0:	2110      	movs	r1, #16
 800cff2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800cff6:	f7ff fa04 	bl	800c402 <VL53LX_duration_maths>
 800cffa:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800cffc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d000:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800d002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d006:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d00a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7ff fc6d 	bl	800c8f2 <VL53LX_rate_maths>
 800d018:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800d01a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d01e:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800d020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d024:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800d028:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d02c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800d030:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	f7ff fa3c 	bl	800c4b4 <VL53LX_events_per_spad_maths>
 800d03c:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800d03e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d042:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800d044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d048:	8adb      	ldrh	r3, [r3, #22]
 800d04a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d04e:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800d050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d054:	8adb      	ldrh	r3, [r3, #22]
 800d056:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d05a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800d05c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 808a 	beq.w	800d17c <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800d068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d06c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800d06e:	b29b      	uxth	r3, r3
 800d070:	2200      	movs	r2, #0
 800d072:	461c      	mov	r4, r3
 800d074:	4615      	mov	r5, r2
 800d076:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800d07a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d07e:	4622      	mov	r2, r4
 800d080:	462b      	mov	r3, r5
 800d082:	f04f 0000 	mov.w	r0, #0
 800d086:	f04f 0100 	mov.w	r1, #0
 800d08a:	0159      	lsls	r1, r3, #5
 800d08c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d090:	0150      	lsls	r0, r2, #5
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	ebb2 0804 	subs.w	r8, r2, r4
 800d09a:	eb63 0905 	sbc.w	r9, r3, r5
 800d09e:	f04f 0200 	mov.w	r2, #0
 800d0a2:	f04f 0300 	mov.w	r3, #0
 800d0a6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d0aa:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d0ae:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d0b2:	4690      	mov	r8, r2
 800d0b4:	4699      	mov	r9, r3
 800d0b6:	eb18 0a04 	adds.w	sl, r8, r4
 800d0ba:	eb49 0b05 	adc.w	fp, r9, r5
 800d0be:	f04f 0200 	mov.w	r2, #0
 800d0c2:	f04f 0300 	mov.w	r3, #0
 800d0c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0d2:	4692      	mov	sl, r2
 800d0d4:	469b      	mov	fp, r3
 800d0d6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800d0da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d0de:	f04f 0000 	mov.w	r0, #0
 800d0e2:	f04f 0100 	mov.w	r1, #0
 800d0e6:	0319      	lsls	r1, r3, #12
 800d0e8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800d0ec:	0310      	lsls	r0, r2, #12
 800d0ee:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800d0f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64 += (uint64_t)tmp32;
 800d0fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d102:	2200      	movs	r2, #0
 800d104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d10c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d110:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800d114:	4621      	mov	r1, r4
 800d116:	1851      	adds	r1, r2, r1
 800d118:	65b9      	str	r1, [r7, #88]	; 0x58
 800d11a:	4629      	mov	r1, r5
 800d11c:	eb43 0101 	adc.w	r1, r3, r1
 800d120:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d122:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d126:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800d12a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	2200      	movs	r2, #0
 800d132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d136:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d13a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800d13e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d142:	f7f3 fe09 	bl	8000d58 <__aeabi_uldivmod>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800d14e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d152:	8adb      	ldrh	r3, [r3, #22]
 800d154:	b29b      	uxth	r3, r3
 800d156:	2200      	movs	r2, #0
 800d158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d15c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d160:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d164:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d168:	4621      	mov	r1, r4
 800d16a:	428a      	cmp	r2, r1
 800d16c:	4629      	mov	r1, r5
 800d16e:	418b      	sbcs	r3, r1
 800d170:	d204      	bcs.n	800d17c <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800d172:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800d176:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d17a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800d17c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f000 82e9 	beq.w	800d75a <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800d188:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d18c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 82e2 	beq.w	800d75a <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800d196:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d19a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 82dc 	beq.w	800d75a <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800d1a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f000 82d5 	beq.w	800d75a <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800d1b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d1b4:	885b      	ldrh	r3, [r3, #2]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	653b      	str	r3, [r7, #80]	; 0x50
 800d1bc:	657a      	str	r2, [r7, #84]	; 0x54
 800d1be:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d1c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800d1c6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	462b      	mov	r3, r5
 800d1ce:	f04f 0000 	mov.w	r0, #0
 800d1d2:	f04f 0100 	mov.w	r1, #0
 800d1d6:	0159      	lsls	r1, r3, #5
 800d1d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d1dc:	0150      	lsls	r0, r2, #5
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	1b11      	subs	r1, r2, r4
 800d1e4:	64b9      	str	r1, [r7, #72]	; 0x48
 800d1e6:	eb63 0305 	sbc.w	r3, r3, r5
 800d1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1ec:	f04f 0200 	mov.w	r2, #0
 800d1f0:	f04f 0300 	mov.w	r3, #0
 800d1f4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	008b      	lsls	r3, r1, #2
 800d1fc:	4641      	mov	r1, r8
 800d1fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d202:	4641      	mov	r1, r8
 800d204:	008a      	lsls	r2, r1, #2
 800d206:	4611      	mov	r1, r2
 800d208:	461a      	mov	r2, r3
 800d20a:	460b      	mov	r3, r1
 800d20c:	191b      	adds	r3, r3, r4
 800d20e:	643b      	str	r3, [r7, #64]	; 0x40
 800d210:	4613      	mov	r3, r2
 800d212:	eb45 0303 	adc.w	r3, r5, r3
 800d216:	647b      	str	r3, [r7, #68]	; 0x44
 800d218:	f04f 0200 	mov.w	r2, #0
 800d21c:	f04f 0300 	mov.w	r3, #0
 800d220:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d224:	4629      	mov	r1, r5
 800d226:	02cb      	lsls	r3, r1, #11
 800d228:	4621      	mov	r1, r4
 800d22a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d22e:	4621      	mov	r1, r4
 800d230:	02ca      	lsls	r2, r1, #11
 800d232:	461c      	mov	r4, r3
 800d234:	4613      	mov	r3, r2
 800d236:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800d23a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	085b      	lsrs	r3, r3, #1
 800d242:	b29b      	uxth	r3, r3
 800d244:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800d248:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d24c:	2200      	movs	r2, #0
 800d24e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d252:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d256:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d25a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d25e:	4621      	mov	r1, r4
 800d260:	1851      	adds	r1, r2, r1
 800d262:	63b9      	str	r1, [r7, #56]	; 0x38
 800d264:	4629      	mov	r1, r5
 800d266:	eb43 0101 	adc.w	r1, r3, r1
 800d26a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d26c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d270:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800d274:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	2200      	movs	r2, #0
 800d27e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d282:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d286:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800d28a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d28e:	f7f3 fd63 	bl	8000d58 <__aeabi_uldivmod>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800d29a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d29e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2a2:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800d2a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	011a      	lsls	r2, r3, #4
 800d2ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2b0:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800d2b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	633b      	str	r3, [r7, #48]	; 0x30
 800d2bc:	637a      	str	r2, [r7, #52]	; 0x34
 800d2be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d2c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800d2c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d2d2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d2d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d2da:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800d2de:	4622      	mov	r2, r4
 800d2e0:	fb02 f203 	mul.w	r2, r2, r3
 800d2e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	fb01 f303 	mul.w	r3, r1, r3
 800d2ee:	441a      	add	r2, r3
 800d2f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	fba3 1301 	umull	r1, r3, r3, r1
 800d2fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d2fe:	460b      	mov	r3, r1
 800d300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d304:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d308:	18d3      	adds	r3, r2, r3
 800d30a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d30e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d312:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d316:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800d31a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d31e:	8b5b      	ldrh	r3, [r3, #26]
 800d320:	b29b      	uxth	r3, r3
 800d322:	2200      	movs	r2, #0
 800d324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d328:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d32c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d330:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d334:	4622      	mov	r2, r4
 800d336:	fb02 f203 	mul.w	r2, r2, r3
 800d33a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d33e:	4629      	mov	r1, r5
 800d340:	fb01 f303 	mul.w	r3, r1, r3
 800d344:	441a      	add	r2, r3
 800d346:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d34a:	4621      	mov	r1, r4
 800d34c:	fba3 1301 	umull	r1, r3, r3, r1
 800d350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d354:	460b      	mov	r3, r1
 800d356:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d35e:	18d3      	adds	r3, r2, r3
 800d360:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d364:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d368:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d36c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800d370:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d374:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800d378:	62b9      	str	r1, [r7, #40]	; 0x28
 800d37a:	f143 0300 	adc.w	r3, r3, #0
 800d37e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d380:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d384:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800d388:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d38c:	f04f 0000 	mov.w	r0, #0
 800d390:	f04f 0100 	mov.w	r1, #0
 800d394:	0cd0      	lsrs	r0, r2, #19
 800d396:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800d39a:	0cd9      	lsrs	r1, r3, #19
 800d39c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800d3a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d3a4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800d3a8:	6239      	str	r1, [r7, #32]
 800d3aa:	f143 0300 	adc.w	r3, r3, #0
 800d3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d3b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d3b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800d3b8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d3bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3c0:	f04f 0300 	mov.w	r3, #0
 800d3c4:	f7f3 fcc8 	bl	8000d58 <__aeabi_uldivmod>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800d3d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d3d4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800d3d8:	f173 0300 	sbcs.w	r3, r3, #0
 800d3dc:	d305      	bcc.n	800d3ea <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800d3de:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d3e2:	f04f 0300 	mov.w	r3, #0
 800d3e6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800d3ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d3ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3f2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800d3f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	61bb      	str	r3, [r7, #24]
 800d3fe:	61fa      	str	r2, [r7, #28]
 800d400:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d404:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800d408:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	2200      	movs	r2, #0
 800d410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d41c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d420:	4622      	mov	r2, r4
 800d422:	fb02 f203 	mul.w	r2, r2, r3
 800d426:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d42a:	4629      	mov	r1, r5
 800d42c:	fb01 f303 	mul.w	r3, r1, r3
 800d430:	441a      	add	r2, r3
 800d432:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d436:	4621      	mov	r1, r4
 800d438:	fba3 1301 	umull	r1, r3, r3, r1
 800d43c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d440:	460b      	mov	r3, r1
 800d442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d44a:	18d3      	adds	r3, r2, r3
 800d44c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d450:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d454:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d458:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800d45c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d460:	8b5b      	ldrh	r3, [r3, #26]
 800d462:	b29b      	uxth	r3, r3
 800d464:	2200      	movs	r2, #0
 800d466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d46a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d46e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d472:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d476:	4622      	mov	r2, r4
 800d478:	fb02 f203 	mul.w	r2, r2, r3
 800d47c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d480:	4629      	mov	r1, r5
 800d482:	fb01 f303 	mul.w	r3, r1, r3
 800d486:	441a      	add	r2, r3
 800d488:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d48c:	4621      	mov	r1, r4
 800d48e:	fba3 1301 	umull	r1, r3, r3, r1
 800d492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d496:	460b      	mov	r3, r1
 800d498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d49c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4a0:	18d3      	adds	r3, r2, r3
 800d4a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d4a6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d4aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d4ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800d4b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d4b6:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800d4ba:	6139      	str	r1, [r7, #16]
 800d4bc:	f143 0300 	adc.w	r3, r3, #0
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d4c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800d4ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d4ce:	f04f 0000 	mov.w	r0, #0
 800d4d2:	f04f 0100 	mov.w	r1, #0
 800d4d6:	0cd0      	lsrs	r0, r2, #19
 800d4d8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800d4dc:	0cd9      	lsrs	r1, r3, #19
 800d4de:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800d4e2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4ea:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800d4ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d4f0:	891b      	ldrh	r3, [r3, #8]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	673b      	str	r3, [r7, #112]	; 0x70
 800d4f8:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800d4fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800d4fe:	462b      	mov	r3, r5
 800d500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d504:	4642      	mov	r2, r8
 800d506:	fb02 f203 	mul.w	r2, r2, r3
 800d50a:	464b      	mov	r3, r9
 800d50c:	4621      	mov	r1, r4
 800d50e:	fb01 f303 	mul.w	r3, r1, r3
 800d512:	4413      	add	r3, r2
 800d514:	4622      	mov	r2, r4
 800d516:	4641      	mov	r1, r8
 800d518:	fba2 1201 	umull	r1, r2, r2, r1
 800d51c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d520:	460a      	mov	r2, r1
 800d522:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800d526:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800d52a:	4413      	add	r3, r2
 800d52c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d534:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800d538:	4622      	mov	r2, r4
 800d53a:	fb02 f203 	mul.w	r2, r2, r3
 800d53e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d542:	4629      	mov	r1, r5
 800d544:	fb01 f303 	mul.w	r3, r1, r3
 800d548:	4413      	add	r3, r2
 800d54a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d54e:	4621      	mov	r1, r4
 800d550:	fba2 1201 	umull	r1, r2, r2, r1
 800d554:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d558:	460a      	mov	r2, r1
 800d55a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800d55e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d562:	4413      	add	r3, r2
 800d564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d568:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800d56c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d570:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800d574:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d578:	88db      	ldrh	r3, [r3, #6]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	2200      	movs	r2, #0
 800d57e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d580:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d582:	f04f 0200 	mov.w	r2, #0
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800d58e:	4629      	mov	r1, r5
 800d590:	01cb      	lsls	r3, r1, #7
 800d592:	4621      	mov	r1, r4
 800d594:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800d598:	4621      	mov	r1, r4
 800d59a:	01ca      	lsls	r2, r1, #7
 800d59c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d5a0:	1884      	adds	r4, r0, r2
 800d5a2:	60bc      	str	r4, [r7, #8]
 800d5a4:	eb41 0303 	adc.w	r3, r1, r3
 800d5a8:	60fb      	str	r3, [r7, #12]
 800d5aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d5ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800d5b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5b6:	88db      	ldrh	r3, [r3, #6]
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	663b      	str	r3, [r7, #96]	; 0x60
 800d5be:	667a      	str	r2, [r7, #100]	; 0x64
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	f04f 0300 	mov.w	r3, #0
 800d5c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	020b      	lsls	r3, r1, #8
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	020a      	lsls	r2, r1, #8
 800d5da:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d5de:	f7f3 fbbb 	bl	8000d58 <__aeabi_uldivmod>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800d5ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d5ee:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800d5f2:	6039      	str	r1, [r7, #0]
 800d5f4:	f143 0300 	adc.w	r3, r3, #0
 800d5f8:	607b      	str	r3, [r7, #4]
 800d5fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d5fe:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800d602:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d60a:	f04f 0300 	mov.w	r3, #0
 800d60e:	f7f3 fba3 	bl	8000d58 <__aeabi_uldivmod>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800d61a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d61e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800d622:	f173 0300 	sbcs.w	r3, r3, #0
 800d626:	d305      	bcc.n	800d634 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800d628:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d62c:	f04f 0300 	mov.w	r3, #0
 800d630:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800d634:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d638:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d63c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800d63e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	021b      	lsls	r3, r3, #8
 800d646:	4618      	mov	r0, r3
 800d648:	f7fe ffcd 	bl	800c5e6 <VL53LX_isqrt>
 800d64c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800d650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d654:	785b      	ldrb	r3, [r3, #1]
 800d656:	461a      	mov	r2, r3
 800d658:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d65c:	fb02 f303 	mul.w	r3, r2, r3
 800d660:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53LX_p_028 <
 800d664:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d668:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800d66a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800d66e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800d670:	4293      	cmp	r3, r2
 800d672:	d218      	bcs.n	800d6a6 <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800d674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800d67c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d680:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800d688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d68c:	021b      	lsls	r3, r3, #8
 800d68e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800d692:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d203      	bcs.n	800d6a6 <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800d69e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800d6a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6aa:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800d6ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d6b0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800d6b2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800d6b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d6b8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800d6ba:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d6be:	f000 f854 	bl	800d76a <VL53LX_f_002>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800d6c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6ca:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800d6cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800d6d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d6da:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d6e4:	fb02 f303 	mul.w	r3, r2, r3
 800d6e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800d6ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800d6f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d6fa:	091b      	lsrs	r3, r3, #4
 800d6fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800d700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d704:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800d706:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800d708:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d70c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800d70e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800d710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d714:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800d716:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d71a:	f000 f826 	bl	800d76a <VL53LX_f_002>
 800d71e:	4603      	mov	r3, r0
 800d720:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800d722:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d726:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800d728:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d72c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800d730:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d734:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800d738:	429a      	cmp	r2, r3
 800d73a:	da07      	bge.n	800d74c <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800d73c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d740:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800d744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d748:	801a      	strh	r2, [r3, #0]
 800d74a:	e006      	b.n	800d75a <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800d74c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d750:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800d754:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d758:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800d75a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800d75e:	4618      	mov	r0, r3
 800d760:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d764:	46bd      	mov	sp, r7
 800d766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d76a <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b086      	sub	sp, #24
 800d76e:	af00      	add	r7, sp, #0
 800d770:	60f8      	str	r0, [r7, #12]
 800d772:	60b9      	str	r1, [r7, #8]
 800d774:	607a      	str	r2, [r7, #4]
 800d776:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	fb03 f303 	mul.w	r3, r3, r3
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	4413      	add	r3, r2
 800d790:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800d792:	6938      	ldr	r0, [r7, #16]
 800d794:	f7fe ff27 	bl	800c5e6 <VL53LX_isqrt>
 800d798:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	4413      	add	r3, r2
 800d7a0:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	011b      	lsls	r3, r3, #4
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe ff1d 	bl	800c5e6 <VL53LX_isqrt>
 800d7ac:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
 800d7b6:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d009      	beq.n	800d7d2 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800d7d2:	697b      	ldr	r3, [r7, #20]

}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2218      	movs	r2, #24
 800d7ec:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	73fb      	strb	r3, [r7, #15]
 800d812:	e01f      	b.n	800d854 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800d814:	7bfb      	ldrb	r3, [r7, #15]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	4413      	add	r3, r2
 800d81a:	2200      	movs	r2, #0
 800d81c:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4413      	add	r3, r2
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800d82a:	7bfb      	ldrb	r3, [r7, #15]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	4413      	add	r3, r2
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800d836:	7bfa      	ldrb	r2, [r7, #15]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	322e      	adds	r2, #46	; 0x2e
 800d83c:	2100      	movs	r1, #0
 800d83e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800d842:	7bfa      	ldrb	r2, [r7, #15]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3246      	adds	r2, #70	; 0x46
 800d848:	2100      	movs	r1, #0
 800d84a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	3301      	adds	r3, #1
 800d852:	73fb      	strb	r3, [r7, #15]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	785b      	ldrb	r3, [r3, #1]
 800d858:	7bfa      	ldrb	r2, [r7, #15]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d3da      	bcc.n	800d814 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2208      	movs	r2, #8
 800d86a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d87c:	461a      	mov	r2, r3
 800d87e:	2118      	movs	r1, #24
 800d880:	2000      	movs	r0, #0
 800d882:	f7ff f9e8 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d88c:	461a      	mov	r2, r3
 800d88e:	2118      	movs	r1, #24
 800d890:	2000      	movs	r0, #0
 800d892:	f7ff f9e0 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d89c:	461a      	mov	r2, r3
 800d89e:	2118      	movs	r1, #24
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f7ff f9d8 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	2118      	movs	r1, #24
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	f7ff f9d0 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d8bc:	461a      	mov	r2, r3
 800d8be:	2118      	movs	r1, #24
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	f7ff f9c8 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800d8c6:	bf00      	nop
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d8ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8d2:	b090      	sub	sp, #64	; 0x40
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	61b9      	str	r1, [r7, #24]
 800d8d8:	617a      	str	r2, [r7, #20]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	4603      	mov	r3, r0
 800d8de:	83fb      	strh	r3, [r7, #30]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800d8f6:	f04f 0200 	mov.w	r2, #0
 800d8fa:	f04f 0300 	mov.w	r3, #0
 800d8fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53LX_p_018       = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800d90e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d910:	7a5a      	ldrb	r2, [r3, #9]
 800d912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d914:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800d916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d918:	7a1a      	ldrb	r2, [r3, #8]
 800d91a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d91c:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800d91e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d920:	7a9a      	ldrb	r2, [r3, #10]
 800d922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d924:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800d926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d928:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d92c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d92e:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800d930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d932:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff f93c 	bl	800cbb4 <VL53LX_decode_vcsel_period>
 800d93c:	4603      	mov	r3, r0
 800d93e:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800d940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d942:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800d944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d94a:	17da      	asrs	r2, r3, #31
 800d94c:	60bb      	str	r3, [r7, #8]
 800d94e:	60fa      	str	r2, [r7, #12]
 800d950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800d958:	8bfb      	ldrh	r3, [r7, #30]
 800d95a:	2200      	movs	r2, #0
 800d95c:	4698      	mov	r8, r3
 800d95e:	4691      	mov	r9, r2
 800d960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d962:	fb08 f203 	mul.w	r2, r8, r3
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	fb09 f303 	mul.w	r3, r9, r3
 800d96c:	4413      	add	r3, r2
 800d96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d970:	fba2 4508 	umull	r4, r5, r2, r8
 800d974:	442b      	add	r3, r5
 800d976:	461d      	mov	r5, r3
 800d978:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800d97c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800d980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d984:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800d988:	f143 0b00 	adc.w	fp, r3, #0
 800d98c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800d990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d994:	2b00      	cmp	r3, #0
 800d996:	da08      	bge.n	800d9aa <VL53LX_f_006+0xdc>
 800d998:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d99c:	1851      	adds	r1, r2, r1
 800d99e:	6039      	str	r1, [r7, #0]
 800d9a0:	f143 0300 	adc.w	r3, r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]
 800d9a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9aa:	f04f 0000 	mov.w	r0, #0
 800d9ae:	f04f 0100 	mov.w	r1, #0
 800d9b2:	0b10      	lsrs	r0, r2, #12
 800d9b4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d9b8:	1319      	asrs	r1, r3, #12
 800d9ba:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d9c8:	e062      	b.n	800da90 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800d9ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9ce:	089b      	lsrs	r3, r3, #2
 800d9d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800d9d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d9d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9da:	4413      	add	r3, r2
 800d9dc:	7c9b      	ldrb	r3, [r3, #18]
 800d9de:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	dd4f      	ble.n	800da86 <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800d9e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9e8:	7a9b      	ldrb	r3, [r3, #10]
 800d9ea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d20f      	bcs.n	800da12 <VL53LX_f_006+0x144>
 800d9f2:	7f7b      	ldrb	r3, [r7, #29]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00c      	beq.n	800da12 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800d9f8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9fe:	3206      	adds	r2, #6
 800da00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	441a      	add	r2, r3
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	fb02 f303 	mul.w	r3, r2, r3
 800da0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da10:	e004      	b.n	800da1c <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da16:	fb02 f303 	mul.w	r3, r2, r3
 800da1a:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800da1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fe fde1 	bl	800c5e6 <VL53LX_isqrt>
 800da24:	4603      	mov	r3, r0
 800da26:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53LX_p_018 += (samples/2);
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	0fda      	lsrs	r2, r3, #31
 800da2c:	4413      	add	r3, r2
 800da2e:	105b      	asrs	r3, r3, #1
 800da30:	461a      	mov	r2, r3
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	4413      	add	r3, r2
 800da36:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 /= samples;
 800da38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	fb92 f3f3 	sdiv	r3, r2, r3
 800da40:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	69ba      	ldr	r2, [r7, #24]
 800da46:	fb02 f303 	mul.w	r3, r2, r3
 800da4a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 += 8;
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	3308      	adds	r3, #8
 800da50:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 /= 16;
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	2b00      	cmp	r3, #0
 800da56:	da00      	bge.n	800da5a <VL53LX_f_006+0x18c>
 800da58:	330f      	adds	r3, #15
 800da5a:	111b      	asrs	r3, r3, #4
 800da5c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 += amb_events;
 800da5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	4413      	add	r3, r2
 800da64:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800da66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	da01      	bge.n	800da72 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800da72:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800da76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da78:	3216      	adds	r2, #22
 800da7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800da80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da84:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800da86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da8a:	3301      	adds	r3, #1
 800da8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800da90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da92:	7a9b      	ldrb	r3, [r3, #10]
 800da94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800da98:	429a      	cmp	r2, r3
 800da9a:	d396      	bcc.n	800d9ca <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800da9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da9e:	2200      	movs	r2, #0
 800daa0:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800daa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daa4:	7a1b      	ldrb	r3, [r3, #8]
 800daa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800daaa:	e033      	b.n	800db14 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800daac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800dab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dab2:	3206      	adds	r2, #6
 800dab4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dab8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800dabc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dabe:	3116      	adds	r1, #22
 800dac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	dd13      	ble.n	800daf0 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800dac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dacc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dace:	4413      	add	r3, r2
 800dad0:	2201      	movs	r2, #1
 800dad2:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800dad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dada:	4413      	add	r3, r2
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800dae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dae4:	791b      	ldrb	r3, [r3, #4]
 800dae6:	3301      	adds	r3, #1
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daec:	711a      	strb	r2, [r3, #4]
 800daee:	e00c      	b.n	800db0a <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800daf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800daf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800daf6:	4413      	add	r3, r2
 800daf8:	2200      	movs	r2, #0
 800dafa:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800dafc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db02:	4413      	add	r3, r2
 800db04:	2200      	movs	r2, #0
 800db06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800db0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db0e:	3301      	adds	r3, #1
 800db10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800db14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db16:	7a9b      	ldrb	r3, [r3, #10]
 800db18:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d3c5      	bcc.n	800daac <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800db20:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800db24:	4618      	mov	r0, r3
 800db26:	3740      	adds	r7, #64	; 0x40
 800db28:	46bd      	mov	sp, r7
 800db2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db2e <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800db2e:	b480      	push	{r7}
 800db30:	b085      	sub	sp, #20
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800db36:	2300      	movs	r3, #0
 800db38:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800db42:	2300      	movs	r3, #0
 800db44:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]
 800db52:	e02d      	b.n	800dbb0 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	3301      	adds	r3, #1
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	78d2      	ldrb	r2, [r2, #3]
 800db5c:	fb93 f1f2 	sdiv	r1, r3, r2
 800db60:	fb01 f202 	mul.w	r2, r1, r2
 800db64:	1a9b      	subs	r3, r3, r2
 800db66:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	789b      	ldrb	r3, [r3, #2]
 800db6c:	7bfa      	ldrb	r2, [r7, #15]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d21b      	bcs.n	800dbaa <VL53LX_f_007+0x7c>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	789b      	ldrb	r3, [r3, #2]
 800db76:	7b3a      	ldrb	r2, [r7, #12]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d216      	bcs.n	800dbaa <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	4413      	add	r3, r2
 800db82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10f      	bne.n	800dbaa <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800db8a:	7b3b      	ldrb	r3, [r7, #12]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	4413      	add	r3, r2
 800db90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800db94:	2b01      	cmp	r3, #1
 800db96:	d108      	bne.n	800dbaa <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800db98:	7bbb      	ldrb	r3, [r7, #14]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d105      	bne.n	800dbaa <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	7bfa      	ldrb	r2, [r7, #15]
 800dba2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800dba6:	2301      	movs	r3, #1
 800dba8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	3301      	adds	r3, #1
 800dbae:	73fb      	strb	r3, [r7, #15]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	78db      	ldrb	r3, [r3, #3]
 800dbb4:	7bfa      	ldrb	r2, [r7, #15]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d3cc      	bcc.n	800db54 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800dbba:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b085      	sub	sp, #20
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800dbe8:	73fb      	strb	r3, [r7, #15]
 800dbea:	e05a      	b.n	800dca2 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	78da      	ldrb	r2, [r3, #3]
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
 800dbf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbf6:	fb01 f202 	mul.w	r2, r1, r2
 800dbfa:	1a9b      	subs	r3, r3, r2
 800dbfc:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
 800dc00:	3301      	adds	r3, #1
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	78d2      	ldrb	r2, [r2, #3]
 800dc06:	fb93 f1f2 	sdiv	r1, r3, r2
 800dc0a:	fb01 f202 	mul.w	r2, r1, r2
 800dc0e:	1a9b      	subs	r3, r3, r2
 800dc10:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	789b      	ldrb	r3, [r3, #2]
 800dc16:	7b7a      	ldrb	r2, [r7, #13]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d23f      	bcs.n	800dc9c <VL53LX_f_008+0xd2>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	789b      	ldrb	r3, [r3, #2]
 800dc20:	7b3a      	ldrb	r2, [r7, #12]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d23a      	bcs.n	800dc9c <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800dc26:	7b7b      	ldrb	r3, [r7, #13]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10e      	bne.n	800dc52 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800dc34:	7b3b      	ldrb	r3, [r7, #12]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	4413      	add	r3, r2
 800dc3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d107      	bne.n	800dc52 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800dc48:	3301      	adds	r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d905      	bls.n	800dc6e <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800dc6e:	7b7b      	ldrb	r3, [r7, #13]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	4413      	add	r3, r2
 800dc74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d009      	beq.n	800dc90 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800dc7c:	7b7b      	ldrb	r3, [r7, #13]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	4413      	add	r3, r2
 800dc88:	460a      	mov	r2, r1
 800dc8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc8e:	e005      	b.n	800dc9c <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800dc90:	7b7b      	ldrb	r3, [r7, #13]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	4413      	add	r3, r2
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800dca2:	7bfa      	ldrb	r2, [r7, #15]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800dcaa:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800dcb0:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	db9a      	blt.n	800dbec <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800dcb6:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3714      	adds	r7, #20
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr

0800dcc6 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	b087      	sub	sp, #28
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	78db      	ldrb	r3, [r3, #3]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800dcee:	7cbb      	ldrb	r3, [r7, #18]
 800dcf0:	085b      	lsrs	r3, r3, #1
 800dcf2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800dcfa:	75fb      	strb	r3, [r7, #23]
 800dcfc:	e0a2      	b.n	800de44 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	78da      	ldrb	r2, [r3, #3]
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd08:	fb01 f202 	mul.w	r2, r1, r2
 800dd0c:	1a9b      	subs	r3, r3, r2
 800dd0e:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	3301      	adds	r3, #1
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	78d2      	ldrb	r2, [r2, #3]
 800dd18:	fb93 f1f2 	sdiv	r1, r3, r2
 800dd1c:	fb01 f202 	mul.w	r2, r1, r2
 800dd20:	1a9b      	subs	r3, r3, r2
 800dd22:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	789b      	ldrb	r3, [r3, #2]
 800dd28:	7d7a      	ldrb	r2, [r7, #21]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	f080 8087 	bcs.w	800de3e <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800dd34:	7d3a      	ldrb	r2, [r7, #20]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	f080 8081 	bcs.w	800de3e <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800dd3c:	7d7b      	ldrb	r3, [r7, #21]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	4413      	add	r3, r2
 800dd42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d12f      	bne.n	800ddaa <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800dd4a:	7d3b      	ldrb	r3, [r7, #20]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d028      	beq.n	800ddaa <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800dd58:	7d3b      	ldrb	r3, [r7, #20]
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd62:	3b01      	subs	r3, #1
 800dd64:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800dd6c:	7cfa      	ldrb	r2, [r7, #19]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d21b      	bcs.n	800ddaa <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800dd72:	7cfa      	ldrb	r2, [r7, #19]
 800dd74:	4613      	mov	r3, r2
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	4413      	add	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	4413      	add	r3, r2
 800dd84:	3304      	adds	r3, #4
 800dd86:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	7dfa      	ldrb	r2, [r7, #23]
 800dd8c:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800dd8e:	7dfb      	ldrb	r3, [r7, #23]
 800dd90:	3301      	adds	r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	22ff      	movs	r2, #255	; 0xff
 800dd9c:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ddaa:	7d7b      	ldrb	r3, [r7, #21]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d042      	beq.n	800de3e <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ddb8:	7d3b      	ldrb	r3, [r7, #20]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d13b      	bne.n	800de3e <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ddc6:	7d7b      	ldrb	r3, [r7, #21]
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ddda:	7cfa      	ldrb	r2, [r7, #19]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d22e      	bcs.n	800de3e <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800dde0:	7cfa      	ldrb	r2, [r7, #19]
 800dde2:	4613      	mov	r3, r2
 800dde4:	00db      	lsls	r3, r3, #3
 800dde6:	4413      	add	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	7dfa      	ldrb	r2, [r7, #23]
 800ddfa:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800ddfc:	7dfb      	ldrb	r3, [r7, #23]
 800ddfe:	3301      	adds	r3, #1
 800de00:	b2da      	uxtb	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	b2db      	uxtb	r3, r3
 800de12:	3301      	adds	r3, #1
 800de14:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	b2db      	uxtb	r3, r3
 800de26:	3301      	adds	r3, #1
 800de28:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	799b      	ldrb	r3, [r3, #6]
 800de32:	7cba      	ldrb	r2, [r7, #18]
 800de34:	429a      	cmp	r2, r3
 800de36:	d202      	bcs.n	800de3e <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	7cba      	ldrb	r2, [r7, #18]
 800de3c:	719a      	strb	r2, [r3, #6]
		blb++) {
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	3301      	adds	r3, #1
 800de42:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800de44:	7dfa      	ldrb	r2, [r7, #23]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800de4c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800de52:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800de54:	429a      	cmp	r2, r3
 800de56:	f6ff af52 	blt.w	800dcfe <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800de5a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800de5e:	4618      	mov	r0, r3
 800de60:	371c      	adds	r7, #28
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b090      	sub	sp, #64	; 0x40
 800de6e:	af00      	add	r7, sp, #0
 800de70:	4603      	mov	r3, r0
 800de72:	6039      	str	r1, [r7, #0]
 800de74:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800de76:	2300      	movs	r3, #0
 800de78:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800de7c:	f107 030c 	add.w	r3, r7, #12
 800de80:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800de88:	2301      	movs	r3, #1
 800de8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800de94:	2b01      	cmp	r3, #1
 800de96:	d965      	bls.n	800df64 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800de98:	e05f      	b.n	800df5a <VL53LX_f_016+0xf0>

		swapped = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800dea0:	2301      	movs	r3, #1
 800dea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dea6:	e051      	b.n	800df4c <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800dea8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800deac:	1e5a      	subs	r2, r3, #1
 800deae:	4613      	mov	r3, r2
 800deb0:	00db      	lsls	r3, r3, #3
 800deb2:	4413      	add	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	4413      	add	r3, r2
 800debe:	3304      	adds	r3, #4
 800dec0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800dec2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800dec6:	4613      	mov	r3, r2
 800dec8:	00db      	lsls	r3, r3, #3
 800deca:	4413      	add	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	4413      	add	r3, r2
 800ded6:	3304      	adds	r3, #4
 800ded8:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d118      	bne.n	800df12 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800dee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee2:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800dee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800dee8:	429a      	cmp	r2, r3
 800deea:	da2a      	bge.n	800df42 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800deec:	2224      	movs	r2, #36	; 0x24
 800deee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800def0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800def2:	f008 f967 	bl	80161c4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800def6:	2224      	movs	r2, #36	; 0x24
 800def8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800defa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800defc:	f008 f962 	bl	80161c4 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800df00:	2224      	movs	r2, #36	; 0x24
 800df02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df06:	f008 f95d 	bl	80161c4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800df0a:	2301      	movs	r3, #1
 800df0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800df10:	e017      	b.n	800df42 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800df12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df14:	699a      	ldr	r2, [r3, #24]
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d911      	bls.n	800df42 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800df1e:	2224      	movs	r2, #36	; 0x24
 800df20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df24:	f008 f94e 	bl	80161c4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800df28:	2224      	movs	r2, #36	; 0x24
 800df2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df2e:	f008 f949 	bl	80161c4 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800df32:	2224      	movs	r2, #36	; 0x24
 800df34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df38:	f008 f944 	bl	80161c4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800df3c:	2301      	movs	r3, #1
 800df3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800df42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df46:	3301      	adds	r3, #1
 800df48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800df52:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800df56:	429a      	cmp	r2, r3
 800df58:	d3a6      	bcc.n	800dea8 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800df5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d19b      	bne.n	800de9a <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800df62:	e000      	b.n	800df66 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800df64:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800df66:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3740      	adds	r7, #64	; 0x40
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800df72:	b480      	push	{r7}
 800df74:	b087      	sub	sp, #28
 800df76:	af00      	add	r7, sp, #0
 800df78:	4603      	mov	r3, r0
 800df7a:	60b9      	str	r1, [r7, #8]
 800df7c:	607a      	str	r2, [r7, #4]
 800df7e:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800df80:	2300      	movs	r3, #0
 800df82:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800df84:	2300      	movs	r3, #0
 800df86:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800df8c:	7bfa      	ldrb	r2, [r7, #15]
 800df8e:	4613      	mov	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	4413      	add	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	4413      	add	r3, r2
 800df9e:	3304      	adds	r3, #4
 800dfa0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	75fb      	strb	r3, [r7, #23]
 800dfb4:	e01c      	b.n	800dff0 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	78da      	ldrb	r2, [r3, #3]
 800dfba:	7dfb      	ldrb	r3, [r7, #23]
 800dfbc:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfc0:	fb01 f202 	mul.w	r2, r1, r2
 800dfc4:	1a9b      	subs	r3, r3, r2
 800dfc6:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	68da      	ldr	r2, [r3, #12]
 800dfcc:	7d79      	ldrb	r1, [r7, #21]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	3106      	adds	r1, #6
 800dfd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfd6:	441a      	add	r2, r3
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	689a      	ldr	r2, [r3, #8]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	441a      	add	r2, r3
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	3301      	adds	r3, #1
 800dfee:	75fb      	strb	r3, [r7, #23]
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	791b      	ldrb	r3, [r3, #4]
 800dff4:	7dfa      	ldrb	r2, [r7, #23]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d9dd      	bls.n	800dfb6 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	68da      	ldr	r2, [r3, #12]
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800e008:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	371c      	adds	r7, #28
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b08d      	sub	sp, #52	; 0x34
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	60ba      	str	r2, [r7, #8]
 800e020:	607b      	str	r3, [r7, #4]
 800e022:	4603      	mov	r3, r0
 800e024:	73fb      	strb	r3, [r7, #15]
 800e026:	460b      	mov	r3, r1
 800e028:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e02a:	2300      	movs	r3, #0
 800e02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e046:	7bfa      	ldrb	r2, [r7, #15]
 800e048:	4613      	mov	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	4413      	add	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	4413      	add	r3, r2
 800e058:	3304      	adds	r3, #4
 800e05a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	789b      	ldrb	r3, [r3, #2]
 800e060:	2bff      	cmp	r3, #255	; 0xff
 800e062:	d102      	bne.n	800e06a <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	2201      	movs	r2, #1
 800e068:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	789b      	ldrb	r3, [r3, #2]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	78d2      	ldrb	r2, [r2, #3]
 800e072:	fbb3 f1f2 	udiv	r1, r3, r2
 800e076:	fb01 f202 	mul.w	r2, r1, r2
 800e07a:	1a9b      	subs	r3, r3, r2
 800e07c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800e080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e084:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	8c3b      	ldrh	r3, [r7, #32]
 800e08e:	4413      	add	r3, r2
 800e090:	b29b      	uxth	r3, r3
 800e092:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800e094:	8c3a      	ldrh	r2, [r7, #32]
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	789b      	ldrb	r3, [r3, #2]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800e0a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0a6:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	791b      	ldrb	r3, [r3, #4]
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	8bfb      	ldrh	r3, [r7, #30]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800e0b6:	8bfa      	ldrh	r2, [r7, #30]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	789b      	ldrb	r3, [r3, #2]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800e0c4:	8bfa      	ldrh	r2, [r7, #30]
 800e0c6:	8c3b      	ldrh	r3, [r7, #32]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800e0ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e0d2:	2b03      	cmp	r3, #3
 800e0d4:	dd01      	ble.n	800e0da <VL53LX_f_015+0xc2>
		window_width = 3;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800e0da:	8c3a      	ldrh	r2, [r7, #32]
 800e0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0de:	4413      	add	r3, r2
 800e0e0:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800e0e2:	b219      	sxth	r1, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	78da      	ldrb	r2, [r3, #3]
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	3314      	adds	r3, #20
 800e0ec:	7bbc      	ldrb	r4, [r7, #14]
 800e0ee:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800e0f2:	9301      	str	r3, [sp, #4]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	f000 f846 	bl	800e18a <VL53LX_f_020>
 800e0fe:	4603      	mov	r3, r0
 800e100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800e104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d114      	bne.n	800e136 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800e10c:	8bfa      	ldrh	r2, [r7, #30]
 800e10e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800e114:	b218      	sxth	r0, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	78da      	ldrb	r2, [r3, #3]
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	331c      	adds	r3, #28
 800e11e:	7bbc      	ldrb	r4, [r7, #14]
 800e120:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4623      	mov	r3, r4
 800e12c:	f000 f82d 	bl	800e18a <VL53LX_f_020>
 800e130:	4603      	mov	r3, r0
 800e132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	695a      	ldr	r2, [r3, #20]
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	69db      	ldr	r3, [r3, #28]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d909      	bls.n	800e156 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	69da      	ldr	r2, [r3, #28]
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	69ba      	ldr	r2, [r7, #24]
 800e154:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	699a      	ldr	r2, [r3, #24]
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d203      	bcs.n	800e16a <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	699a      	ldr	r2, [r3, #24]
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	699a      	ldr	r2, [r3, #24]
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	69db      	ldr	r3, [r3, #28]
 800e172:	429a      	cmp	r2, r3
 800e174:	d903      	bls.n	800e17e <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	699a      	ldr	r2, [r3, #24]
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800e17e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e182:	4618      	mov	r0, r3
 800e184:	372c      	adds	r7, #44	; 0x2c
 800e186:	46bd      	mov	sp, r7
 800e188:	bd90      	pop	{r4, r7, pc}

0800e18a <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800e18a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18e:	b09d      	sub	sp, #116	; 0x74
 800e190:	af00      	add	r7, sp, #0
 800e192:	461c      	mov	r4, r3
 800e194:	4603      	mov	r3, r0
 800e196:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e19a:	460b      	mov	r3, r1
 800e19c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	4623      	mov	r3, r4
 800e1a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53LX_p_018        = 0;
 800e1be:	f04f 0200 	mov.w	r2, #0
 800e1c2:	f04f 0300 	mov.w	r3, #0
 800e1c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 800e1ca:	f04f 0200 	mov.w	r2, #0
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 800e1d6:	f04f 0200 	mov.w	r2, #0
 800e1da:	f04f 0300 	mov.w	r3, #0
 800e1de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800e1e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e1e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1ea:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800e1ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f000 809c 	beq.w	800e32e <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800e1f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e1fe:	e08f      	b.n	800e320 <VL53LX_f_020+0x196>

		if (lb < 0)
 800e200:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e204:	2b00      	cmp	r3, #0
 800e206:	da09      	bge.n	800e21c <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800e208:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e212:	4413      	add	r3, r2
 800e214:	b29b      	uxth	r3, r3
 800e216:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800e21a:	e00a      	b.n	800e232 <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800e21c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 800e220:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800e224:	fb91 f3f2 	sdiv	r3, r1, r2
 800e228:	fb02 f303 	mul.w	r3, r2, r3
 800e22c:	1acb      	subs	r3, r1, r3
 800e22e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800e232:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e236:	2b00      	cmp	r3, #0
 800e238:	db6b      	blt.n	800e312 <VL53LX_f_020+0x188>
 800e23a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e23e:	2b17      	cmp	r3, #23
 800e240:	dc67      	bgt.n	800e312 <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800e242:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e246:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e24a:	3306      	adds	r3, #6
 800e24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e250:	17da      	asrs	r2, r3, #31
 800e252:	633b      	str	r3, [r7, #48]	; 0x30
 800e254:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53LX_p_028;
 800e256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e25a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e25e:	17da      	asrs	r2, r3, #31
 800e260:	62bb      	str	r3, [r7, #40]	; 0x28
 800e262:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53LX_p_018 =
 800e264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e26a:	4602      	mov	r2, r0
 800e26c:	1a9b      	subs	r3, r3, r2
 800e26e:	623b      	str	r3, [r7, #32]
 800e270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e272:	460a      	mov	r2, r1
 800e274:	eb63 0302 	sbc.w	r3, r3, r2
 800e278:	627b      	str	r3, [r7, #36]	; 0x24
 800e27a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e27e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800e282:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e286:	2b00      	cmp	r3, #0
 800e288:	d009      	beq.n	800e29e <VL53LX_f_020+0x114>
 800e28a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e28e:	2b00      	cmp	r3, #0
 800e290:	da05      	bge.n	800e29e <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800e292:	f04f 0200 	mov.w	r2, #0
 800e296:	f04f 0300 	mov.w	r3, #0
 800e29a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53LX_p_018;
 800e29e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e2a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e2a6:	1884      	adds	r4, r0, r2
 800e2a8:	61bc      	str	r4, [r7, #24]
 800e2aa:	eb41 0303 	adc.w	r3, r1, r3
 800e2ae:	61fb      	str	r3, [r7, #28]
 800e2b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e2b4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800e2b8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e2bc:	17da      	asrs	r2, r3, #31
 800e2be:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e2c2:	f04f 0200 	mov.w	r2, #0
 800e2c6:	f04f 0300 	mov.w	r3, #0
 800e2ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2cc:	02cb      	lsls	r3, r1, #11
 800e2ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2d0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e2d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2d6:	02ca      	lsls	r2, r1, #11
 800e2d8:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 800e2dc:	f143 0600 	adc.w	r6, r3, #0
 800e2e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2e2:	fb06 f203 	mul.w	r2, r6, r3
 800e2e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2e8:	fb05 f303 	mul.w	r3, r5, r3
 800e2ec:	441a      	add	r2, r3
 800e2ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2f0:	fba3 ab05 	umull	sl, fp, r3, r5
 800e2f4:	eb02 030b 	add.w	r3, r2, fp
 800e2f8:	469b      	mov	fp, r3
			weighted_sum +=
 800e2fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e2fe:	eb12 010a 	adds.w	r1, r2, sl
 800e302:	6139      	str	r1, [r7, #16]
 800e304:	eb43 030b 	adc.w	r3, r3, fp
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e30e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800e312:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e316:	b29b      	uxth	r3, r3
 800e318:	3301      	adds	r3, #1
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e320:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e324:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800e328:	429a      	cmp	r2, r3
 800e32a:	f77f af69 	ble.w	800e200 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800e32e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e332:	2a01      	cmp	r2, #1
 800e334:	f173 0300 	sbcs.w	r3, r3, #0
 800e338:	db3b      	blt.n	800e3b2 <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800e33a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e33e:	0fd9      	lsrs	r1, r3, #31
 800e340:	2000      	movs	r0, #0
 800e342:	60b9      	str	r1, [r7, #8]
 800e344:	60f8      	str	r0, [r7, #12]
 800e346:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e34a:	4621      	mov	r1, r4
 800e34c:	eb11 0802 	adds.w	r8, r1, r2
 800e350:	4629      	mov	r1, r5
 800e352:	eb41 0903 	adc.w	r9, r1, r3
 800e356:	f04f 0200 	mov.w	r2, #0
 800e35a:	f04f 0300 	mov.w	r3, #0
 800e35e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800e362:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800e366:	ea4f 0369 	mov.w	r3, r9, asr #1
 800e36a:	4610      	mov	r0, r2
 800e36c:	4619      	mov	r1, r3
 800e36e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e372:	1814      	adds	r4, r2, r0
 800e374:	603c      	str	r4, [r7, #0]
 800e376:	414b      	adcs	r3, r1
 800e378:	607b      	str	r3, [r7, #4]
 800e37a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e37e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800e382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e386:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e38a:	f7f2 fc95 	bl	8000cb8 <__aeabi_ldivmod>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 800e396:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	da05      	bge.n	800e3aa <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800e39e:	f04f 0200 	mov.w	r2, #0
 800e3a2:	f04f 0300 	mov.w	r3, #0
 800e3a6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 800e3aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3b0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e3b2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3774      	adds	r7, #116	; 0x74
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3c0 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60b9      	str	r1, [r7, #8]
 800e3c8:	607a      	str	r2, [r7, #4]
 800e3ca:	603b      	str	r3, [r7, #0]
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e3dc:	7bfa      	ldrb	r2, [r7, #15]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	00db      	lsls	r3, r3, #3
 800e3e2:	4413      	add	r3, r2
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800e3f2:	22ac      	movs	r2, #172	; 0xac
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	6a38      	ldr	r0, [r7, #32]
 800e3f8:	f007 fee4 	bl	80161c4 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800e402:	75fb      	strb	r3, [r7, #23]
 800e404:	e020      	b.n	800e448 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	7dfa      	ldrb	r2, [r7, #23]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d304      	bcc.n	800e41a <VL53LX_f_011+0x5a>
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	791b      	ldrb	r3, [r3, #4]
 800e414:	7dfa      	ldrb	r2, [r7, #23]
 800e416:	429a      	cmp	r2, r3
 800e418:	d913      	bls.n	800e442 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	78da      	ldrb	r2, [r3, #3]
 800e41e:	7dfb      	ldrb	r3, [r7, #23]
 800e420:	fbb3 f1f2 	udiv	r1, r3, r2
 800e424:	fb01 f202 	mul.w	r2, r1, r2
 800e428:	1a9b      	subs	r3, r3, r2
 800e42a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800e42c:	6a3b      	ldr	r3, [r7, #32]
 800e42e:	7a9b      	ldrb	r3, [r3, #10]
 800e430:	7d7a      	ldrb	r2, [r7, #21]
 800e432:	429a      	cmp	r2, r3
 800e434:	d205      	bcs.n	800e442 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800e436:	7d7a      	ldrb	r2, [r7, #21]
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	3206      	adds	r2, #6
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800e442:	7dfb      	ldrb	r3, [r7, #23]
 800e444:	3301      	adds	r3, #1
 800e446:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800e448:	7dfa      	ldrb	r2, [r7, #23]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800e450:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800e456:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800e458:	429a      	cmp	r2, r3
 800e45a:	dbd4      	blt.n	800e406 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e45c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	b096      	sub	sp, #88	; 0x58
 800e46e:	af08      	add	r7, sp, #32
 800e470:	4604      	mov	r4, r0
 800e472:	4608      	mov	r0, r1
 800e474:	4611      	mov	r1, r2
 800e476:	461a      	mov	r2, r3
 800e478:	4623      	mov	r3, r4
 800e47a:	73fb      	strb	r3, [r7, #15]
 800e47c:	4603      	mov	r3, r0
 800e47e:	73bb      	strb	r3, [r7, #14]
 800e480:	460b      	mov	r3, r1
 800e482:	737b      	strb	r3, [r7, #13]
 800e484:	4613      	mov	r3, r2
 800e486:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800e488:	2300      	movs	r3, #0
 800e48a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800e48e:	2300      	movs	r3, #0
 800e490:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800e494:	2300      	movs	r3, #0
 800e496:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800e4ba:	7b7b      	ldrb	r3, [r7, #13]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800e4c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4c6:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800e4c8:	f06f 030e 	mvn.w	r3, #14
 800e4cc:	e06f      	b.n	800e5ae <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800e4ce:	7bfb      	ldrb	r3, [r7, #15]
 800e4d0:	7b7a      	ldrb	r2, [r7, #13]
 800e4d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4d6:	fb01 f202 	mul.w	r2, r1, r2
 800e4da:	1a9b      	subs	r3, r3, r2
 800e4dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800e4e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e4e4:	7b39      	ldrb	r1, [r7, #12]
 800e4e6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800e4ea:	f107 0320 	add.w	r3, r7, #32
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4fa:	f000 fddb 	bl	800f0b4 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800e4fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e502:	7b39      	ldrb	r1, [r7, #12]
 800e504:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800e508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	4613      	mov	r3, r2
 800e516:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e518:	f000 fdcc 	bl	800f0b4 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800e51c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00e      	beq.n	800e542 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800e524:	f107 021c 	add.w	r2, r7, #28
 800e528:	7b39      	ldrb	r1, [r7, #12]
 800e52a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800e52e:	f107 0314 	add.w	r3, r7, #20
 800e532:	9301      	str	r3, [sp, #4]
 800e534:	f107 0318 	add.w	r3, r7, #24
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	4613      	mov	r3, r2
 800e53c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e53e:	f000 fdb9 	bl	800f0b4 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800e542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e544:	469c      	mov	ip, r3
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	469e      	mov	lr, r3
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	4698      	mov	r8, r3
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	4619      	mov	r1, r3
 800e552:	6a3b      	ldr	r3, [r7, #32]
 800e554:	461c      	mov	r4, r3
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	461d      	mov	r5, r3
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	461e      	mov	r6, r3
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800e562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800e568:	607b      	str	r3, [r7, #4]
 800e56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e56c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e570:	7bb8      	ldrb	r0, [r7, #14]
 800e572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e574:	9207      	str	r2, [sp, #28]
 800e576:	9306      	str	r3, [sp, #24]
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	9205      	str	r2, [sp, #20]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	9304      	str	r3, [sp, #16]
 800e580:	9603      	str	r6, [sp, #12]
 800e582:	9502      	str	r5, [sp, #8]
 800e584:	9401      	str	r4, [sp, #4]
 800e586:	9100      	str	r1, [sp, #0]
 800e588:	4643      	mov	r3, r8
 800e58a:	4672      	mov	r2, lr
 800e58c:	4661      	mov	r1, ip
 800e58e:	f002 ff2d 	bl	80113ec <VL53LX_f_023>
 800e592:	4603      	mov	r3, r0
 800e594:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800e598:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800e59c:	f113 0f0f 	cmn.w	r3, #15
 800e5a0:	d103      	bne.n	800e5aa <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800e5a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5a8:	801a      	strh	r2, [r3, #0]


	return status;
 800e5aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3738      	adds	r7, #56	; 0x38
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5b8 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800e5b8:	b490      	push	{r4, r7}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	4604      	mov	r4, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	4623      	mov	r3, r4
 800e5c8:	71fb      	strb	r3, [r7, #7]
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	71bb      	strb	r3, [r7, #6]
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	717b      	strb	r3, [r7, #5]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800e5de:	6a3b      	ldr	r3, [r7, #32]
 800e5e0:	79fa      	ldrb	r2, [r7, #7]
 800e5e2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	781a      	ldrb	r2, [r3, #0]
 800e5ee:	6a3b      	ldr	r3, [r7, #32]
 800e5f0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	785a      	ldrb	r2, [r3, #1]
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	789a      	ldrb	r2, [r3, #2]
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	78da      	ldrb	r2, [r3, #3]
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	791a      	ldrb	r2, [r3, #4]
 800e60e:	6a3b      	ldr	r3, [r7, #32]
 800e610:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	795a      	ldrb	r2, [r3, #5]
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	791a      	ldrb	r2, [r3, #4]
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	b2db      	uxtb	r3, r3
 800e626:	3301      	adds	r3, #1
 800e628:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	8c1a      	ldrh	r2, [r3, #32]
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	695b      	ldr	r3, [r3, #20]
 800e644:	b29a      	uxth	r2, r3
 800e646:	6a3b      	ldr	r3, [r7, #32]
 800e648:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	699b      	ldr	r3, [r3, #24]
 800e64e:	b29a      	uxth	r2, r3
 800e650:	6a3b      	ldr	r3, [r7, #32]
 800e652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	6a3b      	ldr	r3, [r7, #32]
 800e65e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	461a      	mov	r2, r3
 800e668:	6a3b      	ldr	r3, [r7, #32]
 800e66a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	691a      	ldr	r2, [r3, #16]
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	461a      	mov	r2, r3
 800e67a:	6a3b      	ldr	r3, [r7, #32]
 800e67c:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	2213      	movs	r2, #19
 800e68c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800e690:	887b      	ldrh	r3, [r7, #2]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00a      	beq.n	800e6ac <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	8c1b      	ldrh	r3, [r3, #32]
 800e69a:	461a      	mov	r2, r3
 800e69c:	887b      	ldrh	r3, [r7, #2]
 800e69e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d903      	bls.n	800e6ac <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	2206      	movs	r2, #6
 800e6a8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800e6ac:	79bb      	ldrb	r3, [r7, #6]
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	021b      	lsls	r3, r3, #8
 800e6b2:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800e6b4:	6a3b      	ldr	r3, [r7, #32]
 800e6b6:	8a9b      	ldrh	r3, [r3, #20]
 800e6b8:	89fa      	ldrh	r2, [r7, #14]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d205      	bcs.n	800e6ca <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800e6c2:	89fb      	ldrh	r3, [r7, #14]
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	81fb      	strh	r3, [r7, #14]
 800e6c8:	e001      	b.n	800e6ce <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800e6ce:	797b      	ldrb	r3, [r7, #5]
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	021b      	lsls	r3, r3, #8
 800e6d4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800e6dc:	89bb      	ldrh	r3, [r7, #12]
 800e6de:	4413      	add	r3, r2
 800e6e0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e6e8:	89fa      	ldrh	r2, [r7, #14]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d805      	bhi.n	800e6fa <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800e6f4:	89ba      	ldrh	r2, [r7, #12]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d203      	bcs.n	800e702 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	2205      	movs	r2, #5
 800e6fe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bc90      	pop	{r4, r7}
 800e70a:	4770      	bx	lr

0800e70c <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800e70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e70e:	b08f      	sub	sp, #60	; 0x3c
 800e710:	af06      	add	r7, sp, #24
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800e722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e724:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e728:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800e72a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e72c:	f7ff f856 	bl	800d7dc <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800e730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e732:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800e736:	22ac      	movs	r2, #172	; 0xac
 800e738:	6839      	ldr	r1, [r7, #0]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f007 fd42 	bl	80161c4 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	781a      	ldrb	r2, [r3, #0]
 800e744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e746:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	785a      	ldrb	r2, [r3, #1]
 800e74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e74e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	789a      	ldrb	r2, [r3, #2]
 800e754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e756:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800e75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e760:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800e762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e764:	2200      	movs	r2, #0
 800e766:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800e768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76a:	2204      	movs	r2, #4
 800e76c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800e76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e770:	2200      	movs	r2, #0
 800e772:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800e774:	2300      	movs	r3, #0
 800e776:	77bb      	strb	r3, [r7, #30]
 800e778:	e008      	b.n	800e78c <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800e77a:	7fbb      	ldrb	r3, [r7, #30]
 800e77c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	4413      	add	r3, r2
 800e782:	2200      	movs	r2, #0
 800e784:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800e786:	7fbb      	ldrb	r3, [r7, #30]
 800e788:	3301      	adds	r3, #1
 800e78a:	77bb      	strb	r3, [r7, #30]
 800e78c:	7fbb      	ldrb	r3, [r7, #30]
 800e78e:	2b04      	cmp	r3, #4
 800e790:	d9f3      	bls.n	800e77a <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800e792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e794:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fd ff58 	bl	800c64e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	f7fd ff8e 	bl	800c6ce <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fe fb66 	bl	800ce8a <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800e7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fd fffc 	bl	800c7c2 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d009      	beq.n	800e7e8 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800e7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7dc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7e4:	f000 fdae 	bl	800f344 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	77bb      	strb	r3, [r7, #30]
 800e7f4:	e01e      	b.n	800e834 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800e7f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d117      	bne.n	800e82e <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800e7fe:	7fbb      	ldrb	r3, [r7, #30]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	3304      	adds	r3, #4
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	8898      	ldrh	r0, [r3, #4]
 800e80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800e810:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e816:	4413      	add	r3, r2
 800e818:	3304      	adds	r3, #4
 800e81a:	9301      	str	r3, [sp, #4]
 800e81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	460b      	mov	r3, r1
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	68f9      	ldr	r1, [r7, #12]
 800e826:	f7fe fb7b 	bl	800cf20 <VL53LX_f_001>
 800e82a:	4603      	mov	r3, r0
 800e82c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800e82e:	7fbb      	ldrb	r3, [r7, #30]
 800e830:	3301      	adds	r3, #1
 800e832:	77bb      	strb	r3, [r7, #30]
 800e834:	7fbb      	ldrb	r3, [r7, #30]
 800e836:	2b04      	cmp	r3, #4
 800e838:	d9dd      	bls.n	800e7f6 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800e83a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d11a      	bne.n	800e878 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800e84a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800e856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e858:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e85c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e85e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800e862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e864:	9102      	str	r1, [sp, #8]
 800e866:	9201      	str	r2, [sp, #4]
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	462b      	mov	r3, r5
 800e86c:	4622      	mov	r2, r4
 800e86e:	4631      	mov	r1, r6
 800e870:	f7ff f82d 	bl	800d8ce <VL53LX_f_006>
 800e874:	4603      	mov	r3, r0
 800e876:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800e878:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d104      	bne.n	800e88a <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800e880:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e882:	f7ff f954 	bl	800db2e <VL53LX_f_007>
 800e886:	4603      	mov	r3, r0
 800e888:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800e88a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d104      	bne.n	800e89c <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800e892:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e894:	f7ff f999 	bl	800dbca <VL53LX_f_008>
 800e898:	4603      	mov	r3, r0
 800e89a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800e89c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d104      	bne.n	800e8ae <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800e8a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e8a6:	f7ff fa0e 	bl	800dcc6 <VL53LX_f_009>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	77bb      	strb	r3, [r7, #30]
 800e8b2:	e0a6      	b.n	800ea02 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800e8b4:	7fba      	ldrb	r2, [r7, #30]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	4413      	add	r3, r2
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e8c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8c4:	4413      	add	r3, r2
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800e8ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d109      	bne.n	800e8e6 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800e8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e8d8:	7fbb      	ldrb	r3, [r7, #30]
 800e8da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff fb48 	bl	800df72 <VL53LX_f_010>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800e8e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d110      	bne.n	800e910 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800e8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fc:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800e900:	7fb8      	ldrb	r0, [r7, #30]
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4613      	mov	r3, r2
 800e906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e908:	f7ff fd5a 	bl	800e3c0 <VL53LX_f_011>
 800e90c:	4603      	mov	r3, r0
 800e90e:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800e910:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10d      	bne.n	800e934 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e920:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800e924:	7fb8      	ldrb	r0, [r7, #30]
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	2300      	movs	r3, #0
 800e92a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e92c:	f7ff fd48 	bl	800e3c0 <VL53LX_f_011>
 800e930:	4603      	mov	r3, r0
 800e932:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800e934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10d      	bne.n	800e958 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800e93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800e942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e944:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800e948:	7fb8      	ldrb	r0, [r7, #30]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	2300      	movs	r3, #0
 800e94e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e950:	f7ff fd36 	bl	800e3c0 <VL53LX_f_011>
 800e954:	4603      	mov	r3, r0
 800e956:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800e958:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d109      	bne.n	800e974 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800e960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e962:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800e966:	7fb8      	ldrb	r0, [r7, #30]
 800e968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e96c:	f000 f8dd 	bl	800eb2a <VL53LX_f_026>
 800e970:	4603      	mov	r3, r0
 800e972:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800e974:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d108      	bne.n	800e98e <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	8a19      	ldrh	r1, [r3, #16]
 800e980:	7fb8      	ldrb	r0, [r7, #30]
 800e982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e986:	f000 f95c 	bl	800ec42 <VL53LX_f_027>
 800e98a:	4603      	mov	r3, r0
 800e98c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800e98e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d124      	bne.n	800e9e0 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	789d      	ldrb	r5, [r3, #2]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7e1e      	ldrb	r6, [r3, #24]
 800e99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a0:	f893 c003 	ldrb.w	ip, [r3, #3]
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	f893 e006 	ldrb.w	lr, [r3, #6]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9b2:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800e9b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9b8:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800e9bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9be:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800e9c2:	697c      	ldr	r4, [r7, #20]
 800e9c4:	3420      	adds	r4, #32
 800e9c6:	9404      	str	r4, [sp, #16]
 800e9c8:	9003      	str	r0, [sp, #12]
 800e9ca:	9102      	str	r1, [sp, #8]
 800e9cc:	9201      	str	r2, [sp, #4]
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	4673      	mov	r3, lr
 800e9d2:	4662      	mov	r2, ip
 800e9d4:	4631      	mov	r1, r6
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	f7ff fd46 	bl	800e468 <VL53LX_f_014>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800e9e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d109      	bne.n	800e9fc <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800e9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ea:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800e9ee:	7fb8      	ldrb	r0, [r7, #30]
 800e9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f2:	2101      	movs	r1, #1
 800e9f4:	f7ff fb10 	bl	800e018 <VL53LX_f_015>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e9fc:	7fbb      	ldrb	r3, [r7, #30]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	77bb      	strb	r3, [r7, #30]
 800ea02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea04:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ea08:	7fba      	ldrb	r2, [r7, #30]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	f4ff af52 	bcc.w	800e8b4 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800ea10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d107      	bne.n	800ea28 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	785b      	ldrb	r3, [r3, #1]
 800ea1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fa23 	bl	800de6a <VL53LX_f_016>
 800ea24:	4603      	mov	r3, r0
 800ea26:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800ea28:	2300      	movs	r3, #0
 800ea2a:	77bb      	strb	r3, [r7, #30]
 800ea2c:	e071      	b.n	800eb12 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800ea2e:	7fba      	ldrb	r2, [r7, #30]
 800ea30:	4613      	mov	r3, r2
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	4413      	add	r3, r2
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ea3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea3e:	4413      	add	r3, r2
 800ea40:	3304      	adds	r3, #4
 800ea42:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800ea44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea46:	7c9a      	ldrb	r2, [r3, #18]
 800ea48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4a:	7c5b      	ldrb	r3, [r3, #17]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d25c      	bcs.n	800eb0a <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	dd57      	ble.n	800eb0c <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800ea60:	2bff      	cmp	r3, #255	; 0xff
 800ea62:	d053      	beq.n	800eb0c <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800ea64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea66:	7c9b      	ldrb	r3, [r3, #18]
 800ea68:	461a      	mov	r2, r3
			prange_data =
 800ea6a:	234c      	movs	r3, #76	; 0x4c
 800ea6c:	fb02 f303 	mul.w	r3, r2, r3
 800ea70:	3310      	adds	r3, #16
 800ea72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea74:	4413      	add	r3, r2
 800ea76:	3304      	adds	r3, #4
 800ea78:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800ea7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d115      	bne.n	800eaae <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800ea82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea84:	7c98      	ldrb	r0, [r3, #18]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f893 1020 	ldrb.w	r1, [r3, #32]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	8b5d      	ldrh	r5, [r3, #26]
 800ea96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea98:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ea9c:	693a      	ldr	r2, [r7, #16]
 800ea9e:	9202      	str	r2, [sp, #8]
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	9201      	str	r2, [sp, #4]
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	462b      	mov	r3, r5
 800eaa8:	4622      	mov	r2, r4
 800eaaa:	f7ff fd85 	bl	800e5b8 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800eaae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d115      	bne.n	800eae2 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800eace:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ead2:	9301      	str	r3, [sp, #4]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	4623      	mov	r3, r4
 800eada:	f000 fb44 	bl	800f166 <VL53LX_f_018>
 800eade:	4603      	mov	r3, r0
 800eae0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800eae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d108      	bne.n	800eafc <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	8bd8      	ldrh	r0, [r3, #30]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	f000 fbda 	bl	800f2b0 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800eafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eafe:	7c9b      	ldrb	r3, [r3, #18]
 800eb00:	3301      	adds	r3, #1
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb06:	749a      	strb	r2, [r3, #18]
 800eb08:	e000      	b.n	800eb0c <VL53LX_f_025+0x400>
			continue;
 800eb0a:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800eb0c:	7fbb      	ldrb	r3, [r7, #30]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	77bb      	strb	r3, [r7, #30]
 800eb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb14:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800eb18:	7fba      	ldrb	r2, [r7, #30]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d387      	bcc.n	800ea2e <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800eb1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3724      	adds	r7, #36	; 0x24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb2a <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b08c      	sub	sp, #48	; 0x30
 800eb2e:	af02      	add	r7, sp, #8
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
 800eb36:	4603      	mov	r3, r0
 800eb38:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800eb40:	7bfa      	ldrb	r2, [r7, #15]
 800eb42:	4613      	mov	r3, r2
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	4413      	add	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	4413      	add	r3, r2
 800eb52:	3304      	adds	r3, #4
 800eb54:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	785a      	ldrb	r2, [r3, #1]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	781a      	ldrb	r2, [r3, #0]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	789a      	ldrb	r2, [r3, #2]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800eb84:	6a3b      	ldr	r3, [r7, #32]
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb8c:	e04d      	b.n	800ec2a <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	78da      	ldrb	r2, [r3, #3]
 800eb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb96:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb9a:	fb01 f202 	mul.w	r2, r1, r2
 800eb9e:	1a9b      	subs	r3, r3, r2
 800eba0:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	7999      	ldrb	r1, [r3, #6]
 800eba6:	f107 0218 	add.w	r2, r7, #24
 800ebaa:	7ff8      	ldrb	r0, [r7, #31]
 800ebac:	f107 0310 	add.w	r3, r7, #16
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	f107 0314 	add.w	r3, r7, #20
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	f000 fa7a 	bl	800f0b4 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800ebc0:	7ffb      	ldrb	r3, [r7, #31]
 800ebc2:	69ba      	ldr	r2, [r7, #24]
 800ebc4:	6839      	ldr	r1, [r7, #0]
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	440b      	add	r3, r1
 800ebca:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800ebcc:	7ffb      	ldrb	r3, [r7, #31]
 800ebce:	697a      	ldr	r2, [r7, #20]
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	3318      	adds	r3, #24
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	440b      	add	r3, r1
 800ebd8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800ebda:	7ffb      	ldrb	r3, [r7, #31]
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	6839      	ldr	r1, [r7, #0]
 800ebe0:	3330      	adds	r3, #48	; 0x30
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	440b      	add	r3, r1
 800ebe6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800ebe8:	69ba      	ldr	r2, [r7, #24]
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	689a      	ldr	r2, [r3, #8]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800ebf6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800ebf8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800ebfa:	6839      	ldr	r1, [r7, #0]
 800ebfc:	3348      	adds	r3, #72	; 0x48
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	440b      	add	r3, r1
 800ec02:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800ec04:	697a      	ldr	r2, [r7, #20]
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	689a      	ldr	r2, [r3, #8]
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800ec12:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800ec14:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	3360      	adds	r3, #96	; 0x60
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	440b      	add	r3, r1
 800ec1e:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800ec20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec24:	3301      	adds	r3, #1
 800ec26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	791b      	ldrb	r3, [r3, #4]
 800ec2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d9ab      	bls.n	800eb8e <VL53LX_f_026+0x64>
	}

	return status;
 800ec36:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3728      	adds	r7, #40	; 0x28
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800ec42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec44:	b08f      	sub	sp, #60	; 0x3c
 800ec46:	af06      	add	r7, sp, #24
 800ec48:	60ba      	str	r2, [r7, #8]
 800ec4a:	607b      	str	r3, [r7, #4]
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]
 800ec50:	460b      	mov	r3, r1
 800ec52:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800ec54:	2300      	movs	r3, #0
 800ec56:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800ec5c:	7bfa      	ldrb	r2, [r7, #15]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	4413      	add	r3, r2
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	3304      	adds	r3, #4
 800ec70:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	77fb      	strb	r3, [r7, #31]
 800ec84:	e0b9      	b.n	800edfa <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	78da      	ldrb	r2, [r3, #3]
 800ec8a:	7ffb      	ldrb	r3, [r7, #31]
 800ec8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec90:	fb01 f202 	mul.w	r2, r1, r2
 800ec94:	1a9b      	subs	r3, r3, r2
 800ec96:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800ec98:	7ffb      	ldrb	r3, [r7, #31]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	78d2      	ldrb	r2, [r2, #3]
 800eca0:	fb93 f1f2 	sdiv	r1, r3, r2
 800eca4:	fb01 f202 	mul.w	r2, r1, r2
 800eca8:	1a9b      	subs	r3, r3, r2
 800ecaa:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	789b      	ldrb	r3, [r3, #2]
 800ecb0:	7dfa      	ldrb	r2, [r7, #23]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	f080 809e 	bcs.w	800edf4 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800ecbc:	7dba      	ldrb	r2, [r7, #22]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	f080 8098 	bcs.w	800edf4 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800ecc4:	7dfb      	ldrb	r3, [r7, #23]
 800ecc6:	68ba      	ldr	r2, [r7, #8]
 800ecc8:	3348      	adds	r3, #72	; 0x48
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	4413      	add	r3, r2
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10e      	bne.n	800ecf2 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800ecd4:	7dfb      	ldrb	r3, [r7, #23]
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	3360      	adds	r3, #96	; 0x60
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	4413      	add	r3, r2
 800ecde:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800ece4:	7dfb      	ldrb	r3, [r7, #23]
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	4413      	add	r3, r2
 800ecea:	2200      	movs	r2, #0
 800ecec:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ecf0:	e043      	b.n	800ed7a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ecf2:	7dfb      	ldrb	r3, [r7, #23]
 800ecf4:	68ba      	ldr	r2, [r7, #8]
 800ecf6:	3348      	adds	r3, #72	; 0x48
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	db0e      	blt.n	800ed20 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	3360      	adds	r3, #96	; 0x60
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	db06      	blt.n	800ed20 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800ed12:	7dfb      	ldrb	r3, [r7, #23]
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	4413      	add	r3, r2
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ed1e:	e02c      	b.n	800ed7a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ed20:	7dfb      	ldrb	r3, [r7, #23]
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	3348      	adds	r3, #72	; 0x48
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	da1e      	bge.n	800ed6e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	3360      	adds	r3, #96	; 0x60
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	db16      	blt.n	800ed6e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ed40:	7dbb      	ldrb	r3, [r7, #22]
 800ed42:	68ba      	ldr	r2, [r7, #8]
 800ed44:	3348      	adds	r3, #72	; 0x48
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	4413      	add	r3, r2
 800ed4a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	db0e      	blt.n	800ed6e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ed50:	7dbb      	ldrb	r3, [r7, #22]
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	3360      	adds	r3, #96	; 0x60
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	4413      	add	r3, r2
 800ed5a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	da06      	bge.n	800ed6e <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	4413      	add	r3, r2
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ed6c:	e005      	b.n	800ed7a <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800ed6e:	7dfb      	ldrb	r3, [r7, #23]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	4413      	add	r3, r2
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	4413      	add	r3, r2
 800ed80:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d035      	beq.n	800edf4 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	7ffa      	ldrb	r2, [r7, #31]
 800ed8c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800ed8e:	7dfb      	ldrb	r3, [r7, #23]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	685c      	ldr	r4, [r3, #4]
 800ed98:	7dfb      	ldrb	r3, [r7, #23]
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	3318      	adds	r3, #24
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4413      	add	r3, r2
 800eda2:	685d      	ldr	r5, [r3, #4]
 800eda4:	7dfb      	ldrb	r3, [r7, #23]
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	3330      	adds	r3, #48	; 0x30
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	4413      	add	r3, r2
 800edae:	685e      	ldr	r6, [r3, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	78d2      	ldrb	r2, [r2, #3]
 800edb8:	69b9      	ldr	r1, [r7, #24]
 800edba:	3118      	adds	r1, #24
 800edbc:	7ff8      	ldrb	r0, [r7, #31]
 800edbe:	9105      	str	r1, [sp, #20]
 800edc0:	9204      	str	r2, [sp, #16]
 800edc2:	9303      	str	r3, [sp, #12]
 800edc4:	2300      	movs	r3, #0
 800edc6:	9302      	str	r3, [sp, #8]
 800edc8:	2300      	movs	r3, #0
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	2300      	movs	r3, #0
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4633      	mov	r3, r6
 800edd2:	462a      	mov	r2, r5
 800edd4:	4621      	mov	r1, r4
 800edd6:	f000 f81c 	bl	800ee12 <VL53LX_f_028>
 800edda:	4603      	mov	r3, r0
 800eddc:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800edde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ede2:	f113 0f0f 	cmn.w	r3, #15
 800ede6:	d105      	bne.n	800edf4 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800ede8:	7dfb      	ldrb	r3, [r7, #23]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	4413      	add	r3, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800edf4:	7ffb      	ldrb	r3, [r7, #31]
 800edf6:	3301      	adds	r3, #1
 800edf8:	77fb      	strb	r3, [r7, #31]
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	791b      	ldrb	r3, [r3, #4]
 800edfe:	7ffa      	ldrb	r2, [r7, #31]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	f4ff af40 	bcc.w	800ec86 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800ee06:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3724      	adds	r7, #36	; 0x24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee12 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800ee12:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee16:	b0b2      	sub	sp, #200	; 0xc8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800ee1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ee22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ee26:	4603      	mov	r3, r0
 800ee28:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ee2c:	23f1      	movs	r3, #241	; 0xf1
 800ee2e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800ee32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee36:	f04f 0300 	mov.w	r3, #0
 800ee3a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800ee3e:	f04f 0200 	mov.w	r2, #0
 800ee42:	f04f 0300 	mov.w	r3, #0
 800ee46:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 800ee4a:	f04f 0200 	mov.w	r2, #0
 800ee4e:	f04f 0300 	mov.w	r3, #0
 800ee52:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ee56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ee5a:	17da      	asrs	r2, r3, #31
 800ee5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ee60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800ee64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ee68:	17da      	asrs	r2, r3, #31
 800ee6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee6e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ee72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	ebb3 0802 	subs.w	r8, r3, r2
 800ee80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee84:	460a      	mov	r2, r1
 800ee86:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800ee8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee8e:	17da      	asrs	r2, r3, #31
 800ee90:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee92:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ee94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ee98:	460b      	mov	r3, r1
 800ee9a:	ebb8 0a03 	subs.w	sl, r8, r3
 800ee9e:	4613      	mov	r3, r2
 800eea0:	eb69 0b03 	sbc.w	fp, r9, r3
 800eea4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eea8:	17da      	asrs	r2, r3, #31
 800eeaa:	673b      	str	r3, [r7, #112]	; 0x70
 800eeac:	677a      	str	r2, [r7, #116]	; 0x74
 800eeae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	ebba 0403 	subs.w	r4, sl, r3
 800eeb8:	4613      	mov	r3, r2
 800eeba:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800eebe:	f04f 0200 	mov.w	r2, #0
 800eec2:	f04f 0300 	mov.w	r3, #0
 800eec6:	032b      	lsls	r3, r5, #12
 800eec8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800eecc:	0322      	lsls	r2, r4, #12
 800eece:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800eed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eed6:	17da      	asrs	r2, r3, #31
 800eed8:	66bb      	str	r3, [r7, #104]	; 0x68
 800eeda:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800eedc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eee0:	17da      	asrs	r2, r3, #31
 800eee2:	663b      	str	r3, [r7, #96]	; 0x60
 800eee4:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800eee6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800eeea:	4623      	mov	r3, r4
 800eeec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800eef0:	4602      	mov	r2, r0
 800eef2:	1a9b      	subs	r3, r3, r2
 800eef4:	65bb      	str	r3, [r7, #88]	; 0x58
 800eef6:	462b      	mov	r3, r5
 800eef8:	460a      	mov	r2, r1
 800eefa:	eb63 0302 	sbc.w	r3, r3, r2
 800eefe:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800ef00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef04:	17da      	asrs	r2, r3, #31
 800ef06:	653b      	str	r3, [r7, #80]	; 0x50
 800ef08:	657a      	str	r2, [r7, #84]	; 0x54
 800ef0a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ef0e:	4623      	mov	r3, r4
 800ef10:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ef14:	4602      	mov	r2, r0
 800ef16:	1a9b      	subs	r3, r3, r2
 800ef18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef1a:	462b      	mov	r3, r5
 800ef1c:	460a      	mov	r2, r1
 800ef1e:	eb63 0302 	sbc.w	r3, r3, r2
 800ef22:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800ef24:	f04f 0200 	mov.w	r2, #0
 800ef28:	f04f 0300 	mov.w	r3, #0
 800ef2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ef30:	4629      	mov	r1, r5
 800ef32:	030b      	lsls	r3, r1, #12
 800ef34:	4621      	mov	r1, r4
 800ef36:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800ef3a:	4621      	mov	r1, r4
 800ef3c:	030a      	lsls	r2, r1, #12
 800ef3e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 800ef42:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ef46:	4313      	orrs	r3, r2
 800ef48:	f000 80a8 	beq.w	800f09c <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800ef4c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800ef50:	f04f 0000 	mov.w	r0, #0
 800ef54:	f04f 0100 	mov.w	r1, #0
 800ef58:	0319      	lsls	r1, r3, #12
 800ef5a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ef5e:	0310      	lsls	r0, r2, #12
 800ef60:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ef64:	1814      	adds	r4, r2, r0
 800ef66:	633c      	str	r4, [r7, #48]	; 0x30
 800ef68:	414b      	adcs	r3, r1
 800ef6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ef6c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ef70:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800ef74:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ef78:	1891      	adds	r1, r2, r2
 800ef7a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ef7c:	415b      	adcs	r3, r3
 800ef7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ef84:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ef88:	f7f1 fe96 	bl	8000cb8 <__aeabi_ldivmod>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	460b      	mov	r3, r1
 800ef90:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase  +=  2048;
 800ef94:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ef98:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ef9c:	6239      	str	r1, [r7, #32]
 800ef9e:	f143 0300 	adc.w	r3, r3, #0
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24
 800efa4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800efa8:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800efac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800efb0:	2200      	movs	r2, #0
 800efb2:	643b      	str	r3, [r7, #64]	; 0x40
 800efb4:	647a      	str	r2, [r7, #68]	; 0x44
 800efb6:	f04f 0200 	mov.w	r2, #0
 800efba:	f04f 0300 	mov.w	r3, #0
 800efbe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800efc2:	4629      	mov	r1, r5
 800efc4:	030b      	lsls	r3, r1, #12
 800efc6:	4621      	mov	r1, r4
 800efc8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800efcc:	4621      	mov	r1, r4
 800efce:	030a      	lsls	r2, r1, #12
 800efd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800efd4:	1884      	adds	r4, r0, r2
 800efd6:	61bc      	str	r4, [r7, #24]
 800efd8:	eb41 0303 	adc.w	r3, r1, r3
 800efdc:	61fb      	str	r3, [r7, #28]
 800efde:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800efe2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800efe6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800efea:	1c51      	adds	r1, r2, #1
 800efec:	63b9      	str	r1, [r7, #56]	; 0x38
 800efee:	f143 0300 	adc.w	r3, r3, #0
 800eff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eff4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800eff8:	460b      	mov	r3, r1
 800effa:	0fdb      	lsrs	r3, r3, #31
 800effc:	2200      	movs	r2, #0
 800effe:	613b      	str	r3, [r7, #16]
 800f000:	617a      	str	r2, [r7, #20]
 800f002:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f006:	4623      	mov	r3, r4
 800f008:	4602      	mov	r2, r0
 800f00a:	189b      	adds	r3, r3, r2
 800f00c:	60bb      	str	r3, [r7, #8]
 800f00e:	460b      	mov	r3, r1
 800f010:	462a      	mov	r2, r5
 800f012:	eb42 0303 	adc.w	r3, r2, r3
 800f016:	60fb      	str	r3, [r7, #12]
 800f018:	f04f 0200 	mov.w	r2, #0
 800f01c:	f04f 0300 	mov.w	r3, #0
 800f020:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f024:	4621      	mov	r1, r4
 800f026:	084a      	lsrs	r2, r1, #1
 800f028:	4629      	mov	r1, r5
 800f02a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f02e:	4629      	mov	r1, r5
 800f030:	104b      	asrs	r3, r1, #1
 800f032:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8


		if (mean_phase  < 0)
 800f036:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	da05      	bge.n	800f04a <VL53LX_f_028+0x238>
			mean_phase = 0;
 800f03e:	f04f 0200 	mov.w	r2, #0
 800f042:	f04f 0300 	mov.w	r3, #0
 800f046:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800f04a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f04e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f052:	f173 0300 	sbcs.w	r3, r3, #0
 800f056:	db05      	blt.n	800f064 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800f058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f05c:	f04f 0300 	mov.w	r3, #0
 800f060:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800f064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800f06c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800f070:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800f072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f076:	fb93 f1f2 	sdiv	r1, r3, r2
 800f07a:	fb01 f202 	mul.w	r2, r1, r2
 800f07e:	1a9b      	subs	r3, r3, r2
 800f080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 800f084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f088:	17da      	asrs	r2, r3, #31
 800f08a:	603b      	str	r3, [r7, #0]
 800f08c:	607a      	str	r2, [r7, #4]
 800f08e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f092:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53LX_ERROR_NONE;
 800f096:	2300      	movs	r3, #0
 800f098:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800f09c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f0a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0a4:	601a      	str	r2, [r3, #0]

	return status;
 800f0a6:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	37c8      	adds	r7, #200	; 0xc8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f0b4 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b087      	sub	sp, #28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60ba      	str	r2, [r7, #8]
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	4603      	mov	r3, r0
 800f0c0:	73fb      	strb	r3, [r7, #15]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800f0d4:	7bfa      	ldrb	r2, [r7, #15]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	3206      	adds	r2, #6
 800f0da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f0de:	6a3b      	ldr	r3, [r7, #32]
 800f0e0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	75fb      	strb	r3, [r7, #23]
 800f0ec:	e02f      	b.n	800f14e <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800f0ee:	7bfa      	ldrb	r2, [r7, #15]
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	7a92      	ldrb	r2, [r2, #10]
 800f0f8:	441a      	add	r2, r3
 800f0fa:	7bbb      	ldrb	r3, [r7, #14]
 800f0fc:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	7a92      	ldrb	r2, [r2, #10]
 800f102:	fb93 f1f2 	sdiv	r1, r3, r2
 800f106:	fb01 f202 	mul.w	r2, r1, r2
 800f10a:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800f10c:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800f10e:	7dfa      	ldrb	r2, [r7, #23]
 800f110:	7bbb      	ldrb	r3, [r7, #14]
 800f112:	429a      	cmp	r2, r3
 800f114:	d20a      	bcs.n	800f12c <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	7db9      	ldrb	r1, [r7, #22]
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	3106      	adds	r1, #6
 800f120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f124:	441a      	add	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	601a      	str	r2, [r3, #0]
 800f12a:	e00d      	b.n	800f148 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800f12c:	7dfa      	ldrb	r2, [r7, #23]
 800f12e:	7bbb      	ldrb	r3, [r7, #14]
 800f130:	429a      	cmp	r2, r3
 800f132:	d909      	bls.n	800f148 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	7db9      	ldrb	r1, [r7, #22]
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	3106      	adds	r1, #6
 800f13e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f142:	441a      	add	r2, r3
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800f148:	7dfb      	ldrb	r3, [r7, #23]
 800f14a:	3301      	adds	r3, #1
 800f14c:	75fb      	strb	r3, [r7, #23]
 800f14e:	7bbb      	ldrb	r3, [r7, #14]
 800f150:	005a      	lsls	r2, r3, #1
 800f152:	7dfb      	ldrb	r3, [r7, #23]
 800f154:	429a      	cmp	r2, r3
 800f156:	daca      	bge.n	800f0ee <VL53LX_f_022+0x3a>
	}
}
 800f158:	bf00      	nop
 800f15a:	bf00      	nop
 800f15c:	371c      	adds	r7, #28
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b088      	sub	sp, #32
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60ba      	str	r2, [r7, #8]
 800f16e:	461a      	mov	r2, r3
 800f170:	4603      	mov	r3, r0
 800f172:	81fb      	strh	r3, [r7, #14]
 800f174:	460b      	mov	r3, r1
 800f176:	81bb      	strh	r3, [r7, #12]
 800f178:	4613      	mov	r3, r2
 800f17a:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800f17c:	2300      	movs	r3, #0
 800f17e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800f180:	2300      	movs	r3, #0
 800f182:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800f188:	2300      	movs	r3, #0
 800f18a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800f18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18e:	89fa      	ldrh	r2, [r7, #14]
 800f190:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800f192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f194:	89ba      	ldrh	r2, [r7, #12]
 800f196:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	88fa      	ldrh	r2, [r7, #6]
 800f1a2:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800f1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a6:	8a5b      	ldrh	r3, [r3, #18]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d101      	bne.n	800f1b0 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f1ac:	23f1      	movs	r3, #241	; 0xf1
 800f1ae:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	699b      	ldr	r3, [r3, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f1b8:	23f1      	movs	r3, #241	; 0xf1
 800f1ba:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800f1bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d16f      	bne.n	800f2a4 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	8a5b      	ldrh	r3, [r3, #18]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fd f903 	bl	800c3d4 <VL53LX_calc_pll_period_us>
 800f1ce:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800f1dc:	4619      	mov	r1, r3
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1e4:	6978      	ldr	r0, [r7, #20]
 800f1e6:	f7fd f90c 	bl	800c402 <VL53LX_duration_maths>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ee:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800f1f4:	0119      	lsls	r1, r3, #4
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1fc:	6978      	ldr	r0, [r7, #20]
 800f1fe:	f7fd f900 	bl	800c402 <VL53LX_duration_maths>
 800f202:	4602      	mov	r2, r0
 800f204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f206:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	69db      	ldr	r3, [r3, #28]
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f7fd fb6d 	bl	800c8f2 <VL53LX_rate_maths>
 800f218:	4603      	mov	r3, r0
 800f21a:	461a      	mov	r2, r3
 800f21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800f220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	4619      	mov	r1, r3
 800f22a:	4610      	mov	r0, r2
 800f22c:	f7fd fb61 	bl	800c8f2 <VL53LX_rate_maths>
 800f230:	4603      	mov	r3, r0
 800f232:	461a      	mov	r2, r3
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800f238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800f23c:	461a      	mov	r2, r3
 800f23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f240:	6a1b      	ldr	r3, [r3, #32]
 800f242:	4619      	mov	r1, r3
 800f244:	4610      	mov	r0, r2
 800f246:	f7fd fb54 	bl	800c8f2 <VL53LX_rate_maths>
 800f24a:	4603      	mov	r3, r0
 800f24c:	461a      	mov	r2, r3
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f256:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800f258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800f25c:	4413      	add	r3, r2
 800f25e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800f260:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f264:	2b01      	cmp	r3, #1
 800f266:	d905      	bls.n	800f274 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800f268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f26c:	69ba      	ldr	r2, [r7, #24]
 800f26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f272:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	8ada      	ldrh	r2, [r3, #22]
 800f278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f27c:	69b9      	ldr	r1, [r7, #24]
 800f27e:	2006      	movs	r0, #6
 800f280:	f7fd fb7c 	bl	800c97c <VL53LX_rate_per_spad_maths>
 800f284:	4603      	mov	r3, r0
 800f286:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800f28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	8ad9      	ldrh	r1, [r3, #22]
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	461a      	mov	r2, r3
 800f29a:	f7fd f90b 	bl	800c4b4 <VL53LX_events_per_spad_maths>
 800f29e:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800f2a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3720      	adds	r7, #32
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800f2b0:	b590      	push	{r4, r7, lr}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af02      	add	r7, sp, #8
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	603a      	str	r2, [r7, #0]
 800f2ba:	80fb      	strh	r3, [r7, #6]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	8a58      	ldrh	r0, [r3, #18]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	8a9c      	ldrh	r4, [r3, #20]
 800f2cc:	88fb      	ldrh	r3, [r7, #6]
 800f2ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f2d2:	9201      	str	r2, [sp, #4]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	4622      	mov	r2, r4
 800f2da:	f7fd fb83 	bl	800c9e4 <VL53LX_range_maths>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	8a58      	ldrh	r0, [r3, #18]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	8a9c      	ldrh	r4, [r3, #20]
 800f2f6:	88fb      	ldrh	r3, [r7, #6]
 800f2f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f2fc:	9201      	str	r2, [sp, #4]
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	2300      	movs	r3, #0
 800f302:	4622      	mov	r2, r4
 800f304:	f7fd fb6e 	bl	800c9e4 <VL53LX_range_maths>
 800f308:	4603      	mov	r3, r0
 800f30a:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	8a58      	ldrh	r0, [r3, #18]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	8a9c      	ldrh	r4, [r3, #20]
 800f320:	88fb      	ldrh	r3, [r7, #6]
 800f322:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f326:	9201      	str	r2, [sp, #4]
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	2300      	movs	r3, #0
 800f32c:	4622      	mov	r2, r4
 800f32e:	f7fd fb59 	bl	800c9e4 <VL53LX_range_maths>
 800f332:	4603      	mov	r3, r0
 800f334:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	bd90      	pop	{r4, r7, pc}

0800f344 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b086      	sub	sp, #24
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800f350:	2300      	movs	r3, #0
 800f352:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800f354:	2300      	movs	r3, #0
 800f356:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800f35c:	2300      	movs	r3, #0
 800f35e:	757b      	strb	r3, [r7, #21]





	memcpy(
 800f360:	22ac      	movs	r2, #172	; 0xac
 800f362:	68b9      	ldr	r1, [r7, #8]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f006 ff2d 	bl	80161c4 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800f36a:	2300      	movs	r3, #0
 800f36c:	75fb      	strb	r3, [r7, #23]
 800f36e:	e008      	b.n	800f382 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800f370:	7dfa      	ldrb	r2, [r7, #23]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	3206      	adds	r2, #6
 800f376:	2100      	movs	r1, #0
 800f378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
 800f37e:	3301      	adds	r3, #1
 800f380:	75fb      	strb	r3, [r7, #23]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	7a5b      	ldrb	r3, [r3, #9]
 800f386:	7dfa      	ldrb	r2, [r7, #23]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d3f1      	bcc.n	800f370 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800f38c:	68f9      	ldr	r1, [r7, #12]
 800f38e:	68b8      	ldr	r0, [r7, #8]
 800f390:	f000 f878 	bl	800f484 <VL53LX_f_030>
 800f394:	4603      	mov	r3, r0
 800f396:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	7a9a      	ldrb	r2, [r3, #10]
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	7a9b      	ldrb	r3, [r3, #10]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d203      	bcs.n	800f3ac <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	7a9b      	ldrb	r3, [r3, #10]
 800f3a8:	75bb      	strb	r3, [r7, #22]
 800f3aa:	e002      	b.n	800f3b2 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	7a9b      	ldrb	r3, [r3, #10]
 800f3b0:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	75fb      	strb	r3, [r7, #23]
 800f3b6:	e05c      	b.n	800f472 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800f3b8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	db0f      	blt.n	800f3e0 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800f3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800f3ca:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	7a92      	ldrb	r2, [r2, #10]
 800f3d0:	b252      	sxtb	r2, r2
 800f3d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800f3d6:	fb01 f202 	mul.w	r2, r1, r2
 800f3da:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800f3dc:	757b      	strb	r3, [r7, #21]
 800f3de:	e013      	b.n	800f408 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	7a9b      	ldrb	r3, [r3, #10]
 800f3e4:	b25b      	sxtb	r3, r3
 800f3e6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800f3e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800f3f2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800f3f4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	7a92      	ldrb	r2, [r2, #10]
 800f3fa:	b252      	sxtb	r2, r2
 800f3fc:	fb93 f1f2 	sdiv	r1, r3, r2
 800f400:	fb01 f202 	mul.w	r2, r1, r2
 800f404:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800f406:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800f408:	7d7b      	ldrb	r3, [r7, #21]
 800f40a:	461a      	mov	r2, r3
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	3206      	adds	r2, #6
 800f410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800f414:	7df9      	ldrb	r1, [r7, #23]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	3106      	adds	r1, #6
 800f41a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800f41e:	429a      	cmp	r2, r3
 800f420:	dd12      	ble.n	800f448 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800f422:	7d7b      	ldrb	r3, [r7, #21]
 800f424:	461a      	mov	r2, r3
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	3206      	adds	r2, #6
 800f42a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800f42e:	7df9      	ldrb	r1, [r7, #23]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	3106      	adds	r1, #6
 800f434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800f438:	7d79      	ldrb	r1, [r7, #21]
 800f43a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800f43c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	1d82      	adds	r2, r0, #6
 800f442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f446:	e006      	b.n	800f456 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800f448:	7d7b      	ldrb	r3, [r7, #21]
 800f44a:	461a      	mov	r2, r3
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	3206      	adds	r2, #6
 800f450:	2100      	movs	r1, #0
 800f452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800f456:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800f458:	7d7b      	ldrb	r3, [r7, #21]
 800f45a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3206      	adds	r2, #6
 800f460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	1d82      	adds	r2, r0, #6
 800f468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
 800f46e:	3301      	adds	r3, #1
 800f470:	75fb      	strb	r3, [r7, #23]
 800f472:	7dfa      	ldrb	r2, [r7, #23]
 800f474:	7dbb      	ldrb	r3, [r7, #22]
 800f476:	429a      	cmp	r2, r3
 800f478:	d39e      	bcc.n	800f3b8 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800f47a:	bf00      	nop
 800f47c:	bf00      	nop
 800f47e:	3718      	adds	r7, #24
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800f48e:	2300      	movs	r3, #0
 800f490:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fd fb85 	bl	800cbb4 <VL53LX_decode_vcsel_period>
 800f4aa:	4603      	mov	r3, r0
	period = 2048 *
 800f4ac:	02db      	lsls	r3, r3, #11
 800f4ae:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800f4bc:	68ba      	ldr	r2, [r7, #8]
 800f4be:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4c2:	68b9      	ldr	r1, [r7, #8]
 800f4c4:	fb01 f202 	mul.w	r2, r1, r2
 800f4c8:	1a9b      	subs	r3, r3, r2
 800f4ca:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800f4d2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800f4d4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	dd09      	ble.n	800f4f4 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	da01      	bge.n	800f4ee <VL53LX_f_030+0x6a>
 800f4ea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800f4ee:	12db      	asrs	r3, r3, #11
 800f4f0:	75fb      	strb	r3, [r7, #23]
 800f4f2:	e008      	b.n	800f506 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	da01      	bge.n	800f502 <VL53LX_f_030+0x7e>
 800f4fe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800f502:	12db      	asrs	r3, r3, #11
 800f504:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800f506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3718      	adds	r7, #24
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800f512:	b580      	push	{r7, lr}
 800f514:	b08e      	sub	sp, #56	; 0x38
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f51c:	2300      	movs	r3, #0
 800f51e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800f528:	2300      	movs	r3, #0
 800f52a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800f544:	22ac      	movs	r2, #172	; 0xac
 800f546:	6879      	ldr	r1, [r7, #4]
 800f548:	6838      	ldr	r0, [r7, #0]
 800f54a:	f006 fe3b 	bl	80161c4 <memcpy>


	podata->VL53LX_p_021 = 0;
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2200      	movs	r2, #0
 800f552:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800f554:	2300      	movs	r3, #0
 800f556:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f55a:	e00a      	b.n	800f572 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800f55c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	4413      	add	r3, r2
 800f564:	2210      	movs	r2, #16
 800f566:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800f568:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f56c:	3301      	adds	r3, #1
 800f56e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f572:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f576:	2b05      	cmp	r3, #5
 800f578:	d9f0      	bls.n	800f55c <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800f57a:	2300      	movs	r3, #0
 800f57c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f580:	e00b      	b.n	800f59a <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800f582:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	3206      	adds	r2, #6
 800f58a:	2100      	movs	r1, #0
 800f58c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800f590:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f594:	3301      	adds	r3, #1
 800f596:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	7a5b      	ldrb	r3, [r3, #9]
 800f59e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d3ed      	bcc.n	800f582 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f5ac:	e012      	b.n	800f5d4 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800f5ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5b2:	3338      	adds	r3, #56	; 0x38
 800f5b4:	443b      	add	r3, r7
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800f5bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5c0:	3338      	adds	r3, #56	; 0x38
 800f5c2:	443b      	add	r3, r7
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f5ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f5d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5d8:	2b0f      	cmp	r3, #15
 800f5da:	d9e8      	bls.n	800f5ae <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f5e8:	e068      	b.n	800f6bc <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800f5ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	7b1b      	ldrb	r3, [r3, #12]
 800f5f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800f5f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f5fc:	3338      	adds	r3, #56	; 0x38
 800f5fe:	443b      	add	r3, r7
 800f600:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d115      	bne.n	800f634 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800f608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f60c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f610:	0092      	lsls	r2, r2, #2
 800f612:	b2d2      	uxtb	r2, r2
 800f614:	3338      	adds	r3, #56	; 0x38
 800f616:	443b      	add	r3, r7
 800f618:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800f61c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	4413      	add	r3, r2
 800f624:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f628:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800f62a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f62e:	3301      	adds	r3, #1
 800f630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800f634:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f638:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f63c:	443a      	add	r2, r7
 800f63e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800f642:	3201      	adds	r2, #1
 800f644:	b2d2      	uxtb	r2, r2
 800f646:	3338      	adds	r3, #56	; 0x38
 800f648:	443b      	add	r3, r7
 800f64a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800f64e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f652:	3338      	adds	r3, #56	; 0x38
 800f654:	443b      	add	r3, r7
 800f656:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800f65a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800f65e:	2300      	movs	r3, #0
 800f660:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f664:	e021      	b.n	800f6aa <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800f666:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f66a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f66e:	441a      	add	r2, r3
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	3206      	adds	r2, #6
 800f674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800f678:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f67c:	009a      	lsls	r2, r3, #2
 800f67e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f682:	441a      	add	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3206      	adds	r2, #6
 800f688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800f68c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800f690:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f694:	4402      	add	r2, r0
 800f696:	4419      	add	r1, r3
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	3206      	adds	r2, #6
 800f69c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800f6a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f6aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f6ae:	2b03      	cmp	r3, #3
 800f6b0:	d9d9      	bls.n	800f666 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f6b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f6bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f6c0:	2b05      	cmp	r3, #5
 800f6c2:	d992      	bls.n	800f5ea <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f6ca:	e022      	b.n	800f712 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800f6cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f6d0:	683a      	ldr	r2, [r7, #0]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	7b1b      	ldrb	r3, [r3, #12]
 800f6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800f6da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6de:	2b0f      	cmp	r3, #15
 800f6e0:	d80c      	bhi.n	800f6fc <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800f6e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800f6e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800f6ea:	3238      	adds	r2, #56	; 0x38
 800f6ec:	443a      	add	r2, r7
 800f6ee:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	460a      	mov	r2, r1
 800f6f8:	749a      	strb	r2, [r3, #18]
 800f6fa:	e005      	b.n	800f708 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800f6fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	4413      	add	r3, r2
 800f704:	2200      	movs	r2, #0
 800f706:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f708:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f70c:	3301      	adds	r3, #1
 800f70e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f712:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f716:	2b05      	cmp	r3, #5
 800f718:	d9d8      	bls.n	800f6cc <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800f71a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	b2da      	uxtb	r2, r3
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f726:	2300      	movs	r3, #0
 800f728:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f72c:	e050      	b.n	800f7d0 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800f72e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f732:	3338      	adds	r3, #56	; 0x38
 800f734:	443b      	add	r3, r7
 800f736:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800f73a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	2b00      	cmp	r3, #0
 800f740:	dd41      	ble.n	800f7c6 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800f742:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f746:	3338      	adds	r3, #56	; 0x38
 800f748:	443b      	add	r3, r7
 800f74a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800f74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800f752:	2300      	movs	r3, #0
 800f754:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f758:	e031      	b.n	800f7be <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800f75a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f75e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f762:	441a      	add	r2, r3
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	3206      	adds	r2, #6
 800f768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	0fda      	lsrs	r2, r3, #31
 800f770:	4413      	add	r3, r2
 800f772:	105b      	asrs	r3, r3, #1
 800f774:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800f776:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f77a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f77e:	441a      	add	r2, r3
 800f780:	4401      	add	r1, r0
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	3206      	adds	r2, #6
 800f786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800f78a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f78e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f792:	441a      	add	r2, r3
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	3206      	adds	r2, #6
 800f798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f79c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f7a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f7a4:	441a      	add	r2, r3
 800f7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a8:	fb91 f1f3 	sdiv	r1, r1, r3
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	3206      	adds	r2, #6
 800f7b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800f7b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f7be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d9c9      	bls.n	800f75a <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f7c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f7d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f7d4:	2b0f      	cmp	r3, #15
 800f7d6:	d9aa      	bls.n	800f72e <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800f7de:	7bfb      	ldrb	r3, [r7, #15]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d102      	bne.n	800f7ea <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800f7e4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d002      	beq.n	800f7f0 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	2204      	movs	r2, #4
 800f7ee:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800f7f0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3738      	adds	r7, #56	; 0x38
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800f7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7fe:	b0cb      	sub	sp, #300	; 0x12c
 800f800:	af06      	add	r7, sp, #24
 800f802:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800f806:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800f80a:	6020      	str	r0, [r4, #0]
 800f80c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f810:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800f814:	6001      	str	r1, [r0, #0]
 800f816:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f81a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800f81e:	600a      	str	r2, [r1, #0]
 800f820:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f824:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800f828:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800f82a:	2300      	movs	r3, #0
 800f82c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800f830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f834:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800f838:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f83c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800f840:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f844:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800f848:	f107 0318 	add.w	r3, r7, #24
 800f84c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800f860:	2300      	movs	r3, #0
 800f862:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800f86c:	2300      	movs	r3, #0
 800f86e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800f872:	2300      	movs	r3, #0
 800f874:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800f878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f87c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f880:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800f884:	6818      	ldr	r0, [r3, #0]
 800f886:	f7ff fe44 	bl	800f512 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800f88a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f88e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800f890:	b299      	uxth	r1, r3
 800f892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f896:	3348      	adds	r3, #72	; 0x48
 800f898:	461a      	mov	r2, r3
 800f89a:	2000      	movs	r0, #0
 800f89c:	f7fd f9db 	bl	800cc56 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800f8a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f8a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8a8:	3348      	adds	r3, #72	; 0x48
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	f7fd f994 	bl	800cbda <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800f8b2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d142      	bne.n	800f940 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800f8ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d039      	beq.n	800f940 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800f8cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f8d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800f8e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800f8f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f902:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f906:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800f90a:	6812      	ldr	r2, [r2, #0]
 800f90c:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800f910:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f914:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800f918:	6809      	ldr	r1, [r1, #0]
 800f91a:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800f91e:	f107 0014 	add.w	r0, r7, #20
 800f922:	9004      	str	r0, [sp, #16]
 800f924:	9103      	str	r1, [sp, #12]
 800f926:	9202      	str	r2, [sp, #8]
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	2300      	movs	r3, #0
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	2300      	movs	r3, #0
 800f930:	4632      	mov	r2, r6
 800f932:	4629      	mov	r1, r5
 800f934:	4620      	mov	r0, r4
 800f936:	f002 f8e8 	bl	8011b0a <VL53LX_f_032>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800f940:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f944:	2b00      	cmp	r3, #0
 800f946:	d115      	bne.n	800f974 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800f948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f94c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00c      	beq.n	800f974 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800f95a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f964:	3348      	adds	r3, #72	; 0x48
 800f966:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f96a:	f002 fb40 	bl	8011fee <VL53LX_f_033>
 800f96e:	4603      	mov	r3, r0
 800f970:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800f974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800f97c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f980:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800f984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f988:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800f98c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f990:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800f994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f998:	2200      	movs	r2, #0
 800f99a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800f99e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800f9a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800f9b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800f9c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f9c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d002      	beq.n	800f9da <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800f9e0:	e108      	b.n	800fbf4 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800f9e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f9e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800f9f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800f9f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f9f8:	3348      	adds	r3, #72	; 0x48
 800f9fa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f9fe:	7814      	ldrb	r4, [r2, #0]
 800fa00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fa04:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800fa08:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800fa0c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800fa10:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800fa14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fa18:	9405      	str	r4, [sp, #20]
 800fa1a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800fa1e:	9404      	str	r4, [sp, #16]
 800fa20:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800fa24:	9403      	str	r4, [sp, #12]
 800fa26:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800fa2a:	9402      	str	r4, [sp, #8]
 800fa2c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800fa30:	9401      	str	r4, [sp, #4]
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fa38:	6812      	ldr	r2, [r2, #0]
 800fa3a:	6809      	ldr	r1, [r1, #0]
 800fa3c:	6800      	ldr	r0, [r0, #0]
 800fa3e:	f7fe fe65 	bl	800e70c <VL53LX_f_025>
 800fa42:	4603      	mov	r3, r0
 800fa44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800fa48:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f040 80cb 	bne.w	800fbe8 <VL53LX_hist_process_data+0x3ec>
 800fa52:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f040 80c6 	bne.w	800fbe8 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800fa5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa60:	7c9b      	ldrb	r3, [r3, #18]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d110      	bne.n	800fa88 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800fa66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa6a:	3314      	adds	r3, #20
 800fa6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800fa70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa74:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800fa76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa7a:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800fa7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa80:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800fa82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa86:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800fa88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800fa94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800fa98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800faa4:	fb02 f303 	mul.w	r3, r2, r3
 800faa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800faac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fab0:	011b      	lsls	r3, r3, #4
 800fab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800fab6:	2300      	movs	r3, #0
 800fab8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800fabc:	e08b      	b.n	800fbd6 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800fabe:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800fac2:	224c      	movs	r2, #76	; 0x4c
 800fac4:	fb02 f303 	mul.w	r3, r2, r3
 800fac8:	3310      	adds	r3, #16
 800faca:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800face:	4413      	add	r3, r2
 800fad0:	3304      	adds	r3, #4
 800fad2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800fad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fada:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800fade:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fae2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800fae6:	429a      	cmp	r2, r3
 800fae8:	dd0e      	ble.n	800fb08 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800faea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faee:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800faf2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800faf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faf8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800fafc:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	b29b      	uxth	r3, r3
				delta_mm =
 800fb02:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800fb06:	e00d      	b.n	800fb24 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800fb08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb0c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800fb10:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800fb12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb16:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800fb1a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	b29b      	uxth	r3, r3
				delta_mm =
 800fb20:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800fb24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800fb30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800fb34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb40:	fb02 f303 	mul.w	r3, r2, r3
 800fb44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800fb48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb4c:	015b      	lsls	r3, r3, #5
 800fb4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800fb52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb56:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800fb5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	dd2f      	ble.n	800fbcc <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800fb6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb70:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800fb74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800fb82:	429a      	cmp	r2, r3
 800fb84:	da22      	bge.n	800fbcc <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800fb86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800fb8c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d91b      	bls.n	800fbcc <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800fb94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb98:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800fb9a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800fb9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d913      	bls.n	800fbcc <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800fba4:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800fba8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fbac:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800fbb0:	6812      	ldr	r2, [r2, #0]
 800fbb2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	da09      	bge.n	800fbcc <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800fbb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fbbc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800fbc0:	224c      	movs	r2, #76	; 0x4c
 800fbc2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f006 fafc 	bl	80161c4 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800fbcc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800fbd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fbda:	7c9b      	ldrb	r3, [r3, #18]
 800fbdc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	f4ff af6c 	bcc.w	800fabe <VL53LX_hist_process_data+0x2c2>
 800fbe6:	e000      	b.n	800fbea <VL53LX_hist_process_data+0x3ee>
			continue;
 800fbe8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800fbea:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800fbee:	3301      	adds	r3, #1
 800fbf0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800fbf4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800fbf8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	f67f aef0 	bls.w	800f9e2 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800fc02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800fc10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800fc14:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc22 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b086      	sub	sp, #24
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	60f8      	str	r0, [r7, #12]
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	607a      	str	r2, [r7, #4]
 800fc2e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc30:	2300      	movs	r3, #0
 800fc32:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800fc34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d104      	bne.n	800fc46 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f7f9 fc8f 	bl	8009560 <VL53LX_disable_firmware>
 800fc42:	4603      	mov	r3, r0
 800fc44:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800fc46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d104      	bne.n	800fc58 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f7f9 fcb6 	bl	80095c0 <VL53LX_enable_powerforce>
 800fc54:	4603      	mov	r3, r0
 800fc56:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800fc58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d105      	bne.n	800fc6c <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800fc60:	21fa      	movs	r1, #250	; 0xfa
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7f2 fe7a 	bl	800295c <VL53LX_WaitUs>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800fc6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d107      	bne.n	800fc84 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800fc74:	2201      	movs	r2, #1
 800fc76:	f240 7181 	movw	r1, #1921	; 0x781
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f7f2 fd7e 	bl	800277c <VL53LX_WrByte>
 800fc80:	4603      	mov	r3, r0
 800fc82:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800fc84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d107      	bne.n	800fc9c <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800fc8c:	2205      	movs	r2, #5
 800fc8e:	f240 6183 	movw	r1, #1667	; 0x683
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f7f2 fd72 	bl	800277c <VL53LX_WrByte>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800fc9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d105      	bne.n	800fcb0 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	68f8      	ldr	r0, [r7, #12]
 800fca8:	f7f2 fe58 	bl	800295c <VL53LX_WaitUs>
 800fcac:	4603      	mov	r3, r0
 800fcae:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800fcb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d107      	bne.n	800fcc8 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800fcb8:	2201      	movs	r2, #1
 800fcba:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f7f2 fd5c 	bl	800277c <VL53LX_WrByte>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800fcc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d108      	bne.n	800fce2 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800fcd0:	897b      	ldrh	r3, [r7, #10]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	f240 7184 	movw	r1, #1924	; 0x784
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f7f2 fd79 	bl	80027d0 <VL53LX_WrWord>
 800fcde:	4603      	mov	r3, r0
 800fce0:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800fce2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3718      	adds	r7, #24
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b086      	sub	sp, #24
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	60f8      	str	r0, [r7, #12]
 800fcf6:	607b      	str	r3, [r7, #4]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	72fb      	strb	r3, [r7, #11]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fd00:	2300      	movs	r3, #0
 800fd02:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800fd04:	2300      	movs	r3, #0
 800fd06:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800fd08:	7afb      	ldrb	r3, [r7, #11]
 800fd0a:	75bb      	strb	r3, [r7, #22]
 800fd0c:	e041      	b.n	800fd92 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800fd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d108      	bne.n	800fd28 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800fd16:	7dbb      	ldrb	r3, [r7, #22]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	f240 7194 	movw	r1, #1940	; 0x794
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f7f2 fd2c 	bl	800277c <VL53LX_WrByte>
 800fd24:	4603      	mov	r3, r0
 800fd26:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800fd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d107      	bne.n	800fd40 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800fd30:	2200      	movs	r2, #0
 800fd32:	f240 7183 	movw	r1, #1923	; 0x783
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f7f2 fd20 	bl	800277c <VL53LX_WrByte>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800fd40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d105      	bne.n	800fd54 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800fd48:	2105      	movs	r1, #5
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f7f2 fe06 	bl	800295c <VL53LX_WaitUs>
 800fd50:	4603      	mov	r3, r0
 800fd52:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800fd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d107      	bne.n	800fd6c <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f240 7183 	movw	r1, #1923	; 0x783
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7f2 fd0a 	bl	800277c <VL53LX_WrByte>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800fd6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d108      	bne.n	800fd86 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800fd74:	2304      	movs	r3, #4
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f7f2 fcc7 	bl	8002710 <VL53LX_ReadMulti>
 800fd82:	4603      	mov	r3, r0
 800fd84:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800fd8c:	7dbb      	ldrb	r3, [r7, #22]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	75bb      	strb	r3, [r7, #22]
 800fd92:	7dba      	ldrb	r2, [r7, #22]
 800fd94:	7af9      	ldrb	r1, [r7, #11]
 800fd96:	7abb      	ldrb	r3, [r7, #10]
 800fd98:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	dbb7      	blt.n	800fd0e <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fd9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}

0800fdaa <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b084      	sub	sp, #16
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fdb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d107      	bne.n	800fdce <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f240 7183 	movw	r1, #1923	; 0x783
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7f2 fcd9 	bl	800277c <VL53LX_WrByte>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800fdce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d107      	bne.n	800fde6 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f240 7181 	movw	r1, #1921	; 0x781
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7f2 fccd 	bl	800277c <VL53LX_WrByte>
 800fde2:	4603      	mov	r3, r0
 800fde4:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800fde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d104      	bne.n	800fdf8 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7f9 fbf8 	bl	80095e4 <VL53LX_disable_powerforce>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800fdf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d104      	bne.n	800fe0a <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7f9 fb9b 	bl	800953c <VL53LX_enable_firmware>
 800fe06:	4603      	mov	r3, r0
 800fe08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800fe0a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}

0800fe16 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800fe16:	b480      	push	{r7}
 800fe18:	b087      	sub	sp, #28
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	60b9      	str	r1, [r7, #8]
 800fe20:	607a      	str	r2, [r7, #4]
 800fe22:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fe24:	2300      	movs	r3, #0
 800fe26:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800fe2c:	89fb      	ldrh	r3, [r7, #14]
 800fe2e:	2b03      	cmp	r3, #3
 800fe30:	d802      	bhi.n	800fe38 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800fe32:	f06f 0308 	mvn.w	r3, #8
 800fe36:	e018      	b.n	800fe6a <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800fe38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe3c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	3302      	adds	r3, #2
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	8afa      	ldrh	r2, [r7, #22]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800fe4c:	8afb      	ldrh	r3, [r7, #22]
 800fe4e:	2bff      	cmp	r3, #255	; 0xff
 800fe50:	d901      	bls.n	800fe56 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800fe52:	2300      	movs	r3, #0
 800fe54:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800fe56:	8afb      	ldrh	r3, [r7, #22]
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	78da      	ldrb	r2, [r3, #3]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	705a      	strb	r2, [r3, #1]

	return status;
 800fe66:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	371c      	adds	r7, #28
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800fe76:	b590      	push	{r4, r7, lr}
 800fe78:	b087      	sub	sp, #28
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	60b9      	str	r1, [r7, #8]
 800fe80:	607a      	str	r2, [r7, #4]
 800fe82:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fe84:	2300      	movs	r3, #0
 800fe86:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800fe90:	89fb      	ldrh	r3, [r7, #14]
 800fe92:	2b37      	cmp	r3, #55	; 0x37
 800fe94:	d802      	bhi.n	800fe9c <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800fe96:	f06f 0308 	mvn.w	r3, #8
 800fe9a:	e03e      	b.n	800ff1a <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800fe9c:	68b9      	ldr	r1, [r7, #8]
 800fe9e:	2002      	movs	r0, #2
 800fea0:	f7f9 fa4d 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800fea4:	4603      	mov	r3, r0
 800fea6:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	3302      	adds	r3, #2
 800feb0:	4619      	mov	r1, r3
 800feb2:	2002      	movs	r0, #2
 800feb4:	f7f9 fa43 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800fec4:	099b      	lsrs	r3, r3, #6
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2219      	movs	r2, #25
 800fed0:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2205      	movs	r2, #5
 800fed6:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2205      	movs	r2, #5
 800fedc:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	3304      	adds	r3, #4
 800fee2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800fee4:	2300      	movs	r3, #0
 800fee6:	74fb      	strb	r3, [r7, #19]
 800fee8:	e012      	b.n	800ff10 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800feea:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800feec:	6979      	ldr	r1, [r7, #20]
 800feee:	2002      	movs	r0, #2
 800fef0:	f7f9 fa25 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800fef4:	4603      	mov	r3, r0
 800fef6:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	1d23      	adds	r3, r4, #4
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	4413      	add	r3, r2
 800ff00:	460a      	mov	r2, r1
 800ff02:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	3302      	adds	r3, #2
 800ff08:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ff0a:	7cfb      	ldrb	r3, [r7, #19]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	74fb      	strb	r3, [r7, #19]
 800ff10:	7cfb      	ldrb	r3, [r7, #19]
 800ff12:	2b18      	cmp	r3, #24
 800ff14:	d9e9      	bls.n	800feea <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800ff16:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	371c      	adds	r7, #28
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd90      	pop	{r4, r7, pc}

0800ff22 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b086      	sub	sp, #24
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	4603      	mov	r3, r0
 800ff2a:	60b9      	str	r1, [r7, #8]
 800ff2c:	607a      	str	r2, [r7, #4]
 800ff2e:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ff30:	2300      	movs	r3, #0
 800ff32:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800ff34:	89fb      	ldrh	r3, [r7, #14]
 800ff36:	2b07      	cmp	r3, #7
 800ff38:	d802      	bhi.n	800ff40 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ff3a:	f06f 0308 	mvn.w	r3, #8
 800ff3e:	e027      	b.n	800ff90 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ff40:	68b9      	ldr	r1, [r7, #8]
 800ff42:	2002      	movs	r0, #2
 800ff44:	f7f9 f9fb 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	3302      	adds	r3, #2
 800ff54:	4619      	mov	r1, r3
 800ff56:	2002      	movs	r0, #2
 800ff58:	f7f9 f9f1 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	3304      	adds	r3, #4
 800ff68:	4619      	mov	r1, r3
 800ff6a:	2002      	movs	r0, #2
 800ff6c:	f7f9 f9e7 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800ff70:	4603      	mov	r3, r0
 800ff72:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	3306      	adds	r3, #6
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	2002      	movs	r0, #2
 800ff80:	f7f9 f9dd 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800ff84:	4603      	mov	r3, r0
 800ff86:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	80da      	strh	r2, [r3, #6]

	return status;
 800ff8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3718      	adds	r7, #24
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800ffaa:	89fb      	ldrh	r3, [r7, #14]
 800ffac:	2b0f      	cmp	r3, #15
 800ffae:	d802      	bhi.n	800ffb6 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ffb0:	f06f 0308 	mvn.w	r3, #8
 800ffb4:	e04d      	b.n	8010052 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	2002      	movs	r0, #2
 800ffba:	f7f9 f9c0 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	789a      	ldrb	r2, [r3, #2]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	78da      	ldrb	r2, [r3, #3]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	3304      	adds	r3, #4
 800ffda:	4619      	mov	r1, r3
 800ffdc:	2002      	movs	r0, #2
 800ffde:	f7f9 f9ae 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	3306      	adds	r3, #6
 800ffee:	4619      	mov	r1, r3
 800fff0:	2002      	movs	r0, #2
 800fff2:	f7f9 f9a4 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 800fff6:	4603      	mov	r3, r0
 800fff8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	3308      	adds	r3, #8
 8010002:	4619      	mov	r1, r3
 8010004:	2002      	movs	r0, #2
 8010006:	f7f9 f99a 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 801000a:	4603      	mov	r3, r0
 801000c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	330a      	adds	r3, #10
 8010016:	4619      	mov	r1, r3
 8010018:	2002      	movs	r0, #2
 801001a:	f7f9 f990 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 801001e:	4603      	mov	r3, r0
 8010020:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	330c      	adds	r3, #12
 801002a:	4619      	mov	r1, r3
 801002c:	2002      	movs	r0, #2
 801002e:	f7f9 f986 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010032:	4603      	mov	r3, r0
 8010034:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	330e      	adds	r3, #14
 801003e:	4619      	mov	r1, r3
 8010040:	2002      	movs	r0, #2
 8010042:	f7f9 f97c 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010046:	4603      	mov	r3, r0
 8010048:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	81da      	strh	r2, [r3, #14]

	return status;
 801004e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3718      	adds	r7, #24
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 801005a:	b580      	push	{r7, lr}
 801005c:	b086      	sub	sp, #24
 801005e:	af00      	add	r7, sp, #0
 8010060:	60f8      	str	r0, [r7, #12]
 8010062:	607b      	str	r3, [r7, #4]
 8010064:	460b      	mov	r3, r1
 8010066:	72fb      	strb	r3, [r7, #11]
 8010068:	4613      	mov	r3, r2
 801006a:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801006c:	2300      	movs	r3, #0
 801006e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8010070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d106      	bne.n	8010086 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 8010078:	2232      	movs	r2, #50	; 0x32
 801007a:	2104      	movs	r1, #4
 801007c:	68f8      	ldr	r0, [r7, #12]
 801007e:	f7ff fdd0 	bl	800fc22 <VL53LX_nvm_enable>
 8010082:	4603      	mov	r3, r0
 8010084:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 8010086:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d107      	bne.n	801009e <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 801008e:	7aba      	ldrb	r2, [r7, #10]
 8010090:	7af9      	ldrb	r1, [r7, #11]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f7ff fe2a 	bl	800fcee <VL53LX_nvm_read>
 801009a:	4603      	mov	r3, r0
 801009c:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 801009e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d104      	bne.n	80100b0 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	f7ff fe7f 	bl	800fdaa <VL53LX_nvm_disable>
 80100ac:	4603      	mov	r3, r0
 80100ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80100b0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3718      	adds	r7, #24
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80100c6:	2300      	movs	r3, #0
 80100c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 80100ca:	f107 0308 	add.w	r3, r7, #8
 80100ce:	2201      	movs	r2, #1
 80100d0:	212e      	movs	r1, #46	; 0x2e
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7ff ffc1 	bl	801005a <VL53LX_read_nvm_raw_data>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80100dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d108      	bne.n	80100f6 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 80100e4:	f107 0308 	add.w	r3, r7, #8
 80100e8:	683a      	ldr	r2, [r7, #0]
 80100ea:	4619      	mov	r1, r3
 80100ec:	2004      	movs	r0, #4
 80100ee:	f7ff fe92 	bl	800fe16 <VL53LX_nvm_decode_optical_centre>
 80100f2:	4603      	mov	r3, r0
 80100f4:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80100f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b092      	sub	sp, #72	; 0x48
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801010c:	2300      	movs	r3, #0
 801010e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 8010112:	f107 030c 	add.w	r3, r7, #12
 8010116:	220e      	movs	r2, #14
 8010118:	2157      	movs	r1, #87	; 0x57
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7ff ff9d 	bl	801005a <VL53LX_read_nvm_raw_data>
 8010120:	4603      	mov	r3, r0
 8010122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010126:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801012a:	2b00      	cmp	r3, #0
 801012c:	d109      	bne.n	8010142 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 801012e:	f107 030c 	add.w	r3, r7, #12
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	4619      	mov	r1, r3
 8010136:	2038      	movs	r0, #56	; 0x38
 8010138:	f7ff fe9d 	bl	800fe76 <VL53LX_nvm_decode_cal_peak_rate_map>
 801013c:	4603      	mov	r3, r0
 801013e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010142:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8010146:	4618      	mov	r0, r3
 8010148:	3748      	adds	r7, #72	; 0x48
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b086      	sub	sp, #24
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010158:	2300      	movs	r3, #0
 801015a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 801015c:	f107 030c 	add.w	r3, r7, #12
 8010160:	2202      	movs	r2, #2
 8010162:	2165      	movs	r1, #101	; 0x65
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff ff78 	bl	801005a <VL53LX_read_nvm_raw_data>
 801016a:	4603      	mov	r3, r0
 801016c:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 801016e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d108      	bne.n	8010188 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 8010176:	f107 030c 	add.w	r3, r7, #12
 801017a:	683a      	ldr	r2, [r7, #0]
 801017c:	4619      	mov	r1, r3
 801017e:	2008      	movs	r0, #8
 8010180:	f7ff fecf 	bl	800ff22 <VL53LX_nvm_decode_additional_offset_cal_data>
 8010184:	4603      	mov	r3, r0
 8010186:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010188:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b08a      	sub	sp, #40	; 0x28
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	460b      	mov	r3, r1
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80101a2:	2300      	movs	r3, #0
 80101a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 80101a8:	897b      	ldrh	r3, [r7, #10]
 80101aa:	089b      	lsrs	r3, r3, #2
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	b2d9      	uxtb	r1, r3
 80101b0:	f107 0314 	add.w	r3, r7, #20
 80101b4:	2204      	movs	r2, #4
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f7ff ff4f 	bl	801005a <VL53LX_read_nvm_raw_data>
 80101bc:	4603      	mov	r3, r0
 80101be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80101c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d109      	bne.n	80101de <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 80101ca:	f107 0314 	add.w	r3, r7, #20
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	4619      	mov	r1, r3
 80101d2:	2010      	movs	r0, #16
 80101d4:	f7ff fee0 	bl	800ff98 <VL53LX_nvm_decode_fmt_range_results_data>
 80101d8:	4603      	mov	r3, r0
 80101da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80101de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3728      	adds	r7, #40	; 0x28
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b086      	sub	sp, #24
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	60f8      	str	r0, [r7, #12]
 80101f2:	460b      	mov	r3, r1
 80101f4:	607a      	str	r2, [r7, #4]
 80101f6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80101f8:	2300      	movs	r3, #0
 80101fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80101fc:	897b      	ldrh	r3, [r7, #10]
 80101fe:	2b0a      	cmp	r3, #10
 8010200:	d802      	bhi.n	8010208 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010202:	f06f 0309 	mvn.w	r3, #9
 8010206:	e047      	b.n	8010298 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010210:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801021e:	f002 020f 	and.w	r2, r2, #15
 8010222:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010224:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801022e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010232:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010234:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801023e:	f002 0203 	and.w	r2, r2, #3
 8010242:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010244:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801024e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010252:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010254:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	88d8      	ldrh	r0, [r3, #6]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	3305      	adds	r3, #5
 801025e:	461a      	mov	r2, r3
 8010260:	2102      	movs	r1, #2
 8010262:	f7f9 f841 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801026e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010278:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8010282:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010286:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010288:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8010292:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3718      	adds	r7, #24
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	4603      	mov	r3, r0
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80102ae:	2300      	movs	r3, #0
 80102b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80102b2:	89fb      	ldrh	r3, [r7, #14]
 80102b4:	2b0a      	cmp	r3, #10
 80102b6:	d802      	bhi.n	80102be <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80102b8:	f06f 0309 	mvn.w	r3, #9
 80102bc:	e046      	b.n	801034c <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102c6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	3301      	adds	r3, #1
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	f003 030f 	and.w	r3, r3, #15
 80102d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	3302      	adds	r3, #2
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	3303      	adds	r3, #3
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	f003 0303 	and.w	r3, r3, #3
 80102f6:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	3304      	adds	r3, #4
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010306:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	3305      	adds	r3, #5
 8010310:	4619      	mov	r1, r3
 8010312:	2002      	movs	r0, #2
 8010314:	f7f9 f813 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010318:	4603      	mov	r3, r0
 801031a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	79da      	ldrb	r2, [r3, #7]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	7a1a      	ldrb	r2, [r3, #8]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	3309      	adds	r3, #9
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801033a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	7a9a      	ldrb	r2, [r3, #10]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8010348:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3718      	adds	r7, #24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b086      	sub	sp, #24
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801035e:	2300      	movs	r3, #0
 8010360:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d108      	bne.n	801037c <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 801036a:	f107 020c 	add.w	r2, r7, #12
 801036e:	230b      	movs	r3, #11
 8010370:	2101      	movs	r1, #1
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7f2 f9cc 	bl	8002710 <VL53LX_ReadMulti>
 8010378:	4603      	mov	r3, r0
 801037a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 801037c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d108      	bne.n	8010396 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 8010384:	f107 030c 	add.w	r3, r7, #12
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	4619      	mov	r1, r3
 801038c:	200b      	movs	r0, #11
 801038e:	f7ff ff87 	bl	80102a0 <VL53LX_i2c_decode_static_nvm_managed>
 8010392:	4603      	mov	r3, r0
 8010394:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b086      	sub	sp, #24
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	60f8      	str	r0, [r7, #12]
 80103aa:	460b      	mov	r3, r1
 80103ac:	607a      	str	r2, [r7, #4]
 80103ae:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80103b0:	2300      	movs	r3, #0
 80103b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80103b4:	897b      	ldrh	r3, [r7, #10]
 80103b6:	2b16      	cmp	r3, #22
 80103b8:	d802      	bhi.n	80103c0 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80103ba:	f06f 0309 	mvn.w	r3, #9
 80103be:	e076      	b.n	80104ae <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80103cc:	68fa      	ldr	r2, [r7, #12]
 80103ce:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80103d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80103da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80103e0:	68fa      	ldr	r2, [r7, #12]
 80103e2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80103e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80103ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80103f8:	f002 020f 	and.w	r2, r2, #15
 80103fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80103fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8010408:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8010412:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010416:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010418:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8010422:	f002 0203 	and.w	r2, r2, #3
 8010426:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010428:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	8958      	ldrh	r0, [r3, #10]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	3309      	adds	r3, #9
 8010432:	461a      	mov	r2, r3
 8010434:	2102      	movs	r1, #2
 8010436:	f7f8 ff57 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	330b      	adds	r3, #11
 8010444:	461a      	mov	r2, r3
 8010446:	2102      	movs	r1, #2
 8010448:	f7f8 ff99 	bl	800937e <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	330d      	adds	r3, #13
 8010456:	461a      	mov	r2, r3
 8010458:	2102      	movs	r1, #2
 801045a:	f7f8 ff90 	bl	800937e <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	8a18      	ldrh	r0, [r3, #16]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	330f      	adds	r3, #15
 8010466:	461a      	mov	r2, r3
 8010468:	2102      	movs	r1, #2
 801046a:	f7f8 ff3d 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 8010474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010478:	b218      	sxth	r0, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	3311      	adds	r3, #17
 801047e:	461a      	mov	r2, r3
 8010480:	2102      	movs	r1, #2
 8010482:	f7f8 ff7c 	bl	800937e <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3313      	adds	r3, #19
 8010490:	461a      	mov	r2, r3
 8010492:	2102      	movs	r1, #2
 8010494:	f7f8 ff73 	bl	800937e <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	3315      	adds	r3, #21
 80104a2:	461a      	mov	r2, r3
 80104a4:	2102      	movs	r1, #2
 80104a6:	f7f8 ff6a 	bl	800937e <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80104aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3718      	adds	r7, #24
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b086      	sub	sp, #24
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	4603      	mov	r3, r0
 80104be:	60b9      	str	r1, [r7, #8]
 80104c0:	607a      	str	r2, [r7, #4]
 80104c2:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104c4:	2300      	movs	r3, #0
 80104c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80104c8:	89fb      	ldrh	r3, [r7, #14]
 80104ca:	2b16      	cmp	r3, #22
 80104cc:	d802      	bhi.n	80104d4 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80104ce:	f06f 0309 	mvn.w	r3, #9
 80104d2:	e079      	b.n	80105c8 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	785a      	ldrb	r2, [r3, #1]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	789a      	ldrb	r2, [r3, #2]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	78da      	ldrb	r2, [r3, #3]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	791a      	ldrb	r2, [r3, #4]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	3305      	adds	r3, #5
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	f003 030f 	and.w	r3, r3, #15
 8010506:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	799a      	ldrb	r2, [r3, #6]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	3307      	adds	r3, #7
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801051e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	3308      	adds	r3, #8
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	f003 0303 	and.w	r3, r3, #3
 801052e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	3309      	adds	r3, #9
 8010538:	4619      	mov	r1, r3
 801053a:	2002      	movs	r0, #2
 801053c:	f7f8 feff 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010540:	4603      	mov	r3, r0
 8010542:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	330b      	adds	r3, #11
 801054c:	4619      	mov	r1, r3
 801054e:	2002      	movs	r0, #2
 8010550:	f7f8 ff41 	bl	80093d6 <VL53LX_i2c_decode_int16_t>
 8010554:	4603      	mov	r3, r0
 8010556:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	330d      	adds	r3, #13
 8010560:	4619      	mov	r1, r3
 8010562:	2002      	movs	r0, #2
 8010564:	f7f8 ff37 	bl	80093d6 <VL53LX_i2c_decode_int16_t>
 8010568:	4603      	mov	r3, r0
 801056a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	330f      	adds	r3, #15
 8010574:	4619      	mov	r1, r3
 8010576:	2002      	movs	r0, #2
 8010578:	f7f8 fee1 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 801057c:	4603      	mov	r3, r0
 801057e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	3311      	adds	r3, #17
 8010588:	4619      	mov	r1, r3
 801058a:	2002      	movs	r0, #2
 801058c:	f7f8 ff23 	bl	80093d6 <VL53LX_i2c_decode_int16_t>
 8010590:	4603      	mov	r3, r0
 8010592:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010596:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	3313      	adds	r3, #19
 80105a0:	4619      	mov	r1, r3
 80105a2:	2002      	movs	r0, #2
 80105a4:	f7f8 ff17 	bl	80093d6 <VL53LX_i2c_decode_int16_t>
 80105a8:	4603      	mov	r3, r0
 80105aa:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	3315      	adds	r3, #21
 80105b4:	4619      	mov	r1, r3
 80105b6:	2002      	movs	r0, #2
 80105b8:	f7f8 ff0d 	bl	80093d6 <VL53LX_i2c_decode_int16_t>
 80105bc:	4603      	mov	r3, r0
 80105be:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80105c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3718      	adds	r7, #24
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08a      	sub	sp, #40	; 0x28
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80105da:	2300      	movs	r3, #0
 80105dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80105e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d109      	bne.n	80105fc <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 80105e8:	f107 020c 	add.w	r2, r7, #12
 80105ec:	2317      	movs	r3, #23
 80105ee:	210d      	movs	r1, #13
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7f2 f88d 	bl	8002710 <VL53LX_ReadMulti>
 80105f6:	4603      	mov	r3, r0
 80105f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80105fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010600:	2b00      	cmp	r3, #0
 8010602:	d109      	bne.n	8010618 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 8010604:	f107 030c 	add.w	r3, r7, #12
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	4619      	mov	r1, r3
 801060c:	2017      	movs	r0, #23
 801060e:	f7ff ff52 	bl	80104b6 <VL53LX_i2c_decode_customer_nvm_managed>
 8010612:	4603      	mov	r3, r0
 8010614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 8010618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801061c:	2b00      	cmp	r3, #0
 801061e:	d11c      	bne.n	801065a <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	8a5b      	ldrh	r3, [r3, #18]
 8010624:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 8010626:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801062a:	2b00      	cmp	r3, #0
 801062c:	da00      	bge.n	8010630 <VL53LX_get_customer_nvm_managed+0x60>
 801062e:	3303      	adds	r3, #3
 8010630:	109b      	asrs	r3, r3, #2
 8010632:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 8010634:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801063c:	db04      	blt.n	8010648 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 801063e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010640:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010644:	b29b      	uxth	r3, r3
 8010646:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	2200      	movs	r2, #0
 801064c:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010652:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010658:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 801065a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801065e:	4618      	mov	r0, r3
 8010660:	3728      	adds	r7, #40	; 0x28
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b086      	sub	sp, #24
 801066a:	af00      	add	r7, sp, #0
 801066c:	60f8      	str	r0, [r7, #12]
 801066e:	460b      	mov	r3, r1
 8010670:	607a      	str	r2, [r7, #4]
 8010672:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010674:	2300      	movs	r3, #0
 8010676:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8010678:	897b      	ldrh	r3, [r7, #10]
 801067a:	2b1f      	cmp	r3, #31
 801067c:	d802      	bhi.n	8010684 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801067e:	f06f 0309 	mvn.w	r3, #9
 8010682:	e0cf      	b.n	8010824 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	2102      	movs	r1, #2
 801068c:	4618      	mov	r0, r3
 801068e:	f7f8 fe2b 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801069a:	f002 0201 	and.w	r2, r2, #1
 801069e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80106a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80106aa:	f002 020f 	and.w	r2, r2, #15
 80106ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80106b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80106ba:	f002 020f 	and.w	r2, r2, #15
 80106be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80106c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80106ca:	f002 021f 	and.w	r2, r2, #31
 80106ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80106d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80106da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80106de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80106e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80106ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80106ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80106f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80106fa:	f002 0201 	and.w	r2, r2, #1
 80106fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010700:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 801070a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8010714:	f002 0201 	and.w	r2, r2, #1
 8010718:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801071a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8010724:	f002 0203 	and.w	r2, r2, #3
 8010728:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801072a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8010734:	f002 021f 	and.w	r2, r2, #31
 8010738:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801073a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8010744:	f002 0203 	and.w	r2, r2, #3
 8010748:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801074a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8010754:	f002 0203 	and.w	r2, r2, #3
 8010758:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801075a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8010764:	f002 0207 	and.w	r2, r2, #7
 8010768:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801076a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8010774:	f002 021f 	and.w	r2, r2, #31
 8010778:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801077a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8010784:	f002 0201 	and.w	r2, r2, #1
 8010788:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801078a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8010794:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 801079e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80107a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80107b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80107bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80107c6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	8b18      	ldrh	r0, [r3, #24]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3318      	adds	r3, #24
 80107d0:	461a      	mov	r2, r3
 80107d2:	2102      	movs	r1, #2
 80107d4:	f7f8 fd88 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80107e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80107ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80107f4:	f002 020f 	and.w	r2, r2, #15
 80107f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80107fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8010804:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 801080e:	f002 020f 	and.w	r2, r2, #15
 8010812:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8010814:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 801081e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010820:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3718      	adds	r7, #24
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b086      	sub	sp, #24
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	460b      	mov	r3, r1
 8010836:	607a      	str	r2, [r7, #4]
 8010838:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801083a:	2300      	movs	r3, #0
 801083c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 801083e:	897b      	ldrh	r3, [r7, #10]
 8010840:	2b15      	cmp	r3, #21
 8010842:	d802      	bhi.n	801084a <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010844:	f06f 0309 	mvn.w	r3, #9
 8010848:	e070      	b.n	801092c <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801085a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8010864:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 801086e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010872:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010874:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 801087a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801087e:	b298      	uxth	r0, r3
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	3304      	adds	r3, #4
 8010884:	461a      	mov	r2, r3
 8010886:	2102      	movs	r1, #2
 8010888:	f7f8 fd2e 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8010894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010898:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801089a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80108a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80108ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80108b8:	f002 0201 	and.w	r2, r2, #1
 80108bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80108be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80108c8:	f002 0207 	and.w	r2, r2, #7
 80108cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80108ce:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	8998      	ldrh	r0, [r3, #12]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	330c      	adds	r3, #12
 80108d8:	461a      	mov	r2, r3
 80108da:	2102      	movs	r1, #2
 80108dc:	f7f8 fd04 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	89d8      	ldrh	r0, [r3, #14]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	330e      	adds	r3, #14
 80108e8:	461a      	mov	r2, r3
 80108ea:	2102      	movs	r1, #2
 80108ec:	f7f8 fcfc 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	8a18      	ldrh	r0, [r3, #16]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3310      	adds	r3, #16
 80108f8:	461a      	mov	r2, r3
 80108fa:	2102      	movs	r1, #2
 80108fc:	f7f8 fcf4 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8010908:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8010912:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801091c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8010926:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3718      	adds	r7, #24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b086      	sub	sp, #24
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	460b      	mov	r3, r1
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010942:	2300      	movs	r3, #0
 8010944:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8010946:	897b      	ldrh	r3, [r7, #10]
 8010948:	2b16      	cmp	r3, #22
 801094a:	d802      	bhi.n	8010952 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801094c:	f06f 0309 	mvn.w	r3, #9
 8010950:	e06e      	b.n	8010a30 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	f003 030f 	and.w	r3, r3, #15
 801095a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8010964:	68fa      	ldr	r2, [r7, #12]
 8010966:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010968:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8010972:	f002 020f 	and.w	r2, r2, #15
 8010976:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010978:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8010982:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801098c:	f002 020f 	and.w	r2, r2, #15
 8010990:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010992:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 801099c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80109a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80109aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80109ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80109b6:	f002 020f 	and.w	r2, r2, #15
 80109ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80109bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80109c2:	68fa      	ldr	r2, [r7, #12]
 80109c4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80109c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80109d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80109d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80109d6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	8958      	ldrh	r0, [r3, #10]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	330a      	adds	r3, #10
 80109e0:	461a      	mov	r2, r3
 80109e2:	2102      	movs	r1, #2
 80109e4:	f7f8 fc80 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	8998      	ldrh	r0, [r3, #12]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	330c      	adds	r3, #12
 80109f0:	461a      	mov	r2, r3
 80109f2:	2102      	movs	r1, #2
 80109f4:	f7f8 fc78 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8010a00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8010a06:	68fa      	ldr	r2, [r7, #12]
 8010a08:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8010a0a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6918      	ldr	r0, [r3, #16]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	3312      	adds	r3, #18
 8010a14:	461a      	mov	r2, r3
 8010a16:	2104      	movs	r1, #4
 8010a18:	f7f8 fd06 	bl	8009428 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8010a24:	f002 0201 	and.w	r2, r2, #1
 8010a28:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8010a2a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3718      	adds	r7, #24
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b086      	sub	sp, #24
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	460b      	mov	r3, r1
 8010a42:	607a      	str	r2, [r7, #4]
 8010a44:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a46:	2300      	movs	r3, #0
 8010a48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8010a4a:	897b      	ldrh	r3, [r7, #10]
 8010a4c:	2b11      	cmp	r3, #17
 8010a4e:	d802      	bhi.n	8010a56 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010a50:	f06f 0309 	mvn.w	r3, #9
 8010a54:	e071      	b.n	8010b3a <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	f003 0303 	and.w	r3, r3, #3
 8010a5e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	8858      	ldrh	r0, [r3, #2]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	2102      	movs	r1, #2
 8010a70:	f7f8 fc3a 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	8898      	ldrh	r0, [r3, #4]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	3303      	adds	r3, #3
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	2102      	movs	r1, #2
 8010a80:	f7f8 fc32 	bl	80092e8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010a8c:	f002 0201 	and.w	r2, r2, #1
 8010a90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8010a92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8010a9c:	f002 0207 	and.w	r2, r2, #7
 8010aa0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010aa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8010aac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010ab6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010ac4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010ac6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010ad4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010ad6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010ae0:	f002 0203 	and.w	r2, r2, #3
 8010ae4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010ae6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8010af0:	f002 0203 	and.w	r2, r2, #3
 8010af4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010af6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8010b00:	f002 020f 	and.w	r2, r2, #15
 8010b04:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010b06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8010b10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8010b1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8010b24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8010b2e:	f002 0203 	and.w	r2, r2, #3
 8010b32:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010b34:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3718      	adds	r7, #24
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010b42:	b480      	push	{r7}
 8010b44:	b087      	sub	sp, #28
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	60f8      	str	r0, [r7, #12]
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	607a      	str	r2, [r7, #4]
 8010b4e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010b50:	2300      	movs	r3, #0
 8010b52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8010b54:	897b      	ldrh	r3, [r7, #10]
 8010b56:	2b04      	cmp	r3, #4
 8010b58:	d802      	bhi.n	8010b60 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010b5a:	f06f 0309 	mvn.w	r3, #9
 8010b5e:	e025      	b.n	8010bac <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8010b76:	f002 0201 	and.w	r2, r2, #1
 8010b7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010b7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8010b86:	f002 0201 	and.w	r2, r2, #1
 8010b8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010b8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8010b96:	f002 0203 	and.w	r2, r2, #3
 8010b9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010b9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010ba6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	371c      	adds	r7, #28
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b086      	sub	sp, #24
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	607a      	str	r2, [r7, #4]
 8010bc4:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8010bca:	89fb      	ldrh	r3, [r7, #14]
 8010bcc:	2b2b      	cmp	r3, #43	; 0x2b
 8010bce:	d802      	bhi.n	8010bd6 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010bd0:	f06f 0309 	mvn.w	r3, #9
 8010bd4:	e0e2      	b.n	8010d9c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bde:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	785a      	ldrb	r2, [r3, #1]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	3302      	adds	r3, #2
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f003 030f 	and.w	r3, r3, #15
 8010bf6:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	78da      	ldrb	r2, [r3, #3]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	3304      	adds	r3, #4
 8010c08:	4619      	mov	r1, r3
 8010c0a:	2002      	movs	r0, #2
 8010c0c:	f7f8 fb97 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c10:	4603      	mov	r3, r0
 8010c12:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	3306      	adds	r3, #6
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	2002      	movs	r0, #2
 8010c20:	f7f8 fb8d 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c24:	4603      	mov	r3, r0
 8010c26:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	4619      	mov	r1, r3
 8010c32:	2002      	movs	r0, #2
 8010c34:	f7f8 fb83 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	330a      	adds	r3, #10
 8010c44:	4619      	mov	r1, r3
 8010c46:	2002      	movs	r0, #2
 8010c48:	f7f8 fb79 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	330c      	adds	r3, #12
 8010c58:	4619      	mov	r1, r3
 8010c5a:	2002      	movs	r0, #2
 8010c5c:	f7f8 fb6f 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c60:	4603      	mov	r3, r0
 8010c62:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	330e      	adds	r3, #14
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	2002      	movs	r0, #2
 8010c70:	f7f8 fb65 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c74:	4603      	mov	r3, r0
 8010c76:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	3310      	adds	r3, #16
 8010c80:	4619      	mov	r1, r3
 8010c82:	2002      	movs	r0, #2
 8010c84:	f7f8 fb5b 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	3312      	adds	r3, #18
 8010c94:	4619      	mov	r1, r3
 8010c96:	2002      	movs	r0, #2
 8010c98:	f7f8 fb51 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	3314      	adds	r3, #20
 8010ca8:	4619      	mov	r1, r3
 8010caa:	2002      	movs	r0, #2
 8010cac:	f7f8 fb47 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	3316      	adds	r3, #22
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	2002      	movs	r0, #2
 8010cc0:	f7f8 fb3d 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	3318      	adds	r3, #24
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	2002      	movs	r0, #2
 8010cd4:	f7f8 fb33 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	331a      	adds	r3, #26
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	2002      	movs	r0, #2
 8010ce8:	f7f8 fb29 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010cec:	4603      	mov	r3, r0
 8010cee:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	331c      	adds	r3, #28
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	2002      	movs	r0, #2
 8010cfc:	f7f8 fb1f 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d00:	4603      	mov	r3, r0
 8010d02:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	331e      	adds	r3, #30
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	2002      	movs	r0, #2
 8010d10:	f7f8 fb15 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d14:	4603      	mov	r3, r0
 8010d16:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	3320      	adds	r3, #32
 8010d20:	4619      	mov	r1, r3
 8010d22:	2002      	movs	r0, #2
 8010d24:	f7f8 fb0b 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	3322      	adds	r3, #34	; 0x22
 8010d34:	4619      	mov	r1, r3
 8010d36:	2002      	movs	r0, #2
 8010d38:	f7f8 fb01 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	3324      	adds	r3, #36	; 0x24
 8010d48:	4619      	mov	r1, r3
 8010d4a:	2002      	movs	r0, #2
 8010d4c:	f7f8 faf7 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d50:	4603      	mov	r3, r0
 8010d52:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	3326      	adds	r3, #38	; 0x26
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	2002      	movs	r0, #2
 8010d60:	f7f8 faed 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d64:	4603      	mov	r3, r0
 8010d66:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	3328      	adds	r3, #40	; 0x28
 8010d70:	4619      	mov	r1, r3
 8010d72:	2002      	movs	r0, #2
 8010d74:	f7f8 fae3 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8010d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3718      	adds	r7, #24
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	607a      	str	r2, [r7, #4]
 8010db0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010db2:	2300      	movs	r3, #0
 8010db4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8010db6:	89fb      	ldrh	r3, [r7, #14]
 8010db8:	2b20      	cmp	r3, #32
 8010dba:	d802      	bhi.n	8010dc2 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010dbc:	f06f 0309 	mvn.w	r3, #9
 8010dc0:	e04d      	b.n	8010e5e <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8010dc2:	68b9      	ldr	r1, [r7, #8]
 8010dc4:	2004      	movs	r0, #4
 8010dc6:	f7f8 fb59 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8010dca:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	2004      	movs	r0, #4
 8010dd8:	f7f8 fb50 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8010ddc:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	3308      	adds	r3, #8
 8010de6:	4619      	mov	r1, r3
 8010de8:	2004      	movs	r0, #4
 8010dea:	f7f8 fb64 	bl	80094b6 <VL53LX_i2c_decode_int32_t>
 8010dee:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	330c      	adds	r3, #12
 8010df8:	4619      	mov	r1, r3
 8010dfa:	2004      	movs	r0, #4
 8010dfc:	f7f8 fb3e 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8010e00:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	3310      	adds	r3, #16
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	2004      	movs	r0, #4
 8010e0e:	f7f8 fb35 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8010e12:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	3314      	adds	r3, #20
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	2004      	movs	r0, #4
 8010e20:	f7f8 fb2c 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8010e24:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	3318      	adds	r3, #24
 8010e2e:	4619      	mov	r1, r3
 8010e30:	2004      	movs	r0, #4
 8010e32:	f7f8 fb40 	bl	80094b6 <VL53LX_i2c_decode_int32_t>
 8010e36:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	331c      	adds	r3, #28
 8010e40:	4619      	mov	r1, r3
 8010e42:	2004      	movs	r0, #4
 8010e44:	f7f8 fb1a 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8010e48:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8010e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3718      	adds	r7, #24
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}

08010e66 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 8010e66:	b580      	push	{r7, lr}
 8010e68:	b086      	sub	sp, #24
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	60b9      	str	r1, [r7, #8]
 8010e70:	607a      	str	r2, [r7, #4]
 8010e72:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010e74:	2300      	movs	r3, #0
 8010e76:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8010e78:	89fb      	ldrh	r3, [r7, #14]
 8010e7a:	2b37      	cmp	r3, #55	; 0x37
 8010e7c:	d802      	bhi.n	8010e84 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010e7e:	f06f 0309 	mvn.w	r3, #9
 8010e82:	e15e      	b.n	8011142 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8010e84:	68b9      	ldr	r1, [r7, #8]
 8010e86:	2002      	movs	r0, #2
 8010e88:	f7f8 fa59 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	3302      	adds	r3, #2
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e9e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	3303      	adds	r3, #3
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010eae:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	781b      	ldrb	r3, [r3, #0]
 8010eba:	f003 0303 	and.w	r3, r3, #3
 8010ebe:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	3305      	adds	r3, #5
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	f003 0301 	and.w	r3, r3, #1
 8010ece:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	3306      	adds	r3, #6
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ede:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	3307      	adds	r3, #7
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010eee:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	3308      	adds	r3, #8
 8010ef8:	4619      	mov	r1, r3
 8010efa:	2002      	movs	r0, #2
 8010efc:	f7f8 fa1f 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010f00:	4603      	mov	r3, r0
 8010f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f06:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	330a      	adds	r3, #10
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	f003 0303 	and.w	r3, r3, #3
 8010f16:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	330b      	adds	r3, #11
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	f003 0303 	and.w	r3, r3, #3
 8010f26:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	330c      	adds	r3, #12
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	f003 030f 	and.w	r3, r3, #15
 8010f36:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	330d      	adds	r3, #13
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	f003 0307 	and.w	r3, r3, #7
 8010f46:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	330e      	adds	r3, #14
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	330f      	adds	r3, #15
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	f003 0303 	and.w	r3, r3, #3
 8010f66:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	7c1a      	ldrb	r2, [r3, #16]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	7c5a      	ldrb	r2, [r3, #17]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	3312      	adds	r3, #18
 8010f80:	4619      	mov	r1, r3
 8010f82:	2002      	movs	r0, #2
 8010f84:	f7f8 f9db 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f8e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	3316      	adds	r3, #22
 8010f98:	4619      	mov	r1, r3
 8010f9a:	2002      	movs	r0, #2
 8010f9c:	f7f8 f9cf 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	3318      	adds	r3, #24
 8010fac:	4619      	mov	r1, r3
 8010fae:	2002      	movs	r0, #2
 8010fb0:	f7f8 f9c5 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	331a      	adds	r3, #26
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	331b      	adds	r3, #27
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	f003 0307 	and.w	r3, r3, #7
 8010fd6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	7f1a      	ldrb	r2, [r3, #28]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	7f5a      	ldrb	r2, [r3, #29]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	331e      	adds	r3, #30
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ff6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	331f      	adds	r3, #31
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011006:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	3320      	adds	r3, #32
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	f003 0303 	and.w	r3, r3, #3
 8011016:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	3321      	adds	r3, #33	; 0x21
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	f003 030f 	and.w	r3, r3, #15
 8011026:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	3325      	adds	r3, #37	; 0x25
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	f003 0301 	and.w	r3, r3, #1
 801105a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	3326      	adds	r3, #38	; 0x26
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f003 0303 	and.w	r3, r3, #3
 801106c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	3327      	adds	r3, #39	; 0x27
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	f003 031f 	and.w	r3, r3, #31
 801107e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	3328      	adds	r3, #40	; 0x28
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	f003 031f 	and.w	r3, r3, #31
 8011090:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	3329      	adds	r3, #41	; 0x29
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	f003 031f 	and.w	r3, r3, #31
 80110a2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	332a      	adds	r3, #42	; 0x2a
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	f003 0301 	and.w	r3, r3, #1
 80110b4:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	332b      	adds	r3, #43	; 0x2b
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	f003 0301 	and.w	r3, r3, #1
 80110c6:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	332c      	adds	r3, #44	; 0x2c
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	f003 0303 	and.w	r3, r3, #3
 80110d8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	332d      	adds	r3, #45	; 0x2d
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110ea:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	332e      	adds	r3, #46	; 0x2e
 80110f6:	4619      	mov	r1, r3
 80110f8:	2004      	movs	r0, #4
 80110fa:	f7f8 f9bf 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 80110fe:	4603      	mov	r3, r0
 8011100:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	3332      	adds	r3, #50	; 0x32
 801110c:	4619      	mov	r1, r3
 801110e:	2004      	movs	r0, #4
 8011110:	f7f8 f9b4 	bl	800947c <VL53LX_i2c_decode_uint32_t>
 8011114:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	3336      	adds	r3, #54	; 0x36
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	f003 0301 	and.w	r3, r3, #1
 8011124:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	3337      	adds	r3, #55	; 0x37
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	f003 0301 	and.w	r3, r3, #1
 8011136:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 801113e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3718      	adds	r7, #24
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b086      	sub	sp, #24
 801114e:	af00      	add	r7, sp, #0
 8011150:	4603      	mov	r3, r0
 8011152:	60b9      	str	r1, [r7, #8]
 8011154:	607a      	str	r2, [r7, #4]
 8011156:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011158:	2300      	movs	r3, #0
 801115a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801115c:	89fb      	ldrh	r3, [r7, #14]
 801115e:	2b30      	cmp	r3, #48	; 0x30
 8011160:	d802      	bhi.n	8011168 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011162:	f06f 0309 	mvn.w	r3, #9
 8011166:	e112      	b.n	801138e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	785a      	ldrb	r2, [r3, #1]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	789a      	ldrb	r2, [r3, #2]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	3303      	adds	r3, #3
 8011184:	4619      	mov	r1, r3
 8011186:	2002      	movs	r0, #2
 8011188:	f7f8 f8d9 	bl	800933e <VL53LX_i2c_decode_uint16_t>
 801118c:	4603      	mov	r3, r0
 801118e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	3305      	adds	r3, #5
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801119e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	3306      	adds	r3, #6
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	f003 0307 	and.w	r3, r3, #7
 80111ae:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	3307      	adds	r3, #7
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	f003 0307 	and.w	r3, r3, #7
 80111be:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	3308      	adds	r3, #8
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111ce:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	3309      	adds	r3, #9
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111de:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	330a      	adds	r3, #10
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	f003 0301 	and.w	r3, r3, #1
 80111ee:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	330b      	adds	r3, #11
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111fe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	330c      	adds	r3, #12
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	330d      	adds	r3, #13
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801121e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	330e      	adds	r3, #14
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801122e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	7bda      	ldrb	r2, [r3, #15]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	7c1a      	ldrb	r2, [r3, #16]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	7c5a      	ldrb	r2, [r3, #17]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	7c9a      	ldrb	r2, [r3, #18]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	7cda      	ldrb	r2, [r3, #19]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	7d1a      	ldrb	r2, [r3, #20]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	7d5a      	ldrb	r2, [r3, #21]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	7d9a      	ldrb	r2, [r3, #22]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	7dda      	ldrb	r2, [r3, #23]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	7e1a      	ldrb	r2, [r3, #24]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	7e5a      	ldrb	r2, [r3, #25]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	7e9a      	ldrb	r2, [r3, #26]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	7eda      	ldrb	r2, [r3, #27]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	7f1a      	ldrb	r2, [r3, #28]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	7f5a      	ldrb	r2, [r3, #29]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	7f9a      	ldrb	r2, [r3, #30]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	7fda      	ldrb	r2, [r3, #31]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801138a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b090      	sub	sp, #64	; 0x40
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80113a0:	2300      	movs	r3, #0
 80113a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80113a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10a      	bne.n	80113c4 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80113ae:	f107 020c 	add.w	r2, r7, #12
 80113b2:	2331      	movs	r3, #49	; 0x31
 80113b4:	f240 110f 	movw	r1, #271	; 0x10f
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7f1 f9a9 	bl	8002710 <VL53LX_ReadMulti>
 80113be:	4603      	mov	r3, r0
 80113c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80113c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d109      	bne.n	80113e0 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80113cc:	f107 030c 	add.w	r3, r7, #12
 80113d0:	683a      	ldr	r2, [r7, #0]
 80113d2:	4619      	mov	r1, r3
 80113d4:	2031      	movs	r0, #49	; 0x31
 80113d6:	f7ff feb8 	bl	801114a <VL53LX_i2c_decode_nvm_copy_data>
 80113da:	4603      	mov	r3, r0
 80113dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80113e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3740      	adds	r7, #64	; 0x40
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80113ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80113f0:	b0d6      	sub	sp, #344	; 0x158
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80113f8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80113fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8011400:	4603      	mov	r3, r0
 8011402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8011406:	23f1      	movs	r3, #241	; 0xf1
 8011408:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 801140c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011410:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8011414:	2300      	movs	r3, #0
 8011416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 801141a:	f04f 0200 	mov.w	r2, #0
 801141e:	f04f 0300 	mov.w	r3, #0
 8011422:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8011426:	f04f 0200 	mov.w	r2, #0
 801142a:	f04f 0300 	mov.w	r3, #0
 801142e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8011432:	f04f 0200 	mov.w	r2, #0
 8011436:	f04f 0300 	mov.w	r3, #0
 801143a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53LX_p_055   = 0;
 801143e:	f04f 0200 	mov.w	r2, #0
 8011442:	f04f 0300 	mov.w	r3, #0
 8011446:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53LX_D_002;
 801144a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801144e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011452:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8011454:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8011458:	2b00      	cmp	r3, #0
 801145a:	f000 8322 	beq.w	8011aa2 <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 801145e:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8011462:	4618      	mov	r0, r3
 8011464:	f7fb fa26 	bl	800c8b4 <VL53LX_calc_pll_period_mm>
 8011468:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 801146c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8011470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011474:	429a      	cmp	r2, r3
 8011476:	d91a      	bls.n	80114ae <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8011478:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801147c:	2200      	movs	r2, #0
 801147e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53LX_p_032;
 8011486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801148a:	2200      	movs	r2, #0
 801148c:	4698      	mov	r8, r3
 801148e:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8011490:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011494:	460b      	mov	r3, r1
 8011496:	ebb3 0308 	subs.w	r3, r3, r8
 801149a:	63bb      	str	r3, [r7, #56]	; 0x38
 801149c:	4613      	mov	r3, r2
 801149e:	eb63 0309 	sbc.w	r3, r3, r9
 80114a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114a4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80114a8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80114ac:	e013      	b.n	80114d6 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80114ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80114b2:	2200      	movs	r2, #0
 80114b4:	469a      	mov	sl, r3
 80114b6:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 80114b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80114bc:	2200      	movs	r2, #0
 80114be:	461c      	mov	r4, r3
 80114c0:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80114c2:	ebba 0304 	subs.w	r3, sl, r4
 80114c6:	633b      	str	r3, [r7, #48]	; 0x30
 80114c8:	eb6b 0305 	sbc.w	r3, fp, r5
 80114cc:	637b      	str	r3, [r7, #52]	; 0x34
 80114ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80114d2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 80114d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80114da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80114de:	429a      	cmp	r2, r3
 80114e0:	d91f      	bls.n	8011522 <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80114e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80114e6:	2200      	movs	r2, #0
 80114e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80114ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53LX_p_001;
 80114f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80114f4:	2200      	movs	r2, #0
 80114f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80114fa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80114fe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8011502:	4623      	mov	r3, r4
 8011504:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011508:	4602      	mov	r2, r0
 801150a:	1a9b      	subs	r3, r3, r2
 801150c:	62bb      	str	r3, [r7, #40]	; 0x28
 801150e:	462b      	mov	r3, r5
 8011510:	460a      	mov	r2, r1
 8011512:	eb63 0302 	sbc.w	r3, r3, r2
 8011516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011518:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801151c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8011520:	e01e      	b.n	8011560 <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8011522:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011526:	2200      	movs	r2, #0
 8011528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801152c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53LX_p_007;
 8011530:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011534:	2200      	movs	r2, #0
 8011536:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801153a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801153e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8011542:	4623      	mov	r3, r4
 8011544:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011548:	4602      	mov	r2, r0
 801154a:	1a9b      	subs	r3, r3, r2
 801154c:	623b      	str	r3, [r7, #32]
 801154e:	462b      	mov	r3, r5
 8011550:	460a      	mov	r2, r1
 8011552:	eb63 0302 	sbc.w	r3, r3, r2
 8011556:	627b      	str	r3, [r7, #36]	; 0x24
 8011558:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801155c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8011560:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011564:	4313      	orrs	r3, r2
 8011566:	f000 829c 	beq.w	8011aa2 <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 801156a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801156e:	2200      	movs	r2, #0
 8011570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011574:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8011578:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801157c:	2200      	movs	r2, #0
 801157e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011582:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011586:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 801158a:	4623      	mov	r3, r4
 801158c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8011590:	4602      	mov	r2, r0
 8011592:	189b      	adds	r3, r3, r2
 8011594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011598:	460b      	mov	r3, r1
 801159a:	462a      	mov	r2, r5
 801159c:	eb42 0303 	adc.w	r3, r2, r3
 80115a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53LX_p_028;
 80115a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80115a8:	2200      	movs	r2, #0
 80115aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80115ae:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80115b2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80115b6:	4623      	mov	r3, r4
 80115b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80115bc:	4602      	mov	r2, r0
 80115be:	189b      	adds	r3, r3, r2
 80115c0:	61bb      	str	r3, [r7, #24]
 80115c2:	460b      	mov	r3, r1
 80115c4:	462a      	mov	r2, r5
 80115c6:	eb42 0303 	adc.w	r3, r2, r3
 80115ca:	61fb      	str	r3, [r7, #28]
 80115cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80115d0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53LX_D_003)
 80115d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80115d8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80115dc:	f173 0300 	sbcs.w	r3, r3, #0
 80115e0:	d305      	bcc.n	80115ee <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 80115e2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80115e6:	f04f 0300 	mov.w	r3, #0
 80115ea:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 80115ee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80115f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80115f6:	fb03 f102 	mul.w	r1, r3, r2
 80115fa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80115fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011602:	fb02 f303 	mul.w	r3, r2, r3
 8011606:	18ca      	adds	r2, r1, r3
 8011608:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801160c:	fba3 1303 	umull	r1, r3, r3, r3
 8011610:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011614:	460b      	mov	r3, r1
 8011616:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801161a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801161e:	18d3      	adds	r3, r2, r3
 8011620:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011624:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8011628:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801162c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8011630:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8011634:	f04f 0000 	mov.w	r0, #0
 8011638:	f04f 0100 	mov.w	r1, #0
 801163c:	0219      	lsls	r1, r3, #8
 801163e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8011642:	0210      	lsls	r0, r2, #8
 8011644:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53LX_D_004)
 8011648:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011650:	d305      	bcc.n	801165e <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8011652:	f04f 32ff 	mov.w	r2, #4294967295
 8011656:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801165a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801165e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011662:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8011666:	f7ef fb77 	bl	8000d58 <__aeabi_uldivmod>
 801166a:	4602      	mov	r2, r0
 801166c:	460b      	mov	r3, r1
 801166e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8011672:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011676:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801167a:	f7ef fb6d 	bl	8000d58 <__aeabi_uldivmod>
 801167e:	4602      	mov	r2, r0
 8011680:	460b      	mov	r3, r1
 8011682:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8011686:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801168a:	2b80      	cmp	r3, #128	; 0x80
 801168c:	d305      	bcc.n	801169a <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 801168e:	f04f 32ff 	mov.w	r2, #4294967295
 8011692:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8011696:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 801169a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801169e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80116a2:	fb03 f102 	mul.w	r1, r3, r2
 80116a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80116aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80116ae:	fb02 f303 	mul.w	r3, r2, r3
 80116b2:	4419      	add	r1, r3
 80116b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80116b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80116bc:	fba2 2303 	umull	r2, r3, r2, r3
 80116c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80116c4:	4613      	mov	r3, r2
 80116c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80116ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80116ce:	18cb      	adds	r3, r1, r3
 80116d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80116d4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80116d8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80116dc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80116e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80116e4:	2200      	movs	r2, #0
 80116e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80116ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80116ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80116f2:	2200      	movs	r2, #0
 80116f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80116f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80116fc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011700:	4623      	mov	r3, r4
 8011702:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8011706:	4602      	mov	r2, r0
 8011708:	189b      	adds	r3, r3, r2
 801170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801170e:	460b      	mov	r3, r1
 8011710:	462a      	mov	r2, r5
 8011712:	eb42 0303 	adc.w	r3, r2, r3
 8011716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801171a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801171e:	2200      	movs	r2, #0
 8011720:	67bb      	str	r3, [r7, #120]	; 0x78
 8011722:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011724:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8011728:	4623      	mov	r3, r4
 801172a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801172e:	4602      	mov	r2, r0
 8011730:	189b      	adds	r3, r3, r2
 8011732:	673b      	str	r3, [r7, #112]	; 0x70
 8011734:	460b      	mov	r3, r1
 8011736:	462a      	mov	r2, r5
 8011738:	eb42 0303 	adc.w	r3, r2, r3
 801173c:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801173e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011742:	2200      	movs	r2, #0
 8011744:	66bb      	str	r3, [r7, #104]	; 0x68
 8011746:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011748:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801174c:	4623      	mov	r3, r4
 801174e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011752:	4602      	mov	r2, r0
 8011754:	189b      	adds	r3, r3, r2
 8011756:	613b      	str	r3, [r7, #16]
 8011758:	460b      	mov	r3, r1
 801175a:	462a      	mov	r2, r5
 801175c:	eb42 0303 	adc.w	r3, r2, r3
 8011760:	617b      	str	r3, [r7, #20]
 8011762:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011766:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 801176a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801176e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011772:	f173 0300 	sbcs.w	r3, r3, #0
 8011776:	d305      	bcc.n	8011784 <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 8011778:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801177c:	f04f 0300 	mov.w	r3, #0
 8011780:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8011784:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8011788:	f04f 0000 	mov.w	r0, #0
 801178c:	f04f 0100 	mov.w	r1, #0
 8011790:	0219      	lsls	r1, r3, #8
 8011792:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8011796:	0210      	lsls	r0, r2, #8
 8011798:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 801179c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80117a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80117a4:	1884      	adds	r4, r0, r2
 80117a6:	60bc      	str	r4, [r7, #8]
 80117a8:	eb41 0303 	adc.w	r3, r1, r3
 80117ac:	60fb      	str	r3, [r7, #12]
 80117ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80117b2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80117b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	da05      	bge.n	80117ca <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 80117be:	f04f 32ff 	mov.w	r2, #4294967295
 80117c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80117c6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80117ca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d331      	bcc.n	8011836 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80117d2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80117d6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80117da:	f7ef fabd 	bl	8000d58 <__aeabi_uldivmod>
 80117de:	4602      	mov	r2, r0
 80117e0:	460b      	mov	r3, r1
 80117e2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80117e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80117ea:	2200      	movs	r2, #0
 80117ec:	663b      	str	r3, [r7, #96]	; 0x60
 80117ee:	667a      	str	r2, [r7, #100]	; 0x64
 80117f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80117f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80117f8:	4622      	mov	r2, r4
 80117fa:	fb02 f203 	mul.w	r2, r2, r3
 80117fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011802:	4629      	mov	r1, r5
 8011804:	fb01 f303 	mul.w	r3, r1, r3
 8011808:	441a      	add	r2, r3
 801180a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801180e:	4621      	mov	r1, r4
 8011810:	fba3 1301 	umull	r1, r3, r3, r1
 8011814:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011818:	460b      	mov	r3, r1
 801181a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801181e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011822:	18d3      	adds	r3, r2, r3
 8011824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011828:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 801182c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8011830:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8011834:	e030      	b.n	8011898 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8011836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801183a:	2200      	movs	r2, #0
 801183c:	65bb      	str	r3, [r7, #88]	; 0x58
 801183e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011840:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011844:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8011848:	4622      	mov	r2, r4
 801184a:	fb02 f203 	mul.w	r2, r2, r3
 801184e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011852:	4629      	mov	r1, r5
 8011854:	fb01 f303 	mul.w	r3, r1, r3
 8011858:	441a      	add	r2, r3
 801185a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801185e:	4621      	mov	r1, r4
 8011860:	fba3 1301 	umull	r1, r3, r3, r1
 8011864:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011868:	460b      	mov	r3, r1
 801186a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801186e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011872:	18d3      	adds	r3, r2, r3
 8011874:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011878:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801187c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8011880:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8011884:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011888:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801188c:	f7ef fa64 	bl	8000d58 <__aeabi_uldivmod>
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8011898:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801189c:	2b00      	cmp	r3, #0
 801189e:	da05      	bge.n	80118ac <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 80118a0:	f04f 32ff 	mov.w	r2, #4294967295
 80118a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80118a8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80118ac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d33d      	bcc.n	8011930 <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80118b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80118b8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80118bc:	f7ef fa4c 	bl	8000d58 <__aeabi_uldivmod>
 80118c0:	4602      	mov	r2, r0
 80118c2:	460b      	mov	r3, r1
 80118c4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80118c8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80118cc:	f04f 0200 	mov.w	r2, #0
 80118d0:	f04f 0300 	mov.w	r3, #0
 80118d4:	0882      	lsrs	r2, r0, #2
 80118d6:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80118da:	088b      	lsrs	r3, r1, #2
 80118dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80118e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118e4:	2200      	movs	r2, #0
 80118e6:	653b      	str	r3, [r7, #80]	; 0x50
 80118e8:	657a      	str	r2, [r7, #84]	; 0x54
 80118ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80118ee:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80118f2:	4622      	mov	r2, r4
 80118f4:	fb02 f203 	mul.w	r2, r2, r3
 80118f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80118fc:	4629      	mov	r1, r5
 80118fe:	fb01 f303 	mul.w	r3, r1, r3
 8011902:	4413      	add	r3, r2
 8011904:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011908:	4621      	mov	r1, r4
 801190a:	fba2 1201 	umull	r1, r2, r2, r1
 801190e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8011912:	460a      	mov	r2, r1
 8011914:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011918:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801191c:	4413      	add	r3, r2
 801191e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011922:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8011926:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801192a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801192e:	e03c      	b.n	80119aa <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8011930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011934:	2200      	movs	r2, #0
 8011936:	64bb      	str	r3, [r7, #72]	; 0x48
 8011938:	64fa      	str	r2, [r7, #76]	; 0x4c
 801193a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801193e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011942:	4622      	mov	r2, r4
 8011944:	fb02 f203 	mul.w	r2, r2, r3
 8011948:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801194c:	4629      	mov	r1, r5
 801194e:	fb01 f303 	mul.w	r3, r1, r3
 8011952:	4413      	add	r3, r2
 8011954:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011958:	4621      	mov	r1, r4
 801195a:	fba2 1201 	umull	r1, r2, r2, r1
 801195e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011962:	460a      	mov	r2, r1
 8011964:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8011968:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801196c:	4413      	add	r3, r2
 801196e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011972:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011976:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801197a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801197e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011982:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011986:	f7ef f9e7 	bl	8000d58 <__aeabi_uldivmod>
 801198a:	4602      	mov	r2, r0
 801198c:	460b      	mov	r3, r1
 801198e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8011992:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011996:	f04f 0200 	mov.w	r2, #0
 801199a:	f04f 0300 	mov.w	r3, #0
 801199e:	0882      	lsrs	r2, r0, #2
 80119a0:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80119a4:	088b      	lsrs	r3, r1, #2
 80119a6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80119aa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	da05      	bge.n	80119be <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 80119b2:	f04f 32ff 	mov.w	r2, #4294967295
 80119b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80119ba:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 80119be:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80119c2:	f04f 0200 	mov.w	r2, #0
 80119c6:	f04f 0300 	mov.w	r3, #0
 80119ca:	0882      	lsrs	r2, r0, #2
 80119cc:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80119d0:	088b      	lsrs	r3, r1, #2
 80119d2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80119d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d305      	bcc.n	80119ea <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 80119de:	f04f 32ff 	mov.w	r2, #4294967295
 80119e2:	f04f 0300 	mov.w	r3, #0
 80119e6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80119ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119ee:	2200      	movs	r2, #0
 80119f0:	643b      	str	r3, [r7, #64]	; 0x40
 80119f2:	647a      	str	r2, [r7, #68]	; 0x44
 80119f4:	f04f 0200 	mov.w	r2, #0
 80119f8:	f04f 0300 	mov.w	r3, #0
 80119fc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011a00:	4629      	mov	r1, r5
 8011a02:	01cb      	lsls	r3, r1, #7
 8011a04:	4621      	mov	r1, r4
 8011a06:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8011a0a:	4621      	mov	r1, r4
 8011a0c:	01ca      	lsls	r2, r1, #7
 8011a0e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8011a12:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011a16:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8011a1a:	fb03 f202 	mul.w	r2, r3, r2
 8011a1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011a22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8011a26:	fb01 f303 	mul.w	r3, r1, r3
 8011a2a:	441a      	add	r2, r3
 8011a2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011a30:	fba3 1303 	umull	r1, r3, r3, r3
 8011a34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a38:	460b      	mov	r3, r1
 8011a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a42:	18d3      	adds	r3, r2, r3
 8011a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a48:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011a4c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8011a50:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8011a54:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011a58:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8011a5c:	1884      	adds	r4, r0, r2
 8011a5e:	603c      	str	r4, [r7, #0]
 8011a60:	eb41 0303 	adc.w	r3, r1, r3
 8011a64:	607b      	str	r3, [r7, #4]
 8011a66:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011a6a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8011a6e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d305      	bcc.n	8011a82 <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8011a76:	f04f 32ff 	mov.w	r2, #4294967295
 8011a7a:	f04f 0300 	mov.w	r3, #0
 8011a7e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8011a82:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fa fdad 	bl	800c5e6 <VL53LX_isqrt>
 8011a8c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8011a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8011a9a:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8011aa2:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8011aac:	46bd      	mov	sp, r7
 8011aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011ab2 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b086      	sub	sp, #24
 8011ab6:	af02      	add	r7, sp, #8
 8011ab8:	6078      	str	r0, [r7, #4]
 8011aba:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8011abc:	2300      	movs	r3, #0
 8011abe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8011ac0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7f0 ff49 	bl	800295c <VL53LX_WaitUs>
 8011aca:	4603      	mov	r3, r0
 8011acc:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8011ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d10b      	bne.n	8011aee <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	2301      	movs	r3, #1
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	2301      	movs	r3, #1
 8011ae0:	22e5      	movs	r2, #229	; 0xe5
 8011ae2:	6839      	ldr	r1, [r7, #0]
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7f0 ff4f 	bl	8002988 <VL53LX_WaitValueMaskEx>
 8011aea:	4603      	mov	r3, r0
 8011aec:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8011aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d103      	bne.n	8011afe <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8011af6:	2103      	movs	r1, #3
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7f6 fe3a 	bl	8008772 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8011afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8011b0a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b0e:	b0c0      	sub	sp, #256	; 0x100
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8011b16:	4618      	mov	r0, r3
 8011b18:	460b      	mov	r3, r1
 8011b1a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8011b1e:	4613      	mov	r3, r2
 8011b20:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8011b24:	4603      	mov	r3, r0
 8011b26:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8011b30:	2300      	movs	r3, #0
 8011b32:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8011b36:	2300      	movs	r3, #0
 8011b38:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8011b54:	f04f 0200 	mov.w	r2, #0
 8011b58:	f04f 0300 	mov.w	r3, #0
 8011b5c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8011b60:	f04f 0200 	mov.w	r2, #0
 8011b64:	f04f 0300 	mov.w	r3, #0
 8011b68:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8011b6c:	f04f 0200 	mov.w	r2, #0
 8011b70:	f04f 0300 	mov.w	r3, #0
 8011b74:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8011b78:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d108      	bne.n	8011b92 <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8011b80:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8011b84:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8011b88:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fb f90b 	bl	800cda8 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8011b92:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d165      	bne.n	8011c66 <VL53LX_f_032+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8011b9a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011b9e:	091b      	lsrs	r3, r3, #4
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	f003 0301 	and.w	r3, r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00e      	beq.n	8011bc8 <VL53LX_f_032+0xbe>
			bound_l_x = (int16_t) col -
 8011baa:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011bb4:	095b      	lsrs	r3, r3, #5
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8011bc6:	e00b      	b.n	8011be0 <VL53LX_f_032+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8011bc8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011bd2:	095b      	lsrs	r3, r3, #5
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8011be0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011bea:	095b      	lsrs	r3, r3, #5
 8011bec:	b2db      	uxtb	r3, r3
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	4413      	add	r3, r2
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8011bf8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d011      	beq.n	8011c28 <VL53LX_f_032+0x11e>
			bound_d_y = (int16_t) row -
 8011c04:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011c08:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8011c0a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011c0e:	f003 020f 	and.w	r2, r3, #15
 8011c12:	0fd3      	lsrs	r3, r2, #31
 8011c14:	4413      	add	r3, r2
 8011c16:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	1acb      	subs	r3, r1, r3
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8011c26:	e00f      	b.n	8011c48 <VL53LX_f_032+0x13e>
		else
			bound_d_y = (int16_t) row -
 8011c28:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011c2c:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8011c2e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011c32:	f003 020f 	and.w	r2, r3, #15
 8011c36:	0fd3      	lsrs	r3, r2, #31
 8011c38:	4413      	add	r3, r2
 8011c3a:	105b      	asrs	r3, r3, #1
 8011c3c:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	440b      	add	r3, r1
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8011c48:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011c4c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8011c4e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011c52:	f003 020f 	and.w	r2, r3, #15
 8011c56:	0fd3      	lsrs	r3, r2, #31
 8011c58:	4413      	add	r3, r2
 8011c5a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	440b      	add	r3, r1
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8011c66:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d133      	bne.n	8011cd6 <VL53LX_f_032+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8011c6e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8011c78:	4413      	add	r3, r2
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	005b      	lsls	r3, r3, #1
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	3b0f      	subs	r3, #15
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8011c88:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8011c92:	4413      	add	r3, r2
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	3b0f      	subs	r3, #15
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8011ca2:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8011cac:	4413      	add	r3, r2
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	3b0f      	subs	r3, #15
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8011cbc:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8011cc6:	4413      	add	r3, r2
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	005b      	lsls	r3, r3, #1
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	3b0f      	subs	r3, #15
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8011cd6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f040 8135 	bne.w	8011f4a <VL53LX_f_032+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011ce0:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8011ce4:	17da      	asrs	r2, r3, #31
 8011ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011cea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011cee:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011cf2:	17da      	asrs	r2, r3, #31
 8011cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011cfc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8011d00:	460b      	mov	r3, r1
 8011d02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011d06:	fb02 f203 	mul.w	r2, r2, r3
 8011d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011d0e:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8011d12:	4601      	mov	r1, r0
 8011d14:	fb01 f303 	mul.w	r3, r1, r3
 8011d18:	4413      	add	r3, r2
 8011d1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011d1e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8011d22:	fba2 4501 	umull	r4, r5, r2, r1
 8011d26:	442b      	add	r3, r5
 8011d28:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011d2a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8011d2e:	17da      	asrs	r2, r3, #31
 8011d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011d34:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8011d38:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011d3c:	17da      	asrs	r2, r3, #31
 8011d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011d42:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011d50:	fb02 f203 	mul.w	r2, r2, r3
 8011d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d58:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	fb01 f303 	mul.w	r3, r1, r3
 8011d62:	4413      	add	r3, r2
 8011d64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011d68:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8011d6c:	fba2 8901 	umull	r8, r9, r2, r1
 8011d70:	444b      	add	r3, r9
 8011d72:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011d74:	eb14 0308 	adds.w	r3, r4, r8
 8011d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d7a:	eb45 0309 	adc.w	r3, r5, r9
 8011d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d80:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8011d84:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8011d88:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011d8c:	1c51      	adds	r1, r2, #1
 8011d8e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011d92:	f143 0300 	adc.w	r3, r3, #0
 8011d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011d9a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011d9e:	460b      	mov	r3, r1
 8011da0:	0fdb      	lsrs	r3, r3, #31
 8011da2:	2200      	movs	r2, #0
 8011da4:	643b      	str	r3, [r7, #64]	; 0x40
 8011da6:	647a      	str	r2, [r7, #68]	; 0x44
 8011da8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011dac:	4623      	mov	r3, r4
 8011dae:	4602      	mov	r2, r0
 8011db0:	189b      	adds	r3, r3, r2
 8011db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011db4:	460b      	mov	r3, r1
 8011db6:	462a      	mov	r2, r5
 8011db8:	eb42 0303 	adc.w	r3, r2, r3
 8011dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dbe:	f04f 0200 	mov.w	r2, #0
 8011dc2:	f04f 0300 	mov.w	r3, #0
 8011dc6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8011dca:	4621      	mov	r1, r4
 8011dcc:	084a      	lsrs	r2, r1, #1
 8011dce:	4629      	mov	r1, r5
 8011dd0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	104b      	asrs	r3, r1, #1
 8011dd8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8011ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011de0:	2200      	movs	r2, #0
 8011de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011dea:	f04f 0000 	mov.w	r0, #0
 8011dee:	f04f 0100 	mov.w	r1, #0
 8011df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011df6:	462b      	mov	r3, r5
 8011df8:	0099      	lsls	r1, r3, #2
 8011dfa:	4623      	mov	r3, r4
 8011dfc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8011e00:	4623      	mov	r3, r4
 8011e02:	0098      	lsls	r0, r3, #2
 8011e04:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011e08:	1814      	adds	r4, r2, r0
 8011e0a:	633c      	str	r4, [r7, #48]	; 0x30
 8011e0c:	414b      	adcs	r3, r1
 8011e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011e14:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011e18:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8011e1c:	17da      	asrs	r2, r3, #31
 8011e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011e22:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011e26:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011e2a:	17da      	asrs	r2, r3, #31
 8011e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011e34:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8011e38:	462b      	mov	r3, r5
 8011e3a:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8011e3e:	4642      	mov	r2, r8
 8011e40:	fb02 f203 	mul.w	r2, r2, r3
 8011e44:	464b      	mov	r3, r9
 8011e46:	4621      	mov	r1, r4
 8011e48:	fb01 f303 	mul.w	r3, r1, r3
 8011e4c:	4413      	add	r3, r2
 8011e4e:	4622      	mov	r2, r4
 8011e50:	4641      	mov	r1, r8
 8011e52:	fba2 ab01 	umull	sl, fp, r2, r1
 8011e56:	445b      	add	r3, fp
 8011e58:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011e5a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8011e5e:	17da      	asrs	r2, r3, #31
 8011e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e62:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8011e64:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011e68:	17da      	asrs	r2, r3, #31
 8011e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8011e6c:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011e6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8011e72:	462b      	mov	r3, r5
 8011e74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011e78:	4642      	mov	r2, r8
 8011e7a:	fb02 f203 	mul.w	r2, r2, r3
 8011e7e:	464b      	mov	r3, r9
 8011e80:	4621      	mov	r1, r4
 8011e82:	fb01 f303 	mul.w	r3, r1, r3
 8011e86:	4413      	add	r3, r2
 8011e88:	4622      	mov	r2, r4
 8011e8a:	4641      	mov	r1, r8
 8011e8c:	fba2 1201 	umull	r1, r2, r2, r1
 8011e90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011e94:	460a      	mov	r2, r1
 8011e96:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8011e9a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011e9e:	4413      	add	r3, r2
 8011ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011ea4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8011eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	eb4b 0303 	adc.w	r3, fp, r3
 8011eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011eb8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8011ebc:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011ec0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8011ec4:	1c51      	adds	r1, r2, #1
 8011ec6:	66b9      	str	r1, [r7, #104]	; 0x68
 8011ec8:	f143 0300 	adc.w	r3, r3, #0
 8011ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011ece:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	0fdb      	lsrs	r3, r3, #31
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	623b      	str	r3, [r7, #32]
 8011eda:	627a      	str	r2, [r7, #36]	; 0x24
 8011edc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8011ee0:	4623      	mov	r3, r4
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	189b      	adds	r3, r3, r2
 8011ee6:	61bb      	str	r3, [r7, #24]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	462a      	mov	r2, r5
 8011eec:	eb42 0303 	adc.w	r3, r2, r3
 8011ef0:	61fb      	str	r3, [r7, #28]
 8011ef2:	f04f 0200 	mov.w	r2, #0
 8011ef6:	f04f 0300 	mov.w	r3, #0
 8011efa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011efe:	4621      	mov	r1, r4
 8011f00:	084a      	lsrs	r2, r1, #1
 8011f02:	4629      	mov	r1, r5
 8011f04:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011f08:	4629      	mov	r1, r5
 8011f0a:	104b      	asrs	r3, r1, #1
 8011f0c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8011f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011f14:	2200      	movs	r2, #0
 8011f16:	663b      	str	r3, [r7, #96]	; 0x60
 8011f18:	667a      	str	r2, [r7, #100]	; 0x64
 8011f1a:	f04f 0200 	mov.w	r2, #0
 8011f1e:	f04f 0300 	mov.w	r3, #0
 8011f22:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011f26:	4629      	mov	r1, r5
 8011f28:	008b      	lsls	r3, r1, #2
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011f30:	4621      	mov	r1, r4
 8011f32:	008a      	lsls	r2, r1, #2
 8011f34:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8011f38:	1884      	adds	r4, r0, r2
 8011f3a:	613c      	str	r4, [r7, #16]
 8011f3c:	eb41 0303 	adc.w	r3, r1, r3
 8011f40:	617b      	str	r3, [r7, #20]
 8011f42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011f46:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8011f4a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d132      	bne.n	8011fb8 <VL53LX_f_032+0x4ae>
		xtalk_avg = do_division_s(
 8011f52:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8011f56:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8011f5a:	1884      	adds	r4, r0, r2
 8011f5c:	65bc      	str	r4, [r7, #88]	; 0x58
 8011f5e:	eb41 0303 	adc.w	r3, r1, r3
 8011f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f64:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8011f68:	460b      	mov	r3, r1
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	653b      	str	r3, [r7, #80]	; 0x50
 8011f6e:	4613      	mov	r3, r2
 8011f70:	f143 0300 	adc.w	r3, r3, #0
 8011f74:	657b      	str	r3, [r7, #84]	; 0x54
 8011f76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	0fdb      	lsrs	r3, r3, #31
 8011f7e:	2200      	movs	r2, #0
 8011f80:	60bb      	str	r3, [r7, #8]
 8011f82:	60fa      	str	r2, [r7, #12]
 8011f84:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011f88:	4623      	mov	r3, r4
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	189b      	adds	r3, r3, r2
 8011f8e:	603b      	str	r3, [r7, #0]
 8011f90:	460b      	mov	r3, r1
 8011f92:	462a      	mov	r2, r5
 8011f94:	eb42 0303 	adc.w	r3, r2, r3
 8011f98:	607b      	str	r3, [r7, #4]
 8011f9a:	f04f 0200 	mov.w	r2, #0
 8011f9e:	f04f 0300 	mov.w	r3, #0
 8011fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011fa6:	4621      	mov	r1, r4
 8011fa8:	084a      	lsrs	r2, r1, #1
 8011faa:	4629      	mov	r1, r5
 8011fac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	104b      	asrs	r3, r1, #1
 8011fb4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8011fb8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d109      	bne.n	8011fd4 <VL53LX_f_032+0x4ca>
		if (xtalk_avg < 0)
 8011fc0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	da05      	bge.n	8011fd4 <VL53LX_f_032+0x4ca>
			xtalk_avg = 0;
 8011fc8:	f04f 0200 	mov.w	r2, #0
 8011fcc:	f04f 0300 	mov.w	r3, #0
 8011fd0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8011fd4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011fd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011fdc:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011fde:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011fee <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011fee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011ff2:	b09a      	sub	sp, #104	; 0x68
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6478      	str	r0, [r7, #68]	; 0x44
 8011ff8:	6439      	str	r1, [r7, #64]	; 0x40
 8011ffa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011ffc:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011ffe:	2300      	movs	r3, #0
 8012000:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8012004:	f04f 0200 	mov.w	r2, #0
 8012008:	f04f 0300 	mov.w	r3, #0
 801200c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8012010:	f04f 0200 	mov.w	r2, #0
 8012014:	f04f 0300 	mov.w	r3, #0
 8012018:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 801201c:	f04f 0200 	mov.w	r2, #0
 8012020:	f04f 0300 	mov.w	r3, #0
 8012024:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 801202e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012030:	2200      	movs	r2, #0
 8012032:	633b      	str	r3, [r7, #48]	; 0x30
 8012034:	637a      	str	r2, [r7, #52]	; 0x34
 8012036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801203c:	2200      	movs	r2, #0
 801203e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012042:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012046:	460b      	mov	r3, r1
 8012048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801204a:	fb02 f203 	mul.w	r2, r2, r3
 801204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012050:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8012054:	4601      	mov	r1, r0
 8012056:	fb01 f303 	mul.w	r3, r1, r3
 801205a:	4413      	add	r3, r2
 801205c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801205e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012060:	fba2 4501 	umull	r4, r5, r2, r1
 8012064:	442b      	add	r3, r5
 8012066:	461d      	mov	r5, r3
 8012068:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 801206c:	623b      	str	r3, [r7, #32]
 801206e:	f145 0300 	adc.w	r3, r5, #0
 8012072:	627b      	str	r3, [r7, #36]	; 0x24
 8012074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012078:	f04f 0300 	mov.w	r3, #0
 801207c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012080:	f7ee fe6a 	bl	8000d58 <__aeabi_uldivmod>
 8012084:	4602      	mov	r2, r0
 8012086:	460b      	mov	r3, r1
 8012088:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801208e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8012092:	b29b      	uxth	r3, r3
 8012094:	2200      	movs	r2, #0
 8012096:	61bb      	str	r3, [r7, #24]
 8012098:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801209c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80120a0:	4622      	mov	r2, r4
 80120a2:	fb02 f203 	mul.w	r2, r2, r3
 80120a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a8:	4629      	mov	r1, r5
 80120aa:	fb01 f303 	mul.w	r3, r1, r3
 80120ae:	4413      	add	r3, r2
 80120b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120b2:	4621      	mov	r1, r4
 80120b4:	fba2 ab01 	umull	sl, fp, r2, r1
 80120b8:	445b      	add	r3, fp
 80120ba:	469b      	mov	fp, r3
 80120bc:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80120c0:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80120c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80120c8:	f04f 0200 	mov.w	r2, #0
 80120cc:	f04f 0300 	mov.w	r3, #0
 80120d0:	0a02      	lsrs	r2, r0, #8
 80120d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80120d6:	0a0b      	lsrs	r3, r1, #8
 80120d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80120dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80120e0:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 80120e4:	6139      	str	r1, [r7, #16]
 80120e6:	f143 0300 	adc.w	r3, r3, #0
 80120ea:	617b      	str	r3, [r7, #20]
 80120ec:	f04f 0200 	mov.w	r2, #0
 80120f0:	f04f 0300 	mov.w	r3, #0
 80120f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80120f8:	4621      	mov	r1, r4
 80120fa:	0aca      	lsrs	r2, r1, #11
 80120fc:	4629      	mov	r1, r5
 80120fe:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8012102:	4629      	mov	r1, r5
 8012104:	0acb      	lsrs	r3, r1, #11
 8012106:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801210a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801210e:	2b01      	cmp	r3, #1
 8012110:	d305      	bcc.n	801211e <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8012112:	f04f 32ff 	mov.w	r2, #4294967295
 8012116:	f04f 0300 	mov.w	r3, #0
 801211a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801211e:	2300      	movs	r3, #0
 8012120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012124:	e041      	b.n	80121aa <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8012126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801212a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801212c:	3302      	adds	r3, #2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	4413      	add	r3, r2
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	60bb      	str	r3, [r7, #8]
 8012138:	60fa      	str	r2, [r7, #12]
 801213a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801213c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012140:	4622      	mov	r2, r4
 8012142:	fb02 f203 	mul.w	r2, r2, r3
 8012146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012148:	4629      	mov	r1, r5
 801214a:	fb01 f303 	mul.w	r3, r1, r3
 801214e:	4413      	add	r3, r2
 8012150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012152:	4621      	mov	r1, r4
 8012154:	fba2 8901 	umull	r8, r9, r2, r1
 8012158:	444b      	add	r3, r9
 801215a:	4699      	mov	r9, r3
 801215c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8012160:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8012164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012168:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 801216c:	6039      	str	r1, [r7, #0]
 801216e:	f143 0300 	adc.w	r3, r3, #0
 8012172:	607b      	str	r3, [r7, #4]
 8012174:	f04f 0200 	mov.w	r2, #0
 8012178:	f04f 0300 	mov.w	r3, #0
 801217c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012180:	4621      	mov	r1, r4
 8012182:	0a8a      	lsrs	r2, r1, #10
 8012184:	4629      	mov	r1, r5
 8012186:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801218a:	4629      	mov	r1, r5
 801218c:	0a8b      	lsrs	r3, r1, #10
 801218e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8012192:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219a:	3206      	adds	r2, #6
 801219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80121a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121a4:	3301      	adds	r3, #1
 80121a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80121aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121ac:	7a9b      	ldrb	r3, [r3, #10]
 80121ae:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d3b7      	bcc.n	8012126 <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80121b6:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3768      	adds	r7, #104	; 0x68
 80121be:	46bd      	mov	sp, r7
 80121c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080121c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	4603      	mov	r3, r0
 80121cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80121ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	db0b      	blt.n	80121ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80121d6:	79fb      	ldrb	r3, [r7, #7]
 80121d8:	f003 021f 	and.w	r2, r3, #31
 80121dc:	4907      	ldr	r1, [pc, #28]	; (80121fc <__NVIC_EnableIRQ+0x38>)
 80121de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121e2:	095b      	lsrs	r3, r3, #5
 80121e4:	2001      	movs	r0, #1
 80121e6:	fa00 f202 	lsl.w	r2, r0, r2
 80121ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80121ee:	bf00      	nop
 80121f0:	370c      	adds	r7, #12
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	e000e100 	.word	0xe000e100

08012200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	4603      	mov	r3, r0
 8012208:	6039      	str	r1, [r7, #0]
 801220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012210:	2b00      	cmp	r3, #0
 8012212:	db0a      	blt.n	801222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	b2da      	uxtb	r2, r3
 8012218:	490c      	ldr	r1, [pc, #48]	; (801224c <__NVIC_SetPriority+0x4c>)
 801221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801221e:	0112      	lsls	r2, r2, #4
 8012220:	b2d2      	uxtb	r2, r2
 8012222:	440b      	add	r3, r1
 8012224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012228:	e00a      	b.n	8012240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	b2da      	uxtb	r2, r3
 801222e:	4908      	ldr	r1, [pc, #32]	; (8012250 <__NVIC_SetPriority+0x50>)
 8012230:	79fb      	ldrb	r3, [r7, #7]
 8012232:	f003 030f 	and.w	r3, r3, #15
 8012236:	3b04      	subs	r3, #4
 8012238:	0112      	lsls	r2, r2, #4
 801223a:	b2d2      	uxtb	r2, r2
 801223c:	440b      	add	r3, r1
 801223e:	761a      	strb	r2, [r3, #24]
}
 8012240:	bf00      	nop
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr
 801224c:	e000e100 	.word	0xe000e100
 8012250:	e000ed00 	.word	0xe000ed00

08012254 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4a53      	ldr	r2, [pc, #332]	; (80123b0 <BTimer_Config+0x15c>)
 8012262:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8012264:	b672      	cpsid	i
}
 8012266:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012270:	d106      	bne.n	8012280 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8012272:	4b50      	ldr	r3, [pc, #320]	; (80123b4 <BTimer_Config+0x160>)
 8012274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012276:	4a4f      	ldr	r2, [pc, #316]	; (80123b4 <BTimer_Config+0x160>)
 8012278:	f043 0301 	orr.w	r3, r3, #1
 801227c:	6413      	str	r3, [r2, #64]	; 0x40
 801227e:	e022      	b.n	80122c6 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a4c      	ldr	r2, [pc, #304]	; (80123b8 <BTimer_Config+0x164>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d106      	bne.n	8012298 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 801228a:	4b4a      	ldr	r3, [pc, #296]	; (80123b4 <BTimer_Config+0x160>)
 801228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801228e:	4a49      	ldr	r2, [pc, #292]	; (80123b4 <BTimer_Config+0x160>)
 8012290:	f043 0302 	orr.w	r3, r3, #2
 8012294:	6413      	str	r3, [r2, #64]	; 0x40
 8012296:	e016      	b.n	80122c6 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4a47      	ldr	r2, [pc, #284]	; (80123bc <BTimer_Config+0x168>)
 801229e:	4293      	cmp	r3, r2
 80122a0:	d106      	bne.n	80122b0 <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80122a2:	4b44      	ldr	r3, [pc, #272]	; (80123b4 <BTimer_Config+0x160>)
 80122a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122a6:	4a43      	ldr	r2, [pc, #268]	; (80123b4 <BTimer_Config+0x160>)
 80122a8:	f043 0304 	orr.w	r3, r3, #4
 80122ac:	6413      	str	r3, [r2, #64]	; 0x40
 80122ae:	e00a      	b.n	80122c6 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a42      	ldr	r2, [pc, #264]	; (80123c0 <BTimer_Config+0x16c>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d105      	bne.n	80122c6 <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80122ba:	4b3e      	ldr	r3, [pc, #248]	; (80123b4 <BTimer_Config+0x160>)
 80122bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122be:	4a3d      	ldr	r2, [pc, #244]	; (80123b4 <BTimer_Config+0x160>)
 80122c0:	f043 0308 	orr.w	r3, r3, #8
 80122c4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	791b      	ldrb	r3, [r3, #4]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d10c      	bne.n	80122e8 <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f022 0210 	bic.w	r2, r2, #16
 80122dc:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2200      	movs	r2, #0
 80122e4:	625a      	str	r2, [r3, #36]	; 0x24
 80122e6:	e00d      	b.n	8012304 <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f042 0210 	orr.w	r2, r2, #16
 80122f6:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	689a      	ldr	r2, [r3, #8]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	3a01      	subs	r2, #1
 8012302:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	88db      	ldrh	r3, [r3, #6]
 8012308:	1e5a      	subs	r2, r3, #1
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	689a      	ldr	r2, [r3, #8]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	3a01      	subs	r2, #1
 801231a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f042 0201 	orr.w	r2, r2, #1
 801232a:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	68da      	ldr	r2, [r3, #12]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	f042 0201 	orr.w	r2, r2, #1
 801233a:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012344:	d107      	bne.n	8012356 <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8012346:	201c      	movs	r0, #28
 8012348:	f7ff ff3c 	bl	80121c4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 801234c:	2103      	movs	r1, #3
 801234e:	201c      	movs	r0, #28
 8012350:	f7ff ff56 	bl	8012200 <__NVIC_SetPriority>
 8012354:	e025      	b.n	80123a2 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a17      	ldr	r2, [pc, #92]	; (80123b8 <BTimer_Config+0x164>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d107      	bne.n	8012370 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8012360:	201d      	movs	r0, #29
 8012362:	f7ff ff2f 	bl	80121c4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8012366:	2103      	movs	r1, #3
 8012368:	201d      	movs	r0, #29
 801236a:	f7ff ff49 	bl	8012200 <__NVIC_SetPriority>
 801236e:	e018      	b.n	80123a2 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4a11      	ldr	r2, [pc, #68]	; (80123bc <BTimer_Config+0x168>)
 8012376:	4293      	cmp	r3, r2
 8012378:	d107      	bne.n	801238a <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 801237a:	201e      	movs	r0, #30
 801237c:	f7ff ff22 	bl	80121c4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 1);
 8012380:	2101      	movs	r1, #1
 8012382:	201e      	movs	r0, #30
 8012384:	f7ff ff3c 	bl	8012200 <__NVIC_SetPriority>
 8012388:	e00b      	b.n	80123a2 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a0c      	ldr	r2, [pc, #48]	; (80123c0 <BTimer_Config+0x16c>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d106      	bne.n	80123a2 <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 8012394:	2032      	movs	r0, #50	; 0x32
 8012396:	f7ff ff15 	bl	80121c4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 801239a:	2104      	movs	r1, #4
 801239c:	2032      	movs	r0, #50	; 0x32
 801239e:	f7ff ff2f 	bl	8012200 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80123a2:	b662      	cpsie	i
}
 80123a4:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 80123a6:	bf00      	nop
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
 80123ae:	bf00      	nop
 80123b0:	20003990 	.word	0x20003990
 80123b4:	40023800 	.word	0x40023800
 80123b8:	40000400 	.word	0x40000400
 80123bc:	40000800 	.word	0x40000800
 80123c0:	40000c00 	.word	0x40000c00

080123c4 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 80123c4:	b480      	push	{r7}
 80123c6:	af00      	add	r7, sp, #0
	 __NOP();
 80123c8:	bf00      	nop
}
 80123ca:	bf00      	nop
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 80123d4:	b480      	push	{r7}
 80123d6:	af00      	add	r7, sp, #0
	 __NOP();
 80123d8:	bf00      	nop
}
 80123da:	bf00      	nop
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <BTimer5_Callback>:

__attribute__((weak)) void BTimer5_Callback(void){
 80123e4:	b480      	push	{r7}
 80123e6:	af00      	add	r7, sp, #0
	 __NOP();
 80123e8:	bf00      	nop
}
 80123ea:	bf00      	nop
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80123f4:	b580      	push	{r7, lr}
 80123f6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80123f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123fc:	691b      	ldr	r3, [r3, #16]
 80123fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012402:	f023 0301 	bic.w	r3, r3, #1
 8012406:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8012408:	f7ef fcb6 	bl	8001d78 <BTimer2_Callback>

}
 801240c:	bf00      	nop
 801240e:	bd80      	pop	{r7, pc}

08012410 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8012410:	b580      	push	{r7, lr}
 8012412:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8012414:	4b04      	ldr	r3, [pc, #16]	; (8012428 <TIM3_IRQHandler+0x18>)
 8012416:	691b      	ldr	r3, [r3, #16]
 8012418:	4a03      	ldr	r2, [pc, #12]	; (8012428 <TIM3_IRQHandler+0x18>)
 801241a:	f023 0301 	bic.w	r3, r3, #1
 801241e:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8012420:	f7ff ffd0 	bl	80123c4 <BTimer3_Callback>
}
 8012424:	bf00      	nop
 8012426:	bd80      	pop	{r7, pc}
 8012428:	40000400 	.word	0x40000400

0801242c <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 801242c:	b580      	push	{r7, lr}
 801242e:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8012430:	4b04      	ldr	r3, [pc, #16]	; (8012444 <TIM4_IRQHandler+0x18>)
 8012432:	691b      	ldr	r3, [r3, #16]
 8012434:	4a03      	ldr	r2, [pc, #12]	; (8012444 <TIM4_IRQHandler+0x18>)
 8012436:	f023 0301 	bic.w	r3, r3, #1
 801243a:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 801243c:	f7ff ffca 	bl	80123d4 <BTimer4_Callback>
}
 8012440:	bf00      	nop
 8012442:	bd80      	pop	{r7, pc}
 8012444:	40000800 	.word	0x40000800

08012448 <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 8012448:	b580      	push	{r7, lr}
 801244a:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 801244c:	4b04      	ldr	r3, [pc, #16]	; (8012460 <TIM5_IRQHandler+0x18>)
 801244e:	691b      	ldr	r3, [r3, #16]
 8012450:	4a03      	ldr	r2, [pc, #12]	; (8012460 <TIM5_IRQHandler+0x18>)
 8012452:	f023 0301 	bic.w	r3, r3, #1
 8012456:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 8012458:	f7ff ffc4 	bl	80123e4 <BTimer5_Callback>
}
 801245c:	bf00      	nop
 801245e:	bd80      	pop	{r7, pc}
 8012460:	40000c00 	.word	0x40000c00

08012464 <__NVIC_EnableIRQ>:
{
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
 801246a:	4603      	mov	r3, r0
 801246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012472:	2b00      	cmp	r3, #0
 8012474:	db0b      	blt.n	801248e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012476:	79fb      	ldrb	r3, [r7, #7]
 8012478:	f003 021f 	and.w	r2, r3, #31
 801247c:	4907      	ldr	r1, [pc, #28]	; (801249c <__NVIC_EnableIRQ+0x38>)
 801247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012482:	095b      	lsrs	r3, r3, #5
 8012484:	2001      	movs	r0, #1
 8012486:	fa00 f202 	lsl.w	r2, r0, r2
 801248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801248e:	bf00      	nop
 8012490:	370c      	adds	r7, #12
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	e000e100 	.word	0xe000e100

080124a0 <exti_Config>:
#include "GPIOxDriver.h"


GPIO_Handler_t 	handlerExtiPIN = {0};

void exti_Config(EXTI_Config_t	*extiConfig){
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]

	/* Se activa la señal de reloj para SYSCFG*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80124a8:	4b77      	ldr	r3, [pc, #476]	; (8012688 <exti_Config+0x1e8>)
 80124aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124ac:	4a76      	ldr	r2, [pc, #472]	; (8012688 <exti_Config+0x1e8>)
 80124ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80124b2:	6453      	str	r3, [r2, #68]	; 0x44

	/* Configuramos el PINX como entrada digital */
	configExtiPin(extiConfig);
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 fa73 	bl	80129a0 <configExtiPin>


	/* Se conecta la entrada del PIN configurado al EXTI correspondiente */
	if (extiConfig->EXTIx <= EXTI3){
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	2b03      	cmp	r3, #3
 80124c0:	d80e      	bhi.n	80124e0 <exti_Config+0x40>
		SYSCFG->EXTICR[0] |= (extiConfig->pinPort << (extiConfig->EXTIx)*4);
 80124c2:	4b72      	ldr	r3, [pc, #456]	; (801268c <exti_Config+0x1ec>)
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	7852      	ldrb	r2, [r2, #1]
 80124ca:	4611      	mov	r1, r2
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	7812      	ldrb	r2, [r2, #0]
 80124d0:	0092      	lsls	r2, r2, #2
 80124d2:	fa01 f202 	lsl.w	r2, r1, r2
 80124d6:	4611      	mov	r1, r2
 80124d8:	4a6c      	ldr	r2, [pc, #432]	; (801268c <exti_Config+0x1ec>)
 80124da:	430b      	orrs	r3, r1
 80124dc:	6093      	str	r3, [r2, #8]
 80124de:	e046      	b.n	801256e <exti_Config+0xce>
	}
	else if ((extiConfig->EXTIx >= EXTI4 && extiConfig->EXTIx <= EXTI7)){
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	2b03      	cmp	r3, #3
 80124e6:	d913      	bls.n	8012510 <exti_Config+0x70>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	2b07      	cmp	r3, #7
 80124ee:	d80f      	bhi.n	8012510 <exti_Config+0x70>
		SYSCFG->EXTICR[1] |= (extiConfig->pinPort << (extiConfig->EXTIx-4)*4);
 80124f0:	4b66      	ldr	r3, [pc, #408]	; (801268c <exti_Config+0x1ec>)
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	7852      	ldrb	r2, [r2, #1]
 80124f8:	4611      	mov	r1, r2
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	7812      	ldrb	r2, [r2, #0]
 80124fe:	3a04      	subs	r2, #4
 8012500:	0092      	lsls	r2, r2, #2
 8012502:	fa01 f202 	lsl.w	r2, r1, r2
 8012506:	4611      	mov	r1, r2
 8012508:	4a60      	ldr	r2, [pc, #384]	; (801268c <exti_Config+0x1ec>)
 801250a:	430b      	orrs	r3, r1
 801250c:	60d3      	str	r3, [r2, #12]
 801250e:	e02e      	b.n	801256e <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI8 && extiConfig->EXTIx <= EXTI11){
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	2b07      	cmp	r3, #7
 8012516:	d913      	bls.n	8012540 <exti_Config+0xa0>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	2b0b      	cmp	r3, #11
 801251e:	d80f      	bhi.n	8012540 <exti_Config+0xa0>
		SYSCFG->EXTICR[2] |= (extiConfig->pinPort << (extiConfig->EXTIx-8)*4);
 8012520:	4b5a      	ldr	r3, [pc, #360]	; (801268c <exti_Config+0x1ec>)
 8012522:	691b      	ldr	r3, [r3, #16]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	7852      	ldrb	r2, [r2, #1]
 8012528:	4611      	mov	r1, r2
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	7812      	ldrb	r2, [r2, #0]
 801252e:	3a08      	subs	r2, #8
 8012530:	0092      	lsls	r2, r2, #2
 8012532:	fa01 f202 	lsl.w	r2, r1, r2
 8012536:	4611      	mov	r1, r2
 8012538:	4a54      	ldr	r2, [pc, #336]	; (801268c <exti_Config+0x1ec>)
 801253a:	430b      	orrs	r3, r1
 801253c:	6113      	str	r3, [r2, #16]
 801253e:	e016      	b.n	801256e <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI12 && extiConfig->EXTIx <= EXTI15){
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	2b0b      	cmp	r3, #11
 8012546:	d912      	bls.n	801256e <exti_Config+0xce>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	2b0f      	cmp	r3, #15
 801254e:	d80e      	bhi.n	801256e <exti_Config+0xce>
		SYSCFG->EXTICR[3] |= (extiConfig->pinPort << (extiConfig->EXTIx-12)*4);
 8012550:	4b4e      	ldr	r3, [pc, #312]	; (801268c <exti_Config+0x1ec>)
 8012552:	695b      	ldr	r3, [r3, #20]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	7852      	ldrb	r2, [r2, #1]
 8012558:	4611      	mov	r1, r2
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	7812      	ldrb	r2, [r2, #0]
 801255e:	3a0c      	subs	r2, #12
 8012560:	0092      	lsls	r2, r2, #2
 8012562:	fa01 f202 	lsl.w	r2, r1, r2
 8012566:	4611      	mov	r1, r2
 8012568:	4a48      	ldr	r2, [pc, #288]	; (801268c <exti_Config+0x1ec>)
 801256a:	430b      	orrs	r3, r1
 801256c:	6153      	str	r3, [r2, #20]
	}

	/* Configurar el tipo de flanco según el PIN utilizado*/
	switch(extiConfig->triggerMode){
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	78db      	ldrb	r3, [r3, #3]
 8012572:	2b02      	cmp	r3, #2
 8012574:	d01e      	beq.n	80125b4 <exti_Config+0x114>
 8012576:	2b02      	cmp	r3, #2
 8012578:	dc33      	bgt.n	80125e2 <exti_Config+0x142>
 801257a:	2b00      	cmp	r3, #0
 801257c:	d002      	beq.n	8012584 <exti_Config+0xe4>
 801257e:	2b01      	cmp	r3, #1
 8012580:	d00c      	beq.n	801259c <exti_Config+0xfc>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
		break;
	}
	default:
	{
		break;
 8012582:	e02e      	b.n	80125e2 <exti_Config+0x142>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8012584:	4b42      	ldr	r3, [pc, #264]	; (8012690 <exti_Config+0x1f0>)
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	7812      	ldrb	r2, [r2, #0]
 801258c:	4611      	mov	r1, r2
 801258e:	2201      	movs	r2, #1
 8012590:	408a      	lsls	r2, r1
 8012592:	4611      	mov	r1, r2
 8012594:	4a3e      	ldr	r2, [pc, #248]	; (8012690 <exti_Config+0x1f0>)
 8012596:	430b      	orrs	r3, r1
 8012598:	6093      	str	r3, [r2, #8]
		break;
 801259a:	e023      	b.n	80125e4 <exti_Config+0x144>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 801259c:	4b3c      	ldr	r3, [pc, #240]	; (8012690 <exti_Config+0x1f0>)
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	7812      	ldrb	r2, [r2, #0]
 80125a4:	4611      	mov	r1, r2
 80125a6:	2201      	movs	r2, #1
 80125a8:	408a      	lsls	r2, r1
 80125aa:	4611      	mov	r1, r2
 80125ac:	4a38      	ldr	r2, [pc, #224]	; (8012690 <exti_Config+0x1f0>)
 80125ae:	430b      	orrs	r3, r1
 80125b0:	60d3      	str	r3, [r2, #12]
		break;
 80125b2:	e017      	b.n	80125e4 <exti_Config+0x144>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 80125b4:	4b36      	ldr	r3, [pc, #216]	; (8012690 <exti_Config+0x1f0>)
 80125b6:	689b      	ldr	r3, [r3, #8]
 80125b8:	687a      	ldr	r2, [r7, #4]
 80125ba:	7812      	ldrb	r2, [r2, #0]
 80125bc:	4611      	mov	r1, r2
 80125be:	2201      	movs	r2, #1
 80125c0:	408a      	lsls	r2, r1
 80125c2:	4611      	mov	r1, r2
 80125c4:	4a32      	ldr	r2, [pc, #200]	; (8012690 <exti_Config+0x1f0>)
 80125c6:	430b      	orrs	r3, r1
 80125c8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 80125ca:	4b31      	ldr	r3, [pc, #196]	; (8012690 <exti_Config+0x1f0>)
 80125cc:	68db      	ldr	r3, [r3, #12]
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	7812      	ldrb	r2, [r2, #0]
 80125d2:	4611      	mov	r1, r2
 80125d4:	2201      	movs	r2, #1
 80125d6:	408a      	lsls	r2, r1
 80125d8:	4611      	mov	r1, r2
 80125da:	4a2d      	ldr	r2, [pc, #180]	; (8012690 <exti_Config+0x1f0>)
 80125dc:	430b      	orrs	r3, r1
 80125de:	60d3      	str	r3, [r2, #12]
		break;
 80125e0:	e000      	b.n	80125e4 <exti_Config+0x144>
		break;
 80125e2:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80125e4:	b672      	cpsid	i
}
 80125e6:	bf00      	nop
	}
	}

	__disable_irq();
	/* Se activa la interrupción para el EXTI configurado */
	EXTI->IMR |= (0b1 << extiConfig->EXTIx);
 80125e8:	4b29      	ldr	r3, [pc, #164]	; (8012690 <exti_Config+0x1f0>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	7812      	ldrb	r2, [r2, #0]
 80125f0:	4611      	mov	r1, r2
 80125f2:	2201      	movs	r2, #1
 80125f4:	408a      	lsls	r2, r1
 80125f6:	4611      	mov	r1, r2
 80125f8:	4a25      	ldr	r2, [pc, #148]	; (8012690 <exti_Config+0x1f0>)
 80125fa:	430b      	orrs	r3, r1
 80125fc:	6013      	str	r3, [r2, #0]

	/* Se matricula la interrupción correspondiente en el NVIC */

	if (extiConfig->EXTIx == EXTI0){
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d103      	bne.n	801260e <exti_Config+0x16e>
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8012606:	2006      	movs	r0, #6
 8012608:	f7ff ff2c 	bl	8012464 <__NVIC_EnableIRQ>
 801260c:	e036      	b.n	801267c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI1){
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	2b01      	cmp	r3, #1
 8012614:	d103      	bne.n	801261e <exti_Config+0x17e>
		__NVIC_EnableIRQ(EXTI1_IRQn);
 8012616:	2007      	movs	r0, #7
 8012618:	f7ff ff24 	bl	8012464 <__NVIC_EnableIRQ>
 801261c:	e02e      	b.n	801267c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI2){
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	2b02      	cmp	r3, #2
 8012624:	d103      	bne.n	801262e <exti_Config+0x18e>
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8012626:	2008      	movs	r0, #8
 8012628:	f7ff ff1c 	bl	8012464 <__NVIC_EnableIRQ>
 801262c:	e026      	b.n	801267c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI3){
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	2b03      	cmp	r3, #3
 8012634:	d103      	bne.n	801263e <exti_Config+0x19e>
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8012636:	2009      	movs	r0, #9
 8012638:	f7ff ff14 	bl	8012464 <__NVIC_EnableIRQ>
 801263c:	e01e      	b.n	801267c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI4){
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2b04      	cmp	r3, #4
 8012644:	d103      	bne.n	801264e <exti_Config+0x1ae>
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8012646:	200a      	movs	r0, #10
 8012648:	f7ff ff0c 	bl	8012464 <__NVIC_EnableIRQ>
 801264c:	e016      	b.n	801267c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI5 && extiConfig->EXTIx <= EXTI9){
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	2b04      	cmp	r3, #4
 8012654:	d907      	bls.n	8012666 <exti_Config+0x1c6>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	2b09      	cmp	r3, #9
 801265c:	d803      	bhi.n	8012666 <exti_Config+0x1c6>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 801265e:	2017      	movs	r0, #23
 8012660:	f7ff ff00 	bl	8012464 <__NVIC_EnableIRQ>
 8012664:	e00a      	b.n	801267c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI10 && extiConfig->EXTIx <= EXTI15){
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b09      	cmp	r3, #9
 801266c:	d906      	bls.n	801267c <exti_Config+0x1dc>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	2b0f      	cmp	r3, #15
 8012674:	d802      	bhi.n	801267c <exti_Config+0x1dc>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8012676:	2028      	movs	r0, #40	; 0x28
 8012678:	f7ff fef4 	bl	8012464 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 801267c:	b662      	cpsie	i
}
 801267e:	bf00      	nop

	/* Se reactican las interrupciones globales */
	__enable_irq();


}
 8012680:	bf00      	nop
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	40023800 	.word	0x40023800
 801268c:	40013800 	.word	0x40013800
 8012690:	40013c00 	.word	0x40013c00

08012694 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8012694:	b580      	push	{r7, lr}
 8012696:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0){
 8012698:	4b07      	ldr	r3, [pc, #28]	; (80126b8 <EXTI0_IRQHandler+0x24>)
 801269a:	695b      	ldr	r3, [r3, #20]
 801269c:	f003 0301 	and.w	r3, r3, #1
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d007      	beq.n	80126b4 <EXTI0_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR0;
 80126a4:	4b04      	ldr	r3, [pc, #16]	; (80126b8 <EXTI0_IRQHandler+0x24>)
 80126a6:	695b      	ldr	r3, [r3, #20]
 80126a8:	4a03      	ldr	r2, [pc, #12]	; (80126b8 <EXTI0_IRQHandler+0x24>)
 80126aa:	f043 0301 	orr.w	r3, r3, #1
 80126ae:	6153      	str	r3, [r2, #20]
		Exti0_Callback();
 80126b0:	f000 f906 	bl	80128c0 <Exti0_Callback>
	}
}
 80126b4:	bf00      	nop
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	40013c00 	.word	0x40013c00

080126bc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80126bc:	b580      	push	{r7, lr}
 80126be:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1){
 80126c0:	4b07      	ldr	r3, [pc, #28]	; (80126e0 <EXTI1_IRQHandler+0x24>)
 80126c2:	695b      	ldr	r3, [r3, #20]
 80126c4:	f003 0302 	and.w	r3, r3, #2
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d007      	beq.n	80126dc <EXTI1_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR1;
 80126cc:	4b04      	ldr	r3, [pc, #16]	; (80126e0 <EXTI1_IRQHandler+0x24>)
 80126ce:	695b      	ldr	r3, [r3, #20]
 80126d0:	4a03      	ldr	r2, [pc, #12]	; (80126e0 <EXTI1_IRQHandler+0x24>)
 80126d2:	f043 0302 	orr.w	r3, r3, #2
 80126d6:	6153      	str	r3, [r2, #20]
		Exti1_Callback();
 80126d8:	f000 f8fa 	bl	80128d0 <Exti1_Callback>
	}
}
 80126dc:	bf00      	nop
 80126de:	bd80      	pop	{r7, pc}
 80126e0:	40013c00 	.word	0x40013c00

080126e4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80126e4:	b580      	push	{r7, lr}
 80126e6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2){
 80126e8:	4b07      	ldr	r3, [pc, #28]	; (8012708 <EXTI2_IRQHandler+0x24>)
 80126ea:	695b      	ldr	r3, [r3, #20]
 80126ec:	f003 0304 	and.w	r3, r3, #4
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d007      	beq.n	8012704 <EXTI2_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR2;
 80126f4:	4b04      	ldr	r3, [pc, #16]	; (8012708 <EXTI2_IRQHandler+0x24>)
 80126f6:	695b      	ldr	r3, [r3, #20]
 80126f8:	4a03      	ldr	r2, [pc, #12]	; (8012708 <EXTI2_IRQHandler+0x24>)
 80126fa:	f043 0304 	orr.w	r3, r3, #4
 80126fe:	6153      	str	r3, [r2, #20]
		Exti2_Callback();
 8012700:	f000 f8ee 	bl	80128e0 <Exti2_Callback>
	}
}
 8012704:	bf00      	nop
 8012706:	bd80      	pop	{r7, pc}
 8012708:	40013c00 	.word	0x40013c00

0801270c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 801270c:	b580      	push	{r7, lr}
 801270e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR3){
 8012710:	4b07      	ldr	r3, [pc, #28]	; (8012730 <EXTI3_IRQHandler+0x24>)
 8012712:	695b      	ldr	r3, [r3, #20]
 8012714:	f003 0308 	and.w	r3, r3, #8
 8012718:	2b00      	cmp	r3, #0
 801271a:	d007      	beq.n	801272c <EXTI3_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR3;
 801271c:	4b04      	ldr	r3, [pc, #16]	; (8012730 <EXTI3_IRQHandler+0x24>)
 801271e:	695b      	ldr	r3, [r3, #20]
 8012720:	4a03      	ldr	r2, [pc, #12]	; (8012730 <EXTI3_IRQHandler+0x24>)
 8012722:	f043 0308 	orr.w	r3, r3, #8
 8012726:	6153      	str	r3, [r2, #20]
		Exti3_Callback();
 8012728:	f000 f8e2 	bl	80128f0 <Exti3_Callback>
	}
}
 801272c:	bf00      	nop
 801272e:	bd80      	pop	{r7, pc}
 8012730:	40013c00 	.word	0x40013c00

08012734 <EXTI9_5_IRQHandler>:
//		EXTI->PR |= EXTI_PR_PR4;
//		Exti4_Callback();
//	}
//}

void EXTI9_5_IRQHandler(void){
 8012734:	b580      	push	{r7, lr}
 8012736:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5){
 8012738:	4b2a      	ldr	r3, [pc, #168]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 801273a:	695b      	ldr	r3, [r3, #20]
 801273c:	f003 0320 	and.w	r3, r3, #32
 8012740:	2b00      	cmp	r3, #0
 8012742:	d008      	beq.n	8012756 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR5;
 8012744:	4b27      	ldr	r3, [pc, #156]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012746:	695b      	ldr	r3, [r3, #20]
 8012748:	4a26      	ldr	r2, [pc, #152]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 801274a:	f043 0320 	orr.w	r3, r3, #32
 801274e:	6153      	str	r3, [r2, #20]
		Exti5_Callback();
 8012750:	f000 f8d6 	bl	8012900 <Exti5_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR9){
		EXTI->PR |= EXTI_PR_PR9;
		Exti9_Callback();
	}
}
 8012754:	e043      	b.n	80127de <EXTI9_5_IRQHandler+0xaa>
	else if (EXTI->PR & EXTI_PR_PR6){
 8012756:	4b23      	ldr	r3, [pc, #140]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012758:	695b      	ldr	r3, [r3, #20]
 801275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801275e:	2b00      	cmp	r3, #0
 8012760:	d008      	beq.n	8012774 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8012762:	4b20      	ldr	r3, [pc, #128]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012764:	695b      	ldr	r3, [r3, #20]
 8012766:	4a1f      	ldr	r2, [pc, #124]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801276c:	6153      	str	r3, [r2, #20]
		Exti6_Callback();
 801276e:	f000 f8cf 	bl	8012910 <Exti6_Callback>
}
 8012772:	e034      	b.n	80127de <EXTI9_5_IRQHandler+0xaa>
	else if (EXTI->PR & EXTI_PR_PR7){
 8012774:	4b1b      	ldr	r3, [pc, #108]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012776:	695b      	ldr	r3, [r3, #20]
 8012778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801277c:	2b00      	cmp	r3, #0
 801277e:	d011      	beq.n	80127a4 <EXTI9_5_IRQHandler+0x70>
		EXTI->PR |= EXTI_PR_PR7;
 8012780:	4b18      	ldr	r3, [pc, #96]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012782:	695b      	ldr	r3, [r3, #20]
 8012784:	4a17      	ldr	r2, [pc, #92]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 8012786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801278a:	6153      	str	r3, [r2, #20]
		if (GPIO_ReadPin(&handlerExtiPIN)){
 801278c:	4816      	ldr	r0, [pc, #88]	; (80127e8 <EXTI9_5_IRQHandler+0xb4>)
 801278e:	f000 fab8 	bl	8012d02 <GPIO_ReadPin>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	d002      	beq.n	801279e <EXTI9_5_IRQHandler+0x6a>
			Exti7_Rising_Callback();
 8012798:	f000 f8c2 	bl	8012920 <Exti7_Rising_Callback>
}
 801279c:	e01f      	b.n	80127de <EXTI9_5_IRQHandler+0xaa>
			Exti7_Falling_Callback();
 801279e:	f000 f8c7 	bl	8012930 <Exti7_Falling_Callback>
}
 80127a2:	e01c      	b.n	80127de <EXTI9_5_IRQHandler+0xaa>
	else if (EXTI->PR & EXTI_PR_PR8){
 80127a4:	4b0f      	ldr	r3, [pc, #60]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 80127a6:	695b      	ldr	r3, [r3, #20]
 80127a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d008      	beq.n	80127c2 <EXTI9_5_IRQHandler+0x8e>
		EXTI->PR |= EXTI_PR_PR8;
 80127b0:	4b0c      	ldr	r3, [pc, #48]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 80127b2:	695b      	ldr	r3, [r3, #20]
 80127b4:	4a0b      	ldr	r2, [pc, #44]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 80127b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80127ba:	6153      	str	r3, [r2, #20]
		Exti8_Callback();
 80127bc:	f000 f8c0 	bl	8012940 <Exti8_Callback>
}
 80127c0:	e00d      	b.n	80127de <EXTI9_5_IRQHandler+0xaa>
	else if (EXTI->PR & EXTI_PR_PR9){
 80127c2:	4b08      	ldr	r3, [pc, #32]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 80127c4:	695b      	ldr	r3, [r3, #20]
 80127c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d007      	beq.n	80127de <EXTI9_5_IRQHandler+0xaa>
		EXTI->PR |= EXTI_PR_PR9;
 80127ce:	4b05      	ldr	r3, [pc, #20]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 80127d0:	695b      	ldr	r3, [r3, #20]
 80127d2:	4a04      	ldr	r2, [pc, #16]	; (80127e4 <EXTI9_5_IRQHandler+0xb0>)
 80127d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80127d8:	6153      	str	r3, [r2, #20]
		Exti9_Callback();
 80127da:	f000 f8b9 	bl	8012950 <Exti9_Callback>
}
 80127de:	bf00      	nop
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	40013c00 	.word	0x40013c00
 80127e8:	20003994 	.word	0x20003994

080127ec <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80127ec:	b580      	push	{r7, lr}
 80127ee:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR10){
 80127f0:	4b31      	ldr	r3, [pc, #196]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 80127f2:	695b      	ldr	r3, [r3, #20]
 80127f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d011      	beq.n	8012820 <EXTI15_10_IRQHandler+0x34>
		EXTI->PR |= EXTI_PR_PR10;
 80127fc:	4b2e      	ldr	r3, [pc, #184]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 80127fe:	695b      	ldr	r3, [r3, #20]
 8012800:	4a2d      	ldr	r2, [pc, #180]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 8012802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012806:	6153      	str	r3, [r2, #20]
		if (GPIO_ReadPin(&handlerExtiPIN)){
 8012808:	482c      	ldr	r0, [pc, #176]	; (80128bc <EXTI15_10_IRQHandler+0xd0>)
 801280a:	f000 fa7a 	bl	8012d02 <GPIO_ReadPin>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <EXTI15_10_IRQHandler+0x2e>
			Exti10_Rising_Callback();
 8012814:	f7ef fb14 	bl	8001e40 <Exti10_Rising_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR15){
		EXTI->PR |= EXTI_PR_PR15;
		Exti15_Callback();
	}
}
 8012818:	e04c      	b.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
			Exti10_Falling_Callback();
 801281a:	f7ef fb21 	bl	8001e60 <Exti10_Falling_Callback>
}
 801281e:	e049      	b.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
	else if (EXTI->PR & EXTI_PR_PR11){
 8012820:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 8012822:	695b      	ldr	r3, [r3, #20]
 8012824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012828:	2b00      	cmp	r3, #0
 801282a:	d008      	beq.n	801283e <EXTI15_10_IRQHandler+0x52>
		EXTI->PR |= EXTI_PR_PR11;
 801282c:	4b22      	ldr	r3, [pc, #136]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	4a21      	ldr	r2, [pc, #132]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 8012832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012836:	6153      	str	r3, [r2, #20]
		Exti11_Callback();
 8012838:	f000 f892 	bl	8012960 <Exti11_Callback>
}
 801283c:	e03a      	b.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
	else if (EXTI->PR & EXTI_PR_PR12){
 801283e:	4b1e      	ldr	r3, [pc, #120]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 8012840:	695b      	ldr	r3, [r3, #20]
 8012842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012846:	2b00      	cmp	r3, #0
 8012848:	d008      	beq.n	801285c <EXTI15_10_IRQHandler+0x70>
		EXTI->PR |= EXTI_PR_PR12;
 801284a:	4b1b      	ldr	r3, [pc, #108]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801284c:	695b      	ldr	r3, [r3, #20]
 801284e:	4a1a      	ldr	r2, [pc, #104]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 8012850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012854:	6153      	str	r3, [r2, #20]
		Exti12_Callback();
 8012856:	f000 f88b 	bl	8012970 <Exti12_Callback>
}
 801285a:	e02b      	b.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
	else if (EXTI->PR & EXTI_PR_PR13){
 801285c:	4b16      	ldr	r3, [pc, #88]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801285e:	695b      	ldr	r3, [r3, #20]
 8012860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012864:	2b00      	cmp	r3, #0
 8012866:	d008      	beq.n	801287a <EXTI15_10_IRQHandler+0x8e>
		EXTI->PR |= EXTI_PR_PR13;
 8012868:	4b13      	ldr	r3, [pc, #76]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801286a:	695b      	ldr	r3, [r3, #20]
 801286c:	4a12      	ldr	r2, [pc, #72]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801286e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012872:	6153      	str	r3, [r2, #20]
		Exti13_Callback();
 8012874:	f000 fa98 	bl	8012da8 <Exti13_Callback>
}
 8012878:	e01c      	b.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
	else if (EXTI->PR & EXTI_PR_PR14){
 801287a:	4b0f      	ldr	r3, [pc, #60]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801287c:	695b      	ldr	r3, [r3, #20]
 801287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012882:	2b00      	cmp	r3, #0
 8012884:	d008      	beq.n	8012898 <EXTI15_10_IRQHandler+0xac>
		EXTI->PR |= EXTI_PR_PR14;
 8012886:	4b0c      	ldr	r3, [pc, #48]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	4a0b      	ldr	r2, [pc, #44]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012890:	6153      	str	r3, [r2, #20]
		Exti14_Callback();
 8012892:	f000 f875 	bl	8012980 <Exti14_Callback>
}
 8012896:	e00d      	b.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
	else if (EXTI->PR & EXTI_PR_PR15){
 8012898:	4b07      	ldr	r3, [pc, #28]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 801289a:	695b      	ldr	r3, [r3, #20]
 801289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d007      	beq.n	80128b4 <EXTI15_10_IRQHandler+0xc8>
		EXTI->PR |= EXTI_PR_PR15;
 80128a4:	4b04      	ldr	r3, [pc, #16]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 80128a6:	695b      	ldr	r3, [r3, #20]
 80128a8:	4a03      	ldr	r2, [pc, #12]	; (80128b8 <EXTI15_10_IRQHandler+0xcc>)
 80128aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128ae:	6153      	str	r3, [r2, #20]
		Exti15_Callback();
 80128b0:	f000 f86e 	bl	8012990 <Exti15_Callback>
}
 80128b4:	bf00      	nop
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	40013c00 	.word	0x40013c00
 80128bc:	20003994 	.word	0x20003994

080128c0 <Exti0_Callback>:


__attribute__ ((weak)) void Exti0_Callback(void){
 80128c0:	b480      	push	{r7}
 80128c2:	af00      	add	r7, sp, #0
	__NOP();
 80128c4:	bf00      	nop
}
 80128c6:	bf00      	nop
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr

080128d0 <Exti1_Callback>:
__attribute__ ((weak)) void Exti1_Callback(void){
 80128d0:	b480      	push	{r7}
 80128d2:	af00      	add	r7, sp, #0
	__NOP();
 80128d4:	bf00      	nop
}
 80128d6:	bf00      	nop
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <Exti2_Callback>:
__attribute__ ((weak)) void Exti2_Callback(void){
 80128e0:	b480      	push	{r7}
 80128e2:	af00      	add	r7, sp, #0
	__NOP();
 80128e4:	bf00      	nop
}
 80128e6:	bf00      	nop
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr

080128f0 <Exti3_Callback>:
__attribute__ ((weak)) void Exti3_Callback(void){
 80128f0:	b480      	push	{r7}
 80128f2:	af00      	add	r7, sp, #0
	__NOP();
 80128f4:	bf00      	nop
}
 80128f6:	bf00      	nop
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <Exti5_Callback>:
__attribute__ ((weak)) void Exti4_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti5_Callback(void){
 8012900:	b480      	push	{r7}
 8012902:	af00      	add	r7, sp, #0
	__NOP();
 8012904:	bf00      	nop
}
 8012906:	bf00      	nop
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <Exti6_Callback>:
__attribute__ ((weak)) void Exti6_Callback(void){
 8012910:	b480      	push	{r7}
 8012912:	af00      	add	r7, sp, #0
	__NOP();
 8012914:	bf00      	nop
}
 8012916:	bf00      	nop
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr

08012920 <Exti7_Rising_Callback>:
__attribute__ ((weak)) void Exti7_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti7_Rising_Callback(void){
 8012920:	b480      	push	{r7}
 8012922:	af00      	add	r7, sp, #0
	__NOP();
 8012924:	bf00      	nop
}
 8012926:	bf00      	nop
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <Exti7_Falling_Callback>:
__attribute__ ((weak)) void Exti7_Falling_Callback(void){
 8012930:	b480      	push	{r7}
 8012932:	af00      	add	r7, sp, #0
	__NOP();
 8012934:	bf00      	nop
}
 8012936:	bf00      	nop
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <Exti8_Callback>:
__attribute__ ((weak)) void Exti8_Callback(void){
 8012940:	b480      	push	{r7}
 8012942:	af00      	add	r7, sp, #0
	__NOP();
 8012944:	bf00      	nop
}
 8012946:	bf00      	nop
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <Exti9_Callback>:
__attribute__ ((weak)) void Exti9_Callback(void){
 8012950:	b480      	push	{r7}
 8012952:	af00      	add	r7, sp, #0
	__NOP();
 8012954:	bf00      	nop
}
 8012956:	bf00      	nop
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <Exti11_Callback>:
	__NOP();
}
__attribute__ ((weak)) void Exti10_Falling_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti11_Callback(void){
 8012960:	b480      	push	{r7}
 8012962:	af00      	add	r7, sp, #0
	__NOP();
 8012964:	bf00      	nop
}
 8012966:	bf00      	nop
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <Exti12_Callback>:
__attribute__ ((weak)) void Exti12_Callback(void){
 8012970:	b480      	push	{r7}
 8012972:	af00      	add	r7, sp, #0
	__NOP();
 8012974:	bf00      	nop
}
 8012976:	bf00      	nop
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <Exti14_Callback>:
__attribute__ ((weak)) void Exti13_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti14_Callback(void){
 8012980:	b480      	push	{r7}
 8012982:	af00      	add	r7, sp, #0
	__NOP();
 8012984:	bf00      	nop
}
 8012986:	bf00      	nop
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <Exti15_Callback>:
__attribute__ ((weak)) void Exti15_Callback(void){
 8012990:	b480      	push	{r7}
 8012992:	af00      	add	r7, sp, #0
	__NOP();
 8012994:	bf00      	nop
}
 8012996:	bf00      	nop
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <configExtiPin>:

void configExtiPin(EXTI_Config_t *extiConfig){
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
	switch (extiConfig->pinPort){
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	785b      	ldrb	r3, [r3, #1]
 80129ac:	2b07      	cmp	r3, #7
 80129ae:	d82b      	bhi.n	8012a08 <configExtiPin+0x68>
 80129b0:	a201      	add	r2, pc, #4	; (adr r2, 80129b8 <configExtiPin+0x18>)
 80129b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b6:	bf00      	nop
 80129b8:	080129d9 	.word	0x080129d9
 80129bc:	080129e1 	.word	0x080129e1
 80129c0:	080129e9 	.word	0x080129e9
 80129c4:	080129f1 	.word	0x080129f1
 80129c8:	080129f9 	.word	0x080129f9
 80129cc:	08012a09 	.word	0x08012a09
 80129d0:	08012a09 	.word	0x08012a09
 80129d4:	08012a01 	.word	0x08012a01
	case PA:
	{
		handlerExtiPIN.pGPIOx = GPIOA;
 80129d8:	4b18      	ldr	r3, [pc, #96]	; (8012a3c <configExtiPin+0x9c>)
 80129da:	4a19      	ldr	r2, [pc, #100]	; (8012a40 <configExtiPin+0xa0>)
 80129dc:	601a      	str	r2, [r3, #0]
		break;
 80129de:	e014      	b.n	8012a0a <configExtiPin+0x6a>
	}
	case PB:
	{
		handlerExtiPIN.pGPIOx = GPIOB;
 80129e0:	4b16      	ldr	r3, [pc, #88]	; (8012a3c <configExtiPin+0x9c>)
 80129e2:	4a18      	ldr	r2, [pc, #96]	; (8012a44 <configExtiPin+0xa4>)
 80129e4:	601a      	str	r2, [r3, #0]
		break;
 80129e6:	e010      	b.n	8012a0a <configExtiPin+0x6a>
	}
	case PC:
	{
		handlerExtiPIN.pGPIOx = GPIOC;
 80129e8:	4b14      	ldr	r3, [pc, #80]	; (8012a3c <configExtiPin+0x9c>)
 80129ea:	4a17      	ldr	r2, [pc, #92]	; (8012a48 <configExtiPin+0xa8>)
 80129ec:	601a      	str	r2, [r3, #0]
		break;
 80129ee:	e00c      	b.n	8012a0a <configExtiPin+0x6a>
	}
	case PD:
	{
		handlerExtiPIN.pGPIOx = GPIOD;
 80129f0:	4b12      	ldr	r3, [pc, #72]	; (8012a3c <configExtiPin+0x9c>)
 80129f2:	4a16      	ldr	r2, [pc, #88]	; (8012a4c <configExtiPin+0xac>)
 80129f4:	601a      	str	r2, [r3, #0]
		break;
 80129f6:	e008      	b.n	8012a0a <configExtiPin+0x6a>
	}
	case PE:
	{
		handlerExtiPIN.pGPIOx = GPIOE;
 80129f8:	4b10      	ldr	r3, [pc, #64]	; (8012a3c <configExtiPin+0x9c>)
 80129fa:	4a15      	ldr	r2, [pc, #84]	; (8012a50 <configExtiPin+0xb0>)
 80129fc:	601a      	str	r2, [r3, #0]
		break;
 80129fe:	e004      	b.n	8012a0a <configExtiPin+0x6a>
	}
	case PH:
	{
		handlerExtiPIN.pGPIOx = GPIOH;
 8012a00:	4b0e      	ldr	r3, [pc, #56]	; (8012a3c <configExtiPin+0x9c>)
 8012a02:	4a14      	ldr	r2, [pc, #80]	; (8012a54 <configExtiPin+0xb4>)
 8012a04:	601a      	str	r2, [r3, #0]
		break;
 8012a06:	e000      	b.n	8012a0a <configExtiPin+0x6a>
	}
	default:
	{
		break;
 8012a08:	bf00      	nop
	}
	}

	handlerExtiPIN.GPIO_PinConfig.GPIO_PinNumber 		= extiConfig->EXTIx;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	781a      	ldrb	r2, [r3, #0]
 8012a0e:	4b0b      	ldr	r3, [pc, #44]	; (8012a3c <configExtiPin+0x9c>)
 8012a10:	711a      	strb	r2, [r3, #4]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8012a12:	4b0a      	ldr	r3, [pc, #40]	; (8012a3c <configExtiPin+0x9c>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	715a      	strb	r2, [r3, #5]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= extiConfig->pinPUPD_Mode;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	789a      	ldrb	r2, [r3, #2]
 8012a1c:	4b07      	ldr	r3, [pc, #28]	; (8012a3c <configExtiPin+0x9c>)
 8012a1e:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerExtiPIN);
 8012a20:	4806      	ldr	r0, [pc, #24]	; (8012a3c <configExtiPin+0x9c>)
 8012a22:	f000 f819 	bl	8012a58 <GPIO_Config>
	extiConfig->handlerEXTIPin = handlerExtiPIN;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4a04      	ldr	r2, [pc, #16]	; (8012a3c <configExtiPin+0x9c>)
 8012a2a:	3304      	adds	r3, #4
 8012a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8012a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8012a32:	bf00      	nop
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20003994 	.word	0x20003994
 8012a40:	40020000 	.word	0x40020000
 8012a44:	40020400 	.word	0x40020400
 8012a48:	40020800 	.word	0x40020800
 8012a4c:	40020c00 	.word	0x40020c00
 8012a50:	40021000 	.word	0x40021000
 8012a54:	40021c00 	.word	0x40021c00

08012a58 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8012a58:	b480      	push	{r7}
 8012a5a:	b085      	sub	sp, #20
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8012a64:	2300      	movs	r3, #0
 8012a66:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a88      	ldr	r2, [pc, #544]	; (8012c90 <GPIO_Config+0x238>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d106      	bne.n	8012a80 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8012a72:	4b88      	ldr	r3, [pc, #544]	; (8012c94 <GPIO_Config+0x23c>)
 8012a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a76:	4a87      	ldr	r2, [pc, #540]	; (8012c94 <GPIO_Config+0x23c>)
 8012a78:	f043 0301 	orr.w	r3, r3, #1
 8012a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8012a7e:	e03a      	b.n	8012af6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a84      	ldr	r2, [pc, #528]	; (8012c98 <GPIO_Config+0x240>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d106      	bne.n	8012a98 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8012a8a:	4b82      	ldr	r3, [pc, #520]	; (8012c94 <GPIO_Config+0x23c>)
 8012a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a8e:	4a81      	ldr	r2, [pc, #516]	; (8012c94 <GPIO_Config+0x23c>)
 8012a90:	f043 0302 	orr.w	r3, r3, #2
 8012a94:	6313      	str	r3, [r2, #48]	; 0x30
 8012a96:	e02e      	b.n	8012af6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4a7f      	ldr	r2, [pc, #508]	; (8012c9c <GPIO_Config+0x244>)
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	d106      	bne.n	8012ab0 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8012aa2:	4b7c      	ldr	r3, [pc, #496]	; (8012c94 <GPIO_Config+0x23c>)
 8012aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa6:	4a7b      	ldr	r2, [pc, #492]	; (8012c94 <GPIO_Config+0x23c>)
 8012aa8:	f043 0304 	orr.w	r3, r3, #4
 8012aac:	6313      	str	r3, [r2, #48]	; 0x30
 8012aae:	e022      	b.n	8012af6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	4a7a      	ldr	r2, [pc, #488]	; (8012ca0 <GPIO_Config+0x248>)
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d106      	bne.n	8012ac8 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8012aba:	4b76      	ldr	r3, [pc, #472]	; (8012c94 <GPIO_Config+0x23c>)
 8012abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012abe:	4a75      	ldr	r2, [pc, #468]	; (8012c94 <GPIO_Config+0x23c>)
 8012ac0:	f043 0308 	orr.w	r3, r3, #8
 8012ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ac6:	e016      	b.n	8012af6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4a75      	ldr	r2, [pc, #468]	; (8012ca4 <GPIO_Config+0x24c>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d106      	bne.n	8012ae0 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8012ad2:	4b70      	ldr	r3, [pc, #448]	; (8012c94 <GPIO_Config+0x23c>)
 8012ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ad6:	4a6f      	ldr	r2, [pc, #444]	; (8012c94 <GPIO_Config+0x23c>)
 8012ad8:	f043 0310 	orr.w	r3, r3, #16
 8012adc:	6313      	str	r3, [r2, #48]	; 0x30
 8012ade:	e00a      	b.n	8012af6 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4a70      	ldr	r2, [pc, #448]	; (8012ca8 <GPIO_Config+0x250>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d105      	bne.n	8012af6 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8012aea:	4b6a      	ldr	r3, [pc, #424]	; (8012c94 <GPIO_Config+0x23c>)
 8012aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aee:	4a69      	ldr	r2, [pc, #420]	; (8012c94 <GPIO_Config+0x23c>)
 8012af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012af4:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	795b      	ldrb	r3, [r3, #5]
 8012afa:	461a      	mov	r2, r3
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	791b      	ldrb	r3, [r3, #4]
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	fa02 f303 	lsl.w	r3, r2, r3
 8012b06:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	791b      	ldrb	r3, [r3, #4]
 8012b12:	005b      	lsls	r3, r3, #1
 8012b14:	2103      	movs	r1, #3
 8012b16:	fa01 f303 	lsl.w	r3, r1, r3
 8012b1a:	43db      	mvns	r3, r3
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	400a      	ands	r2, r1
 8012b24:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	6819      	ldr	r1, [r3, #0]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68fa      	ldr	r2, [r7, #12]
 8012b32:	430a      	orrs	r2, r1
 8012b34:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	7a1b      	ldrb	r3, [r3, #8]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	791b      	ldrb	r3, [r3, #4]
 8012b40:	fa02 f303 	lsl.w	r3, r2, r3
 8012b44:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	791b      	ldrb	r3, [r3, #4]
 8012b50:	4619      	mov	r1, r3
 8012b52:	2301      	movs	r3, #1
 8012b54:	408b      	lsls	r3, r1
 8012b56:	43db      	mvns	r3, r3
 8012b58:	4619      	mov	r1, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	400a      	ands	r2, r1
 8012b60:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	6859      	ldr	r1, [r3, #4]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	430a      	orrs	r2, r1
 8012b70:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	799b      	ldrb	r3, [r3, #6]
 8012b76:	461a      	mov	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	791b      	ldrb	r3, [r3, #4]
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8012b82:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	689a      	ldr	r2, [r3, #8]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	791b      	ldrb	r3, [r3, #4]
 8012b8e:	005b      	lsls	r3, r3, #1
 8012b90:	2103      	movs	r1, #3
 8012b92:	fa01 f303 	lsl.w	r3, r1, r3
 8012b96:	43db      	mvns	r3, r3
 8012b98:	4619      	mov	r1, r3
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	400a      	ands	r2, r1
 8012ba0:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	6899      	ldr	r1, [r3, #8]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	430a      	orrs	r2, r1
 8012bb0:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	79db      	ldrb	r3, [r3, #7]
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	791b      	ldrb	r3, [r3, #4]
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8012bc2:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	68da      	ldr	r2, [r3, #12]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	791b      	ldrb	r3, [r3, #4]
 8012bce:	005b      	lsls	r3, r3, #1
 8012bd0:	2103      	movs	r1, #3
 8012bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8012bd6:	43db      	mvns	r3, r3
 8012bd8:	4619      	mov	r1, r3
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	400a      	ands	r2, r1
 8012be0:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	68d9      	ldr	r1, [r3, #12]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	68fa      	ldr	r2, [r7, #12]
 8012bee:	430a      	orrs	r2, r1
 8012bf0:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	795b      	ldrb	r3, [r3, #5]
 8012bf6:	2b02      	cmp	r3, #2
 8012bf8:	d143      	bne.n	8012c82 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	791b      	ldrb	r3, [r3, #4]
 8012bfe:	2b07      	cmp	r3, #7
 8012c00:	d81f      	bhi.n	8012c42 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	791b      	ldrb	r3, [r3, #4]
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	6a1a      	ldr	r2, [r3, #32]
 8012c10:	210f      	movs	r1, #15
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	fa01 f303 	lsl.w	r3, r1, r3
 8012c18:	43db      	mvns	r3, r3
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	400a      	ands	r2, r1
 8012c22:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	6a1a      	ldr	r2, [r3, #32]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	7a5b      	ldrb	r3, [r3, #9]
 8012c2e:	4619      	mov	r1, r3
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	fa01 f303 	lsl.w	r3, r1, r3
 8012c36:	4619      	mov	r1, r3
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	430a      	orrs	r2, r1
 8012c3e:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8012c40:	e01f      	b.n	8012c82 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	791b      	ldrb	r3, [r3, #4]
 8012c46:	3b08      	subs	r3, #8
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c52:	210f      	movs	r1, #15
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	fa01 f303 	lsl.w	r3, r1, r3
 8012c5a:	43db      	mvns	r3, r3
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	400a      	ands	r2, r1
 8012c64:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	7a5b      	ldrb	r3, [r3, #9]
 8012c70:	4619      	mov	r1, r3
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	fa01 f303 	lsl.w	r3, r1, r3
 8012c78:	4619      	mov	r1, r3
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	430a      	orrs	r2, r1
 8012c80:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8012c82:	bf00      	nop
 8012c84:	3714      	adds	r7, #20
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	40020000 	.word	0x40020000
 8012c94:	40023800 	.word	0x40023800
 8012c98:	40020400 	.word	0x40020400
 8012c9c:	40020800 	.word	0x40020800
 8012ca0:	40020c00 	.word	0x40020c00
 8012ca4:	40021000 	.word	0x40021000
 8012ca8:	40021c00 	.word	0x40021c00

08012cac <GPIO_WritePin>:
/**
 * Función utilizada para cambiar de estado el pin entregado en el handler, asignando el valor
 * entregado en la variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 8012cb8:	78fb      	ldrb	r3, [r7, #3]
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d10d      	bne.n	8012cda <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	699a      	ldr	r2, [r3, #24]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	791b      	ldrb	r3, [r3, #4]
 8012cc8:	4619      	mov	r1, r3
 8012cca:	2301      	movs	r3, #1
 8012ccc:	408b      	lsls	r3, r1
 8012cce:	4619      	mov	r1, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	430a      	orrs	r2, r1
 8012cd6:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8012cd8:	e00d      	b.n	8012cf6 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	699a      	ldr	r2, [r3, #24]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	791b      	ldrb	r3, [r3, #4]
 8012ce4:	3310      	adds	r3, #16
 8012ce6:	2101      	movs	r1, #1
 8012ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8012cec:	4619      	mov	r1, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	619a      	str	r2, [r3, #24]
}
 8012cf6:	bf00      	nop
 8012cf8:	370c      	adds	r7, #12
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <GPIO_ReadPin>:

/**
 * Función para leer el estado de un PIN especifico
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8012d02:	b480      	push	{r7}
 8012d04:	b085      	sub	sp, #20
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cuel luego retornaremos
	uint32_t pinValue = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	60fb      	str	r3, [r7, #12]

	//Cargamos el valor del registro IDR, desplazando a la derecha tantas veces como la ubicación del PIN específico
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	691b      	ldr	r3, [r3, #16]
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	7912      	ldrb	r2, [r2, #4]
 8012d18:	40d3      	lsrs	r3, r2
 8012d1a:	60fb      	str	r3, [r7, #12]
	pinValue &= 0b1;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f003 0301 	and.w	r3, r3, #1
 8012d22:	60fb      	str	r3, [r7, #12]
	return pinValue;
 8012d24:	68fb      	ldr	r3, [r7, #12]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3714      	adds	r7, #20
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr
	...

08012d34 <initStepMotor>:
	}
	return NO_WARNING;
}

/* Esta función inicializa los Exti que ayudarán al control del motor. Se debe llamar desde el Main*/
void initStepMotor(void){
 8012d34:	b598      	push	{r3, r4, r7, lr}
 8012d36:	af00      	add	r7, sp, #0
	encoderCHA.EXTIx			= EXTI7;
 8012d38:	4b17      	ldr	r3, [pc, #92]	; (8012d98 <initStepMotor+0x64>)
 8012d3a:	2207      	movs	r2, #7
 8012d3c:	701a      	strb	r2, [r3, #0]
	encoderCHA.pinPort			= PB;
 8012d3e:	4b16      	ldr	r3, [pc, #88]	; (8012d98 <initStepMotor+0x64>)
 8012d40:	2201      	movs	r2, #1
 8012d42:	705a      	strb	r2, [r3, #1]
	encoderCHA.pinPUPD_Mode		= GPIO_PUPDR_NOTHING;
 8012d44:	4b14      	ldr	r3, [pc, #80]	; (8012d98 <initStepMotor+0x64>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	709a      	strb	r2, [r3, #2]
	encoderCHA.triggerMode		= FALLING_RISING_TRIGGER;
 8012d4a:	4b13      	ldr	r3, [pc, #76]	; (8012d98 <initStepMotor+0x64>)
 8012d4c:	2202      	movs	r2, #2
 8012d4e:	70da      	strb	r2, [r3, #3]
	exti_Config(&encoderCHA);
 8012d50:	4811      	ldr	r0, [pc, #68]	; (8012d98 <initStepMotor+0x64>)
 8012d52:	f7ff fba5 	bl	80124a0 <exti_Config>
	encoderCHAPin = encoderCHA.handlerEXTIPin;
 8012d56:	4a11      	ldr	r2, [pc, #68]	; (8012d9c <initStepMotor+0x68>)
 8012d58:	4b0f      	ldr	r3, [pc, #60]	; (8012d98 <initStepMotor+0x64>)
 8012d5a:	4614      	mov	r4, r2
 8012d5c:	3304      	adds	r3, #4
 8012d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	encoderCHB.EXTIx			= EXTI13;
 8012d66:	4b0e      	ldr	r3, [pc, #56]	; (8012da0 <initStepMotor+0x6c>)
 8012d68:	220d      	movs	r2, #13
 8012d6a:	701a      	strb	r2, [r3, #0]
	encoderCHB.pinPort			= PC;
 8012d6c:	4b0c      	ldr	r3, [pc, #48]	; (8012da0 <initStepMotor+0x6c>)
 8012d6e:	2202      	movs	r2, #2
 8012d70:	705a      	strb	r2, [r3, #1]
	encoderCHB.pinPUPD_Mode		= GPIO_PUPDR_NOTHING;
 8012d72:	4b0b      	ldr	r3, [pc, #44]	; (8012da0 <initStepMotor+0x6c>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	709a      	strb	r2, [r3, #2]
	encoderCHB.triggerMode		= FALLING_TRIGGER;
 8012d78:	4b09      	ldr	r3, [pc, #36]	; (8012da0 <initStepMotor+0x6c>)
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	70da      	strb	r2, [r3, #3]
	exti_Config(&encoderCHB);
 8012d7e:	4808      	ldr	r0, [pc, #32]	; (8012da0 <initStepMotor+0x6c>)
 8012d80:	f7ff fb8e 	bl	80124a0 <exti_Config>
	encoderCHBPin = encoderCHB.handlerEXTIPin;
 8012d84:	4a07      	ldr	r2, [pc, #28]	; (8012da4 <initStepMotor+0x70>)
 8012d86:	4b06      	ldr	r3, [pc, #24]	; (8012da0 <initStepMotor+0x6c>)
 8012d88:	4614      	mov	r4, r2
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012d94:	bf00      	nop
 8012d96:	bd98      	pop	{r3, r4, r7, pc}
 8012d98:	200039a0 	.word	0x200039a0
 8012d9c:	200039c0 	.word	0x200039c0
 8012da0:	200039b0 	.word	0x200039b0
 8012da4:	200039cc 	.word	0x200039cc

08012da8 <Exti13_Callback>:
	pulses++;
	totalPulses++;
}

/* Implementació del Callback para el Exti13 */
void Exti13_Callback(void){
 8012da8:	b580      	push	{r7, lr}
 8012daa:	af00      	add	r7, sp, #0
	// Este Exti pertenece a uno de los canales del Encoder, la funcionalidad será chequear continuamente la dirección de movimiento
	if (GPIO_ReadPin(&encoderCHAPin)){
 8012dac:	4807      	ldr	r0, [pc, #28]	; (8012dcc <Exti13_Callback+0x24>)
 8012dae:	f7ff ffa8 	bl	8012d02 <GPIO_ReadPin>
 8012db2:	4603      	mov	r3, r0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d003      	beq.n	8012dc0 <Exti13_Callback+0x18>
		directionCheck = CLOCKWISE;
 8012db8:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <Exti13_Callback+0x28>)
 8012dba:	2200      	movs	r2, #0
 8012dbc:	701a      	strb	r2, [r3, #0]
	}
	else {
		directionCheck = COUNTERCLOCKWISE;
	}
}
 8012dbe:	e002      	b.n	8012dc6 <Exti13_Callback+0x1e>
		directionCheck = COUNTERCLOCKWISE;
 8012dc0:	4b03      	ldr	r3, [pc, #12]	; (8012dd0 <Exti13_Callback+0x28>)
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	701a      	strb	r2, [r3, #0]
}
 8012dc6:	bf00      	nop
 8012dc8:	bd80      	pop	{r7, pc}
 8012dca:	bf00      	nop
 8012dcc:	200039c0 	.word	0x200039c0
 8012dd0:	200039d8 	.word	0x200039d8

08012dd4 <__NVIC_EnableIRQ>:
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	4603      	mov	r3, r0
 8012ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	db0b      	blt.n	8012dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	f003 021f 	and.w	r2, r3, #31
 8012dec:	4907      	ldr	r1, [pc, #28]	; (8012e0c <__NVIC_EnableIRQ+0x38>)
 8012dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012df2:	095b      	lsrs	r3, r3, #5
 8012df4:	2001      	movs	r0, #1
 8012df6:	fa00 f202 	lsl.w	r2, r0, r2
 8012dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012dfe:	bf00      	nop
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr
 8012e0a:	bf00      	nop
 8012e0c:	e000e100 	.word	0xe000e100

08012e10 <config_SysTickMs>:
uint64_t ticks;
uint32_t sysTicksStart = 0;
uint32_t sysTicksEnd   = 0;

/**/
void config_SysTickMs(void){
 8012e10:	b580      	push	{r7, lr}
 8012e12:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8012e14:	4914      	ldr	r1, [pc, #80]	; (8012e68 <config_SysTickMs+0x58>)
 8012e16:	f04f 0200 	mov.w	r2, #0
 8012e1a:	f04f 0300 	mov.w	r3, #0
 8012e1e:	e9c1 2300 	strd	r2, r3, [r1]

	// Cargando el valor del limite de icrementos que representan 1ms
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8012e22:	4b12      	ldr	r3, [pc, #72]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e24:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8012e28:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 8012e2a:	4b10      	ldr	r3, [pc, #64]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8012e30:	4b0e      	ldr	r3, [pc, #56]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4a0d      	ldr	r2, [pc, #52]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e36:	f043 0304 	orr.w	r3, r3, #4
 8012e3a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8012e3c:	b672      	cpsid	i
}
 8012e3e:	bf00      	nop

	// Desactivamos la interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8012e40:	4b0a      	ldr	r3, [pc, #40]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a09      	ldr	r2, [pc, #36]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e46:	f043 0302 	orr.w	r3, r3, #2
 8012e4a:	6013      	str	r3, [r2, #0]

	// Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8012e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e50:	f7ff ffc0 	bl	8012dd4 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8012e54:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a04      	ldr	r2, [pc, #16]	; (8012e6c <config_SysTickMs+0x5c>)
 8012e5a:	f043 0301 	orr.w	r3, r3, #1
 8012e5e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8012e60:	b662      	cpsie	i
}
 8012e62:	bf00      	nop

	// Activamos las interrupciones globales
	__enable_irq();
}
 8012e64:	bf00      	nop
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	200039e0 	.word	0x200039e0
 8012e6c:	e000e010 	.word	0xe000e010

08012e70 <__NVIC_EnableIRQ>:
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4603      	mov	r3, r0
 8012e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	db0b      	blt.n	8012e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e82:	79fb      	ldrb	r3, [r7, #7]
 8012e84:	f003 021f 	and.w	r2, r3, #31
 8012e88:	4907      	ldr	r1, [pc, #28]	; (8012ea8 <__NVIC_EnableIRQ+0x38>)
 8012e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e8e:	095b      	lsrs	r3, r3, #5
 8012e90:	2001      	movs	r0, #1
 8012e92:	fa00 f202 	lsl.w	r2, r0, r2
 8012e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012e9a:	bf00      	nop
 8012e9c:	370c      	adds	r7, #12
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	e000e100 	.word	0xe000e100

08012eac <__NVIC_DisableIRQ>:
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	db12      	blt.n	8012ee4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	f003 021f 	and.w	r2, r3, #31
 8012ec4:	490a      	ldr	r1, [pc, #40]	; (8012ef0 <__NVIC_DisableIRQ+0x44>)
 8012ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012eca:	095b      	lsrs	r3, r3, #5
 8012ecc:	2001      	movs	r0, #1
 8012ece:	fa00 f202 	lsl.w	r2, r0, r2
 8012ed2:	3320      	adds	r3, #32
 8012ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012ed8:	f3bf 8f4f 	dsb	sy
}
 8012edc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012ede:	f3bf 8f6f 	isb	sy
}
 8012ee2:	bf00      	nop
}
 8012ee4:	bf00      	nop
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr
 8012ef0:	e000e100 	.word	0xe000e100

08012ef4 <__NVIC_SetPriority>:
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b083      	sub	sp, #12
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	4603      	mov	r3, r0
 8012efc:	6039      	str	r1, [r7, #0]
 8012efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	db0a      	blt.n	8012f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	b2da      	uxtb	r2, r3
 8012f0c:	490c      	ldr	r1, [pc, #48]	; (8012f40 <__NVIC_SetPriority+0x4c>)
 8012f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f12:	0112      	lsls	r2, r2, #4
 8012f14:	b2d2      	uxtb	r2, r2
 8012f16:	440b      	add	r3, r1
 8012f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012f1c:	e00a      	b.n	8012f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	b2da      	uxtb	r2, r3
 8012f22:	4908      	ldr	r1, [pc, #32]	; (8012f44 <__NVIC_SetPriority+0x50>)
 8012f24:	79fb      	ldrb	r3, [r7, #7]
 8012f26:	f003 030f 	and.w	r3, r3, #15
 8012f2a:	3b04      	subs	r3, #4
 8012f2c:	0112      	lsls	r2, r2, #4
 8012f2e:	b2d2      	uxtb	r2, r2
 8012f30:	440b      	add	r3, r1
 8012f32:	761a      	strb	r2, [r3, #24]
}
 8012f34:	bf00      	nop
 8012f36:	370c      	adds	r7, #12
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr
 8012f40:	e000e100 	.word	0xe000e100
 8012f44:	e000ed00 	.word	0xe000ed00

08012f48 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a89      	ldr	r2, [pc, #548]	; (801317c <USART_Config+0x234>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d106      	bne.n	8012f68 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8012f5a:	4b89      	ldr	r3, [pc, #548]	; (8013180 <USART_Config+0x238>)
 8012f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f5e:	4a88      	ldr	r2, [pc, #544]	; (8013180 <USART_Config+0x238>)
 8012f60:	f043 0310 	orr.w	r3, r3, #16
 8012f64:	6453      	str	r3, [r2, #68]	; 0x44
 8012f66:	e016      	b.n	8012f96 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4a85      	ldr	r2, [pc, #532]	; (8013184 <USART_Config+0x23c>)
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d106      	bne.n	8012f80 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8012f72:	4b83      	ldr	r3, [pc, #524]	; (8013180 <USART_Config+0x238>)
 8012f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f76:	4a82      	ldr	r2, [pc, #520]	; (8013180 <USART_Config+0x238>)
 8012f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8012f7e:	e00a      	b.n	8012f96 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	4a80      	ldr	r2, [pc, #512]	; (8013188 <USART_Config+0x240>)
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d105      	bne.n	8012f96 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8012f8a:	4b7d      	ldr	r3, [pc, #500]	; (8013180 <USART_Config+0x238>)
 8012f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f8e:	4a7c      	ldr	r2, [pc, #496]	; (8013180 <USART_Config+0x238>)
 8012f90:	f043 0320 	orr.w	r3, r3, #32
 8012f94:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	79db      	ldrb	r3, [r3, #7]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d023      	beq.n	8012ff6 <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	68da      	ldr	r2, [r3, #12]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012fbc:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	79db      	ldrb	r3, [r3, #7]
 8012fc2:	2b02      	cmp	r3, #2
 8012fc4:	d10b      	bne.n	8012fde <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	68da      	ldr	r2, [r3, #12]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012fd4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	719a      	strb	r2, [r3, #6]
 8012fdc:	e013      	b.n	8013006 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	68da      	ldr	r2, [r3, #12]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012fec:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	719a      	strb	r2, [r3, #6]
 8012ff4:	e007      	b.n	8013006 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	68da      	ldr	r2, [r3, #12]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013004:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	799b      	ldrb	r3, [r3, #6]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d108      	bne.n	8013020 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	68da      	ldr	r2, [r3, #12]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801301c:	60da      	str	r2, [r3, #12]
 801301e:	e007      	b.n	8013030 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	68da      	ldr	r2, [r3, #12]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801302e:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	7a1b      	ldrb	r3, [r3, #8]
 8013034:	2b03      	cmp	r3, #3
 8013036:	d82f      	bhi.n	8013098 <USART_Config+0x150>
 8013038:	a201      	add	r2, pc, #4	; (adr r2, 8013040 <USART_Config+0xf8>)
 801303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801303e:	bf00      	nop
 8013040:	08013051 	.word	0x08013051
 8013044:	08013063 	.word	0x08013063
 8013048:	08013075 	.word	0x08013075
 801304c:	08013087 	.word	0x08013087
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	691a      	ldr	r2, [r3, #16]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801305e:	611a      	str	r2, [r3, #16]
		break;
 8013060:	e01a      	b.n	8013098 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	691a      	ldr	r2, [r3, #16]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013070:	611a      	str	r2, [r3, #16]
		break;
 8013072:	e011      	b.n	8013098 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	691a      	ldr	r2, [r3, #16]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013082:	611a      	str	r2, [r3, #16]
		break;
 8013084:	e008      	b.n	8013098 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	691a      	ldr	r2, [r3, #16]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8013094:	611a      	str	r2, [r3, #16]
		break;
 8013096:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	795b      	ldrb	r3, [r3, #5]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d105      	bne.n	80130ac <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f240 6283 	movw	r2, #1667	; 0x683
 80130a8:	609a      	str	r2, [r3, #8]
 80130aa:	e01b      	b.n	80130e4 <USART_Config+0x19c>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	795b      	ldrb	r3, [r3, #5]
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d105      	bne.n	80130c0 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	f240 3241 	movw	r2, #833	; 0x341
 80130bc:	609a      	str	r2, [r3, #8]
 80130be:	e011      	b.n	80130e4 <USART_Config+0x19c>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	795b      	ldrb	r3, [r3, #5]
 80130c4:	2b02      	cmp	r3, #2
 80130c6:	d105      	bne.n	80130d4 <USART_Config+0x18c>
		// El valor a cargar es 45.5625 -> Mantiza =45, fraction = 0.5625
		// Mantiza = 8 = 0x2D, fraction = 16 * 0.5625 = 9
		// El valor a cargar es 0x2D9
		ptrUsartHandler->ptrUSARTx->BRR = 0x2D9;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	f240 22d9 	movw	r2, #729	; 0x2d9
 80130d0:	609a      	str	r2, [r3, #8]
 80130d2:	e007      	b.n	80130e4 <USART_Config+0x19c>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	795b      	ldrb	r3, [r3, #5]
 80130d8:	2b03      	cmp	r3, #3
 80130da:	d103      	bne.n	80130e4 <USART_Config+0x19c>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2211      	movs	r2, #17
 80130e2:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	791b      	ldrb	r3, [r3, #4]
 80130e8:	2b03      	cmp	r3, #3
 80130ea:	d84f      	bhi.n	801318c <USART_Config+0x244>
 80130ec:	a201      	add	r2, pc, #4	; (adr r2, 80130f4 <USART_Config+0x1ac>)
 80130ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130f2:	bf00      	nop
 80130f4:	08013105 	.word	0x08013105
 80130f8:	08013117 	.word	0x08013117
 80130fc:	08013129 	.word	0x08013129
 8013100:	0801314b 	.word	0x0801314b
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	68da      	ldr	r2, [r3, #12]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f042 0208 	orr.w	r2, r2, #8
 8013112:	60da      	str	r2, [r3, #12]
		break;
 8013114:	e053      	b.n	80131be <USART_Config+0x276>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	68da      	ldr	r2, [r3, #12]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f042 0204 	orr.w	r2, r2, #4
 8013124:	60da      	str	r2, [r3, #12]
		break;
 8013126:	e04a      	b.n	80131be <USART_Config+0x276>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	68da      	ldr	r2, [r3, #12]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f042 0208 	orr.w	r2, r2, #8
 8013136:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	68da      	ldr	r2, [r3, #12]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f042 0204 	orr.w	r2, r2, #4
 8013146:	60da      	str	r2, [r3, #12]
		break;
 8013148:	e039      	b.n	80131be <USART_Config+0x276>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	68da      	ldr	r2, [r3, #12]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f022 0208 	bic.w	r2, r2, #8
 8013158:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	68da      	ldr	r2, [r3, #12]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f022 0204 	bic.w	r2, r2, #4
 8013168:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	68da      	ldr	r2, [r3, #12]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013178:	60da      	str	r2, [r3, #12]
		break;
 801317a:	e020      	b.n	80131be <USART_Config+0x276>
 801317c:	40011000 	.word	0x40011000
 8013180:	40023800 	.word	0x40023800
 8013184:	40004400 	.word	0x40004400
 8013188:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	68da      	ldr	r2, [r3, #12]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f022 0208 	bic.w	r2, r2, #8
 801319a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	68da      	ldr	r2, [r3, #12]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	f022 0204 	bic.w	r2, r2, #4
 80131aa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68da      	ldr	r2, [r3, #12]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80131ba:	60da      	str	r2, [r3, #12]
		break;
 80131bc:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	791b      	ldrb	r3, [r3, #4]
 80131c2:	2b03      	cmp	r3, #3
 80131c4:	d007      	beq.n	80131d6 <USART_Config+0x28e>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	68da      	ldr	r2, [r3, #12]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80131d4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80131d6:	b672      	cpsid	i
}
 80131d8:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	68da      	ldr	r2, [r3, #12]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80131e8:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	7a5b      	ldrb	r3, [r3, #9]
 80131ee:	2b03      	cmp	r3, #3
 80131f0:	d022      	beq.n	8013238 <USART_Config+0x2f0>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4a20      	ldr	r2, [pc, #128]	; (8013278 <USART_Config+0x330>)
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d107      	bne.n	801320c <USART_Config+0x2c4>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80131fc:	2025      	movs	r0, #37	; 0x25
 80131fe:	f7ff fe37 	bl	8012e70 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART1_IRQn, 1);
 8013202:	2101      	movs	r1, #1
 8013204:	2025      	movs	r0, #37	; 0x25
 8013206:	f7ff fe75 	bl	8012ef4 <__NVIC_SetPriority>
 801320a:	e01e      	b.n	801324a <USART_Config+0x302>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4a1a      	ldr	r2, [pc, #104]	; (801327c <USART_Config+0x334>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d107      	bne.n	8013226 <USART_Config+0x2de>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8013216:	2026      	movs	r0, #38	; 0x26
 8013218:	f7ff fe2a 	bl	8012e70 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART2_IRQn, 2);
 801321c:	2102      	movs	r1, #2
 801321e:	2026      	movs	r0, #38	; 0x26
 8013220:	f7ff fe68 	bl	8012ef4 <__NVIC_SetPriority>
 8013224:	e011      	b.n	801324a <USART_Config+0x302>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4a15      	ldr	r2, [pc, #84]	; (8013280 <USART_Config+0x338>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d10c      	bne.n	801324a <USART_Config+0x302>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8013230:	2047      	movs	r0, #71	; 0x47
 8013232:	f7ff fe1d 	bl	8012e70 <__NVIC_EnableIRQ>
 8013236:	e008      	b.n	801324a <USART_Config+0x302>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 8013238:	2025      	movs	r0, #37	; 0x25
 801323a:	f7ff fe37 	bl	8012eac <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 801323e:	2026      	movs	r0, #38	; 0x26
 8013240:	f7ff fe34 	bl	8012eac <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 8013244:	2047      	movs	r0, #71	; 0x47
 8013246:	f7ff fe31 	bl	8012eac <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	7a5b      	ldrb	r3, [r3, #9]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d003      	beq.n	801325a <USART_Config+0x312>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	7a5b      	ldrb	r3, [r3, #9]
 8013256:	2b02      	cmp	r3, #2
 8013258:	d107      	bne.n	801326a <USART_Config+0x322>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	68da      	ldr	r2, [r3, #12]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	f042 0220 	orr.w	r2, r2, #32
 8013268:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801326a:	b662      	cpsie	i
}
 801326c:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 801326e:	bf00      	nop
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	40011000 	.word	0x40011000
 801327c:	40004400 	.word	0x40004400
 8013280:	40011400 	.word	0x40011400

08013284 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	460b      	mov	r3, r1
 801328e:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	7a5b      	ldrb	r3, [r3, #9]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d003      	beq.n	80132a0 <writeChar+0x1c>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	7a5b      	ldrb	r3, [r3, #9]
 801329c:	2b02      	cmp	r3, #2
 801329e:	d10c      	bne.n	80132ba <writeChar+0x36>
		auxDataToSend = dataToSend;
 80132a0:	4a0f      	ldr	r2, [pc, #60]	; (80132e0 <writeChar+0x5c>)
 80132a2:	78fb      	ldrb	r3, [r7, #3]
 80132a4:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	68da      	ldr	r2, [r3, #12]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80132b4:	60da      	str	r2, [r3, #12]
 80132b6:	e00c      	b.n	80132d2 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 80132b8:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d0f7      	beq.n	80132b8 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	78fa      	ldrb	r2, [r7, #3]
 80132ce:	605a      	str	r2, [r3, #4]
	}
}
 80132d0:	bf00      	nop
 80132d2:	bf00      	nop
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	200039e9 	.word	0x200039e9

080132e4 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80132ee:	e008      	b.n	8013302 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	4619      	mov	r1, r3
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f7ff ffc4 	bl	8013284 <writeChar>
		msgToSend++;
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	3301      	adds	r3, #1
 8013300:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d1f2      	bne.n	80132f0 <writeMsg+0xc>
	}
}
 801330a:	bf00      	nop
 801330c:	bf00      	nop
 801330e:	3708      	adds	r7, #8
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8013314:	b480      	push	{r7}
 8013316:	af00      	add	r7, sp, #0
	return auxRxData;
 8013318:	4b03      	ldr	r3, [pc, #12]	; (8013328 <getRxData+0x14>)
 801331a:	781b      	ldrb	r3, [r3, #0]
}
 801331c:	4618      	mov	r0, r3
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr
 8013326:	bf00      	nop
 8013328:	200039e8 	.word	0x200039e8

0801332c <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 801332c:	b480      	push	{r7}
 801332e:	af00      	add	r7, sp, #0
	 __NOP();
 8013330:	bf00      	nop
}
 8013332:	bf00      	nop
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <Usart2_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
 801333c:	b480      	push	{r7}
 801333e:	af00      	add	r7, sp, #0
	 __NOP();
 8013340:	bf00      	nop
}
 8013342:	bf00      	nop
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr

0801334c <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 801334c:	b480      	push	{r7}
 801334e:	af00      	add	r7, sp, #0
	 __NOP();
 8013350:	bf00      	nop
}
 8013352:	bf00      	nop
 8013354:	46bd      	mov	sp, r7
 8013356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335a:	4770      	bx	lr

0801335c <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 801335c:	b480      	push	{r7}
 801335e:	af00      	add	r7, sp, #0
	 __NOP();
 8013360:	bf00      	nop
}
 8013362:	bf00      	nop
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr

0801336c <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 801336c:	b480      	push	{r7}
 801336e:	af00      	add	r7, sp, #0
	 __NOP();
 8013370:	bf00      	nop
}
 8013372:	bf00      	nop
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr

0801337c <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 801337c:	b580      	push	{r7, lr}
 801337e:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8013380:	4b10      	ldr	r3, [pc, #64]	; (80133c4 <USART1_IRQHandler+0x48>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	f003 0320 	and.w	r3, r3, #32
 8013388:	2b00      	cmp	r3, #0
 801338a:	d007      	beq.n	801339c <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 801338c:	4b0d      	ldr	r3, [pc, #52]	; (80133c4 <USART1_IRQHandler+0x48>)
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	b2da      	uxtb	r2, r3
 8013392:	4b0d      	ldr	r3, [pc, #52]	; (80133c8 <USART1_IRQHandler+0x4c>)
 8013394:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 8013396:	f7ff ffe1 	bl	801335c <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 801339a:	e011      	b.n	80133c0 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 801339c:	4b09      	ldr	r3, [pc, #36]	; (80133c4 <USART1_IRQHandler+0x48>)
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d00b      	beq.n	80133c0 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 80133a8:	4b08      	ldr	r3, [pc, #32]	; (80133cc <USART1_IRQHandler+0x50>)
 80133aa:	781a      	ldrb	r2, [r3, #0]
 80133ac:	4b05      	ldr	r3, [pc, #20]	; (80133c4 <USART1_IRQHandler+0x48>)
 80133ae:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 80133b0:	4b04      	ldr	r3, [pc, #16]	; (80133c4 <USART1_IRQHandler+0x48>)
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	4a03      	ldr	r2, [pc, #12]	; (80133c4 <USART1_IRQHandler+0x48>)
 80133b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80133ba:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 80133bc:	f7ff ffb6 	bl	801332c <Usart1_TX_Callback>
}
 80133c0:	bf00      	nop
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	40011000 	.word	0x40011000
 80133c8:	200039e8 	.word	0x200039e8
 80133cc:	200039e9 	.word	0x200039e9

080133d0 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 80133d0:	b580      	push	{r7, lr}
 80133d2:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 80133d4:	4b10      	ldr	r3, [pc, #64]	; (8013418 <USART2_IRQHandler+0x48>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f003 0320 	and.w	r3, r3, #32
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d007      	beq.n	80133f0 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 80133e0:	4b0d      	ldr	r3, [pc, #52]	; (8013418 <USART2_IRQHandler+0x48>)
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	b2da      	uxtb	r2, r3
 80133e6:	4b0d      	ldr	r3, [pc, #52]	; (801341c <USART2_IRQHandler+0x4c>)
 80133e8:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 80133ea:	f7ee fcd7 	bl	8001d9c <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 80133ee:	e011      	b.n	8013414 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 80133f0:	4b09      	ldr	r3, [pc, #36]	; (8013418 <USART2_IRQHandler+0x48>)
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d00b      	beq.n	8013414 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80133fc:	4b08      	ldr	r3, [pc, #32]	; (8013420 <USART2_IRQHandler+0x50>)
 80133fe:	781a      	ldrb	r2, [r3, #0]
 8013400:	4b05      	ldr	r3, [pc, #20]	; (8013418 <USART2_IRQHandler+0x48>)
 8013402:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 8013404:	4b04      	ldr	r3, [pc, #16]	; (8013418 <USART2_IRQHandler+0x48>)
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	4a03      	ldr	r2, [pc, #12]	; (8013418 <USART2_IRQHandler+0x48>)
 801340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801340e:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 8013410:	f7ff ff94 	bl	801333c <Usart2_TX_Callback>
}
 8013414:	bf00      	nop
 8013416:	bd80      	pop	{r7, pc}
 8013418:	40004400 	.word	0x40004400
 801341c:	200039e8 	.word	0x200039e8
 8013420:	200039e9 	.word	0x200039e9

08013424 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 8013424:	b580      	push	{r7, lr}
 8013426:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 8013428:	4b10      	ldr	r3, [pc, #64]	; (801346c <USART6_IRQHandler+0x48>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	f003 0320 	and.w	r3, r3, #32
 8013430:	2b00      	cmp	r3, #0
 8013432:	d007      	beq.n	8013444 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 8013434:	4b0d      	ldr	r3, [pc, #52]	; (801346c <USART6_IRQHandler+0x48>)
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	b2da      	uxtb	r2, r3
 801343a:	4b0d      	ldr	r3, [pc, #52]	; (8013470 <USART6_IRQHandler+0x4c>)
 801343c:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 801343e:	f7ff ff95 	bl	801336c <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 8013442:	e011      	b.n	8013468 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 8013444:	4b09      	ldr	r3, [pc, #36]	; (801346c <USART6_IRQHandler+0x48>)
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801344c:	2b00      	cmp	r3, #0
 801344e:	d00b      	beq.n	8013468 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8013450:	4b08      	ldr	r3, [pc, #32]	; (8013474 <USART6_IRQHandler+0x50>)
 8013452:	781a      	ldrb	r2, [r3, #0]
 8013454:	4b05      	ldr	r3, [pc, #20]	; (801346c <USART6_IRQHandler+0x48>)
 8013456:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8013458:	4b04      	ldr	r3, [pc, #16]	; (801346c <USART6_IRQHandler+0x48>)
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	4a03      	ldr	r2, [pc, #12]	; (801346c <USART6_IRQHandler+0x48>)
 801345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013462:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8013464:	f7ff ff72 	bl	801334c <Usart6_TX_Callback>
}
 8013468:	bf00      	nop
 801346a:	bd80      	pop	{r7, pc}
 801346c:	40011400 	.word	0x40011400
 8013470:	200039e8 	.word	0x200039e8
 8013474:	200039e9 	.word	0x200039e9

08013478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801347c:	4b0e      	ldr	r3, [pc, #56]	; (80134b8 <HAL_Init+0x40>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	4a0d      	ldr	r2, [pc, #52]	; (80134b8 <HAL_Init+0x40>)
 8013482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8013488:	4b0b      	ldr	r3, [pc, #44]	; (80134b8 <HAL_Init+0x40>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4a0a      	ldr	r2, [pc, #40]	; (80134b8 <HAL_Init+0x40>)
 801348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013494:	4b08      	ldr	r3, [pc, #32]	; (80134b8 <HAL_Init+0x40>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a07      	ldr	r2, [pc, #28]	; (80134b8 <HAL_Init+0x40>)
 801349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801349e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80134a0:	2003      	movs	r0, #3
 80134a2:	f000 f94f 	bl	8013744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80134a6:	2000      	movs	r0, #0
 80134a8:	f000 f808 	bl	80134bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80134ac:	f7ee fe94 	bl	80021d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80134b0:	2300      	movs	r3, #0
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	40023c00 	.word	0x40023c00

080134bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80134c4:	4b12      	ldr	r3, [pc, #72]	; (8013510 <HAL_InitTick+0x54>)
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	4b12      	ldr	r3, [pc, #72]	; (8013514 <HAL_InitTick+0x58>)
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	4619      	mov	r1, r3
 80134ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80134d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80134d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80134da:	4618      	mov	r0, r3
 80134dc:	f000 f967 	bl	80137ae <HAL_SYSTICK_Config>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d001      	beq.n	80134ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80134e6:	2301      	movs	r3, #1
 80134e8:	e00e      	b.n	8013508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b0f      	cmp	r3, #15
 80134ee:	d80a      	bhi.n	8013506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80134f0:	2200      	movs	r2, #0
 80134f2:	6879      	ldr	r1, [r7, #4]
 80134f4:	f04f 30ff 	mov.w	r0, #4294967295
 80134f8:	f000 f92f 	bl	801375a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80134fc:	4a06      	ldr	r2, [pc, #24]	; (8013518 <HAL_InitTick+0x5c>)
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013502:	2300      	movs	r3, #0
 8013504:	e000      	b.n	8013508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8013506:	2301      	movs	r3, #1
}
 8013508:	4618      	mov	r0, r3
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	20000004 	.word	0x20000004
 8013514:	20000038 	.word	0x20000038
 8013518:	20000034 	.word	0x20000034

0801351c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801351c:	b480      	push	{r7}
 801351e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013520:	4b06      	ldr	r3, [pc, #24]	; (801353c <HAL_IncTick+0x20>)
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	461a      	mov	r2, r3
 8013526:	4b06      	ldr	r3, [pc, #24]	; (8013540 <HAL_IncTick+0x24>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	4413      	add	r3, r2
 801352c:	4a04      	ldr	r2, [pc, #16]	; (8013540 <HAL_IncTick+0x24>)
 801352e:	6013      	str	r3, [r2, #0]
}
 8013530:	bf00      	nop
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	20000038 	.word	0x20000038
 8013540:	200039ec 	.word	0x200039ec

08013544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013544:	b480      	push	{r7}
 8013546:	af00      	add	r7, sp, #0
  return uwTick;
 8013548:	4b03      	ldr	r3, [pc, #12]	; (8013558 <HAL_GetTick+0x14>)
 801354a:	681b      	ldr	r3, [r3, #0]
}
 801354c:	4618      	mov	r0, r3
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop
 8013558:	200039ec 	.word	0x200039ec

0801355c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013564:	f7ff ffee 	bl	8013544 <HAL_GetTick>
 8013568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013574:	d005      	beq.n	8013582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013576:	4b0a      	ldr	r3, [pc, #40]	; (80135a0 <HAL_Delay+0x44>)
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	461a      	mov	r2, r3
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	4413      	add	r3, r2
 8013580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013582:	bf00      	nop
 8013584:	f7ff ffde 	bl	8013544 <HAL_GetTick>
 8013588:	4602      	mov	r2, r0
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	68fa      	ldr	r2, [r7, #12]
 8013590:	429a      	cmp	r2, r3
 8013592:	d8f7      	bhi.n	8013584 <HAL_Delay+0x28>
  {
  }
}
 8013594:	bf00      	nop
 8013596:	bf00      	nop
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	20000038 	.word	0x20000038

080135a4 <__NVIC_SetPriorityGrouping>:
{
 80135a4:	b480      	push	{r7}
 80135a6:	b085      	sub	sp, #20
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f003 0307 	and.w	r3, r3, #7
 80135b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80135b4:	4b0c      	ldr	r3, [pc, #48]	; (80135e8 <__NVIC_SetPriorityGrouping+0x44>)
 80135b6:	68db      	ldr	r3, [r3, #12]
 80135b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80135c0:	4013      	ands	r3, r2
 80135c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80135cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80135d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80135d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80135d6:	4a04      	ldr	r2, [pc, #16]	; (80135e8 <__NVIC_SetPriorityGrouping+0x44>)
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	60d3      	str	r3, [r2, #12]
}
 80135dc:	bf00      	nop
 80135de:	3714      	adds	r7, #20
 80135e0:	46bd      	mov	sp, r7
 80135e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e6:	4770      	bx	lr
 80135e8:	e000ed00 	.word	0xe000ed00

080135ec <__NVIC_GetPriorityGrouping>:
{
 80135ec:	b480      	push	{r7}
 80135ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80135f0:	4b04      	ldr	r3, [pc, #16]	; (8013604 <__NVIC_GetPriorityGrouping+0x18>)
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	0a1b      	lsrs	r3, r3, #8
 80135f6:	f003 0307 	and.w	r3, r3, #7
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	e000ed00 	.word	0xe000ed00

08013608 <__NVIC_EnableIRQ>:
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	4603      	mov	r3, r0
 8013610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013616:	2b00      	cmp	r3, #0
 8013618:	db0b      	blt.n	8013632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801361a:	79fb      	ldrb	r3, [r7, #7]
 801361c:	f003 021f 	and.w	r2, r3, #31
 8013620:	4907      	ldr	r1, [pc, #28]	; (8013640 <__NVIC_EnableIRQ+0x38>)
 8013622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013626:	095b      	lsrs	r3, r3, #5
 8013628:	2001      	movs	r0, #1
 801362a:	fa00 f202 	lsl.w	r2, r0, r2
 801362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013632:	bf00      	nop
 8013634:	370c      	adds	r7, #12
 8013636:	46bd      	mov	sp, r7
 8013638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop
 8013640:	e000e100 	.word	0xe000e100

08013644 <__NVIC_SetPriority>:
{
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	4603      	mov	r3, r0
 801364c:	6039      	str	r1, [r7, #0]
 801364e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013654:	2b00      	cmp	r3, #0
 8013656:	db0a      	blt.n	801366e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	b2da      	uxtb	r2, r3
 801365c:	490c      	ldr	r1, [pc, #48]	; (8013690 <__NVIC_SetPriority+0x4c>)
 801365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013662:	0112      	lsls	r2, r2, #4
 8013664:	b2d2      	uxtb	r2, r2
 8013666:	440b      	add	r3, r1
 8013668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801366c:	e00a      	b.n	8013684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	b2da      	uxtb	r2, r3
 8013672:	4908      	ldr	r1, [pc, #32]	; (8013694 <__NVIC_SetPriority+0x50>)
 8013674:	79fb      	ldrb	r3, [r7, #7]
 8013676:	f003 030f 	and.w	r3, r3, #15
 801367a:	3b04      	subs	r3, #4
 801367c:	0112      	lsls	r2, r2, #4
 801367e:	b2d2      	uxtb	r2, r2
 8013680:	440b      	add	r3, r1
 8013682:	761a      	strb	r2, [r3, #24]
}
 8013684:	bf00      	nop
 8013686:	370c      	adds	r7, #12
 8013688:	46bd      	mov	sp, r7
 801368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368e:	4770      	bx	lr
 8013690:	e000e100 	.word	0xe000e100
 8013694:	e000ed00 	.word	0xe000ed00

08013698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013698:	b480      	push	{r7}
 801369a:	b089      	sub	sp, #36	; 0x24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f003 0307 	and.w	r3, r3, #7
 80136aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	f1c3 0307 	rsb	r3, r3, #7
 80136b2:	2b04      	cmp	r3, #4
 80136b4:	bf28      	it	cs
 80136b6:	2304      	movcs	r3, #4
 80136b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	3304      	adds	r3, #4
 80136be:	2b06      	cmp	r3, #6
 80136c0:	d902      	bls.n	80136c8 <NVIC_EncodePriority+0x30>
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	3b03      	subs	r3, #3
 80136c6:	e000      	b.n	80136ca <NVIC_EncodePriority+0x32>
 80136c8:	2300      	movs	r3, #0
 80136ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80136cc:	f04f 32ff 	mov.w	r2, #4294967295
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	fa02 f303 	lsl.w	r3, r2, r3
 80136d6:	43da      	mvns	r2, r3
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	401a      	ands	r2, r3
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80136e0:	f04f 31ff 	mov.w	r1, #4294967295
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	fa01 f303 	lsl.w	r3, r1, r3
 80136ea:	43d9      	mvns	r1, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80136f0:	4313      	orrs	r3, r2
         );
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3724      	adds	r7, #36	; 0x24
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr
	...

08013700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	3b01      	subs	r3, #1
 801370c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013710:	d301      	bcc.n	8013716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013712:	2301      	movs	r3, #1
 8013714:	e00f      	b.n	8013736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013716:	4a0a      	ldr	r2, [pc, #40]	; (8013740 <SysTick_Config+0x40>)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	3b01      	subs	r3, #1
 801371c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801371e:	210f      	movs	r1, #15
 8013720:	f04f 30ff 	mov.w	r0, #4294967295
 8013724:	f7ff ff8e 	bl	8013644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013728:	4b05      	ldr	r3, [pc, #20]	; (8013740 <SysTick_Config+0x40>)
 801372a:	2200      	movs	r2, #0
 801372c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801372e:	4b04      	ldr	r3, [pc, #16]	; (8013740 <SysTick_Config+0x40>)
 8013730:	2207      	movs	r2, #7
 8013732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013734:	2300      	movs	r3, #0
}
 8013736:	4618      	mov	r0, r3
 8013738:	3708      	adds	r7, #8
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	e000e010 	.word	0xe000e010

08013744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7ff ff29 	bl	80135a4 <__NVIC_SetPriorityGrouping>
}
 8013752:	bf00      	nop
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801375a:	b580      	push	{r7, lr}
 801375c:	b086      	sub	sp, #24
 801375e:	af00      	add	r7, sp, #0
 8013760:	4603      	mov	r3, r0
 8013762:	60b9      	str	r1, [r7, #8]
 8013764:	607a      	str	r2, [r7, #4]
 8013766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8013768:	2300      	movs	r3, #0
 801376a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801376c:	f7ff ff3e 	bl	80135ec <__NVIC_GetPriorityGrouping>
 8013770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	68b9      	ldr	r1, [r7, #8]
 8013776:	6978      	ldr	r0, [r7, #20]
 8013778:	f7ff ff8e 	bl	8013698 <NVIC_EncodePriority>
 801377c:	4602      	mov	r2, r0
 801377e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013782:	4611      	mov	r1, r2
 8013784:	4618      	mov	r0, r3
 8013786:	f7ff ff5d 	bl	8013644 <__NVIC_SetPriority>
}
 801378a:	bf00      	nop
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b082      	sub	sp, #8
 8013796:	af00      	add	r7, sp, #0
 8013798:	4603      	mov	r3, r0
 801379a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7ff ff31 	bl	8013608 <__NVIC_EnableIRQ>
}
 80137a6:	bf00      	nop
 80137a8:	3708      	adds	r7, #8
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}

080137ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80137ae:	b580      	push	{r7, lr}
 80137b0:	b082      	sub	sp, #8
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7ff ffa2 	bl	8013700 <SysTick_Config>
 80137bc:	4603      	mov	r3, r0
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3708      	adds	r7, #8
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
	...

080137c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b04      	cmp	r3, #4
 80137d4:	d106      	bne.n	80137e4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80137d6:	4b09      	ldr	r3, [pc, #36]	; (80137fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4a08      	ldr	r2, [pc, #32]	; (80137fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80137dc:	f043 0304 	orr.w	r3, r3, #4
 80137e0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80137e2:	e005      	b.n	80137f0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80137e4:	4b05      	ldr	r3, [pc, #20]	; (80137fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4a04      	ldr	r2, [pc, #16]	; (80137fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80137ea:	f023 0304 	bic.w	r3, r3, #4
 80137ee:	6013      	str	r3, [r2, #0]
}
 80137f0:	bf00      	nop
 80137f2:	370c      	adds	r7, #12
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr
 80137fc:	e000e010 	.word	0xe000e010

08013800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013800:	b480      	push	{r7}
 8013802:	b089      	sub	sp, #36	; 0x24
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801380a:	2300      	movs	r3, #0
 801380c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801380e:	2300      	movs	r3, #0
 8013810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013812:	2300      	movs	r3, #0
 8013814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013816:	2300      	movs	r3, #0
 8013818:	61fb      	str	r3, [r7, #28]
 801381a:	e159      	b.n	8013ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801381c:	2201      	movs	r2, #1
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	fa02 f303 	lsl.w	r3, r2, r3
 8013824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	697a      	ldr	r2, [r7, #20]
 801382c:	4013      	ands	r3, r2
 801382e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013830:	693a      	ldr	r2, [r7, #16]
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	429a      	cmp	r2, r3
 8013836:	f040 8148 	bne.w	8013aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	f003 0303 	and.w	r3, r3, #3
 8013842:	2b01      	cmp	r3, #1
 8013844:	d005      	beq.n	8013852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801384e:	2b02      	cmp	r3, #2
 8013850:	d130      	bne.n	80138b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	2203      	movs	r2, #3
 801385e:	fa02 f303 	lsl.w	r3, r2, r3
 8013862:	43db      	mvns	r3, r3
 8013864:	69ba      	ldr	r2, [r7, #24]
 8013866:	4013      	ands	r3, r2
 8013868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	68da      	ldr	r2, [r3, #12]
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	005b      	lsls	r3, r3, #1
 8013872:	fa02 f303 	lsl.w	r3, r2, r3
 8013876:	69ba      	ldr	r2, [r7, #24]
 8013878:	4313      	orrs	r3, r2
 801387a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	69ba      	ldr	r2, [r7, #24]
 8013880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013888:	2201      	movs	r2, #1
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	fa02 f303 	lsl.w	r3, r2, r3
 8013890:	43db      	mvns	r3, r3
 8013892:	69ba      	ldr	r2, [r7, #24]
 8013894:	4013      	ands	r3, r2
 8013896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	091b      	lsrs	r3, r3, #4
 801389e:	f003 0201 	and.w	r2, r3, #1
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	fa02 f303 	lsl.w	r3, r2, r3
 80138a8:	69ba      	ldr	r2, [r7, #24]
 80138aa:	4313      	orrs	r3, r2
 80138ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	69ba      	ldr	r2, [r7, #24]
 80138b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	f003 0303 	and.w	r3, r3, #3
 80138bc:	2b03      	cmp	r3, #3
 80138be:	d017      	beq.n	80138f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	005b      	lsls	r3, r3, #1
 80138ca:	2203      	movs	r2, #3
 80138cc:	fa02 f303 	lsl.w	r3, r2, r3
 80138d0:	43db      	mvns	r3, r3
 80138d2:	69ba      	ldr	r2, [r7, #24]
 80138d4:	4013      	ands	r3, r2
 80138d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	689a      	ldr	r2, [r3, #8]
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	005b      	lsls	r3, r3, #1
 80138e0:	fa02 f303 	lsl.w	r3, r2, r3
 80138e4:	69ba      	ldr	r2, [r7, #24]
 80138e6:	4313      	orrs	r3, r2
 80138e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	69ba      	ldr	r2, [r7, #24]
 80138ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	f003 0303 	and.w	r3, r3, #3
 80138f8:	2b02      	cmp	r3, #2
 80138fa:	d123      	bne.n	8013944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	08da      	lsrs	r2, r3, #3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	3208      	adds	r2, #8
 8013904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801390a:	69fb      	ldr	r3, [r7, #28]
 801390c:	f003 0307 	and.w	r3, r3, #7
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	220f      	movs	r2, #15
 8013914:	fa02 f303 	lsl.w	r3, r2, r3
 8013918:	43db      	mvns	r3, r3
 801391a:	69ba      	ldr	r2, [r7, #24]
 801391c:	4013      	ands	r3, r2
 801391e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	691a      	ldr	r2, [r3, #16]
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	f003 0307 	and.w	r3, r3, #7
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	fa02 f303 	lsl.w	r3, r2, r3
 8013930:	69ba      	ldr	r2, [r7, #24]
 8013932:	4313      	orrs	r3, r2
 8013934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	08da      	lsrs	r2, r3, #3
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	3208      	adds	r2, #8
 801393e:	69b9      	ldr	r1, [r7, #24]
 8013940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	005b      	lsls	r3, r3, #1
 801394e:	2203      	movs	r2, #3
 8013950:	fa02 f303 	lsl.w	r3, r2, r3
 8013954:	43db      	mvns	r3, r3
 8013956:	69ba      	ldr	r2, [r7, #24]
 8013958:	4013      	ands	r3, r2
 801395a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	f003 0203 	and.w	r2, r3, #3
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	005b      	lsls	r3, r3, #1
 8013968:	fa02 f303 	lsl.w	r3, r2, r3
 801396c:	69ba      	ldr	r2, [r7, #24]
 801396e:	4313      	orrs	r3, r2
 8013970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	69ba      	ldr	r2, [r7, #24]
 8013976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013980:	2b00      	cmp	r3, #0
 8013982:	f000 80a2 	beq.w	8013aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013986:	2300      	movs	r3, #0
 8013988:	60fb      	str	r3, [r7, #12]
 801398a:	4b57      	ldr	r3, [pc, #348]	; (8013ae8 <HAL_GPIO_Init+0x2e8>)
 801398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801398e:	4a56      	ldr	r2, [pc, #344]	; (8013ae8 <HAL_GPIO_Init+0x2e8>)
 8013990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013994:	6453      	str	r3, [r2, #68]	; 0x44
 8013996:	4b54      	ldr	r3, [pc, #336]	; (8013ae8 <HAL_GPIO_Init+0x2e8>)
 8013998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801399e:	60fb      	str	r3, [r7, #12]
 80139a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80139a2:	4a52      	ldr	r2, [pc, #328]	; (8013aec <HAL_GPIO_Init+0x2ec>)
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	089b      	lsrs	r3, r3, #2
 80139a8:	3302      	adds	r3, #2
 80139aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	f003 0303 	and.w	r3, r3, #3
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	220f      	movs	r2, #15
 80139ba:	fa02 f303 	lsl.w	r3, r2, r3
 80139be:	43db      	mvns	r3, r3
 80139c0:	69ba      	ldr	r2, [r7, #24]
 80139c2:	4013      	ands	r3, r2
 80139c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4a49      	ldr	r2, [pc, #292]	; (8013af0 <HAL_GPIO_Init+0x2f0>)
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d019      	beq.n	8013a02 <HAL_GPIO_Init+0x202>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4a48      	ldr	r2, [pc, #288]	; (8013af4 <HAL_GPIO_Init+0x2f4>)
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d013      	beq.n	80139fe <HAL_GPIO_Init+0x1fe>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4a47      	ldr	r2, [pc, #284]	; (8013af8 <HAL_GPIO_Init+0x2f8>)
 80139da:	4293      	cmp	r3, r2
 80139dc:	d00d      	beq.n	80139fa <HAL_GPIO_Init+0x1fa>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	4a46      	ldr	r2, [pc, #280]	; (8013afc <HAL_GPIO_Init+0x2fc>)
 80139e2:	4293      	cmp	r3, r2
 80139e4:	d007      	beq.n	80139f6 <HAL_GPIO_Init+0x1f6>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	4a45      	ldr	r2, [pc, #276]	; (8013b00 <HAL_GPIO_Init+0x300>)
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d101      	bne.n	80139f2 <HAL_GPIO_Init+0x1f2>
 80139ee:	2304      	movs	r3, #4
 80139f0:	e008      	b.n	8013a04 <HAL_GPIO_Init+0x204>
 80139f2:	2307      	movs	r3, #7
 80139f4:	e006      	b.n	8013a04 <HAL_GPIO_Init+0x204>
 80139f6:	2303      	movs	r3, #3
 80139f8:	e004      	b.n	8013a04 <HAL_GPIO_Init+0x204>
 80139fa:	2302      	movs	r3, #2
 80139fc:	e002      	b.n	8013a04 <HAL_GPIO_Init+0x204>
 80139fe:	2301      	movs	r3, #1
 8013a00:	e000      	b.n	8013a04 <HAL_GPIO_Init+0x204>
 8013a02:	2300      	movs	r3, #0
 8013a04:	69fa      	ldr	r2, [r7, #28]
 8013a06:	f002 0203 	and.w	r2, r2, #3
 8013a0a:	0092      	lsls	r2, r2, #2
 8013a0c:	4093      	lsls	r3, r2
 8013a0e:	69ba      	ldr	r2, [r7, #24]
 8013a10:	4313      	orrs	r3, r2
 8013a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013a14:	4935      	ldr	r1, [pc, #212]	; (8013aec <HAL_GPIO_Init+0x2ec>)
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	089b      	lsrs	r3, r3, #2
 8013a1a:	3302      	adds	r3, #2
 8013a1c:	69ba      	ldr	r2, [r7, #24]
 8013a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013a22:	4b38      	ldr	r3, [pc, #224]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013a24:	689b      	ldr	r3, [r3, #8]
 8013a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	43db      	mvns	r3, r3
 8013a2c:	69ba      	ldr	r2, [r7, #24]
 8013a2e:	4013      	ands	r3, r2
 8013a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	685b      	ldr	r3, [r3, #4]
 8013a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d003      	beq.n	8013a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8013a3e:	69ba      	ldr	r2, [r7, #24]
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	4313      	orrs	r3, r2
 8013a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013a46:	4a2f      	ldr	r2, [pc, #188]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013a4c:	4b2d      	ldr	r3, [pc, #180]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013a4e:	68db      	ldr	r3, [r3, #12]
 8013a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	43db      	mvns	r3, r3
 8013a56:	69ba      	ldr	r2, [r7, #24]
 8013a58:	4013      	ands	r3, r2
 8013a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d003      	beq.n	8013a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8013a68:	69ba      	ldr	r2, [r7, #24]
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	4313      	orrs	r3, r2
 8013a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013a70:	4a24      	ldr	r2, [pc, #144]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8013a76:	4b23      	ldr	r3, [pc, #140]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	43db      	mvns	r3, r3
 8013a80:	69ba      	ldr	r2, [r7, #24]
 8013a82:	4013      	ands	r3, r2
 8013a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d003      	beq.n	8013a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8013a92:	69ba      	ldr	r2, [r7, #24]
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	4313      	orrs	r3, r2
 8013a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013a9a:	4a1a      	ldr	r2, [pc, #104]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013aa0:	4b18      	ldr	r3, [pc, #96]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	43db      	mvns	r3, r3
 8013aaa:	69ba      	ldr	r2, [r7, #24]
 8013aac:	4013      	ands	r3, r2
 8013aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d003      	beq.n	8013ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8013abc:	69ba      	ldr	r2, [r7, #24]
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	4313      	orrs	r3, r2
 8013ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013ac4:	4a0f      	ldr	r2, [pc, #60]	; (8013b04 <HAL_GPIO_Init+0x304>)
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	3301      	adds	r3, #1
 8013ace:	61fb      	str	r3, [r7, #28]
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	2b0f      	cmp	r3, #15
 8013ad4:	f67f aea2 	bls.w	801381c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013ad8:	bf00      	nop
 8013ada:	bf00      	nop
 8013adc:	3724      	adds	r7, #36	; 0x24
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop
 8013ae8:	40023800 	.word	0x40023800
 8013aec:	40013800 	.word	0x40013800
 8013af0:	40020000 	.word	0x40020000
 8013af4:	40020400 	.word	0x40020400
 8013af8:	40020800 	.word	0x40020800
 8013afc:	40020c00 	.word	0x40020c00
 8013b00:	40021000 	.word	0x40021000
 8013b04:	40013c00 	.word	0x40013c00

08013b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b085      	sub	sp, #20
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	460b      	mov	r3, r1
 8013b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	691a      	ldr	r2, [r3, #16]
 8013b18:	887b      	ldrh	r3, [r7, #2]
 8013b1a:	4013      	ands	r3, r2
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013b20:	2301      	movs	r3, #1
 8013b22:	73fb      	strb	r3, [r7, #15]
 8013b24:	e001      	b.n	8013b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013b26:	2300      	movs	r3, #0
 8013b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3714      	adds	r7, #20
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013b38:	b480      	push	{r7}
 8013b3a:	b083      	sub	sp, #12
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	460b      	mov	r3, r1
 8013b42:	807b      	strh	r3, [r7, #2]
 8013b44:	4613      	mov	r3, r2
 8013b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013b48:	787b      	ldrb	r3, [r7, #1]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d003      	beq.n	8013b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013b4e:	887a      	ldrh	r2, [r7, #2]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013b54:	e003      	b.n	8013b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013b56:	887b      	ldrh	r3, [r7, #2]
 8013b58:	041a      	lsls	r2, r3, #16
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	619a      	str	r2, [r3, #24]
}
 8013b5e:	bf00      	nop
 8013b60:	370c      	adds	r7, #12
 8013b62:	46bd      	mov	sp, r7
 8013b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b68:	4770      	bx	lr
	...

08013b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	4603      	mov	r3, r0
 8013b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8013b76:	4b08      	ldr	r3, [pc, #32]	; (8013b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013b78:	695a      	ldr	r2, [r3, #20]
 8013b7a:	88fb      	ldrh	r3, [r7, #6]
 8013b7c:	4013      	ands	r3, r2
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d006      	beq.n	8013b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013b82:	4a05      	ldr	r2, [pc, #20]	; (8013b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013b84:	88fb      	ldrh	r3, [r7, #6]
 8013b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013b88:	88fb      	ldrh	r3, [r7, #6]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7ed faae 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	40013c00 	.word	0x40013c00

08013b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d101      	bne.n	8013bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013baa:	2301      	movs	r3, #1
 8013bac:	e12b      	b.n	8013e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d106      	bne.n	8013bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f7ee fb5a 	bl	800227c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2224      	movs	r2, #36	; 0x24
 8013bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f022 0201 	bic.w	r2, r2, #1
 8013bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8013c00:	f001 fbd2 	bl	80153a8 <HAL_RCC_GetPCLK1Freq>
 8013c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	4a81      	ldr	r2, [pc, #516]	; (8013e10 <HAL_I2C_Init+0x274>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d807      	bhi.n	8013c20 <HAL_I2C_Init+0x84>
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	4a80      	ldr	r2, [pc, #512]	; (8013e14 <HAL_I2C_Init+0x278>)
 8013c14:	4293      	cmp	r3, r2
 8013c16:	bf94      	ite	ls
 8013c18:	2301      	movls	r3, #1
 8013c1a:	2300      	movhi	r3, #0
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	e006      	b.n	8013c2e <HAL_I2C_Init+0x92>
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	4a7d      	ldr	r2, [pc, #500]	; (8013e18 <HAL_I2C_Init+0x27c>)
 8013c24:	4293      	cmp	r3, r2
 8013c26:	bf94      	ite	ls
 8013c28:	2301      	movls	r3, #1
 8013c2a:	2300      	movhi	r3, #0
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d001      	beq.n	8013c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8013c32:	2301      	movs	r3, #1
 8013c34:	e0e7      	b.n	8013e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	4a78      	ldr	r2, [pc, #480]	; (8013e1c <HAL_I2C_Init+0x280>)
 8013c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8013c3e:	0c9b      	lsrs	r3, r3, #18
 8013c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	68ba      	ldr	r2, [r7, #8]
 8013c52:	430a      	orrs	r2, r1
 8013c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	6a1b      	ldr	r3, [r3, #32]
 8013c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	4a6a      	ldr	r2, [pc, #424]	; (8013e10 <HAL_I2C_Init+0x274>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d802      	bhi.n	8013c70 <HAL_I2C_Init+0xd4>
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	e009      	b.n	8013c84 <HAL_I2C_Init+0xe8>
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013c76:	fb02 f303 	mul.w	r3, r2, r3
 8013c7a:	4a69      	ldr	r2, [pc, #420]	; (8013e20 <HAL_I2C_Init+0x284>)
 8013c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8013c80:	099b      	lsrs	r3, r3, #6
 8013c82:	3301      	adds	r3, #1
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	6812      	ldr	r2, [r2, #0]
 8013c88:	430b      	orrs	r3, r1
 8013c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	69db      	ldr	r3, [r3, #28]
 8013c92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8013c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	495c      	ldr	r1, [pc, #368]	; (8013e10 <HAL_I2C_Init+0x274>)
 8013ca0:	428b      	cmp	r3, r1
 8013ca2:	d819      	bhi.n	8013cd8 <HAL_I2C_Init+0x13c>
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	1e59      	subs	r1, r3, #1
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8013cb2:	1c59      	adds	r1, r3, #1
 8013cb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013cb8:	400b      	ands	r3, r1
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00a      	beq.n	8013cd4 <HAL_I2C_Init+0x138>
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	1e59      	subs	r1, r3, #1
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	005b      	lsls	r3, r3, #1
 8013cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8013ccc:	3301      	adds	r3, #1
 8013cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013cd2:	e051      	b.n	8013d78 <HAL_I2C_Init+0x1dc>
 8013cd4:	2304      	movs	r3, #4
 8013cd6:	e04f      	b.n	8013d78 <HAL_I2C_Init+0x1dc>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	689b      	ldr	r3, [r3, #8]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d111      	bne.n	8013d04 <HAL_I2C_Init+0x168>
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	1e58      	subs	r0, r3, #1
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	6859      	ldr	r1, [r3, #4]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	005b      	lsls	r3, r3, #1
 8013cec:	440b      	add	r3, r1
 8013cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	bf0c      	ite	eq
 8013cfc:	2301      	moveq	r3, #1
 8013cfe:	2300      	movne	r3, #0
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	e012      	b.n	8013d2a <HAL_I2C_Init+0x18e>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	1e58      	subs	r0, r3, #1
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6859      	ldr	r1, [r3, #4]
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	009b      	lsls	r3, r3, #2
 8013d10:	440b      	add	r3, r1
 8013d12:	0099      	lsls	r1, r3, #2
 8013d14:	440b      	add	r3, r1
 8013d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	bf0c      	ite	eq
 8013d24:	2301      	moveq	r3, #1
 8013d26:	2300      	movne	r3, #0
 8013d28:	b2db      	uxtb	r3, r3
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d001      	beq.n	8013d32 <HAL_I2C_Init+0x196>
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e022      	b.n	8013d78 <HAL_I2C_Init+0x1dc>
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	689b      	ldr	r3, [r3, #8]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10e      	bne.n	8013d58 <HAL_I2C_Init+0x1bc>
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	1e58      	subs	r0, r3, #1
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6859      	ldr	r1, [r3, #4]
 8013d42:	460b      	mov	r3, r1
 8013d44:	005b      	lsls	r3, r3, #1
 8013d46:	440b      	add	r3, r1
 8013d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013d56:	e00f      	b.n	8013d78 <HAL_I2C_Init+0x1dc>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	1e58      	subs	r0, r3, #1
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6859      	ldr	r1, [r3, #4]
 8013d60:	460b      	mov	r3, r1
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	440b      	add	r3, r1
 8013d66:	0099      	lsls	r1, r3, #2
 8013d68:	440b      	add	r3, r1
 8013d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8013d6e:	3301      	adds	r3, #1
 8013d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013d78:	6879      	ldr	r1, [r7, #4]
 8013d7a:	6809      	ldr	r1, [r1, #0]
 8013d7c:	4313      	orrs	r3, r2
 8013d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	69da      	ldr	r2, [r3, #28]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6a1b      	ldr	r3, [r3, #32]
 8013d92:	431a      	orrs	r2, r3
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	430a      	orrs	r2, r1
 8013d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8013da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	6911      	ldr	r1, [r2, #16]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	68d2      	ldr	r2, [r2, #12]
 8013db2:	4311      	orrs	r1, r2
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	6812      	ldr	r2, [r2, #0]
 8013db8:	430b      	orrs	r3, r1
 8013dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	695a      	ldr	r2, [r3, #20]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	699b      	ldr	r3, [r3, #24]
 8013dce:	431a      	orrs	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	430a      	orrs	r2, r1
 8013dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f042 0201 	orr.w	r2, r2, #1
 8013de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2200      	movs	r2, #0
 8013dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2220      	movs	r2, #32
 8013df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013e04:	2300      	movs	r3, #0
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3710      	adds	r7, #16
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	000186a0 	.word	0x000186a0
 8013e14:	001e847f 	.word	0x001e847f
 8013e18:	003d08ff 	.word	0x003d08ff
 8013e1c:	431bde83 	.word	0x431bde83
 8013e20:	10624dd3 	.word	0x10624dd3

08013e24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b088      	sub	sp, #32
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	607a      	str	r2, [r7, #4]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	460b      	mov	r3, r1
 8013e32:	817b      	strh	r3, [r7, #10]
 8013e34:	4613      	mov	r3, r2
 8013e36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8013e38:	f7ff fb84 	bl	8013544 <HAL_GetTick>
 8013e3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	2b20      	cmp	r3, #32
 8013e48:	f040 80e0 	bne.w	801400c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	2319      	movs	r3, #25
 8013e52:	2201      	movs	r2, #1
 8013e54:	4970      	ldr	r1, [pc, #448]	; (8014018 <HAL_I2C_Master_Transmit+0x1f4>)
 8013e56:	68f8      	ldr	r0, [r7, #12]
 8013e58:	f000 fc58 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d001      	beq.n	8013e66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8013e62:	2302      	movs	r3, #2
 8013e64:	e0d3      	b.n	801400e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e6c:	2b01      	cmp	r3, #1
 8013e6e:	d101      	bne.n	8013e74 <HAL_I2C_Master_Transmit+0x50>
 8013e70:	2302      	movs	r3, #2
 8013e72:	e0cc      	b.n	801400e <HAL_I2C_Master_Transmit+0x1ea>
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	2201      	movs	r2, #1
 8013e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f003 0301 	and.w	r3, r3, #1
 8013e86:	2b01      	cmp	r3, #1
 8013e88:	d007      	beq.n	8013e9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f042 0201 	orr.w	r2, r2, #1
 8013e98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013ea8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	2221      	movs	r2, #33	; 0x21
 8013eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2210      	movs	r2, #16
 8013eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	893a      	ldrh	r2, [r7, #8]
 8013eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013ed0:	b29a      	uxth	r2, r3
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	4a50      	ldr	r2, [pc, #320]	; (801401c <HAL_I2C_Master_Transmit+0x1f8>)
 8013eda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8013edc:	8979      	ldrh	r1, [r7, #10]
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	6a3a      	ldr	r2, [r7, #32]
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f000 fac2 	bl	801446c <I2C_MasterRequestWrite>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e08d      	b.n	801400e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	613b      	str	r3, [r7, #16]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	695b      	ldr	r3, [r3, #20]
 8013efc:	613b      	str	r3, [r7, #16]
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	699b      	ldr	r3, [r3, #24]
 8013f04:	613b      	str	r3, [r7, #16]
 8013f06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8013f08:	e066      	b.n	8013fd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013f0a:	697a      	ldr	r2, [r7, #20]
 8013f0c:	6a39      	ldr	r1, [r7, #32]
 8013f0e:	68f8      	ldr	r0, [r7, #12]
 8013f10:	f000 fcd2 	bl	80148b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8013f14:	4603      	mov	r3, r0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00d      	beq.n	8013f36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f1e:	2b04      	cmp	r3, #4
 8013f20:	d107      	bne.n	8013f32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8013f32:	2301      	movs	r3, #1
 8013f34:	e06b      	b.n	801400e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3a:	781a      	ldrb	r2, [r3, #0]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f46:	1c5a      	adds	r2, r3, #1
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	3b01      	subs	r3, #1
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f5e:	3b01      	subs	r3, #1
 8013f60:	b29a      	uxth	r2, r3
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	f003 0304 	and.w	r3, r3, #4
 8013f70:	2b04      	cmp	r3, #4
 8013f72:	d11b      	bne.n	8013fac <HAL_I2C_Master_Transmit+0x188>
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d017      	beq.n	8013fac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f80:	781a      	ldrb	r2, [r3, #0]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8c:	1c5a      	adds	r2, r3, #1
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	3b01      	subs	r3, #1
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fa4:	3b01      	subs	r3, #1
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	6a39      	ldr	r1, [r7, #32]
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 fcc2 	bl	801493a <I2C_WaitOnBTFFlagUntilTimeout>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d00d      	beq.n	8013fd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc0:	2b04      	cmp	r3, #4
 8013fc2:	d107      	bne.n	8013fd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	681a      	ldr	r2, [r3, #0]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013fd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	e01a      	b.n	801400e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d194      	bne.n	8013f0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	681a      	ldr	r2, [r3, #0]
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2220      	movs	r2, #32
 8013ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2200      	movs	r2, #0
 8014004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8014008:	2300      	movs	r3, #0
 801400a:	e000      	b.n	801400e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801400c:	2302      	movs	r3, #2
  }
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	00100002 	.word	0x00100002
 801401c:	ffff0000 	.word	0xffff0000

08014020 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b08c      	sub	sp, #48	; 0x30
 8014024:	af02      	add	r7, sp, #8
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	607a      	str	r2, [r7, #4]
 801402a:	461a      	mov	r2, r3
 801402c:	460b      	mov	r3, r1
 801402e:	817b      	strh	r3, [r7, #10]
 8014030:	4613      	mov	r3, r2
 8014032:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8014034:	f7ff fa86 	bl	8013544 <HAL_GetTick>
 8014038:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014040:	b2db      	uxtb	r3, r3
 8014042:	2b20      	cmp	r3, #32
 8014044:	f040 820b 	bne.w	801445e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8014048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404a:	9300      	str	r3, [sp, #0]
 801404c:	2319      	movs	r3, #25
 801404e:	2201      	movs	r2, #1
 8014050:	497c      	ldr	r1, [pc, #496]	; (8014244 <HAL_I2C_Master_Receive+0x224>)
 8014052:	68f8      	ldr	r0, [r7, #12]
 8014054:	f000 fb5a 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 8014058:	4603      	mov	r3, r0
 801405a:	2b00      	cmp	r3, #0
 801405c:	d001      	beq.n	8014062 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 801405e:	2302      	movs	r3, #2
 8014060:	e1fe      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014068:	2b01      	cmp	r3, #1
 801406a:	d101      	bne.n	8014070 <HAL_I2C_Master_Receive+0x50>
 801406c:	2302      	movs	r3, #2
 801406e:	e1f7      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2201      	movs	r2, #1
 8014074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	f003 0301 	and.w	r3, r3, #1
 8014082:	2b01      	cmp	r3, #1
 8014084:	d007      	beq.n	8014096 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f042 0201 	orr.w	r2, r2, #1
 8014094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80140a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2222      	movs	r2, #34	; 0x22
 80140aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	2210      	movs	r2, #16
 80140b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	2200      	movs	r2, #0
 80140ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	687a      	ldr	r2, [r7, #4]
 80140c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	893a      	ldrh	r2, [r7, #8]
 80140c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	4a5c      	ldr	r2, [pc, #368]	; (8014248 <HAL_I2C_Master_Receive+0x228>)
 80140d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80140d8:	8979      	ldrh	r1, [r7, #10]
 80140da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140de:	68f8      	ldr	r0, [r7, #12]
 80140e0:	f000 fa46 	bl	8014570 <I2C_MasterRequestRead>
 80140e4:	4603      	mov	r3, r0
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d001      	beq.n	80140ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80140ea:	2301      	movs	r3, #1
 80140ec:	e1b8      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d113      	bne.n	801411e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80140f6:	2300      	movs	r3, #0
 80140f8:	623b      	str	r3, [r7, #32]
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	695b      	ldr	r3, [r3, #20]
 8014100:	623b      	str	r3, [r7, #32]
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	699b      	ldr	r3, [r3, #24]
 8014108:	623b      	str	r3, [r7, #32]
 801410a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801411a:	601a      	str	r2, [r3, #0]
 801411c:	e18c      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014122:	2b01      	cmp	r3, #1
 8014124:	d11b      	bne.n	801415e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014136:	2300      	movs	r3, #0
 8014138:	61fb      	str	r3, [r7, #28]
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	695b      	ldr	r3, [r3, #20]
 8014140:	61fb      	str	r3, [r7, #28]
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	61fb      	str	r3, [r7, #28]
 801414a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	681a      	ldr	r2, [r3, #0]
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801415a:	601a      	str	r2, [r3, #0]
 801415c:	e16c      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014162:	2b02      	cmp	r3, #2
 8014164:	d11b      	bne.n	801419e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014174:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014186:	2300      	movs	r3, #0
 8014188:	61bb      	str	r3, [r7, #24]
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	695b      	ldr	r3, [r3, #20]
 8014190:	61bb      	str	r3, [r7, #24]
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	699b      	ldr	r3, [r3, #24]
 8014198:	61bb      	str	r3, [r7, #24]
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	e14c      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80141ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80141ae:	2300      	movs	r3, #0
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	695b      	ldr	r3, [r3, #20]
 80141b8:	617b      	str	r3, [r7, #20]
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	699b      	ldr	r3, [r3, #24]
 80141c0:	617b      	str	r3, [r7, #20]
 80141c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80141c4:	e138      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141ca:	2b03      	cmp	r3, #3
 80141cc:	f200 80f1 	bhi.w	80143b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d123      	bne.n	8014220 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80141d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80141dc:	68f8      	ldr	r0, [r7, #12]
 80141de:	f000 fbed 	bl	80149bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d001      	beq.n	80141ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80141e8:	2301      	movs	r3, #1
 80141ea:	e139      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	691a      	ldr	r2, [r3, #16]
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f6:	b2d2      	uxtb	r2, r2
 80141f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fe:	1c5a      	adds	r2, r3, #1
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014208:	3b01      	subs	r3, #1
 801420a:	b29a      	uxth	r2, r3
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014214:	b29b      	uxth	r3, r3
 8014216:	3b01      	subs	r3, #1
 8014218:	b29a      	uxth	r2, r3
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801421e:	e10b      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014224:	2b02      	cmp	r3, #2
 8014226:	d14e      	bne.n	80142c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422e:	2200      	movs	r2, #0
 8014230:	4906      	ldr	r1, [pc, #24]	; (801424c <HAL_I2C_Master_Receive+0x22c>)
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	f000 fa6a 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 8014238:	4603      	mov	r3, r0
 801423a:	2b00      	cmp	r3, #0
 801423c:	d008      	beq.n	8014250 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 801423e:	2301      	movs	r3, #1
 8014240:	e10e      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
 8014242:	bf00      	nop
 8014244:	00100002 	.word	0x00100002
 8014248:	ffff0000 	.word	0xffff0000
 801424c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801425e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	691a      	ldr	r2, [r3, #16]
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801426a:	b2d2      	uxtb	r2, r2
 801426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014272:	1c5a      	adds	r2, r3, #1
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801427c:	3b01      	subs	r3, #1
 801427e:	b29a      	uxth	r2, r3
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014288:	b29b      	uxth	r3, r3
 801428a:	3b01      	subs	r3, #1
 801428c:	b29a      	uxth	r2, r3
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	691a      	ldr	r2, [r3, #16]
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801429c:	b2d2      	uxtb	r2, r2
 801429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a4:	1c5a      	adds	r2, r3, #1
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142ae:	3b01      	subs	r3, #1
 80142b0:	b29a      	uxth	r2, r3
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	3b01      	subs	r3, #1
 80142be:	b29a      	uxth	r2, r3
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80142c4:	e0b8      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80142c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142cc:	2200      	movs	r2, #0
 80142ce:	4966      	ldr	r1, [pc, #408]	; (8014468 <HAL_I2C_Master_Receive+0x448>)
 80142d0:	68f8      	ldr	r0, [r7, #12]
 80142d2:	f000 fa1b 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 80142d6:	4603      	mov	r3, r0
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d001      	beq.n	80142e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80142dc:	2301      	movs	r3, #1
 80142de:	e0bf      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	681a      	ldr	r2, [r3, #0]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80142ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	691a      	ldr	r2, [r3, #16]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142fa:	b2d2      	uxtb	r2, r2
 80142fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014302:	1c5a      	adds	r2, r3, #1
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801430c:	3b01      	subs	r3, #1
 801430e:	b29a      	uxth	r2, r3
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014318:	b29b      	uxth	r3, r3
 801431a:	3b01      	subs	r3, #1
 801431c:	b29a      	uxth	r2, r3
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014324:	9300      	str	r3, [sp, #0]
 8014326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014328:	2200      	movs	r2, #0
 801432a:	494f      	ldr	r1, [pc, #316]	; (8014468 <HAL_I2C_Master_Receive+0x448>)
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	f000 f9ed 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 8014332:	4603      	mov	r3, r0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d001      	beq.n	801433c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8014338:	2301      	movs	r3, #1
 801433a:	e091      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	681a      	ldr	r2, [r3, #0]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	691a      	ldr	r2, [r3, #16]
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014356:	b2d2      	uxtb	r2, r2
 8014358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801435e:	1c5a      	adds	r2, r3, #1
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014368:	3b01      	subs	r3, #1
 801436a:	b29a      	uxth	r2, r3
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014374:	b29b      	uxth	r3, r3
 8014376:	3b01      	subs	r3, #1
 8014378:	b29a      	uxth	r2, r3
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	691a      	ldr	r2, [r3, #16]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014388:	b2d2      	uxtb	r2, r2
 801438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014390:	1c5a      	adds	r2, r3, #1
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801439a:	3b01      	subs	r3, #1
 801439c:	b29a      	uxth	r2, r3
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	3b01      	subs	r3, #1
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80143b0:	e042      	b.n	8014438 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80143b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80143b6:	68f8      	ldr	r0, [r7, #12]
 80143b8:	f000 fb00 	bl	80149bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d001      	beq.n	80143c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80143c2:	2301      	movs	r3, #1
 80143c4:	e04c      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	691a      	ldr	r2, [r3, #16]
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d0:	b2d2      	uxtb	r2, r2
 80143d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d8:	1c5a      	adds	r2, r3, #1
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143e2:	3b01      	subs	r3, #1
 80143e4:	b29a      	uxth	r2, r3
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	3b01      	subs	r3, #1
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	695b      	ldr	r3, [r3, #20]
 80143fe:	f003 0304 	and.w	r3, r3, #4
 8014402:	2b04      	cmp	r3, #4
 8014404:	d118      	bne.n	8014438 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	691a      	ldr	r2, [r3, #16]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014410:	b2d2      	uxtb	r2, r2
 8014412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014418:	1c5a      	adds	r2, r3, #1
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014422:	3b01      	subs	r3, #1
 8014424:	b29a      	uxth	r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801442e:	b29b      	uxth	r3, r3
 8014430:	3b01      	subs	r3, #1
 8014432:	b29a      	uxth	r2, r3
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801443c:	2b00      	cmp	r3, #0
 801443e:	f47f aec2 	bne.w	80141c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2220      	movs	r2, #32
 8014446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2200      	movs	r2, #0
 801444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2200      	movs	r2, #0
 8014456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801445a:	2300      	movs	r3, #0
 801445c:	e000      	b.n	8014460 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 801445e:	2302      	movs	r3, #2
  }
}
 8014460:	4618      	mov	r0, r3
 8014462:	3728      	adds	r7, #40	; 0x28
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}
 8014468:	00010004 	.word	0x00010004

0801446c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b088      	sub	sp, #32
 8014470:	af02      	add	r7, sp, #8
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	607a      	str	r2, [r7, #4]
 8014476:	603b      	str	r3, [r7, #0]
 8014478:	460b      	mov	r3, r1
 801447a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	2b08      	cmp	r3, #8
 8014486:	d006      	beq.n	8014496 <I2C_MasterRequestWrite+0x2a>
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	2b01      	cmp	r3, #1
 801448c:	d003      	beq.n	8014496 <I2C_MasterRequestWrite+0x2a>
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014494:	d108      	bne.n	80144a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	681a      	ldr	r2, [r3, #0]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	e00b      	b.n	80144c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144ac:	2b12      	cmp	r3, #18
 80144ae:	d107      	bne.n	80144c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80144be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	9300      	str	r3, [sp, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f000 f91d 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00d      	beq.n	80144f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80144e6:	d103      	bne.n	80144f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80144f0:	2303      	movs	r3, #3
 80144f2:	e035      	b.n	8014560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	691b      	ldr	r3, [r3, #16]
 80144f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80144fc:	d108      	bne.n	8014510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80144fe:	897b      	ldrh	r3, [r7, #10]
 8014500:	b2db      	uxtb	r3, r3
 8014502:	461a      	mov	r2, r3
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801450c:	611a      	str	r2, [r3, #16]
 801450e:	e01b      	b.n	8014548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8014510:	897b      	ldrh	r3, [r7, #10]
 8014512:	11db      	asrs	r3, r3, #7
 8014514:	b2db      	uxtb	r3, r3
 8014516:	f003 0306 	and.w	r3, r3, #6
 801451a:	b2db      	uxtb	r3, r3
 801451c:	f063 030f 	orn	r3, r3, #15
 8014520:	b2da      	uxtb	r2, r3
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	490e      	ldr	r1, [pc, #56]	; (8014568 <I2C_MasterRequestWrite+0xfc>)
 801452e:	68f8      	ldr	r0, [r7, #12]
 8014530:	f000 f943 	bl	80147ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801453a:	2301      	movs	r3, #1
 801453c:	e010      	b.n	8014560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801453e:	897b      	ldrh	r3, [r7, #10]
 8014540:	b2da      	uxtb	r2, r3
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	4907      	ldr	r1, [pc, #28]	; (801456c <I2C_MasterRequestWrite+0x100>)
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f000 f933 	bl	80147ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014554:	4603      	mov	r3, r0
 8014556:	2b00      	cmp	r3, #0
 8014558:	d001      	beq.n	801455e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801455a:	2301      	movs	r3, #1
 801455c:	e000      	b.n	8014560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801455e:	2300      	movs	r3, #0
}
 8014560:	4618      	mov	r0, r3
 8014562:	3718      	adds	r7, #24
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	00010008 	.word	0x00010008
 801456c:	00010002 	.word	0x00010002

08014570 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b088      	sub	sp, #32
 8014574:	af02      	add	r7, sp, #8
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	607a      	str	r2, [r7, #4]
 801457a:	603b      	str	r3, [r7, #0]
 801457c:	460b      	mov	r3, r1
 801457e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014584:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014594:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	2b08      	cmp	r3, #8
 801459a:	d006      	beq.n	80145aa <I2C_MasterRequestRead+0x3a>
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	2b01      	cmp	r3, #1
 80145a0:	d003      	beq.n	80145aa <I2C_MasterRequestRead+0x3a>
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80145a8:	d108      	bne.n	80145bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80145b8:	601a      	str	r2, [r3, #0]
 80145ba:	e00b      	b.n	80145d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145c0:	2b11      	cmp	r3, #17
 80145c2:	d107      	bne.n	80145d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80145d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2200      	movs	r2, #0
 80145dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80145e0:	68f8      	ldr	r0, [r7, #12]
 80145e2:	f000 f893 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 80145e6:	4603      	mov	r3, r0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d00d      	beq.n	8014608 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145fa:	d103      	bne.n	8014604 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8014604:	2303      	movs	r3, #3
 8014606:	e079      	b.n	80146fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	691b      	ldr	r3, [r3, #16]
 801460c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014610:	d108      	bne.n	8014624 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8014612:	897b      	ldrh	r3, [r7, #10]
 8014614:	b2db      	uxtb	r3, r3
 8014616:	f043 0301 	orr.w	r3, r3, #1
 801461a:	b2da      	uxtb	r2, r3
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	611a      	str	r2, [r3, #16]
 8014622:	e05f      	b.n	80146e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8014624:	897b      	ldrh	r3, [r7, #10]
 8014626:	11db      	asrs	r3, r3, #7
 8014628:	b2db      	uxtb	r3, r3
 801462a:	f003 0306 	and.w	r3, r3, #6
 801462e:	b2db      	uxtb	r3, r3
 8014630:	f063 030f 	orn	r3, r3, #15
 8014634:	b2da      	uxtb	r2, r3
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	4930      	ldr	r1, [pc, #192]	; (8014704 <I2C_MasterRequestRead+0x194>)
 8014642:	68f8      	ldr	r0, [r7, #12]
 8014644:	f000 f8b9 	bl	80147ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d001      	beq.n	8014652 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 801464e:	2301      	movs	r3, #1
 8014650:	e054      	b.n	80146fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8014652:	897b      	ldrh	r3, [r7, #10]
 8014654:	b2da      	uxtb	r2, r3
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	4929      	ldr	r1, [pc, #164]	; (8014708 <I2C_MasterRequestRead+0x198>)
 8014662:	68f8      	ldr	r0, [r7, #12]
 8014664:	f000 f8a9 	bl	80147ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014668:	4603      	mov	r3, r0
 801466a:	2b00      	cmp	r3, #0
 801466c:	d001      	beq.n	8014672 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801466e:	2301      	movs	r3, #1
 8014670:	e044      	b.n	80146fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014672:	2300      	movs	r3, #0
 8014674:	613b      	str	r3, [r7, #16]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	695b      	ldr	r3, [r3, #20]
 801467c:	613b      	str	r3, [r7, #16]
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	699b      	ldr	r3, [r3, #24]
 8014684:	613b      	str	r3, [r7, #16]
 8014686:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014696:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	9300      	str	r3, [sp, #0]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2200      	movs	r2, #0
 80146a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80146a4:	68f8      	ldr	r0, [r7, #12]
 80146a6:	f000 f831 	bl	801470c <I2C_WaitOnFlagUntilTimeout>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00d      	beq.n	80146cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146be:	d103      	bne.n	80146c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80146c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80146c8:	2303      	movs	r3, #3
 80146ca:	e017      	b.n	80146fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80146cc:	897b      	ldrh	r3, [r7, #10]
 80146ce:	11db      	asrs	r3, r3, #7
 80146d0:	b2db      	uxtb	r3, r3
 80146d2:	f003 0306 	and.w	r3, r3, #6
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	f063 030e 	orn	r3, r3, #14
 80146dc:	b2da      	uxtb	r2, r3
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	4907      	ldr	r1, [pc, #28]	; (8014708 <I2C_MasterRequestRead+0x198>)
 80146ea:	68f8      	ldr	r0, [r7, #12]
 80146ec:	f000 f865 	bl	80147ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80146f0:	4603      	mov	r3, r0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d001      	beq.n	80146fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80146f6:	2301      	movs	r3, #1
 80146f8:	e000      	b.n	80146fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3718      	adds	r7, #24
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	00010008 	.word	0x00010008
 8014708:	00010002 	.word	0x00010002

0801470c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	60f8      	str	r0, [r7, #12]
 8014714:	60b9      	str	r1, [r7, #8]
 8014716:	603b      	str	r3, [r7, #0]
 8014718:	4613      	mov	r3, r2
 801471a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801471c:	e025      	b.n	801476a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014724:	d021      	beq.n	801476a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014726:	f7fe ff0d 	bl	8013544 <HAL_GetTick>
 801472a:	4602      	mov	r2, r0
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	1ad3      	subs	r3, r2, r3
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	429a      	cmp	r2, r3
 8014734:	d302      	bcc.n	801473c <I2C_WaitOnFlagUntilTimeout+0x30>
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d116      	bne.n	801476a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2200      	movs	r2, #0
 8014740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	2220      	movs	r2, #32
 8014746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	2200      	movs	r2, #0
 801474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014756:	f043 0220 	orr.w	r2, r3, #32
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2200      	movs	r2, #0
 8014762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014766:	2301      	movs	r3, #1
 8014768:	e023      	b.n	80147b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	0c1b      	lsrs	r3, r3, #16
 801476e:	b2db      	uxtb	r3, r3
 8014770:	2b01      	cmp	r3, #1
 8014772:	d10d      	bne.n	8014790 <I2C_WaitOnFlagUntilTimeout+0x84>
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	695b      	ldr	r3, [r3, #20]
 801477a:	43da      	mvns	r2, r3
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	4013      	ands	r3, r2
 8014780:	b29b      	uxth	r3, r3
 8014782:	2b00      	cmp	r3, #0
 8014784:	bf0c      	ite	eq
 8014786:	2301      	moveq	r3, #1
 8014788:	2300      	movne	r3, #0
 801478a:	b2db      	uxtb	r3, r3
 801478c:	461a      	mov	r2, r3
 801478e:	e00c      	b.n	80147aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	699b      	ldr	r3, [r3, #24]
 8014796:	43da      	mvns	r2, r3
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	4013      	ands	r3, r2
 801479c:	b29b      	uxth	r3, r3
 801479e:	2b00      	cmp	r3, #0
 80147a0:	bf0c      	ite	eq
 80147a2:	2301      	moveq	r3, #1
 80147a4:	2300      	movne	r3, #0
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	461a      	mov	r2, r3
 80147aa:	79fb      	ldrb	r3, [r7, #7]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d0b6      	beq.n	801471e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}

080147ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80147ba:	b580      	push	{r7, lr}
 80147bc:	b084      	sub	sp, #16
 80147be:	af00      	add	r7, sp, #0
 80147c0:	60f8      	str	r0, [r7, #12]
 80147c2:	60b9      	str	r1, [r7, #8]
 80147c4:	607a      	str	r2, [r7, #4]
 80147c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80147c8:	e051      	b.n	801486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	695b      	ldr	r3, [r3, #20]
 80147d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80147d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147d8:	d123      	bne.n	8014822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80147e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80147f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2200      	movs	r2, #0
 80147f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2220      	movs	r2, #32
 80147fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2200      	movs	r2, #0
 8014806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480e:	f043 0204 	orr.w	r2, r3, #4
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2200      	movs	r2, #0
 801481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801481e:	2301      	movs	r3, #1
 8014820:	e046      	b.n	80148b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014828:	d021      	beq.n	801486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801482a:	f7fe fe8b 	bl	8013544 <HAL_GetTick>
 801482e:	4602      	mov	r2, r0
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	429a      	cmp	r2, r3
 8014838:	d302      	bcc.n	8014840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d116      	bne.n	801486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2200      	movs	r2, #0
 8014844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	2220      	movs	r2, #32
 801484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2200      	movs	r2, #0
 8014852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801485a:	f043 0220 	orr.w	r2, r3, #32
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2200      	movs	r2, #0
 8014866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801486a:	2301      	movs	r3, #1
 801486c:	e020      	b.n	80148b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	0c1b      	lsrs	r3, r3, #16
 8014872:	b2db      	uxtb	r3, r3
 8014874:	2b01      	cmp	r3, #1
 8014876:	d10c      	bne.n	8014892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	695b      	ldr	r3, [r3, #20]
 801487e:	43da      	mvns	r2, r3
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	4013      	ands	r3, r2
 8014884:	b29b      	uxth	r3, r3
 8014886:	2b00      	cmp	r3, #0
 8014888:	bf14      	ite	ne
 801488a:	2301      	movne	r3, #1
 801488c:	2300      	moveq	r3, #0
 801488e:	b2db      	uxtb	r3, r3
 8014890:	e00b      	b.n	80148aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	699b      	ldr	r3, [r3, #24]
 8014898:	43da      	mvns	r2, r3
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	4013      	ands	r3, r2
 801489e:	b29b      	uxth	r3, r3
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	bf14      	ite	ne
 80148a4:	2301      	movne	r3, #1
 80148a6:	2300      	moveq	r3, #0
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d18d      	bne.n	80147ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80148ae:	2300      	movs	r3, #0
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3710      	adds	r7, #16
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80148c4:	e02d      	b.n	8014922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80148c6:	68f8      	ldr	r0, [r7, #12]
 80148c8:	f000 f8ce 	bl	8014a68 <I2C_IsAcknowledgeFailed>
 80148cc:	4603      	mov	r3, r0
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d001      	beq.n	80148d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80148d2:	2301      	movs	r3, #1
 80148d4:	e02d      	b.n	8014932 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148dc:	d021      	beq.n	8014922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80148de:	f7fe fe31 	bl	8013544 <HAL_GetTick>
 80148e2:	4602      	mov	r2, r0
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	68ba      	ldr	r2, [r7, #8]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d302      	bcc.n	80148f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d116      	bne.n	8014922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2200      	movs	r2, #0
 80148f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2220      	movs	r2, #32
 80148fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2200      	movs	r2, #0
 8014906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801490e:	f043 0220 	orr.w	r2, r3, #32
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2200      	movs	r2, #0
 801491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	e007      	b.n	8014932 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	695b      	ldr	r3, [r3, #20]
 8014928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801492c:	2b80      	cmp	r3, #128	; 0x80
 801492e:	d1ca      	bne.n	80148c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014930:	2300      	movs	r3, #0
}
 8014932:	4618      	mov	r0, r3
 8014934:	3710      	adds	r7, #16
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}

0801493a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801493a:	b580      	push	{r7, lr}
 801493c:	b084      	sub	sp, #16
 801493e:	af00      	add	r7, sp, #0
 8014940:	60f8      	str	r0, [r7, #12]
 8014942:	60b9      	str	r1, [r7, #8]
 8014944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014946:	e02d      	b.n	80149a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f000 f88d 	bl	8014a68 <I2C_IsAcknowledgeFailed>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d001      	beq.n	8014958 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014954:	2301      	movs	r3, #1
 8014956:	e02d      	b.n	80149b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801495e:	d021      	beq.n	80149a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014960:	f7fe fdf0 	bl	8013544 <HAL_GetTick>
 8014964:	4602      	mov	r2, r0
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	68ba      	ldr	r2, [r7, #8]
 801496c:	429a      	cmp	r2, r3
 801496e:	d302      	bcc.n	8014976 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d116      	bne.n	80149a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2220      	movs	r2, #32
 8014980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	2200      	movs	r2, #0
 8014988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014990:	f043 0220 	orr.w	r2, r3, #32
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2200      	movs	r2, #0
 801499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80149a0:	2301      	movs	r3, #1
 80149a2:	e007      	b.n	80149b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	695b      	ldr	r3, [r3, #20]
 80149aa:	f003 0304 	and.w	r3, r3, #4
 80149ae:	2b04      	cmp	r3, #4
 80149b0:	d1ca      	bne.n	8014948 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80149b2:	2300      	movs	r3, #0
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3710      	adds	r7, #16
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80149c8:	e042      	b.n	8014a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	695b      	ldr	r3, [r3, #20]
 80149d0:	f003 0310 	and.w	r3, r3, #16
 80149d4:	2b10      	cmp	r3, #16
 80149d6:	d119      	bne.n	8014a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	f06f 0210 	mvn.w	r2, #16
 80149e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2200      	movs	r2, #0
 80149e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2220      	movs	r2, #32
 80149ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2200      	movs	r2, #0
 80149f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2200      	movs	r2, #0
 8014a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	e029      	b.n	8014a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014a0c:	f7fe fd9a 	bl	8013544 <HAL_GetTick>
 8014a10:	4602      	mov	r2, r0
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	1ad3      	subs	r3, r2, r3
 8014a16:	68ba      	ldr	r2, [r7, #8]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d302      	bcc.n	8014a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d116      	bne.n	8014a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2200      	movs	r2, #0
 8014a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2220      	movs	r2, #32
 8014a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2200      	movs	r2, #0
 8014a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a3c:	f043 0220 	orr.w	r2, r3, #32
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2200      	movs	r2, #0
 8014a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e007      	b.n	8014a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	695b      	ldr	r3, [r3, #20]
 8014a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a5a:	2b40      	cmp	r3, #64	; 0x40
 8014a5c:	d1b5      	bne.n	80149ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8014a5e:	2300      	movs	r3, #0
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3710      	adds	r7, #16
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}

08014a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	695b      	ldr	r3, [r3, #20]
 8014a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a7e:	d11b      	bne.n	8014ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2220      	movs	r2, #32
 8014a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014aa4:	f043 0204 	orr.w	r2, r3, #4
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	e000      	b.n	8014aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8014ab8:	2300      	movs	r3, #0
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	370c      	adds	r7, #12
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
	...

08014ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b086      	sub	sp, #24
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	e267      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f003 0301 	and.w	r3, r3, #1
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d075      	beq.n	8014bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014ae6:	4b88      	ldr	r3, [pc, #544]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014ae8:	689b      	ldr	r3, [r3, #8]
 8014aea:	f003 030c 	and.w	r3, r3, #12
 8014aee:	2b04      	cmp	r3, #4
 8014af0:	d00c      	beq.n	8014b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014af2:	4b85      	ldr	r3, [pc, #532]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014af4:	689b      	ldr	r3, [r3, #8]
 8014af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014afa:	2b08      	cmp	r3, #8
 8014afc:	d112      	bne.n	8014b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014afe:	4b82      	ldr	r3, [pc, #520]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014b0a:	d10b      	bne.n	8014b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014b0c:	4b7e      	ldr	r3, [pc, #504]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d05b      	beq.n	8014bd0 <HAL_RCC_OscConfig+0x108>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d157      	bne.n	8014bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8014b20:	2301      	movs	r3, #1
 8014b22:	e242      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b2c:	d106      	bne.n	8014b3c <HAL_RCC_OscConfig+0x74>
 8014b2e:	4b76      	ldr	r3, [pc, #472]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	4a75      	ldr	r2, [pc, #468]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b38:	6013      	str	r3, [r2, #0]
 8014b3a:	e01d      	b.n	8014b78 <HAL_RCC_OscConfig+0xb0>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014b44:	d10c      	bne.n	8014b60 <HAL_RCC_OscConfig+0x98>
 8014b46:	4b70      	ldr	r3, [pc, #448]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a6f      	ldr	r2, [pc, #444]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014b50:	6013      	str	r3, [r2, #0]
 8014b52:	4b6d      	ldr	r3, [pc, #436]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	4a6c      	ldr	r2, [pc, #432]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b5c:	6013      	str	r3, [r2, #0]
 8014b5e:	e00b      	b.n	8014b78 <HAL_RCC_OscConfig+0xb0>
 8014b60:	4b69      	ldr	r3, [pc, #420]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	4a68      	ldr	r2, [pc, #416]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014b6a:	6013      	str	r3, [r2, #0]
 8014b6c:	4b66      	ldr	r3, [pc, #408]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	4a65      	ldr	r2, [pc, #404]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d013      	beq.n	8014ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014b80:	f7fe fce0 	bl	8013544 <HAL_GetTick>
 8014b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014b86:	e008      	b.n	8014b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014b88:	f7fe fcdc 	bl	8013544 <HAL_GetTick>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	2b64      	cmp	r3, #100	; 0x64
 8014b94:	d901      	bls.n	8014b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8014b96:	2303      	movs	r3, #3
 8014b98:	e207      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014b9a:	4b5b      	ldr	r3, [pc, #364]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d0f0      	beq.n	8014b88 <HAL_RCC_OscConfig+0xc0>
 8014ba6:	e014      	b.n	8014bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ba8:	f7fe fccc 	bl	8013544 <HAL_GetTick>
 8014bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014bae:	e008      	b.n	8014bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014bb0:	f7fe fcc8 	bl	8013544 <HAL_GetTick>
 8014bb4:	4602      	mov	r2, r0
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	2b64      	cmp	r3, #100	; 0x64
 8014bbc:	d901      	bls.n	8014bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014bbe:	2303      	movs	r3, #3
 8014bc0:	e1f3      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014bc2:	4b51      	ldr	r3, [pc, #324]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d1f0      	bne.n	8014bb0 <HAL_RCC_OscConfig+0xe8>
 8014bce:	e000      	b.n	8014bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f003 0302 	and.w	r3, r3, #2
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d063      	beq.n	8014ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014bde:	4b4a      	ldr	r3, [pc, #296]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014be0:	689b      	ldr	r3, [r3, #8]
 8014be2:	f003 030c 	and.w	r3, r3, #12
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00b      	beq.n	8014c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014bea:	4b47      	ldr	r3, [pc, #284]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014bec:	689b      	ldr	r3, [r3, #8]
 8014bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014bf2:	2b08      	cmp	r3, #8
 8014bf4:	d11c      	bne.n	8014c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014bf6:	4b44      	ldr	r3, [pc, #272]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d116      	bne.n	8014c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014c02:	4b41      	ldr	r3, [pc, #260]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f003 0302 	and.w	r3, r3, #2
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d005      	beq.n	8014c1a <HAL_RCC_OscConfig+0x152>
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d001      	beq.n	8014c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8014c16:	2301      	movs	r3, #1
 8014c18:	e1c7      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014c1a:	4b3b      	ldr	r3, [pc, #236]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	691b      	ldr	r3, [r3, #16]
 8014c26:	00db      	lsls	r3, r3, #3
 8014c28:	4937      	ldr	r1, [pc, #220]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c2a:	4313      	orrs	r3, r2
 8014c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014c2e:	e03a      	b.n	8014ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	68db      	ldr	r3, [r3, #12]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d020      	beq.n	8014c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014c38:	4b34      	ldr	r3, [pc, #208]	; (8014d0c <HAL_RCC_OscConfig+0x244>)
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c3e:	f7fe fc81 	bl	8013544 <HAL_GetTick>
 8014c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014c44:	e008      	b.n	8014c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014c46:	f7fe fc7d 	bl	8013544 <HAL_GetTick>
 8014c4a:	4602      	mov	r2, r0
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	1ad3      	subs	r3, r2, r3
 8014c50:	2b02      	cmp	r3, #2
 8014c52:	d901      	bls.n	8014c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014c54:	2303      	movs	r3, #3
 8014c56:	e1a8      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014c58:	4b2b      	ldr	r3, [pc, #172]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	f003 0302 	and.w	r3, r3, #2
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d0f0      	beq.n	8014c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014c64:	4b28      	ldr	r3, [pc, #160]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	691b      	ldr	r3, [r3, #16]
 8014c70:	00db      	lsls	r3, r3, #3
 8014c72:	4925      	ldr	r1, [pc, #148]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c74:	4313      	orrs	r3, r2
 8014c76:	600b      	str	r3, [r1, #0]
 8014c78:	e015      	b.n	8014ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014c7a:	4b24      	ldr	r3, [pc, #144]	; (8014d0c <HAL_RCC_OscConfig+0x244>)
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c80:	f7fe fc60 	bl	8013544 <HAL_GetTick>
 8014c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014c86:	e008      	b.n	8014c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014c88:	f7fe fc5c 	bl	8013544 <HAL_GetTick>
 8014c8c:	4602      	mov	r2, r0
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	1ad3      	subs	r3, r2, r3
 8014c92:	2b02      	cmp	r3, #2
 8014c94:	d901      	bls.n	8014c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014c96:	2303      	movs	r3, #3
 8014c98:	e187      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014c9a:	4b1b      	ldr	r3, [pc, #108]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	f003 0302 	and.w	r3, r3, #2
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1f0      	bne.n	8014c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f003 0308 	and.w	r3, r3, #8
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d036      	beq.n	8014d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	695b      	ldr	r3, [r3, #20]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d016      	beq.n	8014ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014cba:	4b15      	ldr	r3, [pc, #84]	; (8014d10 <HAL_RCC_OscConfig+0x248>)
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014cc0:	f7fe fc40 	bl	8013544 <HAL_GetTick>
 8014cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014cc6:	e008      	b.n	8014cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014cc8:	f7fe fc3c 	bl	8013544 <HAL_GetTick>
 8014ccc:	4602      	mov	r2, r0
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	1ad3      	subs	r3, r2, r3
 8014cd2:	2b02      	cmp	r3, #2
 8014cd4:	d901      	bls.n	8014cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8014cd6:	2303      	movs	r3, #3
 8014cd8:	e167      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014cda:	4b0b      	ldr	r3, [pc, #44]	; (8014d08 <HAL_RCC_OscConfig+0x240>)
 8014cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cde:	f003 0302 	and.w	r3, r3, #2
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d0f0      	beq.n	8014cc8 <HAL_RCC_OscConfig+0x200>
 8014ce6:	e01b      	b.n	8014d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014ce8:	4b09      	ldr	r3, [pc, #36]	; (8014d10 <HAL_RCC_OscConfig+0x248>)
 8014cea:	2200      	movs	r2, #0
 8014cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014cee:	f7fe fc29 	bl	8013544 <HAL_GetTick>
 8014cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014cf4:	e00e      	b.n	8014d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014cf6:	f7fe fc25 	bl	8013544 <HAL_GetTick>
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	2b02      	cmp	r3, #2
 8014d02:	d907      	bls.n	8014d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8014d04:	2303      	movs	r3, #3
 8014d06:	e150      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
 8014d08:	40023800 	.word	0x40023800
 8014d0c:	42470000 	.word	0x42470000
 8014d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014d14:	4b88      	ldr	r3, [pc, #544]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d18:	f003 0302 	and.w	r3, r3, #2
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d1ea      	bne.n	8014cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f003 0304 	and.w	r3, r3, #4
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	f000 8097 	beq.w	8014e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014d32:	4b81      	ldr	r3, [pc, #516]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d10f      	bne.n	8014d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014d3e:	2300      	movs	r3, #0
 8014d40:	60bb      	str	r3, [r7, #8]
 8014d42:	4b7d      	ldr	r3, [pc, #500]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d46:	4a7c      	ldr	r2, [pc, #496]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8014d4e:	4b7a      	ldr	r3, [pc, #488]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d56:	60bb      	str	r3, [r7, #8]
 8014d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d5e:	4b77      	ldr	r3, [pc, #476]	; (8014f3c <HAL_RCC_OscConfig+0x474>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d118      	bne.n	8014d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014d6a:	4b74      	ldr	r3, [pc, #464]	; (8014f3c <HAL_RCC_OscConfig+0x474>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	4a73      	ldr	r2, [pc, #460]	; (8014f3c <HAL_RCC_OscConfig+0x474>)
 8014d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014d76:	f7fe fbe5 	bl	8013544 <HAL_GetTick>
 8014d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d7c:	e008      	b.n	8014d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014d7e:	f7fe fbe1 	bl	8013544 <HAL_GetTick>
 8014d82:	4602      	mov	r2, r0
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	2b02      	cmp	r3, #2
 8014d8a:	d901      	bls.n	8014d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8014d8c:	2303      	movs	r3, #3
 8014d8e:	e10c      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d90:	4b6a      	ldr	r3, [pc, #424]	; (8014f3c <HAL_RCC_OscConfig+0x474>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d0f0      	beq.n	8014d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d106      	bne.n	8014db2 <HAL_RCC_OscConfig+0x2ea>
 8014da4:	4b64      	ldr	r3, [pc, #400]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014da8:	4a63      	ldr	r2, [pc, #396]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014daa:	f043 0301 	orr.w	r3, r3, #1
 8014dae:	6713      	str	r3, [r2, #112]	; 0x70
 8014db0:	e01c      	b.n	8014dec <HAL_RCC_OscConfig+0x324>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	2b05      	cmp	r3, #5
 8014db8:	d10c      	bne.n	8014dd4 <HAL_RCC_OscConfig+0x30c>
 8014dba:	4b5f      	ldr	r3, [pc, #380]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dbe:	4a5e      	ldr	r2, [pc, #376]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014dc0:	f043 0304 	orr.w	r3, r3, #4
 8014dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8014dc6:	4b5c      	ldr	r3, [pc, #368]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dca:	4a5b      	ldr	r2, [pc, #364]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014dcc:	f043 0301 	orr.w	r3, r3, #1
 8014dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8014dd2:	e00b      	b.n	8014dec <HAL_RCC_OscConfig+0x324>
 8014dd4:	4b58      	ldr	r3, [pc, #352]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dd8:	4a57      	ldr	r2, [pc, #348]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014dda:	f023 0301 	bic.w	r3, r3, #1
 8014dde:	6713      	str	r3, [r2, #112]	; 0x70
 8014de0:	4b55      	ldr	r3, [pc, #340]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014de4:	4a54      	ldr	r2, [pc, #336]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014de6:	f023 0304 	bic.w	r3, r3, #4
 8014dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	689b      	ldr	r3, [r3, #8]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d015      	beq.n	8014e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014df4:	f7fe fba6 	bl	8013544 <HAL_GetTick>
 8014df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014dfa:	e00a      	b.n	8014e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014dfc:	f7fe fba2 	bl	8013544 <HAL_GetTick>
 8014e00:	4602      	mov	r2, r0
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	1ad3      	subs	r3, r2, r3
 8014e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d901      	bls.n	8014e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8014e0e:	2303      	movs	r3, #3
 8014e10:	e0cb      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014e12:	4b49      	ldr	r3, [pc, #292]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e16:	f003 0302 	and.w	r3, r3, #2
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d0ee      	beq.n	8014dfc <HAL_RCC_OscConfig+0x334>
 8014e1e:	e014      	b.n	8014e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014e20:	f7fe fb90 	bl	8013544 <HAL_GetTick>
 8014e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014e26:	e00a      	b.n	8014e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014e28:	f7fe fb8c 	bl	8013544 <HAL_GetTick>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	1ad3      	subs	r3, r2, r3
 8014e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e36:	4293      	cmp	r3, r2
 8014e38:	d901      	bls.n	8014e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8014e3a:	2303      	movs	r3, #3
 8014e3c:	e0b5      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014e3e:	4b3e      	ldr	r3, [pc, #248]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e42:	f003 0302 	and.w	r3, r3, #2
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d1ee      	bne.n	8014e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014e4a:	7dfb      	ldrb	r3, [r7, #23]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d105      	bne.n	8014e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014e50:	4b39      	ldr	r3, [pc, #228]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e54:	4a38      	ldr	r2, [pc, #224]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	699b      	ldr	r3, [r3, #24]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f000 80a1 	beq.w	8014fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014e66:	4b34      	ldr	r3, [pc, #208]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014e68:	689b      	ldr	r3, [r3, #8]
 8014e6a:	f003 030c 	and.w	r3, r3, #12
 8014e6e:	2b08      	cmp	r3, #8
 8014e70:	d05c      	beq.n	8014f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	699b      	ldr	r3, [r3, #24]
 8014e76:	2b02      	cmp	r3, #2
 8014e78:	d141      	bne.n	8014efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014e7a:	4b31      	ldr	r3, [pc, #196]	; (8014f40 <HAL_RCC_OscConfig+0x478>)
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014e80:	f7fe fb60 	bl	8013544 <HAL_GetTick>
 8014e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014e86:	e008      	b.n	8014e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014e88:	f7fe fb5c 	bl	8013544 <HAL_GetTick>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	1ad3      	subs	r3, r2, r3
 8014e92:	2b02      	cmp	r3, #2
 8014e94:	d901      	bls.n	8014e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8014e96:	2303      	movs	r3, #3
 8014e98:	e087      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014e9a:	4b27      	ldr	r3, [pc, #156]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d1f0      	bne.n	8014e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	69da      	ldr	r2, [r3, #28]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	6a1b      	ldr	r3, [r3, #32]
 8014eae:	431a      	orrs	r2, r3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eb4:	019b      	lsls	r3, r3, #6
 8014eb6:	431a      	orrs	r2, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ebc:	085b      	lsrs	r3, r3, #1
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	041b      	lsls	r3, r3, #16
 8014ec2:	431a      	orrs	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec8:	061b      	lsls	r3, r3, #24
 8014eca:	491b      	ldr	r1, [pc, #108]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014ecc:	4313      	orrs	r3, r2
 8014ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014ed0:	4b1b      	ldr	r3, [pc, #108]	; (8014f40 <HAL_RCC_OscConfig+0x478>)
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ed6:	f7fe fb35 	bl	8013544 <HAL_GetTick>
 8014eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014edc:	e008      	b.n	8014ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014ede:	f7fe fb31 	bl	8013544 <HAL_GetTick>
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d901      	bls.n	8014ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8014eec:	2303      	movs	r3, #3
 8014eee:	e05c      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014ef0:	4b11      	ldr	r3, [pc, #68]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d0f0      	beq.n	8014ede <HAL_RCC_OscConfig+0x416>
 8014efc:	e054      	b.n	8014fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014efe:	4b10      	ldr	r3, [pc, #64]	; (8014f40 <HAL_RCC_OscConfig+0x478>)
 8014f00:	2200      	movs	r2, #0
 8014f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f04:	f7fe fb1e 	bl	8013544 <HAL_GetTick>
 8014f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014f0a:	e008      	b.n	8014f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014f0c:	f7fe fb1a 	bl	8013544 <HAL_GetTick>
 8014f10:	4602      	mov	r2, r0
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	1ad3      	subs	r3, r2, r3
 8014f16:	2b02      	cmp	r3, #2
 8014f18:	d901      	bls.n	8014f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8014f1a:	2303      	movs	r3, #3
 8014f1c:	e045      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014f1e:	4b06      	ldr	r3, [pc, #24]	; (8014f38 <HAL_RCC_OscConfig+0x470>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d1f0      	bne.n	8014f0c <HAL_RCC_OscConfig+0x444>
 8014f2a:	e03d      	b.n	8014fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	699b      	ldr	r3, [r3, #24]
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	d107      	bne.n	8014f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8014f34:	2301      	movs	r3, #1
 8014f36:	e038      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
 8014f38:	40023800 	.word	0x40023800
 8014f3c:	40007000 	.word	0x40007000
 8014f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014f44:	4b1b      	ldr	r3, [pc, #108]	; (8014fb4 <HAL_RCC_OscConfig+0x4ec>)
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	699b      	ldr	r3, [r3, #24]
 8014f4e:	2b01      	cmp	r3, #1
 8014f50:	d028      	beq.n	8014fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d121      	bne.n	8014fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d11a      	bne.n	8014fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8014f6e:	68fa      	ldr	r2, [r7, #12]
 8014f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014f74:	4013      	ands	r3, r2
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8014f7c:	4293      	cmp	r3, r2
 8014f7e:	d111      	bne.n	8014fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f8a:	085b      	lsrs	r3, r3, #1
 8014f8c:	3b01      	subs	r3, #1
 8014f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d107      	bne.n	8014fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d001      	beq.n	8014fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e000      	b.n	8014faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8014fa8:	2300      	movs	r3, #0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3718      	adds	r7, #24
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}
 8014fb2:	bf00      	nop
 8014fb4:	40023800 	.word	0x40023800

08014fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d101      	bne.n	8014fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e0cc      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014fcc:	4b68      	ldr	r3, [pc, #416]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f003 0307 	and.w	r3, r3, #7
 8014fd4:	683a      	ldr	r2, [r7, #0]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d90c      	bls.n	8014ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014fda:	4b65      	ldr	r3, [pc, #404]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 8014fdc:	683a      	ldr	r2, [r7, #0]
 8014fde:	b2d2      	uxtb	r2, r2
 8014fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014fe2:	4b63      	ldr	r3, [pc, #396]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	f003 0307 	and.w	r3, r3, #7
 8014fea:	683a      	ldr	r2, [r7, #0]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d001      	beq.n	8014ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	e0b8      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	f003 0302 	and.w	r3, r3, #2
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d020      	beq.n	8015042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f003 0304 	and.w	r3, r3, #4
 8015008:	2b00      	cmp	r3, #0
 801500a:	d005      	beq.n	8015018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801500c:	4b59      	ldr	r3, [pc, #356]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801500e:	689b      	ldr	r3, [r3, #8]
 8015010:	4a58      	ldr	r2, [pc, #352]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f003 0308 	and.w	r3, r3, #8
 8015020:	2b00      	cmp	r3, #0
 8015022:	d005      	beq.n	8015030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015024:	4b53      	ldr	r3, [pc, #332]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015026:	689b      	ldr	r3, [r3, #8]
 8015028:	4a52      	ldr	r2, [pc, #328]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801502a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801502e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015030:	4b50      	ldr	r3, [pc, #320]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015032:	689b      	ldr	r3, [r3, #8]
 8015034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	689b      	ldr	r3, [r3, #8]
 801503c:	494d      	ldr	r1, [pc, #308]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801503e:	4313      	orrs	r3, r2
 8015040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f003 0301 	and.w	r3, r3, #1
 801504a:	2b00      	cmp	r3, #0
 801504c:	d044      	beq.n	80150d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	2b01      	cmp	r3, #1
 8015054:	d107      	bne.n	8015066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015056:	4b47      	ldr	r3, [pc, #284]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801505e:	2b00      	cmp	r3, #0
 8015060:	d119      	bne.n	8015096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015062:	2301      	movs	r3, #1
 8015064:	e07f      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	2b02      	cmp	r3, #2
 801506c:	d003      	beq.n	8015076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015072:	2b03      	cmp	r3, #3
 8015074:	d107      	bne.n	8015086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015076:	4b3f      	ldr	r3, [pc, #252]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801507e:	2b00      	cmp	r3, #0
 8015080:	d109      	bne.n	8015096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015082:	2301      	movs	r3, #1
 8015084:	e06f      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015086:	4b3b      	ldr	r3, [pc, #236]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f003 0302 	and.w	r3, r3, #2
 801508e:	2b00      	cmp	r3, #0
 8015090:	d101      	bne.n	8015096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015092:	2301      	movs	r3, #1
 8015094:	e067      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015096:	4b37      	ldr	r3, [pc, #220]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015098:	689b      	ldr	r3, [r3, #8]
 801509a:	f023 0203 	bic.w	r2, r3, #3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	4934      	ldr	r1, [pc, #208]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 80150a4:	4313      	orrs	r3, r2
 80150a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80150a8:	f7fe fa4c 	bl	8013544 <HAL_GetTick>
 80150ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80150ae:	e00a      	b.n	80150c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80150b0:	f7fe fa48 	bl	8013544 <HAL_GetTick>
 80150b4:	4602      	mov	r2, r0
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	1ad3      	subs	r3, r2, r3
 80150ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80150be:	4293      	cmp	r3, r2
 80150c0:	d901      	bls.n	80150c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80150c2:	2303      	movs	r3, #3
 80150c4:	e04f      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80150c6:	4b2b      	ldr	r3, [pc, #172]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 80150c8:	689b      	ldr	r3, [r3, #8]
 80150ca:	f003 020c 	and.w	r2, r3, #12
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	009b      	lsls	r3, r3, #2
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d1eb      	bne.n	80150b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80150d8:	4b25      	ldr	r3, [pc, #148]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	f003 0307 	and.w	r3, r3, #7
 80150e0:	683a      	ldr	r2, [r7, #0]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d20c      	bcs.n	8015100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80150e6:	4b22      	ldr	r3, [pc, #136]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 80150e8:	683a      	ldr	r2, [r7, #0]
 80150ea:	b2d2      	uxtb	r2, r2
 80150ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80150ee:	4b20      	ldr	r3, [pc, #128]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	f003 0307 	and.w	r3, r3, #7
 80150f6:	683a      	ldr	r2, [r7, #0]
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d001      	beq.n	8015100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80150fc:	2301      	movs	r3, #1
 80150fe:	e032      	b.n	8015166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	f003 0304 	and.w	r3, r3, #4
 8015108:	2b00      	cmp	r3, #0
 801510a:	d008      	beq.n	801511e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801510c:	4b19      	ldr	r3, [pc, #100]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801510e:	689b      	ldr	r3, [r3, #8]
 8015110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	4916      	ldr	r1, [pc, #88]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801511a:	4313      	orrs	r3, r2
 801511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	f003 0308 	and.w	r3, r3, #8
 8015126:	2b00      	cmp	r3, #0
 8015128:	d009      	beq.n	801513e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801512a:	4b12      	ldr	r3, [pc, #72]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801512c:	689b      	ldr	r3, [r3, #8]
 801512e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	691b      	ldr	r3, [r3, #16]
 8015136:	00db      	lsls	r3, r3, #3
 8015138:	490e      	ldr	r1, [pc, #56]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801513a:	4313      	orrs	r3, r2
 801513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801513e:	f000 f821 	bl	8015184 <HAL_RCC_GetSysClockFreq>
 8015142:	4602      	mov	r2, r0
 8015144:	4b0b      	ldr	r3, [pc, #44]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 8015146:	689b      	ldr	r3, [r3, #8]
 8015148:	091b      	lsrs	r3, r3, #4
 801514a:	f003 030f 	and.w	r3, r3, #15
 801514e:	490a      	ldr	r1, [pc, #40]	; (8015178 <HAL_RCC_ClockConfig+0x1c0>)
 8015150:	5ccb      	ldrb	r3, [r1, r3]
 8015152:	fa22 f303 	lsr.w	r3, r2, r3
 8015156:	4a09      	ldr	r2, [pc, #36]	; (801517c <HAL_RCC_ClockConfig+0x1c4>)
 8015158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801515a:	4b09      	ldr	r3, [pc, #36]	; (8015180 <HAL_RCC_ClockConfig+0x1c8>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	4618      	mov	r0, r3
 8015160:	f7fe f9ac 	bl	80134bc <HAL_InitTick>

  return HAL_OK;
 8015164:	2300      	movs	r3, #0
}
 8015166:	4618      	mov	r0, r3
 8015168:	3710      	adds	r7, #16
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	40023c00 	.word	0x40023c00
 8015174:	40023800 	.word	0x40023800
 8015178:	0801bae0 	.word	0x0801bae0
 801517c:	20000004 	.word	0x20000004
 8015180:	20000034 	.word	0x20000034

08015184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015188:	b094      	sub	sp, #80	; 0x50
 801518a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801518c:	2300      	movs	r3, #0
 801518e:	647b      	str	r3, [r7, #68]	; 0x44
 8015190:	2300      	movs	r3, #0
 8015192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015194:	2300      	movs	r3, #0
 8015196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8015198:	2300      	movs	r3, #0
 801519a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801519c:	4b79      	ldr	r3, [pc, #484]	; (8015384 <HAL_RCC_GetSysClockFreq+0x200>)
 801519e:	689b      	ldr	r3, [r3, #8]
 80151a0:	f003 030c 	and.w	r3, r3, #12
 80151a4:	2b08      	cmp	r3, #8
 80151a6:	d00d      	beq.n	80151c4 <HAL_RCC_GetSysClockFreq+0x40>
 80151a8:	2b08      	cmp	r3, #8
 80151aa:	f200 80e1 	bhi.w	8015370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d002      	beq.n	80151b8 <HAL_RCC_GetSysClockFreq+0x34>
 80151b2:	2b04      	cmp	r3, #4
 80151b4:	d003      	beq.n	80151be <HAL_RCC_GetSysClockFreq+0x3a>
 80151b6:	e0db      	b.n	8015370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80151b8:	4b73      	ldr	r3, [pc, #460]	; (8015388 <HAL_RCC_GetSysClockFreq+0x204>)
 80151ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80151bc:	e0db      	b.n	8015376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80151be:	4b73      	ldr	r3, [pc, #460]	; (801538c <HAL_RCC_GetSysClockFreq+0x208>)
 80151c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80151c2:	e0d8      	b.n	8015376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80151c4:	4b6f      	ldr	r3, [pc, #444]	; (8015384 <HAL_RCC_GetSysClockFreq+0x200>)
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80151cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80151ce:	4b6d      	ldr	r3, [pc, #436]	; (8015384 <HAL_RCC_GetSysClockFreq+0x200>)
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d063      	beq.n	80152a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80151da:	4b6a      	ldr	r3, [pc, #424]	; (8015384 <HAL_RCC_GetSysClockFreq+0x200>)
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	099b      	lsrs	r3, r3, #6
 80151e0:	2200      	movs	r2, #0
 80151e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80151e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80151e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151ec:	633b      	str	r3, [r7, #48]	; 0x30
 80151ee:	2300      	movs	r3, #0
 80151f0:	637b      	str	r3, [r7, #52]	; 0x34
 80151f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80151f6:	4622      	mov	r2, r4
 80151f8:	462b      	mov	r3, r5
 80151fa:	f04f 0000 	mov.w	r0, #0
 80151fe:	f04f 0100 	mov.w	r1, #0
 8015202:	0159      	lsls	r1, r3, #5
 8015204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8015208:	0150      	lsls	r0, r2, #5
 801520a:	4602      	mov	r2, r0
 801520c:	460b      	mov	r3, r1
 801520e:	4621      	mov	r1, r4
 8015210:	1a51      	subs	r1, r2, r1
 8015212:	6139      	str	r1, [r7, #16]
 8015214:	4629      	mov	r1, r5
 8015216:	eb63 0301 	sbc.w	r3, r3, r1
 801521a:	617b      	str	r3, [r7, #20]
 801521c:	f04f 0200 	mov.w	r2, #0
 8015220:	f04f 0300 	mov.w	r3, #0
 8015224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015228:	4659      	mov	r1, fp
 801522a:	018b      	lsls	r3, r1, #6
 801522c:	4651      	mov	r1, sl
 801522e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8015232:	4651      	mov	r1, sl
 8015234:	018a      	lsls	r2, r1, #6
 8015236:	4651      	mov	r1, sl
 8015238:	ebb2 0801 	subs.w	r8, r2, r1
 801523c:	4659      	mov	r1, fp
 801523e:	eb63 0901 	sbc.w	r9, r3, r1
 8015242:	f04f 0200 	mov.w	r2, #0
 8015246:	f04f 0300 	mov.w	r3, #0
 801524a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801524e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8015252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8015256:	4690      	mov	r8, r2
 8015258:	4699      	mov	r9, r3
 801525a:	4623      	mov	r3, r4
 801525c:	eb18 0303 	adds.w	r3, r8, r3
 8015260:	60bb      	str	r3, [r7, #8]
 8015262:	462b      	mov	r3, r5
 8015264:	eb49 0303 	adc.w	r3, r9, r3
 8015268:	60fb      	str	r3, [r7, #12]
 801526a:	f04f 0200 	mov.w	r2, #0
 801526e:	f04f 0300 	mov.w	r3, #0
 8015272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015276:	4629      	mov	r1, r5
 8015278:	024b      	lsls	r3, r1, #9
 801527a:	4621      	mov	r1, r4
 801527c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8015280:	4621      	mov	r1, r4
 8015282:	024a      	lsls	r2, r1, #9
 8015284:	4610      	mov	r0, r2
 8015286:	4619      	mov	r1, r3
 8015288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801528a:	2200      	movs	r2, #0
 801528c:	62bb      	str	r3, [r7, #40]	; 0x28
 801528e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015294:	f7eb fd60 	bl	8000d58 <__aeabi_uldivmod>
 8015298:	4602      	mov	r2, r0
 801529a:	460b      	mov	r3, r1
 801529c:	4613      	mov	r3, r2
 801529e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80152a0:	e058      	b.n	8015354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80152a2:	4b38      	ldr	r3, [pc, #224]	; (8015384 <HAL_RCC_GetSysClockFreq+0x200>)
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	099b      	lsrs	r3, r3, #6
 80152a8:	2200      	movs	r2, #0
 80152aa:	4618      	mov	r0, r3
 80152ac:	4611      	mov	r1, r2
 80152ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80152b2:	623b      	str	r3, [r7, #32]
 80152b4:	2300      	movs	r3, #0
 80152b6:	627b      	str	r3, [r7, #36]	; 0x24
 80152b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80152bc:	4642      	mov	r2, r8
 80152be:	464b      	mov	r3, r9
 80152c0:	f04f 0000 	mov.w	r0, #0
 80152c4:	f04f 0100 	mov.w	r1, #0
 80152c8:	0159      	lsls	r1, r3, #5
 80152ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80152ce:	0150      	lsls	r0, r2, #5
 80152d0:	4602      	mov	r2, r0
 80152d2:	460b      	mov	r3, r1
 80152d4:	4641      	mov	r1, r8
 80152d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80152da:	4649      	mov	r1, r9
 80152dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80152e0:	f04f 0200 	mov.w	r2, #0
 80152e4:	f04f 0300 	mov.w	r3, #0
 80152e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80152ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80152f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80152f4:	ebb2 040a 	subs.w	r4, r2, sl
 80152f8:	eb63 050b 	sbc.w	r5, r3, fp
 80152fc:	f04f 0200 	mov.w	r2, #0
 8015300:	f04f 0300 	mov.w	r3, #0
 8015304:	00eb      	lsls	r3, r5, #3
 8015306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801530a:	00e2      	lsls	r2, r4, #3
 801530c:	4614      	mov	r4, r2
 801530e:	461d      	mov	r5, r3
 8015310:	4643      	mov	r3, r8
 8015312:	18e3      	adds	r3, r4, r3
 8015314:	603b      	str	r3, [r7, #0]
 8015316:	464b      	mov	r3, r9
 8015318:	eb45 0303 	adc.w	r3, r5, r3
 801531c:	607b      	str	r3, [r7, #4]
 801531e:	f04f 0200 	mov.w	r2, #0
 8015322:	f04f 0300 	mov.w	r3, #0
 8015326:	e9d7 4500 	ldrd	r4, r5, [r7]
 801532a:	4629      	mov	r1, r5
 801532c:	028b      	lsls	r3, r1, #10
 801532e:	4621      	mov	r1, r4
 8015330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8015334:	4621      	mov	r1, r4
 8015336:	028a      	lsls	r2, r1, #10
 8015338:	4610      	mov	r0, r2
 801533a:	4619      	mov	r1, r3
 801533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801533e:	2200      	movs	r2, #0
 8015340:	61bb      	str	r3, [r7, #24]
 8015342:	61fa      	str	r2, [r7, #28]
 8015344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015348:	f7eb fd06 	bl	8000d58 <__aeabi_uldivmod>
 801534c:	4602      	mov	r2, r0
 801534e:	460b      	mov	r3, r1
 8015350:	4613      	mov	r3, r2
 8015352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8015354:	4b0b      	ldr	r3, [pc, #44]	; (8015384 <HAL_RCC_GetSysClockFreq+0x200>)
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	0c1b      	lsrs	r3, r3, #16
 801535a:	f003 0303 	and.w	r3, r3, #3
 801535e:	3301      	adds	r3, #1
 8015360:	005b      	lsls	r3, r3, #1
 8015362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8015364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015368:	fbb2 f3f3 	udiv	r3, r2, r3
 801536c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801536e:	e002      	b.n	8015376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8015370:	4b05      	ldr	r3, [pc, #20]	; (8015388 <HAL_RCC_GetSysClockFreq+0x204>)
 8015372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8015374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8015376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8015378:	4618      	mov	r0, r3
 801537a:	3750      	adds	r7, #80	; 0x50
 801537c:	46bd      	mov	sp, r7
 801537e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015382:	bf00      	nop
 8015384:	40023800 	.word	0x40023800
 8015388:	00f42400 	.word	0x00f42400
 801538c:	007a1200 	.word	0x007a1200

08015390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015390:	b480      	push	{r7}
 8015392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015394:	4b03      	ldr	r3, [pc, #12]	; (80153a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8015396:	681b      	ldr	r3, [r3, #0]
}
 8015398:	4618      	mov	r0, r3
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr
 80153a2:	bf00      	nop
 80153a4:	20000004 	.word	0x20000004

080153a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80153ac:	f7ff fff0 	bl	8015390 <HAL_RCC_GetHCLKFreq>
 80153b0:	4602      	mov	r2, r0
 80153b2:	4b05      	ldr	r3, [pc, #20]	; (80153c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80153b4:	689b      	ldr	r3, [r3, #8]
 80153b6:	0a9b      	lsrs	r3, r3, #10
 80153b8:	f003 0307 	and.w	r3, r3, #7
 80153bc:	4903      	ldr	r1, [pc, #12]	; (80153cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80153be:	5ccb      	ldrb	r3, [r1, r3]
 80153c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80153c4:	4618      	mov	r0, r3
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	40023800 	.word	0x40023800
 80153cc:	0801baf0 	.word	0x0801baf0

080153d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80153d4:	f7ff ffdc 	bl	8015390 <HAL_RCC_GetHCLKFreq>
 80153d8:	4602      	mov	r2, r0
 80153da:	4b05      	ldr	r3, [pc, #20]	; (80153f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80153dc:	689b      	ldr	r3, [r3, #8]
 80153de:	0b5b      	lsrs	r3, r3, #13
 80153e0:	f003 0307 	and.w	r3, r3, #7
 80153e4:	4903      	ldr	r1, [pc, #12]	; (80153f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80153e6:	5ccb      	ldrb	r3, [r1, r3]
 80153e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	40023800 	.word	0x40023800
 80153f4:	0801baf0 	.word	0x0801baf0

080153f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d101      	bne.n	801540a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015406:	2301      	movs	r3, #1
 8015408:	e041      	b.n	801548e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015410:	b2db      	uxtb	r3, r3
 8015412:	2b00      	cmp	r3, #0
 8015414:	d106      	bne.n	8015424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f7ec ff74 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2202      	movs	r2, #2
 8015428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	3304      	adds	r3, #4
 8015434:	4619      	mov	r1, r3
 8015436:	4610      	mov	r0, r2
 8015438:	f000 f950 	bl	80156dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2201      	movs	r2, #1
 8015448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2201      	movs	r2, #1
 8015450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2201      	movs	r2, #1
 8015458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2201      	movs	r2, #1
 8015460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2201      	movs	r2, #1
 8015468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2201      	movs	r2, #1
 8015470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	2201      	movs	r2, #1
 8015478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2201      	movs	r2, #1
 8015480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2201      	movs	r2, #1
 8015488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801548c:	2300      	movs	r3, #0
}
 801548e:	4618      	mov	r0, r3
 8015490:	3708      	adds	r7, #8
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
	...

08015498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015498:	b480      	push	{r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154a6:	b2db      	uxtb	r3, r3
 80154a8:	2b01      	cmp	r3, #1
 80154aa:	d001      	beq.n	80154b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80154ac:	2301      	movs	r3, #1
 80154ae:	e03c      	b.n	801552a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2202      	movs	r2, #2
 80154b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	4a1e      	ldr	r2, [pc, #120]	; (8015538 <HAL_TIM_Base_Start+0xa0>)
 80154be:	4293      	cmp	r3, r2
 80154c0:	d018      	beq.n	80154f4 <HAL_TIM_Base_Start+0x5c>
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154ca:	d013      	beq.n	80154f4 <HAL_TIM_Base_Start+0x5c>
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	4a1a      	ldr	r2, [pc, #104]	; (801553c <HAL_TIM_Base_Start+0xa4>)
 80154d2:	4293      	cmp	r3, r2
 80154d4:	d00e      	beq.n	80154f4 <HAL_TIM_Base_Start+0x5c>
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	4a19      	ldr	r2, [pc, #100]	; (8015540 <HAL_TIM_Base_Start+0xa8>)
 80154dc:	4293      	cmp	r3, r2
 80154de:	d009      	beq.n	80154f4 <HAL_TIM_Base_Start+0x5c>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	4a17      	ldr	r2, [pc, #92]	; (8015544 <HAL_TIM_Base_Start+0xac>)
 80154e6:	4293      	cmp	r3, r2
 80154e8:	d004      	beq.n	80154f4 <HAL_TIM_Base_Start+0x5c>
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	4a16      	ldr	r2, [pc, #88]	; (8015548 <HAL_TIM_Base_Start+0xb0>)
 80154f0:	4293      	cmp	r3, r2
 80154f2:	d111      	bne.n	8015518 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	689b      	ldr	r3, [r3, #8]
 80154fa:	f003 0307 	and.w	r3, r3, #7
 80154fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2b06      	cmp	r3, #6
 8015504:	d010      	beq.n	8015528 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f042 0201 	orr.w	r2, r2, #1
 8015514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015516:	e007      	b.n	8015528 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	681a      	ldr	r2, [r3, #0]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	f042 0201 	orr.w	r2, r2, #1
 8015526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3714      	adds	r7, #20
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop
 8015538:	40010000 	.word	0x40010000
 801553c:	40000400 	.word	0x40000400
 8015540:	40000800 	.word	0x40000800
 8015544:	40000c00 	.word	0x40000c00
 8015548:	40014000 	.word	0x40014000

0801554c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015556:	2300      	movs	r3, #0
 8015558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015560:	2b01      	cmp	r3, #1
 8015562:	d101      	bne.n	8015568 <HAL_TIM_ConfigClockSource+0x1c>
 8015564:	2302      	movs	r3, #2
 8015566:	e0b4      	b.n	80156d2 <HAL_TIM_ConfigClockSource+0x186>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2201      	movs	r2, #1
 801556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2202      	movs	r2, #2
 8015574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	689b      	ldr	r3, [r3, #8]
 801557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801558e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	68ba      	ldr	r2, [r7, #8]
 8015596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80155a0:	d03e      	beq.n	8015620 <HAL_TIM_ConfigClockSource+0xd4>
 80155a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80155a6:	f200 8087 	bhi.w	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80155ae:	f000 8086 	beq.w	80156be <HAL_TIM_ConfigClockSource+0x172>
 80155b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80155b6:	d87f      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155b8:	2b70      	cmp	r3, #112	; 0x70
 80155ba:	d01a      	beq.n	80155f2 <HAL_TIM_ConfigClockSource+0xa6>
 80155bc:	2b70      	cmp	r3, #112	; 0x70
 80155be:	d87b      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155c0:	2b60      	cmp	r3, #96	; 0x60
 80155c2:	d050      	beq.n	8015666 <HAL_TIM_ConfigClockSource+0x11a>
 80155c4:	2b60      	cmp	r3, #96	; 0x60
 80155c6:	d877      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155c8:	2b50      	cmp	r3, #80	; 0x50
 80155ca:	d03c      	beq.n	8015646 <HAL_TIM_ConfigClockSource+0xfa>
 80155cc:	2b50      	cmp	r3, #80	; 0x50
 80155ce:	d873      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155d0:	2b40      	cmp	r3, #64	; 0x40
 80155d2:	d058      	beq.n	8015686 <HAL_TIM_ConfigClockSource+0x13a>
 80155d4:	2b40      	cmp	r3, #64	; 0x40
 80155d6:	d86f      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155d8:	2b30      	cmp	r3, #48	; 0x30
 80155da:	d064      	beq.n	80156a6 <HAL_TIM_ConfigClockSource+0x15a>
 80155dc:	2b30      	cmp	r3, #48	; 0x30
 80155de:	d86b      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155e0:	2b20      	cmp	r3, #32
 80155e2:	d060      	beq.n	80156a6 <HAL_TIM_ConfigClockSource+0x15a>
 80155e4:	2b20      	cmp	r3, #32
 80155e6:	d867      	bhi.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d05c      	beq.n	80156a6 <HAL_TIM_ConfigClockSource+0x15a>
 80155ec:	2b10      	cmp	r3, #16
 80155ee:	d05a      	beq.n	80156a6 <HAL_TIM_ConfigClockSource+0x15a>
 80155f0:	e062      	b.n	80156b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6818      	ldr	r0, [r3, #0]
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	6899      	ldr	r1, [r3, #8]
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	685a      	ldr	r2, [r3, #4]
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	f000 f965 	bl	80158d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	68ba      	ldr	r2, [r7, #8]
 801561c:	609a      	str	r2, [r3, #8]
      break;
 801561e:	e04f      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6818      	ldr	r0, [r3, #0]
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	6899      	ldr	r1, [r3, #8]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	685a      	ldr	r2, [r3, #4]
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	f000 f94e 	bl	80158d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	689a      	ldr	r2, [r3, #8]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015642:	609a      	str	r2, [r3, #8]
      break;
 8015644:	e03c      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6818      	ldr	r0, [r3, #0]
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	6859      	ldr	r1, [r3, #4]
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	461a      	mov	r2, r3
 8015654:	f000 f8c2 	bl	80157dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2150      	movs	r1, #80	; 0x50
 801565e:	4618      	mov	r0, r3
 8015660:	f000 f91b 	bl	801589a <TIM_ITRx_SetConfig>
      break;
 8015664:	e02c      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	6818      	ldr	r0, [r3, #0]
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	6859      	ldr	r1, [r3, #4]
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	461a      	mov	r2, r3
 8015674:	f000 f8e1 	bl	801583a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	2160      	movs	r1, #96	; 0x60
 801567e:	4618      	mov	r0, r3
 8015680:	f000 f90b 	bl	801589a <TIM_ITRx_SetConfig>
      break;
 8015684:	e01c      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6818      	ldr	r0, [r3, #0]
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	6859      	ldr	r1, [r3, #4]
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	461a      	mov	r2, r3
 8015694:	f000 f8a2 	bl	80157dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2140      	movs	r1, #64	; 0x40
 801569e:	4618      	mov	r0, r3
 80156a0:	f000 f8fb 	bl	801589a <TIM_ITRx_SetConfig>
      break;
 80156a4:	e00c      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681a      	ldr	r2, [r3, #0]
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	4619      	mov	r1, r3
 80156b0:	4610      	mov	r0, r2
 80156b2:	f000 f8f2 	bl	801589a <TIM_ITRx_SetConfig>
      break;
 80156b6:	e003      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80156b8:	2301      	movs	r3, #1
 80156ba:	73fb      	strb	r3, [r7, #15]
      break;
 80156bc:	e000      	b.n	80156c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80156be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2201      	movs	r2, #1
 80156c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2200      	movs	r2, #0
 80156cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80156d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3710      	adds	r7, #16
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}
	...

080156dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80156dc:	b480      	push	{r7}
 80156de:	b085      	sub	sp, #20
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	4a34      	ldr	r2, [pc, #208]	; (80157c0 <TIM_Base_SetConfig+0xe4>)
 80156f0:	4293      	cmp	r3, r2
 80156f2:	d00f      	beq.n	8015714 <TIM_Base_SetConfig+0x38>
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80156fa:	d00b      	beq.n	8015714 <TIM_Base_SetConfig+0x38>
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	4a31      	ldr	r2, [pc, #196]	; (80157c4 <TIM_Base_SetConfig+0xe8>)
 8015700:	4293      	cmp	r3, r2
 8015702:	d007      	beq.n	8015714 <TIM_Base_SetConfig+0x38>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	4a30      	ldr	r2, [pc, #192]	; (80157c8 <TIM_Base_SetConfig+0xec>)
 8015708:	4293      	cmp	r3, r2
 801570a:	d003      	beq.n	8015714 <TIM_Base_SetConfig+0x38>
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	4a2f      	ldr	r2, [pc, #188]	; (80157cc <TIM_Base_SetConfig+0xf0>)
 8015710:	4293      	cmp	r3, r2
 8015712:	d108      	bne.n	8015726 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801571a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	68fa      	ldr	r2, [r7, #12]
 8015722:	4313      	orrs	r3, r2
 8015724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	4a25      	ldr	r2, [pc, #148]	; (80157c0 <TIM_Base_SetConfig+0xe4>)
 801572a:	4293      	cmp	r3, r2
 801572c:	d01b      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015734:	d017      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	4a22      	ldr	r2, [pc, #136]	; (80157c4 <TIM_Base_SetConfig+0xe8>)
 801573a:	4293      	cmp	r3, r2
 801573c:	d013      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	4a21      	ldr	r2, [pc, #132]	; (80157c8 <TIM_Base_SetConfig+0xec>)
 8015742:	4293      	cmp	r3, r2
 8015744:	d00f      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	4a20      	ldr	r2, [pc, #128]	; (80157cc <TIM_Base_SetConfig+0xf0>)
 801574a:	4293      	cmp	r3, r2
 801574c:	d00b      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	4a1f      	ldr	r2, [pc, #124]	; (80157d0 <TIM_Base_SetConfig+0xf4>)
 8015752:	4293      	cmp	r3, r2
 8015754:	d007      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	4a1e      	ldr	r2, [pc, #120]	; (80157d4 <TIM_Base_SetConfig+0xf8>)
 801575a:	4293      	cmp	r3, r2
 801575c:	d003      	beq.n	8015766 <TIM_Base_SetConfig+0x8a>
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	4a1d      	ldr	r2, [pc, #116]	; (80157d8 <TIM_Base_SetConfig+0xfc>)
 8015762:	4293      	cmp	r3, r2
 8015764:	d108      	bne.n	8015778 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801576c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	68db      	ldr	r3, [r3, #12]
 8015772:	68fa      	ldr	r2, [r7, #12]
 8015774:	4313      	orrs	r3, r2
 8015776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	695b      	ldr	r3, [r3, #20]
 8015782:	4313      	orrs	r3, r2
 8015784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	68fa      	ldr	r2, [r7, #12]
 801578a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	689a      	ldr	r2, [r3, #8]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	4a08      	ldr	r2, [pc, #32]	; (80157c0 <TIM_Base_SetConfig+0xe4>)
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d103      	bne.n	80157ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	691a      	ldr	r2, [r3, #16]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2201      	movs	r2, #1
 80157b0:	615a      	str	r2, [r3, #20]
}
 80157b2:	bf00      	nop
 80157b4:	3714      	adds	r7, #20
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	40010000 	.word	0x40010000
 80157c4:	40000400 	.word	0x40000400
 80157c8:	40000800 	.word	0x40000800
 80157cc:	40000c00 	.word	0x40000c00
 80157d0:	40014000 	.word	0x40014000
 80157d4:	40014400 	.word	0x40014400
 80157d8:	40014800 	.word	0x40014800

080157dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80157dc:	b480      	push	{r7}
 80157de:	b087      	sub	sp, #28
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	6a1b      	ldr	r3, [r3, #32]
 80157ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6a1b      	ldr	r3, [r3, #32]
 80157f2:	f023 0201 	bic.w	r2, r3, #1
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	699b      	ldr	r3, [r3, #24]
 80157fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	011b      	lsls	r3, r3, #4
 801580c:	693a      	ldr	r2, [r7, #16]
 801580e:	4313      	orrs	r3, r2
 8015810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	f023 030a 	bic.w	r3, r3, #10
 8015818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801581a:	697a      	ldr	r2, [r7, #20]
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	4313      	orrs	r3, r2
 8015820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	693a      	ldr	r2, [r7, #16]
 8015826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	697a      	ldr	r2, [r7, #20]
 801582c:	621a      	str	r2, [r3, #32]
}
 801582e:	bf00      	nop
 8015830:	371c      	adds	r7, #28
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr

0801583a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801583a:	b480      	push	{r7}
 801583c:	b087      	sub	sp, #28
 801583e:	af00      	add	r7, sp, #0
 8015840:	60f8      	str	r0, [r7, #12]
 8015842:	60b9      	str	r1, [r7, #8]
 8015844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	6a1b      	ldr	r3, [r3, #32]
 801584a:	f023 0210 	bic.w	r2, r3, #16
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	699b      	ldr	r3, [r3, #24]
 8015856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	6a1b      	ldr	r3, [r3, #32]
 801585c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	031b      	lsls	r3, r3, #12
 801586a:	697a      	ldr	r2, [r7, #20]
 801586c:	4313      	orrs	r3, r2
 801586e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	011b      	lsls	r3, r3, #4
 801587c:	693a      	ldr	r2, [r7, #16]
 801587e:	4313      	orrs	r3, r2
 8015880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	697a      	ldr	r2, [r7, #20]
 8015886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	693a      	ldr	r2, [r7, #16]
 801588c:	621a      	str	r2, [r3, #32]
}
 801588e:	bf00      	nop
 8015890:	371c      	adds	r7, #28
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr

0801589a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801589a:	b480      	push	{r7}
 801589c:	b085      	sub	sp, #20
 801589e:	af00      	add	r7, sp, #0
 80158a0:	6078      	str	r0, [r7, #4]
 80158a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80158b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80158b2:	683a      	ldr	r2, [r7, #0]
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	4313      	orrs	r3, r2
 80158b8:	f043 0307 	orr.w	r3, r3, #7
 80158bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	68fa      	ldr	r2, [r7, #12]
 80158c2:	609a      	str	r2, [r3, #8]
}
 80158c4:	bf00      	nop
 80158c6:	3714      	adds	r7, #20
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b087      	sub	sp, #28
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	607a      	str	r2, [r7, #4]
 80158dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	689b      	ldr	r3, [r3, #8]
 80158e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80158ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	021a      	lsls	r2, r3, #8
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	431a      	orrs	r2, r3
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	4313      	orrs	r3, r2
 80158f8:	697a      	ldr	r2, [r7, #20]
 80158fa:	4313      	orrs	r3, r2
 80158fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	697a      	ldr	r2, [r7, #20]
 8015902:	609a      	str	r2, [r3, #8]
}
 8015904:	bf00      	nop
 8015906:	371c      	adds	r7, #28
 8015908:	46bd      	mov	sp, r7
 801590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590e:	4770      	bx	lr

08015910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015910:	b480      	push	{r7}
 8015912:	b085      	sub	sp, #20
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015920:	2b01      	cmp	r3, #1
 8015922:	d101      	bne.n	8015928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015924:	2302      	movs	r3, #2
 8015926:	e050      	b.n	80159ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2201      	movs	r2, #1
 801592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2202      	movs	r2, #2
 8015934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801594e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	68fa      	ldr	r2, [r7, #12]
 8015956:	4313      	orrs	r3, r2
 8015958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	68fa      	ldr	r2, [r7, #12]
 8015960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4a1c      	ldr	r2, [pc, #112]	; (80159d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8015968:	4293      	cmp	r3, r2
 801596a:	d018      	beq.n	801599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015974:	d013      	beq.n	801599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	4a18      	ldr	r2, [pc, #96]	; (80159dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801597c:	4293      	cmp	r3, r2
 801597e:	d00e      	beq.n	801599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	4a16      	ldr	r2, [pc, #88]	; (80159e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8015986:	4293      	cmp	r3, r2
 8015988:	d009      	beq.n	801599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	4a15      	ldr	r2, [pc, #84]	; (80159e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8015990:	4293      	cmp	r3, r2
 8015992:	d004      	beq.n	801599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4a13      	ldr	r2, [pc, #76]	; (80159e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801599a:	4293      	cmp	r3, r2
 801599c:	d10c      	bne.n	80159b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80159a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	68ba      	ldr	r2, [r7, #8]
 80159ac:	4313      	orrs	r3, r2
 80159ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	68ba      	ldr	r2, [r7, #8]
 80159b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2201      	movs	r2, #1
 80159bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2200      	movs	r2, #0
 80159c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80159c8:	2300      	movs	r3, #0
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	3714      	adds	r7, #20
 80159ce:	46bd      	mov	sp, r7
 80159d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	40010000 	.word	0x40010000
 80159dc:	40000400 	.word	0x40000400
 80159e0:	40000800 	.word	0x40000800
 80159e4:	40000c00 	.word	0x40000c00
 80159e8:	40014000 	.word	0x40014000

080159ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d101      	bne.n	80159fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80159fa:	2301      	movs	r3, #1
 80159fc:	e03f      	b.n	8015a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d106      	bne.n	8015a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7ec fc9c 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2224      	movs	r2, #36	; 0x24
 8015a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	68da      	ldr	r2, [r3, #12]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f000 f929 	bl	8015c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	691a      	ldr	r2, [r3, #16]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	695a      	ldr	r2, [r3, #20]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	68da      	ldr	r2, [r3, #12]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2220      	movs	r2, #32
 8015a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2220      	movs	r2, #32
 8015a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015a7c:	2300      	movs	r3, #0
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3708      	adds	r7, #8
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}

08015a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015a86:	b580      	push	{r7, lr}
 8015a88:	b08a      	sub	sp, #40	; 0x28
 8015a8a:	af02      	add	r7, sp, #8
 8015a8c:	60f8      	str	r0, [r7, #12]
 8015a8e:	60b9      	str	r1, [r7, #8]
 8015a90:	603b      	str	r3, [r7, #0]
 8015a92:	4613      	mov	r3, r2
 8015a94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015a96:	2300      	movs	r3, #0
 8015a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015aa0:	b2db      	uxtb	r3, r3
 8015aa2:	2b20      	cmp	r3, #32
 8015aa4:	d17c      	bne.n	8015ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d002      	beq.n	8015ab2 <HAL_UART_Transmit+0x2c>
 8015aac:	88fb      	ldrh	r3, [r7, #6]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d101      	bne.n	8015ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e075      	b.n	8015ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d101      	bne.n	8015ac4 <HAL_UART_Transmit+0x3e>
 8015ac0:	2302      	movs	r3, #2
 8015ac2:	e06e      	b.n	8015ba2 <HAL_UART_Transmit+0x11c>
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2221      	movs	r2, #33	; 0x21
 8015ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015ada:	f7fd fd33 	bl	8013544 <HAL_GetTick>
 8015ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	88fa      	ldrh	r2, [r7, #6]
 8015ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	88fa      	ldrh	r2, [r7, #6]
 8015aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	689b      	ldr	r3, [r3, #8]
 8015af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015af4:	d108      	bne.n	8015b08 <HAL_UART_Transmit+0x82>
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d104      	bne.n	8015b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015afe:	2300      	movs	r3, #0
 8015b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	61bb      	str	r3, [r7, #24]
 8015b06:	e003      	b.n	8015b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	2200      	movs	r2, #0
 8015b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8015b18:	e02a      	b.n	8015b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	9300      	str	r3, [sp, #0]
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	2200      	movs	r2, #0
 8015b22:	2180      	movs	r1, #128	; 0x80
 8015b24:	68f8      	ldr	r0, [r7, #12]
 8015b26:	f000 f840 	bl	8015baa <UART_WaitOnFlagUntilTimeout>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d001      	beq.n	8015b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015b30:	2303      	movs	r3, #3
 8015b32:	e036      	b.n	8015ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d10b      	bne.n	8015b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	881b      	ldrh	r3, [r3, #0]
 8015b3e:	461a      	mov	r2, r3
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015b4a:	69bb      	ldr	r3, [r7, #24]
 8015b4c:	3302      	adds	r3, #2
 8015b4e:	61bb      	str	r3, [r7, #24]
 8015b50:	e007      	b.n	8015b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8015b52:	69fb      	ldr	r3, [r7, #28]
 8015b54:	781a      	ldrb	r2, [r3, #0]
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	3301      	adds	r3, #1
 8015b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	3b01      	subs	r3, #1
 8015b6a:	b29a      	uxth	r2, r3
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d1cf      	bne.n	8015b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	9300      	str	r3, [sp, #0]
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	2200      	movs	r2, #0
 8015b82:	2140      	movs	r1, #64	; 0x40
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f000 f810 	bl	8015baa <UART_WaitOnFlagUntilTimeout>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d001      	beq.n	8015b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015b90:	2303      	movs	r3, #3
 8015b92:	e006      	b.n	8015ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2220      	movs	r2, #32
 8015b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	e000      	b.n	8015ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015ba0:	2302      	movs	r3, #2
  }
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3720      	adds	r7, #32
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}

08015baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8015baa:	b580      	push	{r7, lr}
 8015bac:	b090      	sub	sp, #64	; 0x40
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	60f8      	str	r0, [r7, #12]
 8015bb2:	60b9      	str	r1, [r7, #8]
 8015bb4:	603b      	str	r3, [r7, #0]
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015bba:	e050      	b.n	8015c5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bc2:	d04c      	beq.n	8015c5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8015bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d007      	beq.n	8015bda <UART_WaitOnFlagUntilTimeout+0x30>
 8015bca:	f7fd fcbb 	bl	8013544 <HAL_GetTick>
 8015bce:	4602      	mov	r2, r0
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	1ad3      	subs	r3, r2, r3
 8015bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d241      	bcs.n	8015c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	330c      	adds	r3, #12
 8015be0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be4:	e853 3f00 	ldrex	r3, [r3]
 8015be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	330c      	adds	r3, #12
 8015bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015bfa:	637a      	str	r2, [r7, #52]	; 0x34
 8015bfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c02:	e841 2300 	strex	r3, r2, [r1]
 8015c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d1e5      	bne.n	8015bda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	3314      	adds	r3, #20
 8015c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	e853 3f00 	ldrex	r3, [r3]
 8015c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	f023 0301 	bic.w	r3, r3, #1
 8015c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	3314      	adds	r3, #20
 8015c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c2e:	623a      	str	r2, [r7, #32]
 8015c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c32:	69f9      	ldr	r1, [r7, #28]
 8015c34:	6a3a      	ldr	r2, [r7, #32]
 8015c36:	e841 2300 	strex	r3, r2, [r1]
 8015c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8015c3c:	69bb      	ldr	r3, [r7, #24]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d1e5      	bne.n	8015c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	2220      	movs	r2, #32
 8015c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	2220      	movs	r2, #32
 8015c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2200      	movs	r2, #0
 8015c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8015c5a:	2303      	movs	r3, #3
 8015c5c:	e00f      	b.n	8015c7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	4013      	ands	r3, r2
 8015c68:	68ba      	ldr	r2, [r7, #8]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	bf0c      	ite	eq
 8015c6e:	2301      	moveq	r3, #1
 8015c70:	2300      	movne	r3, #0
 8015c72:	b2db      	uxtb	r3, r3
 8015c74:	461a      	mov	r2, r3
 8015c76:	79fb      	ldrb	r3, [r7, #7]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d09f      	beq.n	8015bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015c7c:	2300      	movs	r3, #0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3740      	adds	r7, #64	; 0x40
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
	...

08015c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015c8c:	b0c0      	sub	sp, #256	; 0x100
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	691b      	ldr	r3, [r3, #16]
 8015c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8015ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015ca4:	68d9      	ldr	r1, [r3, #12]
 8015ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015caa:	681a      	ldr	r2, [r3, #0]
 8015cac:	ea40 0301 	orr.w	r3, r0, r1
 8015cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015cb6:	689a      	ldr	r2, [r3, #8]
 8015cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015cbc:	691b      	ldr	r3, [r3, #16]
 8015cbe:	431a      	orrs	r2, r3
 8015cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015cc4:	695b      	ldr	r3, [r3, #20]
 8015cc6:	431a      	orrs	r2, r3
 8015cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015ccc:	69db      	ldr	r3, [r3, #28]
 8015cce:	4313      	orrs	r3, r2
 8015cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8015ce0:	f021 010c 	bic.w	r1, r1, #12
 8015ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015cee:	430b      	orrs	r3, r1
 8015cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	695b      	ldr	r3, [r3, #20]
 8015cfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8015cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d02:	6999      	ldr	r1, [r3, #24]
 8015d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d08:	681a      	ldr	r2, [r3, #0]
 8015d0a:	ea40 0301 	orr.w	r3, r0, r1
 8015d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	4b8f      	ldr	r3, [pc, #572]	; (8015f54 <UART_SetConfig+0x2cc>)
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d005      	beq.n	8015d28 <UART_SetConfig+0xa0>
 8015d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	4b8d      	ldr	r3, [pc, #564]	; (8015f58 <UART_SetConfig+0x2d0>)
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d104      	bne.n	8015d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015d28:	f7ff fb52 	bl	80153d0 <HAL_RCC_GetPCLK2Freq>
 8015d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8015d30:	e003      	b.n	8015d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015d32:	f7ff fb39 	bl	80153a8 <HAL_RCC_GetPCLK1Freq>
 8015d36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d3e:	69db      	ldr	r3, [r3, #28]
 8015d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015d44:	f040 810c 	bne.w	8015f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8015d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8015d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8015d5a:	4622      	mov	r2, r4
 8015d5c:	462b      	mov	r3, r5
 8015d5e:	1891      	adds	r1, r2, r2
 8015d60:	65b9      	str	r1, [r7, #88]	; 0x58
 8015d62:	415b      	adcs	r3, r3
 8015d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8015d6a:	4621      	mov	r1, r4
 8015d6c:	eb12 0801 	adds.w	r8, r2, r1
 8015d70:	4629      	mov	r1, r5
 8015d72:	eb43 0901 	adc.w	r9, r3, r1
 8015d76:	f04f 0200 	mov.w	r2, #0
 8015d7a:	f04f 0300 	mov.w	r3, #0
 8015d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8015d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8015d8a:	4690      	mov	r8, r2
 8015d8c:	4699      	mov	r9, r3
 8015d8e:	4623      	mov	r3, r4
 8015d90:	eb18 0303 	adds.w	r3, r8, r3
 8015d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015d98:	462b      	mov	r3, r5
 8015d9a:	eb49 0303 	adc.w	r3, r9, r3
 8015d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	2200      	movs	r2, #0
 8015daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8015db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015db6:	460b      	mov	r3, r1
 8015db8:	18db      	adds	r3, r3, r3
 8015dba:	653b      	str	r3, [r7, #80]	; 0x50
 8015dbc:	4613      	mov	r3, r2
 8015dbe:	eb42 0303 	adc.w	r3, r2, r3
 8015dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8015dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8015dcc:	f7ea ffc4 	bl	8000d58 <__aeabi_uldivmod>
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	4b61      	ldr	r3, [pc, #388]	; (8015f5c <UART_SetConfig+0x2d4>)
 8015dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8015dda:	095b      	lsrs	r3, r3, #5
 8015ddc:	011c      	lsls	r4, r3, #4
 8015dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015de2:	2200      	movs	r2, #0
 8015de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015de8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8015dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8015df0:	4642      	mov	r2, r8
 8015df2:	464b      	mov	r3, r9
 8015df4:	1891      	adds	r1, r2, r2
 8015df6:	64b9      	str	r1, [r7, #72]	; 0x48
 8015df8:	415b      	adcs	r3, r3
 8015dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015e00:	4641      	mov	r1, r8
 8015e02:	eb12 0a01 	adds.w	sl, r2, r1
 8015e06:	4649      	mov	r1, r9
 8015e08:	eb43 0b01 	adc.w	fp, r3, r1
 8015e0c:	f04f 0200 	mov.w	r2, #0
 8015e10:	f04f 0300 	mov.w	r3, #0
 8015e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8015e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015e20:	4692      	mov	sl, r2
 8015e22:	469b      	mov	fp, r3
 8015e24:	4643      	mov	r3, r8
 8015e26:	eb1a 0303 	adds.w	r3, sl, r3
 8015e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015e2e:	464b      	mov	r3, r9
 8015e30:	eb4b 0303 	adc.w	r3, fp, r3
 8015e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015e44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015e4c:	460b      	mov	r3, r1
 8015e4e:	18db      	adds	r3, r3, r3
 8015e50:	643b      	str	r3, [r7, #64]	; 0x40
 8015e52:	4613      	mov	r3, r2
 8015e54:	eb42 0303 	adc.w	r3, r2, r3
 8015e58:	647b      	str	r3, [r7, #68]	; 0x44
 8015e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015e62:	f7ea ff79 	bl	8000d58 <__aeabi_uldivmod>
 8015e66:	4602      	mov	r2, r0
 8015e68:	460b      	mov	r3, r1
 8015e6a:	4611      	mov	r1, r2
 8015e6c:	4b3b      	ldr	r3, [pc, #236]	; (8015f5c <UART_SetConfig+0x2d4>)
 8015e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8015e72:	095b      	lsrs	r3, r3, #5
 8015e74:	2264      	movs	r2, #100	; 0x64
 8015e76:	fb02 f303 	mul.w	r3, r2, r3
 8015e7a:	1acb      	subs	r3, r1, r3
 8015e7c:	00db      	lsls	r3, r3, #3
 8015e7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8015e82:	4b36      	ldr	r3, [pc, #216]	; (8015f5c <UART_SetConfig+0x2d4>)
 8015e84:	fba3 2302 	umull	r2, r3, r3, r2
 8015e88:	095b      	lsrs	r3, r3, #5
 8015e8a:	005b      	lsls	r3, r3, #1
 8015e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015e90:	441c      	add	r4, r3
 8015e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015e96:	2200      	movs	r2, #0
 8015e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8015ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8015ea4:	4642      	mov	r2, r8
 8015ea6:	464b      	mov	r3, r9
 8015ea8:	1891      	adds	r1, r2, r2
 8015eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8015eac:	415b      	adcs	r3, r3
 8015eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015eb4:	4641      	mov	r1, r8
 8015eb6:	1851      	adds	r1, r2, r1
 8015eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8015eba:	4649      	mov	r1, r9
 8015ebc:	414b      	adcs	r3, r1
 8015ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8015ec0:	f04f 0200 	mov.w	r2, #0
 8015ec4:	f04f 0300 	mov.w	r3, #0
 8015ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8015ecc:	4659      	mov	r1, fp
 8015ece:	00cb      	lsls	r3, r1, #3
 8015ed0:	4651      	mov	r1, sl
 8015ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015ed6:	4651      	mov	r1, sl
 8015ed8:	00ca      	lsls	r2, r1, #3
 8015eda:	4610      	mov	r0, r2
 8015edc:	4619      	mov	r1, r3
 8015ede:	4603      	mov	r3, r0
 8015ee0:	4642      	mov	r2, r8
 8015ee2:	189b      	adds	r3, r3, r2
 8015ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015ee8:	464b      	mov	r3, r9
 8015eea:	460a      	mov	r2, r1
 8015eec:	eb42 0303 	adc.w	r3, r2, r3
 8015ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015f00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015f08:	460b      	mov	r3, r1
 8015f0a:	18db      	adds	r3, r3, r3
 8015f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f0e:	4613      	mov	r3, r2
 8015f10:	eb42 0303 	adc.w	r3, r2, r3
 8015f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8015f1e:	f7ea ff1b 	bl	8000d58 <__aeabi_uldivmod>
 8015f22:	4602      	mov	r2, r0
 8015f24:	460b      	mov	r3, r1
 8015f26:	4b0d      	ldr	r3, [pc, #52]	; (8015f5c <UART_SetConfig+0x2d4>)
 8015f28:	fba3 1302 	umull	r1, r3, r3, r2
 8015f2c:	095b      	lsrs	r3, r3, #5
 8015f2e:	2164      	movs	r1, #100	; 0x64
 8015f30:	fb01 f303 	mul.w	r3, r1, r3
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	00db      	lsls	r3, r3, #3
 8015f38:	3332      	adds	r3, #50	; 0x32
 8015f3a:	4a08      	ldr	r2, [pc, #32]	; (8015f5c <UART_SetConfig+0x2d4>)
 8015f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8015f40:	095b      	lsrs	r3, r3, #5
 8015f42:	f003 0207 	and.w	r2, r3, #7
 8015f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4422      	add	r2, r4
 8015f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015f50:	e105      	b.n	801615e <UART_SetConfig+0x4d6>
 8015f52:	bf00      	nop
 8015f54:	40011000 	.word	0x40011000
 8015f58:	40011400 	.word	0x40011400
 8015f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015f64:	2200      	movs	r2, #0
 8015f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8015f72:	4642      	mov	r2, r8
 8015f74:	464b      	mov	r3, r9
 8015f76:	1891      	adds	r1, r2, r2
 8015f78:	6239      	str	r1, [r7, #32]
 8015f7a:	415b      	adcs	r3, r3
 8015f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8015f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015f82:	4641      	mov	r1, r8
 8015f84:	1854      	adds	r4, r2, r1
 8015f86:	4649      	mov	r1, r9
 8015f88:	eb43 0501 	adc.w	r5, r3, r1
 8015f8c:	f04f 0200 	mov.w	r2, #0
 8015f90:	f04f 0300 	mov.w	r3, #0
 8015f94:	00eb      	lsls	r3, r5, #3
 8015f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8015f9a:	00e2      	lsls	r2, r4, #3
 8015f9c:	4614      	mov	r4, r2
 8015f9e:	461d      	mov	r5, r3
 8015fa0:	4643      	mov	r3, r8
 8015fa2:	18e3      	adds	r3, r4, r3
 8015fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015fa8:	464b      	mov	r3, r9
 8015faa:	eb45 0303 	adc.w	r3, r5, r3
 8015fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015fc2:	f04f 0200 	mov.w	r2, #0
 8015fc6:	f04f 0300 	mov.w	r3, #0
 8015fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015fce:	4629      	mov	r1, r5
 8015fd0:	008b      	lsls	r3, r1, #2
 8015fd2:	4621      	mov	r1, r4
 8015fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015fd8:	4621      	mov	r1, r4
 8015fda:	008a      	lsls	r2, r1, #2
 8015fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015fe0:	f7ea feba 	bl	8000d58 <__aeabi_uldivmod>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	4b60      	ldr	r3, [pc, #384]	; (801616c <UART_SetConfig+0x4e4>)
 8015fea:	fba3 2302 	umull	r2, r3, r3, r2
 8015fee:	095b      	lsrs	r3, r3, #5
 8015ff0:	011c      	lsls	r4, r3, #4
 8015ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8016000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8016004:	4642      	mov	r2, r8
 8016006:	464b      	mov	r3, r9
 8016008:	1891      	adds	r1, r2, r2
 801600a:	61b9      	str	r1, [r7, #24]
 801600c:	415b      	adcs	r3, r3
 801600e:	61fb      	str	r3, [r7, #28]
 8016010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016014:	4641      	mov	r1, r8
 8016016:	1851      	adds	r1, r2, r1
 8016018:	6139      	str	r1, [r7, #16]
 801601a:	4649      	mov	r1, r9
 801601c:	414b      	adcs	r3, r1
 801601e:	617b      	str	r3, [r7, #20]
 8016020:	f04f 0200 	mov.w	r2, #0
 8016024:	f04f 0300 	mov.w	r3, #0
 8016028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801602c:	4659      	mov	r1, fp
 801602e:	00cb      	lsls	r3, r1, #3
 8016030:	4651      	mov	r1, sl
 8016032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016036:	4651      	mov	r1, sl
 8016038:	00ca      	lsls	r2, r1, #3
 801603a:	4610      	mov	r0, r2
 801603c:	4619      	mov	r1, r3
 801603e:	4603      	mov	r3, r0
 8016040:	4642      	mov	r2, r8
 8016042:	189b      	adds	r3, r3, r2
 8016044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016048:	464b      	mov	r3, r9
 801604a:	460a      	mov	r2, r1
 801604c:	eb42 0303 	adc.w	r3, r2, r3
 8016050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	67bb      	str	r3, [r7, #120]	; 0x78
 801605e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8016060:	f04f 0200 	mov.w	r2, #0
 8016064:	f04f 0300 	mov.w	r3, #0
 8016068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801606c:	4649      	mov	r1, r9
 801606e:	008b      	lsls	r3, r1, #2
 8016070:	4641      	mov	r1, r8
 8016072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016076:	4641      	mov	r1, r8
 8016078:	008a      	lsls	r2, r1, #2
 801607a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801607e:	f7ea fe6b 	bl	8000d58 <__aeabi_uldivmod>
 8016082:	4602      	mov	r2, r0
 8016084:	460b      	mov	r3, r1
 8016086:	4b39      	ldr	r3, [pc, #228]	; (801616c <UART_SetConfig+0x4e4>)
 8016088:	fba3 1302 	umull	r1, r3, r3, r2
 801608c:	095b      	lsrs	r3, r3, #5
 801608e:	2164      	movs	r1, #100	; 0x64
 8016090:	fb01 f303 	mul.w	r3, r1, r3
 8016094:	1ad3      	subs	r3, r2, r3
 8016096:	011b      	lsls	r3, r3, #4
 8016098:	3332      	adds	r3, #50	; 0x32
 801609a:	4a34      	ldr	r2, [pc, #208]	; (801616c <UART_SetConfig+0x4e4>)
 801609c:	fba2 2303 	umull	r2, r3, r2, r3
 80160a0:	095b      	lsrs	r3, r3, #5
 80160a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160a6:	441c      	add	r4, r3
 80160a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80160ac:	2200      	movs	r2, #0
 80160ae:	673b      	str	r3, [r7, #112]	; 0x70
 80160b0:	677a      	str	r2, [r7, #116]	; 0x74
 80160b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80160b6:	4642      	mov	r2, r8
 80160b8:	464b      	mov	r3, r9
 80160ba:	1891      	adds	r1, r2, r2
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	415b      	adcs	r3, r3
 80160c0:	60fb      	str	r3, [r7, #12]
 80160c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80160c6:	4641      	mov	r1, r8
 80160c8:	1851      	adds	r1, r2, r1
 80160ca:	6039      	str	r1, [r7, #0]
 80160cc:	4649      	mov	r1, r9
 80160ce:	414b      	adcs	r3, r1
 80160d0:	607b      	str	r3, [r7, #4]
 80160d2:	f04f 0200 	mov.w	r2, #0
 80160d6:	f04f 0300 	mov.w	r3, #0
 80160da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80160de:	4659      	mov	r1, fp
 80160e0:	00cb      	lsls	r3, r1, #3
 80160e2:	4651      	mov	r1, sl
 80160e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80160e8:	4651      	mov	r1, sl
 80160ea:	00ca      	lsls	r2, r1, #3
 80160ec:	4610      	mov	r0, r2
 80160ee:	4619      	mov	r1, r3
 80160f0:	4603      	mov	r3, r0
 80160f2:	4642      	mov	r2, r8
 80160f4:	189b      	adds	r3, r3, r2
 80160f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80160f8:	464b      	mov	r3, r9
 80160fa:	460a      	mov	r2, r1
 80160fc:	eb42 0303 	adc.w	r3, r2, r3
 8016100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	2200      	movs	r2, #0
 801610a:	663b      	str	r3, [r7, #96]	; 0x60
 801610c:	667a      	str	r2, [r7, #100]	; 0x64
 801610e:	f04f 0200 	mov.w	r2, #0
 8016112:	f04f 0300 	mov.w	r3, #0
 8016116:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801611a:	4649      	mov	r1, r9
 801611c:	008b      	lsls	r3, r1, #2
 801611e:	4641      	mov	r1, r8
 8016120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016124:	4641      	mov	r1, r8
 8016126:	008a      	lsls	r2, r1, #2
 8016128:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801612c:	f7ea fe14 	bl	8000d58 <__aeabi_uldivmod>
 8016130:	4602      	mov	r2, r0
 8016132:	460b      	mov	r3, r1
 8016134:	4b0d      	ldr	r3, [pc, #52]	; (801616c <UART_SetConfig+0x4e4>)
 8016136:	fba3 1302 	umull	r1, r3, r3, r2
 801613a:	095b      	lsrs	r3, r3, #5
 801613c:	2164      	movs	r1, #100	; 0x64
 801613e:	fb01 f303 	mul.w	r3, r1, r3
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	011b      	lsls	r3, r3, #4
 8016146:	3332      	adds	r3, #50	; 0x32
 8016148:	4a08      	ldr	r2, [pc, #32]	; (801616c <UART_SetConfig+0x4e4>)
 801614a:	fba2 2303 	umull	r2, r3, r2, r3
 801614e:	095b      	lsrs	r3, r3, #5
 8016150:	f003 020f 	and.w	r2, r3, #15
 8016154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4422      	add	r2, r4
 801615c:	609a      	str	r2, [r3, #8]
}
 801615e:	bf00      	nop
 8016160:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8016164:	46bd      	mov	sp, r7
 8016166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801616a:	bf00      	nop
 801616c:	51eb851f 	.word	0x51eb851f

08016170 <__errno>:
 8016170:	4b01      	ldr	r3, [pc, #4]	; (8016178 <__errno+0x8>)
 8016172:	6818      	ldr	r0, [r3, #0]
 8016174:	4770      	bx	lr
 8016176:	bf00      	nop
 8016178:	2000003c 	.word	0x2000003c

0801617c <__libc_init_array>:
 801617c:	b570      	push	{r4, r5, r6, lr}
 801617e:	4d0d      	ldr	r5, [pc, #52]	; (80161b4 <__libc_init_array+0x38>)
 8016180:	4c0d      	ldr	r4, [pc, #52]	; (80161b8 <__libc_init_array+0x3c>)
 8016182:	1b64      	subs	r4, r4, r5
 8016184:	10a4      	asrs	r4, r4, #2
 8016186:	2600      	movs	r6, #0
 8016188:	42a6      	cmp	r6, r4
 801618a:	d109      	bne.n	80161a0 <__libc_init_array+0x24>
 801618c:	4d0b      	ldr	r5, [pc, #44]	; (80161bc <__libc_init_array+0x40>)
 801618e:	4c0c      	ldr	r4, [pc, #48]	; (80161c0 <__libc_init_array+0x44>)
 8016190:	f005 f8d8 	bl	801b344 <_init>
 8016194:	1b64      	subs	r4, r4, r5
 8016196:	10a4      	asrs	r4, r4, #2
 8016198:	2600      	movs	r6, #0
 801619a:	42a6      	cmp	r6, r4
 801619c:	d105      	bne.n	80161aa <__libc_init_array+0x2e>
 801619e:	bd70      	pop	{r4, r5, r6, pc}
 80161a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80161a4:	4798      	blx	r3
 80161a6:	3601      	adds	r6, #1
 80161a8:	e7ee      	b.n	8016188 <__libc_init_array+0xc>
 80161aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80161ae:	4798      	blx	r3
 80161b0:	3601      	adds	r6, #1
 80161b2:	e7f2      	b.n	801619a <__libc_init_array+0x1e>
 80161b4:	0801bfbc 	.word	0x0801bfbc
 80161b8:	0801bfbc 	.word	0x0801bfbc
 80161bc:	0801bfbc 	.word	0x0801bfbc
 80161c0:	0801bfc0 	.word	0x0801bfc0

080161c4 <memcpy>:
 80161c4:	440a      	add	r2, r1
 80161c6:	4291      	cmp	r1, r2
 80161c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80161cc:	d100      	bne.n	80161d0 <memcpy+0xc>
 80161ce:	4770      	bx	lr
 80161d0:	b510      	push	{r4, lr}
 80161d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161da:	4291      	cmp	r1, r2
 80161dc:	d1f9      	bne.n	80161d2 <memcpy+0xe>
 80161de:	bd10      	pop	{r4, pc}

080161e0 <memset>:
 80161e0:	4402      	add	r2, r0
 80161e2:	4603      	mov	r3, r0
 80161e4:	4293      	cmp	r3, r2
 80161e6:	d100      	bne.n	80161ea <memset+0xa>
 80161e8:	4770      	bx	lr
 80161ea:	f803 1b01 	strb.w	r1, [r3], #1
 80161ee:	e7f9      	b.n	80161e4 <memset+0x4>

080161f0 <__cvt>:
 80161f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161f4:	ec55 4b10 	vmov	r4, r5, d0
 80161f8:	2d00      	cmp	r5, #0
 80161fa:	460e      	mov	r6, r1
 80161fc:	4619      	mov	r1, r3
 80161fe:	462b      	mov	r3, r5
 8016200:	bfbb      	ittet	lt
 8016202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016206:	461d      	movlt	r5, r3
 8016208:	2300      	movge	r3, #0
 801620a:	232d      	movlt	r3, #45	; 0x2d
 801620c:	700b      	strb	r3, [r1, #0]
 801620e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016214:	4691      	mov	r9, r2
 8016216:	f023 0820 	bic.w	r8, r3, #32
 801621a:	bfbc      	itt	lt
 801621c:	4622      	movlt	r2, r4
 801621e:	4614      	movlt	r4, r2
 8016220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016224:	d005      	beq.n	8016232 <__cvt+0x42>
 8016226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801622a:	d100      	bne.n	801622e <__cvt+0x3e>
 801622c:	3601      	adds	r6, #1
 801622e:	2102      	movs	r1, #2
 8016230:	e000      	b.n	8016234 <__cvt+0x44>
 8016232:	2103      	movs	r1, #3
 8016234:	ab03      	add	r3, sp, #12
 8016236:	9301      	str	r3, [sp, #4]
 8016238:	ab02      	add	r3, sp, #8
 801623a:	9300      	str	r3, [sp, #0]
 801623c:	ec45 4b10 	vmov	d0, r4, r5
 8016240:	4653      	mov	r3, sl
 8016242:	4632      	mov	r2, r6
 8016244:	f001 fe54 	bl	8017ef0 <_dtoa_r>
 8016248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801624c:	4607      	mov	r7, r0
 801624e:	d102      	bne.n	8016256 <__cvt+0x66>
 8016250:	f019 0f01 	tst.w	r9, #1
 8016254:	d022      	beq.n	801629c <__cvt+0xac>
 8016256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801625a:	eb07 0906 	add.w	r9, r7, r6
 801625e:	d110      	bne.n	8016282 <__cvt+0x92>
 8016260:	783b      	ldrb	r3, [r7, #0]
 8016262:	2b30      	cmp	r3, #48	; 0x30
 8016264:	d10a      	bne.n	801627c <__cvt+0x8c>
 8016266:	2200      	movs	r2, #0
 8016268:	2300      	movs	r3, #0
 801626a:	4620      	mov	r0, r4
 801626c:	4629      	mov	r1, r5
 801626e:	f7ea fc43 	bl	8000af8 <__aeabi_dcmpeq>
 8016272:	b918      	cbnz	r0, 801627c <__cvt+0x8c>
 8016274:	f1c6 0601 	rsb	r6, r6, #1
 8016278:	f8ca 6000 	str.w	r6, [sl]
 801627c:	f8da 3000 	ldr.w	r3, [sl]
 8016280:	4499      	add	r9, r3
 8016282:	2200      	movs	r2, #0
 8016284:	2300      	movs	r3, #0
 8016286:	4620      	mov	r0, r4
 8016288:	4629      	mov	r1, r5
 801628a:	f7ea fc35 	bl	8000af8 <__aeabi_dcmpeq>
 801628e:	b108      	cbz	r0, 8016294 <__cvt+0xa4>
 8016290:	f8cd 900c 	str.w	r9, [sp, #12]
 8016294:	2230      	movs	r2, #48	; 0x30
 8016296:	9b03      	ldr	r3, [sp, #12]
 8016298:	454b      	cmp	r3, r9
 801629a:	d307      	bcc.n	80162ac <__cvt+0xbc>
 801629c:	9b03      	ldr	r3, [sp, #12]
 801629e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162a0:	1bdb      	subs	r3, r3, r7
 80162a2:	4638      	mov	r0, r7
 80162a4:	6013      	str	r3, [r2, #0]
 80162a6:	b004      	add	sp, #16
 80162a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162ac:	1c59      	adds	r1, r3, #1
 80162ae:	9103      	str	r1, [sp, #12]
 80162b0:	701a      	strb	r2, [r3, #0]
 80162b2:	e7f0      	b.n	8016296 <__cvt+0xa6>

080162b4 <__exponent>:
 80162b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162b6:	4603      	mov	r3, r0
 80162b8:	2900      	cmp	r1, #0
 80162ba:	bfb8      	it	lt
 80162bc:	4249      	neglt	r1, r1
 80162be:	f803 2b02 	strb.w	r2, [r3], #2
 80162c2:	bfb4      	ite	lt
 80162c4:	222d      	movlt	r2, #45	; 0x2d
 80162c6:	222b      	movge	r2, #43	; 0x2b
 80162c8:	2909      	cmp	r1, #9
 80162ca:	7042      	strb	r2, [r0, #1]
 80162cc:	dd2a      	ble.n	8016324 <__exponent+0x70>
 80162ce:	f10d 0407 	add.w	r4, sp, #7
 80162d2:	46a4      	mov	ip, r4
 80162d4:	270a      	movs	r7, #10
 80162d6:	46a6      	mov	lr, r4
 80162d8:	460a      	mov	r2, r1
 80162da:	fb91 f6f7 	sdiv	r6, r1, r7
 80162de:	fb07 1516 	mls	r5, r7, r6, r1
 80162e2:	3530      	adds	r5, #48	; 0x30
 80162e4:	2a63      	cmp	r2, #99	; 0x63
 80162e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80162ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80162ee:	4631      	mov	r1, r6
 80162f0:	dcf1      	bgt.n	80162d6 <__exponent+0x22>
 80162f2:	3130      	adds	r1, #48	; 0x30
 80162f4:	f1ae 0502 	sub.w	r5, lr, #2
 80162f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80162fc:	1c44      	adds	r4, r0, #1
 80162fe:	4629      	mov	r1, r5
 8016300:	4561      	cmp	r1, ip
 8016302:	d30a      	bcc.n	801631a <__exponent+0x66>
 8016304:	f10d 0209 	add.w	r2, sp, #9
 8016308:	eba2 020e 	sub.w	r2, r2, lr
 801630c:	4565      	cmp	r5, ip
 801630e:	bf88      	it	hi
 8016310:	2200      	movhi	r2, #0
 8016312:	4413      	add	r3, r2
 8016314:	1a18      	subs	r0, r3, r0
 8016316:	b003      	add	sp, #12
 8016318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801631a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801631e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016322:	e7ed      	b.n	8016300 <__exponent+0x4c>
 8016324:	2330      	movs	r3, #48	; 0x30
 8016326:	3130      	adds	r1, #48	; 0x30
 8016328:	7083      	strb	r3, [r0, #2]
 801632a:	70c1      	strb	r1, [r0, #3]
 801632c:	1d03      	adds	r3, r0, #4
 801632e:	e7f1      	b.n	8016314 <__exponent+0x60>

08016330 <_printf_float>:
 8016330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016334:	ed2d 8b02 	vpush	{d8}
 8016338:	b08d      	sub	sp, #52	; 0x34
 801633a:	460c      	mov	r4, r1
 801633c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016340:	4616      	mov	r6, r2
 8016342:	461f      	mov	r7, r3
 8016344:	4605      	mov	r5, r0
 8016346:	f002 ff31 	bl	80191ac <_localeconv_r>
 801634a:	f8d0 a000 	ldr.w	sl, [r0]
 801634e:	4650      	mov	r0, sl
 8016350:	f7e9 ff50 	bl	80001f4 <strlen>
 8016354:	2300      	movs	r3, #0
 8016356:	930a      	str	r3, [sp, #40]	; 0x28
 8016358:	6823      	ldr	r3, [r4, #0]
 801635a:	9305      	str	r3, [sp, #20]
 801635c:	f8d8 3000 	ldr.w	r3, [r8]
 8016360:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016364:	3307      	adds	r3, #7
 8016366:	f023 0307 	bic.w	r3, r3, #7
 801636a:	f103 0208 	add.w	r2, r3, #8
 801636e:	f8c8 2000 	str.w	r2, [r8]
 8016372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016376:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801637a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801637e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016382:	9307      	str	r3, [sp, #28]
 8016384:	f8cd 8018 	str.w	r8, [sp, #24]
 8016388:	ee08 0a10 	vmov	s16, r0
 801638c:	4b9f      	ldr	r3, [pc, #636]	; (801660c <_printf_float+0x2dc>)
 801638e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016392:	f04f 32ff 	mov.w	r2, #4294967295
 8016396:	f7ea fbe1 	bl	8000b5c <__aeabi_dcmpun>
 801639a:	bb88      	cbnz	r0, 8016400 <_printf_float+0xd0>
 801639c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163a0:	4b9a      	ldr	r3, [pc, #616]	; (801660c <_printf_float+0x2dc>)
 80163a2:	f04f 32ff 	mov.w	r2, #4294967295
 80163a6:	f7ea fbbb 	bl	8000b20 <__aeabi_dcmple>
 80163aa:	bb48      	cbnz	r0, 8016400 <_printf_float+0xd0>
 80163ac:	2200      	movs	r2, #0
 80163ae:	2300      	movs	r3, #0
 80163b0:	4640      	mov	r0, r8
 80163b2:	4649      	mov	r1, r9
 80163b4:	f7ea fbaa 	bl	8000b0c <__aeabi_dcmplt>
 80163b8:	b110      	cbz	r0, 80163c0 <_printf_float+0x90>
 80163ba:	232d      	movs	r3, #45	; 0x2d
 80163bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163c0:	4b93      	ldr	r3, [pc, #588]	; (8016610 <_printf_float+0x2e0>)
 80163c2:	4894      	ldr	r0, [pc, #592]	; (8016614 <_printf_float+0x2e4>)
 80163c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80163c8:	bf94      	ite	ls
 80163ca:	4698      	movls	r8, r3
 80163cc:	4680      	movhi	r8, r0
 80163ce:	2303      	movs	r3, #3
 80163d0:	6123      	str	r3, [r4, #16]
 80163d2:	9b05      	ldr	r3, [sp, #20]
 80163d4:	f023 0204 	bic.w	r2, r3, #4
 80163d8:	6022      	str	r2, [r4, #0]
 80163da:	f04f 0900 	mov.w	r9, #0
 80163de:	9700      	str	r7, [sp, #0]
 80163e0:	4633      	mov	r3, r6
 80163e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80163e4:	4621      	mov	r1, r4
 80163e6:	4628      	mov	r0, r5
 80163e8:	f000 f9d8 	bl	801679c <_printf_common>
 80163ec:	3001      	adds	r0, #1
 80163ee:	f040 8090 	bne.w	8016512 <_printf_float+0x1e2>
 80163f2:	f04f 30ff 	mov.w	r0, #4294967295
 80163f6:	b00d      	add	sp, #52	; 0x34
 80163f8:	ecbd 8b02 	vpop	{d8}
 80163fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016400:	4642      	mov	r2, r8
 8016402:	464b      	mov	r3, r9
 8016404:	4640      	mov	r0, r8
 8016406:	4649      	mov	r1, r9
 8016408:	f7ea fba8 	bl	8000b5c <__aeabi_dcmpun>
 801640c:	b140      	cbz	r0, 8016420 <_printf_float+0xf0>
 801640e:	464b      	mov	r3, r9
 8016410:	2b00      	cmp	r3, #0
 8016412:	bfbc      	itt	lt
 8016414:	232d      	movlt	r3, #45	; 0x2d
 8016416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801641a:	487f      	ldr	r0, [pc, #508]	; (8016618 <_printf_float+0x2e8>)
 801641c:	4b7f      	ldr	r3, [pc, #508]	; (801661c <_printf_float+0x2ec>)
 801641e:	e7d1      	b.n	80163c4 <_printf_float+0x94>
 8016420:	6863      	ldr	r3, [r4, #4]
 8016422:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016426:	9206      	str	r2, [sp, #24]
 8016428:	1c5a      	adds	r2, r3, #1
 801642a:	d13f      	bne.n	80164ac <_printf_float+0x17c>
 801642c:	2306      	movs	r3, #6
 801642e:	6063      	str	r3, [r4, #4]
 8016430:	9b05      	ldr	r3, [sp, #20]
 8016432:	6861      	ldr	r1, [r4, #4]
 8016434:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016438:	2300      	movs	r3, #0
 801643a:	9303      	str	r3, [sp, #12]
 801643c:	ab0a      	add	r3, sp, #40	; 0x28
 801643e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016442:	ab09      	add	r3, sp, #36	; 0x24
 8016444:	ec49 8b10 	vmov	d0, r8, r9
 8016448:	9300      	str	r3, [sp, #0]
 801644a:	6022      	str	r2, [r4, #0]
 801644c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016450:	4628      	mov	r0, r5
 8016452:	f7ff fecd 	bl	80161f0 <__cvt>
 8016456:	9b06      	ldr	r3, [sp, #24]
 8016458:	9909      	ldr	r1, [sp, #36]	; 0x24
 801645a:	2b47      	cmp	r3, #71	; 0x47
 801645c:	4680      	mov	r8, r0
 801645e:	d108      	bne.n	8016472 <_printf_float+0x142>
 8016460:	1cc8      	adds	r0, r1, #3
 8016462:	db02      	blt.n	801646a <_printf_float+0x13a>
 8016464:	6863      	ldr	r3, [r4, #4]
 8016466:	4299      	cmp	r1, r3
 8016468:	dd41      	ble.n	80164ee <_printf_float+0x1be>
 801646a:	f1ab 0b02 	sub.w	fp, fp, #2
 801646e:	fa5f fb8b 	uxtb.w	fp, fp
 8016472:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016476:	d820      	bhi.n	80164ba <_printf_float+0x18a>
 8016478:	3901      	subs	r1, #1
 801647a:	465a      	mov	r2, fp
 801647c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016480:	9109      	str	r1, [sp, #36]	; 0x24
 8016482:	f7ff ff17 	bl	80162b4 <__exponent>
 8016486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016488:	1813      	adds	r3, r2, r0
 801648a:	2a01      	cmp	r2, #1
 801648c:	4681      	mov	r9, r0
 801648e:	6123      	str	r3, [r4, #16]
 8016490:	dc02      	bgt.n	8016498 <_printf_float+0x168>
 8016492:	6822      	ldr	r2, [r4, #0]
 8016494:	07d2      	lsls	r2, r2, #31
 8016496:	d501      	bpl.n	801649c <_printf_float+0x16c>
 8016498:	3301      	adds	r3, #1
 801649a:	6123      	str	r3, [r4, #16]
 801649c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d09c      	beq.n	80163de <_printf_float+0xae>
 80164a4:	232d      	movs	r3, #45	; 0x2d
 80164a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164aa:	e798      	b.n	80163de <_printf_float+0xae>
 80164ac:	9a06      	ldr	r2, [sp, #24]
 80164ae:	2a47      	cmp	r2, #71	; 0x47
 80164b0:	d1be      	bne.n	8016430 <_printf_float+0x100>
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d1bc      	bne.n	8016430 <_printf_float+0x100>
 80164b6:	2301      	movs	r3, #1
 80164b8:	e7b9      	b.n	801642e <_printf_float+0xfe>
 80164ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80164be:	d118      	bne.n	80164f2 <_printf_float+0x1c2>
 80164c0:	2900      	cmp	r1, #0
 80164c2:	6863      	ldr	r3, [r4, #4]
 80164c4:	dd0b      	ble.n	80164de <_printf_float+0x1ae>
 80164c6:	6121      	str	r1, [r4, #16]
 80164c8:	b913      	cbnz	r3, 80164d0 <_printf_float+0x1a0>
 80164ca:	6822      	ldr	r2, [r4, #0]
 80164cc:	07d0      	lsls	r0, r2, #31
 80164ce:	d502      	bpl.n	80164d6 <_printf_float+0x1a6>
 80164d0:	3301      	adds	r3, #1
 80164d2:	440b      	add	r3, r1
 80164d4:	6123      	str	r3, [r4, #16]
 80164d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80164d8:	f04f 0900 	mov.w	r9, #0
 80164dc:	e7de      	b.n	801649c <_printf_float+0x16c>
 80164de:	b913      	cbnz	r3, 80164e6 <_printf_float+0x1b6>
 80164e0:	6822      	ldr	r2, [r4, #0]
 80164e2:	07d2      	lsls	r2, r2, #31
 80164e4:	d501      	bpl.n	80164ea <_printf_float+0x1ba>
 80164e6:	3302      	adds	r3, #2
 80164e8:	e7f4      	b.n	80164d4 <_printf_float+0x1a4>
 80164ea:	2301      	movs	r3, #1
 80164ec:	e7f2      	b.n	80164d4 <_printf_float+0x1a4>
 80164ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80164f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164f4:	4299      	cmp	r1, r3
 80164f6:	db05      	blt.n	8016504 <_printf_float+0x1d4>
 80164f8:	6823      	ldr	r3, [r4, #0]
 80164fa:	6121      	str	r1, [r4, #16]
 80164fc:	07d8      	lsls	r0, r3, #31
 80164fe:	d5ea      	bpl.n	80164d6 <_printf_float+0x1a6>
 8016500:	1c4b      	adds	r3, r1, #1
 8016502:	e7e7      	b.n	80164d4 <_printf_float+0x1a4>
 8016504:	2900      	cmp	r1, #0
 8016506:	bfd4      	ite	le
 8016508:	f1c1 0202 	rsble	r2, r1, #2
 801650c:	2201      	movgt	r2, #1
 801650e:	4413      	add	r3, r2
 8016510:	e7e0      	b.n	80164d4 <_printf_float+0x1a4>
 8016512:	6823      	ldr	r3, [r4, #0]
 8016514:	055a      	lsls	r2, r3, #21
 8016516:	d407      	bmi.n	8016528 <_printf_float+0x1f8>
 8016518:	6923      	ldr	r3, [r4, #16]
 801651a:	4642      	mov	r2, r8
 801651c:	4631      	mov	r1, r6
 801651e:	4628      	mov	r0, r5
 8016520:	47b8      	blx	r7
 8016522:	3001      	adds	r0, #1
 8016524:	d12c      	bne.n	8016580 <_printf_float+0x250>
 8016526:	e764      	b.n	80163f2 <_printf_float+0xc2>
 8016528:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801652c:	f240 80e0 	bls.w	80166f0 <_printf_float+0x3c0>
 8016530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016534:	2200      	movs	r2, #0
 8016536:	2300      	movs	r3, #0
 8016538:	f7ea fade 	bl	8000af8 <__aeabi_dcmpeq>
 801653c:	2800      	cmp	r0, #0
 801653e:	d034      	beq.n	80165aa <_printf_float+0x27a>
 8016540:	4a37      	ldr	r2, [pc, #220]	; (8016620 <_printf_float+0x2f0>)
 8016542:	2301      	movs	r3, #1
 8016544:	4631      	mov	r1, r6
 8016546:	4628      	mov	r0, r5
 8016548:	47b8      	blx	r7
 801654a:	3001      	adds	r0, #1
 801654c:	f43f af51 	beq.w	80163f2 <_printf_float+0xc2>
 8016550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016554:	429a      	cmp	r2, r3
 8016556:	db02      	blt.n	801655e <_printf_float+0x22e>
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	07d8      	lsls	r0, r3, #31
 801655c:	d510      	bpl.n	8016580 <_printf_float+0x250>
 801655e:	ee18 3a10 	vmov	r3, s16
 8016562:	4652      	mov	r2, sl
 8016564:	4631      	mov	r1, r6
 8016566:	4628      	mov	r0, r5
 8016568:	47b8      	blx	r7
 801656a:	3001      	adds	r0, #1
 801656c:	f43f af41 	beq.w	80163f2 <_printf_float+0xc2>
 8016570:	f04f 0800 	mov.w	r8, #0
 8016574:	f104 091a 	add.w	r9, r4, #26
 8016578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801657a:	3b01      	subs	r3, #1
 801657c:	4543      	cmp	r3, r8
 801657e:	dc09      	bgt.n	8016594 <_printf_float+0x264>
 8016580:	6823      	ldr	r3, [r4, #0]
 8016582:	079b      	lsls	r3, r3, #30
 8016584:	f100 8105 	bmi.w	8016792 <_printf_float+0x462>
 8016588:	68e0      	ldr	r0, [r4, #12]
 801658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801658c:	4298      	cmp	r0, r3
 801658e:	bfb8      	it	lt
 8016590:	4618      	movlt	r0, r3
 8016592:	e730      	b.n	80163f6 <_printf_float+0xc6>
 8016594:	2301      	movs	r3, #1
 8016596:	464a      	mov	r2, r9
 8016598:	4631      	mov	r1, r6
 801659a:	4628      	mov	r0, r5
 801659c:	47b8      	blx	r7
 801659e:	3001      	adds	r0, #1
 80165a0:	f43f af27 	beq.w	80163f2 <_printf_float+0xc2>
 80165a4:	f108 0801 	add.w	r8, r8, #1
 80165a8:	e7e6      	b.n	8016578 <_printf_float+0x248>
 80165aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	dc39      	bgt.n	8016624 <_printf_float+0x2f4>
 80165b0:	4a1b      	ldr	r2, [pc, #108]	; (8016620 <_printf_float+0x2f0>)
 80165b2:	2301      	movs	r3, #1
 80165b4:	4631      	mov	r1, r6
 80165b6:	4628      	mov	r0, r5
 80165b8:	47b8      	blx	r7
 80165ba:	3001      	adds	r0, #1
 80165bc:	f43f af19 	beq.w	80163f2 <_printf_float+0xc2>
 80165c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165c4:	4313      	orrs	r3, r2
 80165c6:	d102      	bne.n	80165ce <_printf_float+0x29e>
 80165c8:	6823      	ldr	r3, [r4, #0]
 80165ca:	07d9      	lsls	r1, r3, #31
 80165cc:	d5d8      	bpl.n	8016580 <_printf_float+0x250>
 80165ce:	ee18 3a10 	vmov	r3, s16
 80165d2:	4652      	mov	r2, sl
 80165d4:	4631      	mov	r1, r6
 80165d6:	4628      	mov	r0, r5
 80165d8:	47b8      	blx	r7
 80165da:	3001      	adds	r0, #1
 80165dc:	f43f af09 	beq.w	80163f2 <_printf_float+0xc2>
 80165e0:	f04f 0900 	mov.w	r9, #0
 80165e4:	f104 0a1a 	add.w	sl, r4, #26
 80165e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165ea:	425b      	negs	r3, r3
 80165ec:	454b      	cmp	r3, r9
 80165ee:	dc01      	bgt.n	80165f4 <_printf_float+0x2c4>
 80165f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165f2:	e792      	b.n	801651a <_printf_float+0x1ea>
 80165f4:	2301      	movs	r3, #1
 80165f6:	4652      	mov	r2, sl
 80165f8:	4631      	mov	r1, r6
 80165fa:	4628      	mov	r0, r5
 80165fc:	47b8      	blx	r7
 80165fe:	3001      	adds	r0, #1
 8016600:	f43f aef7 	beq.w	80163f2 <_printf_float+0xc2>
 8016604:	f109 0901 	add.w	r9, r9, #1
 8016608:	e7ee      	b.n	80165e8 <_printf_float+0x2b8>
 801660a:	bf00      	nop
 801660c:	7fefffff 	.word	0x7fefffff
 8016610:	0801bafc 	.word	0x0801bafc
 8016614:	0801bb00 	.word	0x0801bb00
 8016618:	0801bb08 	.word	0x0801bb08
 801661c:	0801bb04 	.word	0x0801bb04
 8016620:	0801bf01 	.word	0x0801bf01
 8016624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016628:	429a      	cmp	r2, r3
 801662a:	bfa8      	it	ge
 801662c:	461a      	movge	r2, r3
 801662e:	2a00      	cmp	r2, #0
 8016630:	4691      	mov	r9, r2
 8016632:	dc37      	bgt.n	80166a4 <_printf_float+0x374>
 8016634:	f04f 0b00 	mov.w	fp, #0
 8016638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801663c:	f104 021a 	add.w	r2, r4, #26
 8016640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016642:	9305      	str	r3, [sp, #20]
 8016644:	eba3 0309 	sub.w	r3, r3, r9
 8016648:	455b      	cmp	r3, fp
 801664a:	dc33      	bgt.n	80166b4 <_printf_float+0x384>
 801664c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016650:	429a      	cmp	r2, r3
 8016652:	db3b      	blt.n	80166cc <_printf_float+0x39c>
 8016654:	6823      	ldr	r3, [r4, #0]
 8016656:	07da      	lsls	r2, r3, #31
 8016658:	d438      	bmi.n	80166cc <_printf_float+0x39c>
 801665a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801665c:	9a05      	ldr	r2, [sp, #20]
 801665e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016660:	1a9a      	subs	r2, r3, r2
 8016662:	eba3 0901 	sub.w	r9, r3, r1
 8016666:	4591      	cmp	r9, r2
 8016668:	bfa8      	it	ge
 801666a:	4691      	movge	r9, r2
 801666c:	f1b9 0f00 	cmp.w	r9, #0
 8016670:	dc35      	bgt.n	80166de <_printf_float+0x3ae>
 8016672:	f04f 0800 	mov.w	r8, #0
 8016676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801667a:	f104 0a1a 	add.w	sl, r4, #26
 801667e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016682:	1a9b      	subs	r3, r3, r2
 8016684:	eba3 0309 	sub.w	r3, r3, r9
 8016688:	4543      	cmp	r3, r8
 801668a:	f77f af79 	ble.w	8016580 <_printf_float+0x250>
 801668e:	2301      	movs	r3, #1
 8016690:	4652      	mov	r2, sl
 8016692:	4631      	mov	r1, r6
 8016694:	4628      	mov	r0, r5
 8016696:	47b8      	blx	r7
 8016698:	3001      	adds	r0, #1
 801669a:	f43f aeaa 	beq.w	80163f2 <_printf_float+0xc2>
 801669e:	f108 0801 	add.w	r8, r8, #1
 80166a2:	e7ec      	b.n	801667e <_printf_float+0x34e>
 80166a4:	4613      	mov	r3, r2
 80166a6:	4631      	mov	r1, r6
 80166a8:	4642      	mov	r2, r8
 80166aa:	4628      	mov	r0, r5
 80166ac:	47b8      	blx	r7
 80166ae:	3001      	adds	r0, #1
 80166b0:	d1c0      	bne.n	8016634 <_printf_float+0x304>
 80166b2:	e69e      	b.n	80163f2 <_printf_float+0xc2>
 80166b4:	2301      	movs	r3, #1
 80166b6:	4631      	mov	r1, r6
 80166b8:	4628      	mov	r0, r5
 80166ba:	9205      	str	r2, [sp, #20]
 80166bc:	47b8      	blx	r7
 80166be:	3001      	adds	r0, #1
 80166c0:	f43f ae97 	beq.w	80163f2 <_printf_float+0xc2>
 80166c4:	9a05      	ldr	r2, [sp, #20]
 80166c6:	f10b 0b01 	add.w	fp, fp, #1
 80166ca:	e7b9      	b.n	8016640 <_printf_float+0x310>
 80166cc:	ee18 3a10 	vmov	r3, s16
 80166d0:	4652      	mov	r2, sl
 80166d2:	4631      	mov	r1, r6
 80166d4:	4628      	mov	r0, r5
 80166d6:	47b8      	blx	r7
 80166d8:	3001      	adds	r0, #1
 80166da:	d1be      	bne.n	801665a <_printf_float+0x32a>
 80166dc:	e689      	b.n	80163f2 <_printf_float+0xc2>
 80166de:	9a05      	ldr	r2, [sp, #20]
 80166e0:	464b      	mov	r3, r9
 80166e2:	4442      	add	r2, r8
 80166e4:	4631      	mov	r1, r6
 80166e6:	4628      	mov	r0, r5
 80166e8:	47b8      	blx	r7
 80166ea:	3001      	adds	r0, #1
 80166ec:	d1c1      	bne.n	8016672 <_printf_float+0x342>
 80166ee:	e680      	b.n	80163f2 <_printf_float+0xc2>
 80166f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80166f2:	2a01      	cmp	r2, #1
 80166f4:	dc01      	bgt.n	80166fa <_printf_float+0x3ca>
 80166f6:	07db      	lsls	r3, r3, #31
 80166f8:	d538      	bpl.n	801676c <_printf_float+0x43c>
 80166fa:	2301      	movs	r3, #1
 80166fc:	4642      	mov	r2, r8
 80166fe:	4631      	mov	r1, r6
 8016700:	4628      	mov	r0, r5
 8016702:	47b8      	blx	r7
 8016704:	3001      	adds	r0, #1
 8016706:	f43f ae74 	beq.w	80163f2 <_printf_float+0xc2>
 801670a:	ee18 3a10 	vmov	r3, s16
 801670e:	4652      	mov	r2, sl
 8016710:	4631      	mov	r1, r6
 8016712:	4628      	mov	r0, r5
 8016714:	47b8      	blx	r7
 8016716:	3001      	adds	r0, #1
 8016718:	f43f ae6b 	beq.w	80163f2 <_printf_float+0xc2>
 801671c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016720:	2200      	movs	r2, #0
 8016722:	2300      	movs	r3, #0
 8016724:	f7ea f9e8 	bl	8000af8 <__aeabi_dcmpeq>
 8016728:	b9d8      	cbnz	r0, 8016762 <_printf_float+0x432>
 801672a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801672c:	f108 0201 	add.w	r2, r8, #1
 8016730:	3b01      	subs	r3, #1
 8016732:	4631      	mov	r1, r6
 8016734:	4628      	mov	r0, r5
 8016736:	47b8      	blx	r7
 8016738:	3001      	adds	r0, #1
 801673a:	d10e      	bne.n	801675a <_printf_float+0x42a>
 801673c:	e659      	b.n	80163f2 <_printf_float+0xc2>
 801673e:	2301      	movs	r3, #1
 8016740:	4652      	mov	r2, sl
 8016742:	4631      	mov	r1, r6
 8016744:	4628      	mov	r0, r5
 8016746:	47b8      	blx	r7
 8016748:	3001      	adds	r0, #1
 801674a:	f43f ae52 	beq.w	80163f2 <_printf_float+0xc2>
 801674e:	f108 0801 	add.w	r8, r8, #1
 8016752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016754:	3b01      	subs	r3, #1
 8016756:	4543      	cmp	r3, r8
 8016758:	dcf1      	bgt.n	801673e <_printf_float+0x40e>
 801675a:	464b      	mov	r3, r9
 801675c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016760:	e6dc      	b.n	801651c <_printf_float+0x1ec>
 8016762:	f04f 0800 	mov.w	r8, #0
 8016766:	f104 0a1a 	add.w	sl, r4, #26
 801676a:	e7f2      	b.n	8016752 <_printf_float+0x422>
 801676c:	2301      	movs	r3, #1
 801676e:	4642      	mov	r2, r8
 8016770:	e7df      	b.n	8016732 <_printf_float+0x402>
 8016772:	2301      	movs	r3, #1
 8016774:	464a      	mov	r2, r9
 8016776:	4631      	mov	r1, r6
 8016778:	4628      	mov	r0, r5
 801677a:	47b8      	blx	r7
 801677c:	3001      	adds	r0, #1
 801677e:	f43f ae38 	beq.w	80163f2 <_printf_float+0xc2>
 8016782:	f108 0801 	add.w	r8, r8, #1
 8016786:	68e3      	ldr	r3, [r4, #12]
 8016788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801678a:	1a5b      	subs	r3, r3, r1
 801678c:	4543      	cmp	r3, r8
 801678e:	dcf0      	bgt.n	8016772 <_printf_float+0x442>
 8016790:	e6fa      	b.n	8016588 <_printf_float+0x258>
 8016792:	f04f 0800 	mov.w	r8, #0
 8016796:	f104 0919 	add.w	r9, r4, #25
 801679a:	e7f4      	b.n	8016786 <_printf_float+0x456>

0801679c <_printf_common>:
 801679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167a0:	4616      	mov	r6, r2
 80167a2:	4699      	mov	r9, r3
 80167a4:	688a      	ldr	r2, [r1, #8]
 80167a6:	690b      	ldr	r3, [r1, #16]
 80167a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80167ac:	4293      	cmp	r3, r2
 80167ae:	bfb8      	it	lt
 80167b0:	4613      	movlt	r3, r2
 80167b2:	6033      	str	r3, [r6, #0]
 80167b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80167b8:	4607      	mov	r7, r0
 80167ba:	460c      	mov	r4, r1
 80167bc:	b10a      	cbz	r2, 80167c2 <_printf_common+0x26>
 80167be:	3301      	adds	r3, #1
 80167c0:	6033      	str	r3, [r6, #0]
 80167c2:	6823      	ldr	r3, [r4, #0]
 80167c4:	0699      	lsls	r1, r3, #26
 80167c6:	bf42      	ittt	mi
 80167c8:	6833      	ldrmi	r3, [r6, #0]
 80167ca:	3302      	addmi	r3, #2
 80167cc:	6033      	strmi	r3, [r6, #0]
 80167ce:	6825      	ldr	r5, [r4, #0]
 80167d0:	f015 0506 	ands.w	r5, r5, #6
 80167d4:	d106      	bne.n	80167e4 <_printf_common+0x48>
 80167d6:	f104 0a19 	add.w	sl, r4, #25
 80167da:	68e3      	ldr	r3, [r4, #12]
 80167dc:	6832      	ldr	r2, [r6, #0]
 80167de:	1a9b      	subs	r3, r3, r2
 80167e0:	42ab      	cmp	r3, r5
 80167e2:	dc26      	bgt.n	8016832 <_printf_common+0x96>
 80167e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80167e8:	1e13      	subs	r3, r2, #0
 80167ea:	6822      	ldr	r2, [r4, #0]
 80167ec:	bf18      	it	ne
 80167ee:	2301      	movne	r3, #1
 80167f0:	0692      	lsls	r2, r2, #26
 80167f2:	d42b      	bmi.n	801684c <_printf_common+0xb0>
 80167f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80167f8:	4649      	mov	r1, r9
 80167fa:	4638      	mov	r0, r7
 80167fc:	47c0      	blx	r8
 80167fe:	3001      	adds	r0, #1
 8016800:	d01e      	beq.n	8016840 <_printf_common+0xa4>
 8016802:	6823      	ldr	r3, [r4, #0]
 8016804:	68e5      	ldr	r5, [r4, #12]
 8016806:	6832      	ldr	r2, [r6, #0]
 8016808:	f003 0306 	and.w	r3, r3, #6
 801680c:	2b04      	cmp	r3, #4
 801680e:	bf08      	it	eq
 8016810:	1aad      	subeq	r5, r5, r2
 8016812:	68a3      	ldr	r3, [r4, #8]
 8016814:	6922      	ldr	r2, [r4, #16]
 8016816:	bf0c      	ite	eq
 8016818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801681c:	2500      	movne	r5, #0
 801681e:	4293      	cmp	r3, r2
 8016820:	bfc4      	itt	gt
 8016822:	1a9b      	subgt	r3, r3, r2
 8016824:	18ed      	addgt	r5, r5, r3
 8016826:	2600      	movs	r6, #0
 8016828:	341a      	adds	r4, #26
 801682a:	42b5      	cmp	r5, r6
 801682c:	d11a      	bne.n	8016864 <_printf_common+0xc8>
 801682e:	2000      	movs	r0, #0
 8016830:	e008      	b.n	8016844 <_printf_common+0xa8>
 8016832:	2301      	movs	r3, #1
 8016834:	4652      	mov	r2, sl
 8016836:	4649      	mov	r1, r9
 8016838:	4638      	mov	r0, r7
 801683a:	47c0      	blx	r8
 801683c:	3001      	adds	r0, #1
 801683e:	d103      	bne.n	8016848 <_printf_common+0xac>
 8016840:	f04f 30ff 	mov.w	r0, #4294967295
 8016844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016848:	3501      	adds	r5, #1
 801684a:	e7c6      	b.n	80167da <_printf_common+0x3e>
 801684c:	18e1      	adds	r1, r4, r3
 801684e:	1c5a      	adds	r2, r3, #1
 8016850:	2030      	movs	r0, #48	; 0x30
 8016852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016856:	4422      	add	r2, r4
 8016858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801685c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016860:	3302      	adds	r3, #2
 8016862:	e7c7      	b.n	80167f4 <_printf_common+0x58>
 8016864:	2301      	movs	r3, #1
 8016866:	4622      	mov	r2, r4
 8016868:	4649      	mov	r1, r9
 801686a:	4638      	mov	r0, r7
 801686c:	47c0      	blx	r8
 801686e:	3001      	adds	r0, #1
 8016870:	d0e6      	beq.n	8016840 <_printf_common+0xa4>
 8016872:	3601      	adds	r6, #1
 8016874:	e7d9      	b.n	801682a <_printf_common+0x8e>
	...

08016878 <_printf_i>:
 8016878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801687c:	7e0f      	ldrb	r7, [r1, #24]
 801687e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016880:	2f78      	cmp	r7, #120	; 0x78
 8016882:	4691      	mov	r9, r2
 8016884:	4680      	mov	r8, r0
 8016886:	460c      	mov	r4, r1
 8016888:	469a      	mov	sl, r3
 801688a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801688e:	d807      	bhi.n	80168a0 <_printf_i+0x28>
 8016890:	2f62      	cmp	r7, #98	; 0x62
 8016892:	d80a      	bhi.n	80168aa <_printf_i+0x32>
 8016894:	2f00      	cmp	r7, #0
 8016896:	f000 80d8 	beq.w	8016a4a <_printf_i+0x1d2>
 801689a:	2f58      	cmp	r7, #88	; 0x58
 801689c:	f000 80a3 	beq.w	80169e6 <_printf_i+0x16e>
 80168a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80168a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80168a8:	e03a      	b.n	8016920 <_printf_i+0xa8>
 80168aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80168ae:	2b15      	cmp	r3, #21
 80168b0:	d8f6      	bhi.n	80168a0 <_printf_i+0x28>
 80168b2:	a101      	add	r1, pc, #4	; (adr r1, 80168b8 <_printf_i+0x40>)
 80168b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168b8:	08016911 	.word	0x08016911
 80168bc:	08016925 	.word	0x08016925
 80168c0:	080168a1 	.word	0x080168a1
 80168c4:	080168a1 	.word	0x080168a1
 80168c8:	080168a1 	.word	0x080168a1
 80168cc:	080168a1 	.word	0x080168a1
 80168d0:	08016925 	.word	0x08016925
 80168d4:	080168a1 	.word	0x080168a1
 80168d8:	080168a1 	.word	0x080168a1
 80168dc:	080168a1 	.word	0x080168a1
 80168e0:	080168a1 	.word	0x080168a1
 80168e4:	08016a31 	.word	0x08016a31
 80168e8:	08016955 	.word	0x08016955
 80168ec:	08016a13 	.word	0x08016a13
 80168f0:	080168a1 	.word	0x080168a1
 80168f4:	080168a1 	.word	0x080168a1
 80168f8:	08016a53 	.word	0x08016a53
 80168fc:	080168a1 	.word	0x080168a1
 8016900:	08016955 	.word	0x08016955
 8016904:	080168a1 	.word	0x080168a1
 8016908:	080168a1 	.word	0x080168a1
 801690c:	08016a1b 	.word	0x08016a1b
 8016910:	682b      	ldr	r3, [r5, #0]
 8016912:	1d1a      	adds	r2, r3, #4
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	602a      	str	r2, [r5, #0]
 8016918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801691c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016920:	2301      	movs	r3, #1
 8016922:	e0a3      	b.n	8016a6c <_printf_i+0x1f4>
 8016924:	6820      	ldr	r0, [r4, #0]
 8016926:	6829      	ldr	r1, [r5, #0]
 8016928:	0606      	lsls	r6, r0, #24
 801692a:	f101 0304 	add.w	r3, r1, #4
 801692e:	d50a      	bpl.n	8016946 <_printf_i+0xce>
 8016930:	680e      	ldr	r6, [r1, #0]
 8016932:	602b      	str	r3, [r5, #0]
 8016934:	2e00      	cmp	r6, #0
 8016936:	da03      	bge.n	8016940 <_printf_i+0xc8>
 8016938:	232d      	movs	r3, #45	; 0x2d
 801693a:	4276      	negs	r6, r6
 801693c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016940:	485e      	ldr	r0, [pc, #376]	; (8016abc <_printf_i+0x244>)
 8016942:	230a      	movs	r3, #10
 8016944:	e019      	b.n	801697a <_printf_i+0x102>
 8016946:	680e      	ldr	r6, [r1, #0]
 8016948:	602b      	str	r3, [r5, #0]
 801694a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801694e:	bf18      	it	ne
 8016950:	b236      	sxthne	r6, r6
 8016952:	e7ef      	b.n	8016934 <_printf_i+0xbc>
 8016954:	682b      	ldr	r3, [r5, #0]
 8016956:	6820      	ldr	r0, [r4, #0]
 8016958:	1d19      	adds	r1, r3, #4
 801695a:	6029      	str	r1, [r5, #0]
 801695c:	0601      	lsls	r1, r0, #24
 801695e:	d501      	bpl.n	8016964 <_printf_i+0xec>
 8016960:	681e      	ldr	r6, [r3, #0]
 8016962:	e002      	b.n	801696a <_printf_i+0xf2>
 8016964:	0646      	lsls	r6, r0, #25
 8016966:	d5fb      	bpl.n	8016960 <_printf_i+0xe8>
 8016968:	881e      	ldrh	r6, [r3, #0]
 801696a:	4854      	ldr	r0, [pc, #336]	; (8016abc <_printf_i+0x244>)
 801696c:	2f6f      	cmp	r7, #111	; 0x6f
 801696e:	bf0c      	ite	eq
 8016970:	2308      	moveq	r3, #8
 8016972:	230a      	movne	r3, #10
 8016974:	2100      	movs	r1, #0
 8016976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801697a:	6865      	ldr	r5, [r4, #4]
 801697c:	60a5      	str	r5, [r4, #8]
 801697e:	2d00      	cmp	r5, #0
 8016980:	bfa2      	ittt	ge
 8016982:	6821      	ldrge	r1, [r4, #0]
 8016984:	f021 0104 	bicge.w	r1, r1, #4
 8016988:	6021      	strge	r1, [r4, #0]
 801698a:	b90e      	cbnz	r6, 8016990 <_printf_i+0x118>
 801698c:	2d00      	cmp	r5, #0
 801698e:	d04d      	beq.n	8016a2c <_printf_i+0x1b4>
 8016990:	4615      	mov	r5, r2
 8016992:	fbb6 f1f3 	udiv	r1, r6, r3
 8016996:	fb03 6711 	mls	r7, r3, r1, r6
 801699a:	5dc7      	ldrb	r7, [r0, r7]
 801699c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80169a0:	4637      	mov	r7, r6
 80169a2:	42bb      	cmp	r3, r7
 80169a4:	460e      	mov	r6, r1
 80169a6:	d9f4      	bls.n	8016992 <_printf_i+0x11a>
 80169a8:	2b08      	cmp	r3, #8
 80169aa:	d10b      	bne.n	80169c4 <_printf_i+0x14c>
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	07de      	lsls	r6, r3, #31
 80169b0:	d508      	bpl.n	80169c4 <_printf_i+0x14c>
 80169b2:	6923      	ldr	r3, [r4, #16]
 80169b4:	6861      	ldr	r1, [r4, #4]
 80169b6:	4299      	cmp	r1, r3
 80169b8:	bfde      	ittt	le
 80169ba:	2330      	movle	r3, #48	; 0x30
 80169bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80169c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80169c4:	1b52      	subs	r2, r2, r5
 80169c6:	6122      	str	r2, [r4, #16]
 80169c8:	f8cd a000 	str.w	sl, [sp]
 80169cc:	464b      	mov	r3, r9
 80169ce:	aa03      	add	r2, sp, #12
 80169d0:	4621      	mov	r1, r4
 80169d2:	4640      	mov	r0, r8
 80169d4:	f7ff fee2 	bl	801679c <_printf_common>
 80169d8:	3001      	adds	r0, #1
 80169da:	d14c      	bne.n	8016a76 <_printf_i+0x1fe>
 80169dc:	f04f 30ff 	mov.w	r0, #4294967295
 80169e0:	b004      	add	sp, #16
 80169e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169e6:	4835      	ldr	r0, [pc, #212]	; (8016abc <_printf_i+0x244>)
 80169e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80169ec:	6829      	ldr	r1, [r5, #0]
 80169ee:	6823      	ldr	r3, [r4, #0]
 80169f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80169f4:	6029      	str	r1, [r5, #0]
 80169f6:	061d      	lsls	r5, r3, #24
 80169f8:	d514      	bpl.n	8016a24 <_printf_i+0x1ac>
 80169fa:	07df      	lsls	r7, r3, #31
 80169fc:	bf44      	itt	mi
 80169fe:	f043 0320 	orrmi.w	r3, r3, #32
 8016a02:	6023      	strmi	r3, [r4, #0]
 8016a04:	b91e      	cbnz	r6, 8016a0e <_printf_i+0x196>
 8016a06:	6823      	ldr	r3, [r4, #0]
 8016a08:	f023 0320 	bic.w	r3, r3, #32
 8016a0c:	6023      	str	r3, [r4, #0]
 8016a0e:	2310      	movs	r3, #16
 8016a10:	e7b0      	b.n	8016974 <_printf_i+0xfc>
 8016a12:	6823      	ldr	r3, [r4, #0]
 8016a14:	f043 0320 	orr.w	r3, r3, #32
 8016a18:	6023      	str	r3, [r4, #0]
 8016a1a:	2378      	movs	r3, #120	; 0x78
 8016a1c:	4828      	ldr	r0, [pc, #160]	; (8016ac0 <_printf_i+0x248>)
 8016a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016a22:	e7e3      	b.n	80169ec <_printf_i+0x174>
 8016a24:	0659      	lsls	r1, r3, #25
 8016a26:	bf48      	it	mi
 8016a28:	b2b6      	uxthmi	r6, r6
 8016a2a:	e7e6      	b.n	80169fa <_printf_i+0x182>
 8016a2c:	4615      	mov	r5, r2
 8016a2e:	e7bb      	b.n	80169a8 <_printf_i+0x130>
 8016a30:	682b      	ldr	r3, [r5, #0]
 8016a32:	6826      	ldr	r6, [r4, #0]
 8016a34:	6961      	ldr	r1, [r4, #20]
 8016a36:	1d18      	adds	r0, r3, #4
 8016a38:	6028      	str	r0, [r5, #0]
 8016a3a:	0635      	lsls	r5, r6, #24
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	d501      	bpl.n	8016a44 <_printf_i+0x1cc>
 8016a40:	6019      	str	r1, [r3, #0]
 8016a42:	e002      	b.n	8016a4a <_printf_i+0x1d2>
 8016a44:	0670      	lsls	r0, r6, #25
 8016a46:	d5fb      	bpl.n	8016a40 <_printf_i+0x1c8>
 8016a48:	8019      	strh	r1, [r3, #0]
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	6123      	str	r3, [r4, #16]
 8016a4e:	4615      	mov	r5, r2
 8016a50:	e7ba      	b.n	80169c8 <_printf_i+0x150>
 8016a52:	682b      	ldr	r3, [r5, #0]
 8016a54:	1d1a      	adds	r2, r3, #4
 8016a56:	602a      	str	r2, [r5, #0]
 8016a58:	681d      	ldr	r5, [r3, #0]
 8016a5a:	6862      	ldr	r2, [r4, #4]
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	4628      	mov	r0, r5
 8016a60:	f7e9 fbd6 	bl	8000210 <memchr>
 8016a64:	b108      	cbz	r0, 8016a6a <_printf_i+0x1f2>
 8016a66:	1b40      	subs	r0, r0, r5
 8016a68:	6060      	str	r0, [r4, #4]
 8016a6a:	6863      	ldr	r3, [r4, #4]
 8016a6c:	6123      	str	r3, [r4, #16]
 8016a6e:	2300      	movs	r3, #0
 8016a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a74:	e7a8      	b.n	80169c8 <_printf_i+0x150>
 8016a76:	6923      	ldr	r3, [r4, #16]
 8016a78:	462a      	mov	r2, r5
 8016a7a:	4649      	mov	r1, r9
 8016a7c:	4640      	mov	r0, r8
 8016a7e:	47d0      	blx	sl
 8016a80:	3001      	adds	r0, #1
 8016a82:	d0ab      	beq.n	80169dc <_printf_i+0x164>
 8016a84:	6823      	ldr	r3, [r4, #0]
 8016a86:	079b      	lsls	r3, r3, #30
 8016a88:	d413      	bmi.n	8016ab2 <_printf_i+0x23a>
 8016a8a:	68e0      	ldr	r0, [r4, #12]
 8016a8c:	9b03      	ldr	r3, [sp, #12]
 8016a8e:	4298      	cmp	r0, r3
 8016a90:	bfb8      	it	lt
 8016a92:	4618      	movlt	r0, r3
 8016a94:	e7a4      	b.n	80169e0 <_printf_i+0x168>
 8016a96:	2301      	movs	r3, #1
 8016a98:	4632      	mov	r2, r6
 8016a9a:	4649      	mov	r1, r9
 8016a9c:	4640      	mov	r0, r8
 8016a9e:	47d0      	blx	sl
 8016aa0:	3001      	adds	r0, #1
 8016aa2:	d09b      	beq.n	80169dc <_printf_i+0x164>
 8016aa4:	3501      	adds	r5, #1
 8016aa6:	68e3      	ldr	r3, [r4, #12]
 8016aa8:	9903      	ldr	r1, [sp, #12]
 8016aaa:	1a5b      	subs	r3, r3, r1
 8016aac:	42ab      	cmp	r3, r5
 8016aae:	dcf2      	bgt.n	8016a96 <_printf_i+0x21e>
 8016ab0:	e7eb      	b.n	8016a8a <_printf_i+0x212>
 8016ab2:	2500      	movs	r5, #0
 8016ab4:	f104 0619 	add.w	r6, r4, #25
 8016ab8:	e7f5      	b.n	8016aa6 <_printf_i+0x22e>
 8016aba:	bf00      	nop
 8016abc:	0801bb0c 	.word	0x0801bb0c
 8016ac0:	0801bb1d 	.word	0x0801bb1d

08016ac4 <_scanf_float>:
 8016ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac8:	b087      	sub	sp, #28
 8016aca:	4617      	mov	r7, r2
 8016acc:	9303      	str	r3, [sp, #12]
 8016ace:	688b      	ldr	r3, [r1, #8]
 8016ad0:	1e5a      	subs	r2, r3, #1
 8016ad2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ad6:	bf83      	ittte	hi
 8016ad8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016adc:	195b      	addhi	r3, r3, r5
 8016ade:	9302      	strhi	r3, [sp, #8]
 8016ae0:	2300      	movls	r3, #0
 8016ae2:	bf86      	itte	hi
 8016ae4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016ae8:	608b      	strhi	r3, [r1, #8]
 8016aea:	9302      	strls	r3, [sp, #8]
 8016aec:	680b      	ldr	r3, [r1, #0]
 8016aee:	468b      	mov	fp, r1
 8016af0:	2500      	movs	r5, #0
 8016af2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016af6:	f84b 3b1c 	str.w	r3, [fp], #28
 8016afa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016afe:	4680      	mov	r8, r0
 8016b00:	460c      	mov	r4, r1
 8016b02:	465e      	mov	r6, fp
 8016b04:	46aa      	mov	sl, r5
 8016b06:	46a9      	mov	r9, r5
 8016b08:	9501      	str	r5, [sp, #4]
 8016b0a:	68a2      	ldr	r2, [r4, #8]
 8016b0c:	b152      	cbz	r2, 8016b24 <_scanf_float+0x60>
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	2b4e      	cmp	r3, #78	; 0x4e
 8016b14:	d864      	bhi.n	8016be0 <_scanf_float+0x11c>
 8016b16:	2b40      	cmp	r3, #64	; 0x40
 8016b18:	d83c      	bhi.n	8016b94 <_scanf_float+0xd0>
 8016b1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016b1e:	b2c8      	uxtb	r0, r1
 8016b20:	280e      	cmp	r0, #14
 8016b22:	d93a      	bls.n	8016b9a <_scanf_float+0xd6>
 8016b24:	f1b9 0f00 	cmp.w	r9, #0
 8016b28:	d003      	beq.n	8016b32 <_scanf_float+0x6e>
 8016b2a:	6823      	ldr	r3, [r4, #0]
 8016b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b36:	f1ba 0f01 	cmp.w	sl, #1
 8016b3a:	f200 8113 	bhi.w	8016d64 <_scanf_float+0x2a0>
 8016b3e:	455e      	cmp	r6, fp
 8016b40:	f200 8105 	bhi.w	8016d4e <_scanf_float+0x28a>
 8016b44:	2501      	movs	r5, #1
 8016b46:	4628      	mov	r0, r5
 8016b48:	b007      	add	sp, #28
 8016b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016b52:	2a0d      	cmp	r2, #13
 8016b54:	d8e6      	bhi.n	8016b24 <_scanf_float+0x60>
 8016b56:	a101      	add	r1, pc, #4	; (adr r1, 8016b5c <_scanf_float+0x98>)
 8016b58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016b5c:	08016c9b 	.word	0x08016c9b
 8016b60:	08016b25 	.word	0x08016b25
 8016b64:	08016b25 	.word	0x08016b25
 8016b68:	08016b25 	.word	0x08016b25
 8016b6c:	08016cfb 	.word	0x08016cfb
 8016b70:	08016cd3 	.word	0x08016cd3
 8016b74:	08016b25 	.word	0x08016b25
 8016b78:	08016b25 	.word	0x08016b25
 8016b7c:	08016ca9 	.word	0x08016ca9
 8016b80:	08016b25 	.word	0x08016b25
 8016b84:	08016b25 	.word	0x08016b25
 8016b88:	08016b25 	.word	0x08016b25
 8016b8c:	08016b25 	.word	0x08016b25
 8016b90:	08016c61 	.word	0x08016c61
 8016b94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016b98:	e7db      	b.n	8016b52 <_scanf_float+0x8e>
 8016b9a:	290e      	cmp	r1, #14
 8016b9c:	d8c2      	bhi.n	8016b24 <_scanf_float+0x60>
 8016b9e:	a001      	add	r0, pc, #4	; (adr r0, 8016ba4 <_scanf_float+0xe0>)
 8016ba0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016ba4:	08016c53 	.word	0x08016c53
 8016ba8:	08016b25 	.word	0x08016b25
 8016bac:	08016c53 	.word	0x08016c53
 8016bb0:	08016ce7 	.word	0x08016ce7
 8016bb4:	08016b25 	.word	0x08016b25
 8016bb8:	08016c01 	.word	0x08016c01
 8016bbc:	08016c3d 	.word	0x08016c3d
 8016bc0:	08016c3d 	.word	0x08016c3d
 8016bc4:	08016c3d 	.word	0x08016c3d
 8016bc8:	08016c3d 	.word	0x08016c3d
 8016bcc:	08016c3d 	.word	0x08016c3d
 8016bd0:	08016c3d 	.word	0x08016c3d
 8016bd4:	08016c3d 	.word	0x08016c3d
 8016bd8:	08016c3d 	.word	0x08016c3d
 8016bdc:	08016c3d 	.word	0x08016c3d
 8016be0:	2b6e      	cmp	r3, #110	; 0x6e
 8016be2:	d809      	bhi.n	8016bf8 <_scanf_float+0x134>
 8016be4:	2b60      	cmp	r3, #96	; 0x60
 8016be6:	d8b2      	bhi.n	8016b4e <_scanf_float+0x8a>
 8016be8:	2b54      	cmp	r3, #84	; 0x54
 8016bea:	d077      	beq.n	8016cdc <_scanf_float+0x218>
 8016bec:	2b59      	cmp	r3, #89	; 0x59
 8016bee:	d199      	bne.n	8016b24 <_scanf_float+0x60>
 8016bf0:	2d07      	cmp	r5, #7
 8016bf2:	d197      	bne.n	8016b24 <_scanf_float+0x60>
 8016bf4:	2508      	movs	r5, #8
 8016bf6:	e029      	b.n	8016c4c <_scanf_float+0x188>
 8016bf8:	2b74      	cmp	r3, #116	; 0x74
 8016bfa:	d06f      	beq.n	8016cdc <_scanf_float+0x218>
 8016bfc:	2b79      	cmp	r3, #121	; 0x79
 8016bfe:	e7f6      	b.n	8016bee <_scanf_float+0x12a>
 8016c00:	6821      	ldr	r1, [r4, #0]
 8016c02:	05c8      	lsls	r0, r1, #23
 8016c04:	d51a      	bpl.n	8016c3c <_scanf_float+0x178>
 8016c06:	9b02      	ldr	r3, [sp, #8]
 8016c08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016c0c:	6021      	str	r1, [r4, #0]
 8016c0e:	f109 0901 	add.w	r9, r9, #1
 8016c12:	b11b      	cbz	r3, 8016c1c <_scanf_float+0x158>
 8016c14:	3b01      	subs	r3, #1
 8016c16:	3201      	adds	r2, #1
 8016c18:	9302      	str	r3, [sp, #8]
 8016c1a:	60a2      	str	r2, [r4, #8]
 8016c1c:	68a3      	ldr	r3, [r4, #8]
 8016c1e:	3b01      	subs	r3, #1
 8016c20:	60a3      	str	r3, [r4, #8]
 8016c22:	6923      	ldr	r3, [r4, #16]
 8016c24:	3301      	adds	r3, #1
 8016c26:	6123      	str	r3, [r4, #16]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	607b      	str	r3, [r7, #4]
 8016c30:	f340 8084 	ble.w	8016d3c <_scanf_float+0x278>
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	3301      	adds	r3, #1
 8016c38:	603b      	str	r3, [r7, #0]
 8016c3a:	e766      	b.n	8016b0a <_scanf_float+0x46>
 8016c3c:	eb1a 0f05 	cmn.w	sl, r5
 8016c40:	f47f af70 	bne.w	8016b24 <_scanf_float+0x60>
 8016c44:	6822      	ldr	r2, [r4, #0]
 8016c46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016c4a:	6022      	str	r2, [r4, #0]
 8016c4c:	f806 3b01 	strb.w	r3, [r6], #1
 8016c50:	e7e4      	b.n	8016c1c <_scanf_float+0x158>
 8016c52:	6822      	ldr	r2, [r4, #0]
 8016c54:	0610      	lsls	r0, r2, #24
 8016c56:	f57f af65 	bpl.w	8016b24 <_scanf_float+0x60>
 8016c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c5e:	e7f4      	b.n	8016c4a <_scanf_float+0x186>
 8016c60:	f1ba 0f00 	cmp.w	sl, #0
 8016c64:	d10e      	bne.n	8016c84 <_scanf_float+0x1c0>
 8016c66:	f1b9 0f00 	cmp.w	r9, #0
 8016c6a:	d10e      	bne.n	8016c8a <_scanf_float+0x1c6>
 8016c6c:	6822      	ldr	r2, [r4, #0]
 8016c6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016c72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016c76:	d108      	bne.n	8016c8a <_scanf_float+0x1c6>
 8016c78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c7c:	6022      	str	r2, [r4, #0]
 8016c7e:	f04f 0a01 	mov.w	sl, #1
 8016c82:	e7e3      	b.n	8016c4c <_scanf_float+0x188>
 8016c84:	f1ba 0f02 	cmp.w	sl, #2
 8016c88:	d055      	beq.n	8016d36 <_scanf_float+0x272>
 8016c8a:	2d01      	cmp	r5, #1
 8016c8c:	d002      	beq.n	8016c94 <_scanf_float+0x1d0>
 8016c8e:	2d04      	cmp	r5, #4
 8016c90:	f47f af48 	bne.w	8016b24 <_scanf_float+0x60>
 8016c94:	3501      	adds	r5, #1
 8016c96:	b2ed      	uxtb	r5, r5
 8016c98:	e7d8      	b.n	8016c4c <_scanf_float+0x188>
 8016c9a:	f1ba 0f01 	cmp.w	sl, #1
 8016c9e:	f47f af41 	bne.w	8016b24 <_scanf_float+0x60>
 8016ca2:	f04f 0a02 	mov.w	sl, #2
 8016ca6:	e7d1      	b.n	8016c4c <_scanf_float+0x188>
 8016ca8:	b97d      	cbnz	r5, 8016cca <_scanf_float+0x206>
 8016caa:	f1b9 0f00 	cmp.w	r9, #0
 8016cae:	f47f af3c 	bne.w	8016b2a <_scanf_float+0x66>
 8016cb2:	6822      	ldr	r2, [r4, #0]
 8016cb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016cb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016cbc:	f47f af39 	bne.w	8016b32 <_scanf_float+0x6e>
 8016cc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016cc4:	6022      	str	r2, [r4, #0]
 8016cc6:	2501      	movs	r5, #1
 8016cc8:	e7c0      	b.n	8016c4c <_scanf_float+0x188>
 8016cca:	2d03      	cmp	r5, #3
 8016ccc:	d0e2      	beq.n	8016c94 <_scanf_float+0x1d0>
 8016cce:	2d05      	cmp	r5, #5
 8016cd0:	e7de      	b.n	8016c90 <_scanf_float+0x1cc>
 8016cd2:	2d02      	cmp	r5, #2
 8016cd4:	f47f af26 	bne.w	8016b24 <_scanf_float+0x60>
 8016cd8:	2503      	movs	r5, #3
 8016cda:	e7b7      	b.n	8016c4c <_scanf_float+0x188>
 8016cdc:	2d06      	cmp	r5, #6
 8016cde:	f47f af21 	bne.w	8016b24 <_scanf_float+0x60>
 8016ce2:	2507      	movs	r5, #7
 8016ce4:	e7b2      	b.n	8016c4c <_scanf_float+0x188>
 8016ce6:	6822      	ldr	r2, [r4, #0]
 8016ce8:	0591      	lsls	r1, r2, #22
 8016cea:	f57f af1b 	bpl.w	8016b24 <_scanf_float+0x60>
 8016cee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016cf2:	6022      	str	r2, [r4, #0]
 8016cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8016cf8:	e7a8      	b.n	8016c4c <_scanf_float+0x188>
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016d00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016d04:	d006      	beq.n	8016d14 <_scanf_float+0x250>
 8016d06:	0550      	lsls	r0, r2, #21
 8016d08:	f57f af0c 	bpl.w	8016b24 <_scanf_float+0x60>
 8016d0c:	f1b9 0f00 	cmp.w	r9, #0
 8016d10:	f43f af0f 	beq.w	8016b32 <_scanf_float+0x6e>
 8016d14:	0591      	lsls	r1, r2, #22
 8016d16:	bf58      	it	pl
 8016d18:	9901      	ldrpl	r1, [sp, #4]
 8016d1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016d1e:	bf58      	it	pl
 8016d20:	eba9 0101 	subpl.w	r1, r9, r1
 8016d24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016d28:	bf58      	it	pl
 8016d2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016d2e:	6022      	str	r2, [r4, #0]
 8016d30:	f04f 0900 	mov.w	r9, #0
 8016d34:	e78a      	b.n	8016c4c <_scanf_float+0x188>
 8016d36:	f04f 0a03 	mov.w	sl, #3
 8016d3a:	e787      	b.n	8016c4c <_scanf_float+0x188>
 8016d3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d40:	4639      	mov	r1, r7
 8016d42:	4640      	mov	r0, r8
 8016d44:	4798      	blx	r3
 8016d46:	2800      	cmp	r0, #0
 8016d48:	f43f aedf 	beq.w	8016b0a <_scanf_float+0x46>
 8016d4c:	e6ea      	b.n	8016b24 <_scanf_float+0x60>
 8016d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d56:	463a      	mov	r2, r7
 8016d58:	4640      	mov	r0, r8
 8016d5a:	4798      	blx	r3
 8016d5c:	6923      	ldr	r3, [r4, #16]
 8016d5e:	3b01      	subs	r3, #1
 8016d60:	6123      	str	r3, [r4, #16]
 8016d62:	e6ec      	b.n	8016b3e <_scanf_float+0x7a>
 8016d64:	1e6b      	subs	r3, r5, #1
 8016d66:	2b06      	cmp	r3, #6
 8016d68:	d825      	bhi.n	8016db6 <_scanf_float+0x2f2>
 8016d6a:	2d02      	cmp	r5, #2
 8016d6c:	d836      	bhi.n	8016ddc <_scanf_float+0x318>
 8016d6e:	455e      	cmp	r6, fp
 8016d70:	f67f aee8 	bls.w	8016b44 <_scanf_float+0x80>
 8016d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d7c:	463a      	mov	r2, r7
 8016d7e:	4640      	mov	r0, r8
 8016d80:	4798      	blx	r3
 8016d82:	6923      	ldr	r3, [r4, #16]
 8016d84:	3b01      	subs	r3, #1
 8016d86:	6123      	str	r3, [r4, #16]
 8016d88:	e7f1      	b.n	8016d6e <_scanf_float+0x2aa>
 8016d8a:	9802      	ldr	r0, [sp, #8]
 8016d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016d94:	9002      	str	r0, [sp, #8]
 8016d96:	463a      	mov	r2, r7
 8016d98:	4640      	mov	r0, r8
 8016d9a:	4798      	blx	r3
 8016d9c:	6923      	ldr	r3, [r4, #16]
 8016d9e:	3b01      	subs	r3, #1
 8016da0:	6123      	str	r3, [r4, #16]
 8016da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016da6:	fa5f fa8a 	uxtb.w	sl, sl
 8016daa:	f1ba 0f02 	cmp.w	sl, #2
 8016dae:	d1ec      	bne.n	8016d8a <_scanf_float+0x2c6>
 8016db0:	3d03      	subs	r5, #3
 8016db2:	b2ed      	uxtb	r5, r5
 8016db4:	1b76      	subs	r6, r6, r5
 8016db6:	6823      	ldr	r3, [r4, #0]
 8016db8:	05da      	lsls	r2, r3, #23
 8016dba:	d52f      	bpl.n	8016e1c <_scanf_float+0x358>
 8016dbc:	055b      	lsls	r3, r3, #21
 8016dbe:	d510      	bpl.n	8016de2 <_scanf_float+0x31e>
 8016dc0:	455e      	cmp	r6, fp
 8016dc2:	f67f aebf 	bls.w	8016b44 <_scanf_float+0x80>
 8016dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016dce:	463a      	mov	r2, r7
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	4798      	blx	r3
 8016dd4:	6923      	ldr	r3, [r4, #16]
 8016dd6:	3b01      	subs	r3, #1
 8016dd8:	6123      	str	r3, [r4, #16]
 8016dda:	e7f1      	b.n	8016dc0 <_scanf_float+0x2fc>
 8016ddc:	46aa      	mov	sl, r5
 8016dde:	9602      	str	r6, [sp, #8]
 8016de0:	e7df      	b.n	8016da2 <_scanf_float+0x2de>
 8016de2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016de6:	6923      	ldr	r3, [r4, #16]
 8016de8:	2965      	cmp	r1, #101	; 0x65
 8016dea:	f103 33ff 	add.w	r3, r3, #4294967295
 8016dee:	f106 35ff 	add.w	r5, r6, #4294967295
 8016df2:	6123      	str	r3, [r4, #16]
 8016df4:	d00c      	beq.n	8016e10 <_scanf_float+0x34c>
 8016df6:	2945      	cmp	r1, #69	; 0x45
 8016df8:	d00a      	beq.n	8016e10 <_scanf_float+0x34c>
 8016dfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dfe:	463a      	mov	r2, r7
 8016e00:	4640      	mov	r0, r8
 8016e02:	4798      	blx	r3
 8016e04:	6923      	ldr	r3, [r4, #16]
 8016e06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016e0a:	3b01      	subs	r3, #1
 8016e0c:	1eb5      	subs	r5, r6, #2
 8016e0e:	6123      	str	r3, [r4, #16]
 8016e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e14:	463a      	mov	r2, r7
 8016e16:	4640      	mov	r0, r8
 8016e18:	4798      	blx	r3
 8016e1a:	462e      	mov	r6, r5
 8016e1c:	6825      	ldr	r5, [r4, #0]
 8016e1e:	f015 0510 	ands.w	r5, r5, #16
 8016e22:	d159      	bne.n	8016ed8 <_scanf_float+0x414>
 8016e24:	7035      	strb	r5, [r6, #0]
 8016e26:	6823      	ldr	r3, [r4, #0]
 8016e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016e30:	d11b      	bne.n	8016e6a <_scanf_float+0x3a6>
 8016e32:	9b01      	ldr	r3, [sp, #4]
 8016e34:	454b      	cmp	r3, r9
 8016e36:	eba3 0209 	sub.w	r2, r3, r9
 8016e3a:	d123      	bne.n	8016e84 <_scanf_float+0x3c0>
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	4659      	mov	r1, fp
 8016e40:	4640      	mov	r0, r8
 8016e42:	f000 ff1b 	bl	8017c7c <_strtod_r>
 8016e46:	6822      	ldr	r2, [r4, #0]
 8016e48:	9b03      	ldr	r3, [sp, #12]
 8016e4a:	f012 0f02 	tst.w	r2, #2
 8016e4e:	ec57 6b10 	vmov	r6, r7, d0
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	d021      	beq.n	8016e9a <_scanf_float+0x3d6>
 8016e56:	9903      	ldr	r1, [sp, #12]
 8016e58:	1d1a      	adds	r2, r3, #4
 8016e5a:	600a      	str	r2, [r1, #0]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	e9c3 6700 	strd	r6, r7, [r3]
 8016e62:	68e3      	ldr	r3, [r4, #12]
 8016e64:	3301      	adds	r3, #1
 8016e66:	60e3      	str	r3, [r4, #12]
 8016e68:	e66d      	b.n	8016b46 <_scanf_float+0x82>
 8016e6a:	9b04      	ldr	r3, [sp, #16]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d0e5      	beq.n	8016e3c <_scanf_float+0x378>
 8016e70:	9905      	ldr	r1, [sp, #20]
 8016e72:	230a      	movs	r3, #10
 8016e74:	462a      	mov	r2, r5
 8016e76:	3101      	adds	r1, #1
 8016e78:	4640      	mov	r0, r8
 8016e7a:	f000 ff87 	bl	8017d8c <_strtol_r>
 8016e7e:	9b04      	ldr	r3, [sp, #16]
 8016e80:	9e05      	ldr	r6, [sp, #20]
 8016e82:	1ac2      	subs	r2, r0, r3
 8016e84:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016e88:	429e      	cmp	r6, r3
 8016e8a:	bf28      	it	cs
 8016e8c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016e90:	4912      	ldr	r1, [pc, #72]	; (8016edc <_scanf_float+0x418>)
 8016e92:	4630      	mov	r0, r6
 8016e94:	f000 f82c 	bl	8016ef0 <siprintf>
 8016e98:	e7d0      	b.n	8016e3c <_scanf_float+0x378>
 8016e9a:	9903      	ldr	r1, [sp, #12]
 8016e9c:	f012 0f04 	tst.w	r2, #4
 8016ea0:	f103 0204 	add.w	r2, r3, #4
 8016ea4:	600a      	str	r2, [r1, #0]
 8016ea6:	d1d9      	bne.n	8016e5c <_scanf_float+0x398>
 8016ea8:	f8d3 8000 	ldr.w	r8, [r3]
 8016eac:	ee10 2a10 	vmov	r2, s0
 8016eb0:	ee10 0a10 	vmov	r0, s0
 8016eb4:	463b      	mov	r3, r7
 8016eb6:	4639      	mov	r1, r7
 8016eb8:	f7e9 fe50 	bl	8000b5c <__aeabi_dcmpun>
 8016ebc:	b128      	cbz	r0, 8016eca <_scanf_float+0x406>
 8016ebe:	4808      	ldr	r0, [pc, #32]	; (8016ee0 <_scanf_float+0x41c>)
 8016ec0:	f000 f810 	bl	8016ee4 <nanf>
 8016ec4:	ed88 0a00 	vstr	s0, [r8]
 8016ec8:	e7cb      	b.n	8016e62 <_scanf_float+0x39e>
 8016eca:	4630      	mov	r0, r6
 8016ecc:	4639      	mov	r1, r7
 8016ece:	f7e9 fea3 	bl	8000c18 <__aeabi_d2f>
 8016ed2:	f8c8 0000 	str.w	r0, [r8]
 8016ed6:	e7c4      	b.n	8016e62 <_scanf_float+0x39e>
 8016ed8:	2500      	movs	r5, #0
 8016eda:	e634      	b.n	8016b46 <_scanf_float+0x82>
 8016edc:	0801bb2e 	.word	0x0801bb2e
 8016ee0:	0801bf53 	.word	0x0801bf53

08016ee4 <nanf>:
 8016ee4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016eec <nanf+0x8>
 8016ee8:	4770      	bx	lr
 8016eea:	bf00      	nop
 8016eec:	7fc00000 	.word	0x7fc00000

08016ef0 <siprintf>:
 8016ef0:	b40e      	push	{r1, r2, r3}
 8016ef2:	b500      	push	{lr}
 8016ef4:	b09c      	sub	sp, #112	; 0x70
 8016ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8016ef8:	9002      	str	r0, [sp, #8]
 8016efa:	9006      	str	r0, [sp, #24]
 8016efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f00:	4809      	ldr	r0, [pc, #36]	; (8016f28 <siprintf+0x38>)
 8016f02:	9107      	str	r1, [sp, #28]
 8016f04:	9104      	str	r1, [sp, #16]
 8016f06:	4909      	ldr	r1, [pc, #36]	; (8016f2c <siprintf+0x3c>)
 8016f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f0c:	9105      	str	r1, [sp, #20]
 8016f0e:	6800      	ldr	r0, [r0, #0]
 8016f10:	9301      	str	r3, [sp, #4]
 8016f12:	a902      	add	r1, sp, #8
 8016f14:	f002 ff8e 	bl	8019e34 <_svfiprintf_r>
 8016f18:	9b02      	ldr	r3, [sp, #8]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	701a      	strb	r2, [r3, #0]
 8016f1e:	b01c      	add	sp, #112	; 0x70
 8016f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f24:	b003      	add	sp, #12
 8016f26:	4770      	bx	lr
 8016f28:	2000003c 	.word	0x2000003c
 8016f2c:	ffff0208 	.word	0xffff0208

08016f30 <siscanf>:
 8016f30:	b40e      	push	{r1, r2, r3}
 8016f32:	b510      	push	{r4, lr}
 8016f34:	b09f      	sub	sp, #124	; 0x7c
 8016f36:	ac21      	add	r4, sp, #132	; 0x84
 8016f38:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016f3c:	f854 2b04 	ldr.w	r2, [r4], #4
 8016f40:	9201      	str	r2, [sp, #4]
 8016f42:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016f46:	9004      	str	r0, [sp, #16]
 8016f48:	9008      	str	r0, [sp, #32]
 8016f4a:	f7e9 f953 	bl	80001f4 <strlen>
 8016f4e:	4b0c      	ldr	r3, [pc, #48]	; (8016f80 <siscanf+0x50>)
 8016f50:	9005      	str	r0, [sp, #20]
 8016f52:	9009      	str	r0, [sp, #36]	; 0x24
 8016f54:	930d      	str	r3, [sp, #52]	; 0x34
 8016f56:	480b      	ldr	r0, [pc, #44]	; (8016f84 <siscanf+0x54>)
 8016f58:	9a01      	ldr	r2, [sp, #4]
 8016f5a:	6800      	ldr	r0, [r0, #0]
 8016f5c:	9403      	str	r4, [sp, #12]
 8016f5e:	2300      	movs	r3, #0
 8016f60:	9311      	str	r3, [sp, #68]	; 0x44
 8016f62:	9316      	str	r3, [sp, #88]	; 0x58
 8016f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016f6c:	a904      	add	r1, sp, #16
 8016f6e:	4623      	mov	r3, r4
 8016f70:	f003 f8ba 	bl	801a0e8 <__ssvfiscanf_r>
 8016f74:	b01f      	add	sp, #124	; 0x7c
 8016f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f7a:	b003      	add	sp, #12
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop
 8016f80:	08016fab 	.word	0x08016fab
 8016f84:	2000003c 	.word	0x2000003c

08016f88 <__sread>:
 8016f88:	b510      	push	{r4, lr}
 8016f8a:	460c      	mov	r4, r1
 8016f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f90:	f003 fb74 	bl	801a67c <_read_r>
 8016f94:	2800      	cmp	r0, #0
 8016f96:	bfab      	itete	ge
 8016f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8016f9c:	181b      	addge	r3, r3, r0
 8016f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016fa2:	bfac      	ite	ge
 8016fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016fa6:	81a3      	strhlt	r3, [r4, #12]
 8016fa8:	bd10      	pop	{r4, pc}

08016faa <__seofread>:
 8016faa:	2000      	movs	r0, #0
 8016fac:	4770      	bx	lr

08016fae <__swrite>:
 8016fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb2:	461f      	mov	r7, r3
 8016fb4:	898b      	ldrh	r3, [r1, #12]
 8016fb6:	05db      	lsls	r3, r3, #23
 8016fb8:	4605      	mov	r5, r0
 8016fba:	460c      	mov	r4, r1
 8016fbc:	4616      	mov	r6, r2
 8016fbe:	d505      	bpl.n	8016fcc <__swrite+0x1e>
 8016fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc4:	2302      	movs	r3, #2
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	f002 f8f4 	bl	80191b4 <_lseek_r>
 8016fcc:	89a3      	ldrh	r3, [r4, #12]
 8016fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016fd6:	81a3      	strh	r3, [r4, #12]
 8016fd8:	4632      	mov	r2, r6
 8016fda:	463b      	mov	r3, r7
 8016fdc:	4628      	mov	r0, r5
 8016fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe2:	f000 bed5 	b.w	8017d90 <_write_r>

08016fe6 <__sseek>:
 8016fe6:	b510      	push	{r4, lr}
 8016fe8:	460c      	mov	r4, r1
 8016fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fee:	f002 f8e1 	bl	80191b4 <_lseek_r>
 8016ff2:	1c43      	adds	r3, r0, #1
 8016ff4:	89a3      	ldrh	r3, [r4, #12]
 8016ff6:	bf15      	itete	ne
 8016ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017002:	81a3      	strheq	r3, [r4, #12]
 8017004:	bf18      	it	ne
 8017006:	81a3      	strhne	r3, [r4, #12]
 8017008:	bd10      	pop	{r4, pc}

0801700a <__sclose>:
 801700a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801700e:	f000 bed1 	b.w	8017db4 <_close_r>

08017012 <strncpy>:
 8017012:	b510      	push	{r4, lr}
 8017014:	3901      	subs	r1, #1
 8017016:	4603      	mov	r3, r0
 8017018:	b132      	cbz	r2, 8017028 <strncpy+0x16>
 801701a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801701e:	f803 4b01 	strb.w	r4, [r3], #1
 8017022:	3a01      	subs	r2, #1
 8017024:	2c00      	cmp	r4, #0
 8017026:	d1f7      	bne.n	8017018 <strncpy+0x6>
 8017028:	441a      	add	r2, r3
 801702a:	2100      	movs	r1, #0
 801702c:	4293      	cmp	r3, r2
 801702e:	d100      	bne.n	8017032 <strncpy+0x20>
 8017030:	bd10      	pop	{r4, pc}
 8017032:	f803 1b01 	strb.w	r1, [r3], #1
 8017036:	e7f9      	b.n	801702c <strncpy+0x1a>

08017038 <sulp>:
 8017038:	b570      	push	{r4, r5, r6, lr}
 801703a:	4604      	mov	r4, r0
 801703c:	460d      	mov	r5, r1
 801703e:	ec45 4b10 	vmov	d0, r4, r5
 8017042:	4616      	mov	r6, r2
 8017044:	f002 fc54 	bl	80198f0 <__ulp>
 8017048:	ec51 0b10 	vmov	r0, r1, d0
 801704c:	b17e      	cbz	r6, 801706e <sulp+0x36>
 801704e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017056:	2b00      	cmp	r3, #0
 8017058:	dd09      	ble.n	801706e <sulp+0x36>
 801705a:	051b      	lsls	r3, r3, #20
 801705c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017060:	2400      	movs	r4, #0
 8017062:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017066:	4622      	mov	r2, r4
 8017068:	462b      	mov	r3, r5
 801706a:	f7e9 fadd 	bl	8000628 <__aeabi_dmul>
 801706e:	bd70      	pop	{r4, r5, r6, pc}

08017070 <_strtod_l>:
 8017070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017074:	ed2d 8b02 	vpush	{d8}
 8017078:	b09d      	sub	sp, #116	; 0x74
 801707a:	461f      	mov	r7, r3
 801707c:	2300      	movs	r3, #0
 801707e:	9318      	str	r3, [sp, #96]	; 0x60
 8017080:	4ba2      	ldr	r3, [pc, #648]	; (801730c <_strtod_l+0x29c>)
 8017082:	9213      	str	r2, [sp, #76]	; 0x4c
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	9305      	str	r3, [sp, #20]
 8017088:	4604      	mov	r4, r0
 801708a:	4618      	mov	r0, r3
 801708c:	4688      	mov	r8, r1
 801708e:	f7e9 f8b1 	bl	80001f4 <strlen>
 8017092:	f04f 0a00 	mov.w	sl, #0
 8017096:	4605      	mov	r5, r0
 8017098:	f04f 0b00 	mov.w	fp, #0
 801709c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80170a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170a2:	781a      	ldrb	r2, [r3, #0]
 80170a4:	2a2b      	cmp	r2, #43	; 0x2b
 80170a6:	d04e      	beq.n	8017146 <_strtod_l+0xd6>
 80170a8:	d83b      	bhi.n	8017122 <_strtod_l+0xb2>
 80170aa:	2a0d      	cmp	r2, #13
 80170ac:	d834      	bhi.n	8017118 <_strtod_l+0xa8>
 80170ae:	2a08      	cmp	r2, #8
 80170b0:	d834      	bhi.n	801711c <_strtod_l+0xac>
 80170b2:	2a00      	cmp	r2, #0
 80170b4:	d03e      	beq.n	8017134 <_strtod_l+0xc4>
 80170b6:	2300      	movs	r3, #0
 80170b8:	930a      	str	r3, [sp, #40]	; 0x28
 80170ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80170bc:	7833      	ldrb	r3, [r6, #0]
 80170be:	2b30      	cmp	r3, #48	; 0x30
 80170c0:	f040 80b0 	bne.w	8017224 <_strtod_l+0x1b4>
 80170c4:	7873      	ldrb	r3, [r6, #1]
 80170c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80170ca:	2b58      	cmp	r3, #88	; 0x58
 80170cc:	d168      	bne.n	80171a0 <_strtod_l+0x130>
 80170ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170d0:	9301      	str	r3, [sp, #4]
 80170d2:	ab18      	add	r3, sp, #96	; 0x60
 80170d4:	9702      	str	r7, [sp, #8]
 80170d6:	9300      	str	r3, [sp, #0]
 80170d8:	4a8d      	ldr	r2, [pc, #564]	; (8017310 <_strtod_l+0x2a0>)
 80170da:	ab19      	add	r3, sp, #100	; 0x64
 80170dc:	a917      	add	r1, sp, #92	; 0x5c
 80170de:	4620      	mov	r0, r4
 80170e0:	f001 fd5c 	bl	8018b9c <__gethex>
 80170e4:	f010 0707 	ands.w	r7, r0, #7
 80170e8:	4605      	mov	r5, r0
 80170ea:	d005      	beq.n	80170f8 <_strtod_l+0x88>
 80170ec:	2f06      	cmp	r7, #6
 80170ee:	d12c      	bne.n	801714a <_strtod_l+0xda>
 80170f0:	3601      	adds	r6, #1
 80170f2:	2300      	movs	r3, #0
 80170f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80170f6:	930a      	str	r3, [sp, #40]	; 0x28
 80170f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	f040 8590 	bne.w	8017c20 <_strtod_l+0xbb0>
 8017100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017102:	b1eb      	cbz	r3, 8017140 <_strtod_l+0xd0>
 8017104:	4652      	mov	r2, sl
 8017106:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801710a:	ec43 2b10 	vmov	d0, r2, r3
 801710e:	b01d      	add	sp, #116	; 0x74
 8017110:	ecbd 8b02 	vpop	{d8}
 8017114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017118:	2a20      	cmp	r2, #32
 801711a:	d1cc      	bne.n	80170b6 <_strtod_l+0x46>
 801711c:	3301      	adds	r3, #1
 801711e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017120:	e7be      	b.n	80170a0 <_strtod_l+0x30>
 8017122:	2a2d      	cmp	r2, #45	; 0x2d
 8017124:	d1c7      	bne.n	80170b6 <_strtod_l+0x46>
 8017126:	2201      	movs	r2, #1
 8017128:	920a      	str	r2, [sp, #40]	; 0x28
 801712a:	1c5a      	adds	r2, r3, #1
 801712c:	9217      	str	r2, [sp, #92]	; 0x5c
 801712e:	785b      	ldrb	r3, [r3, #1]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d1c2      	bne.n	80170ba <_strtod_l+0x4a>
 8017134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017136:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801713a:	2b00      	cmp	r3, #0
 801713c:	f040 856e 	bne.w	8017c1c <_strtod_l+0xbac>
 8017140:	4652      	mov	r2, sl
 8017142:	465b      	mov	r3, fp
 8017144:	e7e1      	b.n	801710a <_strtod_l+0x9a>
 8017146:	2200      	movs	r2, #0
 8017148:	e7ee      	b.n	8017128 <_strtod_l+0xb8>
 801714a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801714c:	b13a      	cbz	r2, 801715e <_strtod_l+0xee>
 801714e:	2135      	movs	r1, #53	; 0x35
 8017150:	a81a      	add	r0, sp, #104	; 0x68
 8017152:	f002 fcd8 	bl	8019b06 <__copybits>
 8017156:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017158:	4620      	mov	r0, r4
 801715a:	f002 f897 	bl	801928c <_Bfree>
 801715e:	3f01      	subs	r7, #1
 8017160:	2f04      	cmp	r7, #4
 8017162:	d806      	bhi.n	8017172 <_strtod_l+0x102>
 8017164:	e8df f007 	tbb	[pc, r7]
 8017168:	1714030a 	.word	0x1714030a
 801716c:	0a          	.byte	0x0a
 801716d:	00          	.byte	0x00
 801716e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8017172:	0728      	lsls	r0, r5, #28
 8017174:	d5c0      	bpl.n	80170f8 <_strtod_l+0x88>
 8017176:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801717a:	e7bd      	b.n	80170f8 <_strtod_l+0x88>
 801717c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8017180:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017182:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017186:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801718a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801718e:	e7f0      	b.n	8017172 <_strtod_l+0x102>
 8017190:	f8df b180 	ldr.w	fp, [pc, #384]	; 8017314 <_strtod_l+0x2a4>
 8017194:	e7ed      	b.n	8017172 <_strtod_l+0x102>
 8017196:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801719a:	f04f 3aff 	mov.w	sl, #4294967295
 801719e:	e7e8      	b.n	8017172 <_strtod_l+0x102>
 80171a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80171a2:	1c5a      	adds	r2, r3, #1
 80171a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80171a6:	785b      	ldrb	r3, [r3, #1]
 80171a8:	2b30      	cmp	r3, #48	; 0x30
 80171aa:	d0f9      	beq.n	80171a0 <_strtod_l+0x130>
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d0a3      	beq.n	80170f8 <_strtod_l+0x88>
 80171b0:	2301      	movs	r3, #1
 80171b2:	f04f 0900 	mov.w	r9, #0
 80171b6:	9304      	str	r3, [sp, #16]
 80171b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80171ba:	9308      	str	r3, [sp, #32]
 80171bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80171c0:	464f      	mov	r7, r9
 80171c2:	220a      	movs	r2, #10
 80171c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80171c6:	7806      	ldrb	r6, [r0, #0]
 80171c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80171cc:	b2d9      	uxtb	r1, r3
 80171ce:	2909      	cmp	r1, #9
 80171d0:	d92a      	bls.n	8017228 <_strtod_l+0x1b8>
 80171d2:	9905      	ldr	r1, [sp, #20]
 80171d4:	462a      	mov	r2, r5
 80171d6:	f003 fab3 	bl	801a740 <strncmp>
 80171da:	b398      	cbz	r0, 8017244 <_strtod_l+0x1d4>
 80171dc:	2000      	movs	r0, #0
 80171de:	4632      	mov	r2, r6
 80171e0:	463d      	mov	r5, r7
 80171e2:	9005      	str	r0, [sp, #20]
 80171e4:	4603      	mov	r3, r0
 80171e6:	2a65      	cmp	r2, #101	; 0x65
 80171e8:	d001      	beq.n	80171ee <_strtod_l+0x17e>
 80171ea:	2a45      	cmp	r2, #69	; 0x45
 80171ec:	d118      	bne.n	8017220 <_strtod_l+0x1b0>
 80171ee:	b91d      	cbnz	r5, 80171f8 <_strtod_l+0x188>
 80171f0:	9a04      	ldr	r2, [sp, #16]
 80171f2:	4302      	orrs	r2, r0
 80171f4:	d09e      	beq.n	8017134 <_strtod_l+0xc4>
 80171f6:	2500      	movs	r5, #0
 80171f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80171fc:	f108 0201 	add.w	r2, r8, #1
 8017200:	9217      	str	r2, [sp, #92]	; 0x5c
 8017202:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017206:	2a2b      	cmp	r2, #43	; 0x2b
 8017208:	d075      	beq.n	80172f6 <_strtod_l+0x286>
 801720a:	2a2d      	cmp	r2, #45	; 0x2d
 801720c:	d07b      	beq.n	8017306 <_strtod_l+0x296>
 801720e:	f04f 0c00 	mov.w	ip, #0
 8017212:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017216:	2909      	cmp	r1, #9
 8017218:	f240 8082 	bls.w	8017320 <_strtod_l+0x2b0>
 801721c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017220:	2600      	movs	r6, #0
 8017222:	e09d      	b.n	8017360 <_strtod_l+0x2f0>
 8017224:	2300      	movs	r3, #0
 8017226:	e7c4      	b.n	80171b2 <_strtod_l+0x142>
 8017228:	2f08      	cmp	r7, #8
 801722a:	bfd8      	it	le
 801722c:	9907      	ldrle	r1, [sp, #28]
 801722e:	f100 0001 	add.w	r0, r0, #1
 8017232:	bfda      	itte	le
 8017234:	fb02 3301 	mlale	r3, r2, r1, r3
 8017238:	9307      	strle	r3, [sp, #28]
 801723a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801723e:	3701      	adds	r7, #1
 8017240:	9017      	str	r0, [sp, #92]	; 0x5c
 8017242:	e7bf      	b.n	80171c4 <_strtod_l+0x154>
 8017244:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017246:	195a      	adds	r2, r3, r5
 8017248:	9217      	str	r2, [sp, #92]	; 0x5c
 801724a:	5d5a      	ldrb	r2, [r3, r5]
 801724c:	2f00      	cmp	r7, #0
 801724e:	d037      	beq.n	80172c0 <_strtod_l+0x250>
 8017250:	9005      	str	r0, [sp, #20]
 8017252:	463d      	mov	r5, r7
 8017254:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017258:	2b09      	cmp	r3, #9
 801725a:	d912      	bls.n	8017282 <_strtod_l+0x212>
 801725c:	2301      	movs	r3, #1
 801725e:	e7c2      	b.n	80171e6 <_strtod_l+0x176>
 8017260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017262:	1c5a      	adds	r2, r3, #1
 8017264:	9217      	str	r2, [sp, #92]	; 0x5c
 8017266:	785a      	ldrb	r2, [r3, #1]
 8017268:	3001      	adds	r0, #1
 801726a:	2a30      	cmp	r2, #48	; 0x30
 801726c:	d0f8      	beq.n	8017260 <_strtod_l+0x1f0>
 801726e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017272:	2b08      	cmp	r3, #8
 8017274:	f200 84d9 	bhi.w	8017c2a <_strtod_l+0xbba>
 8017278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801727a:	9005      	str	r0, [sp, #20]
 801727c:	2000      	movs	r0, #0
 801727e:	9308      	str	r3, [sp, #32]
 8017280:	4605      	mov	r5, r0
 8017282:	3a30      	subs	r2, #48	; 0x30
 8017284:	f100 0301 	add.w	r3, r0, #1
 8017288:	d014      	beq.n	80172b4 <_strtod_l+0x244>
 801728a:	9905      	ldr	r1, [sp, #20]
 801728c:	4419      	add	r1, r3
 801728e:	9105      	str	r1, [sp, #20]
 8017290:	462b      	mov	r3, r5
 8017292:	eb00 0e05 	add.w	lr, r0, r5
 8017296:	210a      	movs	r1, #10
 8017298:	4573      	cmp	r3, lr
 801729a:	d113      	bne.n	80172c4 <_strtod_l+0x254>
 801729c:	182b      	adds	r3, r5, r0
 801729e:	2b08      	cmp	r3, #8
 80172a0:	f105 0501 	add.w	r5, r5, #1
 80172a4:	4405      	add	r5, r0
 80172a6:	dc1c      	bgt.n	80172e2 <_strtod_l+0x272>
 80172a8:	9907      	ldr	r1, [sp, #28]
 80172aa:	230a      	movs	r3, #10
 80172ac:	fb03 2301 	mla	r3, r3, r1, r2
 80172b0:	9307      	str	r3, [sp, #28]
 80172b2:	2300      	movs	r3, #0
 80172b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80172b6:	1c51      	adds	r1, r2, #1
 80172b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80172ba:	7852      	ldrb	r2, [r2, #1]
 80172bc:	4618      	mov	r0, r3
 80172be:	e7c9      	b.n	8017254 <_strtod_l+0x1e4>
 80172c0:	4638      	mov	r0, r7
 80172c2:	e7d2      	b.n	801726a <_strtod_l+0x1fa>
 80172c4:	2b08      	cmp	r3, #8
 80172c6:	dc04      	bgt.n	80172d2 <_strtod_l+0x262>
 80172c8:	9e07      	ldr	r6, [sp, #28]
 80172ca:	434e      	muls	r6, r1
 80172cc:	9607      	str	r6, [sp, #28]
 80172ce:	3301      	adds	r3, #1
 80172d0:	e7e2      	b.n	8017298 <_strtod_l+0x228>
 80172d2:	f103 0c01 	add.w	ip, r3, #1
 80172d6:	f1bc 0f10 	cmp.w	ip, #16
 80172da:	bfd8      	it	le
 80172dc:	fb01 f909 	mulle.w	r9, r1, r9
 80172e0:	e7f5      	b.n	80172ce <_strtod_l+0x25e>
 80172e2:	2d10      	cmp	r5, #16
 80172e4:	bfdc      	itt	le
 80172e6:	230a      	movle	r3, #10
 80172e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80172ec:	e7e1      	b.n	80172b2 <_strtod_l+0x242>
 80172ee:	2300      	movs	r3, #0
 80172f0:	9305      	str	r3, [sp, #20]
 80172f2:	2301      	movs	r3, #1
 80172f4:	e77c      	b.n	80171f0 <_strtod_l+0x180>
 80172f6:	f04f 0c00 	mov.w	ip, #0
 80172fa:	f108 0202 	add.w	r2, r8, #2
 80172fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8017300:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017304:	e785      	b.n	8017212 <_strtod_l+0x1a2>
 8017306:	f04f 0c01 	mov.w	ip, #1
 801730a:	e7f6      	b.n	80172fa <_strtod_l+0x28a>
 801730c:	0801bd80 	.word	0x0801bd80
 8017310:	0801bb34 	.word	0x0801bb34
 8017314:	7ff00000 	.word	0x7ff00000
 8017318:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801731a:	1c51      	adds	r1, r2, #1
 801731c:	9117      	str	r1, [sp, #92]	; 0x5c
 801731e:	7852      	ldrb	r2, [r2, #1]
 8017320:	2a30      	cmp	r2, #48	; 0x30
 8017322:	d0f9      	beq.n	8017318 <_strtod_l+0x2a8>
 8017324:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8017328:	2908      	cmp	r1, #8
 801732a:	f63f af79 	bhi.w	8017220 <_strtod_l+0x1b0>
 801732e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017334:	9206      	str	r2, [sp, #24]
 8017336:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017338:	1c51      	adds	r1, r2, #1
 801733a:	9117      	str	r1, [sp, #92]	; 0x5c
 801733c:	7852      	ldrb	r2, [r2, #1]
 801733e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8017342:	2e09      	cmp	r6, #9
 8017344:	d937      	bls.n	80173b6 <_strtod_l+0x346>
 8017346:	9e06      	ldr	r6, [sp, #24]
 8017348:	1b89      	subs	r1, r1, r6
 801734a:	2908      	cmp	r1, #8
 801734c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017350:	dc02      	bgt.n	8017358 <_strtod_l+0x2e8>
 8017352:	4576      	cmp	r6, lr
 8017354:	bfa8      	it	ge
 8017356:	4676      	movge	r6, lr
 8017358:	f1bc 0f00 	cmp.w	ip, #0
 801735c:	d000      	beq.n	8017360 <_strtod_l+0x2f0>
 801735e:	4276      	negs	r6, r6
 8017360:	2d00      	cmp	r5, #0
 8017362:	d14d      	bne.n	8017400 <_strtod_l+0x390>
 8017364:	9904      	ldr	r1, [sp, #16]
 8017366:	4301      	orrs	r1, r0
 8017368:	f47f aec6 	bne.w	80170f8 <_strtod_l+0x88>
 801736c:	2b00      	cmp	r3, #0
 801736e:	f47f aee1 	bne.w	8017134 <_strtod_l+0xc4>
 8017372:	2a69      	cmp	r2, #105	; 0x69
 8017374:	d027      	beq.n	80173c6 <_strtod_l+0x356>
 8017376:	dc24      	bgt.n	80173c2 <_strtod_l+0x352>
 8017378:	2a49      	cmp	r2, #73	; 0x49
 801737a:	d024      	beq.n	80173c6 <_strtod_l+0x356>
 801737c:	2a4e      	cmp	r2, #78	; 0x4e
 801737e:	f47f aed9 	bne.w	8017134 <_strtod_l+0xc4>
 8017382:	499f      	ldr	r1, [pc, #636]	; (8017600 <_strtod_l+0x590>)
 8017384:	a817      	add	r0, sp, #92	; 0x5c
 8017386:	f001 fe61 	bl	801904c <__match>
 801738a:	2800      	cmp	r0, #0
 801738c:	f43f aed2 	beq.w	8017134 <_strtod_l+0xc4>
 8017390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	2b28      	cmp	r3, #40	; 0x28
 8017396:	d12d      	bne.n	80173f4 <_strtod_l+0x384>
 8017398:	499a      	ldr	r1, [pc, #616]	; (8017604 <_strtod_l+0x594>)
 801739a:	aa1a      	add	r2, sp, #104	; 0x68
 801739c:	a817      	add	r0, sp, #92	; 0x5c
 801739e:	f001 fe69 	bl	8019074 <__hexnan>
 80173a2:	2805      	cmp	r0, #5
 80173a4:	d126      	bne.n	80173f4 <_strtod_l+0x384>
 80173a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80173ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80173b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80173b4:	e6a0      	b.n	80170f8 <_strtod_l+0x88>
 80173b6:	210a      	movs	r1, #10
 80173b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80173bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80173c0:	e7b9      	b.n	8017336 <_strtod_l+0x2c6>
 80173c2:	2a6e      	cmp	r2, #110	; 0x6e
 80173c4:	e7db      	b.n	801737e <_strtod_l+0x30e>
 80173c6:	4990      	ldr	r1, [pc, #576]	; (8017608 <_strtod_l+0x598>)
 80173c8:	a817      	add	r0, sp, #92	; 0x5c
 80173ca:	f001 fe3f 	bl	801904c <__match>
 80173ce:	2800      	cmp	r0, #0
 80173d0:	f43f aeb0 	beq.w	8017134 <_strtod_l+0xc4>
 80173d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80173d6:	498d      	ldr	r1, [pc, #564]	; (801760c <_strtod_l+0x59c>)
 80173d8:	3b01      	subs	r3, #1
 80173da:	a817      	add	r0, sp, #92	; 0x5c
 80173dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80173de:	f001 fe35 	bl	801904c <__match>
 80173e2:	b910      	cbnz	r0, 80173ea <_strtod_l+0x37a>
 80173e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80173e6:	3301      	adds	r3, #1
 80173e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80173ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 801761c <_strtod_l+0x5ac>
 80173ee:	f04f 0a00 	mov.w	sl, #0
 80173f2:	e681      	b.n	80170f8 <_strtod_l+0x88>
 80173f4:	4886      	ldr	r0, [pc, #536]	; (8017610 <_strtod_l+0x5a0>)
 80173f6:	f003 f953 	bl	801a6a0 <nan>
 80173fa:	ec5b ab10 	vmov	sl, fp, d0
 80173fe:	e67b      	b.n	80170f8 <_strtod_l+0x88>
 8017400:	9b05      	ldr	r3, [sp, #20]
 8017402:	9807      	ldr	r0, [sp, #28]
 8017404:	1af3      	subs	r3, r6, r3
 8017406:	2f00      	cmp	r7, #0
 8017408:	bf08      	it	eq
 801740a:	462f      	moveq	r7, r5
 801740c:	2d10      	cmp	r5, #16
 801740e:	9306      	str	r3, [sp, #24]
 8017410:	46a8      	mov	r8, r5
 8017412:	bfa8      	it	ge
 8017414:	f04f 0810 	movge.w	r8, #16
 8017418:	f7e9 f88c 	bl	8000534 <__aeabi_ui2d>
 801741c:	2d09      	cmp	r5, #9
 801741e:	4682      	mov	sl, r0
 8017420:	468b      	mov	fp, r1
 8017422:	dd13      	ble.n	801744c <_strtod_l+0x3dc>
 8017424:	4b7b      	ldr	r3, [pc, #492]	; (8017614 <_strtod_l+0x5a4>)
 8017426:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801742a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801742e:	f7e9 f8fb 	bl	8000628 <__aeabi_dmul>
 8017432:	4682      	mov	sl, r0
 8017434:	4648      	mov	r0, r9
 8017436:	468b      	mov	fp, r1
 8017438:	f7e9 f87c 	bl	8000534 <__aeabi_ui2d>
 801743c:	4602      	mov	r2, r0
 801743e:	460b      	mov	r3, r1
 8017440:	4650      	mov	r0, sl
 8017442:	4659      	mov	r1, fp
 8017444:	f7e8 ff3a 	bl	80002bc <__adddf3>
 8017448:	4682      	mov	sl, r0
 801744a:	468b      	mov	fp, r1
 801744c:	2d0f      	cmp	r5, #15
 801744e:	dc38      	bgt.n	80174c2 <_strtod_l+0x452>
 8017450:	9b06      	ldr	r3, [sp, #24]
 8017452:	2b00      	cmp	r3, #0
 8017454:	f43f ae50 	beq.w	80170f8 <_strtod_l+0x88>
 8017458:	dd24      	ble.n	80174a4 <_strtod_l+0x434>
 801745a:	2b16      	cmp	r3, #22
 801745c:	dc0b      	bgt.n	8017476 <_strtod_l+0x406>
 801745e:	496d      	ldr	r1, [pc, #436]	; (8017614 <_strtod_l+0x5a4>)
 8017460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017468:	4652      	mov	r2, sl
 801746a:	465b      	mov	r3, fp
 801746c:	f7e9 f8dc 	bl	8000628 <__aeabi_dmul>
 8017470:	4682      	mov	sl, r0
 8017472:	468b      	mov	fp, r1
 8017474:	e640      	b.n	80170f8 <_strtod_l+0x88>
 8017476:	9a06      	ldr	r2, [sp, #24]
 8017478:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801747c:	4293      	cmp	r3, r2
 801747e:	db20      	blt.n	80174c2 <_strtod_l+0x452>
 8017480:	4c64      	ldr	r4, [pc, #400]	; (8017614 <_strtod_l+0x5a4>)
 8017482:	f1c5 050f 	rsb	r5, r5, #15
 8017486:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801748a:	4652      	mov	r2, sl
 801748c:	465b      	mov	r3, fp
 801748e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017492:	f7e9 f8c9 	bl	8000628 <__aeabi_dmul>
 8017496:	9b06      	ldr	r3, [sp, #24]
 8017498:	1b5d      	subs	r5, r3, r5
 801749a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801749e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80174a2:	e7e3      	b.n	801746c <_strtod_l+0x3fc>
 80174a4:	9b06      	ldr	r3, [sp, #24]
 80174a6:	3316      	adds	r3, #22
 80174a8:	db0b      	blt.n	80174c2 <_strtod_l+0x452>
 80174aa:	9b05      	ldr	r3, [sp, #20]
 80174ac:	1b9e      	subs	r6, r3, r6
 80174ae:	4b59      	ldr	r3, [pc, #356]	; (8017614 <_strtod_l+0x5a4>)
 80174b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80174b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80174b8:	4650      	mov	r0, sl
 80174ba:	4659      	mov	r1, fp
 80174bc:	f7e9 f9de 	bl	800087c <__aeabi_ddiv>
 80174c0:	e7d6      	b.n	8017470 <_strtod_l+0x400>
 80174c2:	9b06      	ldr	r3, [sp, #24]
 80174c4:	eba5 0808 	sub.w	r8, r5, r8
 80174c8:	4498      	add	r8, r3
 80174ca:	f1b8 0f00 	cmp.w	r8, #0
 80174ce:	dd74      	ble.n	80175ba <_strtod_l+0x54a>
 80174d0:	f018 030f 	ands.w	r3, r8, #15
 80174d4:	d00a      	beq.n	80174ec <_strtod_l+0x47c>
 80174d6:	494f      	ldr	r1, [pc, #316]	; (8017614 <_strtod_l+0x5a4>)
 80174d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80174dc:	4652      	mov	r2, sl
 80174de:	465b      	mov	r3, fp
 80174e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174e4:	f7e9 f8a0 	bl	8000628 <__aeabi_dmul>
 80174e8:	4682      	mov	sl, r0
 80174ea:	468b      	mov	fp, r1
 80174ec:	f038 080f 	bics.w	r8, r8, #15
 80174f0:	d04f      	beq.n	8017592 <_strtod_l+0x522>
 80174f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80174f6:	dd22      	ble.n	801753e <_strtod_l+0x4ce>
 80174f8:	2500      	movs	r5, #0
 80174fa:	462e      	mov	r6, r5
 80174fc:	9507      	str	r5, [sp, #28]
 80174fe:	9505      	str	r5, [sp, #20]
 8017500:	2322      	movs	r3, #34	; 0x22
 8017502:	f8df b118 	ldr.w	fp, [pc, #280]	; 801761c <_strtod_l+0x5ac>
 8017506:	6023      	str	r3, [r4, #0]
 8017508:	f04f 0a00 	mov.w	sl, #0
 801750c:	9b07      	ldr	r3, [sp, #28]
 801750e:	2b00      	cmp	r3, #0
 8017510:	f43f adf2 	beq.w	80170f8 <_strtod_l+0x88>
 8017514:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017516:	4620      	mov	r0, r4
 8017518:	f001 feb8 	bl	801928c <_Bfree>
 801751c:	9905      	ldr	r1, [sp, #20]
 801751e:	4620      	mov	r0, r4
 8017520:	f001 feb4 	bl	801928c <_Bfree>
 8017524:	4631      	mov	r1, r6
 8017526:	4620      	mov	r0, r4
 8017528:	f001 feb0 	bl	801928c <_Bfree>
 801752c:	9907      	ldr	r1, [sp, #28]
 801752e:	4620      	mov	r0, r4
 8017530:	f001 feac 	bl	801928c <_Bfree>
 8017534:	4629      	mov	r1, r5
 8017536:	4620      	mov	r0, r4
 8017538:	f001 fea8 	bl	801928c <_Bfree>
 801753c:	e5dc      	b.n	80170f8 <_strtod_l+0x88>
 801753e:	4b36      	ldr	r3, [pc, #216]	; (8017618 <_strtod_l+0x5a8>)
 8017540:	9304      	str	r3, [sp, #16]
 8017542:	2300      	movs	r3, #0
 8017544:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017548:	4650      	mov	r0, sl
 801754a:	4659      	mov	r1, fp
 801754c:	4699      	mov	r9, r3
 801754e:	f1b8 0f01 	cmp.w	r8, #1
 8017552:	dc21      	bgt.n	8017598 <_strtod_l+0x528>
 8017554:	b10b      	cbz	r3, 801755a <_strtod_l+0x4ea>
 8017556:	4682      	mov	sl, r0
 8017558:	468b      	mov	fp, r1
 801755a:	4b2f      	ldr	r3, [pc, #188]	; (8017618 <_strtod_l+0x5a8>)
 801755c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017560:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017564:	4652      	mov	r2, sl
 8017566:	465b      	mov	r3, fp
 8017568:	e9d9 0100 	ldrd	r0, r1, [r9]
 801756c:	f7e9 f85c 	bl	8000628 <__aeabi_dmul>
 8017570:	4b2a      	ldr	r3, [pc, #168]	; (801761c <_strtod_l+0x5ac>)
 8017572:	460a      	mov	r2, r1
 8017574:	400b      	ands	r3, r1
 8017576:	492a      	ldr	r1, [pc, #168]	; (8017620 <_strtod_l+0x5b0>)
 8017578:	428b      	cmp	r3, r1
 801757a:	4682      	mov	sl, r0
 801757c:	d8bc      	bhi.n	80174f8 <_strtod_l+0x488>
 801757e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017582:	428b      	cmp	r3, r1
 8017584:	bf86      	itte	hi
 8017586:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8017624 <_strtod_l+0x5b4>
 801758a:	f04f 3aff 	movhi.w	sl, #4294967295
 801758e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017592:	2300      	movs	r3, #0
 8017594:	9304      	str	r3, [sp, #16]
 8017596:	e084      	b.n	80176a2 <_strtod_l+0x632>
 8017598:	f018 0f01 	tst.w	r8, #1
 801759c:	d005      	beq.n	80175aa <_strtod_l+0x53a>
 801759e:	9b04      	ldr	r3, [sp, #16]
 80175a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a4:	f7e9 f840 	bl	8000628 <__aeabi_dmul>
 80175a8:	2301      	movs	r3, #1
 80175aa:	9a04      	ldr	r2, [sp, #16]
 80175ac:	3208      	adds	r2, #8
 80175ae:	f109 0901 	add.w	r9, r9, #1
 80175b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80175b6:	9204      	str	r2, [sp, #16]
 80175b8:	e7c9      	b.n	801754e <_strtod_l+0x4de>
 80175ba:	d0ea      	beq.n	8017592 <_strtod_l+0x522>
 80175bc:	f1c8 0800 	rsb	r8, r8, #0
 80175c0:	f018 020f 	ands.w	r2, r8, #15
 80175c4:	d00a      	beq.n	80175dc <_strtod_l+0x56c>
 80175c6:	4b13      	ldr	r3, [pc, #76]	; (8017614 <_strtod_l+0x5a4>)
 80175c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175cc:	4650      	mov	r0, sl
 80175ce:	4659      	mov	r1, fp
 80175d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d4:	f7e9 f952 	bl	800087c <__aeabi_ddiv>
 80175d8:	4682      	mov	sl, r0
 80175da:	468b      	mov	fp, r1
 80175dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80175e0:	d0d7      	beq.n	8017592 <_strtod_l+0x522>
 80175e2:	f1b8 0f1f 	cmp.w	r8, #31
 80175e6:	dd1f      	ble.n	8017628 <_strtod_l+0x5b8>
 80175e8:	2500      	movs	r5, #0
 80175ea:	462e      	mov	r6, r5
 80175ec:	9507      	str	r5, [sp, #28]
 80175ee:	9505      	str	r5, [sp, #20]
 80175f0:	2322      	movs	r3, #34	; 0x22
 80175f2:	f04f 0a00 	mov.w	sl, #0
 80175f6:	f04f 0b00 	mov.w	fp, #0
 80175fa:	6023      	str	r3, [r4, #0]
 80175fc:	e786      	b.n	801750c <_strtod_l+0x49c>
 80175fe:	bf00      	nop
 8017600:	0801bb09 	.word	0x0801bb09
 8017604:	0801bb48 	.word	0x0801bb48
 8017608:	0801bb01 	.word	0x0801bb01
 801760c:	0801bc8c 	.word	0x0801bc8c
 8017610:	0801bf53 	.word	0x0801bf53
 8017614:	0801be18 	.word	0x0801be18
 8017618:	0801bdf0 	.word	0x0801bdf0
 801761c:	7ff00000 	.word	0x7ff00000
 8017620:	7ca00000 	.word	0x7ca00000
 8017624:	7fefffff 	.word	0x7fefffff
 8017628:	f018 0310 	ands.w	r3, r8, #16
 801762c:	bf18      	it	ne
 801762e:	236a      	movne	r3, #106	; 0x6a
 8017630:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80179e0 <_strtod_l+0x970>
 8017634:	9304      	str	r3, [sp, #16]
 8017636:	4650      	mov	r0, sl
 8017638:	4659      	mov	r1, fp
 801763a:	2300      	movs	r3, #0
 801763c:	f018 0f01 	tst.w	r8, #1
 8017640:	d004      	beq.n	801764c <_strtod_l+0x5dc>
 8017642:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017646:	f7e8 ffef 	bl	8000628 <__aeabi_dmul>
 801764a:	2301      	movs	r3, #1
 801764c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017650:	f109 0908 	add.w	r9, r9, #8
 8017654:	d1f2      	bne.n	801763c <_strtod_l+0x5cc>
 8017656:	b10b      	cbz	r3, 801765c <_strtod_l+0x5ec>
 8017658:	4682      	mov	sl, r0
 801765a:	468b      	mov	fp, r1
 801765c:	9b04      	ldr	r3, [sp, #16]
 801765e:	b1c3      	cbz	r3, 8017692 <_strtod_l+0x622>
 8017660:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017664:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017668:	2b00      	cmp	r3, #0
 801766a:	4659      	mov	r1, fp
 801766c:	dd11      	ble.n	8017692 <_strtod_l+0x622>
 801766e:	2b1f      	cmp	r3, #31
 8017670:	f340 8124 	ble.w	80178bc <_strtod_l+0x84c>
 8017674:	2b34      	cmp	r3, #52	; 0x34
 8017676:	bfde      	ittt	le
 8017678:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801767c:	f04f 33ff 	movle.w	r3, #4294967295
 8017680:	fa03 f202 	lslle.w	r2, r3, r2
 8017684:	f04f 0a00 	mov.w	sl, #0
 8017688:	bfcc      	ite	gt
 801768a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801768e:	ea02 0b01 	andle.w	fp, r2, r1
 8017692:	2200      	movs	r2, #0
 8017694:	2300      	movs	r3, #0
 8017696:	4650      	mov	r0, sl
 8017698:	4659      	mov	r1, fp
 801769a:	f7e9 fa2d 	bl	8000af8 <__aeabi_dcmpeq>
 801769e:	2800      	cmp	r0, #0
 80176a0:	d1a2      	bne.n	80175e8 <_strtod_l+0x578>
 80176a2:	9b07      	ldr	r3, [sp, #28]
 80176a4:	9300      	str	r3, [sp, #0]
 80176a6:	9908      	ldr	r1, [sp, #32]
 80176a8:	462b      	mov	r3, r5
 80176aa:	463a      	mov	r2, r7
 80176ac:	4620      	mov	r0, r4
 80176ae:	f001 fe55 	bl	801935c <__s2b>
 80176b2:	9007      	str	r0, [sp, #28]
 80176b4:	2800      	cmp	r0, #0
 80176b6:	f43f af1f 	beq.w	80174f8 <_strtod_l+0x488>
 80176ba:	9b05      	ldr	r3, [sp, #20]
 80176bc:	1b9e      	subs	r6, r3, r6
 80176be:	9b06      	ldr	r3, [sp, #24]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	bfb4      	ite	lt
 80176c4:	4633      	movlt	r3, r6
 80176c6:	2300      	movge	r3, #0
 80176c8:	930c      	str	r3, [sp, #48]	; 0x30
 80176ca:	9b06      	ldr	r3, [sp, #24]
 80176cc:	2500      	movs	r5, #0
 80176ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80176d2:	9312      	str	r3, [sp, #72]	; 0x48
 80176d4:	462e      	mov	r6, r5
 80176d6:	9b07      	ldr	r3, [sp, #28]
 80176d8:	4620      	mov	r0, r4
 80176da:	6859      	ldr	r1, [r3, #4]
 80176dc:	f001 fd96 	bl	801920c <_Balloc>
 80176e0:	9005      	str	r0, [sp, #20]
 80176e2:	2800      	cmp	r0, #0
 80176e4:	f43f af0c 	beq.w	8017500 <_strtod_l+0x490>
 80176e8:	9b07      	ldr	r3, [sp, #28]
 80176ea:	691a      	ldr	r2, [r3, #16]
 80176ec:	3202      	adds	r2, #2
 80176ee:	f103 010c 	add.w	r1, r3, #12
 80176f2:	0092      	lsls	r2, r2, #2
 80176f4:	300c      	adds	r0, #12
 80176f6:	f7fe fd65 	bl	80161c4 <memcpy>
 80176fa:	ec4b ab10 	vmov	d0, sl, fp
 80176fe:	aa1a      	add	r2, sp, #104	; 0x68
 8017700:	a919      	add	r1, sp, #100	; 0x64
 8017702:	4620      	mov	r0, r4
 8017704:	f002 f970 	bl	80199e8 <__d2b>
 8017708:	ec4b ab18 	vmov	d8, sl, fp
 801770c:	9018      	str	r0, [sp, #96]	; 0x60
 801770e:	2800      	cmp	r0, #0
 8017710:	f43f aef6 	beq.w	8017500 <_strtod_l+0x490>
 8017714:	2101      	movs	r1, #1
 8017716:	4620      	mov	r0, r4
 8017718:	f001 feba 	bl	8019490 <__i2b>
 801771c:	4606      	mov	r6, r0
 801771e:	2800      	cmp	r0, #0
 8017720:	f43f aeee 	beq.w	8017500 <_strtod_l+0x490>
 8017724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017726:	9904      	ldr	r1, [sp, #16]
 8017728:	2b00      	cmp	r3, #0
 801772a:	bfab      	itete	ge
 801772c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801772e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017730:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017732:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8017736:	bfac      	ite	ge
 8017738:	eb03 0902 	addge.w	r9, r3, r2
 801773c:	1ad7      	sublt	r7, r2, r3
 801773e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017740:	eba3 0801 	sub.w	r8, r3, r1
 8017744:	4490      	add	r8, r2
 8017746:	4ba1      	ldr	r3, [pc, #644]	; (80179cc <_strtod_l+0x95c>)
 8017748:	f108 38ff 	add.w	r8, r8, #4294967295
 801774c:	4598      	cmp	r8, r3
 801774e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017752:	f280 80c7 	bge.w	80178e4 <_strtod_l+0x874>
 8017756:	eba3 0308 	sub.w	r3, r3, r8
 801775a:	2b1f      	cmp	r3, #31
 801775c:	eba2 0203 	sub.w	r2, r2, r3
 8017760:	f04f 0101 	mov.w	r1, #1
 8017764:	f300 80b1 	bgt.w	80178ca <_strtod_l+0x85a>
 8017768:	fa01 f303 	lsl.w	r3, r1, r3
 801776c:	930d      	str	r3, [sp, #52]	; 0x34
 801776e:	2300      	movs	r3, #0
 8017770:	9308      	str	r3, [sp, #32]
 8017772:	eb09 0802 	add.w	r8, r9, r2
 8017776:	9b04      	ldr	r3, [sp, #16]
 8017778:	45c1      	cmp	r9, r8
 801777a:	4417      	add	r7, r2
 801777c:	441f      	add	r7, r3
 801777e:	464b      	mov	r3, r9
 8017780:	bfa8      	it	ge
 8017782:	4643      	movge	r3, r8
 8017784:	42bb      	cmp	r3, r7
 8017786:	bfa8      	it	ge
 8017788:	463b      	movge	r3, r7
 801778a:	2b00      	cmp	r3, #0
 801778c:	bfc2      	ittt	gt
 801778e:	eba8 0803 	subgt.w	r8, r8, r3
 8017792:	1aff      	subgt	r7, r7, r3
 8017794:	eba9 0903 	subgt.w	r9, r9, r3
 8017798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801779a:	2b00      	cmp	r3, #0
 801779c:	dd17      	ble.n	80177ce <_strtod_l+0x75e>
 801779e:	4631      	mov	r1, r6
 80177a0:	461a      	mov	r2, r3
 80177a2:	4620      	mov	r0, r4
 80177a4:	f001 ff34 	bl	8019610 <__pow5mult>
 80177a8:	4606      	mov	r6, r0
 80177aa:	2800      	cmp	r0, #0
 80177ac:	f43f aea8 	beq.w	8017500 <_strtod_l+0x490>
 80177b0:	4601      	mov	r1, r0
 80177b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80177b4:	4620      	mov	r0, r4
 80177b6:	f001 fe81 	bl	80194bc <__multiply>
 80177ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80177bc:	2800      	cmp	r0, #0
 80177be:	f43f ae9f 	beq.w	8017500 <_strtod_l+0x490>
 80177c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80177c4:	4620      	mov	r0, r4
 80177c6:	f001 fd61 	bl	801928c <_Bfree>
 80177ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177cc:	9318      	str	r3, [sp, #96]	; 0x60
 80177ce:	f1b8 0f00 	cmp.w	r8, #0
 80177d2:	f300 808c 	bgt.w	80178ee <_strtod_l+0x87e>
 80177d6:	9b06      	ldr	r3, [sp, #24]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	dd08      	ble.n	80177ee <_strtod_l+0x77e>
 80177dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80177de:	9905      	ldr	r1, [sp, #20]
 80177e0:	4620      	mov	r0, r4
 80177e2:	f001 ff15 	bl	8019610 <__pow5mult>
 80177e6:	9005      	str	r0, [sp, #20]
 80177e8:	2800      	cmp	r0, #0
 80177ea:	f43f ae89 	beq.w	8017500 <_strtod_l+0x490>
 80177ee:	2f00      	cmp	r7, #0
 80177f0:	dd08      	ble.n	8017804 <_strtod_l+0x794>
 80177f2:	9905      	ldr	r1, [sp, #20]
 80177f4:	463a      	mov	r2, r7
 80177f6:	4620      	mov	r0, r4
 80177f8:	f001 ff64 	bl	80196c4 <__lshift>
 80177fc:	9005      	str	r0, [sp, #20]
 80177fe:	2800      	cmp	r0, #0
 8017800:	f43f ae7e 	beq.w	8017500 <_strtod_l+0x490>
 8017804:	f1b9 0f00 	cmp.w	r9, #0
 8017808:	dd08      	ble.n	801781c <_strtod_l+0x7ac>
 801780a:	4631      	mov	r1, r6
 801780c:	464a      	mov	r2, r9
 801780e:	4620      	mov	r0, r4
 8017810:	f001 ff58 	bl	80196c4 <__lshift>
 8017814:	4606      	mov	r6, r0
 8017816:	2800      	cmp	r0, #0
 8017818:	f43f ae72 	beq.w	8017500 <_strtod_l+0x490>
 801781c:	9a05      	ldr	r2, [sp, #20]
 801781e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017820:	4620      	mov	r0, r4
 8017822:	f001 ffdb 	bl	80197dc <__mdiff>
 8017826:	4605      	mov	r5, r0
 8017828:	2800      	cmp	r0, #0
 801782a:	f43f ae69 	beq.w	8017500 <_strtod_l+0x490>
 801782e:	68c3      	ldr	r3, [r0, #12]
 8017830:	930b      	str	r3, [sp, #44]	; 0x2c
 8017832:	2300      	movs	r3, #0
 8017834:	60c3      	str	r3, [r0, #12]
 8017836:	4631      	mov	r1, r6
 8017838:	f001 ffb4 	bl	80197a4 <__mcmp>
 801783c:	2800      	cmp	r0, #0
 801783e:	da60      	bge.n	8017902 <_strtod_l+0x892>
 8017840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017842:	ea53 030a 	orrs.w	r3, r3, sl
 8017846:	f040 8082 	bne.w	801794e <_strtod_l+0x8de>
 801784a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801784e:	2b00      	cmp	r3, #0
 8017850:	d17d      	bne.n	801794e <_strtod_l+0x8de>
 8017852:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017856:	0d1b      	lsrs	r3, r3, #20
 8017858:	051b      	lsls	r3, r3, #20
 801785a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801785e:	d976      	bls.n	801794e <_strtod_l+0x8de>
 8017860:	696b      	ldr	r3, [r5, #20]
 8017862:	b913      	cbnz	r3, 801786a <_strtod_l+0x7fa>
 8017864:	692b      	ldr	r3, [r5, #16]
 8017866:	2b01      	cmp	r3, #1
 8017868:	dd71      	ble.n	801794e <_strtod_l+0x8de>
 801786a:	4629      	mov	r1, r5
 801786c:	2201      	movs	r2, #1
 801786e:	4620      	mov	r0, r4
 8017870:	f001 ff28 	bl	80196c4 <__lshift>
 8017874:	4631      	mov	r1, r6
 8017876:	4605      	mov	r5, r0
 8017878:	f001 ff94 	bl	80197a4 <__mcmp>
 801787c:	2800      	cmp	r0, #0
 801787e:	dd66      	ble.n	801794e <_strtod_l+0x8de>
 8017880:	9904      	ldr	r1, [sp, #16]
 8017882:	4a53      	ldr	r2, [pc, #332]	; (80179d0 <_strtod_l+0x960>)
 8017884:	465b      	mov	r3, fp
 8017886:	2900      	cmp	r1, #0
 8017888:	f000 8081 	beq.w	801798e <_strtod_l+0x91e>
 801788c:	ea02 010b 	and.w	r1, r2, fp
 8017890:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017894:	dc7b      	bgt.n	801798e <_strtod_l+0x91e>
 8017896:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801789a:	f77f aea9 	ble.w	80175f0 <_strtod_l+0x580>
 801789e:	4b4d      	ldr	r3, [pc, #308]	; (80179d4 <_strtod_l+0x964>)
 80178a0:	4650      	mov	r0, sl
 80178a2:	4659      	mov	r1, fp
 80178a4:	2200      	movs	r2, #0
 80178a6:	f7e8 febf 	bl	8000628 <__aeabi_dmul>
 80178aa:	460b      	mov	r3, r1
 80178ac:	4303      	orrs	r3, r0
 80178ae:	bf08      	it	eq
 80178b0:	2322      	moveq	r3, #34	; 0x22
 80178b2:	4682      	mov	sl, r0
 80178b4:	468b      	mov	fp, r1
 80178b6:	bf08      	it	eq
 80178b8:	6023      	streq	r3, [r4, #0]
 80178ba:	e62b      	b.n	8017514 <_strtod_l+0x4a4>
 80178bc:	f04f 32ff 	mov.w	r2, #4294967295
 80178c0:	fa02 f303 	lsl.w	r3, r2, r3
 80178c4:	ea03 0a0a 	and.w	sl, r3, sl
 80178c8:	e6e3      	b.n	8017692 <_strtod_l+0x622>
 80178ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80178ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80178d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80178d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80178da:	fa01 f308 	lsl.w	r3, r1, r8
 80178de:	9308      	str	r3, [sp, #32]
 80178e0:	910d      	str	r1, [sp, #52]	; 0x34
 80178e2:	e746      	b.n	8017772 <_strtod_l+0x702>
 80178e4:	2300      	movs	r3, #0
 80178e6:	9308      	str	r3, [sp, #32]
 80178e8:	2301      	movs	r3, #1
 80178ea:	930d      	str	r3, [sp, #52]	; 0x34
 80178ec:	e741      	b.n	8017772 <_strtod_l+0x702>
 80178ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80178f0:	4642      	mov	r2, r8
 80178f2:	4620      	mov	r0, r4
 80178f4:	f001 fee6 	bl	80196c4 <__lshift>
 80178f8:	9018      	str	r0, [sp, #96]	; 0x60
 80178fa:	2800      	cmp	r0, #0
 80178fc:	f47f af6b 	bne.w	80177d6 <_strtod_l+0x766>
 8017900:	e5fe      	b.n	8017500 <_strtod_l+0x490>
 8017902:	465f      	mov	r7, fp
 8017904:	d16e      	bne.n	80179e4 <_strtod_l+0x974>
 8017906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801790c:	b342      	cbz	r2, 8017960 <_strtod_l+0x8f0>
 801790e:	4a32      	ldr	r2, [pc, #200]	; (80179d8 <_strtod_l+0x968>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d128      	bne.n	8017966 <_strtod_l+0x8f6>
 8017914:	9b04      	ldr	r3, [sp, #16]
 8017916:	4651      	mov	r1, sl
 8017918:	b1eb      	cbz	r3, 8017956 <_strtod_l+0x8e6>
 801791a:	4b2d      	ldr	r3, [pc, #180]	; (80179d0 <_strtod_l+0x960>)
 801791c:	403b      	ands	r3, r7
 801791e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017922:	f04f 32ff 	mov.w	r2, #4294967295
 8017926:	d819      	bhi.n	801795c <_strtod_l+0x8ec>
 8017928:	0d1b      	lsrs	r3, r3, #20
 801792a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801792e:	fa02 f303 	lsl.w	r3, r2, r3
 8017932:	4299      	cmp	r1, r3
 8017934:	d117      	bne.n	8017966 <_strtod_l+0x8f6>
 8017936:	4b29      	ldr	r3, [pc, #164]	; (80179dc <_strtod_l+0x96c>)
 8017938:	429f      	cmp	r7, r3
 801793a:	d102      	bne.n	8017942 <_strtod_l+0x8d2>
 801793c:	3101      	adds	r1, #1
 801793e:	f43f addf 	beq.w	8017500 <_strtod_l+0x490>
 8017942:	4b23      	ldr	r3, [pc, #140]	; (80179d0 <_strtod_l+0x960>)
 8017944:	403b      	ands	r3, r7
 8017946:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801794a:	f04f 0a00 	mov.w	sl, #0
 801794e:	9b04      	ldr	r3, [sp, #16]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d1a4      	bne.n	801789e <_strtod_l+0x82e>
 8017954:	e5de      	b.n	8017514 <_strtod_l+0x4a4>
 8017956:	f04f 33ff 	mov.w	r3, #4294967295
 801795a:	e7ea      	b.n	8017932 <_strtod_l+0x8c2>
 801795c:	4613      	mov	r3, r2
 801795e:	e7e8      	b.n	8017932 <_strtod_l+0x8c2>
 8017960:	ea53 030a 	orrs.w	r3, r3, sl
 8017964:	d08c      	beq.n	8017880 <_strtod_l+0x810>
 8017966:	9b08      	ldr	r3, [sp, #32]
 8017968:	b1db      	cbz	r3, 80179a2 <_strtod_l+0x932>
 801796a:	423b      	tst	r3, r7
 801796c:	d0ef      	beq.n	801794e <_strtod_l+0x8de>
 801796e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017970:	9a04      	ldr	r2, [sp, #16]
 8017972:	4650      	mov	r0, sl
 8017974:	4659      	mov	r1, fp
 8017976:	b1c3      	cbz	r3, 80179aa <_strtod_l+0x93a>
 8017978:	f7ff fb5e 	bl	8017038 <sulp>
 801797c:	4602      	mov	r2, r0
 801797e:	460b      	mov	r3, r1
 8017980:	ec51 0b18 	vmov	r0, r1, d8
 8017984:	f7e8 fc9a 	bl	80002bc <__adddf3>
 8017988:	4682      	mov	sl, r0
 801798a:	468b      	mov	fp, r1
 801798c:	e7df      	b.n	801794e <_strtod_l+0x8de>
 801798e:	4013      	ands	r3, r2
 8017990:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017994:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017998:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801799c:	f04f 3aff 	mov.w	sl, #4294967295
 80179a0:	e7d5      	b.n	801794e <_strtod_l+0x8de>
 80179a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179a4:	ea13 0f0a 	tst.w	r3, sl
 80179a8:	e7e0      	b.n	801796c <_strtod_l+0x8fc>
 80179aa:	f7ff fb45 	bl	8017038 <sulp>
 80179ae:	4602      	mov	r2, r0
 80179b0:	460b      	mov	r3, r1
 80179b2:	ec51 0b18 	vmov	r0, r1, d8
 80179b6:	f7e8 fc7f 	bl	80002b8 <__aeabi_dsub>
 80179ba:	2200      	movs	r2, #0
 80179bc:	2300      	movs	r3, #0
 80179be:	4682      	mov	sl, r0
 80179c0:	468b      	mov	fp, r1
 80179c2:	f7e9 f899 	bl	8000af8 <__aeabi_dcmpeq>
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d0c1      	beq.n	801794e <_strtod_l+0x8de>
 80179ca:	e611      	b.n	80175f0 <_strtod_l+0x580>
 80179cc:	fffffc02 	.word	0xfffffc02
 80179d0:	7ff00000 	.word	0x7ff00000
 80179d4:	39500000 	.word	0x39500000
 80179d8:	000fffff 	.word	0x000fffff
 80179dc:	7fefffff 	.word	0x7fefffff
 80179e0:	0801bb60 	.word	0x0801bb60
 80179e4:	4631      	mov	r1, r6
 80179e6:	4628      	mov	r0, r5
 80179e8:	f002 f85a 	bl	8019aa0 <__ratio>
 80179ec:	ec59 8b10 	vmov	r8, r9, d0
 80179f0:	ee10 0a10 	vmov	r0, s0
 80179f4:	2200      	movs	r2, #0
 80179f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80179fa:	4649      	mov	r1, r9
 80179fc:	f7e9 f890 	bl	8000b20 <__aeabi_dcmple>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d07a      	beq.n	8017afa <_strtod_l+0xa8a>
 8017a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d04a      	beq.n	8017aa0 <_strtod_l+0xa30>
 8017a0a:	4b95      	ldr	r3, [pc, #596]	; (8017c60 <_strtod_l+0xbf0>)
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017a12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017c60 <_strtod_l+0xbf0>
 8017a16:	f04f 0800 	mov.w	r8, #0
 8017a1a:	4b92      	ldr	r3, [pc, #584]	; (8017c64 <_strtod_l+0xbf4>)
 8017a1c:	403b      	ands	r3, r7
 8017a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8017a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a22:	4b91      	ldr	r3, [pc, #580]	; (8017c68 <_strtod_l+0xbf8>)
 8017a24:	429a      	cmp	r2, r3
 8017a26:	f040 80b0 	bne.w	8017b8a <_strtod_l+0xb1a>
 8017a2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017a2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017a32:	ec4b ab10 	vmov	d0, sl, fp
 8017a36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017a3a:	f001 ff59 	bl	80198f0 <__ulp>
 8017a3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017a42:	ec53 2b10 	vmov	r2, r3, d0
 8017a46:	f7e8 fdef 	bl	8000628 <__aeabi_dmul>
 8017a4a:	4652      	mov	r2, sl
 8017a4c:	465b      	mov	r3, fp
 8017a4e:	f7e8 fc35 	bl	80002bc <__adddf3>
 8017a52:	460b      	mov	r3, r1
 8017a54:	4983      	ldr	r1, [pc, #524]	; (8017c64 <_strtod_l+0xbf4>)
 8017a56:	4a85      	ldr	r2, [pc, #532]	; (8017c6c <_strtod_l+0xbfc>)
 8017a58:	4019      	ands	r1, r3
 8017a5a:	4291      	cmp	r1, r2
 8017a5c:	4682      	mov	sl, r0
 8017a5e:	d960      	bls.n	8017b22 <_strtod_l+0xab2>
 8017a60:	ee18 3a90 	vmov	r3, s17
 8017a64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	d104      	bne.n	8017a76 <_strtod_l+0xa06>
 8017a6c:	ee18 3a10 	vmov	r3, s16
 8017a70:	3301      	adds	r3, #1
 8017a72:	f43f ad45 	beq.w	8017500 <_strtod_l+0x490>
 8017a76:	f8df b200 	ldr.w	fp, [pc, #512]	; 8017c78 <_strtod_l+0xc08>
 8017a7a:	f04f 3aff 	mov.w	sl, #4294967295
 8017a7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017a80:	4620      	mov	r0, r4
 8017a82:	f001 fc03 	bl	801928c <_Bfree>
 8017a86:	9905      	ldr	r1, [sp, #20]
 8017a88:	4620      	mov	r0, r4
 8017a8a:	f001 fbff 	bl	801928c <_Bfree>
 8017a8e:	4631      	mov	r1, r6
 8017a90:	4620      	mov	r0, r4
 8017a92:	f001 fbfb 	bl	801928c <_Bfree>
 8017a96:	4629      	mov	r1, r5
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f001 fbf7 	bl	801928c <_Bfree>
 8017a9e:	e61a      	b.n	80176d6 <_strtod_l+0x666>
 8017aa0:	f1ba 0f00 	cmp.w	sl, #0
 8017aa4:	d11b      	bne.n	8017ade <_strtod_l+0xa6e>
 8017aa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017aaa:	b9f3      	cbnz	r3, 8017aea <_strtod_l+0xa7a>
 8017aac:	4b6c      	ldr	r3, [pc, #432]	; (8017c60 <_strtod_l+0xbf0>)
 8017aae:	2200      	movs	r2, #0
 8017ab0:	4640      	mov	r0, r8
 8017ab2:	4649      	mov	r1, r9
 8017ab4:	f7e9 f82a 	bl	8000b0c <__aeabi_dcmplt>
 8017ab8:	b9d0      	cbnz	r0, 8017af0 <_strtod_l+0xa80>
 8017aba:	4640      	mov	r0, r8
 8017abc:	4649      	mov	r1, r9
 8017abe:	4b6c      	ldr	r3, [pc, #432]	; (8017c70 <_strtod_l+0xc00>)
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	f7e8 fdb1 	bl	8000628 <__aeabi_dmul>
 8017ac6:	4680      	mov	r8, r0
 8017ac8:	4689      	mov	r9, r1
 8017aca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017ace:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8017ad2:	9315      	str	r3, [sp, #84]	; 0x54
 8017ad4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017ad8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017adc:	e79d      	b.n	8017a1a <_strtod_l+0x9aa>
 8017ade:	f1ba 0f01 	cmp.w	sl, #1
 8017ae2:	d102      	bne.n	8017aea <_strtod_l+0xa7a>
 8017ae4:	2f00      	cmp	r7, #0
 8017ae6:	f43f ad83 	beq.w	80175f0 <_strtod_l+0x580>
 8017aea:	4b62      	ldr	r3, [pc, #392]	; (8017c74 <_strtod_l+0xc04>)
 8017aec:	2200      	movs	r2, #0
 8017aee:	e78e      	b.n	8017a0e <_strtod_l+0x99e>
 8017af0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8017c70 <_strtod_l+0xc00>
 8017af4:	f04f 0800 	mov.w	r8, #0
 8017af8:	e7e7      	b.n	8017aca <_strtod_l+0xa5a>
 8017afa:	4b5d      	ldr	r3, [pc, #372]	; (8017c70 <_strtod_l+0xc00>)
 8017afc:	4640      	mov	r0, r8
 8017afe:	4649      	mov	r1, r9
 8017b00:	2200      	movs	r2, #0
 8017b02:	f7e8 fd91 	bl	8000628 <__aeabi_dmul>
 8017b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b08:	4680      	mov	r8, r0
 8017b0a:	4689      	mov	r9, r1
 8017b0c:	b933      	cbnz	r3, 8017b1c <_strtod_l+0xaac>
 8017b0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017b12:	900e      	str	r0, [sp, #56]	; 0x38
 8017b14:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017b1a:	e7dd      	b.n	8017ad8 <_strtod_l+0xa68>
 8017b1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8017b20:	e7f9      	b.n	8017b16 <_strtod_l+0xaa6>
 8017b22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017b26:	9b04      	ldr	r3, [sp, #16]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d1a8      	bne.n	8017a7e <_strtod_l+0xa0e>
 8017b2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017b32:	0d1b      	lsrs	r3, r3, #20
 8017b34:	051b      	lsls	r3, r3, #20
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d1a1      	bne.n	8017a7e <_strtod_l+0xa0e>
 8017b3a:	4640      	mov	r0, r8
 8017b3c:	4649      	mov	r1, r9
 8017b3e:	f7e9 f923 	bl	8000d88 <__aeabi_d2lz>
 8017b42:	f7e8 fd43 	bl	80005cc <__aeabi_l2d>
 8017b46:	4602      	mov	r2, r0
 8017b48:	460b      	mov	r3, r1
 8017b4a:	4640      	mov	r0, r8
 8017b4c:	4649      	mov	r1, r9
 8017b4e:	f7e8 fbb3 	bl	80002b8 <__aeabi_dsub>
 8017b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b58:	ea43 030a 	orr.w	r3, r3, sl
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	4680      	mov	r8, r0
 8017b60:	4689      	mov	r9, r1
 8017b62:	d055      	beq.n	8017c10 <_strtod_l+0xba0>
 8017b64:	a336      	add	r3, pc, #216	; (adr r3, 8017c40 <_strtod_l+0xbd0>)
 8017b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b6a:	f7e8 ffcf 	bl	8000b0c <__aeabi_dcmplt>
 8017b6e:	2800      	cmp	r0, #0
 8017b70:	f47f acd0 	bne.w	8017514 <_strtod_l+0x4a4>
 8017b74:	a334      	add	r3, pc, #208	; (adr r3, 8017c48 <_strtod_l+0xbd8>)
 8017b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b7a:	4640      	mov	r0, r8
 8017b7c:	4649      	mov	r1, r9
 8017b7e:	f7e8 ffe3 	bl	8000b48 <__aeabi_dcmpgt>
 8017b82:	2800      	cmp	r0, #0
 8017b84:	f43f af7b 	beq.w	8017a7e <_strtod_l+0xa0e>
 8017b88:	e4c4      	b.n	8017514 <_strtod_l+0x4a4>
 8017b8a:	9b04      	ldr	r3, [sp, #16]
 8017b8c:	b333      	cbz	r3, 8017bdc <_strtod_l+0xb6c>
 8017b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017b94:	d822      	bhi.n	8017bdc <_strtod_l+0xb6c>
 8017b96:	a32e      	add	r3, pc, #184	; (adr r3, 8017c50 <_strtod_l+0xbe0>)
 8017b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9c:	4640      	mov	r0, r8
 8017b9e:	4649      	mov	r1, r9
 8017ba0:	f7e8 ffbe 	bl	8000b20 <__aeabi_dcmple>
 8017ba4:	b1a0      	cbz	r0, 8017bd0 <_strtod_l+0xb60>
 8017ba6:	4649      	mov	r1, r9
 8017ba8:	4640      	mov	r0, r8
 8017baa:	f7e9 f815 	bl	8000bd8 <__aeabi_d2uiz>
 8017bae:	2801      	cmp	r0, #1
 8017bb0:	bf38      	it	cc
 8017bb2:	2001      	movcc	r0, #1
 8017bb4:	f7e8 fcbe 	bl	8000534 <__aeabi_ui2d>
 8017bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bba:	4680      	mov	r8, r0
 8017bbc:	4689      	mov	r9, r1
 8017bbe:	bb23      	cbnz	r3, 8017c0a <_strtod_l+0xb9a>
 8017bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bc4:	9010      	str	r0, [sp, #64]	; 0x40
 8017bc6:	9311      	str	r3, [sp, #68]	; 0x44
 8017bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017bcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017bd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017bd8:	1a9b      	subs	r3, r3, r2
 8017bda:	9309      	str	r3, [sp, #36]	; 0x24
 8017bdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017be0:	eeb0 0a48 	vmov.f32	s0, s16
 8017be4:	eef0 0a68 	vmov.f32	s1, s17
 8017be8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017bec:	f001 fe80 	bl	80198f0 <__ulp>
 8017bf0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017bf4:	ec53 2b10 	vmov	r2, r3, d0
 8017bf8:	f7e8 fd16 	bl	8000628 <__aeabi_dmul>
 8017bfc:	ec53 2b18 	vmov	r2, r3, d8
 8017c00:	f7e8 fb5c 	bl	80002bc <__adddf3>
 8017c04:	4682      	mov	sl, r0
 8017c06:	468b      	mov	fp, r1
 8017c08:	e78d      	b.n	8017b26 <_strtod_l+0xab6>
 8017c0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8017c0e:	e7db      	b.n	8017bc8 <_strtod_l+0xb58>
 8017c10:	a311      	add	r3, pc, #68	; (adr r3, 8017c58 <_strtod_l+0xbe8>)
 8017c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c16:	f7e8 ff79 	bl	8000b0c <__aeabi_dcmplt>
 8017c1a:	e7b2      	b.n	8017b82 <_strtod_l+0xb12>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8017c20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c24:	6013      	str	r3, [r2, #0]
 8017c26:	f7ff ba6b 	b.w	8017100 <_strtod_l+0x90>
 8017c2a:	2a65      	cmp	r2, #101	; 0x65
 8017c2c:	f43f ab5f 	beq.w	80172ee <_strtod_l+0x27e>
 8017c30:	2a45      	cmp	r2, #69	; 0x45
 8017c32:	f43f ab5c 	beq.w	80172ee <_strtod_l+0x27e>
 8017c36:	2301      	movs	r3, #1
 8017c38:	f7ff bb94 	b.w	8017364 <_strtod_l+0x2f4>
 8017c3c:	f3af 8000 	nop.w
 8017c40:	94a03595 	.word	0x94a03595
 8017c44:	3fdfffff 	.word	0x3fdfffff
 8017c48:	35afe535 	.word	0x35afe535
 8017c4c:	3fe00000 	.word	0x3fe00000
 8017c50:	ffc00000 	.word	0xffc00000
 8017c54:	41dfffff 	.word	0x41dfffff
 8017c58:	94a03595 	.word	0x94a03595
 8017c5c:	3fcfffff 	.word	0x3fcfffff
 8017c60:	3ff00000 	.word	0x3ff00000
 8017c64:	7ff00000 	.word	0x7ff00000
 8017c68:	7fe00000 	.word	0x7fe00000
 8017c6c:	7c9fffff 	.word	0x7c9fffff
 8017c70:	3fe00000 	.word	0x3fe00000
 8017c74:	bff00000 	.word	0xbff00000
 8017c78:	7fefffff 	.word	0x7fefffff

08017c7c <_strtod_r>:
 8017c7c:	4b01      	ldr	r3, [pc, #4]	; (8017c84 <_strtod_r+0x8>)
 8017c7e:	f7ff b9f7 	b.w	8017070 <_strtod_l>
 8017c82:	bf00      	nop
 8017c84:	200000a4 	.word	0x200000a4

08017c88 <_strtol_l.constprop.0>:
 8017c88:	2b01      	cmp	r3, #1
 8017c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c8e:	d001      	beq.n	8017c94 <_strtol_l.constprop.0+0xc>
 8017c90:	2b24      	cmp	r3, #36	; 0x24
 8017c92:	d906      	bls.n	8017ca2 <_strtol_l.constprop.0+0x1a>
 8017c94:	f7fe fa6c 	bl	8016170 <__errno>
 8017c98:	2316      	movs	r3, #22
 8017c9a:	6003      	str	r3, [r0, #0]
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ca2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017d88 <_strtol_l.constprop.0+0x100>
 8017ca6:	460d      	mov	r5, r1
 8017ca8:	462e      	mov	r6, r5
 8017caa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017cae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017cb2:	f017 0708 	ands.w	r7, r7, #8
 8017cb6:	d1f7      	bne.n	8017ca8 <_strtol_l.constprop.0+0x20>
 8017cb8:	2c2d      	cmp	r4, #45	; 0x2d
 8017cba:	d132      	bne.n	8017d22 <_strtol_l.constprop.0+0x9a>
 8017cbc:	782c      	ldrb	r4, [r5, #0]
 8017cbe:	2701      	movs	r7, #1
 8017cc0:	1cb5      	adds	r5, r6, #2
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d05b      	beq.n	8017d7e <_strtol_l.constprop.0+0xf6>
 8017cc6:	2b10      	cmp	r3, #16
 8017cc8:	d109      	bne.n	8017cde <_strtol_l.constprop.0+0x56>
 8017cca:	2c30      	cmp	r4, #48	; 0x30
 8017ccc:	d107      	bne.n	8017cde <_strtol_l.constprop.0+0x56>
 8017cce:	782c      	ldrb	r4, [r5, #0]
 8017cd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017cd4:	2c58      	cmp	r4, #88	; 0x58
 8017cd6:	d14d      	bne.n	8017d74 <_strtol_l.constprop.0+0xec>
 8017cd8:	786c      	ldrb	r4, [r5, #1]
 8017cda:	2310      	movs	r3, #16
 8017cdc:	3502      	adds	r5, #2
 8017cde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017ce2:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ce6:	f04f 0c00 	mov.w	ip, #0
 8017cea:	fbb8 f9f3 	udiv	r9, r8, r3
 8017cee:	4666      	mov	r6, ip
 8017cf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8017cf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017cf8:	f1be 0f09 	cmp.w	lr, #9
 8017cfc:	d816      	bhi.n	8017d2c <_strtol_l.constprop.0+0xa4>
 8017cfe:	4674      	mov	r4, lr
 8017d00:	42a3      	cmp	r3, r4
 8017d02:	dd24      	ble.n	8017d4e <_strtol_l.constprop.0+0xc6>
 8017d04:	f1bc 0f00 	cmp.w	ip, #0
 8017d08:	db1e      	blt.n	8017d48 <_strtol_l.constprop.0+0xc0>
 8017d0a:	45b1      	cmp	r9, r6
 8017d0c:	d31c      	bcc.n	8017d48 <_strtol_l.constprop.0+0xc0>
 8017d0e:	d101      	bne.n	8017d14 <_strtol_l.constprop.0+0x8c>
 8017d10:	45a2      	cmp	sl, r4
 8017d12:	db19      	blt.n	8017d48 <_strtol_l.constprop.0+0xc0>
 8017d14:	fb06 4603 	mla	r6, r6, r3, r4
 8017d18:	f04f 0c01 	mov.w	ip, #1
 8017d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d20:	e7e8      	b.n	8017cf4 <_strtol_l.constprop.0+0x6c>
 8017d22:	2c2b      	cmp	r4, #43	; 0x2b
 8017d24:	bf04      	itt	eq
 8017d26:	782c      	ldrbeq	r4, [r5, #0]
 8017d28:	1cb5      	addeq	r5, r6, #2
 8017d2a:	e7ca      	b.n	8017cc2 <_strtol_l.constprop.0+0x3a>
 8017d2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017d30:	f1be 0f19 	cmp.w	lr, #25
 8017d34:	d801      	bhi.n	8017d3a <_strtol_l.constprop.0+0xb2>
 8017d36:	3c37      	subs	r4, #55	; 0x37
 8017d38:	e7e2      	b.n	8017d00 <_strtol_l.constprop.0+0x78>
 8017d3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017d3e:	f1be 0f19 	cmp.w	lr, #25
 8017d42:	d804      	bhi.n	8017d4e <_strtol_l.constprop.0+0xc6>
 8017d44:	3c57      	subs	r4, #87	; 0x57
 8017d46:	e7db      	b.n	8017d00 <_strtol_l.constprop.0+0x78>
 8017d48:	f04f 3cff 	mov.w	ip, #4294967295
 8017d4c:	e7e6      	b.n	8017d1c <_strtol_l.constprop.0+0x94>
 8017d4e:	f1bc 0f00 	cmp.w	ip, #0
 8017d52:	da05      	bge.n	8017d60 <_strtol_l.constprop.0+0xd8>
 8017d54:	2322      	movs	r3, #34	; 0x22
 8017d56:	6003      	str	r3, [r0, #0]
 8017d58:	4646      	mov	r6, r8
 8017d5a:	b942      	cbnz	r2, 8017d6e <_strtol_l.constprop.0+0xe6>
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	e79e      	b.n	8017c9e <_strtol_l.constprop.0+0x16>
 8017d60:	b107      	cbz	r7, 8017d64 <_strtol_l.constprop.0+0xdc>
 8017d62:	4276      	negs	r6, r6
 8017d64:	2a00      	cmp	r2, #0
 8017d66:	d0f9      	beq.n	8017d5c <_strtol_l.constprop.0+0xd4>
 8017d68:	f1bc 0f00 	cmp.w	ip, #0
 8017d6c:	d000      	beq.n	8017d70 <_strtol_l.constprop.0+0xe8>
 8017d6e:	1e69      	subs	r1, r5, #1
 8017d70:	6011      	str	r1, [r2, #0]
 8017d72:	e7f3      	b.n	8017d5c <_strtol_l.constprop.0+0xd4>
 8017d74:	2430      	movs	r4, #48	; 0x30
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d1b1      	bne.n	8017cde <_strtol_l.constprop.0+0x56>
 8017d7a:	2308      	movs	r3, #8
 8017d7c:	e7af      	b.n	8017cde <_strtol_l.constprop.0+0x56>
 8017d7e:	2c30      	cmp	r4, #48	; 0x30
 8017d80:	d0a5      	beq.n	8017cce <_strtol_l.constprop.0+0x46>
 8017d82:	230a      	movs	r3, #10
 8017d84:	e7ab      	b.n	8017cde <_strtol_l.constprop.0+0x56>
 8017d86:	bf00      	nop
 8017d88:	0801bb89 	.word	0x0801bb89

08017d8c <_strtol_r>:
 8017d8c:	f7ff bf7c 	b.w	8017c88 <_strtol_l.constprop.0>

08017d90 <_write_r>:
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	4d07      	ldr	r5, [pc, #28]	; (8017db0 <_write_r+0x20>)
 8017d94:	4604      	mov	r4, r0
 8017d96:	4608      	mov	r0, r1
 8017d98:	4611      	mov	r1, r2
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	602a      	str	r2, [r5, #0]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	f7ea fb8e 	bl	80024c0 <_write>
 8017da4:	1c43      	adds	r3, r0, #1
 8017da6:	d102      	bne.n	8017dae <_write_r+0x1e>
 8017da8:	682b      	ldr	r3, [r5, #0]
 8017daa:	b103      	cbz	r3, 8017dae <_write_r+0x1e>
 8017dac:	6023      	str	r3, [r4, #0]
 8017dae:	bd38      	pop	{r3, r4, r5, pc}
 8017db0:	200039f8 	.word	0x200039f8

08017db4 <_close_r>:
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	4d06      	ldr	r5, [pc, #24]	; (8017dd0 <_close_r+0x1c>)
 8017db8:	2300      	movs	r3, #0
 8017dba:	4604      	mov	r4, r0
 8017dbc:	4608      	mov	r0, r1
 8017dbe:	602b      	str	r3, [r5, #0]
 8017dc0:	f7ea fb9a 	bl	80024f8 <_close>
 8017dc4:	1c43      	adds	r3, r0, #1
 8017dc6:	d102      	bne.n	8017dce <_close_r+0x1a>
 8017dc8:	682b      	ldr	r3, [r5, #0]
 8017dca:	b103      	cbz	r3, 8017dce <_close_r+0x1a>
 8017dcc:	6023      	str	r3, [r4, #0]
 8017dce:	bd38      	pop	{r3, r4, r5, pc}
 8017dd0:	200039f8 	.word	0x200039f8

08017dd4 <quorem>:
 8017dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd8:	6903      	ldr	r3, [r0, #16]
 8017dda:	690c      	ldr	r4, [r1, #16]
 8017ddc:	42a3      	cmp	r3, r4
 8017dde:	4607      	mov	r7, r0
 8017de0:	f2c0 8081 	blt.w	8017ee6 <quorem+0x112>
 8017de4:	3c01      	subs	r4, #1
 8017de6:	f101 0814 	add.w	r8, r1, #20
 8017dea:	f100 0514 	add.w	r5, r0, #20
 8017dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017df2:	9301      	str	r3, [sp, #4]
 8017df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017dfc:	3301      	adds	r3, #1
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017e08:	fbb2 f6f3 	udiv	r6, r2, r3
 8017e0c:	d331      	bcc.n	8017e72 <quorem+0x9e>
 8017e0e:	f04f 0e00 	mov.w	lr, #0
 8017e12:	4640      	mov	r0, r8
 8017e14:	46ac      	mov	ip, r5
 8017e16:	46f2      	mov	sl, lr
 8017e18:	f850 2b04 	ldr.w	r2, [r0], #4
 8017e1c:	b293      	uxth	r3, r2
 8017e1e:	fb06 e303 	mla	r3, r6, r3, lr
 8017e22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	ebaa 0303 	sub.w	r3, sl, r3
 8017e2c:	f8dc a000 	ldr.w	sl, [ip]
 8017e30:	0c12      	lsrs	r2, r2, #16
 8017e32:	fa13 f38a 	uxtah	r3, r3, sl
 8017e36:	fb06 e202 	mla	r2, r6, r2, lr
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	9b00      	ldr	r3, [sp, #0]
 8017e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017e42:	b292      	uxth	r2, r2
 8017e44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017e50:	4581      	cmp	r9, r0
 8017e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e56:	f84c 3b04 	str.w	r3, [ip], #4
 8017e5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017e5e:	d2db      	bcs.n	8017e18 <quorem+0x44>
 8017e60:	f855 300b 	ldr.w	r3, [r5, fp]
 8017e64:	b92b      	cbnz	r3, 8017e72 <quorem+0x9e>
 8017e66:	9b01      	ldr	r3, [sp, #4]
 8017e68:	3b04      	subs	r3, #4
 8017e6a:	429d      	cmp	r5, r3
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	d32e      	bcc.n	8017ece <quorem+0xfa>
 8017e70:	613c      	str	r4, [r7, #16]
 8017e72:	4638      	mov	r0, r7
 8017e74:	f001 fc96 	bl	80197a4 <__mcmp>
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	db24      	blt.n	8017ec6 <quorem+0xf2>
 8017e7c:	3601      	adds	r6, #1
 8017e7e:	4628      	mov	r0, r5
 8017e80:	f04f 0c00 	mov.w	ip, #0
 8017e84:	f858 2b04 	ldr.w	r2, [r8], #4
 8017e88:	f8d0 e000 	ldr.w	lr, [r0]
 8017e8c:	b293      	uxth	r3, r2
 8017e8e:	ebac 0303 	sub.w	r3, ip, r3
 8017e92:	0c12      	lsrs	r2, r2, #16
 8017e94:	fa13 f38e 	uxtah	r3, r3, lr
 8017e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ea0:	b29b      	uxth	r3, r3
 8017ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ea6:	45c1      	cmp	r9, r8
 8017ea8:	f840 3b04 	str.w	r3, [r0], #4
 8017eac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017eb0:	d2e8      	bcs.n	8017e84 <quorem+0xb0>
 8017eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017eba:	b922      	cbnz	r2, 8017ec6 <quorem+0xf2>
 8017ebc:	3b04      	subs	r3, #4
 8017ebe:	429d      	cmp	r5, r3
 8017ec0:	461a      	mov	r2, r3
 8017ec2:	d30a      	bcc.n	8017eda <quorem+0x106>
 8017ec4:	613c      	str	r4, [r7, #16]
 8017ec6:	4630      	mov	r0, r6
 8017ec8:	b003      	add	sp, #12
 8017eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ece:	6812      	ldr	r2, [r2, #0]
 8017ed0:	3b04      	subs	r3, #4
 8017ed2:	2a00      	cmp	r2, #0
 8017ed4:	d1cc      	bne.n	8017e70 <quorem+0x9c>
 8017ed6:	3c01      	subs	r4, #1
 8017ed8:	e7c7      	b.n	8017e6a <quorem+0x96>
 8017eda:	6812      	ldr	r2, [r2, #0]
 8017edc:	3b04      	subs	r3, #4
 8017ede:	2a00      	cmp	r2, #0
 8017ee0:	d1f0      	bne.n	8017ec4 <quorem+0xf0>
 8017ee2:	3c01      	subs	r4, #1
 8017ee4:	e7eb      	b.n	8017ebe <quorem+0xea>
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	e7ee      	b.n	8017ec8 <quorem+0xf4>
 8017eea:	0000      	movs	r0, r0
 8017eec:	0000      	movs	r0, r0
	...

08017ef0 <_dtoa_r>:
 8017ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef4:	ed2d 8b04 	vpush	{d8-d9}
 8017ef8:	ec57 6b10 	vmov	r6, r7, d0
 8017efc:	b093      	sub	sp, #76	; 0x4c
 8017efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017f04:	9106      	str	r1, [sp, #24]
 8017f06:	ee10 aa10 	vmov	sl, s0
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8017f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f10:	46bb      	mov	fp, r7
 8017f12:	b975      	cbnz	r5, 8017f32 <_dtoa_r+0x42>
 8017f14:	2010      	movs	r0, #16
 8017f16:	f001 f95f 	bl	80191d8 <malloc>
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	6260      	str	r0, [r4, #36]	; 0x24
 8017f1e:	b920      	cbnz	r0, 8017f2a <_dtoa_r+0x3a>
 8017f20:	4ba7      	ldr	r3, [pc, #668]	; (80181c0 <_dtoa_r+0x2d0>)
 8017f22:	21ea      	movs	r1, #234	; 0xea
 8017f24:	48a7      	ldr	r0, [pc, #668]	; (80181c4 <_dtoa_r+0x2d4>)
 8017f26:	f002 fcdb 	bl	801a8e0 <__assert_func>
 8017f2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f2e:	6005      	str	r5, [r0, #0]
 8017f30:	60c5      	str	r5, [r0, #12]
 8017f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f34:	6819      	ldr	r1, [r3, #0]
 8017f36:	b151      	cbz	r1, 8017f4e <_dtoa_r+0x5e>
 8017f38:	685a      	ldr	r2, [r3, #4]
 8017f3a:	604a      	str	r2, [r1, #4]
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	4093      	lsls	r3, r2
 8017f40:	608b      	str	r3, [r1, #8]
 8017f42:	4620      	mov	r0, r4
 8017f44:	f001 f9a2 	bl	801928c <_Bfree>
 8017f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	601a      	str	r2, [r3, #0]
 8017f4e:	1e3b      	subs	r3, r7, #0
 8017f50:	bfaa      	itet	ge
 8017f52:	2300      	movge	r3, #0
 8017f54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017f58:	f8c8 3000 	strge.w	r3, [r8]
 8017f5c:	4b9a      	ldr	r3, [pc, #616]	; (80181c8 <_dtoa_r+0x2d8>)
 8017f5e:	bfbc      	itt	lt
 8017f60:	2201      	movlt	r2, #1
 8017f62:	f8c8 2000 	strlt.w	r2, [r8]
 8017f66:	ea33 030b 	bics.w	r3, r3, fp
 8017f6a:	d11b      	bne.n	8017fa4 <_dtoa_r+0xb4>
 8017f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8017f72:	6013      	str	r3, [r2, #0]
 8017f74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017f78:	4333      	orrs	r3, r6
 8017f7a:	f000 8592 	beq.w	8018aa2 <_dtoa_r+0xbb2>
 8017f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f80:	b963      	cbnz	r3, 8017f9c <_dtoa_r+0xac>
 8017f82:	4b92      	ldr	r3, [pc, #584]	; (80181cc <_dtoa_r+0x2dc>)
 8017f84:	e022      	b.n	8017fcc <_dtoa_r+0xdc>
 8017f86:	4b92      	ldr	r3, [pc, #584]	; (80181d0 <_dtoa_r+0x2e0>)
 8017f88:	9301      	str	r3, [sp, #4]
 8017f8a:	3308      	adds	r3, #8
 8017f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f8e:	6013      	str	r3, [r2, #0]
 8017f90:	9801      	ldr	r0, [sp, #4]
 8017f92:	b013      	add	sp, #76	; 0x4c
 8017f94:	ecbd 8b04 	vpop	{d8-d9}
 8017f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f9c:	4b8b      	ldr	r3, [pc, #556]	; (80181cc <_dtoa_r+0x2dc>)
 8017f9e:	9301      	str	r3, [sp, #4]
 8017fa0:	3303      	adds	r3, #3
 8017fa2:	e7f3      	b.n	8017f8c <_dtoa_r+0x9c>
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	4650      	mov	r0, sl
 8017faa:	4659      	mov	r1, fp
 8017fac:	f7e8 fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8017fb0:	ec4b ab19 	vmov	d9, sl, fp
 8017fb4:	4680      	mov	r8, r0
 8017fb6:	b158      	cbz	r0, 8017fd0 <_dtoa_r+0xe0>
 8017fb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fba:	2301      	movs	r3, #1
 8017fbc:	6013      	str	r3, [r2, #0]
 8017fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	f000 856b 	beq.w	8018a9c <_dtoa_r+0xbac>
 8017fc6:	4883      	ldr	r0, [pc, #524]	; (80181d4 <_dtoa_r+0x2e4>)
 8017fc8:	6018      	str	r0, [r3, #0]
 8017fca:	1e43      	subs	r3, r0, #1
 8017fcc:	9301      	str	r3, [sp, #4]
 8017fce:	e7df      	b.n	8017f90 <_dtoa_r+0xa0>
 8017fd0:	ec4b ab10 	vmov	d0, sl, fp
 8017fd4:	aa10      	add	r2, sp, #64	; 0x40
 8017fd6:	a911      	add	r1, sp, #68	; 0x44
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f001 fd05 	bl	80199e8 <__d2b>
 8017fde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017fe2:	ee08 0a10 	vmov	s16, r0
 8017fe6:	2d00      	cmp	r5, #0
 8017fe8:	f000 8084 	beq.w	80180f4 <_dtoa_r+0x204>
 8017fec:	ee19 3a90 	vmov	r3, s19
 8017ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017ff4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017ff8:	4656      	mov	r6, sl
 8017ffa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018002:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018006:	4b74      	ldr	r3, [pc, #464]	; (80181d8 <_dtoa_r+0x2e8>)
 8018008:	2200      	movs	r2, #0
 801800a:	4630      	mov	r0, r6
 801800c:	4639      	mov	r1, r7
 801800e:	f7e8 f953 	bl	80002b8 <__aeabi_dsub>
 8018012:	a365      	add	r3, pc, #404	; (adr r3, 80181a8 <_dtoa_r+0x2b8>)
 8018014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018018:	f7e8 fb06 	bl	8000628 <__aeabi_dmul>
 801801c:	a364      	add	r3, pc, #400	; (adr r3, 80181b0 <_dtoa_r+0x2c0>)
 801801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018022:	f7e8 f94b 	bl	80002bc <__adddf3>
 8018026:	4606      	mov	r6, r0
 8018028:	4628      	mov	r0, r5
 801802a:	460f      	mov	r7, r1
 801802c:	f7e8 fa92 	bl	8000554 <__aeabi_i2d>
 8018030:	a361      	add	r3, pc, #388	; (adr r3, 80181b8 <_dtoa_r+0x2c8>)
 8018032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018036:	f7e8 faf7 	bl	8000628 <__aeabi_dmul>
 801803a:	4602      	mov	r2, r0
 801803c:	460b      	mov	r3, r1
 801803e:	4630      	mov	r0, r6
 8018040:	4639      	mov	r1, r7
 8018042:	f7e8 f93b 	bl	80002bc <__adddf3>
 8018046:	4606      	mov	r6, r0
 8018048:	460f      	mov	r7, r1
 801804a:	f7e8 fd9d 	bl	8000b88 <__aeabi_d2iz>
 801804e:	2200      	movs	r2, #0
 8018050:	9000      	str	r0, [sp, #0]
 8018052:	2300      	movs	r3, #0
 8018054:	4630      	mov	r0, r6
 8018056:	4639      	mov	r1, r7
 8018058:	f7e8 fd58 	bl	8000b0c <__aeabi_dcmplt>
 801805c:	b150      	cbz	r0, 8018074 <_dtoa_r+0x184>
 801805e:	9800      	ldr	r0, [sp, #0]
 8018060:	f7e8 fa78 	bl	8000554 <__aeabi_i2d>
 8018064:	4632      	mov	r2, r6
 8018066:	463b      	mov	r3, r7
 8018068:	f7e8 fd46 	bl	8000af8 <__aeabi_dcmpeq>
 801806c:	b910      	cbnz	r0, 8018074 <_dtoa_r+0x184>
 801806e:	9b00      	ldr	r3, [sp, #0]
 8018070:	3b01      	subs	r3, #1
 8018072:	9300      	str	r3, [sp, #0]
 8018074:	9b00      	ldr	r3, [sp, #0]
 8018076:	2b16      	cmp	r3, #22
 8018078:	d85a      	bhi.n	8018130 <_dtoa_r+0x240>
 801807a:	9a00      	ldr	r2, [sp, #0]
 801807c:	4b57      	ldr	r3, [pc, #348]	; (80181dc <_dtoa_r+0x2ec>)
 801807e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018086:	ec51 0b19 	vmov	r0, r1, d9
 801808a:	f7e8 fd3f 	bl	8000b0c <__aeabi_dcmplt>
 801808e:	2800      	cmp	r0, #0
 8018090:	d050      	beq.n	8018134 <_dtoa_r+0x244>
 8018092:	9b00      	ldr	r3, [sp, #0]
 8018094:	3b01      	subs	r3, #1
 8018096:	9300      	str	r3, [sp, #0]
 8018098:	2300      	movs	r3, #0
 801809a:	930b      	str	r3, [sp, #44]	; 0x2c
 801809c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801809e:	1b5d      	subs	r5, r3, r5
 80180a0:	1e6b      	subs	r3, r5, #1
 80180a2:	9305      	str	r3, [sp, #20]
 80180a4:	bf45      	ittet	mi
 80180a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80180aa:	9304      	strmi	r3, [sp, #16]
 80180ac:	2300      	movpl	r3, #0
 80180ae:	2300      	movmi	r3, #0
 80180b0:	bf4c      	ite	mi
 80180b2:	9305      	strmi	r3, [sp, #20]
 80180b4:	9304      	strpl	r3, [sp, #16]
 80180b6:	9b00      	ldr	r3, [sp, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	db3d      	blt.n	8018138 <_dtoa_r+0x248>
 80180bc:	9b05      	ldr	r3, [sp, #20]
 80180be:	9a00      	ldr	r2, [sp, #0]
 80180c0:	920a      	str	r2, [sp, #40]	; 0x28
 80180c2:	4413      	add	r3, r2
 80180c4:	9305      	str	r3, [sp, #20]
 80180c6:	2300      	movs	r3, #0
 80180c8:	9307      	str	r3, [sp, #28]
 80180ca:	9b06      	ldr	r3, [sp, #24]
 80180cc:	2b09      	cmp	r3, #9
 80180ce:	f200 8089 	bhi.w	80181e4 <_dtoa_r+0x2f4>
 80180d2:	2b05      	cmp	r3, #5
 80180d4:	bfc4      	itt	gt
 80180d6:	3b04      	subgt	r3, #4
 80180d8:	9306      	strgt	r3, [sp, #24]
 80180da:	9b06      	ldr	r3, [sp, #24]
 80180dc:	f1a3 0302 	sub.w	r3, r3, #2
 80180e0:	bfcc      	ite	gt
 80180e2:	2500      	movgt	r5, #0
 80180e4:	2501      	movle	r5, #1
 80180e6:	2b03      	cmp	r3, #3
 80180e8:	f200 8087 	bhi.w	80181fa <_dtoa_r+0x30a>
 80180ec:	e8df f003 	tbb	[pc, r3]
 80180f0:	59383a2d 	.word	0x59383a2d
 80180f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80180f8:	441d      	add	r5, r3
 80180fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80180fe:	2b20      	cmp	r3, #32
 8018100:	bfc1      	itttt	gt
 8018102:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018106:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801810a:	fa0b f303 	lslgt.w	r3, fp, r3
 801810e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018112:	bfda      	itte	le
 8018114:	f1c3 0320 	rsble	r3, r3, #32
 8018118:	fa06 f003 	lslle.w	r0, r6, r3
 801811c:	4318      	orrgt	r0, r3
 801811e:	f7e8 fa09 	bl	8000534 <__aeabi_ui2d>
 8018122:	2301      	movs	r3, #1
 8018124:	4606      	mov	r6, r0
 8018126:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801812a:	3d01      	subs	r5, #1
 801812c:	930e      	str	r3, [sp, #56]	; 0x38
 801812e:	e76a      	b.n	8018006 <_dtoa_r+0x116>
 8018130:	2301      	movs	r3, #1
 8018132:	e7b2      	b.n	801809a <_dtoa_r+0x1aa>
 8018134:	900b      	str	r0, [sp, #44]	; 0x2c
 8018136:	e7b1      	b.n	801809c <_dtoa_r+0x1ac>
 8018138:	9b04      	ldr	r3, [sp, #16]
 801813a:	9a00      	ldr	r2, [sp, #0]
 801813c:	1a9b      	subs	r3, r3, r2
 801813e:	9304      	str	r3, [sp, #16]
 8018140:	4253      	negs	r3, r2
 8018142:	9307      	str	r3, [sp, #28]
 8018144:	2300      	movs	r3, #0
 8018146:	930a      	str	r3, [sp, #40]	; 0x28
 8018148:	e7bf      	b.n	80180ca <_dtoa_r+0x1da>
 801814a:	2300      	movs	r3, #0
 801814c:	9308      	str	r3, [sp, #32]
 801814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018150:	2b00      	cmp	r3, #0
 8018152:	dc55      	bgt.n	8018200 <_dtoa_r+0x310>
 8018154:	2301      	movs	r3, #1
 8018156:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801815a:	461a      	mov	r2, r3
 801815c:	9209      	str	r2, [sp, #36]	; 0x24
 801815e:	e00c      	b.n	801817a <_dtoa_r+0x28a>
 8018160:	2301      	movs	r3, #1
 8018162:	e7f3      	b.n	801814c <_dtoa_r+0x25c>
 8018164:	2300      	movs	r3, #0
 8018166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018168:	9308      	str	r3, [sp, #32]
 801816a:	9b00      	ldr	r3, [sp, #0]
 801816c:	4413      	add	r3, r2
 801816e:	9302      	str	r3, [sp, #8]
 8018170:	3301      	adds	r3, #1
 8018172:	2b01      	cmp	r3, #1
 8018174:	9303      	str	r3, [sp, #12]
 8018176:	bfb8      	it	lt
 8018178:	2301      	movlt	r3, #1
 801817a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801817c:	2200      	movs	r2, #0
 801817e:	6042      	str	r2, [r0, #4]
 8018180:	2204      	movs	r2, #4
 8018182:	f102 0614 	add.w	r6, r2, #20
 8018186:	429e      	cmp	r6, r3
 8018188:	6841      	ldr	r1, [r0, #4]
 801818a:	d93d      	bls.n	8018208 <_dtoa_r+0x318>
 801818c:	4620      	mov	r0, r4
 801818e:	f001 f83d 	bl	801920c <_Balloc>
 8018192:	9001      	str	r0, [sp, #4]
 8018194:	2800      	cmp	r0, #0
 8018196:	d13b      	bne.n	8018210 <_dtoa_r+0x320>
 8018198:	4b11      	ldr	r3, [pc, #68]	; (80181e0 <_dtoa_r+0x2f0>)
 801819a:	4602      	mov	r2, r0
 801819c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80181a0:	e6c0      	b.n	8017f24 <_dtoa_r+0x34>
 80181a2:	2301      	movs	r3, #1
 80181a4:	e7df      	b.n	8018166 <_dtoa_r+0x276>
 80181a6:	bf00      	nop
 80181a8:	636f4361 	.word	0x636f4361
 80181ac:	3fd287a7 	.word	0x3fd287a7
 80181b0:	8b60c8b3 	.word	0x8b60c8b3
 80181b4:	3fc68a28 	.word	0x3fc68a28
 80181b8:	509f79fb 	.word	0x509f79fb
 80181bc:	3fd34413 	.word	0x3fd34413
 80181c0:	0801bc96 	.word	0x0801bc96
 80181c4:	0801bcad 	.word	0x0801bcad
 80181c8:	7ff00000 	.word	0x7ff00000
 80181cc:	0801bc92 	.word	0x0801bc92
 80181d0:	0801bc89 	.word	0x0801bc89
 80181d4:	0801bf02 	.word	0x0801bf02
 80181d8:	3ff80000 	.word	0x3ff80000
 80181dc:	0801be18 	.word	0x0801be18
 80181e0:	0801bd08 	.word	0x0801bd08
 80181e4:	2501      	movs	r5, #1
 80181e6:	2300      	movs	r3, #0
 80181e8:	9306      	str	r3, [sp, #24]
 80181ea:	9508      	str	r5, [sp, #32]
 80181ec:	f04f 33ff 	mov.w	r3, #4294967295
 80181f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80181f4:	2200      	movs	r2, #0
 80181f6:	2312      	movs	r3, #18
 80181f8:	e7b0      	b.n	801815c <_dtoa_r+0x26c>
 80181fa:	2301      	movs	r3, #1
 80181fc:	9308      	str	r3, [sp, #32]
 80181fe:	e7f5      	b.n	80181ec <_dtoa_r+0x2fc>
 8018200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018202:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018206:	e7b8      	b.n	801817a <_dtoa_r+0x28a>
 8018208:	3101      	adds	r1, #1
 801820a:	6041      	str	r1, [r0, #4]
 801820c:	0052      	lsls	r2, r2, #1
 801820e:	e7b8      	b.n	8018182 <_dtoa_r+0x292>
 8018210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018212:	9a01      	ldr	r2, [sp, #4]
 8018214:	601a      	str	r2, [r3, #0]
 8018216:	9b03      	ldr	r3, [sp, #12]
 8018218:	2b0e      	cmp	r3, #14
 801821a:	f200 809d 	bhi.w	8018358 <_dtoa_r+0x468>
 801821e:	2d00      	cmp	r5, #0
 8018220:	f000 809a 	beq.w	8018358 <_dtoa_r+0x468>
 8018224:	9b00      	ldr	r3, [sp, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	dd32      	ble.n	8018290 <_dtoa_r+0x3a0>
 801822a:	4ab7      	ldr	r2, [pc, #732]	; (8018508 <_dtoa_r+0x618>)
 801822c:	f003 030f 	and.w	r3, r3, #15
 8018230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018234:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018238:	9b00      	ldr	r3, [sp, #0]
 801823a:	05d8      	lsls	r0, r3, #23
 801823c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8018240:	d516      	bpl.n	8018270 <_dtoa_r+0x380>
 8018242:	4bb2      	ldr	r3, [pc, #712]	; (801850c <_dtoa_r+0x61c>)
 8018244:	ec51 0b19 	vmov	r0, r1, d9
 8018248:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801824c:	f7e8 fb16 	bl	800087c <__aeabi_ddiv>
 8018250:	f007 070f 	and.w	r7, r7, #15
 8018254:	4682      	mov	sl, r0
 8018256:	468b      	mov	fp, r1
 8018258:	2503      	movs	r5, #3
 801825a:	4eac      	ldr	r6, [pc, #688]	; (801850c <_dtoa_r+0x61c>)
 801825c:	b957      	cbnz	r7, 8018274 <_dtoa_r+0x384>
 801825e:	4642      	mov	r2, r8
 8018260:	464b      	mov	r3, r9
 8018262:	4650      	mov	r0, sl
 8018264:	4659      	mov	r1, fp
 8018266:	f7e8 fb09 	bl	800087c <__aeabi_ddiv>
 801826a:	4682      	mov	sl, r0
 801826c:	468b      	mov	fp, r1
 801826e:	e028      	b.n	80182c2 <_dtoa_r+0x3d2>
 8018270:	2502      	movs	r5, #2
 8018272:	e7f2      	b.n	801825a <_dtoa_r+0x36a>
 8018274:	07f9      	lsls	r1, r7, #31
 8018276:	d508      	bpl.n	801828a <_dtoa_r+0x39a>
 8018278:	4640      	mov	r0, r8
 801827a:	4649      	mov	r1, r9
 801827c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018280:	f7e8 f9d2 	bl	8000628 <__aeabi_dmul>
 8018284:	3501      	adds	r5, #1
 8018286:	4680      	mov	r8, r0
 8018288:	4689      	mov	r9, r1
 801828a:	107f      	asrs	r7, r7, #1
 801828c:	3608      	adds	r6, #8
 801828e:	e7e5      	b.n	801825c <_dtoa_r+0x36c>
 8018290:	f000 809b 	beq.w	80183ca <_dtoa_r+0x4da>
 8018294:	9b00      	ldr	r3, [sp, #0]
 8018296:	4f9d      	ldr	r7, [pc, #628]	; (801850c <_dtoa_r+0x61c>)
 8018298:	425e      	negs	r6, r3
 801829a:	4b9b      	ldr	r3, [pc, #620]	; (8018508 <_dtoa_r+0x618>)
 801829c:	f006 020f 	and.w	r2, r6, #15
 80182a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80182a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a8:	ec51 0b19 	vmov	r0, r1, d9
 80182ac:	f7e8 f9bc 	bl	8000628 <__aeabi_dmul>
 80182b0:	1136      	asrs	r6, r6, #4
 80182b2:	4682      	mov	sl, r0
 80182b4:	468b      	mov	fp, r1
 80182b6:	2300      	movs	r3, #0
 80182b8:	2502      	movs	r5, #2
 80182ba:	2e00      	cmp	r6, #0
 80182bc:	d17a      	bne.n	80183b4 <_dtoa_r+0x4c4>
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d1d3      	bne.n	801826a <_dtoa_r+0x37a>
 80182c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	f000 8082 	beq.w	80183ce <_dtoa_r+0x4de>
 80182ca:	4b91      	ldr	r3, [pc, #580]	; (8018510 <_dtoa_r+0x620>)
 80182cc:	2200      	movs	r2, #0
 80182ce:	4650      	mov	r0, sl
 80182d0:	4659      	mov	r1, fp
 80182d2:	f7e8 fc1b 	bl	8000b0c <__aeabi_dcmplt>
 80182d6:	2800      	cmp	r0, #0
 80182d8:	d079      	beq.n	80183ce <_dtoa_r+0x4de>
 80182da:	9b03      	ldr	r3, [sp, #12]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d076      	beq.n	80183ce <_dtoa_r+0x4de>
 80182e0:	9b02      	ldr	r3, [sp, #8]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	dd36      	ble.n	8018354 <_dtoa_r+0x464>
 80182e6:	9b00      	ldr	r3, [sp, #0]
 80182e8:	4650      	mov	r0, sl
 80182ea:	4659      	mov	r1, fp
 80182ec:	1e5f      	subs	r7, r3, #1
 80182ee:	2200      	movs	r2, #0
 80182f0:	4b88      	ldr	r3, [pc, #544]	; (8018514 <_dtoa_r+0x624>)
 80182f2:	f7e8 f999 	bl	8000628 <__aeabi_dmul>
 80182f6:	9e02      	ldr	r6, [sp, #8]
 80182f8:	4682      	mov	sl, r0
 80182fa:	468b      	mov	fp, r1
 80182fc:	3501      	adds	r5, #1
 80182fe:	4628      	mov	r0, r5
 8018300:	f7e8 f928 	bl	8000554 <__aeabi_i2d>
 8018304:	4652      	mov	r2, sl
 8018306:	465b      	mov	r3, fp
 8018308:	f7e8 f98e 	bl	8000628 <__aeabi_dmul>
 801830c:	4b82      	ldr	r3, [pc, #520]	; (8018518 <_dtoa_r+0x628>)
 801830e:	2200      	movs	r2, #0
 8018310:	f7e7 ffd4 	bl	80002bc <__adddf3>
 8018314:	46d0      	mov	r8, sl
 8018316:	46d9      	mov	r9, fp
 8018318:	4682      	mov	sl, r0
 801831a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801831e:	2e00      	cmp	r6, #0
 8018320:	d158      	bne.n	80183d4 <_dtoa_r+0x4e4>
 8018322:	4b7e      	ldr	r3, [pc, #504]	; (801851c <_dtoa_r+0x62c>)
 8018324:	2200      	movs	r2, #0
 8018326:	4640      	mov	r0, r8
 8018328:	4649      	mov	r1, r9
 801832a:	f7e7 ffc5 	bl	80002b8 <__aeabi_dsub>
 801832e:	4652      	mov	r2, sl
 8018330:	465b      	mov	r3, fp
 8018332:	4680      	mov	r8, r0
 8018334:	4689      	mov	r9, r1
 8018336:	f7e8 fc07 	bl	8000b48 <__aeabi_dcmpgt>
 801833a:	2800      	cmp	r0, #0
 801833c:	f040 8295 	bne.w	801886a <_dtoa_r+0x97a>
 8018340:	4652      	mov	r2, sl
 8018342:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018346:	4640      	mov	r0, r8
 8018348:	4649      	mov	r1, r9
 801834a:	f7e8 fbdf 	bl	8000b0c <__aeabi_dcmplt>
 801834e:	2800      	cmp	r0, #0
 8018350:	f040 8289 	bne.w	8018866 <_dtoa_r+0x976>
 8018354:	ec5b ab19 	vmov	sl, fp, d9
 8018358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801835a:	2b00      	cmp	r3, #0
 801835c:	f2c0 8148 	blt.w	80185f0 <_dtoa_r+0x700>
 8018360:	9a00      	ldr	r2, [sp, #0]
 8018362:	2a0e      	cmp	r2, #14
 8018364:	f300 8144 	bgt.w	80185f0 <_dtoa_r+0x700>
 8018368:	4b67      	ldr	r3, [pc, #412]	; (8018508 <_dtoa_r+0x618>)
 801836a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801836e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018374:	2b00      	cmp	r3, #0
 8018376:	f280 80d5 	bge.w	8018524 <_dtoa_r+0x634>
 801837a:	9b03      	ldr	r3, [sp, #12]
 801837c:	2b00      	cmp	r3, #0
 801837e:	f300 80d1 	bgt.w	8018524 <_dtoa_r+0x634>
 8018382:	f040 826f 	bne.w	8018864 <_dtoa_r+0x974>
 8018386:	4b65      	ldr	r3, [pc, #404]	; (801851c <_dtoa_r+0x62c>)
 8018388:	2200      	movs	r2, #0
 801838a:	4640      	mov	r0, r8
 801838c:	4649      	mov	r1, r9
 801838e:	f7e8 f94b 	bl	8000628 <__aeabi_dmul>
 8018392:	4652      	mov	r2, sl
 8018394:	465b      	mov	r3, fp
 8018396:	f7e8 fbcd 	bl	8000b34 <__aeabi_dcmpge>
 801839a:	9e03      	ldr	r6, [sp, #12]
 801839c:	4637      	mov	r7, r6
 801839e:	2800      	cmp	r0, #0
 80183a0:	f040 8245 	bne.w	801882e <_dtoa_r+0x93e>
 80183a4:	9d01      	ldr	r5, [sp, #4]
 80183a6:	2331      	movs	r3, #49	; 0x31
 80183a8:	f805 3b01 	strb.w	r3, [r5], #1
 80183ac:	9b00      	ldr	r3, [sp, #0]
 80183ae:	3301      	adds	r3, #1
 80183b0:	9300      	str	r3, [sp, #0]
 80183b2:	e240      	b.n	8018836 <_dtoa_r+0x946>
 80183b4:	07f2      	lsls	r2, r6, #31
 80183b6:	d505      	bpl.n	80183c4 <_dtoa_r+0x4d4>
 80183b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80183bc:	f7e8 f934 	bl	8000628 <__aeabi_dmul>
 80183c0:	3501      	adds	r5, #1
 80183c2:	2301      	movs	r3, #1
 80183c4:	1076      	asrs	r6, r6, #1
 80183c6:	3708      	adds	r7, #8
 80183c8:	e777      	b.n	80182ba <_dtoa_r+0x3ca>
 80183ca:	2502      	movs	r5, #2
 80183cc:	e779      	b.n	80182c2 <_dtoa_r+0x3d2>
 80183ce:	9f00      	ldr	r7, [sp, #0]
 80183d0:	9e03      	ldr	r6, [sp, #12]
 80183d2:	e794      	b.n	80182fe <_dtoa_r+0x40e>
 80183d4:	9901      	ldr	r1, [sp, #4]
 80183d6:	4b4c      	ldr	r3, [pc, #304]	; (8018508 <_dtoa_r+0x618>)
 80183d8:	4431      	add	r1, r6
 80183da:	910d      	str	r1, [sp, #52]	; 0x34
 80183dc:	9908      	ldr	r1, [sp, #32]
 80183de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80183e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80183e6:	2900      	cmp	r1, #0
 80183e8:	d043      	beq.n	8018472 <_dtoa_r+0x582>
 80183ea:	494d      	ldr	r1, [pc, #308]	; (8018520 <_dtoa_r+0x630>)
 80183ec:	2000      	movs	r0, #0
 80183ee:	f7e8 fa45 	bl	800087c <__aeabi_ddiv>
 80183f2:	4652      	mov	r2, sl
 80183f4:	465b      	mov	r3, fp
 80183f6:	f7e7 ff5f 	bl	80002b8 <__aeabi_dsub>
 80183fa:	9d01      	ldr	r5, [sp, #4]
 80183fc:	4682      	mov	sl, r0
 80183fe:	468b      	mov	fp, r1
 8018400:	4649      	mov	r1, r9
 8018402:	4640      	mov	r0, r8
 8018404:	f7e8 fbc0 	bl	8000b88 <__aeabi_d2iz>
 8018408:	4606      	mov	r6, r0
 801840a:	f7e8 f8a3 	bl	8000554 <__aeabi_i2d>
 801840e:	4602      	mov	r2, r0
 8018410:	460b      	mov	r3, r1
 8018412:	4640      	mov	r0, r8
 8018414:	4649      	mov	r1, r9
 8018416:	f7e7 ff4f 	bl	80002b8 <__aeabi_dsub>
 801841a:	3630      	adds	r6, #48	; 0x30
 801841c:	f805 6b01 	strb.w	r6, [r5], #1
 8018420:	4652      	mov	r2, sl
 8018422:	465b      	mov	r3, fp
 8018424:	4680      	mov	r8, r0
 8018426:	4689      	mov	r9, r1
 8018428:	f7e8 fb70 	bl	8000b0c <__aeabi_dcmplt>
 801842c:	2800      	cmp	r0, #0
 801842e:	d163      	bne.n	80184f8 <_dtoa_r+0x608>
 8018430:	4642      	mov	r2, r8
 8018432:	464b      	mov	r3, r9
 8018434:	4936      	ldr	r1, [pc, #216]	; (8018510 <_dtoa_r+0x620>)
 8018436:	2000      	movs	r0, #0
 8018438:	f7e7 ff3e 	bl	80002b8 <__aeabi_dsub>
 801843c:	4652      	mov	r2, sl
 801843e:	465b      	mov	r3, fp
 8018440:	f7e8 fb64 	bl	8000b0c <__aeabi_dcmplt>
 8018444:	2800      	cmp	r0, #0
 8018446:	f040 80b5 	bne.w	80185b4 <_dtoa_r+0x6c4>
 801844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801844c:	429d      	cmp	r5, r3
 801844e:	d081      	beq.n	8018354 <_dtoa_r+0x464>
 8018450:	4b30      	ldr	r3, [pc, #192]	; (8018514 <_dtoa_r+0x624>)
 8018452:	2200      	movs	r2, #0
 8018454:	4650      	mov	r0, sl
 8018456:	4659      	mov	r1, fp
 8018458:	f7e8 f8e6 	bl	8000628 <__aeabi_dmul>
 801845c:	4b2d      	ldr	r3, [pc, #180]	; (8018514 <_dtoa_r+0x624>)
 801845e:	4682      	mov	sl, r0
 8018460:	468b      	mov	fp, r1
 8018462:	4640      	mov	r0, r8
 8018464:	4649      	mov	r1, r9
 8018466:	2200      	movs	r2, #0
 8018468:	f7e8 f8de 	bl	8000628 <__aeabi_dmul>
 801846c:	4680      	mov	r8, r0
 801846e:	4689      	mov	r9, r1
 8018470:	e7c6      	b.n	8018400 <_dtoa_r+0x510>
 8018472:	4650      	mov	r0, sl
 8018474:	4659      	mov	r1, fp
 8018476:	f7e8 f8d7 	bl	8000628 <__aeabi_dmul>
 801847a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801847c:	9d01      	ldr	r5, [sp, #4]
 801847e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018480:	4682      	mov	sl, r0
 8018482:	468b      	mov	fp, r1
 8018484:	4649      	mov	r1, r9
 8018486:	4640      	mov	r0, r8
 8018488:	f7e8 fb7e 	bl	8000b88 <__aeabi_d2iz>
 801848c:	4606      	mov	r6, r0
 801848e:	f7e8 f861 	bl	8000554 <__aeabi_i2d>
 8018492:	3630      	adds	r6, #48	; 0x30
 8018494:	4602      	mov	r2, r0
 8018496:	460b      	mov	r3, r1
 8018498:	4640      	mov	r0, r8
 801849a:	4649      	mov	r1, r9
 801849c:	f7e7 ff0c 	bl	80002b8 <__aeabi_dsub>
 80184a0:	f805 6b01 	strb.w	r6, [r5], #1
 80184a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80184a6:	429d      	cmp	r5, r3
 80184a8:	4680      	mov	r8, r0
 80184aa:	4689      	mov	r9, r1
 80184ac:	f04f 0200 	mov.w	r2, #0
 80184b0:	d124      	bne.n	80184fc <_dtoa_r+0x60c>
 80184b2:	4b1b      	ldr	r3, [pc, #108]	; (8018520 <_dtoa_r+0x630>)
 80184b4:	4650      	mov	r0, sl
 80184b6:	4659      	mov	r1, fp
 80184b8:	f7e7 ff00 	bl	80002bc <__adddf3>
 80184bc:	4602      	mov	r2, r0
 80184be:	460b      	mov	r3, r1
 80184c0:	4640      	mov	r0, r8
 80184c2:	4649      	mov	r1, r9
 80184c4:	f7e8 fb40 	bl	8000b48 <__aeabi_dcmpgt>
 80184c8:	2800      	cmp	r0, #0
 80184ca:	d173      	bne.n	80185b4 <_dtoa_r+0x6c4>
 80184cc:	4652      	mov	r2, sl
 80184ce:	465b      	mov	r3, fp
 80184d0:	4913      	ldr	r1, [pc, #76]	; (8018520 <_dtoa_r+0x630>)
 80184d2:	2000      	movs	r0, #0
 80184d4:	f7e7 fef0 	bl	80002b8 <__aeabi_dsub>
 80184d8:	4602      	mov	r2, r0
 80184da:	460b      	mov	r3, r1
 80184dc:	4640      	mov	r0, r8
 80184de:	4649      	mov	r1, r9
 80184e0:	f7e8 fb14 	bl	8000b0c <__aeabi_dcmplt>
 80184e4:	2800      	cmp	r0, #0
 80184e6:	f43f af35 	beq.w	8018354 <_dtoa_r+0x464>
 80184ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80184ec:	1e6b      	subs	r3, r5, #1
 80184ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80184f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80184f4:	2b30      	cmp	r3, #48	; 0x30
 80184f6:	d0f8      	beq.n	80184ea <_dtoa_r+0x5fa>
 80184f8:	9700      	str	r7, [sp, #0]
 80184fa:	e049      	b.n	8018590 <_dtoa_r+0x6a0>
 80184fc:	4b05      	ldr	r3, [pc, #20]	; (8018514 <_dtoa_r+0x624>)
 80184fe:	f7e8 f893 	bl	8000628 <__aeabi_dmul>
 8018502:	4680      	mov	r8, r0
 8018504:	4689      	mov	r9, r1
 8018506:	e7bd      	b.n	8018484 <_dtoa_r+0x594>
 8018508:	0801be18 	.word	0x0801be18
 801850c:	0801bdf0 	.word	0x0801bdf0
 8018510:	3ff00000 	.word	0x3ff00000
 8018514:	40240000 	.word	0x40240000
 8018518:	401c0000 	.word	0x401c0000
 801851c:	40140000 	.word	0x40140000
 8018520:	3fe00000 	.word	0x3fe00000
 8018524:	9d01      	ldr	r5, [sp, #4]
 8018526:	4656      	mov	r6, sl
 8018528:	465f      	mov	r7, fp
 801852a:	4642      	mov	r2, r8
 801852c:	464b      	mov	r3, r9
 801852e:	4630      	mov	r0, r6
 8018530:	4639      	mov	r1, r7
 8018532:	f7e8 f9a3 	bl	800087c <__aeabi_ddiv>
 8018536:	f7e8 fb27 	bl	8000b88 <__aeabi_d2iz>
 801853a:	4682      	mov	sl, r0
 801853c:	f7e8 f80a 	bl	8000554 <__aeabi_i2d>
 8018540:	4642      	mov	r2, r8
 8018542:	464b      	mov	r3, r9
 8018544:	f7e8 f870 	bl	8000628 <__aeabi_dmul>
 8018548:	4602      	mov	r2, r0
 801854a:	460b      	mov	r3, r1
 801854c:	4630      	mov	r0, r6
 801854e:	4639      	mov	r1, r7
 8018550:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8018554:	f7e7 feb0 	bl	80002b8 <__aeabi_dsub>
 8018558:	f805 6b01 	strb.w	r6, [r5], #1
 801855c:	9e01      	ldr	r6, [sp, #4]
 801855e:	9f03      	ldr	r7, [sp, #12]
 8018560:	1bae      	subs	r6, r5, r6
 8018562:	42b7      	cmp	r7, r6
 8018564:	4602      	mov	r2, r0
 8018566:	460b      	mov	r3, r1
 8018568:	d135      	bne.n	80185d6 <_dtoa_r+0x6e6>
 801856a:	f7e7 fea7 	bl	80002bc <__adddf3>
 801856e:	4642      	mov	r2, r8
 8018570:	464b      	mov	r3, r9
 8018572:	4606      	mov	r6, r0
 8018574:	460f      	mov	r7, r1
 8018576:	f7e8 fae7 	bl	8000b48 <__aeabi_dcmpgt>
 801857a:	b9d0      	cbnz	r0, 80185b2 <_dtoa_r+0x6c2>
 801857c:	4642      	mov	r2, r8
 801857e:	464b      	mov	r3, r9
 8018580:	4630      	mov	r0, r6
 8018582:	4639      	mov	r1, r7
 8018584:	f7e8 fab8 	bl	8000af8 <__aeabi_dcmpeq>
 8018588:	b110      	cbz	r0, 8018590 <_dtoa_r+0x6a0>
 801858a:	f01a 0f01 	tst.w	sl, #1
 801858e:	d110      	bne.n	80185b2 <_dtoa_r+0x6c2>
 8018590:	4620      	mov	r0, r4
 8018592:	ee18 1a10 	vmov	r1, s16
 8018596:	f000 fe79 	bl	801928c <_Bfree>
 801859a:	2300      	movs	r3, #0
 801859c:	9800      	ldr	r0, [sp, #0]
 801859e:	702b      	strb	r3, [r5, #0]
 80185a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185a2:	3001      	adds	r0, #1
 80185a4:	6018      	str	r0, [r3, #0]
 80185a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	f43f acf1 	beq.w	8017f90 <_dtoa_r+0xa0>
 80185ae:	601d      	str	r5, [r3, #0]
 80185b0:	e4ee      	b.n	8017f90 <_dtoa_r+0xa0>
 80185b2:	9f00      	ldr	r7, [sp, #0]
 80185b4:	462b      	mov	r3, r5
 80185b6:	461d      	mov	r5, r3
 80185b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80185bc:	2a39      	cmp	r2, #57	; 0x39
 80185be:	d106      	bne.n	80185ce <_dtoa_r+0x6de>
 80185c0:	9a01      	ldr	r2, [sp, #4]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d1f7      	bne.n	80185b6 <_dtoa_r+0x6c6>
 80185c6:	9901      	ldr	r1, [sp, #4]
 80185c8:	2230      	movs	r2, #48	; 0x30
 80185ca:	3701      	adds	r7, #1
 80185cc:	700a      	strb	r2, [r1, #0]
 80185ce:	781a      	ldrb	r2, [r3, #0]
 80185d0:	3201      	adds	r2, #1
 80185d2:	701a      	strb	r2, [r3, #0]
 80185d4:	e790      	b.n	80184f8 <_dtoa_r+0x608>
 80185d6:	4ba6      	ldr	r3, [pc, #664]	; (8018870 <_dtoa_r+0x980>)
 80185d8:	2200      	movs	r2, #0
 80185da:	f7e8 f825 	bl	8000628 <__aeabi_dmul>
 80185de:	2200      	movs	r2, #0
 80185e0:	2300      	movs	r3, #0
 80185e2:	4606      	mov	r6, r0
 80185e4:	460f      	mov	r7, r1
 80185e6:	f7e8 fa87 	bl	8000af8 <__aeabi_dcmpeq>
 80185ea:	2800      	cmp	r0, #0
 80185ec:	d09d      	beq.n	801852a <_dtoa_r+0x63a>
 80185ee:	e7cf      	b.n	8018590 <_dtoa_r+0x6a0>
 80185f0:	9a08      	ldr	r2, [sp, #32]
 80185f2:	2a00      	cmp	r2, #0
 80185f4:	f000 80d7 	beq.w	80187a6 <_dtoa_r+0x8b6>
 80185f8:	9a06      	ldr	r2, [sp, #24]
 80185fa:	2a01      	cmp	r2, #1
 80185fc:	f300 80ba 	bgt.w	8018774 <_dtoa_r+0x884>
 8018600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018602:	2a00      	cmp	r2, #0
 8018604:	f000 80b2 	beq.w	801876c <_dtoa_r+0x87c>
 8018608:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801860c:	9e07      	ldr	r6, [sp, #28]
 801860e:	9d04      	ldr	r5, [sp, #16]
 8018610:	9a04      	ldr	r2, [sp, #16]
 8018612:	441a      	add	r2, r3
 8018614:	9204      	str	r2, [sp, #16]
 8018616:	9a05      	ldr	r2, [sp, #20]
 8018618:	2101      	movs	r1, #1
 801861a:	441a      	add	r2, r3
 801861c:	4620      	mov	r0, r4
 801861e:	9205      	str	r2, [sp, #20]
 8018620:	f000 ff36 	bl	8019490 <__i2b>
 8018624:	4607      	mov	r7, r0
 8018626:	2d00      	cmp	r5, #0
 8018628:	dd0c      	ble.n	8018644 <_dtoa_r+0x754>
 801862a:	9b05      	ldr	r3, [sp, #20]
 801862c:	2b00      	cmp	r3, #0
 801862e:	dd09      	ble.n	8018644 <_dtoa_r+0x754>
 8018630:	42ab      	cmp	r3, r5
 8018632:	9a04      	ldr	r2, [sp, #16]
 8018634:	bfa8      	it	ge
 8018636:	462b      	movge	r3, r5
 8018638:	1ad2      	subs	r2, r2, r3
 801863a:	9204      	str	r2, [sp, #16]
 801863c:	9a05      	ldr	r2, [sp, #20]
 801863e:	1aed      	subs	r5, r5, r3
 8018640:	1ad3      	subs	r3, r2, r3
 8018642:	9305      	str	r3, [sp, #20]
 8018644:	9b07      	ldr	r3, [sp, #28]
 8018646:	b31b      	cbz	r3, 8018690 <_dtoa_r+0x7a0>
 8018648:	9b08      	ldr	r3, [sp, #32]
 801864a:	2b00      	cmp	r3, #0
 801864c:	f000 80af 	beq.w	80187ae <_dtoa_r+0x8be>
 8018650:	2e00      	cmp	r6, #0
 8018652:	dd13      	ble.n	801867c <_dtoa_r+0x78c>
 8018654:	4639      	mov	r1, r7
 8018656:	4632      	mov	r2, r6
 8018658:	4620      	mov	r0, r4
 801865a:	f000 ffd9 	bl	8019610 <__pow5mult>
 801865e:	ee18 2a10 	vmov	r2, s16
 8018662:	4601      	mov	r1, r0
 8018664:	4607      	mov	r7, r0
 8018666:	4620      	mov	r0, r4
 8018668:	f000 ff28 	bl	80194bc <__multiply>
 801866c:	ee18 1a10 	vmov	r1, s16
 8018670:	4680      	mov	r8, r0
 8018672:	4620      	mov	r0, r4
 8018674:	f000 fe0a 	bl	801928c <_Bfree>
 8018678:	ee08 8a10 	vmov	s16, r8
 801867c:	9b07      	ldr	r3, [sp, #28]
 801867e:	1b9a      	subs	r2, r3, r6
 8018680:	d006      	beq.n	8018690 <_dtoa_r+0x7a0>
 8018682:	ee18 1a10 	vmov	r1, s16
 8018686:	4620      	mov	r0, r4
 8018688:	f000 ffc2 	bl	8019610 <__pow5mult>
 801868c:	ee08 0a10 	vmov	s16, r0
 8018690:	2101      	movs	r1, #1
 8018692:	4620      	mov	r0, r4
 8018694:	f000 fefc 	bl	8019490 <__i2b>
 8018698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801869a:	2b00      	cmp	r3, #0
 801869c:	4606      	mov	r6, r0
 801869e:	f340 8088 	ble.w	80187b2 <_dtoa_r+0x8c2>
 80186a2:	461a      	mov	r2, r3
 80186a4:	4601      	mov	r1, r0
 80186a6:	4620      	mov	r0, r4
 80186a8:	f000 ffb2 	bl	8019610 <__pow5mult>
 80186ac:	9b06      	ldr	r3, [sp, #24]
 80186ae:	2b01      	cmp	r3, #1
 80186b0:	4606      	mov	r6, r0
 80186b2:	f340 8081 	ble.w	80187b8 <_dtoa_r+0x8c8>
 80186b6:	f04f 0800 	mov.w	r8, #0
 80186ba:	6933      	ldr	r3, [r6, #16]
 80186bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80186c0:	6918      	ldr	r0, [r3, #16]
 80186c2:	f000 fe95 	bl	80193f0 <__hi0bits>
 80186c6:	f1c0 0020 	rsb	r0, r0, #32
 80186ca:	9b05      	ldr	r3, [sp, #20]
 80186cc:	4418      	add	r0, r3
 80186ce:	f010 001f 	ands.w	r0, r0, #31
 80186d2:	f000 8092 	beq.w	80187fa <_dtoa_r+0x90a>
 80186d6:	f1c0 0320 	rsb	r3, r0, #32
 80186da:	2b04      	cmp	r3, #4
 80186dc:	f340 808a 	ble.w	80187f4 <_dtoa_r+0x904>
 80186e0:	f1c0 001c 	rsb	r0, r0, #28
 80186e4:	9b04      	ldr	r3, [sp, #16]
 80186e6:	4403      	add	r3, r0
 80186e8:	9304      	str	r3, [sp, #16]
 80186ea:	9b05      	ldr	r3, [sp, #20]
 80186ec:	4403      	add	r3, r0
 80186ee:	4405      	add	r5, r0
 80186f0:	9305      	str	r3, [sp, #20]
 80186f2:	9b04      	ldr	r3, [sp, #16]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	dd07      	ble.n	8018708 <_dtoa_r+0x818>
 80186f8:	ee18 1a10 	vmov	r1, s16
 80186fc:	461a      	mov	r2, r3
 80186fe:	4620      	mov	r0, r4
 8018700:	f000 ffe0 	bl	80196c4 <__lshift>
 8018704:	ee08 0a10 	vmov	s16, r0
 8018708:	9b05      	ldr	r3, [sp, #20]
 801870a:	2b00      	cmp	r3, #0
 801870c:	dd05      	ble.n	801871a <_dtoa_r+0x82a>
 801870e:	4631      	mov	r1, r6
 8018710:	461a      	mov	r2, r3
 8018712:	4620      	mov	r0, r4
 8018714:	f000 ffd6 	bl	80196c4 <__lshift>
 8018718:	4606      	mov	r6, r0
 801871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801871c:	2b00      	cmp	r3, #0
 801871e:	d06e      	beq.n	80187fe <_dtoa_r+0x90e>
 8018720:	ee18 0a10 	vmov	r0, s16
 8018724:	4631      	mov	r1, r6
 8018726:	f001 f83d 	bl	80197a4 <__mcmp>
 801872a:	2800      	cmp	r0, #0
 801872c:	da67      	bge.n	80187fe <_dtoa_r+0x90e>
 801872e:	9b00      	ldr	r3, [sp, #0]
 8018730:	3b01      	subs	r3, #1
 8018732:	ee18 1a10 	vmov	r1, s16
 8018736:	9300      	str	r3, [sp, #0]
 8018738:	220a      	movs	r2, #10
 801873a:	2300      	movs	r3, #0
 801873c:	4620      	mov	r0, r4
 801873e:	f000 fdc7 	bl	80192d0 <__multadd>
 8018742:	9b08      	ldr	r3, [sp, #32]
 8018744:	ee08 0a10 	vmov	s16, r0
 8018748:	2b00      	cmp	r3, #0
 801874a:	f000 81b1 	beq.w	8018ab0 <_dtoa_r+0xbc0>
 801874e:	2300      	movs	r3, #0
 8018750:	4639      	mov	r1, r7
 8018752:	220a      	movs	r2, #10
 8018754:	4620      	mov	r0, r4
 8018756:	f000 fdbb 	bl	80192d0 <__multadd>
 801875a:	9b02      	ldr	r3, [sp, #8]
 801875c:	2b00      	cmp	r3, #0
 801875e:	4607      	mov	r7, r0
 8018760:	f300 808e 	bgt.w	8018880 <_dtoa_r+0x990>
 8018764:	9b06      	ldr	r3, [sp, #24]
 8018766:	2b02      	cmp	r3, #2
 8018768:	dc51      	bgt.n	801880e <_dtoa_r+0x91e>
 801876a:	e089      	b.n	8018880 <_dtoa_r+0x990>
 801876c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801876e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018772:	e74b      	b.n	801860c <_dtoa_r+0x71c>
 8018774:	9b03      	ldr	r3, [sp, #12]
 8018776:	1e5e      	subs	r6, r3, #1
 8018778:	9b07      	ldr	r3, [sp, #28]
 801877a:	42b3      	cmp	r3, r6
 801877c:	bfbf      	itttt	lt
 801877e:	9b07      	ldrlt	r3, [sp, #28]
 8018780:	9607      	strlt	r6, [sp, #28]
 8018782:	1af2      	sublt	r2, r6, r3
 8018784:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018786:	bfb6      	itet	lt
 8018788:	189b      	addlt	r3, r3, r2
 801878a:	1b9e      	subge	r6, r3, r6
 801878c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801878e:	9b03      	ldr	r3, [sp, #12]
 8018790:	bfb8      	it	lt
 8018792:	2600      	movlt	r6, #0
 8018794:	2b00      	cmp	r3, #0
 8018796:	bfb7      	itett	lt
 8018798:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801879c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80187a0:	1a9d      	sublt	r5, r3, r2
 80187a2:	2300      	movlt	r3, #0
 80187a4:	e734      	b.n	8018610 <_dtoa_r+0x720>
 80187a6:	9e07      	ldr	r6, [sp, #28]
 80187a8:	9d04      	ldr	r5, [sp, #16]
 80187aa:	9f08      	ldr	r7, [sp, #32]
 80187ac:	e73b      	b.n	8018626 <_dtoa_r+0x736>
 80187ae:	9a07      	ldr	r2, [sp, #28]
 80187b0:	e767      	b.n	8018682 <_dtoa_r+0x792>
 80187b2:	9b06      	ldr	r3, [sp, #24]
 80187b4:	2b01      	cmp	r3, #1
 80187b6:	dc18      	bgt.n	80187ea <_dtoa_r+0x8fa>
 80187b8:	f1ba 0f00 	cmp.w	sl, #0
 80187bc:	d115      	bne.n	80187ea <_dtoa_r+0x8fa>
 80187be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80187c2:	b993      	cbnz	r3, 80187ea <_dtoa_r+0x8fa>
 80187c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80187c8:	0d1b      	lsrs	r3, r3, #20
 80187ca:	051b      	lsls	r3, r3, #20
 80187cc:	b183      	cbz	r3, 80187f0 <_dtoa_r+0x900>
 80187ce:	9b04      	ldr	r3, [sp, #16]
 80187d0:	3301      	adds	r3, #1
 80187d2:	9304      	str	r3, [sp, #16]
 80187d4:	9b05      	ldr	r3, [sp, #20]
 80187d6:	3301      	adds	r3, #1
 80187d8:	9305      	str	r3, [sp, #20]
 80187da:	f04f 0801 	mov.w	r8, #1
 80187de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	f47f af6a 	bne.w	80186ba <_dtoa_r+0x7ca>
 80187e6:	2001      	movs	r0, #1
 80187e8:	e76f      	b.n	80186ca <_dtoa_r+0x7da>
 80187ea:	f04f 0800 	mov.w	r8, #0
 80187ee:	e7f6      	b.n	80187de <_dtoa_r+0x8ee>
 80187f0:	4698      	mov	r8, r3
 80187f2:	e7f4      	b.n	80187de <_dtoa_r+0x8ee>
 80187f4:	f43f af7d 	beq.w	80186f2 <_dtoa_r+0x802>
 80187f8:	4618      	mov	r0, r3
 80187fa:	301c      	adds	r0, #28
 80187fc:	e772      	b.n	80186e4 <_dtoa_r+0x7f4>
 80187fe:	9b03      	ldr	r3, [sp, #12]
 8018800:	2b00      	cmp	r3, #0
 8018802:	dc37      	bgt.n	8018874 <_dtoa_r+0x984>
 8018804:	9b06      	ldr	r3, [sp, #24]
 8018806:	2b02      	cmp	r3, #2
 8018808:	dd34      	ble.n	8018874 <_dtoa_r+0x984>
 801880a:	9b03      	ldr	r3, [sp, #12]
 801880c:	9302      	str	r3, [sp, #8]
 801880e:	9b02      	ldr	r3, [sp, #8]
 8018810:	b96b      	cbnz	r3, 801882e <_dtoa_r+0x93e>
 8018812:	4631      	mov	r1, r6
 8018814:	2205      	movs	r2, #5
 8018816:	4620      	mov	r0, r4
 8018818:	f000 fd5a 	bl	80192d0 <__multadd>
 801881c:	4601      	mov	r1, r0
 801881e:	4606      	mov	r6, r0
 8018820:	ee18 0a10 	vmov	r0, s16
 8018824:	f000 ffbe 	bl	80197a4 <__mcmp>
 8018828:	2800      	cmp	r0, #0
 801882a:	f73f adbb 	bgt.w	80183a4 <_dtoa_r+0x4b4>
 801882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018830:	9d01      	ldr	r5, [sp, #4]
 8018832:	43db      	mvns	r3, r3
 8018834:	9300      	str	r3, [sp, #0]
 8018836:	f04f 0800 	mov.w	r8, #0
 801883a:	4631      	mov	r1, r6
 801883c:	4620      	mov	r0, r4
 801883e:	f000 fd25 	bl	801928c <_Bfree>
 8018842:	2f00      	cmp	r7, #0
 8018844:	f43f aea4 	beq.w	8018590 <_dtoa_r+0x6a0>
 8018848:	f1b8 0f00 	cmp.w	r8, #0
 801884c:	d005      	beq.n	801885a <_dtoa_r+0x96a>
 801884e:	45b8      	cmp	r8, r7
 8018850:	d003      	beq.n	801885a <_dtoa_r+0x96a>
 8018852:	4641      	mov	r1, r8
 8018854:	4620      	mov	r0, r4
 8018856:	f000 fd19 	bl	801928c <_Bfree>
 801885a:	4639      	mov	r1, r7
 801885c:	4620      	mov	r0, r4
 801885e:	f000 fd15 	bl	801928c <_Bfree>
 8018862:	e695      	b.n	8018590 <_dtoa_r+0x6a0>
 8018864:	2600      	movs	r6, #0
 8018866:	4637      	mov	r7, r6
 8018868:	e7e1      	b.n	801882e <_dtoa_r+0x93e>
 801886a:	9700      	str	r7, [sp, #0]
 801886c:	4637      	mov	r7, r6
 801886e:	e599      	b.n	80183a4 <_dtoa_r+0x4b4>
 8018870:	40240000 	.word	0x40240000
 8018874:	9b08      	ldr	r3, [sp, #32]
 8018876:	2b00      	cmp	r3, #0
 8018878:	f000 80ca 	beq.w	8018a10 <_dtoa_r+0xb20>
 801887c:	9b03      	ldr	r3, [sp, #12]
 801887e:	9302      	str	r3, [sp, #8]
 8018880:	2d00      	cmp	r5, #0
 8018882:	dd05      	ble.n	8018890 <_dtoa_r+0x9a0>
 8018884:	4639      	mov	r1, r7
 8018886:	462a      	mov	r2, r5
 8018888:	4620      	mov	r0, r4
 801888a:	f000 ff1b 	bl	80196c4 <__lshift>
 801888e:	4607      	mov	r7, r0
 8018890:	f1b8 0f00 	cmp.w	r8, #0
 8018894:	d05b      	beq.n	801894e <_dtoa_r+0xa5e>
 8018896:	6879      	ldr	r1, [r7, #4]
 8018898:	4620      	mov	r0, r4
 801889a:	f000 fcb7 	bl	801920c <_Balloc>
 801889e:	4605      	mov	r5, r0
 80188a0:	b928      	cbnz	r0, 80188ae <_dtoa_r+0x9be>
 80188a2:	4b87      	ldr	r3, [pc, #540]	; (8018ac0 <_dtoa_r+0xbd0>)
 80188a4:	4602      	mov	r2, r0
 80188a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80188aa:	f7ff bb3b 	b.w	8017f24 <_dtoa_r+0x34>
 80188ae:	693a      	ldr	r2, [r7, #16]
 80188b0:	3202      	adds	r2, #2
 80188b2:	0092      	lsls	r2, r2, #2
 80188b4:	f107 010c 	add.w	r1, r7, #12
 80188b8:	300c      	adds	r0, #12
 80188ba:	f7fd fc83 	bl	80161c4 <memcpy>
 80188be:	2201      	movs	r2, #1
 80188c0:	4629      	mov	r1, r5
 80188c2:	4620      	mov	r0, r4
 80188c4:	f000 fefe 	bl	80196c4 <__lshift>
 80188c8:	9b01      	ldr	r3, [sp, #4]
 80188ca:	f103 0901 	add.w	r9, r3, #1
 80188ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80188d2:	4413      	add	r3, r2
 80188d4:	9305      	str	r3, [sp, #20]
 80188d6:	f00a 0301 	and.w	r3, sl, #1
 80188da:	46b8      	mov	r8, r7
 80188dc:	9304      	str	r3, [sp, #16]
 80188de:	4607      	mov	r7, r0
 80188e0:	4631      	mov	r1, r6
 80188e2:	ee18 0a10 	vmov	r0, s16
 80188e6:	f7ff fa75 	bl	8017dd4 <quorem>
 80188ea:	4641      	mov	r1, r8
 80188ec:	9002      	str	r0, [sp, #8]
 80188ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80188f2:	ee18 0a10 	vmov	r0, s16
 80188f6:	f000 ff55 	bl	80197a4 <__mcmp>
 80188fa:	463a      	mov	r2, r7
 80188fc:	9003      	str	r0, [sp, #12]
 80188fe:	4631      	mov	r1, r6
 8018900:	4620      	mov	r0, r4
 8018902:	f000 ff6b 	bl	80197dc <__mdiff>
 8018906:	68c2      	ldr	r2, [r0, #12]
 8018908:	f109 3bff 	add.w	fp, r9, #4294967295
 801890c:	4605      	mov	r5, r0
 801890e:	bb02      	cbnz	r2, 8018952 <_dtoa_r+0xa62>
 8018910:	4601      	mov	r1, r0
 8018912:	ee18 0a10 	vmov	r0, s16
 8018916:	f000 ff45 	bl	80197a4 <__mcmp>
 801891a:	4602      	mov	r2, r0
 801891c:	4629      	mov	r1, r5
 801891e:	4620      	mov	r0, r4
 8018920:	9207      	str	r2, [sp, #28]
 8018922:	f000 fcb3 	bl	801928c <_Bfree>
 8018926:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801892a:	ea43 0102 	orr.w	r1, r3, r2
 801892e:	9b04      	ldr	r3, [sp, #16]
 8018930:	430b      	orrs	r3, r1
 8018932:	464d      	mov	r5, r9
 8018934:	d10f      	bne.n	8018956 <_dtoa_r+0xa66>
 8018936:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801893a:	d02a      	beq.n	8018992 <_dtoa_r+0xaa2>
 801893c:	9b03      	ldr	r3, [sp, #12]
 801893e:	2b00      	cmp	r3, #0
 8018940:	dd02      	ble.n	8018948 <_dtoa_r+0xa58>
 8018942:	9b02      	ldr	r3, [sp, #8]
 8018944:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018948:	f88b a000 	strb.w	sl, [fp]
 801894c:	e775      	b.n	801883a <_dtoa_r+0x94a>
 801894e:	4638      	mov	r0, r7
 8018950:	e7ba      	b.n	80188c8 <_dtoa_r+0x9d8>
 8018952:	2201      	movs	r2, #1
 8018954:	e7e2      	b.n	801891c <_dtoa_r+0xa2c>
 8018956:	9b03      	ldr	r3, [sp, #12]
 8018958:	2b00      	cmp	r3, #0
 801895a:	db04      	blt.n	8018966 <_dtoa_r+0xa76>
 801895c:	9906      	ldr	r1, [sp, #24]
 801895e:	430b      	orrs	r3, r1
 8018960:	9904      	ldr	r1, [sp, #16]
 8018962:	430b      	orrs	r3, r1
 8018964:	d122      	bne.n	80189ac <_dtoa_r+0xabc>
 8018966:	2a00      	cmp	r2, #0
 8018968:	ddee      	ble.n	8018948 <_dtoa_r+0xa58>
 801896a:	ee18 1a10 	vmov	r1, s16
 801896e:	2201      	movs	r2, #1
 8018970:	4620      	mov	r0, r4
 8018972:	f000 fea7 	bl	80196c4 <__lshift>
 8018976:	4631      	mov	r1, r6
 8018978:	ee08 0a10 	vmov	s16, r0
 801897c:	f000 ff12 	bl	80197a4 <__mcmp>
 8018980:	2800      	cmp	r0, #0
 8018982:	dc03      	bgt.n	801898c <_dtoa_r+0xa9c>
 8018984:	d1e0      	bne.n	8018948 <_dtoa_r+0xa58>
 8018986:	f01a 0f01 	tst.w	sl, #1
 801898a:	d0dd      	beq.n	8018948 <_dtoa_r+0xa58>
 801898c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018990:	d1d7      	bne.n	8018942 <_dtoa_r+0xa52>
 8018992:	2339      	movs	r3, #57	; 0x39
 8018994:	f88b 3000 	strb.w	r3, [fp]
 8018998:	462b      	mov	r3, r5
 801899a:	461d      	mov	r5, r3
 801899c:	3b01      	subs	r3, #1
 801899e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80189a2:	2a39      	cmp	r2, #57	; 0x39
 80189a4:	d071      	beq.n	8018a8a <_dtoa_r+0xb9a>
 80189a6:	3201      	adds	r2, #1
 80189a8:	701a      	strb	r2, [r3, #0]
 80189aa:	e746      	b.n	801883a <_dtoa_r+0x94a>
 80189ac:	2a00      	cmp	r2, #0
 80189ae:	dd07      	ble.n	80189c0 <_dtoa_r+0xad0>
 80189b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80189b4:	d0ed      	beq.n	8018992 <_dtoa_r+0xaa2>
 80189b6:	f10a 0301 	add.w	r3, sl, #1
 80189ba:	f88b 3000 	strb.w	r3, [fp]
 80189be:	e73c      	b.n	801883a <_dtoa_r+0x94a>
 80189c0:	9b05      	ldr	r3, [sp, #20]
 80189c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80189c6:	4599      	cmp	r9, r3
 80189c8:	d047      	beq.n	8018a5a <_dtoa_r+0xb6a>
 80189ca:	ee18 1a10 	vmov	r1, s16
 80189ce:	2300      	movs	r3, #0
 80189d0:	220a      	movs	r2, #10
 80189d2:	4620      	mov	r0, r4
 80189d4:	f000 fc7c 	bl	80192d0 <__multadd>
 80189d8:	45b8      	cmp	r8, r7
 80189da:	ee08 0a10 	vmov	s16, r0
 80189de:	f04f 0300 	mov.w	r3, #0
 80189e2:	f04f 020a 	mov.w	r2, #10
 80189e6:	4641      	mov	r1, r8
 80189e8:	4620      	mov	r0, r4
 80189ea:	d106      	bne.n	80189fa <_dtoa_r+0xb0a>
 80189ec:	f000 fc70 	bl	80192d0 <__multadd>
 80189f0:	4680      	mov	r8, r0
 80189f2:	4607      	mov	r7, r0
 80189f4:	f109 0901 	add.w	r9, r9, #1
 80189f8:	e772      	b.n	80188e0 <_dtoa_r+0x9f0>
 80189fa:	f000 fc69 	bl	80192d0 <__multadd>
 80189fe:	4639      	mov	r1, r7
 8018a00:	4680      	mov	r8, r0
 8018a02:	2300      	movs	r3, #0
 8018a04:	220a      	movs	r2, #10
 8018a06:	4620      	mov	r0, r4
 8018a08:	f000 fc62 	bl	80192d0 <__multadd>
 8018a0c:	4607      	mov	r7, r0
 8018a0e:	e7f1      	b.n	80189f4 <_dtoa_r+0xb04>
 8018a10:	9b03      	ldr	r3, [sp, #12]
 8018a12:	9302      	str	r3, [sp, #8]
 8018a14:	9d01      	ldr	r5, [sp, #4]
 8018a16:	ee18 0a10 	vmov	r0, s16
 8018a1a:	4631      	mov	r1, r6
 8018a1c:	f7ff f9da 	bl	8017dd4 <quorem>
 8018a20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018a24:	9b01      	ldr	r3, [sp, #4]
 8018a26:	f805 ab01 	strb.w	sl, [r5], #1
 8018a2a:	1aea      	subs	r2, r5, r3
 8018a2c:	9b02      	ldr	r3, [sp, #8]
 8018a2e:	4293      	cmp	r3, r2
 8018a30:	dd09      	ble.n	8018a46 <_dtoa_r+0xb56>
 8018a32:	ee18 1a10 	vmov	r1, s16
 8018a36:	2300      	movs	r3, #0
 8018a38:	220a      	movs	r2, #10
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f000 fc48 	bl	80192d0 <__multadd>
 8018a40:	ee08 0a10 	vmov	s16, r0
 8018a44:	e7e7      	b.n	8018a16 <_dtoa_r+0xb26>
 8018a46:	9b02      	ldr	r3, [sp, #8]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	bfc8      	it	gt
 8018a4c:	461d      	movgt	r5, r3
 8018a4e:	9b01      	ldr	r3, [sp, #4]
 8018a50:	bfd8      	it	le
 8018a52:	2501      	movle	r5, #1
 8018a54:	441d      	add	r5, r3
 8018a56:	f04f 0800 	mov.w	r8, #0
 8018a5a:	ee18 1a10 	vmov	r1, s16
 8018a5e:	2201      	movs	r2, #1
 8018a60:	4620      	mov	r0, r4
 8018a62:	f000 fe2f 	bl	80196c4 <__lshift>
 8018a66:	4631      	mov	r1, r6
 8018a68:	ee08 0a10 	vmov	s16, r0
 8018a6c:	f000 fe9a 	bl	80197a4 <__mcmp>
 8018a70:	2800      	cmp	r0, #0
 8018a72:	dc91      	bgt.n	8018998 <_dtoa_r+0xaa8>
 8018a74:	d102      	bne.n	8018a7c <_dtoa_r+0xb8c>
 8018a76:	f01a 0f01 	tst.w	sl, #1
 8018a7a:	d18d      	bne.n	8018998 <_dtoa_r+0xaa8>
 8018a7c:	462b      	mov	r3, r5
 8018a7e:	461d      	mov	r5, r3
 8018a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a84:	2a30      	cmp	r2, #48	; 0x30
 8018a86:	d0fa      	beq.n	8018a7e <_dtoa_r+0xb8e>
 8018a88:	e6d7      	b.n	801883a <_dtoa_r+0x94a>
 8018a8a:	9a01      	ldr	r2, [sp, #4]
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d184      	bne.n	801899a <_dtoa_r+0xaaa>
 8018a90:	9b00      	ldr	r3, [sp, #0]
 8018a92:	3301      	adds	r3, #1
 8018a94:	9300      	str	r3, [sp, #0]
 8018a96:	2331      	movs	r3, #49	; 0x31
 8018a98:	7013      	strb	r3, [r2, #0]
 8018a9a:	e6ce      	b.n	801883a <_dtoa_r+0x94a>
 8018a9c:	4b09      	ldr	r3, [pc, #36]	; (8018ac4 <_dtoa_r+0xbd4>)
 8018a9e:	f7ff ba95 	b.w	8017fcc <_dtoa_r+0xdc>
 8018aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	f47f aa6e 	bne.w	8017f86 <_dtoa_r+0x96>
 8018aaa:	4b07      	ldr	r3, [pc, #28]	; (8018ac8 <_dtoa_r+0xbd8>)
 8018aac:	f7ff ba8e 	b.w	8017fcc <_dtoa_r+0xdc>
 8018ab0:	9b02      	ldr	r3, [sp, #8]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	dcae      	bgt.n	8018a14 <_dtoa_r+0xb24>
 8018ab6:	9b06      	ldr	r3, [sp, #24]
 8018ab8:	2b02      	cmp	r3, #2
 8018aba:	f73f aea8 	bgt.w	801880e <_dtoa_r+0x91e>
 8018abe:	e7a9      	b.n	8018a14 <_dtoa_r+0xb24>
 8018ac0:	0801bd08 	.word	0x0801bd08
 8018ac4:	0801bf01 	.word	0x0801bf01
 8018ac8:	0801bc89 	.word	0x0801bc89

08018acc <rshift>:
 8018acc:	6903      	ldr	r3, [r0, #16]
 8018ace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018ada:	f100 0414 	add.w	r4, r0, #20
 8018ade:	dd45      	ble.n	8018b6c <rshift+0xa0>
 8018ae0:	f011 011f 	ands.w	r1, r1, #31
 8018ae4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018ae8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018aec:	d10c      	bne.n	8018b08 <rshift+0x3c>
 8018aee:	f100 0710 	add.w	r7, r0, #16
 8018af2:	4629      	mov	r1, r5
 8018af4:	42b1      	cmp	r1, r6
 8018af6:	d334      	bcc.n	8018b62 <rshift+0x96>
 8018af8:	1a9b      	subs	r3, r3, r2
 8018afa:	009b      	lsls	r3, r3, #2
 8018afc:	1eea      	subs	r2, r5, #3
 8018afe:	4296      	cmp	r6, r2
 8018b00:	bf38      	it	cc
 8018b02:	2300      	movcc	r3, #0
 8018b04:	4423      	add	r3, r4
 8018b06:	e015      	b.n	8018b34 <rshift+0x68>
 8018b08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018b0c:	f1c1 0820 	rsb	r8, r1, #32
 8018b10:	40cf      	lsrs	r7, r1
 8018b12:	f105 0e04 	add.w	lr, r5, #4
 8018b16:	46a1      	mov	r9, r4
 8018b18:	4576      	cmp	r6, lr
 8018b1a:	46f4      	mov	ip, lr
 8018b1c:	d815      	bhi.n	8018b4a <rshift+0x7e>
 8018b1e:	1a9a      	subs	r2, r3, r2
 8018b20:	0092      	lsls	r2, r2, #2
 8018b22:	3a04      	subs	r2, #4
 8018b24:	3501      	adds	r5, #1
 8018b26:	42ae      	cmp	r6, r5
 8018b28:	bf38      	it	cc
 8018b2a:	2200      	movcc	r2, #0
 8018b2c:	18a3      	adds	r3, r4, r2
 8018b2e:	50a7      	str	r7, [r4, r2]
 8018b30:	b107      	cbz	r7, 8018b34 <rshift+0x68>
 8018b32:	3304      	adds	r3, #4
 8018b34:	1b1a      	subs	r2, r3, r4
 8018b36:	42a3      	cmp	r3, r4
 8018b38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018b3c:	bf08      	it	eq
 8018b3e:	2300      	moveq	r3, #0
 8018b40:	6102      	str	r2, [r0, #16]
 8018b42:	bf08      	it	eq
 8018b44:	6143      	streq	r3, [r0, #20]
 8018b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b4a:	f8dc c000 	ldr.w	ip, [ip]
 8018b4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018b52:	ea4c 0707 	orr.w	r7, ip, r7
 8018b56:	f849 7b04 	str.w	r7, [r9], #4
 8018b5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018b5e:	40cf      	lsrs	r7, r1
 8018b60:	e7da      	b.n	8018b18 <rshift+0x4c>
 8018b62:	f851 cb04 	ldr.w	ip, [r1], #4
 8018b66:	f847 cf04 	str.w	ip, [r7, #4]!
 8018b6a:	e7c3      	b.n	8018af4 <rshift+0x28>
 8018b6c:	4623      	mov	r3, r4
 8018b6e:	e7e1      	b.n	8018b34 <rshift+0x68>

08018b70 <__hexdig_fun>:
 8018b70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018b74:	2b09      	cmp	r3, #9
 8018b76:	d802      	bhi.n	8018b7e <__hexdig_fun+0xe>
 8018b78:	3820      	subs	r0, #32
 8018b7a:	b2c0      	uxtb	r0, r0
 8018b7c:	4770      	bx	lr
 8018b7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018b82:	2b05      	cmp	r3, #5
 8018b84:	d801      	bhi.n	8018b8a <__hexdig_fun+0x1a>
 8018b86:	3847      	subs	r0, #71	; 0x47
 8018b88:	e7f7      	b.n	8018b7a <__hexdig_fun+0xa>
 8018b8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018b8e:	2b05      	cmp	r3, #5
 8018b90:	d801      	bhi.n	8018b96 <__hexdig_fun+0x26>
 8018b92:	3827      	subs	r0, #39	; 0x27
 8018b94:	e7f1      	b.n	8018b7a <__hexdig_fun+0xa>
 8018b96:	2000      	movs	r0, #0
 8018b98:	4770      	bx	lr
	...

08018b9c <__gethex>:
 8018b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ba0:	ed2d 8b02 	vpush	{d8}
 8018ba4:	b089      	sub	sp, #36	; 0x24
 8018ba6:	ee08 0a10 	vmov	s16, r0
 8018baa:	9304      	str	r3, [sp, #16]
 8018bac:	4bb4      	ldr	r3, [pc, #720]	; (8018e80 <__gethex+0x2e4>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	9301      	str	r3, [sp, #4]
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	468b      	mov	fp, r1
 8018bb6:	4690      	mov	r8, r2
 8018bb8:	f7e7 fb1c 	bl	80001f4 <strlen>
 8018bbc:	9b01      	ldr	r3, [sp, #4]
 8018bbe:	f8db 2000 	ldr.w	r2, [fp]
 8018bc2:	4403      	add	r3, r0
 8018bc4:	4682      	mov	sl, r0
 8018bc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018bca:	9305      	str	r3, [sp, #20]
 8018bcc:	1c93      	adds	r3, r2, #2
 8018bce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018bd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018bd6:	32fe      	adds	r2, #254	; 0xfe
 8018bd8:	18d1      	adds	r1, r2, r3
 8018bda:	461f      	mov	r7, r3
 8018bdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018be0:	9100      	str	r1, [sp, #0]
 8018be2:	2830      	cmp	r0, #48	; 0x30
 8018be4:	d0f8      	beq.n	8018bd8 <__gethex+0x3c>
 8018be6:	f7ff ffc3 	bl	8018b70 <__hexdig_fun>
 8018bea:	4604      	mov	r4, r0
 8018bec:	2800      	cmp	r0, #0
 8018bee:	d13a      	bne.n	8018c66 <__gethex+0xca>
 8018bf0:	9901      	ldr	r1, [sp, #4]
 8018bf2:	4652      	mov	r2, sl
 8018bf4:	4638      	mov	r0, r7
 8018bf6:	f001 fda3 	bl	801a740 <strncmp>
 8018bfa:	4605      	mov	r5, r0
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	d168      	bne.n	8018cd2 <__gethex+0x136>
 8018c00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018c04:	eb07 060a 	add.w	r6, r7, sl
 8018c08:	f7ff ffb2 	bl	8018b70 <__hexdig_fun>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	d062      	beq.n	8018cd6 <__gethex+0x13a>
 8018c10:	4633      	mov	r3, r6
 8018c12:	7818      	ldrb	r0, [r3, #0]
 8018c14:	2830      	cmp	r0, #48	; 0x30
 8018c16:	461f      	mov	r7, r3
 8018c18:	f103 0301 	add.w	r3, r3, #1
 8018c1c:	d0f9      	beq.n	8018c12 <__gethex+0x76>
 8018c1e:	f7ff ffa7 	bl	8018b70 <__hexdig_fun>
 8018c22:	2301      	movs	r3, #1
 8018c24:	fab0 f480 	clz	r4, r0
 8018c28:	0964      	lsrs	r4, r4, #5
 8018c2a:	4635      	mov	r5, r6
 8018c2c:	9300      	str	r3, [sp, #0]
 8018c2e:	463a      	mov	r2, r7
 8018c30:	4616      	mov	r6, r2
 8018c32:	3201      	adds	r2, #1
 8018c34:	7830      	ldrb	r0, [r6, #0]
 8018c36:	f7ff ff9b 	bl	8018b70 <__hexdig_fun>
 8018c3a:	2800      	cmp	r0, #0
 8018c3c:	d1f8      	bne.n	8018c30 <__gethex+0x94>
 8018c3e:	9901      	ldr	r1, [sp, #4]
 8018c40:	4652      	mov	r2, sl
 8018c42:	4630      	mov	r0, r6
 8018c44:	f001 fd7c 	bl	801a740 <strncmp>
 8018c48:	b980      	cbnz	r0, 8018c6c <__gethex+0xd0>
 8018c4a:	b94d      	cbnz	r5, 8018c60 <__gethex+0xc4>
 8018c4c:	eb06 050a 	add.w	r5, r6, sl
 8018c50:	462a      	mov	r2, r5
 8018c52:	4616      	mov	r6, r2
 8018c54:	3201      	adds	r2, #1
 8018c56:	7830      	ldrb	r0, [r6, #0]
 8018c58:	f7ff ff8a 	bl	8018b70 <__hexdig_fun>
 8018c5c:	2800      	cmp	r0, #0
 8018c5e:	d1f8      	bne.n	8018c52 <__gethex+0xb6>
 8018c60:	1bad      	subs	r5, r5, r6
 8018c62:	00ad      	lsls	r5, r5, #2
 8018c64:	e004      	b.n	8018c70 <__gethex+0xd4>
 8018c66:	2400      	movs	r4, #0
 8018c68:	4625      	mov	r5, r4
 8018c6a:	e7e0      	b.n	8018c2e <__gethex+0x92>
 8018c6c:	2d00      	cmp	r5, #0
 8018c6e:	d1f7      	bne.n	8018c60 <__gethex+0xc4>
 8018c70:	7833      	ldrb	r3, [r6, #0]
 8018c72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018c76:	2b50      	cmp	r3, #80	; 0x50
 8018c78:	d13b      	bne.n	8018cf2 <__gethex+0x156>
 8018c7a:	7873      	ldrb	r3, [r6, #1]
 8018c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8018c7e:	d02c      	beq.n	8018cda <__gethex+0x13e>
 8018c80:	2b2d      	cmp	r3, #45	; 0x2d
 8018c82:	d02e      	beq.n	8018ce2 <__gethex+0x146>
 8018c84:	1c71      	adds	r1, r6, #1
 8018c86:	f04f 0900 	mov.w	r9, #0
 8018c8a:	7808      	ldrb	r0, [r1, #0]
 8018c8c:	f7ff ff70 	bl	8018b70 <__hexdig_fun>
 8018c90:	1e43      	subs	r3, r0, #1
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	2b18      	cmp	r3, #24
 8018c96:	d82c      	bhi.n	8018cf2 <__gethex+0x156>
 8018c98:	f1a0 0210 	sub.w	r2, r0, #16
 8018c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018ca0:	f7ff ff66 	bl	8018b70 <__hexdig_fun>
 8018ca4:	1e43      	subs	r3, r0, #1
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	2b18      	cmp	r3, #24
 8018caa:	d91d      	bls.n	8018ce8 <__gethex+0x14c>
 8018cac:	f1b9 0f00 	cmp.w	r9, #0
 8018cb0:	d000      	beq.n	8018cb4 <__gethex+0x118>
 8018cb2:	4252      	negs	r2, r2
 8018cb4:	4415      	add	r5, r2
 8018cb6:	f8cb 1000 	str.w	r1, [fp]
 8018cba:	b1e4      	cbz	r4, 8018cf6 <__gethex+0x15a>
 8018cbc:	9b00      	ldr	r3, [sp, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	bf14      	ite	ne
 8018cc2:	2700      	movne	r7, #0
 8018cc4:	2706      	moveq	r7, #6
 8018cc6:	4638      	mov	r0, r7
 8018cc8:	b009      	add	sp, #36	; 0x24
 8018cca:	ecbd 8b02 	vpop	{d8}
 8018cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd2:	463e      	mov	r6, r7
 8018cd4:	4625      	mov	r5, r4
 8018cd6:	2401      	movs	r4, #1
 8018cd8:	e7ca      	b.n	8018c70 <__gethex+0xd4>
 8018cda:	f04f 0900 	mov.w	r9, #0
 8018cde:	1cb1      	adds	r1, r6, #2
 8018ce0:	e7d3      	b.n	8018c8a <__gethex+0xee>
 8018ce2:	f04f 0901 	mov.w	r9, #1
 8018ce6:	e7fa      	b.n	8018cde <__gethex+0x142>
 8018ce8:	230a      	movs	r3, #10
 8018cea:	fb03 0202 	mla	r2, r3, r2, r0
 8018cee:	3a10      	subs	r2, #16
 8018cf0:	e7d4      	b.n	8018c9c <__gethex+0x100>
 8018cf2:	4631      	mov	r1, r6
 8018cf4:	e7df      	b.n	8018cb6 <__gethex+0x11a>
 8018cf6:	1bf3      	subs	r3, r6, r7
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	4621      	mov	r1, r4
 8018cfc:	2b07      	cmp	r3, #7
 8018cfe:	dc0b      	bgt.n	8018d18 <__gethex+0x17c>
 8018d00:	ee18 0a10 	vmov	r0, s16
 8018d04:	f000 fa82 	bl	801920c <_Balloc>
 8018d08:	4604      	mov	r4, r0
 8018d0a:	b940      	cbnz	r0, 8018d1e <__gethex+0x182>
 8018d0c:	4b5d      	ldr	r3, [pc, #372]	; (8018e84 <__gethex+0x2e8>)
 8018d0e:	4602      	mov	r2, r0
 8018d10:	21de      	movs	r1, #222	; 0xde
 8018d12:	485d      	ldr	r0, [pc, #372]	; (8018e88 <__gethex+0x2ec>)
 8018d14:	f001 fde4 	bl	801a8e0 <__assert_func>
 8018d18:	3101      	adds	r1, #1
 8018d1a:	105b      	asrs	r3, r3, #1
 8018d1c:	e7ee      	b.n	8018cfc <__gethex+0x160>
 8018d1e:	f100 0914 	add.w	r9, r0, #20
 8018d22:	f04f 0b00 	mov.w	fp, #0
 8018d26:	f1ca 0301 	rsb	r3, sl, #1
 8018d2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8018d2e:	f8cd b000 	str.w	fp, [sp]
 8018d32:	9306      	str	r3, [sp, #24]
 8018d34:	42b7      	cmp	r7, r6
 8018d36:	d340      	bcc.n	8018dba <__gethex+0x21e>
 8018d38:	9802      	ldr	r0, [sp, #8]
 8018d3a:	9b00      	ldr	r3, [sp, #0]
 8018d3c:	f840 3b04 	str.w	r3, [r0], #4
 8018d40:	eba0 0009 	sub.w	r0, r0, r9
 8018d44:	1080      	asrs	r0, r0, #2
 8018d46:	0146      	lsls	r6, r0, #5
 8018d48:	6120      	str	r0, [r4, #16]
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f000 fb50 	bl	80193f0 <__hi0bits>
 8018d50:	1a30      	subs	r0, r6, r0
 8018d52:	f8d8 6000 	ldr.w	r6, [r8]
 8018d56:	42b0      	cmp	r0, r6
 8018d58:	dd63      	ble.n	8018e22 <__gethex+0x286>
 8018d5a:	1b87      	subs	r7, r0, r6
 8018d5c:	4639      	mov	r1, r7
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f000 fef4 	bl	8019b4c <__any_on>
 8018d64:	4682      	mov	sl, r0
 8018d66:	b1a8      	cbz	r0, 8018d94 <__gethex+0x1f8>
 8018d68:	1e7b      	subs	r3, r7, #1
 8018d6a:	1159      	asrs	r1, r3, #5
 8018d6c:	f003 021f 	and.w	r2, r3, #31
 8018d70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018d74:	f04f 0a01 	mov.w	sl, #1
 8018d78:	fa0a f202 	lsl.w	r2, sl, r2
 8018d7c:	420a      	tst	r2, r1
 8018d7e:	d009      	beq.n	8018d94 <__gethex+0x1f8>
 8018d80:	4553      	cmp	r3, sl
 8018d82:	dd05      	ble.n	8018d90 <__gethex+0x1f4>
 8018d84:	1eb9      	subs	r1, r7, #2
 8018d86:	4620      	mov	r0, r4
 8018d88:	f000 fee0 	bl	8019b4c <__any_on>
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	d145      	bne.n	8018e1c <__gethex+0x280>
 8018d90:	f04f 0a02 	mov.w	sl, #2
 8018d94:	4639      	mov	r1, r7
 8018d96:	4620      	mov	r0, r4
 8018d98:	f7ff fe98 	bl	8018acc <rshift>
 8018d9c:	443d      	add	r5, r7
 8018d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018da2:	42ab      	cmp	r3, r5
 8018da4:	da4c      	bge.n	8018e40 <__gethex+0x2a4>
 8018da6:	ee18 0a10 	vmov	r0, s16
 8018daa:	4621      	mov	r1, r4
 8018dac:	f000 fa6e 	bl	801928c <_Bfree>
 8018db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018db2:	2300      	movs	r3, #0
 8018db4:	6013      	str	r3, [r2, #0]
 8018db6:	27a3      	movs	r7, #163	; 0xa3
 8018db8:	e785      	b.n	8018cc6 <__gethex+0x12a>
 8018dba:	1e73      	subs	r3, r6, #1
 8018dbc:	9a05      	ldr	r2, [sp, #20]
 8018dbe:	9303      	str	r3, [sp, #12]
 8018dc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018dc4:	4293      	cmp	r3, r2
 8018dc6:	d019      	beq.n	8018dfc <__gethex+0x260>
 8018dc8:	f1bb 0f20 	cmp.w	fp, #32
 8018dcc:	d107      	bne.n	8018dde <__gethex+0x242>
 8018dce:	9b02      	ldr	r3, [sp, #8]
 8018dd0:	9a00      	ldr	r2, [sp, #0]
 8018dd2:	f843 2b04 	str.w	r2, [r3], #4
 8018dd6:	9302      	str	r3, [sp, #8]
 8018dd8:	2300      	movs	r3, #0
 8018dda:	9300      	str	r3, [sp, #0]
 8018ddc:	469b      	mov	fp, r3
 8018dde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018de2:	f7ff fec5 	bl	8018b70 <__hexdig_fun>
 8018de6:	9b00      	ldr	r3, [sp, #0]
 8018de8:	f000 000f 	and.w	r0, r0, #15
 8018dec:	fa00 f00b 	lsl.w	r0, r0, fp
 8018df0:	4303      	orrs	r3, r0
 8018df2:	9300      	str	r3, [sp, #0]
 8018df4:	f10b 0b04 	add.w	fp, fp, #4
 8018df8:	9b03      	ldr	r3, [sp, #12]
 8018dfa:	e00d      	b.n	8018e18 <__gethex+0x27c>
 8018dfc:	9b03      	ldr	r3, [sp, #12]
 8018dfe:	9a06      	ldr	r2, [sp, #24]
 8018e00:	4413      	add	r3, r2
 8018e02:	42bb      	cmp	r3, r7
 8018e04:	d3e0      	bcc.n	8018dc8 <__gethex+0x22c>
 8018e06:	4618      	mov	r0, r3
 8018e08:	9901      	ldr	r1, [sp, #4]
 8018e0a:	9307      	str	r3, [sp, #28]
 8018e0c:	4652      	mov	r2, sl
 8018e0e:	f001 fc97 	bl	801a740 <strncmp>
 8018e12:	9b07      	ldr	r3, [sp, #28]
 8018e14:	2800      	cmp	r0, #0
 8018e16:	d1d7      	bne.n	8018dc8 <__gethex+0x22c>
 8018e18:	461e      	mov	r6, r3
 8018e1a:	e78b      	b.n	8018d34 <__gethex+0x198>
 8018e1c:	f04f 0a03 	mov.w	sl, #3
 8018e20:	e7b8      	b.n	8018d94 <__gethex+0x1f8>
 8018e22:	da0a      	bge.n	8018e3a <__gethex+0x29e>
 8018e24:	1a37      	subs	r7, r6, r0
 8018e26:	4621      	mov	r1, r4
 8018e28:	ee18 0a10 	vmov	r0, s16
 8018e2c:	463a      	mov	r2, r7
 8018e2e:	f000 fc49 	bl	80196c4 <__lshift>
 8018e32:	1bed      	subs	r5, r5, r7
 8018e34:	4604      	mov	r4, r0
 8018e36:	f100 0914 	add.w	r9, r0, #20
 8018e3a:	f04f 0a00 	mov.w	sl, #0
 8018e3e:	e7ae      	b.n	8018d9e <__gethex+0x202>
 8018e40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e44:	42a8      	cmp	r0, r5
 8018e46:	dd72      	ble.n	8018f2e <__gethex+0x392>
 8018e48:	1b45      	subs	r5, r0, r5
 8018e4a:	42ae      	cmp	r6, r5
 8018e4c:	dc36      	bgt.n	8018ebc <__gethex+0x320>
 8018e4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e52:	2b02      	cmp	r3, #2
 8018e54:	d02a      	beq.n	8018eac <__gethex+0x310>
 8018e56:	2b03      	cmp	r3, #3
 8018e58:	d02c      	beq.n	8018eb4 <__gethex+0x318>
 8018e5a:	2b01      	cmp	r3, #1
 8018e5c:	d11c      	bne.n	8018e98 <__gethex+0x2fc>
 8018e5e:	42ae      	cmp	r6, r5
 8018e60:	d11a      	bne.n	8018e98 <__gethex+0x2fc>
 8018e62:	2e01      	cmp	r6, #1
 8018e64:	d112      	bne.n	8018e8c <__gethex+0x2f0>
 8018e66:	9a04      	ldr	r2, [sp, #16]
 8018e68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e6c:	6013      	str	r3, [r2, #0]
 8018e6e:	2301      	movs	r3, #1
 8018e70:	6123      	str	r3, [r4, #16]
 8018e72:	f8c9 3000 	str.w	r3, [r9]
 8018e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e78:	2762      	movs	r7, #98	; 0x62
 8018e7a:	601c      	str	r4, [r3, #0]
 8018e7c:	e723      	b.n	8018cc6 <__gethex+0x12a>
 8018e7e:	bf00      	nop
 8018e80:	0801bd80 	.word	0x0801bd80
 8018e84:	0801bd08 	.word	0x0801bd08
 8018e88:	0801bd19 	.word	0x0801bd19
 8018e8c:	1e71      	subs	r1, r6, #1
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f000 fe5c 	bl	8019b4c <__any_on>
 8018e94:	2800      	cmp	r0, #0
 8018e96:	d1e6      	bne.n	8018e66 <__gethex+0x2ca>
 8018e98:	ee18 0a10 	vmov	r0, s16
 8018e9c:	4621      	mov	r1, r4
 8018e9e:	f000 f9f5 	bl	801928c <_Bfree>
 8018ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	6013      	str	r3, [r2, #0]
 8018ea8:	2750      	movs	r7, #80	; 0x50
 8018eaa:	e70c      	b.n	8018cc6 <__gethex+0x12a>
 8018eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d1f2      	bne.n	8018e98 <__gethex+0x2fc>
 8018eb2:	e7d8      	b.n	8018e66 <__gethex+0x2ca>
 8018eb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d1d5      	bne.n	8018e66 <__gethex+0x2ca>
 8018eba:	e7ed      	b.n	8018e98 <__gethex+0x2fc>
 8018ebc:	1e6f      	subs	r7, r5, #1
 8018ebe:	f1ba 0f00 	cmp.w	sl, #0
 8018ec2:	d131      	bne.n	8018f28 <__gethex+0x38c>
 8018ec4:	b127      	cbz	r7, 8018ed0 <__gethex+0x334>
 8018ec6:	4639      	mov	r1, r7
 8018ec8:	4620      	mov	r0, r4
 8018eca:	f000 fe3f 	bl	8019b4c <__any_on>
 8018ece:	4682      	mov	sl, r0
 8018ed0:	117b      	asrs	r3, r7, #5
 8018ed2:	2101      	movs	r1, #1
 8018ed4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018ed8:	f007 071f 	and.w	r7, r7, #31
 8018edc:	fa01 f707 	lsl.w	r7, r1, r7
 8018ee0:	421f      	tst	r7, r3
 8018ee2:	4629      	mov	r1, r5
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	bf18      	it	ne
 8018ee8:	f04a 0a02 	orrne.w	sl, sl, #2
 8018eec:	1b76      	subs	r6, r6, r5
 8018eee:	f7ff fded 	bl	8018acc <rshift>
 8018ef2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018ef6:	2702      	movs	r7, #2
 8018ef8:	f1ba 0f00 	cmp.w	sl, #0
 8018efc:	d048      	beq.n	8018f90 <__gethex+0x3f4>
 8018efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f02:	2b02      	cmp	r3, #2
 8018f04:	d015      	beq.n	8018f32 <__gethex+0x396>
 8018f06:	2b03      	cmp	r3, #3
 8018f08:	d017      	beq.n	8018f3a <__gethex+0x39e>
 8018f0a:	2b01      	cmp	r3, #1
 8018f0c:	d109      	bne.n	8018f22 <__gethex+0x386>
 8018f0e:	f01a 0f02 	tst.w	sl, #2
 8018f12:	d006      	beq.n	8018f22 <__gethex+0x386>
 8018f14:	f8d9 0000 	ldr.w	r0, [r9]
 8018f18:	ea4a 0a00 	orr.w	sl, sl, r0
 8018f1c:	f01a 0f01 	tst.w	sl, #1
 8018f20:	d10e      	bne.n	8018f40 <__gethex+0x3a4>
 8018f22:	f047 0710 	orr.w	r7, r7, #16
 8018f26:	e033      	b.n	8018f90 <__gethex+0x3f4>
 8018f28:	f04f 0a01 	mov.w	sl, #1
 8018f2c:	e7d0      	b.n	8018ed0 <__gethex+0x334>
 8018f2e:	2701      	movs	r7, #1
 8018f30:	e7e2      	b.n	8018ef8 <__gethex+0x35c>
 8018f32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f34:	f1c3 0301 	rsb	r3, r3, #1
 8018f38:	9315      	str	r3, [sp, #84]	; 0x54
 8018f3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d0f0      	beq.n	8018f22 <__gethex+0x386>
 8018f40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018f44:	f104 0314 	add.w	r3, r4, #20
 8018f48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018f4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018f50:	f04f 0c00 	mov.w	ip, #0
 8018f54:	4618      	mov	r0, r3
 8018f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018f5e:	d01c      	beq.n	8018f9a <__gethex+0x3fe>
 8018f60:	3201      	adds	r2, #1
 8018f62:	6002      	str	r2, [r0, #0]
 8018f64:	2f02      	cmp	r7, #2
 8018f66:	f104 0314 	add.w	r3, r4, #20
 8018f6a:	d13f      	bne.n	8018fec <__gethex+0x450>
 8018f6c:	f8d8 2000 	ldr.w	r2, [r8]
 8018f70:	3a01      	subs	r2, #1
 8018f72:	42b2      	cmp	r2, r6
 8018f74:	d10a      	bne.n	8018f8c <__gethex+0x3f0>
 8018f76:	1171      	asrs	r1, r6, #5
 8018f78:	2201      	movs	r2, #1
 8018f7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018f7e:	f006 061f 	and.w	r6, r6, #31
 8018f82:	fa02 f606 	lsl.w	r6, r2, r6
 8018f86:	421e      	tst	r6, r3
 8018f88:	bf18      	it	ne
 8018f8a:	4617      	movne	r7, r2
 8018f8c:	f047 0720 	orr.w	r7, r7, #32
 8018f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f92:	601c      	str	r4, [r3, #0]
 8018f94:	9b04      	ldr	r3, [sp, #16]
 8018f96:	601d      	str	r5, [r3, #0]
 8018f98:	e695      	b.n	8018cc6 <__gethex+0x12a>
 8018f9a:	4299      	cmp	r1, r3
 8018f9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8018fa0:	d8d8      	bhi.n	8018f54 <__gethex+0x3b8>
 8018fa2:	68a3      	ldr	r3, [r4, #8]
 8018fa4:	459b      	cmp	fp, r3
 8018fa6:	db19      	blt.n	8018fdc <__gethex+0x440>
 8018fa8:	6861      	ldr	r1, [r4, #4]
 8018faa:	ee18 0a10 	vmov	r0, s16
 8018fae:	3101      	adds	r1, #1
 8018fb0:	f000 f92c 	bl	801920c <_Balloc>
 8018fb4:	4681      	mov	r9, r0
 8018fb6:	b918      	cbnz	r0, 8018fc0 <__gethex+0x424>
 8018fb8:	4b1a      	ldr	r3, [pc, #104]	; (8019024 <__gethex+0x488>)
 8018fba:	4602      	mov	r2, r0
 8018fbc:	2184      	movs	r1, #132	; 0x84
 8018fbe:	e6a8      	b.n	8018d12 <__gethex+0x176>
 8018fc0:	6922      	ldr	r2, [r4, #16]
 8018fc2:	3202      	adds	r2, #2
 8018fc4:	f104 010c 	add.w	r1, r4, #12
 8018fc8:	0092      	lsls	r2, r2, #2
 8018fca:	300c      	adds	r0, #12
 8018fcc:	f7fd f8fa 	bl	80161c4 <memcpy>
 8018fd0:	4621      	mov	r1, r4
 8018fd2:	ee18 0a10 	vmov	r0, s16
 8018fd6:	f000 f959 	bl	801928c <_Bfree>
 8018fda:	464c      	mov	r4, r9
 8018fdc:	6923      	ldr	r3, [r4, #16]
 8018fde:	1c5a      	adds	r2, r3, #1
 8018fe0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018fe4:	6122      	str	r2, [r4, #16]
 8018fe6:	2201      	movs	r2, #1
 8018fe8:	615a      	str	r2, [r3, #20]
 8018fea:	e7bb      	b.n	8018f64 <__gethex+0x3c8>
 8018fec:	6922      	ldr	r2, [r4, #16]
 8018fee:	455a      	cmp	r2, fp
 8018ff0:	dd0b      	ble.n	801900a <__gethex+0x46e>
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	4620      	mov	r0, r4
 8018ff6:	f7ff fd69 	bl	8018acc <rshift>
 8018ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ffe:	3501      	adds	r5, #1
 8019000:	42ab      	cmp	r3, r5
 8019002:	f6ff aed0 	blt.w	8018da6 <__gethex+0x20a>
 8019006:	2701      	movs	r7, #1
 8019008:	e7c0      	b.n	8018f8c <__gethex+0x3f0>
 801900a:	f016 061f 	ands.w	r6, r6, #31
 801900e:	d0fa      	beq.n	8019006 <__gethex+0x46a>
 8019010:	4453      	add	r3, sl
 8019012:	f1c6 0620 	rsb	r6, r6, #32
 8019016:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801901a:	f000 f9e9 	bl	80193f0 <__hi0bits>
 801901e:	42b0      	cmp	r0, r6
 8019020:	dbe7      	blt.n	8018ff2 <__gethex+0x456>
 8019022:	e7f0      	b.n	8019006 <__gethex+0x46a>
 8019024:	0801bd08 	.word	0x0801bd08

08019028 <L_shift>:
 8019028:	f1c2 0208 	rsb	r2, r2, #8
 801902c:	0092      	lsls	r2, r2, #2
 801902e:	b570      	push	{r4, r5, r6, lr}
 8019030:	f1c2 0620 	rsb	r6, r2, #32
 8019034:	6843      	ldr	r3, [r0, #4]
 8019036:	6804      	ldr	r4, [r0, #0]
 8019038:	fa03 f506 	lsl.w	r5, r3, r6
 801903c:	432c      	orrs	r4, r5
 801903e:	40d3      	lsrs	r3, r2
 8019040:	6004      	str	r4, [r0, #0]
 8019042:	f840 3f04 	str.w	r3, [r0, #4]!
 8019046:	4288      	cmp	r0, r1
 8019048:	d3f4      	bcc.n	8019034 <L_shift+0xc>
 801904a:	bd70      	pop	{r4, r5, r6, pc}

0801904c <__match>:
 801904c:	b530      	push	{r4, r5, lr}
 801904e:	6803      	ldr	r3, [r0, #0]
 8019050:	3301      	adds	r3, #1
 8019052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019056:	b914      	cbnz	r4, 801905e <__match+0x12>
 8019058:	6003      	str	r3, [r0, #0]
 801905a:	2001      	movs	r0, #1
 801905c:	bd30      	pop	{r4, r5, pc}
 801905e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019062:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019066:	2d19      	cmp	r5, #25
 8019068:	bf98      	it	ls
 801906a:	3220      	addls	r2, #32
 801906c:	42a2      	cmp	r2, r4
 801906e:	d0f0      	beq.n	8019052 <__match+0x6>
 8019070:	2000      	movs	r0, #0
 8019072:	e7f3      	b.n	801905c <__match+0x10>

08019074 <__hexnan>:
 8019074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019078:	680b      	ldr	r3, [r1, #0]
 801907a:	115e      	asrs	r6, r3, #5
 801907c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019080:	f013 031f 	ands.w	r3, r3, #31
 8019084:	b087      	sub	sp, #28
 8019086:	bf18      	it	ne
 8019088:	3604      	addne	r6, #4
 801908a:	2500      	movs	r5, #0
 801908c:	1f37      	subs	r7, r6, #4
 801908e:	4690      	mov	r8, r2
 8019090:	6802      	ldr	r2, [r0, #0]
 8019092:	9301      	str	r3, [sp, #4]
 8019094:	4682      	mov	sl, r0
 8019096:	f846 5c04 	str.w	r5, [r6, #-4]
 801909a:	46b9      	mov	r9, r7
 801909c:	463c      	mov	r4, r7
 801909e:	9502      	str	r5, [sp, #8]
 80190a0:	46ab      	mov	fp, r5
 80190a2:	7851      	ldrb	r1, [r2, #1]
 80190a4:	1c53      	adds	r3, r2, #1
 80190a6:	9303      	str	r3, [sp, #12]
 80190a8:	b341      	cbz	r1, 80190fc <__hexnan+0x88>
 80190aa:	4608      	mov	r0, r1
 80190ac:	9205      	str	r2, [sp, #20]
 80190ae:	9104      	str	r1, [sp, #16]
 80190b0:	f7ff fd5e 	bl	8018b70 <__hexdig_fun>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d14f      	bne.n	8019158 <__hexnan+0xe4>
 80190b8:	9904      	ldr	r1, [sp, #16]
 80190ba:	9a05      	ldr	r2, [sp, #20]
 80190bc:	2920      	cmp	r1, #32
 80190be:	d818      	bhi.n	80190f2 <__hexnan+0x7e>
 80190c0:	9b02      	ldr	r3, [sp, #8]
 80190c2:	459b      	cmp	fp, r3
 80190c4:	dd13      	ble.n	80190ee <__hexnan+0x7a>
 80190c6:	454c      	cmp	r4, r9
 80190c8:	d206      	bcs.n	80190d8 <__hexnan+0x64>
 80190ca:	2d07      	cmp	r5, #7
 80190cc:	dc04      	bgt.n	80190d8 <__hexnan+0x64>
 80190ce:	462a      	mov	r2, r5
 80190d0:	4649      	mov	r1, r9
 80190d2:	4620      	mov	r0, r4
 80190d4:	f7ff ffa8 	bl	8019028 <L_shift>
 80190d8:	4544      	cmp	r4, r8
 80190da:	d950      	bls.n	801917e <__hexnan+0x10a>
 80190dc:	2300      	movs	r3, #0
 80190de:	f1a4 0904 	sub.w	r9, r4, #4
 80190e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80190e6:	f8cd b008 	str.w	fp, [sp, #8]
 80190ea:	464c      	mov	r4, r9
 80190ec:	461d      	mov	r5, r3
 80190ee:	9a03      	ldr	r2, [sp, #12]
 80190f0:	e7d7      	b.n	80190a2 <__hexnan+0x2e>
 80190f2:	2929      	cmp	r1, #41	; 0x29
 80190f4:	d156      	bne.n	80191a4 <__hexnan+0x130>
 80190f6:	3202      	adds	r2, #2
 80190f8:	f8ca 2000 	str.w	r2, [sl]
 80190fc:	f1bb 0f00 	cmp.w	fp, #0
 8019100:	d050      	beq.n	80191a4 <__hexnan+0x130>
 8019102:	454c      	cmp	r4, r9
 8019104:	d206      	bcs.n	8019114 <__hexnan+0xa0>
 8019106:	2d07      	cmp	r5, #7
 8019108:	dc04      	bgt.n	8019114 <__hexnan+0xa0>
 801910a:	462a      	mov	r2, r5
 801910c:	4649      	mov	r1, r9
 801910e:	4620      	mov	r0, r4
 8019110:	f7ff ff8a 	bl	8019028 <L_shift>
 8019114:	4544      	cmp	r4, r8
 8019116:	d934      	bls.n	8019182 <__hexnan+0x10e>
 8019118:	f1a8 0204 	sub.w	r2, r8, #4
 801911c:	4623      	mov	r3, r4
 801911e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019122:	f842 1f04 	str.w	r1, [r2, #4]!
 8019126:	429f      	cmp	r7, r3
 8019128:	d2f9      	bcs.n	801911e <__hexnan+0xaa>
 801912a:	1b3b      	subs	r3, r7, r4
 801912c:	f023 0303 	bic.w	r3, r3, #3
 8019130:	3304      	adds	r3, #4
 8019132:	3401      	adds	r4, #1
 8019134:	3e03      	subs	r6, #3
 8019136:	42b4      	cmp	r4, r6
 8019138:	bf88      	it	hi
 801913a:	2304      	movhi	r3, #4
 801913c:	4443      	add	r3, r8
 801913e:	2200      	movs	r2, #0
 8019140:	f843 2b04 	str.w	r2, [r3], #4
 8019144:	429f      	cmp	r7, r3
 8019146:	d2fb      	bcs.n	8019140 <__hexnan+0xcc>
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	b91b      	cbnz	r3, 8019154 <__hexnan+0xe0>
 801914c:	4547      	cmp	r7, r8
 801914e:	d127      	bne.n	80191a0 <__hexnan+0x12c>
 8019150:	2301      	movs	r3, #1
 8019152:	603b      	str	r3, [r7, #0]
 8019154:	2005      	movs	r0, #5
 8019156:	e026      	b.n	80191a6 <__hexnan+0x132>
 8019158:	3501      	adds	r5, #1
 801915a:	2d08      	cmp	r5, #8
 801915c:	f10b 0b01 	add.w	fp, fp, #1
 8019160:	dd06      	ble.n	8019170 <__hexnan+0xfc>
 8019162:	4544      	cmp	r4, r8
 8019164:	d9c3      	bls.n	80190ee <__hexnan+0x7a>
 8019166:	2300      	movs	r3, #0
 8019168:	f844 3c04 	str.w	r3, [r4, #-4]
 801916c:	2501      	movs	r5, #1
 801916e:	3c04      	subs	r4, #4
 8019170:	6822      	ldr	r2, [r4, #0]
 8019172:	f000 000f 	and.w	r0, r0, #15
 8019176:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801917a:	6022      	str	r2, [r4, #0]
 801917c:	e7b7      	b.n	80190ee <__hexnan+0x7a>
 801917e:	2508      	movs	r5, #8
 8019180:	e7b5      	b.n	80190ee <__hexnan+0x7a>
 8019182:	9b01      	ldr	r3, [sp, #4]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d0df      	beq.n	8019148 <__hexnan+0xd4>
 8019188:	f04f 32ff 	mov.w	r2, #4294967295
 801918c:	f1c3 0320 	rsb	r3, r3, #32
 8019190:	fa22 f303 	lsr.w	r3, r2, r3
 8019194:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019198:	401a      	ands	r2, r3
 801919a:	f846 2c04 	str.w	r2, [r6, #-4]
 801919e:	e7d3      	b.n	8019148 <__hexnan+0xd4>
 80191a0:	3f04      	subs	r7, #4
 80191a2:	e7d1      	b.n	8019148 <__hexnan+0xd4>
 80191a4:	2004      	movs	r0, #4
 80191a6:	b007      	add	sp, #28
 80191a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191ac <_localeconv_r>:
 80191ac:	4800      	ldr	r0, [pc, #0]	; (80191b0 <_localeconv_r+0x4>)
 80191ae:	4770      	bx	lr
 80191b0:	20000194 	.word	0x20000194

080191b4 <_lseek_r>:
 80191b4:	b538      	push	{r3, r4, r5, lr}
 80191b6:	4d07      	ldr	r5, [pc, #28]	; (80191d4 <_lseek_r+0x20>)
 80191b8:	4604      	mov	r4, r0
 80191ba:	4608      	mov	r0, r1
 80191bc:	4611      	mov	r1, r2
 80191be:	2200      	movs	r2, #0
 80191c0:	602a      	str	r2, [r5, #0]
 80191c2:	461a      	mov	r2, r3
 80191c4:	f7e9 f9bf 	bl	8002546 <_lseek>
 80191c8:	1c43      	adds	r3, r0, #1
 80191ca:	d102      	bne.n	80191d2 <_lseek_r+0x1e>
 80191cc:	682b      	ldr	r3, [r5, #0]
 80191ce:	b103      	cbz	r3, 80191d2 <_lseek_r+0x1e>
 80191d0:	6023      	str	r3, [r4, #0]
 80191d2:	bd38      	pop	{r3, r4, r5, pc}
 80191d4:	200039f8 	.word	0x200039f8

080191d8 <malloc>:
 80191d8:	4b02      	ldr	r3, [pc, #8]	; (80191e4 <malloc+0xc>)
 80191da:	4601      	mov	r1, r0
 80191dc:	6818      	ldr	r0, [r3, #0]
 80191de:	f000 bd59 	b.w	8019c94 <_malloc_r>
 80191e2:	bf00      	nop
 80191e4:	2000003c 	.word	0x2000003c

080191e8 <__ascii_mbtowc>:
 80191e8:	b082      	sub	sp, #8
 80191ea:	b901      	cbnz	r1, 80191ee <__ascii_mbtowc+0x6>
 80191ec:	a901      	add	r1, sp, #4
 80191ee:	b142      	cbz	r2, 8019202 <__ascii_mbtowc+0x1a>
 80191f0:	b14b      	cbz	r3, 8019206 <__ascii_mbtowc+0x1e>
 80191f2:	7813      	ldrb	r3, [r2, #0]
 80191f4:	600b      	str	r3, [r1, #0]
 80191f6:	7812      	ldrb	r2, [r2, #0]
 80191f8:	1e10      	subs	r0, r2, #0
 80191fa:	bf18      	it	ne
 80191fc:	2001      	movne	r0, #1
 80191fe:	b002      	add	sp, #8
 8019200:	4770      	bx	lr
 8019202:	4610      	mov	r0, r2
 8019204:	e7fb      	b.n	80191fe <__ascii_mbtowc+0x16>
 8019206:	f06f 0001 	mvn.w	r0, #1
 801920a:	e7f8      	b.n	80191fe <__ascii_mbtowc+0x16>

0801920c <_Balloc>:
 801920c:	b570      	push	{r4, r5, r6, lr}
 801920e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019210:	4604      	mov	r4, r0
 8019212:	460d      	mov	r5, r1
 8019214:	b976      	cbnz	r6, 8019234 <_Balloc+0x28>
 8019216:	2010      	movs	r0, #16
 8019218:	f7ff ffde 	bl	80191d8 <malloc>
 801921c:	4602      	mov	r2, r0
 801921e:	6260      	str	r0, [r4, #36]	; 0x24
 8019220:	b920      	cbnz	r0, 801922c <_Balloc+0x20>
 8019222:	4b18      	ldr	r3, [pc, #96]	; (8019284 <_Balloc+0x78>)
 8019224:	4818      	ldr	r0, [pc, #96]	; (8019288 <_Balloc+0x7c>)
 8019226:	2166      	movs	r1, #102	; 0x66
 8019228:	f001 fb5a 	bl	801a8e0 <__assert_func>
 801922c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019230:	6006      	str	r6, [r0, #0]
 8019232:	60c6      	str	r6, [r0, #12]
 8019234:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019236:	68f3      	ldr	r3, [r6, #12]
 8019238:	b183      	cbz	r3, 801925c <_Balloc+0x50>
 801923a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801923c:	68db      	ldr	r3, [r3, #12]
 801923e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019242:	b9b8      	cbnz	r0, 8019274 <_Balloc+0x68>
 8019244:	2101      	movs	r1, #1
 8019246:	fa01 f605 	lsl.w	r6, r1, r5
 801924a:	1d72      	adds	r2, r6, #5
 801924c:	0092      	lsls	r2, r2, #2
 801924e:	4620      	mov	r0, r4
 8019250:	f000 fc9d 	bl	8019b8e <_calloc_r>
 8019254:	b160      	cbz	r0, 8019270 <_Balloc+0x64>
 8019256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801925a:	e00e      	b.n	801927a <_Balloc+0x6e>
 801925c:	2221      	movs	r2, #33	; 0x21
 801925e:	2104      	movs	r1, #4
 8019260:	4620      	mov	r0, r4
 8019262:	f000 fc94 	bl	8019b8e <_calloc_r>
 8019266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019268:	60f0      	str	r0, [r6, #12]
 801926a:	68db      	ldr	r3, [r3, #12]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d1e4      	bne.n	801923a <_Balloc+0x2e>
 8019270:	2000      	movs	r0, #0
 8019272:	bd70      	pop	{r4, r5, r6, pc}
 8019274:	6802      	ldr	r2, [r0, #0]
 8019276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801927a:	2300      	movs	r3, #0
 801927c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019280:	e7f7      	b.n	8019272 <_Balloc+0x66>
 8019282:	bf00      	nop
 8019284:	0801bc96 	.word	0x0801bc96
 8019288:	0801bd94 	.word	0x0801bd94

0801928c <_Bfree>:
 801928c:	b570      	push	{r4, r5, r6, lr}
 801928e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019290:	4605      	mov	r5, r0
 8019292:	460c      	mov	r4, r1
 8019294:	b976      	cbnz	r6, 80192b4 <_Bfree+0x28>
 8019296:	2010      	movs	r0, #16
 8019298:	f7ff ff9e 	bl	80191d8 <malloc>
 801929c:	4602      	mov	r2, r0
 801929e:	6268      	str	r0, [r5, #36]	; 0x24
 80192a0:	b920      	cbnz	r0, 80192ac <_Bfree+0x20>
 80192a2:	4b09      	ldr	r3, [pc, #36]	; (80192c8 <_Bfree+0x3c>)
 80192a4:	4809      	ldr	r0, [pc, #36]	; (80192cc <_Bfree+0x40>)
 80192a6:	218a      	movs	r1, #138	; 0x8a
 80192a8:	f001 fb1a 	bl	801a8e0 <__assert_func>
 80192ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192b0:	6006      	str	r6, [r0, #0]
 80192b2:	60c6      	str	r6, [r0, #12]
 80192b4:	b13c      	cbz	r4, 80192c6 <_Bfree+0x3a>
 80192b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80192b8:	6862      	ldr	r2, [r4, #4]
 80192ba:	68db      	ldr	r3, [r3, #12]
 80192bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80192c0:	6021      	str	r1, [r4, #0]
 80192c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80192c6:	bd70      	pop	{r4, r5, r6, pc}
 80192c8:	0801bc96 	.word	0x0801bc96
 80192cc:	0801bd94 	.word	0x0801bd94

080192d0 <__multadd>:
 80192d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192d4:	690d      	ldr	r5, [r1, #16]
 80192d6:	4607      	mov	r7, r0
 80192d8:	460c      	mov	r4, r1
 80192da:	461e      	mov	r6, r3
 80192dc:	f101 0c14 	add.w	ip, r1, #20
 80192e0:	2000      	movs	r0, #0
 80192e2:	f8dc 3000 	ldr.w	r3, [ip]
 80192e6:	b299      	uxth	r1, r3
 80192e8:	fb02 6101 	mla	r1, r2, r1, r6
 80192ec:	0c1e      	lsrs	r6, r3, #16
 80192ee:	0c0b      	lsrs	r3, r1, #16
 80192f0:	fb02 3306 	mla	r3, r2, r6, r3
 80192f4:	b289      	uxth	r1, r1
 80192f6:	3001      	adds	r0, #1
 80192f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80192fc:	4285      	cmp	r5, r0
 80192fe:	f84c 1b04 	str.w	r1, [ip], #4
 8019302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019306:	dcec      	bgt.n	80192e2 <__multadd+0x12>
 8019308:	b30e      	cbz	r6, 801934e <__multadd+0x7e>
 801930a:	68a3      	ldr	r3, [r4, #8]
 801930c:	42ab      	cmp	r3, r5
 801930e:	dc19      	bgt.n	8019344 <__multadd+0x74>
 8019310:	6861      	ldr	r1, [r4, #4]
 8019312:	4638      	mov	r0, r7
 8019314:	3101      	adds	r1, #1
 8019316:	f7ff ff79 	bl	801920c <_Balloc>
 801931a:	4680      	mov	r8, r0
 801931c:	b928      	cbnz	r0, 801932a <__multadd+0x5a>
 801931e:	4602      	mov	r2, r0
 8019320:	4b0c      	ldr	r3, [pc, #48]	; (8019354 <__multadd+0x84>)
 8019322:	480d      	ldr	r0, [pc, #52]	; (8019358 <__multadd+0x88>)
 8019324:	21b5      	movs	r1, #181	; 0xb5
 8019326:	f001 fadb 	bl	801a8e0 <__assert_func>
 801932a:	6922      	ldr	r2, [r4, #16]
 801932c:	3202      	adds	r2, #2
 801932e:	f104 010c 	add.w	r1, r4, #12
 8019332:	0092      	lsls	r2, r2, #2
 8019334:	300c      	adds	r0, #12
 8019336:	f7fc ff45 	bl	80161c4 <memcpy>
 801933a:	4621      	mov	r1, r4
 801933c:	4638      	mov	r0, r7
 801933e:	f7ff ffa5 	bl	801928c <_Bfree>
 8019342:	4644      	mov	r4, r8
 8019344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019348:	3501      	adds	r5, #1
 801934a:	615e      	str	r6, [r3, #20]
 801934c:	6125      	str	r5, [r4, #16]
 801934e:	4620      	mov	r0, r4
 8019350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019354:	0801bd08 	.word	0x0801bd08
 8019358:	0801bd94 	.word	0x0801bd94

0801935c <__s2b>:
 801935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019360:	460c      	mov	r4, r1
 8019362:	4615      	mov	r5, r2
 8019364:	461f      	mov	r7, r3
 8019366:	2209      	movs	r2, #9
 8019368:	3308      	adds	r3, #8
 801936a:	4606      	mov	r6, r0
 801936c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019370:	2100      	movs	r1, #0
 8019372:	2201      	movs	r2, #1
 8019374:	429a      	cmp	r2, r3
 8019376:	db09      	blt.n	801938c <__s2b+0x30>
 8019378:	4630      	mov	r0, r6
 801937a:	f7ff ff47 	bl	801920c <_Balloc>
 801937e:	b940      	cbnz	r0, 8019392 <__s2b+0x36>
 8019380:	4602      	mov	r2, r0
 8019382:	4b19      	ldr	r3, [pc, #100]	; (80193e8 <__s2b+0x8c>)
 8019384:	4819      	ldr	r0, [pc, #100]	; (80193ec <__s2b+0x90>)
 8019386:	21ce      	movs	r1, #206	; 0xce
 8019388:	f001 faaa 	bl	801a8e0 <__assert_func>
 801938c:	0052      	lsls	r2, r2, #1
 801938e:	3101      	adds	r1, #1
 8019390:	e7f0      	b.n	8019374 <__s2b+0x18>
 8019392:	9b08      	ldr	r3, [sp, #32]
 8019394:	6143      	str	r3, [r0, #20]
 8019396:	2d09      	cmp	r5, #9
 8019398:	f04f 0301 	mov.w	r3, #1
 801939c:	6103      	str	r3, [r0, #16]
 801939e:	dd16      	ble.n	80193ce <__s2b+0x72>
 80193a0:	f104 0909 	add.w	r9, r4, #9
 80193a4:	46c8      	mov	r8, r9
 80193a6:	442c      	add	r4, r5
 80193a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80193ac:	4601      	mov	r1, r0
 80193ae:	3b30      	subs	r3, #48	; 0x30
 80193b0:	220a      	movs	r2, #10
 80193b2:	4630      	mov	r0, r6
 80193b4:	f7ff ff8c 	bl	80192d0 <__multadd>
 80193b8:	45a0      	cmp	r8, r4
 80193ba:	d1f5      	bne.n	80193a8 <__s2b+0x4c>
 80193bc:	f1a5 0408 	sub.w	r4, r5, #8
 80193c0:	444c      	add	r4, r9
 80193c2:	1b2d      	subs	r5, r5, r4
 80193c4:	1963      	adds	r3, r4, r5
 80193c6:	42bb      	cmp	r3, r7
 80193c8:	db04      	blt.n	80193d4 <__s2b+0x78>
 80193ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193ce:	340a      	adds	r4, #10
 80193d0:	2509      	movs	r5, #9
 80193d2:	e7f6      	b.n	80193c2 <__s2b+0x66>
 80193d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80193d8:	4601      	mov	r1, r0
 80193da:	3b30      	subs	r3, #48	; 0x30
 80193dc:	220a      	movs	r2, #10
 80193de:	4630      	mov	r0, r6
 80193e0:	f7ff ff76 	bl	80192d0 <__multadd>
 80193e4:	e7ee      	b.n	80193c4 <__s2b+0x68>
 80193e6:	bf00      	nop
 80193e8:	0801bd08 	.word	0x0801bd08
 80193ec:	0801bd94 	.word	0x0801bd94

080193f0 <__hi0bits>:
 80193f0:	0c03      	lsrs	r3, r0, #16
 80193f2:	041b      	lsls	r3, r3, #16
 80193f4:	b9d3      	cbnz	r3, 801942c <__hi0bits+0x3c>
 80193f6:	0400      	lsls	r0, r0, #16
 80193f8:	2310      	movs	r3, #16
 80193fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80193fe:	bf04      	itt	eq
 8019400:	0200      	lsleq	r0, r0, #8
 8019402:	3308      	addeq	r3, #8
 8019404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019408:	bf04      	itt	eq
 801940a:	0100      	lsleq	r0, r0, #4
 801940c:	3304      	addeq	r3, #4
 801940e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019412:	bf04      	itt	eq
 8019414:	0080      	lsleq	r0, r0, #2
 8019416:	3302      	addeq	r3, #2
 8019418:	2800      	cmp	r0, #0
 801941a:	db05      	blt.n	8019428 <__hi0bits+0x38>
 801941c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019420:	f103 0301 	add.w	r3, r3, #1
 8019424:	bf08      	it	eq
 8019426:	2320      	moveq	r3, #32
 8019428:	4618      	mov	r0, r3
 801942a:	4770      	bx	lr
 801942c:	2300      	movs	r3, #0
 801942e:	e7e4      	b.n	80193fa <__hi0bits+0xa>

08019430 <__lo0bits>:
 8019430:	6803      	ldr	r3, [r0, #0]
 8019432:	f013 0207 	ands.w	r2, r3, #7
 8019436:	4601      	mov	r1, r0
 8019438:	d00b      	beq.n	8019452 <__lo0bits+0x22>
 801943a:	07da      	lsls	r2, r3, #31
 801943c:	d423      	bmi.n	8019486 <__lo0bits+0x56>
 801943e:	0798      	lsls	r0, r3, #30
 8019440:	bf49      	itett	mi
 8019442:	085b      	lsrmi	r3, r3, #1
 8019444:	089b      	lsrpl	r3, r3, #2
 8019446:	2001      	movmi	r0, #1
 8019448:	600b      	strmi	r3, [r1, #0]
 801944a:	bf5c      	itt	pl
 801944c:	600b      	strpl	r3, [r1, #0]
 801944e:	2002      	movpl	r0, #2
 8019450:	4770      	bx	lr
 8019452:	b298      	uxth	r0, r3
 8019454:	b9a8      	cbnz	r0, 8019482 <__lo0bits+0x52>
 8019456:	0c1b      	lsrs	r3, r3, #16
 8019458:	2010      	movs	r0, #16
 801945a:	b2da      	uxtb	r2, r3
 801945c:	b90a      	cbnz	r2, 8019462 <__lo0bits+0x32>
 801945e:	3008      	adds	r0, #8
 8019460:	0a1b      	lsrs	r3, r3, #8
 8019462:	071a      	lsls	r2, r3, #28
 8019464:	bf04      	itt	eq
 8019466:	091b      	lsreq	r3, r3, #4
 8019468:	3004      	addeq	r0, #4
 801946a:	079a      	lsls	r2, r3, #30
 801946c:	bf04      	itt	eq
 801946e:	089b      	lsreq	r3, r3, #2
 8019470:	3002      	addeq	r0, #2
 8019472:	07da      	lsls	r2, r3, #31
 8019474:	d403      	bmi.n	801947e <__lo0bits+0x4e>
 8019476:	085b      	lsrs	r3, r3, #1
 8019478:	f100 0001 	add.w	r0, r0, #1
 801947c:	d005      	beq.n	801948a <__lo0bits+0x5a>
 801947e:	600b      	str	r3, [r1, #0]
 8019480:	4770      	bx	lr
 8019482:	4610      	mov	r0, r2
 8019484:	e7e9      	b.n	801945a <__lo0bits+0x2a>
 8019486:	2000      	movs	r0, #0
 8019488:	4770      	bx	lr
 801948a:	2020      	movs	r0, #32
 801948c:	4770      	bx	lr
	...

08019490 <__i2b>:
 8019490:	b510      	push	{r4, lr}
 8019492:	460c      	mov	r4, r1
 8019494:	2101      	movs	r1, #1
 8019496:	f7ff feb9 	bl	801920c <_Balloc>
 801949a:	4602      	mov	r2, r0
 801949c:	b928      	cbnz	r0, 80194aa <__i2b+0x1a>
 801949e:	4b05      	ldr	r3, [pc, #20]	; (80194b4 <__i2b+0x24>)
 80194a0:	4805      	ldr	r0, [pc, #20]	; (80194b8 <__i2b+0x28>)
 80194a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80194a6:	f001 fa1b 	bl	801a8e0 <__assert_func>
 80194aa:	2301      	movs	r3, #1
 80194ac:	6144      	str	r4, [r0, #20]
 80194ae:	6103      	str	r3, [r0, #16]
 80194b0:	bd10      	pop	{r4, pc}
 80194b2:	bf00      	nop
 80194b4:	0801bd08 	.word	0x0801bd08
 80194b8:	0801bd94 	.word	0x0801bd94

080194bc <__multiply>:
 80194bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194c0:	4691      	mov	r9, r2
 80194c2:	690a      	ldr	r2, [r1, #16]
 80194c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80194c8:	429a      	cmp	r2, r3
 80194ca:	bfb8      	it	lt
 80194cc:	460b      	movlt	r3, r1
 80194ce:	460c      	mov	r4, r1
 80194d0:	bfbc      	itt	lt
 80194d2:	464c      	movlt	r4, r9
 80194d4:	4699      	movlt	r9, r3
 80194d6:	6927      	ldr	r7, [r4, #16]
 80194d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80194dc:	68a3      	ldr	r3, [r4, #8]
 80194de:	6861      	ldr	r1, [r4, #4]
 80194e0:	eb07 060a 	add.w	r6, r7, sl
 80194e4:	42b3      	cmp	r3, r6
 80194e6:	b085      	sub	sp, #20
 80194e8:	bfb8      	it	lt
 80194ea:	3101      	addlt	r1, #1
 80194ec:	f7ff fe8e 	bl	801920c <_Balloc>
 80194f0:	b930      	cbnz	r0, 8019500 <__multiply+0x44>
 80194f2:	4602      	mov	r2, r0
 80194f4:	4b44      	ldr	r3, [pc, #272]	; (8019608 <__multiply+0x14c>)
 80194f6:	4845      	ldr	r0, [pc, #276]	; (801960c <__multiply+0x150>)
 80194f8:	f240 115d 	movw	r1, #349	; 0x15d
 80194fc:	f001 f9f0 	bl	801a8e0 <__assert_func>
 8019500:	f100 0514 	add.w	r5, r0, #20
 8019504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019508:	462b      	mov	r3, r5
 801950a:	2200      	movs	r2, #0
 801950c:	4543      	cmp	r3, r8
 801950e:	d321      	bcc.n	8019554 <__multiply+0x98>
 8019510:	f104 0314 	add.w	r3, r4, #20
 8019514:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019518:	f109 0314 	add.w	r3, r9, #20
 801951c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019520:	9202      	str	r2, [sp, #8]
 8019522:	1b3a      	subs	r2, r7, r4
 8019524:	3a15      	subs	r2, #21
 8019526:	f022 0203 	bic.w	r2, r2, #3
 801952a:	3204      	adds	r2, #4
 801952c:	f104 0115 	add.w	r1, r4, #21
 8019530:	428f      	cmp	r7, r1
 8019532:	bf38      	it	cc
 8019534:	2204      	movcc	r2, #4
 8019536:	9201      	str	r2, [sp, #4]
 8019538:	9a02      	ldr	r2, [sp, #8]
 801953a:	9303      	str	r3, [sp, #12]
 801953c:	429a      	cmp	r2, r3
 801953e:	d80c      	bhi.n	801955a <__multiply+0x9e>
 8019540:	2e00      	cmp	r6, #0
 8019542:	dd03      	ble.n	801954c <__multiply+0x90>
 8019544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019548:	2b00      	cmp	r3, #0
 801954a:	d05a      	beq.n	8019602 <__multiply+0x146>
 801954c:	6106      	str	r6, [r0, #16]
 801954e:	b005      	add	sp, #20
 8019550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019554:	f843 2b04 	str.w	r2, [r3], #4
 8019558:	e7d8      	b.n	801950c <__multiply+0x50>
 801955a:	f8b3 a000 	ldrh.w	sl, [r3]
 801955e:	f1ba 0f00 	cmp.w	sl, #0
 8019562:	d024      	beq.n	80195ae <__multiply+0xf2>
 8019564:	f104 0e14 	add.w	lr, r4, #20
 8019568:	46a9      	mov	r9, r5
 801956a:	f04f 0c00 	mov.w	ip, #0
 801956e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019572:	f8d9 1000 	ldr.w	r1, [r9]
 8019576:	fa1f fb82 	uxth.w	fp, r2
 801957a:	b289      	uxth	r1, r1
 801957c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019580:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019584:	f8d9 2000 	ldr.w	r2, [r9]
 8019588:	4461      	add	r1, ip
 801958a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801958e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019596:	b289      	uxth	r1, r1
 8019598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801959c:	4577      	cmp	r7, lr
 801959e:	f849 1b04 	str.w	r1, [r9], #4
 80195a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80195a6:	d8e2      	bhi.n	801956e <__multiply+0xb2>
 80195a8:	9a01      	ldr	r2, [sp, #4]
 80195aa:	f845 c002 	str.w	ip, [r5, r2]
 80195ae:	9a03      	ldr	r2, [sp, #12]
 80195b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80195b4:	3304      	adds	r3, #4
 80195b6:	f1b9 0f00 	cmp.w	r9, #0
 80195ba:	d020      	beq.n	80195fe <__multiply+0x142>
 80195bc:	6829      	ldr	r1, [r5, #0]
 80195be:	f104 0c14 	add.w	ip, r4, #20
 80195c2:	46ae      	mov	lr, r5
 80195c4:	f04f 0a00 	mov.w	sl, #0
 80195c8:	f8bc b000 	ldrh.w	fp, [ip]
 80195cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80195d0:	fb09 220b 	mla	r2, r9, fp, r2
 80195d4:	4492      	add	sl, r2
 80195d6:	b289      	uxth	r1, r1
 80195d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80195dc:	f84e 1b04 	str.w	r1, [lr], #4
 80195e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80195e4:	f8be 1000 	ldrh.w	r1, [lr]
 80195e8:	0c12      	lsrs	r2, r2, #16
 80195ea:	fb09 1102 	mla	r1, r9, r2, r1
 80195ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80195f2:	4567      	cmp	r7, ip
 80195f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80195f8:	d8e6      	bhi.n	80195c8 <__multiply+0x10c>
 80195fa:	9a01      	ldr	r2, [sp, #4]
 80195fc:	50a9      	str	r1, [r5, r2]
 80195fe:	3504      	adds	r5, #4
 8019600:	e79a      	b.n	8019538 <__multiply+0x7c>
 8019602:	3e01      	subs	r6, #1
 8019604:	e79c      	b.n	8019540 <__multiply+0x84>
 8019606:	bf00      	nop
 8019608:	0801bd08 	.word	0x0801bd08
 801960c:	0801bd94 	.word	0x0801bd94

08019610 <__pow5mult>:
 8019610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019614:	4615      	mov	r5, r2
 8019616:	f012 0203 	ands.w	r2, r2, #3
 801961a:	4606      	mov	r6, r0
 801961c:	460f      	mov	r7, r1
 801961e:	d007      	beq.n	8019630 <__pow5mult+0x20>
 8019620:	4c25      	ldr	r4, [pc, #148]	; (80196b8 <__pow5mult+0xa8>)
 8019622:	3a01      	subs	r2, #1
 8019624:	2300      	movs	r3, #0
 8019626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801962a:	f7ff fe51 	bl	80192d0 <__multadd>
 801962e:	4607      	mov	r7, r0
 8019630:	10ad      	asrs	r5, r5, #2
 8019632:	d03d      	beq.n	80196b0 <__pow5mult+0xa0>
 8019634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019636:	b97c      	cbnz	r4, 8019658 <__pow5mult+0x48>
 8019638:	2010      	movs	r0, #16
 801963a:	f7ff fdcd 	bl	80191d8 <malloc>
 801963e:	4602      	mov	r2, r0
 8019640:	6270      	str	r0, [r6, #36]	; 0x24
 8019642:	b928      	cbnz	r0, 8019650 <__pow5mult+0x40>
 8019644:	4b1d      	ldr	r3, [pc, #116]	; (80196bc <__pow5mult+0xac>)
 8019646:	481e      	ldr	r0, [pc, #120]	; (80196c0 <__pow5mult+0xb0>)
 8019648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801964c:	f001 f948 	bl	801a8e0 <__assert_func>
 8019650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019654:	6004      	str	r4, [r0, #0]
 8019656:	60c4      	str	r4, [r0, #12]
 8019658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801965c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019660:	b94c      	cbnz	r4, 8019676 <__pow5mult+0x66>
 8019662:	f240 2171 	movw	r1, #625	; 0x271
 8019666:	4630      	mov	r0, r6
 8019668:	f7ff ff12 	bl	8019490 <__i2b>
 801966c:	2300      	movs	r3, #0
 801966e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019672:	4604      	mov	r4, r0
 8019674:	6003      	str	r3, [r0, #0]
 8019676:	f04f 0900 	mov.w	r9, #0
 801967a:	07eb      	lsls	r3, r5, #31
 801967c:	d50a      	bpl.n	8019694 <__pow5mult+0x84>
 801967e:	4639      	mov	r1, r7
 8019680:	4622      	mov	r2, r4
 8019682:	4630      	mov	r0, r6
 8019684:	f7ff ff1a 	bl	80194bc <__multiply>
 8019688:	4639      	mov	r1, r7
 801968a:	4680      	mov	r8, r0
 801968c:	4630      	mov	r0, r6
 801968e:	f7ff fdfd 	bl	801928c <_Bfree>
 8019692:	4647      	mov	r7, r8
 8019694:	106d      	asrs	r5, r5, #1
 8019696:	d00b      	beq.n	80196b0 <__pow5mult+0xa0>
 8019698:	6820      	ldr	r0, [r4, #0]
 801969a:	b938      	cbnz	r0, 80196ac <__pow5mult+0x9c>
 801969c:	4622      	mov	r2, r4
 801969e:	4621      	mov	r1, r4
 80196a0:	4630      	mov	r0, r6
 80196a2:	f7ff ff0b 	bl	80194bc <__multiply>
 80196a6:	6020      	str	r0, [r4, #0]
 80196a8:	f8c0 9000 	str.w	r9, [r0]
 80196ac:	4604      	mov	r4, r0
 80196ae:	e7e4      	b.n	801967a <__pow5mult+0x6a>
 80196b0:	4638      	mov	r0, r7
 80196b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196b6:	bf00      	nop
 80196b8:	0801bee0 	.word	0x0801bee0
 80196bc:	0801bc96 	.word	0x0801bc96
 80196c0:	0801bd94 	.word	0x0801bd94

080196c4 <__lshift>:
 80196c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196c8:	460c      	mov	r4, r1
 80196ca:	6849      	ldr	r1, [r1, #4]
 80196cc:	6923      	ldr	r3, [r4, #16]
 80196ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80196d2:	68a3      	ldr	r3, [r4, #8]
 80196d4:	4607      	mov	r7, r0
 80196d6:	4691      	mov	r9, r2
 80196d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80196dc:	f108 0601 	add.w	r6, r8, #1
 80196e0:	42b3      	cmp	r3, r6
 80196e2:	db0b      	blt.n	80196fc <__lshift+0x38>
 80196e4:	4638      	mov	r0, r7
 80196e6:	f7ff fd91 	bl	801920c <_Balloc>
 80196ea:	4605      	mov	r5, r0
 80196ec:	b948      	cbnz	r0, 8019702 <__lshift+0x3e>
 80196ee:	4602      	mov	r2, r0
 80196f0:	4b2a      	ldr	r3, [pc, #168]	; (801979c <__lshift+0xd8>)
 80196f2:	482b      	ldr	r0, [pc, #172]	; (80197a0 <__lshift+0xdc>)
 80196f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80196f8:	f001 f8f2 	bl	801a8e0 <__assert_func>
 80196fc:	3101      	adds	r1, #1
 80196fe:	005b      	lsls	r3, r3, #1
 8019700:	e7ee      	b.n	80196e0 <__lshift+0x1c>
 8019702:	2300      	movs	r3, #0
 8019704:	f100 0114 	add.w	r1, r0, #20
 8019708:	f100 0210 	add.w	r2, r0, #16
 801970c:	4618      	mov	r0, r3
 801970e:	4553      	cmp	r3, sl
 8019710:	db37      	blt.n	8019782 <__lshift+0xbe>
 8019712:	6920      	ldr	r0, [r4, #16]
 8019714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019718:	f104 0314 	add.w	r3, r4, #20
 801971c:	f019 091f 	ands.w	r9, r9, #31
 8019720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019728:	d02f      	beq.n	801978a <__lshift+0xc6>
 801972a:	f1c9 0e20 	rsb	lr, r9, #32
 801972e:	468a      	mov	sl, r1
 8019730:	f04f 0c00 	mov.w	ip, #0
 8019734:	681a      	ldr	r2, [r3, #0]
 8019736:	fa02 f209 	lsl.w	r2, r2, r9
 801973a:	ea42 020c 	orr.w	r2, r2, ip
 801973e:	f84a 2b04 	str.w	r2, [sl], #4
 8019742:	f853 2b04 	ldr.w	r2, [r3], #4
 8019746:	4298      	cmp	r0, r3
 8019748:	fa22 fc0e 	lsr.w	ip, r2, lr
 801974c:	d8f2      	bhi.n	8019734 <__lshift+0x70>
 801974e:	1b03      	subs	r3, r0, r4
 8019750:	3b15      	subs	r3, #21
 8019752:	f023 0303 	bic.w	r3, r3, #3
 8019756:	3304      	adds	r3, #4
 8019758:	f104 0215 	add.w	r2, r4, #21
 801975c:	4290      	cmp	r0, r2
 801975e:	bf38      	it	cc
 8019760:	2304      	movcc	r3, #4
 8019762:	f841 c003 	str.w	ip, [r1, r3]
 8019766:	f1bc 0f00 	cmp.w	ip, #0
 801976a:	d001      	beq.n	8019770 <__lshift+0xac>
 801976c:	f108 0602 	add.w	r6, r8, #2
 8019770:	3e01      	subs	r6, #1
 8019772:	4638      	mov	r0, r7
 8019774:	612e      	str	r6, [r5, #16]
 8019776:	4621      	mov	r1, r4
 8019778:	f7ff fd88 	bl	801928c <_Bfree>
 801977c:	4628      	mov	r0, r5
 801977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019782:	f842 0f04 	str.w	r0, [r2, #4]!
 8019786:	3301      	adds	r3, #1
 8019788:	e7c1      	b.n	801970e <__lshift+0x4a>
 801978a:	3904      	subs	r1, #4
 801978c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019790:	f841 2f04 	str.w	r2, [r1, #4]!
 8019794:	4298      	cmp	r0, r3
 8019796:	d8f9      	bhi.n	801978c <__lshift+0xc8>
 8019798:	e7ea      	b.n	8019770 <__lshift+0xac>
 801979a:	bf00      	nop
 801979c:	0801bd08 	.word	0x0801bd08
 80197a0:	0801bd94 	.word	0x0801bd94

080197a4 <__mcmp>:
 80197a4:	b530      	push	{r4, r5, lr}
 80197a6:	6902      	ldr	r2, [r0, #16]
 80197a8:	690c      	ldr	r4, [r1, #16]
 80197aa:	1b12      	subs	r2, r2, r4
 80197ac:	d10e      	bne.n	80197cc <__mcmp+0x28>
 80197ae:	f100 0314 	add.w	r3, r0, #20
 80197b2:	3114      	adds	r1, #20
 80197b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80197b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80197bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80197c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80197c4:	42a5      	cmp	r5, r4
 80197c6:	d003      	beq.n	80197d0 <__mcmp+0x2c>
 80197c8:	d305      	bcc.n	80197d6 <__mcmp+0x32>
 80197ca:	2201      	movs	r2, #1
 80197cc:	4610      	mov	r0, r2
 80197ce:	bd30      	pop	{r4, r5, pc}
 80197d0:	4283      	cmp	r3, r0
 80197d2:	d3f3      	bcc.n	80197bc <__mcmp+0x18>
 80197d4:	e7fa      	b.n	80197cc <__mcmp+0x28>
 80197d6:	f04f 32ff 	mov.w	r2, #4294967295
 80197da:	e7f7      	b.n	80197cc <__mcmp+0x28>

080197dc <__mdiff>:
 80197dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e0:	460c      	mov	r4, r1
 80197e2:	4606      	mov	r6, r0
 80197e4:	4611      	mov	r1, r2
 80197e6:	4620      	mov	r0, r4
 80197e8:	4690      	mov	r8, r2
 80197ea:	f7ff ffdb 	bl	80197a4 <__mcmp>
 80197ee:	1e05      	subs	r5, r0, #0
 80197f0:	d110      	bne.n	8019814 <__mdiff+0x38>
 80197f2:	4629      	mov	r1, r5
 80197f4:	4630      	mov	r0, r6
 80197f6:	f7ff fd09 	bl	801920c <_Balloc>
 80197fa:	b930      	cbnz	r0, 801980a <__mdiff+0x2e>
 80197fc:	4b3a      	ldr	r3, [pc, #232]	; (80198e8 <__mdiff+0x10c>)
 80197fe:	4602      	mov	r2, r0
 8019800:	f240 2132 	movw	r1, #562	; 0x232
 8019804:	4839      	ldr	r0, [pc, #228]	; (80198ec <__mdiff+0x110>)
 8019806:	f001 f86b 	bl	801a8e0 <__assert_func>
 801980a:	2301      	movs	r3, #1
 801980c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019814:	bfa4      	itt	ge
 8019816:	4643      	movge	r3, r8
 8019818:	46a0      	movge	r8, r4
 801981a:	4630      	mov	r0, r6
 801981c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019820:	bfa6      	itte	ge
 8019822:	461c      	movge	r4, r3
 8019824:	2500      	movge	r5, #0
 8019826:	2501      	movlt	r5, #1
 8019828:	f7ff fcf0 	bl	801920c <_Balloc>
 801982c:	b920      	cbnz	r0, 8019838 <__mdiff+0x5c>
 801982e:	4b2e      	ldr	r3, [pc, #184]	; (80198e8 <__mdiff+0x10c>)
 8019830:	4602      	mov	r2, r0
 8019832:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019836:	e7e5      	b.n	8019804 <__mdiff+0x28>
 8019838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801983c:	6926      	ldr	r6, [r4, #16]
 801983e:	60c5      	str	r5, [r0, #12]
 8019840:	f104 0914 	add.w	r9, r4, #20
 8019844:	f108 0514 	add.w	r5, r8, #20
 8019848:	f100 0e14 	add.w	lr, r0, #20
 801984c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019854:	f108 0210 	add.w	r2, r8, #16
 8019858:	46f2      	mov	sl, lr
 801985a:	2100      	movs	r1, #0
 801985c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019864:	fa1f f883 	uxth.w	r8, r3
 8019868:	fa11 f18b 	uxtah	r1, r1, fp
 801986c:	0c1b      	lsrs	r3, r3, #16
 801986e:	eba1 0808 	sub.w	r8, r1, r8
 8019872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801987a:	fa1f f888 	uxth.w	r8, r8
 801987e:	1419      	asrs	r1, r3, #16
 8019880:	454e      	cmp	r6, r9
 8019882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019886:	f84a 3b04 	str.w	r3, [sl], #4
 801988a:	d8e7      	bhi.n	801985c <__mdiff+0x80>
 801988c:	1b33      	subs	r3, r6, r4
 801988e:	3b15      	subs	r3, #21
 8019890:	f023 0303 	bic.w	r3, r3, #3
 8019894:	3304      	adds	r3, #4
 8019896:	3415      	adds	r4, #21
 8019898:	42a6      	cmp	r6, r4
 801989a:	bf38      	it	cc
 801989c:	2304      	movcc	r3, #4
 801989e:	441d      	add	r5, r3
 80198a0:	4473      	add	r3, lr
 80198a2:	469e      	mov	lr, r3
 80198a4:	462e      	mov	r6, r5
 80198a6:	4566      	cmp	r6, ip
 80198a8:	d30e      	bcc.n	80198c8 <__mdiff+0xec>
 80198aa:	f10c 0203 	add.w	r2, ip, #3
 80198ae:	1b52      	subs	r2, r2, r5
 80198b0:	f022 0203 	bic.w	r2, r2, #3
 80198b4:	3d03      	subs	r5, #3
 80198b6:	45ac      	cmp	ip, r5
 80198b8:	bf38      	it	cc
 80198ba:	2200      	movcc	r2, #0
 80198bc:	441a      	add	r2, r3
 80198be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80198c2:	b17b      	cbz	r3, 80198e4 <__mdiff+0x108>
 80198c4:	6107      	str	r7, [r0, #16]
 80198c6:	e7a3      	b.n	8019810 <__mdiff+0x34>
 80198c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80198cc:	fa11 f288 	uxtah	r2, r1, r8
 80198d0:	1414      	asrs	r4, r2, #16
 80198d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80198d6:	b292      	uxth	r2, r2
 80198d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80198dc:	f84e 2b04 	str.w	r2, [lr], #4
 80198e0:	1421      	asrs	r1, r4, #16
 80198e2:	e7e0      	b.n	80198a6 <__mdiff+0xca>
 80198e4:	3f01      	subs	r7, #1
 80198e6:	e7ea      	b.n	80198be <__mdiff+0xe2>
 80198e8:	0801bd08 	.word	0x0801bd08
 80198ec:	0801bd94 	.word	0x0801bd94

080198f0 <__ulp>:
 80198f0:	b082      	sub	sp, #8
 80198f2:	ed8d 0b00 	vstr	d0, [sp]
 80198f6:	9b01      	ldr	r3, [sp, #4]
 80198f8:	4912      	ldr	r1, [pc, #72]	; (8019944 <__ulp+0x54>)
 80198fa:	4019      	ands	r1, r3
 80198fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019900:	2900      	cmp	r1, #0
 8019902:	dd05      	ble.n	8019910 <__ulp+0x20>
 8019904:	2200      	movs	r2, #0
 8019906:	460b      	mov	r3, r1
 8019908:	ec43 2b10 	vmov	d0, r2, r3
 801990c:	b002      	add	sp, #8
 801990e:	4770      	bx	lr
 8019910:	4249      	negs	r1, r1
 8019912:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019916:	ea4f 5021 	mov.w	r0, r1, asr #20
 801991a:	f04f 0200 	mov.w	r2, #0
 801991e:	f04f 0300 	mov.w	r3, #0
 8019922:	da04      	bge.n	801992e <__ulp+0x3e>
 8019924:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019928:	fa41 f300 	asr.w	r3, r1, r0
 801992c:	e7ec      	b.n	8019908 <__ulp+0x18>
 801992e:	f1a0 0114 	sub.w	r1, r0, #20
 8019932:	291e      	cmp	r1, #30
 8019934:	bfda      	itte	le
 8019936:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801993a:	fa20 f101 	lsrle.w	r1, r0, r1
 801993e:	2101      	movgt	r1, #1
 8019940:	460a      	mov	r2, r1
 8019942:	e7e1      	b.n	8019908 <__ulp+0x18>
 8019944:	7ff00000 	.word	0x7ff00000

08019948 <__b2d>:
 8019948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801994a:	6905      	ldr	r5, [r0, #16]
 801994c:	f100 0714 	add.w	r7, r0, #20
 8019950:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019954:	1f2e      	subs	r6, r5, #4
 8019956:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801995a:	4620      	mov	r0, r4
 801995c:	f7ff fd48 	bl	80193f0 <__hi0bits>
 8019960:	f1c0 0320 	rsb	r3, r0, #32
 8019964:	280a      	cmp	r0, #10
 8019966:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80199e4 <__b2d+0x9c>
 801996a:	600b      	str	r3, [r1, #0]
 801996c:	dc14      	bgt.n	8019998 <__b2d+0x50>
 801996e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019972:	fa24 f10e 	lsr.w	r1, r4, lr
 8019976:	42b7      	cmp	r7, r6
 8019978:	ea41 030c 	orr.w	r3, r1, ip
 801997c:	bf34      	ite	cc
 801997e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019982:	2100      	movcs	r1, #0
 8019984:	3015      	adds	r0, #21
 8019986:	fa04 f000 	lsl.w	r0, r4, r0
 801998a:	fa21 f10e 	lsr.w	r1, r1, lr
 801998e:	ea40 0201 	orr.w	r2, r0, r1
 8019992:	ec43 2b10 	vmov	d0, r2, r3
 8019996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019998:	42b7      	cmp	r7, r6
 801999a:	bf3a      	itte	cc
 801999c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80199a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80199a4:	2100      	movcs	r1, #0
 80199a6:	380b      	subs	r0, #11
 80199a8:	d017      	beq.n	80199da <__b2d+0x92>
 80199aa:	f1c0 0c20 	rsb	ip, r0, #32
 80199ae:	fa04 f500 	lsl.w	r5, r4, r0
 80199b2:	42be      	cmp	r6, r7
 80199b4:	fa21 f40c 	lsr.w	r4, r1, ip
 80199b8:	ea45 0504 	orr.w	r5, r5, r4
 80199bc:	bf8c      	ite	hi
 80199be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80199c2:	2400      	movls	r4, #0
 80199c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80199c8:	fa01 f000 	lsl.w	r0, r1, r0
 80199cc:	fa24 f40c 	lsr.w	r4, r4, ip
 80199d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80199d4:	ea40 0204 	orr.w	r2, r0, r4
 80199d8:	e7db      	b.n	8019992 <__b2d+0x4a>
 80199da:	ea44 030c 	orr.w	r3, r4, ip
 80199de:	460a      	mov	r2, r1
 80199e0:	e7d7      	b.n	8019992 <__b2d+0x4a>
 80199e2:	bf00      	nop
 80199e4:	3ff00000 	.word	0x3ff00000

080199e8 <__d2b>:
 80199e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80199ec:	4689      	mov	r9, r1
 80199ee:	2101      	movs	r1, #1
 80199f0:	ec57 6b10 	vmov	r6, r7, d0
 80199f4:	4690      	mov	r8, r2
 80199f6:	f7ff fc09 	bl	801920c <_Balloc>
 80199fa:	4604      	mov	r4, r0
 80199fc:	b930      	cbnz	r0, 8019a0c <__d2b+0x24>
 80199fe:	4602      	mov	r2, r0
 8019a00:	4b25      	ldr	r3, [pc, #148]	; (8019a98 <__d2b+0xb0>)
 8019a02:	4826      	ldr	r0, [pc, #152]	; (8019a9c <__d2b+0xb4>)
 8019a04:	f240 310a 	movw	r1, #778	; 0x30a
 8019a08:	f000 ff6a 	bl	801a8e0 <__assert_func>
 8019a0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019a10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019a14:	bb35      	cbnz	r5, 8019a64 <__d2b+0x7c>
 8019a16:	2e00      	cmp	r6, #0
 8019a18:	9301      	str	r3, [sp, #4]
 8019a1a:	d028      	beq.n	8019a6e <__d2b+0x86>
 8019a1c:	4668      	mov	r0, sp
 8019a1e:	9600      	str	r6, [sp, #0]
 8019a20:	f7ff fd06 	bl	8019430 <__lo0bits>
 8019a24:	9900      	ldr	r1, [sp, #0]
 8019a26:	b300      	cbz	r0, 8019a6a <__d2b+0x82>
 8019a28:	9a01      	ldr	r2, [sp, #4]
 8019a2a:	f1c0 0320 	rsb	r3, r0, #32
 8019a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8019a32:	430b      	orrs	r3, r1
 8019a34:	40c2      	lsrs	r2, r0
 8019a36:	6163      	str	r3, [r4, #20]
 8019a38:	9201      	str	r2, [sp, #4]
 8019a3a:	9b01      	ldr	r3, [sp, #4]
 8019a3c:	61a3      	str	r3, [r4, #24]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	bf14      	ite	ne
 8019a42:	2202      	movne	r2, #2
 8019a44:	2201      	moveq	r2, #1
 8019a46:	6122      	str	r2, [r4, #16]
 8019a48:	b1d5      	cbz	r5, 8019a80 <__d2b+0x98>
 8019a4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019a4e:	4405      	add	r5, r0
 8019a50:	f8c9 5000 	str.w	r5, [r9]
 8019a54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019a58:	f8c8 0000 	str.w	r0, [r8]
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	b003      	add	sp, #12
 8019a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019a68:	e7d5      	b.n	8019a16 <__d2b+0x2e>
 8019a6a:	6161      	str	r1, [r4, #20]
 8019a6c:	e7e5      	b.n	8019a3a <__d2b+0x52>
 8019a6e:	a801      	add	r0, sp, #4
 8019a70:	f7ff fcde 	bl	8019430 <__lo0bits>
 8019a74:	9b01      	ldr	r3, [sp, #4]
 8019a76:	6163      	str	r3, [r4, #20]
 8019a78:	2201      	movs	r2, #1
 8019a7a:	6122      	str	r2, [r4, #16]
 8019a7c:	3020      	adds	r0, #32
 8019a7e:	e7e3      	b.n	8019a48 <__d2b+0x60>
 8019a80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019a84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a88:	f8c9 0000 	str.w	r0, [r9]
 8019a8c:	6918      	ldr	r0, [r3, #16]
 8019a8e:	f7ff fcaf 	bl	80193f0 <__hi0bits>
 8019a92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019a96:	e7df      	b.n	8019a58 <__d2b+0x70>
 8019a98:	0801bd08 	.word	0x0801bd08
 8019a9c:	0801bd94 	.word	0x0801bd94

08019aa0 <__ratio>:
 8019aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa4:	4688      	mov	r8, r1
 8019aa6:	4669      	mov	r1, sp
 8019aa8:	4681      	mov	r9, r0
 8019aaa:	f7ff ff4d 	bl	8019948 <__b2d>
 8019aae:	a901      	add	r1, sp, #4
 8019ab0:	4640      	mov	r0, r8
 8019ab2:	ec55 4b10 	vmov	r4, r5, d0
 8019ab6:	f7ff ff47 	bl	8019948 <__b2d>
 8019aba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019abe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019ac2:	eba3 0c02 	sub.w	ip, r3, r2
 8019ac6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019aca:	1a9b      	subs	r3, r3, r2
 8019acc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019ad0:	ec51 0b10 	vmov	r0, r1, d0
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	bfd6      	itet	le
 8019ad8:	460a      	movle	r2, r1
 8019ada:	462a      	movgt	r2, r5
 8019adc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019ae0:	468b      	mov	fp, r1
 8019ae2:	462f      	mov	r7, r5
 8019ae4:	bfd4      	ite	le
 8019ae6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019aea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019aee:	4620      	mov	r0, r4
 8019af0:	ee10 2a10 	vmov	r2, s0
 8019af4:	465b      	mov	r3, fp
 8019af6:	4639      	mov	r1, r7
 8019af8:	f7e6 fec0 	bl	800087c <__aeabi_ddiv>
 8019afc:	ec41 0b10 	vmov	d0, r0, r1
 8019b00:	b003      	add	sp, #12
 8019b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b06 <__copybits>:
 8019b06:	3901      	subs	r1, #1
 8019b08:	b570      	push	{r4, r5, r6, lr}
 8019b0a:	1149      	asrs	r1, r1, #5
 8019b0c:	6914      	ldr	r4, [r2, #16]
 8019b0e:	3101      	adds	r1, #1
 8019b10:	f102 0314 	add.w	r3, r2, #20
 8019b14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019b18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019b1c:	1f05      	subs	r5, r0, #4
 8019b1e:	42a3      	cmp	r3, r4
 8019b20:	d30c      	bcc.n	8019b3c <__copybits+0x36>
 8019b22:	1aa3      	subs	r3, r4, r2
 8019b24:	3b11      	subs	r3, #17
 8019b26:	f023 0303 	bic.w	r3, r3, #3
 8019b2a:	3211      	adds	r2, #17
 8019b2c:	42a2      	cmp	r2, r4
 8019b2e:	bf88      	it	hi
 8019b30:	2300      	movhi	r3, #0
 8019b32:	4418      	add	r0, r3
 8019b34:	2300      	movs	r3, #0
 8019b36:	4288      	cmp	r0, r1
 8019b38:	d305      	bcc.n	8019b46 <__copybits+0x40>
 8019b3a:	bd70      	pop	{r4, r5, r6, pc}
 8019b3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019b40:	f845 6f04 	str.w	r6, [r5, #4]!
 8019b44:	e7eb      	b.n	8019b1e <__copybits+0x18>
 8019b46:	f840 3b04 	str.w	r3, [r0], #4
 8019b4a:	e7f4      	b.n	8019b36 <__copybits+0x30>

08019b4c <__any_on>:
 8019b4c:	f100 0214 	add.w	r2, r0, #20
 8019b50:	6900      	ldr	r0, [r0, #16]
 8019b52:	114b      	asrs	r3, r1, #5
 8019b54:	4298      	cmp	r0, r3
 8019b56:	b510      	push	{r4, lr}
 8019b58:	db11      	blt.n	8019b7e <__any_on+0x32>
 8019b5a:	dd0a      	ble.n	8019b72 <__any_on+0x26>
 8019b5c:	f011 011f 	ands.w	r1, r1, #31
 8019b60:	d007      	beq.n	8019b72 <__any_on+0x26>
 8019b62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019b66:	fa24 f001 	lsr.w	r0, r4, r1
 8019b6a:	fa00 f101 	lsl.w	r1, r0, r1
 8019b6e:	428c      	cmp	r4, r1
 8019b70:	d10b      	bne.n	8019b8a <__any_on+0x3e>
 8019b72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019b76:	4293      	cmp	r3, r2
 8019b78:	d803      	bhi.n	8019b82 <__any_on+0x36>
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	bd10      	pop	{r4, pc}
 8019b7e:	4603      	mov	r3, r0
 8019b80:	e7f7      	b.n	8019b72 <__any_on+0x26>
 8019b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019b86:	2900      	cmp	r1, #0
 8019b88:	d0f5      	beq.n	8019b76 <__any_on+0x2a>
 8019b8a:	2001      	movs	r0, #1
 8019b8c:	e7f6      	b.n	8019b7c <__any_on+0x30>

08019b8e <_calloc_r>:
 8019b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b90:	fba1 2402 	umull	r2, r4, r1, r2
 8019b94:	b94c      	cbnz	r4, 8019baa <_calloc_r+0x1c>
 8019b96:	4611      	mov	r1, r2
 8019b98:	9201      	str	r2, [sp, #4]
 8019b9a:	f000 f87b 	bl	8019c94 <_malloc_r>
 8019b9e:	9a01      	ldr	r2, [sp, #4]
 8019ba0:	4605      	mov	r5, r0
 8019ba2:	b930      	cbnz	r0, 8019bb2 <_calloc_r+0x24>
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	b003      	add	sp, #12
 8019ba8:	bd30      	pop	{r4, r5, pc}
 8019baa:	220c      	movs	r2, #12
 8019bac:	6002      	str	r2, [r0, #0]
 8019bae:	2500      	movs	r5, #0
 8019bb0:	e7f8      	b.n	8019ba4 <_calloc_r+0x16>
 8019bb2:	4621      	mov	r1, r4
 8019bb4:	f7fc fb14 	bl	80161e0 <memset>
 8019bb8:	e7f4      	b.n	8019ba4 <_calloc_r+0x16>
	...

08019bbc <_free_r>:
 8019bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bbe:	2900      	cmp	r1, #0
 8019bc0:	d044      	beq.n	8019c4c <_free_r+0x90>
 8019bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bc6:	9001      	str	r0, [sp, #4]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	f1a1 0404 	sub.w	r4, r1, #4
 8019bce:	bfb8      	it	lt
 8019bd0:	18e4      	addlt	r4, r4, r3
 8019bd2:	f001 f889 	bl	801ace8 <__malloc_lock>
 8019bd6:	4a1e      	ldr	r2, [pc, #120]	; (8019c50 <_free_r+0x94>)
 8019bd8:	9801      	ldr	r0, [sp, #4]
 8019bda:	6813      	ldr	r3, [r2, #0]
 8019bdc:	b933      	cbnz	r3, 8019bec <_free_r+0x30>
 8019bde:	6063      	str	r3, [r4, #4]
 8019be0:	6014      	str	r4, [r2, #0]
 8019be2:	b003      	add	sp, #12
 8019be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019be8:	f001 b884 	b.w	801acf4 <__malloc_unlock>
 8019bec:	42a3      	cmp	r3, r4
 8019bee:	d908      	bls.n	8019c02 <_free_r+0x46>
 8019bf0:	6825      	ldr	r5, [r4, #0]
 8019bf2:	1961      	adds	r1, r4, r5
 8019bf4:	428b      	cmp	r3, r1
 8019bf6:	bf01      	itttt	eq
 8019bf8:	6819      	ldreq	r1, [r3, #0]
 8019bfa:	685b      	ldreq	r3, [r3, #4]
 8019bfc:	1949      	addeq	r1, r1, r5
 8019bfe:	6021      	streq	r1, [r4, #0]
 8019c00:	e7ed      	b.n	8019bde <_free_r+0x22>
 8019c02:	461a      	mov	r2, r3
 8019c04:	685b      	ldr	r3, [r3, #4]
 8019c06:	b10b      	cbz	r3, 8019c0c <_free_r+0x50>
 8019c08:	42a3      	cmp	r3, r4
 8019c0a:	d9fa      	bls.n	8019c02 <_free_r+0x46>
 8019c0c:	6811      	ldr	r1, [r2, #0]
 8019c0e:	1855      	adds	r5, r2, r1
 8019c10:	42a5      	cmp	r5, r4
 8019c12:	d10b      	bne.n	8019c2c <_free_r+0x70>
 8019c14:	6824      	ldr	r4, [r4, #0]
 8019c16:	4421      	add	r1, r4
 8019c18:	1854      	adds	r4, r2, r1
 8019c1a:	42a3      	cmp	r3, r4
 8019c1c:	6011      	str	r1, [r2, #0]
 8019c1e:	d1e0      	bne.n	8019be2 <_free_r+0x26>
 8019c20:	681c      	ldr	r4, [r3, #0]
 8019c22:	685b      	ldr	r3, [r3, #4]
 8019c24:	6053      	str	r3, [r2, #4]
 8019c26:	4421      	add	r1, r4
 8019c28:	6011      	str	r1, [r2, #0]
 8019c2a:	e7da      	b.n	8019be2 <_free_r+0x26>
 8019c2c:	d902      	bls.n	8019c34 <_free_r+0x78>
 8019c2e:	230c      	movs	r3, #12
 8019c30:	6003      	str	r3, [r0, #0]
 8019c32:	e7d6      	b.n	8019be2 <_free_r+0x26>
 8019c34:	6825      	ldr	r5, [r4, #0]
 8019c36:	1961      	adds	r1, r4, r5
 8019c38:	428b      	cmp	r3, r1
 8019c3a:	bf04      	itt	eq
 8019c3c:	6819      	ldreq	r1, [r3, #0]
 8019c3e:	685b      	ldreq	r3, [r3, #4]
 8019c40:	6063      	str	r3, [r4, #4]
 8019c42:	bf04      	itt	eq
 8019c44:	1949      	addeq	r1, r1, r5
 8019c46:	6021      	streq	r1, [r4, #0]
 8019c48:	6054      	str	r4, [r2, #4]
 8019c4a:	e7ca      	b.n	8019be2 <_free_r+0x26>
 8019c4c:	b003      	add	sp, #12
 8019c4e:	bd30      	pop	{r4, r5, pc}
 8019c50:	200039f0 	.word	0x200039f0

08019c54 <sbrk_aligned>:
 8019c54:	b570      	push	{r4, r5, r6, lr}
 8019c56:	4e0e      	ldr	r6, [pc, #56]	; (8019c90 <sbrk_aligned+0x3c>)
 8019c58:	460c      	mov	r4, r1
 8019c5a:	6831      	ldr	r1, [r6, #0]
 8019c5c:	4605      	mov	r5, r0
 8019c5e:	b911      	cbnz	r1, 8019c66 <sbrk_aligned+0x12>
 8019c60:	f000 fd26 	bl	801a6b0 <_sbrk_r>
 8019c64:	6030      	str	r0, [r6, #0]
 8019c66:	4621      	mov	r1, r4
 8019c68:	4628      	mov	r0, r5
 8019c6a:	f000 fd21 	bl	801a6b0 <_sbrk_r>
 8019c6e:	1c43      	adds	r3, r0, #1
 8019c70:	d00a      	beq.n	8019c88 <sbrk_aligned+0x34>
 8019c72:	1cc4      	adds	r4, r0, #3
 8019c74:	f024 0403 	bic.w	r4, r4, #3
 8019c78:	42a0      	cmp	r0, r4
 8019c7a:	d007      	beq.n	8019c8c <sbrk_aligned+0x38>
 8019c7c:	1a21      	subs	r1, r4, r0
 8019c7e:	4628      	mov	r0, r5
 8019c80:	f000 fd16 	bl	801a6b0 <_sbrk_r>
 8019c84:	3001      	adds	r0, #1
 8019c86:	d101      	bne.n	8019c8c <sbrk_aligned+0x38>
 8019c88:	f04f 34ff 	mov.w	r4, #4294967295
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	bd70      	pop	{r4, r5, r6, pc}
 8019c90:	200039f4 	.word	0x200039f4

08019c94 <_malloc_r>:
 8019c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c98:	1ccd      	adds	r5, r1, #3
 8019c9a:	f025 0503 	bic.w	r5, r5, #3
 8019c9e:	3508      	adds	r5, #8
 8019ca0:	2d0c      	cmp	r5, #12
 8019ca2:	bf38      	it	cc
 8019ca4:	250c      	movcc	r5, #12
 8019ca6:	2d00      	cmp	r5, #0
 8019ca8:	4607      	mov	r7, r0
 8019caa:	db01      	blt.n	8019cb0 <_malloc_r+0x1c>
 8019cac:	42a9      	cmp	r1, r5
 8019cae:	d905      	bls.n	8019cbc <_malloc_r+0x28>
 8019cb0:	230c      	movs	r3, #12
 8019cb2:	603b      	str	r3, [r7, #0]
 8019cb4:	2600      	movs	r6, #0
 8019cb6:	4630      	mov	r0, r6
 8019cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cbc:	4e2e      	ldr	r6, [pc, #184]	; (8019d78 <_malloc_r+0xe4>)
 8019cbe:	f001 f813 	bl	801ace8 <__malloc_lock>
 8019cc2:	6833      	ldr	r3, [r6, #0]
 8019cc4:	461c      	mov	r4, r3
 8019cc6:	bb34      	cbnz	r4, 8019d16 <_malloc_r+0x82>
 8019cc8:	4629      	mov	r1, r5
 8019cca:	4638      	mov	r0, r7
 8019ccc:	f7ff ffc2 	bl	8019c54 <sbrk_aligned>
 8019cd0:	1c43      	adds	r3, r0, #1
 8019cd2:	4604      	mov	r4, r0
 8019cd4:	d14d      	bne.n	8019d72 <_malloc_r+0xde>
 8019cd6:	6834      	ldr	r4, [r6, #0]
 8019cd8:	4626      	mov	r6, r4
 8019cda:	2e00      	cmp	r6, #0
 8019cdc:	d140      	bne.n	8019d60 <_malloc_r+0xcc>
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	4631      	mov	r1, r6
 8019ce2:	4638      	mov	r0, r7
 8019ce4:	eb04 0803 	add.w	r8, r4, r3
 8019ce8:	f000 fce2 	bl	801a6b0 <_sbrk_r>
 8019cec:	4580      	cmp	r8, r0
 8019cee:	d13a      	bne.n	8019d66 <_malloc_r+0xd2>
 8019cf0:	6821      	ldr	r1, [r4, #0]
 8019cf2:	3503      	adds	r5, #3
 8019cf4:	1a6d      	subs	r5, r5, r1
 8019cf6:	f025 0503 	bic.w	r5, r5, #3
 8019cfa:	3508      	adds	r5, #8
 8019cfc:	2d0c      	cmp	r5, #12
 8019cfe:	bf38      	it	cc
 8019d00:	250c      	movcc	r5, #12
 8019d02:	4629      	mov	r1, r5
 8019d04:	4638      	mov	r0, r7
 8019d06:	f7ff ffa5 	bl	8019c54 <sbrk_aligned>
 8019d0a:	3001      	adds	r0, #1
 8019d0c:	d02b      	beq.n	8019d66 <_malloc_r+0xd2>
 8019d0e:	6823      	ldr	r3, [r4, #0]
 8019d10:	442b      	add	r3, r5
 8019d12:	6023      	str	r3, [r4, #0]
 8019d14:	e00e      	b.n	8019d34 <_malloc_r+0xa0>
 8019d16:	6822      	ldr	r2, [r4, #0]
 8019d18:	1b52      	subs	r2, r2, r5
 8019d1a:	d41e      	bmi.n	8019d5a <_malloc_r+0xc6>
 8019d1c:	2a0b      	cmp	r2, #11
 8019d1e:	d916      	bls.n	8019d4e <_malloc_r+0xba>
 8019d20:	1961      	adds	r1, r4, r5
 8019d22:	42a3      	cmp	r3, r4
 8019d24:	6025      	str	r5, [r4, #0]
 8019d26:	bf18      	it	ne
 8019d28:	6059      	strne	r1, [r3, #4]
 8019d2a:	6863      	ldr	r3, [r4, #4]
 8019d2c:	bf08      	it	eq
 8019d2e:	6031      	streq	r1, [r6, #0]
 8019d30:	5162      	str	r2, [r4, r5]
 8019d32:	604b      	str	r3, [r1, #4]
 8019d34:	4638      	mov	r0, r7
 8019d36:	f104 060b 	add.w	r6, r4, #11
 8019d3a:	f000 ffdb 	bl	801acf4 <__malloc_unlock>
 8019d3e:	f026 0607 	bic.w	r6, r6, #7
 8019d42:	1d23      	adds	r3, r4, #4
 8019d44:	1af2      	subs	r2, r6, r3
 8019d46:	d0b6      	beq.n	8019cb6 <_malloc_r+0x22>
 8019d48:	1b9b      	subs	r3, r3, r6
 8019d4a:	50a3      	str	r3, [r4, r2]
 8019d4c:	e7b3      	b.n	8019cb6 <_malloc_r+0x22>
 8019d4e:	6862      	ldr	r2, [r4, #4]
 8019d50:	42a3      	cmp	r3, r4
 8019d52:	bf0c      	ite	eq
 8019d54:	6032      	streq	r2, [r6, #0]
 8019d56:	605a      	strne	r2, [r3, #4]
 8019d58:	e7ec      	b.n	8019d34 <_malloc_r+0xa0>
 8019d5a:	4623      	mov	r3, r4
 8019d5c:	6864      	ldr	r4, [r4, #4]
 8019d5e:	e7b2      	b.n	8019cc6 <_malloc_r+0x32>
 8019d60:	4634      	mov	r4, r6
 8019d62:	6876      	ldr	r6, [r6, #4]
 8019d64:	e7b9      	b.n	8019cda <_malloc_r+0x46>
 8019d66:	230c      	movs	r3, #12
 8019d68:	603b      	str	r3, [r7, #0]
 8019d6a:	4638      	mov	r0, r7
 8019d6c:	f000 ffc2 	bl	801acf4 <__malloc_unlock>
 8019d70:	e7a1      	b.n	8019cb6 <_malloc_r+0x22>
 8019d72:	6025      	str	r5, [r4, #0]
 8019d74:	e7de      	b.n	8019d34 <_malloc_r+0xa0>
 8019d76:	bf00      	nop
 8019d78:	200039f0 	.word	0x200039f0

08019d7c <__ssputs_r>:
 8019d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d80:	688e      	ldr	r6, [r1, #8]
 8019d82:	429e      	cmp	r6, r3
 8019d84:	4682      	mov	sl, r0
 8019d86:	460c      	mov	r4, r1
 8019d88:	4690      	mov	r8, r2
 8019d8a:	461f      	mov	r7, r3
 8019d8c:	d838      	bhi.n	8019e00 <__ssputs_r+0x84>
 8019d8e:	898a      	ldrh	r2, [r1, #12]
 8019d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d94:	d032      	beq.n	8019dfc <__ssputs_r+0x80>
 8019d96:	6825      	ldr	r5, [r4, #0]
 8019d98:	6909      	ldr	r1, [r1, #16]
 8019d9a:	eba5 0901 	sub.w	r9, r5, r1
 8019d9e:	6965      	ldr	r5, [r4, #20]
 8019da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019da8:	3301      	adds	r3, #1
 8019daa:	444b      	add	r3, r9
 8019dac:	106d      	asrs	r5, r5, #1
 8019dae:	429d      	cmp	r5, r3
 8019db0:	bf38      	it	cc
 8019db2:	461d      	movcc	r5, r3
 8019db4:	0553      	lsls	r3, r2, #21
 8019db6:	d531      	bpl.n	8019e1c <__ssputs_r+0xa0>
 8019db8:	4629      	mov	r1, r5
 8019dba:	f7ff ff6b 	bl	8019c94 <_malloc_r>
 8019dbe:	4606      	mov	r6, r0
 8019dc0:	b950      	cbnz	r0, 8019dd8 <__ssputs_r+0x5c>
 8019dc2:	230c      	movs	r3, #12
 8019dc4:	f8ca 3000 	str.w	r3, [sl]
 8019dc8:	89a3      	ldrh	r3, [r4, #12]
 8019dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dce:	81a3      	strh	r3, [r4, #12]
 8019dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8019dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dd8:	6921      	ldr	r1, [r4, #16]
 8019dda:	464a      	mov	r2, r9
 8019ddc:	f7fc f9f2 	bl	80161c4 <memcpy>
 8019de0:	89a3      	ldrh	r3, [r4, #12]
 8019de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dea:	81a3      	strh	r3, [r4, #12]
 8019dec:	6126      	str	r6, [r4, #16]
 8019dee:	6165      	str	r5, [r4, #20]
 8019df0:	444e      	add	r6, r9
 8019df2:	eba5 0509 	sub.w	r5, r5, r9
 8019df6:	6026      	str	r6, [r4, #0]
 8019df8:	60a5      	str	r5, [r4, #8]
 8019dfa:	463e      	mov	r6, r7
 8019dfc:	42be      	cmp	r6, r7
 8019dfe:	d900      	bls.n	8019e02 <__ssputs_r+0x86>
 8019e00:	463e      	mov	r6, r7
 8019e02:	6820      	ldr	r0, [r4, #0]
 8019e04:	4632      	mov	r2, r6
 8019e06:	4641      	mov	r1, r8
 8019e08:	f000 ff54 	bl	801acb4 <memmove>
 8019e0c:	68a3      	ldr	r3, [r4, #8]
 8019e0e:	1b9b      	subs	r3, r3, r6
 8019e10:	60a3      	str	r3, [r4, #8]
 8019e12:	6823      	ldr	r3, [r4, #0]
 8019e14:	4433      	add	r3, r6
 8019e16:	6023      	str	r3, [r4, #0]
 8019e18:	2000      	movs	r0, #0
 8019e1a:	e7db      	b.n	8019dd4 <__ssputs_r+0x58>
 8019e1c:	462a      	mov	r2, r5
 8019e1e:	f000 ff6f 	bl	801ad00 <_realloc_r>
 8019e22:	4606      	mov	r6, r0
 8019e24:	2800      	cmp	r0, #0
 8019e26:	d1e1      	bne.n	8019dec <__ssputs_r+0x70>
 8019e28:	6921      	ldr	r1, [r4, #16]
 8019e2a:	4650      	mov	r0, sl
 8019e2c:	f7ff fec6 	bl	8019bbc <_free_r>
 8019e30:	e7c7      	b.n	8019dc2 <__ssputs_r+0x46>
	...

08019e34 <_svfiprintf_r>:
 8019e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e38:	4698      	mov	r8, r3
 8019e3a:	898b      	ldrh	r3, [r1, #12]
 8019e3c:	061b      	lsls	r3, r3, #24
 8019e3e:	b09d      	sub	sp, #116	; 0x74
 8019e40:	4607      	mov	r7, r0
 8019e42:	460d      	mov	r5, r1
 8019e44:	4614      	mov	r4, r2
 8019e46:	d50e      	bpl.n	8019e66 <_svfiprintf_r+0x32>
 8019e48:	690b      	ldr	r3, [r1, #16]
 8019e4a:	b963      	cbnz	r3, 8019e66 <_svfiprintf_r+0x32>
 8019e4c:	2140      	movs	r1, #64	; 0x40
 8019e4e:	f7ff ff21 	bl	8019c94 <_malloc_r>
 8019e52:	6028      	str	r0, [r5, #0]
 8019e54:	6128      	str	r0, [r5, #16]
 8019e56:	b920      	cbnz	r0, 8019e62 <_svfiprintf_r+0x2e>
 8019e58:	230c      	movs	r3, #12
 8019e5a:	603b      	str	r3, [r7, #0]
 8019e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e60:	e0d1      	b.n	801a006 <_svfiprintf_r+0x1d2>
 8019e62:	2340      	movs	r3, #64	; 0x40
 8019e64:	616b      	str	r3, [r5, #20]
 8019e66:	2300      	movs	r3, #0
 8019e68:	9309      	str	r3, [sp, #36]	; 0x24
 8019e6a:	2320      	movs	r3, #32
 8019e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e74:	2330      	movs	r3, #48	; 0x30
 8019e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a020 <_svfiprintf_r+0x1ec>
 8019e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e7e:	f04f 0901 	mov.w	r9, #1
 8019e82:	4623      	mov	r3, r4
 8019e84:	469a      	mov	sl, r3
 8019e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e8a:	b10a      	cbz	r2, 8019e90 <_svfiprintf_r+0x5c>
 8019e8c:	2a25      	cmp	r2, #37	; 0x25
 8019e8e:	d1f9      	bne.n	8019e84 <_svfiprintf_r+0x50>
 8019e90:	ebba 0b04 	subs.w	fp, sl, r4
 8019e94:	d00b      	beq.n	8019eae <_svfiprintf_r+0x7a>
 8019e96:	465b      	mov	r3, fp
 8019e98:	4622      	mov	r2, r4
 8019e9a:	4629      	mov	r1, r5
 8019e9c:	4638      	mov	r0, r7
 8019e9e:	f7ff ff6d 	bl	8019d7c <__ssputs_r>
 8019ea2:	3001      	adds	r0, #1
 8019ea4:	f000 80aa 	beq.w	8019ffc <_svfiprintf_r+0x1c8>
 8019ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019eaa:	445a      	add	r2, fp
 8019eac:	9209      	str	r2, [sp, #36]	; 0x24
 8019eae:	f89a 3000 	ldrb.w	r3, [sl]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	f000 80a2 	beq.w	8019ffc <_svfiprintf_r+0x1c8>
 8019eb8:	2300      	movs	r3, #0
 8019eba:	f04f 32ff 	mov.w	r2, #4294967295
 8019ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ec2:	f10a 0a01 	add.w	sl, sl, #1
 8019ec6:	9304      	str	r3, [sp, #16]
 8019ec8:	9307      	str	r3, [sp, #28]
 8019eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019ece:	931a      	str	r3, [sp, #104]	; 0x68
 8019ed0:	4654      	mov	r4, sl
 8019ed2:	2205      	movs	r2, #5
 8019ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ed8:	4851      	ldr	r0, [pc, #324]	; (801a020 <_svfiprintf_r+0x1ec>)
 8019eda:	f7e6 f999 	bl	8000210 <memchr>
 8019ede:	9a04      	ldr	r2, [sp, #16]
 8019ee0:	b9d8      	cbnz	r0, 8019f1a <_svfiprintf_r+0xe6>
 8019ee2:	06d0      	lsls	r0, r2, #27
 8019ee4:	bf44      	itt	mi
 8019ee6:	2320      	movmi	r3, #32
 8019ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019eec:	0711      	lsls	r1, r2, #28
 8019eee:	bf44      	itt	mi
 8019ef0:	232b      	movmi	r3, #43	; 0x2b
 8019ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8019efa:	2b2a      	cmp	r3, #42	; 0x2a
 8019efc:	d015      	beq.n	8019f2a <_svfiprintf_r+0xf6>
 8019efe:	9a07      	ldr	r2, [sp, #28]
 8019f00:	4654      	mov	r4, sl
 8019f02:	2000      	movs	r0, #0
 8019f04:	f04f 0c0a 	mov.w	ip, #10
 8019f08:	4621      	mov	r1, r4
 8019f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f0e:	3b30      	subs	r3, #48	; 0x30
 8019f10:	2b09      	cmp	r3, #9
 8019f12:	d94e      	bls.n	8019fb2 <_svfiprintf_r+0x17e>
 8019f14:	b1b0      	cbz	r0, 8019f44 <_svfiprintf_r+0x110>
 8019f16:	9207      	str	r2, [sp, #28]
 8019f18:	e014      	b.n	8019f44 <_svfiprintf_r+0x110>
 8019f1a:	eba0 0308 	sub.w	r3, r0, r8
 8019f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8019f22:	4313      	orrs	r3, r2
 8019f24:	9304      	str	r3, [sp, #16]
 8019f26:	46a2      	mov	sl, r4
 8019f28:	e7d2      	b.n	8019ed0 <_svfiprintf_r+0x9c>
 8019f2a:	9b03      	ldr	r3, [sp, #12]
 8019f2c:	1d19      	adds	r1, r3, #4
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	9103      	str	r1, [sp, #12]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	bfbb      	ittet	lt
 8019f36:	425b      	neglt	r3, r3
 8019f38:	f042 0202 	orrlt.w	r2, r2, #2
 8019f3c:	9307      	strge	r3, [sp, #28]
 8019f3e:	9307      	strlt	r3, [sp, #28]
 8019f40:	bfb8      	it	lt
 8019f42:	9204      	strlt	r2, [sp, #16]
 8019f44:	7823      	ldrb	r3, [r4, #0]
 8019f46:	2b2e      	cmp	r3, #46	; 0x2e
 8019f48:	d10c      	bne.n	8019f64 <_svfiprintf_r+0x130>
 8019f4a:	7863      	ldrb	r3, [r4, #1]
 8019f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8019f4e:	d135      	bne.n	8019fbc <_svfiprintf_r+0x188>
 8019f50:	9b03      	ldr	r3, [sp, #12]
 8019f52:	1d1a      	adds	r2, r3, #4
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	9203      	str	r2, [sp, #12]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	bfb8      	it	lt
 8019f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f60:	3402      	adds	r4, #2
 8019f62:	9305      	str	r3, [sp, #20]
 8019f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a030 <_svfiprintf_r+0x1fc>
 8019f68:	7821      	ldrb	r1, [r4, #0]
 8019f6a:	2203      	movs	r2, #3
 8019f6c:	4650      	mov	r0, sl
 8019f6e:	f7e6 f94f 	bl	8000210 <memchr>
 8019f72:	b140      	cbz	r0, 8019f86 <_svfiprintf_r+0x152>
 8019f74:	2340      	movs	r3, #64	; 0x40
 8019f76:	eba0 000a 	sub.w	r0, r0, sl
 8019f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8019f7e:	9b04      	ldr	r3, [sp, #16]
 8019f80:	4303      	orrs	r3, r0
 8019f82:	3401      	adds	r4, #1
 8019f84:	9304      	str	r3, [sp, #16]
 8019f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f8a:	4826      	ldr	r0, [pc, #152]	; (801a024 <_svfiprintf_r+0x1f0>)
 8019f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f90:	2206      	movs	r2, #6
 8019f92:	f7e6 f93d 	bl	8000210 <memchr>
 8019f96:	2800      	cmp	r0, #0
 8019f98:	d038      	beq.n	801a00c <_svfiprintf_r+0x1d8>
 8019f9a:	4b23      	ldr	r3, [pc, #140]	; (801a028 <_svfiprintf_r+0x1f4>)
 8019f9c:	bb1b      	cbnz	r3, 8019fe6 <_svfiprintf_r+0x1b2>
 8019f9e:	9b03      	ldr	r3, [sp, #12]
 8019fa0:	3307      	adds	r3, #7
 8019fa2:	f023 0307 	bic.w	r3, r3, #7
 8019fa6:	3308      	adds	r3, #8
 8019fa8:	9303      	str	r3, [sp, #12]
 8019faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fac:	4433      	add	r3, r6
 8019fae:	9309      	str	r3, [sp, #36]	; 0x24
 8019fb0:	e767      	b.n	8019e82 <_svfiprintf_r+0x4e>
 8019fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fb6:	460c      	mov	r4, r1
 8019fb8:	2001      	movs	r0, #1
 8019fba:	e7a5      	b.n	8019f08 <_svfiprintf_r+0xd4>
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	3401      	adds	r4, #1
 8019fc0:	9305      	str	r3, [sp, #20]
 8019fc2:	4619      	mov	r1, r3
 8019fc4:	f04f 0c0a 	mov.w	ip, #10
 8019fc8:	4620      	mov	r0, r4
 8019fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fce:	3a30      	subs	r2, #48	; 0x30
 8019fd0:	2a09      	cmp	r2, #9
 8019fd2:	d903      	bls.n	8019fdc <_svfiprintf_r+0x1a8>
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d0c5      	beq.n	8019f64 <_svfiprintf_r+0x130>
 8019fd8:	9105      	str	r1, [sp, #20]
 8019fda:	e7c3      	b.n	8019f64 <_svfiprintf_r+0x130>
 8019fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fe0:	4604      	mov	r4, r0
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	e7f0      	b.n	8019fc8 <_svfiprintf_r+0x194>
 8019fe6:	ab03      	add	r3, sp, #12
 8019fe8:	9300      	str	r3, [sp, #0]
 8019fea:	462a      	mov	r2, r5
 8019fec:	4b0f      	ldr	r3, [pc, #60]	; (801a02c <_svfiprintf_r+0x1f8>)
 8019fee:	a904      	add	r1, sp, #16
 8019ff0:	4638      	mov	r0, r7
 8019ff2:	f7fc f99d 	bl	8016330 <_printf_float>
 8019ff6:	1c42      	adds	r2, r0, #1
 8019ff8:	4606      	mov	r6, r0
 8019ffa:	d1d6      	bne.n	8019faa <_svfiprintf_r+0x176>
 8019ffc:	89ab      	ldrh	r3, [r5, #12]
 8019ffe:	065b      	lsls	r3, r3, #25
 801a000:	f53f af2c 	bmi.w	8019e5c <_svfiprintf_r+0x28>
 801a004:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a006:	b01d      	add	sp, #116	; 0x74
 801a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a00c:	ab03      	add	r3, sp, #12
 801a00e:	9300      	str	r3, [sp, #0]
 801a010:	462a      	mov	r2, r5
 801a012:	4b06      	ldr	r3, [pc, #24]	; (801a02c <_svfiprintf_r+0x1f8>)
 801a014:	a904      	add	r1, sp, #16
 801a016:	4638      	mov	r0, r7
 801a018:	f7fc fc2e 	bl	8016878 <_printf_i>
 801a01c:	e7eb      	b.n	8019ff6 <_svfiprintf_r+0x1c2>
 801a01e:	bf00      	nop
 801a020:	0801beec 	.word	0x0801beec
 801a024:	0801bef6 	.word	0x0801bef6
 801a028:	08016331 	.word	0x08016331
 801a02c:	08019d7d 	.word	0x08019d7d
 801a030:	0801bef2 	.word	0x0801bef2

0801a034 <_sungetc_r>:
 801a034:	b538      	push	{r3, r4, r5, lr}
 801a036:	1c4b      	adds	r3, r1, #1
 801a038:	4614      	mov	r4, r2
 801a03a:	d103      	bne.n	801a044 <_sungetc_r+0x10>
 801a03c:	f04f 35ff 	mov.w	r5, #4294967295
 801a040:	4628      	mov	r0, r5
 801a042:	bd38      	pop	{r3, r4, r5, pc}
 801a044:	8993      	ldrh	r3, [r2, #12]
 801a046:	f023 0320 	bic.w	r3, r3, #32
 801a04a:	8193      	strh	r3, [r2, #12]
 801a04c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a04e:	6852      	ldr	r2, [r2, #4]
 801a050:	b2cd      	uxtb	r5, r1
 801a052:	b18b      	cbz	r3, 801a078 <_sungetc_r+0x44>
 801a054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a056:	4293      	cmp	r3, r2
 801a058:	dd08      	ble.n	801a06c <_sungetc_r+0x38>
 801a05a:	6823      	ldr	r3, [r4, #0]
 801a05c:	1e5a      	subs	r2, r3, #1
 801a05e:	6022      	str	r2, [r4, #0]
 801a060:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a064:	6863      	ldr	r3, [r4, #4]
 801a066:	3301      	adds	r3, #1
 801a068:	6063      	str	r3, [r4, #4]
 801a06a:	e7e9      	b.n	801a040 <_sungetc_r+0xc>
 801a06c:	4621      	mov	r1, r4
 801a06e:	f000 fbef 	bl	801a850 <__submore>
 801a072:	2800      	cmp	r0, #0
 801a074:	d0f1      	beq.n	801a05a <_sungetc_r+0x26>
 801a076:	e7e1      	b.n	801a03c <_sungetc_r+0x8>
 801a078:	6921      	ldr	r1, [r4, #16]
 801a07a:	6823      	ldr	r3, [r4, #0]
 801a07c:	b151      	cbz	r1, 801a094 <_sungetc_r+0x60>
 801a07e:	4299      	cmp	r1, r3
 801a080:	d208      	bcs.n	801a094 <_sungetc_r+0x60>
 801a082:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a086:	42a9      	cmp	r1, r5
 801a088:	d104      	bne.n	801a094 <_sungetc_r+0x60>
 801a08a:	3b01      	subs	r3, #1
 801a08c:	3201      	adds	r2, #1
 801a08e:	6023      	str	r3, [r4, #0]
 801a090:	6062      	str	r2, [r4, #4]
 801a092:	e7d5      	b.n	801a040 <_sungetc_r+0xc>
 801a094:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801a098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a09c:	6363      	str	r3, [r4, #52]	; 0x34
 801a09e:	2303      	movs	r3, #3
 801a0a0:	63a3      	str	r3, [r4, #56]	; 0x38
 801a0a2:	4623      	mov	r3, r4
 801a0a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a0a8:	6023      	str	r3, [r4, #0]
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	e7dc      	b.n	801a068 <_sungetc_r+0x34>

0801a0ae <__ssrefill_r>:
 801a0ae:	b510      	push	{r4, lr}
 801a0b0:	460c      	mov	r4, r1
 801a0b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a0b4:	b169      	cbz	r1, 801a0d2 <__ssrefill_r+0x24>
 801a0b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0ba:	4299      	cmp	r1, r3
 801a0bc:	d001      	beq.n	801a0c2 <__ssrefill_r+0x14>
 801a0be:	f7ff fd7d 	bl	8019bbc <_free_r>
 801a0c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a0c4:	6063      	str	r3, [r4, #4]
 801a0c6:	2000      	movs	r0, #0
 801a0c8:	6360      	str	r0, [r4, #52]	; 0x34
 801a0ca:	b113      	cbz	r3, 801a0d2 <__ssrefill_r+0x24>
 801a0cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a0ce:	6023      	str	r3, [r4, #0]
 801a0d0:	bd10      	pop	{r4, pc}
 801a0d2:	6923      	ldr	r3, [r4, #16]
 801a0d4:	6023      	str	r3, [r4, #0]
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	6063      	str	r3, [r4, #4]
 801a0da:	89a3      	ldrh	r3, [r4, #12]
 801a0dc:	f043 0320 	orr.w	r3, r3, #32
 801a0e0:	81a3      	strh	r3, [r4, #12]
 801a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 801a0e6:	e7f3      	b.n	801a0d0 <__ssrefill_r+0x22>

0801a0e8 <__ssvfiscanf_r>:
 801a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0ec:	460c      	mov	r4, r1
 801a0ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801a0f2:	2100      	movs	r1, #0
 801a0f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801a0f8:	49a6      	ldr	r1, [pc, #664]	; (801a394 <__ssvfiscanf_r+0x2ac>)
 801a0fa:	91a0      	str	r1, [sp, #640]	; 0x280
 801a0fc:	f10d 0804 	add.w	r8, sp, #4
 801a100:	49a5      	ldr	r1, [pc, #660]	; (801a398 <__ssvfiscanf_r+0x2b0>)
 801a102:	4fa6      	ldr	r7, [pc, #664]	; (801a39c <__ssvfiscanf_r+0x2b4>)
 801a104:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801a3a0 <__ssvfiscanf_r+0x2b8>
 801a108:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801a10c:	4606      	mov	r6, r0
 801a10e:	91a1      	str	r1, [sp, #644]	; 0x284
 801a110:	9300      	str	r3, [sp, #0]
 801a112:	7813      	ldrb	r3, [r2, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	f000 815a 	beq.w	801a3ce <__ssvfiscanf_r+0x2e6>
 801a11a:	5dd9      	ldrb	r1, [r3, r7]
 801a11c:	f011 0108 	ands.w	r1, r1, #8
 801a120:	f102 0501 	add.w	r5, r2, #1
 801a124:	d019      	beq.n	801a15a <__ssvfiscanf_r+0x72>
 801a126:	6863      	ldr	r3, [r4, #4]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	dd0f      	ble.n	801a14c <__ssvfiscanf_r+0x64>
 801a12c:	6823      	ldr	r3, [r4, #0]
 801a12e:	781a      	ldrb	r2, [r3, #0]
 801a130:	5cba      	ldrb	r2, [r7, r2]
 801a132:	0712      	lsls	r2, r2, #28
 801a134:	d401      	bmi.n	801a13a <__ssvfiscanf_r+0x52>
 801a136:	462a      	mov	r2, r5
 801a138:	e7eb      	b.n	801a112 <__ssvfiscanf_r+0x2a>
 801a13a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a13c:	3201      	adds	r2, #1
 801a13e:	9245      	str	r2, [sp, #276]	; 0x114
 801a140:	6862      	ldr	r2, [r4, #4]
 801a142:	3301      	adds	r3, #1
 801a144:	3a01      	subs	r2, #1
 801a146:	6062      	str	r2, [r4, #4]
 801a148:	6023      	str	r3, [r4, #0]
 801a14a:	e7ec      	b.n	801a126 <__ssvfiscanf_r+0x3e>
 801a14c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a14e:	4621      	mov	r1, r4
 801a150:	4630      	mov	r0, r6
 801a152:	4798      	blx	r3
 801a154:	2800      	cmp	r0, #0
 801a156:	d0e9      	beq.n	801a12c <__ssvfiscanf_r+0x44>
 801a158:	e7ed      	b.n	801a136 <__ssvfiscanf_r+0x4e>
 801a15a:	2b25      	cmp	r3, #37	; 0x25
 801a15c:	d012      	beq.n	801a184 <__ssvfiscanf_r+0x9c>
 801a15e:	469a      	mov	sl, r3
 801a160:	6863      	ldr	r3, [r4, #4]
 801a162:	2b00      	cmp	r3, #0
 801a164:	f340 8091 	ble.w	801a28a <__ssvfiscanf_r+0x1a2>
 801a168:	6822      	ldr	r2, [r4, #0]
 801a16a:	7813      	ldrb	r3, [r2, #0]
 801a16c:	4553      	cmp	r3, sl
 801a16e:	f040 812e 	bne.w	801a3ce <__ssvfiscanf_r+0x2e6>
 801a172:	6863      	ldr	r3, [r4, #4]
 801a174:	3b01      	subs	r3, #1
 801a176:	6063      	str	r3, [r4, #4]
 801a178:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801a17a:	3201      	adds	r2, #1
 801a17c:	3301      	adds	r3, #1
 801a17e:	6022      	str	r2, [r4, #0]
 801a180:	9345      	str	r3, [sp, #276]	; 0x114
 801a182:	e7d8      	b.n	801a136 <__ssvfiscanf_r+0x4e>
 801a184:	9141      	str	r1, [sp, #260]	; 0x104
 801a186:	9143      	str	r1, [sp, #268]	; 0x10c
 801a188:	7853      	ldrb	r3, [r2, #1]
 801a18a:	2b2a      	cmp	r3, #42	; 0x2a
 801a18c:	bf02      	ittt	eq
 801a18e:	2310      	moveq	r3, #16
 801a190:	1c95      	addeq	r5, r2, #2
 801a192:	9341      	streq	r3, [sp, #260]	; 0x104
 801a194:	220a      	movs	r2, #10
 801a196:	46aa      	mov	sl, r5
 801a198:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801a19c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801a1a0:	2b09      	cmp	r3, #9
 801a1a2:	d91d      	bls.n	801a1e0 <__ssvfiscanf_r+0xf8>
 801a1a4:	487e      	ldr	r0, [pc, #504]	; (801a3a0 <__ssvfiscanf_r+0x2b8>)
 801a1a6:	2203      	movs	r2, #3
 801a1a8:	f7e6 f832 	bl	8000210 <memchr>
 801a1ac:	b140      	cbz	r0, 801a1c0 <__ssvfiscanf_r+0xd8>
 801a1ae:	2301      	movs	r3, #1
 801a1b0:	eba0 0009 	sub.w	r0, r0, r9
 801a1b4:	fa03 f000 	lsl.w	r0, r3, r0
 801a1b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a1ba:	4318      	orrs	r0, r3
 801a1bc:	9041      	str	r0, [sp, #260]	; 0x104
 801a1be:	4655      	mov	r5, sl
 801a1c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a1c4:	2b78      	cmp	r3, #120	; 0x78
 801a1c6:	d806      	bhi.n	801a1d6 <__ssvfiscanf_r+0xee>
 801a1c8:	2b57      	cmp	r3, #87	; 0x57
 801a1ca:	d810      	bhi.n	801a1ee <__ssvfiscanf_r+0x106>
 801a1cc:	2b25      	cmp	r3, #37	; 0x25
 801a1ce:	d0c6      	beq.n	801a15e <__ssvfiscanf_r+0x76>
 801a1d0:	d856      	bhi.n	801a280 <__ssvfiscanf_r+0x198>
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d064      	beq.n	801a2a0 <__ssvfiscanf_r+0x1b8>
 801a1d6:	2303      	movs	r3, #3
 801a1d8:	9347      	str	r3, [sp, #284]	; 0x11c
 801a1da:	230a      	movs	r3, #10
 801a1dc:	9342      	str	r3, [sp, #264]	; 0x108
 801a1de:	e071      	b.n	801a2c4 <__ssvfiscanf_r+0x1dc>
 801a1e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a1e2:	fb02 1103 	mla	r1, r2, r3, r1
 801a1e6:	3930      	subs	r1, #48	; 0x30
 801a1e8:	9143      	str	r1, [sp, #268]	; 0x10c
 801a1ea:	4655      	mov	r5, sl
 801a1ec:	e7d3      	b.n	801a196 <__ssvfiscanf_r+0xae>
 801a1ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801a1f2:	2a20      	cmp	r2, #32
 801a1f4:	d8ef      	bhi.n	801a1d6 <__ssvfiscanf_r+0xee>
 801a1f6:	a101      	add	r1, pc, #4	; (adr r1, 801a1fc <__ssvfiscanf_r+0x114>)
 801a1f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a1fc:	0801a2af 	.word	0x0801a2af
 801a200:	0801a1d7 	.word	0x0801a1d7
 801a204:	0801a1d7 	.word	0x0801a1d7
 801a208:	0801a30d 	.word	0x0801a30d
 801a20c:	0801a1d7 	.word	0x0801a1d7
 801a210:	0801a1d7 	.word	0x0801a1d7
 801a214:	0801a1d7 	.word	0x0801a1d7
 801a218:	0801a1d7 	.word	0x0801a1d7
 801a21c:	0801a1d7 	.word	0x0801a1d7
 801a220:	0801a1d7 	.word	0x0801a1d7
 801a224:	0801a1d7 	.word	0x0801a1d7
 801a228:	0801a323 	.word	0x0801a323
 801a22c:	0801a2f9 	.word	0x0801a2f9
 801a230:	0801a287 	.word	0x0801a287
 801a234:	0801a287 	.word	0x0801a287
 801a238:	0801a287 	.word	0x0801a287
 801a23c:	0801a1d7 	.word	0x0801a1d7
 801a240:	0801a2fd 	.word	0x0801a2fd
 801a244:	0801a1d7 	.word	0x0801a1d7
 801a248:	0801a1d7 	.word	0x0801a1d7
 801a24c:	0801a1d7 	.word	0x0801a1d7
 801a250:	0801a1d7 	.word	0x0801a1d7
 801a254:	0801a333 	.word	0x0801a333
 801a258:	0801a305 	.word	0x0801a305
 801a25c:	0801a2a7 	.word	0x0801a2a7
 801a260:	0801a1d7 	.word	0x0801a1d7
 801a264:	0801a1d7 	.word	0x0801a1d7
 801a268:	0801a32f 	.word	0x0801a32f
 801a26c:	0801a1d7 	.word	0x0801a1d7
 801a270:	0801a2f9 	.word	0x0801a2f9
 801a274:	0801a1d7 	.word	0x0801a1d7
 801a278:	0801a1d7 	.word	0x0801a1d7
 801a27c:	0801a2af 	.word	0x0801a2af
 801a280:	3b45      	subs	r3, #69	; 0x45
 801a282:	2b02      	cmp	r3, #2
 801a284:	d8a7      	bhi.n	801a1d6 <__ssvfiscanf_r+0xee>
 801a286:	2305      	movs	r3, #5
 801a288:	e01b      	b.n	801a2c2 <__ssvfiscanf_r+0x1da>
 801a28a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a28c:	4621      	mov	r1, r4
 801a28e:	4630      	mov	r0, r6
 801a290:	4798      	blx	r3
 801a292:	2800      	cmp	r0, #0
 801a294:	f43f af68 	beq.w	801a168 <__ssvfiscanf_r+0x80>
 801a298:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a29a:	2800      	cmp	r0, #0
 801a29c:	f040 808d 	bne.w	801a3ba <__ssvfiscanf_r+0x2d2>
 801a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 801a2a4:	e08f      	b.n	801a3c6 <__ssvfiscanf_r+0x2de>
 801a2a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a2a8:	f042 0220 	orr.w	r2, r2, #32
 801a2ac:	9241      	str	r2, [sp, #260]	; 0x104
 801a2ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a2b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a2b4:	9241      	str	r2, [sp, #260]	; 0x104
 801a2b6:	2210      	movs	r2, #16
 801a2b8:	2b6f      	cmp	r3, #111	; 0x6f
 801a2ba:	9242      	str	r2, [sp, #264]	; 0x108
 801a2bc:	bf34      	ite	cc
 801a2be:	2303      	movcc	r3, #3
 801a2c0:	2304      	movcs	r3, #4
 801a2c2:	9347      	str	r3, [sp, #284]	; 0x11c
 801a2c4:	6863      	ldr	r3, [r4, #4]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	dd42      	ble.n	801a350 <__ssvfiscanf_r+0x268>
 801a2ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a2cc:	0659      	lsls	r1, r3, #25
 801a2ce:	d404      	bmi.n	801a2da <__ssvfiscanf_r+0x1f2>
 801a2d0:	6823      	ldr	r3, [r4, #0]
 801a2d2:	781a      	ldrb	r2, [r3, #0]
 801a2d4:	5cba      	ldrb	r2, [r7, r2]
 801a2d6:	0712      	lsls	r2, r2, #28
 801a2d8:	d441      	bmi.n	801a35e <__ssvfiscanf_r+0x276>
 801a2da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a2dc:	2b02      	cmp	r3, #2
 801a2de:	dc50      	bgt.n	801a382 <__ssvfiscanf_r+0x29a>
 801a2e0:	466b      	mov	r3, sp
 801a2e2:	4622      	mov	r2, r4
 801a2e4:	a941      	add	r1, sp, #260	; 0x104
 801a2e6:	4630      	mov	r0, r6
 801a2e8:	f000 f876 	bl	801a3d8 <_scanf_chars>
 801a2ec:	2801      	cmp	r0, #1
 801a2ee:	d06e      	beq.n	801a3ce <__ssvfiscanf_r+0x2e6>
 801a2f0:	2802      	cmp	r0, #2
 801a2f2:	f47f af20 	bne.w	801a136 <__ssvfiscanf_r+0x4e>
 801a2f6:	e7cf      	b.n	801a298 <__ssvfiscanf_r+0x1b0>
 801a2f8:	220a      	movs	r2, #10
 801a2fa:	e7dd      	b.n	801a2b8 <__ssvfiscanf_r+0x1d0>
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	9342      	str	r3, [sp, #264]	; 0x108
 801a300:	2303      	movs	r3, #3
 801a302:	e7de      	b.n	801a2c2 <__ssvfiscanf_r+0x1da>
 801a304:	2308      	movs	r3, #8
 801a306:	9342      	str	r3, [sp, #264]	; 0x108
 801a308:	2304      	movs	r3, #4
 801a30a:	e7da      	b.n	801a2c2 <__ssvfiscanf_r+0x1da>
 801a30c:	4629      	mov	r1, r5
 801a30e:	4640      	mov	r0, r8
 801a310:	f000 f9de 	bl	801a6d0 <__sccl>
 801a314:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a31a:	9341      	str	r3, [sp, #260]	; 0x104
 801a31c:	4605      	mov	r5, r0
 801a31e:	2301      	movs	r3, #1
 801a320:	e7cf      	b.n	801a2c2 <__ssvfiscanf_r+0x1da>
 801a322:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a328:	9341      	str	r3, [sp, #260]	; 0x104
 801a32a:	2300      	movs	r3, #0
 801a32c:	e7c9      	b.n	801a2c2 <__ssvfiscanf_r+0x1da>
 801a32e:	2302      	movs	r3, #2
 801a330:	e7c7      	b.n	801a2c2 <__ssvfiscanf_r+0x1da>
 801a332:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a334:	06c3      	lsls	r3, r0, #27
 801a336:	f53f aefe 	bmi.w	801a136 <__ssvfiscanf_r+0x4e>
 801a33a:	9b00      	ldr	r3, [sp, #0]
 801a33c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a33e:	1d19      	adds	r1, r3, #4
 801a340:	9100      	str	r1, [sp, #0]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	f010 0f01 	tst.w	r0, #1
 801a348:	bf14      	ite	ne
 801a34a:	801a      	strhne	r2, [r3, #0]
 801a34c:	601a      	streq	r2, [r3, #0]
 801a34e:	e6f2      	b.n	801a136 <__ssvfiscanf_r+0x4e>
 801a350:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a352:	4621      	mov	r1, r4
 801a354:	4630      	mov	r0, r6
 801a356:	4798      	blx	r3
 801a358:	2800      	cmp	r0, #0
 801a35a:	d0b6      	beq.n	801a2ca <__ssvfiscanf_r+0x1e2>
 801a35c:	e79c      	b.n	801a298 <__ssvfiscanf_r+0x1b0>
 801a35e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a360:	3201      	adds	r2, #1
 801a362:	9245      	str	r2, [sp, #276]	; 0x114
 801a364:	6862      	ldr	r2, [r4, #4]
 801a366:	3a01      	subs	r2, #1
 801a368:	2a00      	cmp	r2, #0
 801a36a:	6062      	str	r2, [r4, #4]
 801a36c:	dd02      	ble.n	801a374 <__ssvfiscanf_r+0x28c>
 801a36e:	3301      	adds	r3, #1
 801a370:	6023      	str	r3, [r4, #0]
 801a372:	e7ad      	b.n	801a2d0 <__ssvfiscanf_r+0x1e8>
 801a374:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a376:	4621      	mov	r1, r4
 801a378:	4630      	mov	r0, r6
 801a37a:	4798      	blx	r3
 801a37c:	2800      	cmp	r0, #0
 801a37e:	d0a7      	beq.n	801a2d0 <__ssvfiscanf_r+0x1e8>
 801a380:	e78a      	b.n	801a298 <__ssvfiscanf_r+0x1b0>
 801a382:	2b04      	cmp	r3, #4
 801a384:	dc0e      	bgt.n	801a3a4 <__ssvfiscanf_r+0x2bc>
 801a386:	466b      	mov	r3, sp
 801a388:	4622      	mov	r2, r4
 801a38a:	a941      	add	r1, sp, #260	; 0x104
 801a38c:	4630      	mov	r0, r6
 801a38e:	f000 f87d 	bl	801a48c <_scanf_i>
 801a392:	e7ab      	b.n	801a2ec <__ssvfiscanf_r+0x204>
 801a394:	0801a035 	.word	0x0801a035
 801a398:	0801a0af 	.word	0x0801a0af
 801a39c:	0801bb89 	.word	0x0801bb89
 801a3a0:	0801bef2 	.word	0x0801bef2
 801a3a4:	4b0b      	ldr	r3, [pc, #44]	; (801a3d4 <__ssvfiscanf_r+0x2ec>)
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	f43f aec5 	beq.w	801a136 <__ssvfiscanf_r+0x4e>
 801a3ac:	466b      	mov	r3, sp
 801a3ae:	4622      	mov	r2, r4
 801a3b0:	a941      	add	r1, sp, #260	; 0x104
 801a3b2:	4630      	mov	r0, r6
 801a3b4:	f7fc fb86 	bl	8016ac4 <_scanf_float>
 801a3b8:	e798      	b.n	801a2ec <__ssvfiscanf_r+0x204>
 801a3ba:	89a3      	ldrh	r3, [r4, #12]
 801a3bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a3c0:	bf18      	it	ne
 801a3c2:	f04f 30ff 	movne.w	r0, #4294967295
 801a3c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a3d0:	e7f9      	b.n	801a3c6 <__ssvfiscanf_r+0x2de>
 801a3d2:	bf00      	nop
 801a3d4:	08016ac5 	.word	0x08016ac5

0801a3d8 <_scanf_chars>:
 801a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3dc:	4615      	mov	r5, r2
 801a3de:	688a      	ldr	r2, [r1, #8]
 801a3e0:	4680      	mov	r8, r0
 801a3e2:	460c      	mov	r4, r1
 801a3e4:	b932      	cbnz	r2, 801a3f4 <_scanf_chars+0x1c>
 801a3e6:	698a      	ldr	r2, [r1, #24]
 801a3e8:	2a00      	cmp	r2, #0
 801a3ea:	bf0c      	ite	eq
 801a3ec:	2201      	moveq	r2, #1
 801a3ee:	f04f 32ff 	movne.w	r2, #4294967295
 801a3f2:	608a      	str	r2, [r1, #8]
 801a3f4:	6822      	ldr	r2, [r4, #0]
 801a3f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801a488 <_scanf_chars+0xb0>
 801a3fa:	06d1      	lsls	r1, r2, #27
 801a3fc:	bf5f      	itttt	pl
 801a3fe:	681a      	ldrpl	r2, [r3, #0]
 801a400:	1d11      	addpl	r1, r2, #4
 801a402:	6019      	strpl	r1, [r3, #0]
 801a404:	6816      	ldrpl	r6, [r2, #0]
 801a406:	2700      	movs	r7, #0
 801a408:	69a0      	ldr	r0, [r4, #24]
 801a40a:	b188      	cbz	r0, 801a430 <_scanf_chars+0x58>
 801a40c:	2801      	cmp	r0, #1
 801a40e:	d107      	bne.n	801a420 <_scanf_chars+0x48>
 801a410:	682a      	ldr	r2, [r5, #0]
 801a412:	7811      	ldrb	r1, [r2, #0]
 801a414:	6962      	ldr	r2, [r4, #20]
 801a416:	5c52      	ldrb	r2, [r2, r1]
 801a418:	b952      	cbnz	r2, 801a430 <_scanf_chars+0x58>
 801a41a:	2f00      	cmp	r7, #0
 801a41c:	d031      	beq.n	801a482 <_scanf_chars+0xaa>
 801a41e:	e022      	b.n	801a466 <_scanf_chars+0x8e>
 801a420:	2802      	cmp	r0, #2
 801a422:	d120      	bne.n	801a466 <_scanf_chars+0x8e>
 801a424:	682b      	ldr	r3, [r5, #0]
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a42c:	071b      	lsls	r3, r3, #28
 801a42e:	d41a      	bmi.n	801a466 <_scanf_chars+0x8e>
 801a430:	6823      	ldr	r3, [r4, #0]
 801a432:	06da      	lsls	r2, r3, #27
 801a434:	bf5e      	ittt	pl
 801a436:	682b      	ldrpl	r3, [r5, #0]
 801a438:	781b      	ldrbpl	r3, [r3, #0]
 801a43a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a43e:	682a      	ldr	r2, [r5, #0]
 801a440:	686b      	ldr	r3, [r5, #4]
 801a442:	3201      	adds	r2, #1
 801a444:	602a      	str	r2, [r5, #0]
 801a446:	68a2      	ldr	r2, [r4, #8]
 801a448:	3b01      	subs	r3, #1
 801a44a:	3a01      	subs	r2, #1
 801a44c:	606b      	str	r3, [r5, #4]
 801a44e:	3701      	adds	r7, #1
 801a450:	60a2      	str	r2, [r4, #8]
 801a452:	b142      	cbz	r2, 801a466 <_scanf_chars+0x8e>
 801a454:	2b00      	cmp	r3, #0
 801a456:	dcd7      	bgt.n	801a408 <_scanf_chars+0x30>
 801a458:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a45c:	4629      	mov	r1, r5
 801a45e:	4640      	mov	r0, r8
 801a460:	4798      	blx	r3
 801a462:	2800      	cmp	r0, #0
 801a464:	d0d0      	beq.n	801a408 <_scanf_chars+0x30>
 801a466:	6823      	ldr	r3, [r4, #0]
 801a468:	f013 0310 	ands.w	r3, r3, #16
 801a46c:	d105      	bne.n	801a47a <_scanf_chars+0xa2>
 801a46e:	68e2      	ldr	r2, [r4, #12]
 801a470:	3201      	adds	r2, #1
 801a472:	60e2      	str	r2, [r4, #12]
 801a474:	69a2      	ldr	r2, [r4, #24]
 801a476:	b102      	cbz	r2, 801a47a <_scanf_chars+0xa2>
 801a478:	7033      	strb	r3, [r6, #0]
 801a47a:	6923      	ldr	r3, [r4, #16]
 801a47c:	443b      	add	r3, r7
 801a47e:	6123      	str	r3, [r4, #16]
 801a480:	2000      	movs	r0, #0
 801a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a486:	bf00      	nop
 801a488:	0801bb89 	.word	0x0801bb89

0801a48c <_scanf_i>:
 801a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a490:	4698      	mov	r8, r3
 801a492:	4b76      	ldr	r3, [pc, #472]	; (801a66c <_scanf_i+0x1e0>)
 801a494:	460c      	mov	r4, r1
 801a496:	4682      	mov	sl, r0
 801a498:	4616      	mov	r6, r2
 801a49a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a49e:	b087      	sub	sp, #28
 801a4a0:	ab03      	add	r3, sp, #12
 801a4a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a4a6:	4b72      	ldr	r3, [pc, #456]	; (801a670 <_scanf_i+0x1e4>)
 801a4a8:	69a1      	ldr	r1, [r4, #24]
 801a4aa:	4a72      	ldr	r2, [pc, #456]	; (801a674 <_scanf_i+0x1e8>)
 801a4ac:	2903      	cmp	r1, #3
 801a4ae:	bf18      	it	ne
 801a4b0:	461a      	movne	r2, r3
 801a4b2:	68a3      	ldr	r3, [r4, #8]
 801a4b4:	9201      	str	r2, [sp, #4]
 801a4b6:	1e5a      	subs	r2, r3, #1
 801a4b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a4bc:	bf88      	it	hi
 801a4be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a4c2:	4627      	mov	r7, r4
 801a4c4:	bf82      	ittt	hi
 801a4c6:	eb03 0905 	addhi.w	r9, r3, r5
 801a4ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a4ce:	60a3      	strhi	r3, [r4, #8]
 801a4d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a4d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a4d8:	bf98      	it	ls
 801a4da:	f04f 0900 	movls.w	r9, #0
 801a4de:	6023      	str	r3, [r4, #0]
 801a4e0:	463d      	mov	r5, r7
 801a4e2:	f04f 0b00 	mov.w	fp, #0
 801a4e6:	6831      	ldr	r1, [r6, #0]
 801a4e8:	ab03      	add	r3, sp, #12
 801a4ea:	7809      	ldrb	r1, [r1, #0]
 801a4ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a4f0:	2202      	movs	r2, #2
 801a4f2:	f7e5 fe8d 	bl	8000210 <memchr>
 801a4f6:	b328      	cbz	r0, 801a544 <_scanf_i+0xb8>
 801a4f8:	f1bb 0f01 	cmp.w	fp, #1
 801a4fc:	d159      	bne.n	801a5b2 <_scanf_i+0x126>
 801a4fe:	6862      	ldr	r2, [r4, #4]
 801a500:	b92a      	cbnz	r2, 801a50e <_scanf_i+0x82>
 801a502:	6822      	ldr	r2, [r4, #0]
 801a504:	2308      	movs	r3, #8
 801a506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a50a:	6063      	str	r3, [r4, #4]
 801a50c:	6022      	str	r2, [r4, #0]
 801a50e:	6822      	ldr	r2, [r4, #0]
 801a510:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a514:	6022      	str	r2, [r4, #0]
 801a516:	68a2      	ldr	r2, [r4, #8]
 801a518:	1e51      	subs	r1, r2, #1
 801a51a:	60a1      	str	r1, [r4, #8]
 801a51c:	b192      	cbz	r2, 801a544 <_scanf_i+0xb8>
 801a51e:	6832      	ldr	r2, [r6, #0]
 801a520:	1c51      	adds	r1, r2, #1
 801a522:	6031      	str	r1, [r6, #0]
 801a524:	7812      	ldrb	r2, [r2, #0]
 801a526:	f805 2b01 	strb.w	r2, [r5], #1
 801a52a:	6872      	ldr	r2, [r6, #4]
 801a52c:	3a01      	subs	r2, #1
 801a52e:	2a00      	cmp	r2, #0
 801a530:	6072      	str	r2, [r6, #4]
 801a532:	dc07      	bgt.n	801a544 <_scanf_i+0xb8>
 801a534:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a538:	4631      	mov	r1, r6
 801a53a:	4650      	mov	r0, sl
 801a53c:	4790      	blx	r2
 801a53e:	2800      	cmp	r0, #0
 801a540:	f040 8085 	bne.w	801a64e <_scanf_i+0x1c2>
 801a544:	f10b 0b01 	add.w	fp, fp, #1
 801a548:	f1bb 0f03 	cmp.w	fp, #3
 801a54c:	d1cb      	bne.n	801a4e6 <_scanf_i+0x5a>
 801a54e:	6863      	ldr	r3, [r4, #4]
 801a550:	b90b      	cbnz	r3, 801a556 <_scanf_i+0xca>
 801a552:	230a      	movs	r3, #10
 801a554:	6063      	str	r3, [r4, #4]
 801a556:	6863      	ldr	r3, [r4, #4]
 801a558:	4947      	ldr	r1, [pc, #284]	; (801a678 <_scanf_i+0x1ec>)
 801a55a:	6960      	ldr	r0, [r4, #20]
 801a55c:	1ac9      	subs	r1, r1, r3
 801a55e:	f000 f8b7 	bl	801a6d0 <__sccl>
 801a562:	f04f 0b00 	mov.w	fp, #0
 801a566:	68a3      	ldr	r3, [r4, #8]
 801a568:	6822      	ldr	r2, [r4, #0]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d03d      	beq.n	801a5ea <_scanf_i+0x15e>
 801a56e:	6831      	ldr	r1, [r6, #0]
 801a570:	6960      	ldr	r0, [r4, #20]
 801a572:	f891 c000 	ldrb.w	ip, [r1]
 801a576:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a57a:	2800      	cmp	r0, #0
 801a57c:	d035      	beq.n	801a5ea <_scanf_i+0x15e>
 801a57e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a582:	d124      	bne.n	801a5ce <_scanf_i+0x142>
 801a584:	0510      	lsls	r0, r2, #20
 801a586:	d522      	bpl.n	801a5ce <_scanf_i+0x142>
 801a588:	f10b 0b01 	add.w	fp, fp, #1
 801a58c:	f1b9 0f00 	cmp.w	r9, #0
 801a590:	d003      	beq.n	801a59a <_scanf_i+0x10e>
 801a592:	3301      	adds	r3, #1
 801a594:	f109 39ff 	add.w	r9, r9, #4294967295
 801a598:	60a3      	str	r3, [r4, #8]
 801a59a:	6873      	ldr	r3, [r6, #4]
 801a59c:	3b01      	subs	r3, #1
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	6073      	str	r3, [r6, #4]
 801a5a2:	dd1b      	ble.n	801a5dc <_scanf_i+0x150>
 801a5a4:	6833      	ldr	r3, [r6, #0]
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	6033      	str	r3, [r6, #0]
 801a5aa:	68a3      	ldr	r3, [r4, #8]
 801a5ac:	3b01      	subs	r3, #1
 801a5ae:	60a3      	str	r3, [r4, #8]
 801a5b0:	e7d9      	b.n	801a566 <_scanf_i+0xda>
 801a5b2:	f1bb 0f02 	cmp.w	fp, #2
 801a5b6:	d1ae      	bne.n	801a516 <_scanf_i+0x8a>
 801a5b8:	6822      	ldr	r2, [r4, #0]
 801a5ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a5be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a5c2:	d1bf      	bne.n	801a544 <_scanf_i+0xb8>
 801a5c4:	2310      	movs	r3, #16
 801a5c6:	6063      	str	r3, [r4, #4]
 801a5c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a5cc:	e7a2      	b.n	801a514 <_scanf_i+0x88>
 801a5ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a5d2:	6022      	str	r2, [r4, #0]
 801a5d4:	780b      	ldrb	r3, [r1, #0]
 801a5d6:	f805 3b01 	strb.w	r3, [r5], #1
 801a5da:	e7de      	b.n	801a59a <_scanf_i+0x10e>
 801a5dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a5e0:	4631      	mov	r1, r6
 801a5e2:	4650      	mov	r0, sl
 801a5e4:	4798      	blx	r3
 801a5e6:	2800      	cmp	r0, #0
 801a5e8:	d0df      	beq.n	801a5aa <_scanf_i+0x11e>
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	05db      	lsls	r3, r3, #23
 801a5ee:	d50d      	bpl.n	801a60c <_scanf_i+0x180>
 801a5f0:	42bd      	cmp	r5, r7
 801a5f2:	d909      	bls.n	801a608 <_scanf_i+0x17c>
 801a5f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a5f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5fc:	4632      	mov	r2, r6
 801a5fe:	4650      	mov	r0, sl
 801a600:	4798      	blx	r3
 801a602:	f105 39ff 	add.w	r9, r5, #4294967295
 801a606:	464d      	mov	r5, r9
 801a608:	42bd      	cmp	r5, r7
 801a60a:	d02d      	beq.n	801a668 <_scanf_i+0x1dc>
 801a60c:	6822      	ldr	r2, [r4, #0]
 801a60e:	f012 0210 	ands.w	r2, r2, #16
 801a612:	d113      	bne.n	801a63c <_scanf_i+0x1b0>
 801a614:	702a      	strb	r2, [r5, #0]
 801a616:	6863      	ldr	r3, [r4, #4]
 801a618:	9e01      	ldr	r6, [sp, #4]
 801a61a:	4639      	mov	r1, r7
 801a61c:	4650      	mov	r0, sl
 801a61e:	47b0      	blx	r6
 801a620:	6821      	ldr	r1, [r4, #0]
 801a622:	f8d8 3000 	ldr.w	r3, [r8]
 801a626:	f011 0f20 	tst.w	r1, #32
 801a62a:	d013      	beq.n	801a654 <_scanf_i+0x1c8>
 801a62c:	1d1a      	adds	r2, r3, #4
 801a62e:	f8c8 2000 	str.w	r2, [r8]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	6018      	str	r0, [r3, #0]
 801a636:	68e3      	ldr	r3, [r4, #12]
 801a638:	3301      	adds	r3, #1
 801a63a:	60e3      	str	r3, [r4, #12]
 801a63c:	1bed      	subs	r5, r5, r7
 801a63e:	44ab      	add	fp, r5
 801a640:	6925      	ldr	r5, [r4, #16]
 801a642:	445d      	add	r5, fp
 801a644:	6125      	str	r5, [r4, #16]
 801a646:	2000      	movs	r0, #0
 801a648:	b007      	add	sp, #28
 801a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a64e:	f04f 0b00 	mov.w	fp, #0
 801a652:	e7ca      	b.n	801a5ea <_scanf_i+0x15e>
 801a654:	1d1a      	adds	r2, r3, #4
 801a656:	f8c8 2000 	str.w	r2, [r8]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	f011 0f01 	tst.w	r1, #1
 801a660:	bf14      	ite	ne
 801a662:	8018      	strhne	r0, [r3, #0]
 801a664:	6018      	streq	r0, [r3, #0]
 801a666:	e7e6      	b.n	801a636 <_scanf_i+0x1aa>
 801a668:	2001      	movs	r0, #1
 801a66a:	e7ed      	b.n	801a648 <_scanf_i+0x1bc>
 801a66c:	0801bad4 	.word	0x0801bad4
 801a670:	0801a84d 	.word	0x0801a84d
 801a674:	08017d8d 	.word	0x08017d8d
 801a678:	0801bf16 	.word	0x0801bf16

0801a67c <_read_r>:
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4d07      	ldr	r5, [pc, #28]	; (801a69c <_read_r+0x20>)
 801a680:	4604      	mov	r4, r0
 801a682:	4608      	mov	r0, r1
 801a684:	4611      	mov	r1, r2
 801a686:	2200      	movs	r2, #0
 801a688:	602a      	str	r2, [r5, #0]
 801a68a:	461a      	mov	r2, r3
 801a68c:	f7e7 fefb 	bl	8002486 <_read>
 801a690:	1c43      	adds	r3, r0, #1
 801a692:	d102      	bne.n	801a69a <_read_r+0x1e>
 801a694:	682b      	ldr	r3, [r5, #0]
 801a696:	b103      	cbz	r3, 801a69a <_read_r+0x1e>
 801a698:	6023      	str	r3, [r4, #0]
 801a69a:	bd38      	pop	{r3, r4, r5, pc}
 801a69c:	200039f8 	.word	0x200039f8

0801a6a0 <nan>:
 801a6a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a6a8 <nan+0x8>
 801a6a4:	4770      	bx	lr
 801a6a6:	bf00      	nop
 801a6a8:	00000000 	.word	0x00000000
 801a6ac:	7ff80000 	.word	0x7ff80000

0801a6b0 <_sbrk_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4d06      	ldr	r5, [pc, #24]	; (801a6cc <_sbrk_r+0x1c>)
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	4608      	mov	r0, r1
 801a6ba:	602b      	str	r3, [r5, #0]
 801a6bc:	f7e7 ff50 	bl	8002560 <_sbrk>
 801a6c0:	1c43      	adds	r3, r0, #1
 801a6c2:	d102      	bne.n	801a6ca <_sbrk_r+0x1a>
 801a6c4:	682b      	ldr	r3, [r5, #0]
 801a6c6:	b103      	cbz	r3, 801a6ca <_sbrk_r+0x1a>
 801a6c8:	6023      	str	r3, [r4, #0]
 801a6ca:	bd38      	pop	{r3, r4, r5, pc}
 801a6cc:	200039f8 	.word	0x200039f8

0801a6d0 <__sccl>:
 801a6d0:	b570      	push	{r4, r5, r6, lr}
 801a6d2:	780b      	ldrb	r3, [r1, #0]
 801a6d4:	4604      	mov	r4, r0
 801a6d6:	2b5e      	cmp	r3, #94	; 0x5e
 801a6d8:	bf0b      	itete	eq
 801a6da:	784b      	ldrbeq	r3, [r1, #1]
 801a6dc:	1c48      	addne	r0, r1, #1
 801a6de:	1c88      	addeq	r0, r1, #2
 801a6e0:	2200      	movne	r2, #0
 801a6e2:	bf08      	it	eq
 801a6e4:	2201      	moveq	r2, #1
 801a6e6:	1e61      	subs	r1, r4, #1
 801a6e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a6ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a6f0:	42a9      	cmp	r1, r5
 801a6f2:	d1fb      	bne.n	801a6ec <__sccl+0x1c>
 801a6f4:	b90b      	cbnz	r3, 801a6fa <__sccl+0x2a>
 801a6f6:	3801      	subs	r0, #1
 801a6f8:	bd70      	pop	{r4, r5, r6, pc}
 801a6fa:	f082 0201 	eor.w	r2, r2, #1
 801a6fe:	54e2      	strb	r2, [r4, r3]
 801a700:	4605      	mov	r5, r0
 801a702:	4628      	mov	r0, r5
 801a704:	f810 1b01 	ldrb.w	r1, [r0], #1
 801a708:	292d      	cmp	r1, #45	; 0x2d
 801a70a:	d006      	beq.n	801a71a <__sccl+0x4a>
 801a70c:	295d      	cmp	r1, #93	; 0x5d
 801a70e:	d0f3      	beq.n	801a6f8 <__sccl+0x28>
 801a710:	b909      	cbnz	r1, 801a716 <__sccl+0x46>
 801a712:	4628      	mov	r0, r5
 801a714:	e7f0      	b.n	801a6f8 <__sccl+0x28>
 801a716:	460b      	mov	r3, r1
 801a718:	e7f1      	b.n	801a6fe <__sccl+0x2e>
 801a71a:	786e      	ldrb	r6, [r5, #1]
 801a71c:	2e5d      	cmp	r6, #93	; 0x5d
 801a71e:	d0fa      	beq.n	801a716 <__sccl+0x46>
 801a720:	42b3      	cmp	r3, r6
 801a722:	dcf8      	bgt.n	801a716 <__sccl+0x46>
 801a724:	3502      	adds	r5, #2
 801a726:	4619      	mov	r1, r3
 801a728:	3101      	adds	r1, #1
 801a72a:	428e      	cmp	r6, r1
 801a72c:	5462      	strb	r2, [r4, r1]
 801a72e:	dcfb      	bgt.n	801a728 <__sccl+0x58>
 801a730:	1af1      	subs	r1, r6, r3
 801a732:	3901      	subs	r1, #1
 801a734:	1c58      	adds	r0, r3, #1
 801a736:	42b3      	cmp	r3, r6
 801a738:	bfa8      	it	ge
 801a73a:	2100      	movge	r1, #0
 801a73c:	1843      	adds	r3, r0, r1
 801a73e:	e7e0      	b.n	801a702 <__sccl+0x32>

0801a740 <strncmp>:
 801a740:	b510      	push	{r4, lr}
 801a742:	b17a      	cbz	r2, 801a764 <strncmp+0x24>
 801a744:	4603      	mov	r3, r0
 801a746:	3901      	subs	r1, #1
 801a748:	1884      	adds	r4, r0, r2
 801a74a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a74e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a752:	4290      	cmp	r0, r2
 801a754:	d101      	bne.n	801a75a <strncmp+0x1a>
 801a756:	42a3      	cmp	r3, r4
 801a758:	d101      	bne.n	801a75e <strncmp+0x1e>
 801a75a:	1a80      	subs	r0, r0, r2
 801a75c:	bd10      	pop	{r4, pc}
 801a75e:	2800      	cmp	r0, #0
 801a760:	d1f3      	bne.n	801a74a <strncmp+0xa>
 801a762:	e7fa      	b.n	801a75a <strncmp+0x1a>
 801a764:	4610      	mov	r0, r2
 801a766:	e7f9      	b.n	801a75c <strncmp+0x1c>

0801a768 <_strtoul_l.constprop.0>:
 801a768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a76c:	4f36      	ldr	r7, [pc, #216]	; (801a848 <_strtoul_l.constprop.0+0xe0>)
 801a76e:	4686      	mov	lr, r0
 801a770:	460d      	mov	r5, r1
 801a772:	4628      	mov	r0, r5
 801a774:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a778:	5de6      	ldrb	r6, [r4, r7]
 801a77a:	f016 0608 	ands.w	r6, r6, #8
 801a77e:	d1f8      	bne.n	801a772 <_strtoul_l.constprop.0+0xa>
 801a780:	2c2d      	cmp	r4, #45	; 0x2d
 801a782:	d12f      	bne.n	801a7e4 <_strtoul_l.constprop.0+0x7c>
 801a784:	782c      	ldrb	r4, [r5, #0]
 801a786:	2601      	movs	r6, #1
 801a788:	1c85      	adds	r5, r0, #2
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d057      	beq.n	801a83e <_strtoul_l.constprop.0+0xd6>
 801a78e:	2b10      	cmp	r3, #16
 801a790:	d109      	bne.n	801a7a6 <_strtoul_l.constprop.0+0x3e>
 801a792:	2c30      	cmp	r4, #48	; 0x30
 801a794:	d107      	bne.n	801a7a6 <_strtoul_l.constprop.0+0x3e>
 801a796:	7828      	ldrb	r0, [r5, #0]
 801a798:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a79c:	2858      	cmp	r0, #88	; 0x58
 801a79e:	d149      	bne.n	801a834 <_strtoul_l.constprop.0+0xcc>
 801a7a0:	786c      	ldrb	r4, [r5, #1]
 801a7a2:	2310      	movs	r3, #16
 801a7a4:	3502      	adds	r5, #2
 801a7a6:	f04f 38ff 	mov.w	r8, #4294967295
 801a7aa:	2700      	movs	r7, #0
 801a7ac:	fbb8 f8f3 	udiv	r8, r8, r3
 801a7b0:	fb03 f908 	mul.w	r9, r3, r8
 801a7b4:	ea6f 0909 	mvn.w	r9, r9
 801a7b8:	4638      	mov	r0, r7
 801a7ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a7be:	f1bc 0f09 	cmp.w	ip, #9
 801a7c2:	d814      	bhi.n	801a7ee <_strtoul_l.constprop.0+0x86>
 801a7c4:	4664      	mov	r4, ip
 801a7c6:	42a3      	cmp	r3, r4
 801a7c8:	dd22      	ble.n	801a810 <_strtoul_l.constprop.0+0xa8>
 801a7ca:	2f00      	cmp	r7, #0
 801a7cc:	db1d      	blt.n	801a80a <_strtoul_l.constprop.0+0xa2>
 801a7ce:	4580      	cmp	r8, r0
 801a7d0:	d31b      	bcc.n	801a80a <_strtoul_l.constprop.0+0xa2>
 801a7d2:	d101      	bne.n	801a7d8 <_strtoul_l.constprop.0+0x70>
 801a7d4:	45a1      	cmp	r9, r4
 801a7d6:	db18      	blt.n	801a80a <_strtoul_l.constprop.0+0xa2>
 801a7d8:	fb00 4003 	mla	r0, r0, r3, r4
 801a7dc:	2701      	movs	r7, #1
 801a7de:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a7e2:	e7ea      	b.n	801a7ba <_strtoul_l.constprop.0+0x52>
 801a7e4:	2c2b      	cmp	r4, #43	; 0x2b
 801a7e6:	bf04      	itt	eq
 801a7e8:	782c      	ldrbeq	r4, [r5, #0]
 801a7ea:	1c85      	addeq	r5, r0, #2
 801a7ec:	e7cd      	b.n	801a78a <_strtoul_l.constprop.0+0x22>
 801a7ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a7f2:	f1bc 0f19 	cmp.w	ip, #25
 801a7f6:	d801      	bhi.n	801a7fc <_strtoul_l.constprop.0+0x94>
 801a7f8:	3c37      	subs	r4, #55	; 0x37
 801a7fa:	e7e4      	b.n	801a7c6 <_strtoul_l.constprop.0+0x5e>
 801a7fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a800:	f1bc 0f19 	cmp.w	ip, #25
 801a804:	d804      	bhi.n	801a810 <_strtoul_l.constprop.0+0xa8>
 801a806:	3c57      	subs	r4, #87	; 0x57
 801a808:	e7dd      	b.n	801a7c6 <_strtoul_l.constprop.0+0x5e>
 801a80a:	f04f 37ff 	mov.w	r7, #4294967295
 801a80e:	e7e6      	b.n	801a7de <_strtoul_l.constprop.0+0x76>
 801a810:	2f00      	cmp	r7, #0
 801a812:	da07      	bge.n	801a824 <_strtoul_l.constprop.0+0xbc>
 801a814:	2322      	movs	r3, #34	; 0x22
 801a816:	f8ce 3000 	str.w	r3, [lr]
 801a81a:	f04f 30ff 	mov.w	r0, #4294967295
 801a81e:	b932      	cbnz	r2, 801a82e <_strtoul_l.constprop.0+0xc6>
 801a820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a824:	b106      	cbz	r6, 801a828 <_strtoul_l.constprop.0+0xc0>
 801a826:	4240      	negs	r0, r0
 801a828:	2a00      	cmp	r2, #0
 801a82a:	d0f9      	beq.n	801a820 <_strtoul_l.constprop.0+0xb8>
 801a82c:	b107      	cbz	r7, 801a830 <_strtoul_l.constprop.0+0xc8>
 801a82e:	1e69      	subs	r1, r5, #1
 801a830:	6011      	str	r1, [r2, #0]
 801a832:	e7f5      	b.n	801a820 <_strtoul_l.constprop.0+0xb8>
 801a834:	2430      	movs	r4, #48	; 0x30
 801a836:	2b00      	cmp	r3, #0
 801a838:	d1b5      	bne.n	801a7a6 <_strtoul_l.constprop.0+0x3e>
 801a83a:	2308      	movs	r3, #8
 801a83c:	e7b3      	b.n	801a7a6 <_strtoul_l.constprop.0+0x3e>
 801a83e:	2c30      	cmp	r4, #48	; 0x30
 801a840:	d0a9      	beq.n	801a796 <_strtoul_l.constprop.0+0x2e>
 801a842:	230a      	movs	r3, #10
 801a844:	e7af      	b.n	801a7a6 <_strtoul_l.constprop.0+0x3e>
 801a846:	bf00      	nop
 801a848:	0801bb89 	.word	0x0801bb89

0801a84c <_strtoul_r>:
 801a84c:	f7ff bf8c 	b.w	801a768 <_strtoul_l.constprop.0>

0801a850 <__submore>:
 801a850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a854:	460c      	mov	r4, r1
 801a856:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a85c:	4299      	cmp	r1, r3
 801a85e:	d11d      	bne.n	801a89c <__submore+0x4c>
 801a860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a864:	f7ff fa16 	bl	8019c94 <_malloc_r>
 801a868:	b918      	cbnz	r0, 801a872 <__submore+0x22>
 801a86a:	f04f 30ff 	mov.w	r0, #4294967295
 801a86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a876:	63a3      	str	r3, [r4, #56]	; 0x38
 801a878:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a87c:	6360      	str	r0, [r4, #52]	; 0x34
 801a87e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a882:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a886:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a88a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a88e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a892:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a896:	6020      	str	r0, [r4, #0]
 801a898:	2000      	movs	r0, #0
 801a89a:	e7e8      	b.n	801a86e <__submore+0x1e>
 801a89c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a89e:	0077      	lsls	r7, r6, #1
 801a8a0:	463a      	mov	r2, r7
 801a8a2:	f000 fa2d 	bl	801ad00 <_realloc_r>
 801a8a6:	4605      	mov	r5, r0
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	d0de      	beq.n	801a86a <__submore+0x1a>
 801a8ac:	eb00 0806 	add.w	r8, r0, r6
 801a8b0:	4601      	mov	r1, r0
 801a8b2:	4632      	mov	r2, r6
 801a8b4:	4640      	mov	r0, r8
 801a8b6:	f7fb fc85 	bl	80161c4 <memcpy>
 801a8ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a8be:	f8c4 8000 	str.w	r8, [r4]
 801a8c2:	e7e9      	b.n	801a898 <__submore+0x48>

0801a8c4 <__ascii_wctomb>:
 801a8c4:	b149      	cbz	r1, 801a8da <__ascii_wctomb+0x16>
 801a8c6:	2aff      	cmp	r2, #255	; 0xff
 801a8c8:	bf85      	ittet	hi
 801a8ca:	238a      	movhi	r3, #138	; 0x8a
 801a8cc:	6003      	strhi	r3, [r0, #0]
 801a8ce:	700a      	strbls	r2, [r1, #0]
 801a8d0:	f04f 30ff 	movhi.w	r0, #4294967295
 801a8d4:	bf98      	it	ls
 801a8d6:	2001      	movls	r0, #1
 801a8d8:	4770      	bx	lr
 801a8da:	4608      	mov	r0, r1
 801a8dc:	4770      	bx	lr
	...

0801a8e0 <__assert_func>:
 801a8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a8e2:	4614      	mov	r4, r2
 801a8e4:	461a      	mov	r2, r3
 801a8e6:	4b09      	ldr	r3, [pc, #36]	; (801a90c <__assert_func+0x2c>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	68d8      	ldr	r0, [r3, #12]
 801a8ee:	b14c      	cbz	r4, 801a904 <__assert_func+0x24>
 801a8f0:	4b07      	ldr	r3, [pc, #28]	; (801a910 <__assert_func+0x30>)
 801a8f2:	9100      	str	r1, [sp, #0]
 801a8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a8f8:	4906      	ldr	r1, [pc, #24]	; (801a914 <__assert_func+0x34>)
 801a8fa:	462b      	mov	r3, r5
 801a8fc:	f000 f9a6 	bl	801ac4c <fiprintf>
 801a900:	f000 fc46 	bl	801b190 <abort>
 801a904:	4b04      	ldr	r3, [pc, #16]	; (801a918 <__assert_func+0x38>)
 801a906:	461c      	mov	r4, r3
 801a908:	e7f3      	b.n	801a8f2 <__assert_func+0x12>
 801a90a:	bf00      	nop
 801a90c:	2000003c 	.word	0x2000003c
 801a910:	0801bf18 	.word	0x0801bf18
 801a914:	0801bf25 	.word	0x0801bf25
 801a918:	0801bf53 	.word	0x0801bf53

0801a91c <__sflush_r>:
 801a91c:	898a      	ldrh	r2, [r1, #12]
 801a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a922:	4605      	mov	r5, r0
 801a924:	0710      	lsls	r0, r2, #28
 801a926:	460c      	mov	r4, r1
 801a928:	d458      	bmi.n	801a9dc <__sflush_r+0xc0>
 801a92a:	684b      	ldr	r3, [r1, #4]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	dc05      	bgt.n	801a93c <__sflush_r+0x20>
 801a930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a932:	2b00      	cmp	r3, #0
 801a934:	dc02      	bgt.n	801a93c <__sflush_r+0x20>
 801a936:	2000      	movs	r0, #0
 801a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a93e:	2e00      	cmp	r6, #0
 801a940:	d0f9      	beq.n	801a936 <__sflush_r+0x1a>
 801a942:	2300      	movs	r3, #0
 801a944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a948:	682f      	ldr	r7, [r5, #0]
 801a94a:	602b      	str	r3, [r5, #0]
 801a94c:	d032      	beq.n	801a9b4 <__sflush_r+0x98>
 801a94e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a950:	89a3      	ldrh	r3, [r4, #12]
 801a952:	075a      	lsls	r2, r3, #29
 801a954:	d505      	bpl.n	801a962 <__sflush_r+0x46>
 801a956:	6863      	ldr	r3, [r4, #4]
 801a958:	1ac0      	subs	r0, r0, r3
 801a95a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a95c:	b10b      	cbz	r3, 801a962 <__sflush_r+0x46>
 801a95e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a960:	1ac0      	subs	r0, r0, r3
 801a962:	2300      	movs	r3, #0
 801a964:	4602      	mov	r2, r0
 801a966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a968:	6a21      	ldr	r1, [r4, #32]
 801a96a:	4628      	mov	r0, r5
 801a96c:	47b0      	blx	r6
 801a96e:	1c43      	adds	r3, r0, #1
 801a970:	89a3      	ldrh	r3, [r4, #12]
 801a972:	d106      	bne.n	801a982 <__sflush_r+0x66>
 801a974:	6829      	ldr	r1, [r5, #0]
 801a976:	291d      	cmp	r1, #29
 801a978:	d82c      	bhi.n	801a9d4 <__sflush_r+0xb8>
 801a97a:	4a2a      	ldr	r2, [pc, #168]	; (801aa24 <__sflush_r+0x108>)
 801a97c:	40ca      	lsrs	r2, r1
 801a97e:	07d6      	lsls	r6, r2, #31
 801a980:	d528      	bpl.n	801a9d4 <__sflush_r+0xb8>
 801a982:	2200      	movs	r2, #0
 801a984:	6062      	str	r2, [r4, #4]
 801a986:	04d9      	lsls	r1, r3, #19
 801a988:	6922      	ldr	r2, [r4, #16]
 801a98a:	6022      	str	r2, [r4, #0]
 801a98c:	d504      	bpl.n	801a998 <__sflush_r+0x7c>
 801a98e:	1c42      	adds	r2, r0, #1
 801a990:	d101      	bne.n	801a996 <__sflush_r+0x7a>
 801a992:	682b      	ldr	r3, [r5, #0]
 801a994:	b903      	cbnz	r3, 801a998 <__sflush_r+0x7c>
 801a996:	6560      	str	r0, [r4, #84]	; 0x54
 801a998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a99a:	602f      	str	r7, [r5, #0]
 801a99c:	2900      	cmp	r1, #0
 801a99e:	d0ca      	beq.n	801a936 <__sflush_r+0x1a>
 801a9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a9a4:	4299      	cmp	r1, r3
 801a9a6:	d002      	beq.n	801a9ae <__sflush_r+0x92>
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	f7ff f907 	bl	8019bbc <_free_r>
 801a9ae:	2000      	movs	r0, #0
 801a9b0:	6360      	str	r0, [r4, #52]	; 0x34
 801a9b2:	e7c1      	b.n	801a938 <__sflush_r+0x1c>
 801a9b4:	6a21      	ldr	r1, [r4, #32]
 801a9b6:	2301      	movs	r3, #1
 801a9b8:	4628      	mov	r0, r5
 801a9ba:	47b0      	blx	r6
 801a9bc:	1c41      	adds	r1, r0, #1
 801a9be:	d1c7      	bne.n	801a950 <__sflush_r+0x34>
 801a9c0:	682b      	ldr	r3, [r5, #0]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d0c4      	beq.n	801a950 <__sflush_r+0x34>
 801a9c6:	2b1d      	cmp	r3, #29
 801a9c8:	d001      	beq.n	801a9ce <__sflush_r+0xb2>
 801a9ca:	2b16      	cmp	r3, #22
 801a9cc:	d101      	bne.n	801a9d2 <__sflush_r+0xb6>
 801a9ce:	602f      	str	r7, [r5, #0]
 801a9d0:	e7b1      	b.n	801a936 <__sflush_r+0x1a>
 801a9d2:	89a3      	ldrh	r3, [r4, #12]
 801a9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9d8:	81a3      	strh	r3, [r4, #12]
 801a9da:	e7ad      	b.n	801a938 <__sflush_r+0x1c>
 801a9dc:	690f      	ldr	r7, [r1, #16]
 801a9de:	2f00      	cmp	r7, #0
 801a9e0:	d0a9      	beq.n	801a936 <__sflush_r+0x1a>
 801a9e2:	0793      	lsls	r3, r2, #30
 801a9e4:	680e      	ldr	r6, [r1, #0]
 801a9e6:	bf08      	it	eq
 801a9e8:	694b      	ldreq	r3, [r1, #20]
 801a9ea:	600f      	str	r7, [r1, #0]
 801a9ec:	bf18      	it	ne
 801a9ee:	2300      	movne	r3, #0
 801a9f0:	eba6 0807 	sub.w	r8, r6, r7
 801a9f4:	608b      	str	r3, [r1, #8]
 801a9f6:	f1b8 0f00 	cmp.w	r8, #0
 801a9fa:	dd9c      	ble.n	801a936 <__sflush_r+0x1a>
 801a9fc:	6a21      	ldr	r1, [r4, #32]
 801a9fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa00:	4643      	mov	r3, r8
 801aa02:	463a      	mov	r2, r7
 801aa04:	4628      	mov	r0, r5
 801aa06:	47b0      	blx	r6
 801aa08:	2800      	cmp	r0, #0
 801aa0a:	dc06      	bgt.n	801aa1a <__sflush_r+0xfe>
 801aa0c:	89a3      	ldrh	r3, [r4, #12]
 801aa0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa12:	81a3      	strh	r3, [r4, #12]
 801aa14:	f04f 30ff 	mov.w	r0, #4294967295
 801aa18:	e78e      	b.n	801a938 <__sflush_r+0x1c>
 801aa1a:	4407      	add	r7, r0
 801aa1c:	eba8 0800 	sub.w	r8, r8, r0
 801aa20:	e7e9      	b.n	801a9f6 <__sflush_r+0xda>
 801aa22:	bf00      	nop
 801aa24:	20400001 	.word	0x20400001

0801aa28 <_fflush_r>:
 801aa28:	b538      	push	{r3, r4, r5, lr}
 801aa2a:	690b      	ldr	r3, [r1, #16]
 801aa2c:	4605      	mov	r5, r0
 801aa2e:	460c      	mov	r4, r1
 801aa30:	b913      	cbnz	r3, 801aa38 <_fflush_r+0x10>
 801aa32:	2500      	movs	r5, #0
 801aa34:	4628      	mov	r0, r5
 801aa36:	bd38      	pop	{r3, r4, r5, pc}
 801aa38:	b118      	cbz	r0, 801aa42 <_fflush_r+0x1a>
 801aa3a:	6983      	ldr	r3, [r0, #24]
 801aa3c:	b90b      	cbnz	r3, 801aa42 <_fflush_r+0x1a>
 801aa3e:	f000 f887 	bl	801ab50 <__sinit>
 801aa42:	4b14      	ldr	r3, [pc, #80]	; (801aa94 <_fflush_r+0x6c>)
 801aa44:	429c      	cmp	r4, r3
 801aa46:	d11b      	bne.n	801aa80 <_fflush_r+0x58>
 801aa48:	686c      	ldr	r4, [r5, #4]
 801aa4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d0ef      	beq.n	801aa32 <_fflush_r+0xa>
 801aa52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aa54:	07d0      	lsls	r0, r2, #31
 801aa56:	d404      	bmi.n	801aa62 <_fflush_r+0x3a>
 801aa58:	0599      	lsls	r1, r3, #22
 801aa5a:	d402      	bmi.n	801aa62 <_fflush_r+0x3a>
 801aa5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa5e:	f000 f927 	bl	801acb0 <__retarget_lock_acquire_recursive>
 801aa62:	4628      	mov	r0, r5
 801aa64:	4621      	mov	r1, r4
 801aa66:	f7ff ff59 	bl	801a91c <__sflush_r>
 801aa6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aa6c:	07da      	lsls	r2, r3, #31
 801aa6e:	4605      	mov	r5, r0
 801aa70:	d4e0      	bmi.n	801aa34 <_fflush_r+0xc>
 801aa72:	89a3      	ldrh	r3, [r4, #12]
 801aa74:	059b      	lsls	r3, r3, #22
 801aa76:	d4dd      	bmi.n	801aa34 <_fflush_r+0xc>
 801aa78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa7a:	f000 f91a 	bl	801acb2 <__retarget_lock_release_recursive>
 801aa7e:	e7d9      	b.n	801aa34 <_fflush_r+0xc>
 801aa80:	4b05      	ldr	r3, [pc, #20]	; (801aa98 <_fflush_r+0x70>)
 801aa82:	429c      	cmp	r4, r3
 801aa84:	d101      	bne.n	801aa8a <_fflush_r+0x62>
 801aa86:	68ac      	ldr	r4, [r5, #8]
 801aa88:	e7df      	b.n	801aa4a <_fflush_r+0x22>
 801aa8a:	4b04      	ldr	r3, [pc, #16]	; (801aa9c <_fflush_r+0x74>)
 801aa8c:	429c      	cmp	r4, r3
 801aa8e:	bf08      	it	eq
 801aa90:	68ec      	ldreq	r4, [r5, #12]
 801aa92:	e7da      	b.n	801aa4a <_fflush_r+0x22>
 801aa94:	0801bf74 	.word	0x0801bf74
 801aa98:	0801bf94 	.word	0x0801bf94
 801aa9c:	0801bf54 	.word	0x0801bf54

0801aaa0 <std>:
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	b510      	push	{r4, lr}
 801aaa4:	4604      	mov	r4, r0
 801aaa6:	e9c0 3300 	strd	r3, r3, [r0]
 801aaaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aaae:	6083      	str	r3, [r0, #8]
 801aab0:	8181      	strh	r1, [r0, #12]
 801aab2:	6643      	str	r3, [r0, #100]	; 0x64
 801aab4:	81c2      	strh	r2, [r0, #14]
 801aab6:	6183      	str	r3, [r0, #24]
 801aab8:	4619      	mov	r1, r3
 801aaba:	2208      	movs	r2, #8
 801aabc:	305c      	adds	r0, #92	; 0x5c
 801aabe:	f7fb fb8f 	bl	80161e0 <memset>
 801aac2:	4b05      	ldr	r3, [pc, #20]	; (801aad8 <std+0x38>)
 801aac4:	6263      	str	r3, [r4, #36]	; 0x24
 801aac6:	4b05      	ldr	r3, [pc, #20]	; (801aadc <std+0x3c>)
 801aac8:	62a3      	str	r3, [r4, #40]	; 0x28
 801aaca:	4b05      	ldr	r3, [pc, #20]	; (801aae0 <std+0x40>)
 801aacc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aace:	4b05      	ldr	r3, [pc, #20]	; (801aae4 <std+0x44>)
 801aad0:	6224      	str	r4, [r4, #32]
 801aad2:	6323      	str	r3, [r4, #48]	; 0x30
 801aad4:	bd10      	pop	{r4, pc}
 801aad6:	bf00      	nop
 801aad8:	08016f89 	.word	0x08016f89
 801aadc:	08016faf 	.word	0x08016faf
 801aae0:	08016fe7 	.word	0x08016fe7
 801aae4:	0801700b 	.word	0x0801700b

0801aae8 <_cleanup_r>:
 801aae8:	4901      	ldr	r1, [pc, #4]	; (801aaf0 <_cleanup_r+0x8>)
 801aaea:	f000 b8c1 	b.w	801ac70 <_fwalk_reent>
 801aaee:	bf00      	nop
 801aaf0:	0801aa29 	.word	0x0801aa29

0801aaf4 <__sfmoreglue>:
 801aaf4:	b570      	push	{r4, r5, r6, lr}
 801aaf6:	2268      	movs	r2, #104	; 0x68
 801aaf8:	1e4d      	subs	r5, r1, #1
 801aafa:	4355      	muls	r5, r2
 801aafc:	460e      	mov	r6, r1
 801aafe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ab02:	f7ff f8c7 	bl	8019c94 <_malloc_r>
 801ab06:	4604      	mov	r4, r0
 801ab08:	b140      	cbz	r0, 801ab1c <__sfmoreglue+0x28>
 801ab0a:	2100      	movs	r1, #0
 801ab0c:	e9c0 1600 	strd	r1, r6, [r0]
 801ab10:	300c      	adds	r0, #12
 801ab12:	60a0      	str	r0, [r4, #8]
 801ab14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ab18:	f7fb fb62 	bl	80161e0 <memset>
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	bd70      	pop	{r4, r5, r6, pc}

0801ab20 <__sfp_lock_acquire>:
 801ab20:	4801      	ldr	r0, [pc, #4]	; (801ab28 <__sfp_lock_acquire+0x8>)
 801ab22:	f000 b8c5 	b.w	801acb0 <__retarget_lock_acquire_recursive>
 801ab26:	bf00      	nop
 801ab28:	200039fd 	.word	0x200039fd

0801ab2c <__sfp_lock_release>:
 801ab2c:	4801      	ldr	r0, [pc, #4]	; (801ab34 <__sfp_lock_release+0x8>)
 801ab2e:	f000 b8c0 	b.w	801acb2 <__retarget_lock_release_recursive>
 801ab32:	bf00      	nop
 801ab34:	200039fd 	.word	0x200039fd

0801ab38 <__sinit_lock_acquire>:
 801ab38:	4801      	ldr	r0, [pc, #4]	; (801ab40 <__sinit_lock_acquire+0x8>)
 801ab3a:	f000 b8b9 	b.w	801acb0 <__retarget_lock_acquire_recursive>
 801ab3e:	bf00      	nop
 801ab40:	200039fe 	.word	0x200039fe

0801ab44 <__sinit_lock_release>:
 801ab44:	4801      	ldr	r0, [pc, #4]	; (801ab4c <__sinit_lock_release+0x8>)
 801ab46:	f000 b8b4 	b.w	801acb2 <__retarget_lock_release_recursive>
 801ab4a:	bf00      	nop
 801ab4c:	200039fe 	.word	0x200039fe

0801ab50 <__sinit>:
 801ab50:	b510      	push	{r4, lr}
 801ab52:	4604      	mov	r4, r0
 801ab54:	f7ff fff0 	bl	801ab38 <__sinit_lock_acquire>
 801ab58:	69a3      	ldr	r3, [r4, #24]
 801ab5a:	b11b      	cbz	r3, 801ab64 <__sinit+0x14>
 801ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab60:	f7ff bff0 	b.w	801ab44 <__sinit_lock_release>
 801ab64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ab68:	6523      	str	r3, [r4, #80]	; 0x50
 801ab6a:	4b13      	ldr	r3, [pc, #76]	; (801abb8 <__sinit+0x68>)
 801ab6c:	4a13      	ldr	r2, [pc, #76]	; (801abbc <__sinit+0x6c>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	62a2      	str	r2, [r4, #40]	; 0x28
 801ab72:	42a3      	cmp	r3, r4
 801ab74:	bf04      	itt	eq
 801ab76:	2301      	moveq	r3, #1
 801ab78:	61a3      	streq	r3, [r4, #24]
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	f000 f820 	bl	801abc0 <__sfp>
 801ab80:	6060      	str	r0, [r4, #4]
 801ab82:	4620      	mov	r0, r4
 801ab84:	f000 f81c 	bl	801abc0 <__sfp>
 801ab88:	60a0      	str	r0, [r4, #8]
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	f000 f818 	bl	801abc0 <__sfp>
 801ab90:	2200      	movs	r2, #0
 801ab92:	60e0      	str	r0, [r4, #12]
 801ab94:	2104      	movs	r1, #4
 801ab96:	6860      	ldr	r0, [r4, #4]
 801ab98:	f7ff ff82 	bl	801aaa0 <std>
 801ab9c:	68a0      	ldr	r0, [r4, #8]
 801ab9e:	2201      	movs	r2, #1
 801aba0:	2109      	movs	r1, #9
 801aba2:	f7ff ff7d 	bl	801aaa0 <std>
 801aba6:	68e0      	ldr	r0, [r4, #12]
 801aba8:	2202      	movs	r2, #2
 801abaa:	2112      	movs	r1, #18
 801abac:	f7ff ff78 	bl	801aaa0 <std>
 801abb0:	2301      	movs	r3, #1
 801abb2:	61a3      	str	r3, [r4, #24]
 801abb4:	e7d2      	b.n	801ab5c <__sinit+0xc>
 801abb6:	bf00      	nop
 801abb8:	0801baf8 	.word	0x0801baf8
 801abbc:	0801aae9 	.word	0x0801aae9

0801abc0 <__sfp>:
 801abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abc2:	4607      	mov	r7, r0
 801abc4:	f7ff ffac 	bl	801ab20 <__sfp_lock_acquire>
 801abc8:	4b1e      	ldr	r3, [pc, #120]	; (801ac44 <__sfp+0x84>)
 801abca:	681e      	ldr	r6, [r3, #0]
 801abcc:	69b3      	ldr	r3, [r6, #24]
 801abce:	b913      	cbnz	r3, 801abd6 <__sfp+0x16>
 801abd0:	4630      	mov	r0, r6
 801abd2:	f7ff ffbd 	bl	801ab50 <__sinit>
 801abd6:	3648      	adds	r6, #72	; 0x48
 801abd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801abdc:	3b01      	subs	r3, #1
 801abde:	d503      	bpl.n	801abe8 <__sfp+0x28>
 801abe0:	6833      	ldr	r3, [r6, #0]
 801abe2:	b30b      	cbz	r3, 801ac28 <__sfp+0x68>
 801abe4:	6836      	ldr	r6, [r6, #0]
 801abe6:	e7f7      	b.n	801abd8 <__sfp+0x18>
 801abe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801abec:	b9d5      	cbnz	r5, 801ac24 <__sfp+0x64>
 801abee:	4b16      	ldr	r3, [pc, #88]	; (801ac48 <__sfp+0x88>)
 801abf0:	60e3      	str	r3, [r4, #12]
 801abf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801abf6:	6665      	str	r5, [r4, #100]	; 0x64
 801abf8:	f000 f859 	bl	801acae <__retarget_lock_init_recursive>
 801abfc:	f7ff ff96 	bl	801ab2c <__sfp_lock_release>
 801ac00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ac04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ac08:	6025      	str	r5, [r4, #0]
 801ac0a:	61a5      	str	r5, [r4, #24]
 801ac0c:	2208      	movs	r2, #8
 801ac0e:	4629      	mov	r1, r5
 801ac10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ac14:	f7fb fae4 	bl	80161e0 <memset>
 801ac18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ac1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ac20:	4620      	mov	r0, r4
 801ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac24:	3468      	adds	r4, #104	; 0x68
 801ac26:	e7d9      	b.n	801abdc <__sfp+0x1c>
 801ac28:	2104      	movs	r1, #4
 801ac2a:	4638      	mov	r0, r7
 801ac2c:	f7ff ff62 	bl	801aaf4 <__sfmoreglue>
 801ac30:	4604      	mov	r4, r0
 801ac32:	6030      	str	r0, [r6, #0]
 801ac34:	2800      	cmp	r0, #0
 801ac36:	d1d5      	bne.n	801abe4 <__sfp+0x24>
 801ac38:	f7ff ff78 	bl	801ab2c <__sfp_lock_release>
 801ac3c:	230c      	movs	r3, #12
 801ac3e:	603b      	str	r3, [r7, #0]
 801ac40:	e7ee      	b.n	801ac20 <__sfp+0x60>
 801ac42:	bf00      	nop
 801ac44:	0801baf8 	.word	0x0801baf8
 801ac48:	ffff0001 	.word	0xffff0001

0801ac4c <fiprintf>:
 801ac4c:	b40e      	push	{r1, r2, r3}
 801ac4e:	b503      	push	{r0, r1, lr}
 801ac50:	4601      	mov	r1, r0
 801ac52:	ab03      	add	r3, sp, #12
 801ac54:	4805      	ldr	r0, [pc, #20]	; (801ac6c <fiprintf+0x20>)
 801ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac5a:	6800      	ldr	r0, [r0, #0]
 801ac5c:	9301      	str	r3, [sp, #4]
 801ac5e:	f000 f8a7 	bl	801adb0 <_vfiprintf_r>
 801ac62:	b002      	add	sp, #8
 801ac64:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac68:	b003      	add	sp, #12
 801ac6a:	4770      	bx	lr
 801ac6c:	2000003c 	.word	0x2000003c

0801ac70 <_fwalk_reent>:
 801ac70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac74:	4606      	mov	r6, r0
 801ac76:	4688      	mov	r8, r1
 801ac78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ac7c:	2700      	movs	r7, #0
 801ac7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ac82:	f1b9 0901 	subs.w	r9, r9, #1
 801ac86:	d505      	bpl.n	801ac94 <_fwalk_reent+0x24>
 801ac88:	6824      	ldr	r4, [r4, #0]
 801ac8a:	2c00      	cmp	r4, #0
 801ac8c:	d1f7      	bne.n	801ac7e <_fwalk_reent+0xe>
 801ac8e:	4638      	mov	r0, r7
 801ac90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac94:	89ab      	ldrh	r3, [r5, #12]
 801ac96:	2b01      	cmp	r3, #1
 801ac98:	d907      	bls.n	801acaa <_fwalk_reent+0x3a>
 801ac9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac9e:	3301      	adds	r3, #1
 801aca0:	d003      	beq.n	801acaa <_fwalk_reent+0x3a>
 801aca2:	4629      	mov	r1, r5
 801aca4:	4630      	mov	r0, r6
 801aca6:	47c0      	blx	r8
 801aca8:	4307      	orrs	r7, r0
 801acaa:	3568      	adds	r5, #104	; 0x68
 801acac:	e7e9      	b.n	801ac82 <_fwalk_reent+0x12>

0801acae <__retarget_lock_init_recursive>:
 801acae:	4770      	bx	lr

0801acb0 <__retarget_lock_acquire_recursive>:
 801acb0:	4770      	bx	lr

0801acb2 <__retarget_lock_release_recursive>:
 801acb2:	4770      	bx	lr

0801acb4 <memmove>:
 801acb4:	4288      	cmp	r0, r1
 801acb6:	b510      	push	{r4, lr}
 801acb8:	eb01 0402 	add.w	r4, r1, r2
 801acbc:	d902      	bls.n	801acc4 <memmove+0x10>
 801acbe:	4284      	cmp	r4, r0
 801acc0:	4623      	mov	r3, r4
 801acc2:	d807      	bhi.n	801acd4 <memmove+0x20>
 801acc4:	1e43      	subs	r3, r0, #1
 801acc6:	42a1      	cmp	r1, r4
 801acc8:	d008      	beq.n	801acdc <memmove+0x28>
 801acca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acce:	f803 2f01 	strb.w	r2, [r3, #1]!
 801acd2:	e7f8      	b.n	801acc6 <memmove+0x12>
 801acd4:	4402      	add	r2, r0
 801acd6:	4601      	mov	r1, r0
 801acd8:	428a      	cmp	r2, r1
 801acda:	d100      	bne.n	801acde <memmove+0x2a>
 801acdc:	bd10      	pop	{r4, pc}
 801acde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ace2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ace6:	e7f7      	b.n	801acd8 <memmove+0x24>

0801ace8 <__malloc_lock>:
 801ace8:	4801      	ldr	r0, [pc, #4]	; (801acf0 <__malloc_lock+0x8>)
 801acea:	f7ff bfe1 	b.w	801acb0 <__retarget_lock_acquire_recursive>
 801acee:	bf00      	nop
 801acf0:	200039fc 	.word	0x200039fc

0801acf4 <__malloc_unlock>:
 801acf4:	4801      	ldr	r0, [pc, #4]	; (801acfc <__malloc_unlock+0x8>)
 801acf6:	f7ff bfdc 	b.w	801acb2 <__retarget_lock_release_recursive>
 801acfa:	bf00      	nop
 801acfc:	200039fc 	.word	0x200039fc

0801ad00 <_realloc_r>:
 801ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad04:	4680      	mov	r8, r0
 801ad06:	4614      	mov	r4, r2
 801ad08:	460e      	mov	r6, r1
 801ad0a:	b921      	cbnz	r1, 801ad16 <_realloc_r+0x16>
 801ad0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad10:	4611      	mov	r1, r2
 801ad12:	f7fe bfbf 	b.w	8019c94 <_malloc_r>
 801ad16:	b92a      	cbnz	r2, 801ad24 <_realloc_r+0x24>
 801ad18:	f7fe ff50 	bl	8019bbc <_free_r>
 801ad1c:	4625      	mov	r5, r4
 801ad1e:	4628      	mov	r0, r5
 801ad20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad24:	f000 faa0 	bl	801b268 <_malloc_usable_size_r>
 801ad28:	4284      	cmp	r4, r0
 801ad2a:	4607      	mov	r7, r0
 801ad2c:	d802      	bhi.n	801ad34 <_realloc_r+0x34>
 801ad2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ad32:	d812      	bhi.n	801ad5a <_realloc_r+0x5a>
 801ad34:	4621      	mov	r1, r4
 801ad36:	4640      	mov	r0, r8
 801ad38:	f7fe ffac 	bl	8019c94 <_malloc_r>
 801ad3c:	4605      	mov	r5, r0
 801ad3e:	2800      	cmp	r0, #0
 801ad40:	d0ed      	beq.n	801ad1e <_realloc_r+0x1e>
 801ad42:	42bc      	cmp	r4, r7
 801ad44:	4622      	mov	r2, r4
 801ad46:	4631      	mov	r1, r6
 801ad48:	bf28      	it	cs
 801ad4a:	463a      	movcs	r2, r7
 801ad4c:	f7fb fa3a 	bl	80161c4 <memcpy>
 801ad50:	4631      	mov	r1, r6
 801ad52:	4640      	mov	r0, r8
 801ad54:	f7fe ff32 	bl	8019bbc <_free_r>
 801ad58:	e7e1      	b.n	801ad1e <_realloc_r+0x1e>
 801ad5a:	4635      	mov	r5, r6
 801ad5c:	e7df      	b.n	801ad1e <_realloc_r+0x1e>

0801ad5e <__sfputc_r>:
 801ad5e:	6893      	ldr	r3, [r2, #8]
 801ad60:	3b01      	subs	r3, #1
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	b410      	push	{r4}
 801ad66:	6093      	str	r3, [r2, #8]
 801ad68:	da08      	bge.n	801ad7c <__sfputc_r+0x1e>
 801ad6a:	6994      	ldr	r4, [r2, #24]
 801ad6c:	42a3      	cmp	r3, r4
 801ad6e:	db01      	blt.n	801ad74 <__sfputc_r+0x16>
 801ad70:	290a      	cmp	r1, #10
 801ad72:	d103      	bne.n	801ad7c <__sfputc_r+0x1e>
 801ad74:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad78:	f000 b94a 	b.w	801b010 <__swbuf_r>
 801ad7c:	6813      	ldr	r3, [r2, #0]
 801ad7e:	1c58      	adds	r0, r3, #1
 801ad80:	6010      	str	r0, [r2, #0]
 801ad82:	7019      	strb	r1, [r3, #0]
 801ad84:	4608      	mov	r0, r1
 801ad86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad8a:	4770      	bx	lr

0801ad8c <__sfputs_r>:
 801ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad8e:	4606      	mov	r6, r0
 801ad90:	460f      	mov	r7, r1
 801ad92:	4614      	mov	r4, r2
 801ad94:	18d5      	adds	r5, r2, r3
 801ad96:	42ac      	cmp	r4, r5
 801ad98:	d101      	bne.n	801ad9e <__sfputs_r+0x12>
 801ad9a:	2000      	movs	r0, #0
 801ad9c:	e007      	b.n	801adae <__sfputs_r+0x22>
 801ad9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ada2:	463a      	mov	r2, r7
 801ada4:	4630      	mov	r0, r6
 801ada6:	f7ff ffda 	bl	801ad5e <__sfputc_r>
 801adaa:	1c43      	adds	r3, r0, #1
 801adac:	d1f3      	bne.n	801ad96 <__sfputs_r+0xa>
 801adae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801adb0 <_vfiprintf_r>:
 801adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb4:	460d      	mov	r5, r1
 801adb6:	b09d      	sub	sp, #116	; 0x74
 801adb8:	4614      	mov	r4, r2
 801adba:	4698      	mov	r8, r3
 801adbc:	4606      	mov	r6, r0
 801adbe:	b118      	cbz	r0, 801adc8 <_vfiprintf_r+0x18>
 801adc0:	6983      	ldr	r3, [r0, #24]
 801adc2:	b90b      	cbnz	r3, 801adc8 <_vfiprintf_r+0x18>
 801adc4:	f7ff fec4 	bl	801ab50 <__sinit>
 801adc8:	4b89      	ldr	r3, [pc, #548]	; (801aff0 <_vfiprintf_r+0x240>)
 801adca:	429d      	cmp	r5, r3
 801adcc:	d11b      	bne.n	801ae06 <_vfiprintf_r+0x56>
 801adce:	6875      	ldr	r5, [r6, #4]
 801add0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801add2:	07d9      	lsls	r1, r3, #31
 801add4:	d405      	bmi.n	801ade2 <_vfiprintf_r+0x32>
 801add6:	89ab      	ldrh	r3, [r5, #12]
 801add8:	059a      	lsls	r2, r3, #22
 801adda:	d402      	bmi.n	801ade2 <_vfiprintf_r+0x32>
 801addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801adde:	f7ff ff67 	bl	801acb0 <__retarget_lock_acquire_recursive>
 801ade2:	89ab      	ldrh	r3, [r5, #12]
 801ade4:	071b      	lsls	r3, r3, #28
 801ade6:	d501      	bpl.n	801adec <_vfiprintf_r+0x3c>
 801ade8:	692b      	ldr	r3, [r5, #16]
 801adea:	b9eb      	cbnz	r3, 801ae28 <_vfiprintf_r+0x78>
 801adec:	4629      	mov	r1, r5
 801adee:	4630      	mov	r0, r6
 801adf0:	f000 f960 	bl	801b0b4 <__swsetup_r>
 801adf4:	b1c0      	cbz	r0, 801ae28 <_vfiprintf_r+0x78>
 801adf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801adf8:	07dc      	lsls	r4, r3, #31
 801adfa:	d50e      	bpl.n	801ae1a <_vfiprintf_r+0x6a>
 801adfc:	f04f 30ff 	mov.w	r0, #4294967295
 801ae00:	b01d      	add	sp, #116	; 0x74
 801ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae06:	4b7b      	ldr	r3, [pc, #492]	; (801aff4 <_vfiprintf_r+0x244>)
 801ae08:	429d      	cmp	r5, r3
 801ae0a:	d101      	bne.n	801ae10 <_vfiprintf_r+0x60>
 801ae0c:	68b5      	ldr	r5, [r6, #8]
 801ae0e:	e7df      	b.n	801add0 <_vfiprintf_r+0x20>
 801ae10:	4b79      	ldr	r3, [pc, #484]	; (801aff8 <_vfiprintf_r+0x248>)
 801ae12:	429d      	cmp	r5, r3
 801ae14:	bf08      	it	eq
 801ae16:	68f5      	ldreq	r5, [r6, #12]
 801ae18:	e7da      	b.n	801add0 <_vfiprintf_r+0x20>
 801ae1a:	89ab      	ldrh	r3, [r5, #12]
 801ae1c:	0598      	lsls	r0, r3, #22
 801ae1e:	d4ed      	bmi.n	801adfc <_vfiprintf_r+0x4c>
 801ae20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae22:	f7ff ff46 	bl	801acb2 <__retarget_lock_release_recursive>
 801ae26:	e7e9      	b.n	801adfc <_vfiprintf_r+0x4c>
 801ae28:	2300      	movs	r3, #0
 801ae2a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae2c:	2320      	movs	r3, #32
 801ae2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae32:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae36:	2330      	movs	r3, #48	; 0x30
 801ae38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801affc <_vfiprintf_r+0x24c>
 801ae3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae40:	f04f 0901 	mov.w	r9, #1
 801ae44:	4623      	mov	r3, r4
 801ae46:	469a      	mov	sl, r3
 801ae48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae4c:	b10a      	cbz	r2, 801ae52 <_vfiprintf_r+0xa2>
 801ae4e:	2a25      	cmp	r2, #37	; 0x25
 801ae50:	d1f9      	bne.n	801ae46 <_vfiprintf_r+0x96>
 801ae52:	ebba 0b04 	subs.w	fp, sl, r4
 801ae56:	d00b      	beq.n	801ae70 <_vfiprintf_r+0xc0>
 801ae58:	465b      	mov	r3, fp
 801ae5a:	4622      	mov	r2, r4
 801ae5c:	4629      	mov	r1, r5
 801ae5e:	4630      	mov	r0, r6
 801ae60:	f7ff ff94 	bl	801ad8c <__sfputs_r>
 801ae64:	3001      	adds	r0, #1
 801ae66:	f000 80aa 	beq.w	801afbe <_vfiprintf_r+0x20e>
 801ae6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae6c:	445a      	add	r2, fp
 801ae6e:	9209      	str	r2, [sp, #36]	; 0x24
 801ae70:	f89a 3000 	ldrb.w	r3, [sl]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	f000 80a2 	beq.w	801afbe <_vfiprintf_r+0x20e>
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	f04f 32ff 	mov.w	r2, #4294967295
 801ae80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae84:	f10a 0a01 	add.w	sl, sl, #1
 801ae88:	9304      	str	r3, [sp, #16]
 801ae8a:	9307      	str	r3, [sp, #28]
 801ae8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae90:	931a      	str	r3, [sp, #104]	; 0x68
 801ae92:	4654      	mov	r4, sl
 801ae94:	2205      	movs	r2, #5
 801ae96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae9a:	4858      	ldr	r0, [pc, #352]	; (801affc <_vfiprintf_r+0x24c>)
 801ae9c:	f7e5 f9b8 	bl	8000210 <memchr>
 801aea0:	9a04      	ldr	r2, [sp, #16]
 801aea2:	b9d8      	cbnz	r0, 801aedc <_vfiprintf_r+0x12c>
 801aea4:	06d1      	lsls	r1, r2, #27
 801aea6:	bf44      	itt	mi
 801aea8:	2320      	movmi	r3, #32
 801aeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aeae:	0713      	lsls	r3, r2, #28
 801aeb0:	bf44      	itt	mi
 801aeb2:	232b      	movmi	r3, #43	; 0x2b
 801aeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aeb8:	f89a 3000 	ldrb.w	r3, [sl]
 801aebc:	2b2a      	cmp	r3, #42	; 0x2a
 801aebe:	d015      	beq.n	801aeec <_vfiprintf_r+0x13c>
 801aec0:	9a07      	ldr	r2, [sp, #28]
 801aec2:	4654      	mov	r4, sl
 801aec4:	2000      	movs	r0, #0
 801aec6:	f04f 0c0a 	mov.w	ip, #10
 801aeca:	4621      	mov	r1, r4
 801aecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aed0:	3b30      	subs	r3, #48	; 0x30
 801aed2:	2b09      	cmp	r3, #9
 801aed4:	d94e      	bls.n	801af74 <_vfiprintf_r+0x1c4>
 801aed6:	b1b0      	cbz	r0, 801af06 <_vfiprintf_r+0x156>
 801aed8:	9207      	str	r2, [sp, #28]
 801aeda:	e014      	b.n	801af06 <_vfiprintf_r+0x156>
 801aedc:	eba0 0308 	sub.w	r3, r0, r8
 801aee0:	fa09 f303 	lsl.w	r3, r9, r3
 801aee4:	4313      	orrs	r3, r2
 801aee6:	9304      	str	r3, [sp, #16]
 801aee8:	46a2      	mov	sl, r4
 801aeea:	e7d2      	b.n	801ae92 <_vfiprintf_r+0xe2>
 801aeec:	9b03      	ldr	r3, [sp, #12]
 801aeee:	1d19      	adds	r1, r3, #4
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	9103      	str	r1, [sp, #12]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	bfbb      	ittet	lt
 801aef8:	425b      	neglt	r3, r3
 801aefa:	f042 0202 	orrlt.w	r2, r2, #2
 801aefe:	9307      	strge	r3, [sp, #28]
 801af00:	9307      	strlt	r3, [sp, #28]
 801af02:	bfb8      	it	lt
 801af04:	9204      	strlt	r2, [sp, #16]
 801af06:	7823      	ldrb	r3, [r4, #0]
 801af08:	2b2e      	cmp	r3, #46	; 0x2e
 801af0a:	d10c      	bne.n	801af26 <_vfiprintf_r+0x176>
 801af0c:	7863      	ldrb	r3, [r4, #1]
 801af0e:	2b2a      	cmp	r3, #42	; 0x2a
 801af10:	d135      	bne.n	801af7e <_vfiprintf_r+0x1ce>
 801af12:	9b03      	ldr	r3, [sp, #12]
 801af14:	1d1a      	adds	r2, r3, #4
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	9203      	str	r2, [sp, #12]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	bfb8      	it	lt
 801af1e:	f04f 33ff 	movlt.w	r3, #4294967295
 801af22:	3402      	adds	r4, #2
 801af24:	9305      	str	r3, [sp, #20]
 801af26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b00c <_vfiprintf_r+0x25c>
 801af2a:	7821      	ldrb	r1, [r4, #0]
 801af2c:	2203      	movs	r2, #3
 801af2e:	4650      	mov	r0, sl
 801af30:	f7e5 f96e 	bl	8000210 <memchr>
 801af34:	b140      	cbz	r0, 801af48 <_vfiprintf_r+0x198>
 801af36:	2340      	movs	r3, #64	; 0x40
 801af38:	eba0 000a 	sub.w	r0, r0, sl
 801af3c:	fa03 f000 	lsl.w	r0, r3, r0
 801af40:	9b04      	ldr	r3, [sp, #16]
 801af42:	4303      	orrs	r3, r0
 801af44:	3401      	adds	r4, #1
 801af46:	9304      	str	r3, [sp, #16]
 801af48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af4c:	482c      	ldr	r0, [pc, #176]	; (801b000 <_vfiprintf_r+0x250>)
 801af4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af52:	2206      	movs	r2, #6
 801af54:	f7e5 f95c 	bl	8000210 <memchr>
 801af58:	2800      	cmp	r0, #0
 801af5a:	d03f      	beq.n	801afdc <_vfiprintf_r+0x22c>
 801af5c:	4b29      	ldr	r3, [pc, #164]	; (801b004 <_vfiprintf_r+0x254>)
 801af5e:	bb1b      	cbnz	r3, 801afa8 <_vfiprintf_r+0x1f8>
 801af60:	9b03      	ldr	r3, [sp, #12]
 801af62:	3307      	adds	r3, #7
 801af64:	f023 0307 	bic.w	r3, r3, #7
 801af68:	3308      	adds	r3, #8
 801af6a:	9303      	str	r3, [sp, #12]
 801af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af6e:	443b      	add	r3, r7
 801af70:	9309      	str	r3, [sp, #36]	; 0x24
 801af72:	e767      	b.n	801ae44 <_vfiprintf_r+0x94>
 801af74:	fb0c 3202 	mla	r2, ip, r2, r3
 801af78:	460c      	mov	r4, r1
 801af7a:	2001      	movs	r0, #1
 801af7c:	e7a5      	b.n	801aeca <_vfiprintf_r+0x11a>
 801af7e:	2300      	movs	r3, #0
 801af80:	3401      	adds	r4, #1
 801af82:	9305      	str	r3, [sp, #20]
 801af84:	4619      	mov	r1, r3
 801af86:	f04f 0c0a 	mov.w	ip, #10
 801af8a:	4620      	mov	r0, r4
 801af8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af90:	3a30      	subs	r2, #48	; 0x30
 801af92:	2a09      	cmp	r2, #9
 801af94:	d903      	bls.n	801af9e <_vfiprintf_r+0x1ee>
 801af96:	2b00      	cmp	r3, #0
 801af98:	d0c5      	beq.n	801af26 <_vfiprintf_r+0x176>
 801af9a:	9105      	str	r1, [sp, #20]
 801af9c:	e7c3      	b.n	801af26 <_vfiprintf_r+0x176>
 801af9e:	fb0c 2101 	mla	r1, ip, r1, r2
 801afa2:	4604      	mov	r4, r0
 801afa4:	2301      	movs	r3, #1
 801afa6:	e7f0      	b.n	801af8a <_vfiprintf_r+0x1da>
 801afa8:	ab03      	add	r3, sp, #12
 801afaa:	9300      	str	r3, [sp, #0]
 801afac:	462a      	mov	r2, r5
 801afae:	4b16      	ldr	r3, [pc, #88]	; (801b008 <_vfiprintf_r+0x258>)
 801afb0:	a904      	add	r1, sp, #16
 801afb2:	4630      	mov	r0, r6
 801afb4:	f7fb f9bc 	bl	8016330 <_printf_float>
 801afb8:	4607      	mov	r7, r0
 801afba:	1c78      	adds	r0, r7, #1
 801afbc:	d1d6      	bne.n	801af6c <_vfiprintf_r+0x1bc>
 801afbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801afc0:	07d9      	lsls	r1, r3, #31
 801afc2:	d405      	bmi.n	801afd0 <_vfiprintf_r+0x220>
 801afc4:	89ab      	ldrh	r3, [r5, #12]
 801afc6:	059a      	lsls	r2, r3, #22
 801afc8:	d402      	bmi.n	801afd0 <_vfiprintf_r+0x220>
 801afca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801afcc:	f7ff fe71 	bl	801acb2 <__retarget_lock_release_recursive>
 801afd0:	89ab      	ldrh	r3, [r5, #12]
 801afd2:	065b      	lsls	r3, r3, #25
 801afd4:	f53f af12 	bmi.w	801adfc <_vfiprintf_r+0x4c>
 801afd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801afda:	e711      	b.n	801ae00 <_vfiprintf_r+0x50>
 801afdc:	ab03      	add	r3, sp, #12
 801afde:	9300      	str	r3, [sp, #0]
 801afe0:	462a      	mov	r2, r5
 801afe2:	4b09      	ldr	r3, [pc, #36]	; (801b008 <_vfiprintf_r+0x258>)
 801afe4:	a904      	add	r1, sp, #16
 801afe6:	4630      	mov	r0, r6
 801afe8:	f7fb fc46 	bl	8016878 <_printf_i>
 801afec:	e7e4      	b.n	801afb8 <_vfiprintf_r+0x208>
 801afee:	bf00      	nop
 801aff0:	0801bf74 	.word	0x0801bf74
 801aff4:	0801bf94 	.word	0x0801bf94
 801aff8:	0801bf54 	.word	0x0801bf54
 801affc:	0801beec 	.word	0x0801beec
 801b000:	0801bef6 	.word	0x0801bef6
 801b004:	08016331 	.word	0x08016331
 801b008:	0801ad8d 	.word	0x0801ad8d
 801b00c:	0801bef2 	.word	0x0801bef2

0801b010 <__swbuf_r>:
 801b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b012:	460e      	mov	r6, r1
 801b014:	4614      	mov	r4, r2
 801b016:	4605      	mov	r5, r0
 801b018:	b118      	cbz	r0, 801b022 <__swbuf_r+0x12>
 801b01a:	6983      	ldr	r3, [r0, #24]
 801b01c:	b90b      	cbnz	r3, 801b022 <__swbuf_r+0x12>
 801b01e:	f7ff fd97 	bl	801ab50 <__sinit>
 801b022:	4b21      	ldr	r3, [pc, #132]	; (801b0a8 <__swbuf_r+0x98>)
 801b024:	429c      	cmp	r4, r3
 801b026:	d12b      	bne.n	801b080 <__swbuf_r+0x70>
 801b028:	686c      	ldr	r4, [r5, #4]
 801b02a:	69a3      	ldr	r3, [r4, #24]
 801b02c:	60a3      	str	r3, [r4, #8]
 801b02e:	89a3      	ldrh	r3, [r4, #12]
 801b030:	071a      	lsls	r2, r3, #28
 801b032:	d52f      	bpl.n	801b094 <__swbuf_r+0x84>
 801b034:	6923      	ldr	r3, [r4, #16]
 801b036:	b36b      	cbz	r3, 801b094 <__swbuf_r+0x84>
 801b038:	6923      	ldr	r3, [r4, #16]
 801b03a:	6820      	ldr	r0, [r4, #0]
 801b03c:	1ac0      	subs	r0, r0, r3
 801b03e:	6963      	ldr	r3, [r4, #20]
 801b040:	b2f6      	uxtb	r6, r6
 801b042:	4283      	cmp	r3, r0
 801b044:	4637      	mov	r7, r6
 801b046:	dc04      	bgt.n	801b052 <__swbuf_r+0x42>
 801b048:	4621      	mov	r1, r4
 801b04a:	4628      	mov	r0, r5
 801b04c:	f7ff fcec 	bl	801aa28 <_fflush_r>
 801b050:	bb30      	cbnz	r0, 801b0a0 <__swbuf_r+0x90>
 801b052:	68a3      	ldr	r3, [r4, #8]
 801b054:	3b01      	subs	r3, #1
 801b056:	60a3      	str	r3, [r4, #8]
 801b058:	6823      	ldr	r3, [r4, #0]
 801b05a:	1c5a      	adds	r2, r3, #1
 801b05c:	6022      	str	r2, [r4, #0]
 801b05e:	701e      	strb	r6, [r3, #0]
 801b060:	6963      	ldr	r3, [r4, #20]
 801b062:	3001      	adds	r0, #1
 801b064:	4283      	cmp	r3, r0
 801b066:	d004      	beq.n	801b072 <__swbuf_r+0x62>
 801b068:	89a3      	ldrh	r3, [r4, #12]
 801b06a:	07db      	lsls	r3, r3, #31
 801b06c:	d506      	bpl.n	801b07c <__swbuf_r+0x6c>
 801b06e:	2e0a      	cmp	r6, #10
 801b070:	d104      	bne.n	801b07c <__swbuf_r+0x6c>
 801b072:	4621      	mov	r1, r4
 801b074:	4628      	mov	r0, r5
 801b076:	f7ff fcd7 	bl	801aa28 <_fflush_r>
 801b07a:	b988      	cbnz	r0, 801b0a0 <__swbuf_r+0x90>
 801b07c:	4638      	mov	r0, r7
 801b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b080:	4b0a      	ldr	r3, [pc, #40]	; (801b0ac <__swbuf_r+0x9c>)
 801b082:	429c      	cmp	r4, r3
 801b084:	d101      	bne.n	801b08a <__swbuf_r+0x7a>
 801b086:	68ac      	ldr	r4, [r5, #8]
 801b088:	e7cf      	b.n	801b02a <__swbuf_r+0x1a>
 801b08a:	4b09      	ldr	r3, [pc, #36]	; (801b0b0 <__swbuf_r+0xa0>)
 801b08c:	429c      	cmp	r4, r3
 801b08e:	bf08      	it	eq
 801b090:	68ec      	ldreq	r4, [r5, #12]
 801b092:	e7ca      	b.n	801b02a <__swbuf_r+0x1a>
 801b094:	4621      	mov	r1, r4
 801b096:	4628      	mov	r0, r5
 801b098:	f000 f80c 	bl	801b0b4 <__swsetup_r>
 801b09c:	2800      	cmp	r0, #0
 801b09e:	d0cb      	beq.n	801b038 <__swbuf_r+0x28>
 801b0a0:	f04f 37ff 	mov.w	r7, #4294967295
 801b0a4:	e7ea      	b.n	801b07c <__swbuf_r+0x6c>
 801b0a6:	bf00      	nop
 801b0a8:	0801bf74 	.word	0x0801bf74
 801b0ac:	0801bf94 	.word	0x0801bf94
 801b0b0:	0801bf54 	.word	0x0801bf54

0801b0b4 <__swsetup_r>:
 801b0b4:	4b32      	ldr	r3, [pc, #200]	; (801b180 <__swsetup_r+0xcc>)
 801b0b6:	b570      	push	{r4, r5, r6, lr}
 801b0b8:	681d      	ldr	r5, [r3, #0]
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	460c      	mov	r4, r1
 801b0be:	b125      	cbz	r5, 801b0ca <__swsetup_r+0x16>
 801b0c0:	69ab      	ldr	r3, [r5, #24]
 801b0c2:	b913      	cbnz	r3, 801b0ca <__swsetup_r+0x16>
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	f7ff fd43 	bl	801ab50 <__sinit>
 801b0ca:	4b2e      	ldr	r3, [pc, #184]	; (801b184 <__swsetup_r+0xd0>)
 801b0cc:	429c      	cmp	r4, r3
 801b0ce:	d10f      	bne.n	801b0f0 <__swsetup_r+0x3c>
 801b0d0:	686c      	ldr	r4, [r5, #4]
 801b0d2:	89a3      	ldrh	r3, [r4, #12]
 801b0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b0d8:	0719      	lsls	r1, r3, #28
 801b0da:	d42c      	bmi.n	801b136 <__swsetup_r+0x82>
 801b0dc:	06dd      	lsls	r5, r3, #27
 801b0de:	d411      	bmi.n	801b104 <__swsetup_r+0x50>
 801b0e0:	2309      	movs	r3, #9
 801b0e2:	6033      	str	r3, [r6, #0]
 801b0e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b0e8:	81a3      	strh	r3, [r4, #12]
 801b0ea:	f04f 30ff 	mov.w	r0, #4294967295
 801b0ee:	e03e      	b.n	801b16e <__swsetup_r+0xba>
 801b0f0:	4b25      	ldr	r3, [pc, #148]	; (801b188 <__swsetup_r+0xd4>)
 801b0f2:	429c      	cmp	r4, r3
 801b0f4:	d101      	bne.n	801b0fa <__swsetup_r+0x46>
 801b0f6:	68ac      	ldr	r4, [r5, #8]
 801b0f8:	e7eb      	b.n	801b0d2 <__swsetup_r+0x1e>
 801b0fa:	4b24      	ldr	r3, [pc, #144]	; (801b18c <__swsetup_r+0xd8>)
 801b0fc:	429c      	cmp	r4, r3
 801b0fe:	bf08      	it	eq
 801b100:	68ec      	ldreq	r4, [r5, #12]
 801b102:	e7e6      	b.n	801b0d2 <__swsetup_r+0x1e>
 801b104:	0758      	lsls	r0, r3, #29
 801b106:	d512      	bpl.n	801b12e <__swsetup_r+0x7a>
 801b108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b10a:	b141      	cbz	r1, 801b11e <__swsetup_r+0x6a>
 801b10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b110:	4299      	cmp	r1, r3
 801b112:	d002      	beq.n	801b11a <__swsetup_r+0x66>
 801b114:	4630      	mov	r0, r6
 801b116:	f7fe fd51 	bl	8019bbc <_free_r>
 801b11a:	2300      	movs	r3, #0
 801b11c:	6363      	str	r3, [r4, #52]	; 0x34
 801b11e:	89a3      	ldrh	r3, [r4, #12]
 801b120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b124:	81a3      	strh	r3, [r4, #12]
 801b126:	2300      	movs	r3, #0
 801b128:	6063      	str	r3, [r4, #4]
 801b12a:	6923      	ldr	r3, [r4, #16]
 801b12c:	6023      	str	r3, [r4, #0]
 801b12e:	89a3      	ldrh	r3, [r4, #12]
 801b130:	f043 0308 	orr.w	r3, r3, #8
 801b134:	81a3      	strh	r3, [r4, #12]
 801b136:	6923      	ldr	r3, [r4, #16]
 801b138:	b94b      	cbnz	r3, 801b14e <__swsetup_r+0x9a>
 801b13a:	89a3      	ldrh	r3, [r4, #12]
 801b13c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b144:	d003      	beq.n	801b14e <__swsetup_r+0x9a>
 801b146:	4621      	mov	r1, r4
 801b148:	4630      	mov	r0, r6
 801b14a:	f000 f84d 	bl	801b1e8 <__smakebuf_r>
 801b14e:	89a0      	ldrh	r0, [r4, #12]
 801b150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b154:	f010 0301 	ands.w	r3, r0, #1
 801b158:	d00a      	beq.n	801b170 <__swsetup_r+0xbc>
 801b15a:	2300      	movs	r3, #0
 801b15c:	60a3      	str	r3, [r4, #8]
 801b15e:	6963      	ldr	r3, [r4, #20]
 801b160:	425b      	negs	r3, r3
 801b162:	61a3      	str	r3, [r4, #24]
 801b164:	6923      	ldr	r3, [r4, #16]
 801b166:	b943      	cbnz	r3, 801b17a <__swsetup_r+0xc6>
 801b168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b16c:	d1ba      	bne.n	801b0e4 <__swsetup_r+0x30>
 801b16e:	bd70      	pop	{r4, r5, r6, pc}
 801b170:	0781      	lsls	r1, r0, #30
 801b172:	bf58      	it	pl
 801b174:	6963      	ldrpl	r3, [r4, #20]
 801b176:	60a3      	str	r3, [r4, #8]
 801b178:	e7f4      	b.n	801b164 <__swsetup_r+0xb0>
 801b17a:	2000      	movs	r0, #0
 801b17c:	e7f7      	b.n	801b16e <__swsetup_r+0xba>
 801b17e:	bf00      	nop
 801b180:	2000003c 	.word	0x2000003c
 801b184:	0801bf74 	.word	0x0801bf74
 801b188:	0801bf94 	.word	0x0801bf94
 801b18c:	0801bf54 	.word	0x0801bf54

0801b190 <abort>:
 801b190:	b508      	push	{r3, lr}
 801b192:	2006      	movs	r0, #6
 801b194:	f000 f898 	bl	801b2c8 <raise>
 801b198:	2001      	movs	r0, #1
 801b19a:	f7e7 f96a 	bl	8002472 <_exit>

0801b19e <__swhatbuf_r>:
 801b19e:	b570      	push	{r4, r5, r6, lr}
 801b1a0:	460e      	mov	r6, r1
 801b1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a6:	2900      	cmp	r1, #0
 801b1a8:	b096      	sub	sp, #88	; 0x58
 801b1aa:	4614      	mov	r4, r2
 801b1ac:	461d      	mov	r5, r3
 801b1ae:	da08      	bge.n	801b1c2 <__swhatbuf_r+0x24>
 801b1b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	602a      	str	r2, [r5, #0]
 801b1b8:	061a      	lsls	r2, r3, #24
 801b1ba:	d410      	bmi.n	801b1de <__swhatbuf_r+0x40>
 801b1bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b1c0:	e00e      	b.n	801b1e0 <__swhatbuf_r+0x42>
 801b1c2:	466a      	mov	r2, sp
 801b1c4:	f000 f89c 	bl	801b300 <_fstat_r>
 801b1c8:	2800      	cmp	r0, #0
 801b1ca:	dbf1      	blt.n	801b1b0 <__swhatbuf_r+0x12>
 801b1cc:	9a01      	ldr	r2, [sp, #4]
 801b1ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b1d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b1d6:	425a      	negs	r2, r3
 801b1d8:	415a      	adcs	r2, r3
 801b1da:	602a      	str	r2, [r5, #0]
 801b1dc:	e7ee      	b.n	801b1bc <__swhatbuf_r+0x1e>
 801b1de:	2340      	movs	r3, #64	; 0x40
 801b1e0:	2000      	movs	r0, #0
 801b1e2:	6023      	str	r3, [r4, #0]
 801b1e4:	b016      	add	sp, #88	; 0x58
 801b1e6:	bd70      	pop	{r4, r5, r6, pc}

0801b1e8 <__smakebuf_r>:
 801b1e8:	898b      	ldrh	r3, [r1, #12]
 801b1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1ec:	079d      	lsls	r5, r3, #30
 801b1ee:	4606      	mov	r6, r0
 801b1f0:	460c      	mov	r4, r1
 801b1f2:	d507      	bpl.n	801b204 <__smakebuf_r+0x1c>
 801b1f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1f8:	6023      	str	r3, [r4, #0]
 801b1fa:	6123      	str	r3, [r4, #16]
 801b1fc:	2301      	movs	r3, #1
 801b1fe:	6163      	str	r3, [r4, #20]
 801b200:	b002      	add	sp, #8
 801b202:	bd70      	pop	{r4, r5, r6, pc}
 801b204:	ab01      	add	r3, sp, #4
 801b206:	466a      	mov	r2, sp
 801b208:	f7ff ffc9 	bl	801b19e <__swhatbuf_r>
 801b20c:	9900      	ldr	r1, [sp, #0]
 801b20e:	4605      	mov	r5, r0
 801b210:	4630      	mov	r0, r6
 801b212:	f7fe fd3f 	bl	8019c94 <_malloc_r>
 801b216:	b948      	cbnz	r0, 801b22c <__smakebuf_r+0x44>
 801b218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b21c:	059a      	lsls	r2, r3, #22
 801b21e:	d4ef      	bmi.n	801b200 <__smakebuf_r+0x18>
 801b220:	f023 0303 	bic.w	r3, r3, #3
 801b224:	f043 0302 	orr.w	r3, r3, #2
 801b228:	81a3      	strh	r3, [r4, #12]
 801b22a:	e7e3      	b.n	801b1f4 <__smakebuf_r+0xc>
 801b22c:	4b0d      	ldr	r3, [pc, #52]	; (801b264 <__smakebuf_r+0x7c>)
 801b22e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b230:	89a3      	ldrh	r3, [r4, #12]
 801b232:	6020      	str	r0, [r4, #0]
 801b234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b238:	81a3      	strh	r3, [r4, #12]
 801b23a:	9b00      	ldr	r3, [sp, #0]
 801b23c:	6163      	str	r3, [r4, #20]
 801b23e:	9b01      	ldr	r3, [sp, #4]
 801b240:	6120      	str	r0, [r4, #16]
 801b242:	b15b      	cbz	r3, 801b25c <__smakebuf_r+0x74>
 801b244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b248:	4630      	mov	r0, r6
 801b24a:	f000 f86b 	bl	801b324 <_isatty_r>
 801b24e:	b128      	cbz	r0, 801b25c <__smakebuf_r+0x74>
 801b250:	89a3      	ldrh	r3, [r4, #12]
 801b252:	f023 0303 	bic.w	r3, r3, #3
 801b256:	f043 0301 	orr.w	r3, r3, #1
 801b25a:	81a3      	strh	r3, [r4, #12]
 801b25c:	89a0      	ldrh	r0, [r4, #12]
 801b25e:	4305      	orrs	r5, r0
 801b260:	81a5      	strh	r5, [r4, #12]
 801b262:	e7cd      	b.n	801b200 <__smakebuf_r+0x18>
 801b264:	0801aae9 	.word	0x0801aae9

0801b268 <_malloc_usable_size_r>:
 801b268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b26c:	1f18      	subs	r0, r3, #4
 801b26e:	2b00      	cmp	r3, #0
 801b270:	bfbc      	itt	lt
 801b272:	580b      	ldrlt	r3, [r1, r0]
 801b274:	18c0      	addlt	r0, r0, r3
 801b276:	4770      	bx	lr

0801b278 <_raise_r>:
 801b278:	291f      	cmp	r1, #31
 801b27a:	b538      	push	{r3, r4, r5, lr}
 801b27c:	4604      	mov	r4, r0
 801b27e:	460d      	mov	r5, r1
 801b280:	d904      	bls.n	801b28c <_raise_r+0x14>
 801b282:	2316      	movs	r3, #22
 801b284:	6003      	str	r3, [r0, #0]
 801b286:	f04f 30ff 	mov.w	r0, #4294967295
 801b28a:	bd38      	pop	{r3, r4, r5, pc}
 801b28c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b28e:	b112      	cbz	r2, 801b296 <_raise_r+0x1e>
 801b290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b294:	b94b      	cbnz	r3, 801b2aa <_raise_r+0x32>
 801b296:	4620      	mov	r0, r4
 801b298:	f000 f830 	bl	801b2fc <_getpid_r>
 801b29c:	462a      	mov	r2, r5
 801b29e:	4601      	mov	r1, r0
 801b2a0:	4620      	mov	r0, r4
 801b2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2a6:	f000 b817 	b.w	801b2d8 <_kill_r>
 801b2aa:	2b01      	cmp	r3, #1
 801b2ac:	d00a      	beq.n	801b2c4 <_raise_r+0x4c>
 801b2ae:	1c59      	adds	r1, r3, #1
 801b2b0:	d103      	bne.n	801b2ba <_raise_r+0x42>
 801b2b2:	2316      	movs	r3, #22
 801b2b4:	6003      	str	r3, [r0, #0]
 801b2b6:	2001      	movs	r0, #1
 801b2b8:	e7e7      	b.n	801b28a <_raise_r+0x12>
 801b2ba:	2400      	movs	r4, #0
 801b2bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2c0:	4628      	mov	r0, r5
 801b2c2:	4798      	blx	r3
 801b2c4:	2000      	movs	r0, #0
 801b2c6:	e7e0      	b.n	801b28a <_raise_r+0x12>

0801b2c8 <raise>:
 801b2c8:	4b02      	ldr	r3, [pc, #8]	; (801b2d4 <raise+0xc>)
 801b2ca:	4601      	mov	r1, r0
 801b2cc:	6818      	ldr	r0, [r3, #0]
 801b2ce:	f7ff bfd3 	b.w	801b278 <_raise_r>
 801b2d2:	bf00      	nop
 801b2d4:	2000003c 	.word	0x2000003c

0801b2d8 <_kill_r>:
 801b2d8:	b538      	push	{r3, r4, r5, lr}
 801b2da:	4d07      	ldr	r5, [pc, #28]	; (801b2f8 <_kill_r+0x20>)
 801b2dc:	2300      	movs	r3, #0
 801b2de:	4604      	mov	r4, r0
 801b2e0:	4608      	mov	r0, r1
 801b2e2:	4611      	mov	r1, r2
 801b2e4:	602b      	str	r3, [r5, #0]
 801b2e6:	f7e7 f8b4 	bl	8002452 <_kill>
 801b2ea:	1c43      	adds	r3, r0, #1
 801b2ec:	d102      	bne.n	801b2f4 <_kill_r+0x1c>
 801b2ee:	682b      	ldr	r3, [r5, #0]
 801b2f0:	b103      	cbz	r3, 801b2f4 <_kill_r+0x1c>
 801b2f2:	6023      	str	r3, [r4, #0]
 801b2f4:	bd38      	pop	{r3, r4, r5, pc}
 801b2f6:	bf00      	nop
 801b2f8:	200039f8 	.word	0x200039f8

0801b2fc <_getpid_r>:
 801b2fc:	f7e7 b8a1 	b.w	8002442 <_getpid>

0801b300 <_fstat_r>:
 801b300:	b538      	push	{r3, r4, r5, lr}
 801b302:	4d07      	ldr	r5, [pc, #28]	; (801b320 <_fstat_r+0x20>)
 801b304:	2300      	movs	r3, #0
 801b306:	4604      	mov	r4, r0
 801b308:	4608      	mov	r0, r1
 801b30a:	4611      	mov	r1, r2
 801b30c:	602b      	str	r3, [r5, #0]
 801b30e:	f7e7 f8ff 	bl	8002510 <_fstat>
 801b312:	1c43      	adds	r3, r0, #1
 801b314:	d102      	bne.n	801b31c <_fstat_r+0x1c>
 801b316:	682b      	ldr	r3, [r5, #0]
 801b318:	b103      	cbz	r3, 801b31c <_fstat_r+0x1c>
 801b31a:	6023      	str	r3, [r4, #0]
 801b31c:	bd38      	pop	{r3, r4, r5, pc}
 801b31e:	bf00      	nop
 801b320:	200039f8 	.word	0x200039f8

0801b324 <_isatty_r>:
 801b324:	b538      	push	{r3, r4, r5, lr}
 801b326:	4d06      	ldr	r5, [pc, #24]	; (801b340 <_isatty_r+0x1c>)
 801b328:	2300      	movs	r3, #0
 801b32a:	4604      	mov	r4, r0
 801b32c:	4608      	mov	r0, r1
 801b32e:	602b      	str	r3, [r5, #0]
 801b330:	f7e7 f8fe 	bl	8002530 <_isatty>
 801b334:	1c43      	adds	r3, r0, #1
 801b336:	d102      	bne.n	801b33e <_isatty_r+0x1a>
 801b338:	682b      	ldr	r3, [r5, #0]
 801b33a:	b103      	cbz	r3, 801b33e <_isatty_r+0x1a>
 801b33c:	6023      	str	r3, [r4, #0]
 801b33e:	bd38      	pop	{r3, r4, r5, pc}
 801b340:	200039f8 	.word	0x200039f8

0801b344 <_init>:
 801b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b346:	bf00      	nop
 801b348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b34a:	bc08      	pop	{r3}
 801b34c:	469e      	mov	lr, r3
 801b34e:	4770      	bx	lr

0801b350 <_fini>:
 801b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b352:	bf00      	nop
 801b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b356:	bc08      	pop	{r3}
 801b358:	469e      	mov	lr, r3
 801b35a:	4770      	bx	lr
