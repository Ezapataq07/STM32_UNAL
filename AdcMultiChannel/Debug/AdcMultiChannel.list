
AdcMultiChannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001ea4  08001ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eec  08001eec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001eec  08001eec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eec  08001eec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ef0  08001ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08001ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000078  08001f6c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08001f6c  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d2d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ac1  00000000  00000000  00022dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00023890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  00023ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f71d  00000000  00000000  00023c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e9c  00000000  00000000  000333b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000552f4  00000000  00000000  00036251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b00  00000000  00000000  0008b598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e8c 	.word	0x08001e8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08001e8c 	.word	0x08001e8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:


void initSystem(void);
void setPeriod(BTIMER_Handler_t *ptrUsartHandler, uint16_t period);

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

	initSystem();
 8000286:	f000 f863 	bl	8000350 <initSystem>
	char hola[10] = "Hola";
 800028a:	4a29      	ldr	r2, [pc, #164]	; (8000330 <main+0xb0>)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000292:	6018      	str	r0, [r3, #0]
 8000294:	3304      	adds	r3, #4
 8000296:	7019      	strb	r1, [r3, #0]
 8000298:	f107 0309 	add.w	r3, r7, #9
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	711a      	strb	r2, [r3, #4]
	writeMsg(&handlerUSART2, hola);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4823      	ldr	r0, [pc, #140]	; (8000334 <main+0xb4>)
 80002a8:	f001 f89e 	bl	80013e8 <writeMsg>
	stopTimer(&handlerAdcSamplingTimer);
 80002ac:	4822      	ldr	r0, [pc, #136]	; (8000338 <main+0xb8>)
 80002ae:	f000 fd2f 	bl	8000d10 <stopTimer>
	while(1){

		// Hacemos un "eco" con el valor que nos llega por el serial

		if (rxData != '\0'){
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <main+0xbc>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d01a      	beq.n	80002f0 <main+0x70>
			writeChar(&handlerUSART2, rxData);
 80002ba:	4b20      	ldr	r3, [pc, #128]	; (800033c <main+0xbc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4619      	mov	r1, r3
 80002c0:	481c      	ldr	r0, [pc, #112]	; (8000334 <main+0xb4>)
 80002c2:	f001 f863 	bl	800138c <writeChar>
			if (rxData == 's'){
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <main+0xbc>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b73      	cmp	r3, #115	; 0x73
 80002cc:	d101      	bne.n	80002d2 <main+0x52>
				// Lanzamos una nueva conversi√≥n ADC
				startSingleConversion();
 80002ce:	f000 fb3d 	bl	800094c <startSingleConversion>
			}
			if (rxData == 'c'){
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <main+0xbc>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b63      	cmp	r3, #99	; 0x63
 80002d8:	d101      	bne.n	80002de <main+0x5e>
				startContinuousConversion();
 80002da:	f000 fb45 	bl	8000968 <startContinuousConversion>
			}
			if (rxData == 'p'){
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <main+0xbc>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b70      	cmp	r3, #112	; 0x70
 80002e4:	d101      	bne.n	80002ea <main+0x6a>
				stopContinuousConversion();
 80002e6:	f000 fb53 	bl	8000990 <stopContinuousConversion>
			}

			rxData = '\0';
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <main+0xbc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
		}

		if (adcIsComplete == true){
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <main+0xc0>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d1dc      	bne.n	80002b2 <main+0x32>
			stopContinuousConversion();
 80002f8:	f000 fb4a 	bl	8000990 <stopContinuousConversion>
			for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 80002fc:	2300      	movs	r3, #0
 80002fe:	81fb      	strh	r3, [r7, #14]
 8000300:	e00f      	b.n	8000322 <main+0xa2>
				sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
 8000302:	89fb      	ldrh	r3, [r7, #14]
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <main+0xc4>)
 8000306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800030a:	461a      	mov	r2, r3
 800030c:	490e      	ldr	r1, [pc, #56]	; (8000348 <main+0xc8>)
 800030e:	480f      	ldr	r0, [pc, #60]	; (800034c <main+0xcc>)
 8000310:	f001 f950 	bl	80015b4 <siprintf>
				writeMsg(&handlerUSART2, bufferData);
 8000314:	490d      	ldr	r1, [pc, #52]	; (800034c <main+0xcc>)
 8000316:	4807      	ldr	r0, [pc, #28]	; (8000334 <main+0xb4>)
 8000318:	f001 f866 	bl	80013e8 <writeMsg>
			for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 800031c:	89fb      	ldrh	r3, [r7, #14]
 800031e:	3301      	adds	r3, #1
 8000320:	81fb      	strh	r3, [r7, #14]
 8000322:	89fb      	ldrh	r3, [r7, #14]
 8000324:	2b7f      	cmp	r3, #127	; 0x7f
 8000326:	d9ec      	bls.n	8000302 <main+0x82>
			}
			adcIsComplete = false;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <main+0xc0>)
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 800032e:	e7c0      	b.n	80002b2 <main+0x32>
 8000330:	08001eac 	.word	0x08001eac
 8000334:	200000e4 	.word	0x200000e4
 8000338:	200000d4 	.word	0x200000d4
 800033c:	2000019a 	.word	0x2000019a
 8000340:	2000019b 	.word	0x2000019b
 8000344:	2000019c 	.word	0x2000019c
 8000348:	08001ea4 	.word	0x08001ea4
 800034c:	20000000 	.word	0x20000000

08000350 <initSystem>:


	return 0;
}

void initSystem(void){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0

	// Configuraci√≥n para el State LED
	handlerStateLED.pGPIOx 								= GPIOA;
 8000354:	4b70      	ldr	r3, [pc, #448]	; (8000518 <initSystem+0x1c8>)
 8000356:	4a71      	ldr	r2, [pc, #452]	; (800051c <initSystem+0x1cc>)
 8000358:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800035a:	4b6f      	ldr	r3, [pc, #444]	; (8000518 <initSystem+0x1c8>)
 800035c:	2205      	movs	r2, #5
 800035e:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000360:	4b6d      	ldr	r3, [pc, #436]	; (8000518 <initSystem+0x1c8>)
 8000362:	2201      	movs	r2, #1
 8000364:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8000366:	4b6c      	ldr	r3, [pc, #432]	; (8000518 <initSystem+0x1c8>)
 8000368:	2200      	movs	r2, #0
 800036a:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Est√° configuraci√≥n no es relevante para el PIN en este caso
 800036c:	4b6a      	ldr	r3, [pc, #424]	; (8000518 <initSystem+0x1c8>)
 800036e:	2200      	movs	r2, #0
 8000370:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000372:	4b69      	ldr	r3, [pc, #420]	; (8000518 <initSystem+0x1c8>)
 8000374:	2201      	movs	r2, #1
 8000376:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Est√° configuraci√≥n no es relevante para el PIN en este caso
 8000378:	4b67      	ldr	r3, [pc, #412]	; (8000518 <initSystem+0x1c8>)
 800037a:	2200      	movs	r2, #0
 800037c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del State LED
	GPIO_Config(&handlerStateLED);
 800037e:	4866      	ldr	r0, [pc, #408]	; (8000518 <initSystem+0x1c8>)
 8000380:	f000 fd08 	bl	8000d94 <GPIO_Config>

	// Configuraci√≥n para el Test LED
	handlerTestLED.pGPIOx 								= GPIOB;
 8000384:	4b66      	ldr	r3, [pc, #408]	; (8000520 <initSystem+0x1d0>)
 8000386:	4a67      	ldr	r2, [pc, #412]	; (8000524 <initSystem+0x1d4>)
 8000388:	601a      	str	r2, [r3, #0]
	handlerTestLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 800038a:	4b65      	ldr	r3, [pc, #404]	; (8000520 <initSystem+0x1d0>)
 800038c:	2209      	movs	r2, #9
 800038e:	711a      	strb	r2, [r3, #4]
	handlerTestLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000390:	4b63      	ldr	r3, [pc, #396]	; (8000520 <initSystem+0x1d0>)
 8000392:	2201      	movs	r2, #1
 8000394:	715a      	strb	r2, [r3, #5]
	handlerTestLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8000396:	4b62      	ldr	r3, [pc, #392]	; (8000520 <initSystem+0x1d0>)
 8000398:	2200      	movs	r2, #0
 800039a:	721a      	strb	r2, [r3, #8]
	handlerTestLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Est√° configuraci√≥n no es relevante para el PIN en este caso
 800039c:	4b60      	ldr	r3, [pc, #384]	; (8000520 <initSystem+0x1d0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	71da      	strb	r2, [r3, #7]
	handlerTestLED.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 80003a2:	4b5f      	ldr	r3, [pc, #380]	; (8000520 <initSystem+0x1d0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	719a      	strb	r2, [r3, #6]
	handlerTestLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Est√° configuraci√≥n no es relevante para el PIN en este caso
 80003a8:	4b5d      	ldr	r3, [pc, #372]	; (8000520 <initSystem+0x1d0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del State LED
	GPIO_Config(&handlerTestLED);
 80003ae:	485c      	ldr	r0, [pc, #368]	; (8000520 <initSystem+0x1d0>)
 80003b0:	f000 fcf0 	bl	8000d94 <GPIO_Config>

	// Configuraci√≥n del PIN que recibe la informaci√≥n por la USB
	handlerRxPIN.pGPIOx								= GPIOA;
 80003b4:	4b5c      	ldr	r3, [pc, #368]	; (8000528 <initSystem+0x1d8>)
 80003b6:	4a59      	ldr	r2, [pc, #356]	; (800051c <initSystem+0x1cc>)
 80003b8:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 80003ba:	4b5b      	ldr	r3, [pc, #364]	; (8000528 <initSystem+0x1d8>)
 80003bc:	2203      	movs	r2, #3
 80003be:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80003c0:	4b59      	ldr	r3, [pc, #356]	; (8000528 <initSystem+0x1d8>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003c6:	4b58      	ldr	r3, [pc, #352]	; (8000528 <initSystem+0x1d8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80003cc:	4b56      	ldr	r3, [pc, #344]	; (8000528 <initSystem+0x1d8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80003d2:	4b55      	ldr	r3, [pc, #340]	; (8000528 <initSystem+0x1d8>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 80003d8:	4b53      	ldr	r3, [pc, #332]	; (8000528 <initSystem+0x1d8>)
 80003da:	2207      	movs	r2, #7
 80003dc:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del Rx PIN
	GPIO_Config(&handlerRxPIN);
 80003de:	4852      	ldr	r0, [pc, #328]	; (8000528 <initSystem+0x1d8>)
 80003e0:	f000 fcd8 	bl	8000d94 <GPIO_Config>

	// Configuraci√≥n del PIN que env√≠a la informaci√≥n por la USB (TX)
	handlerTxPIN.pGPIOx								= GPIOA;
 80003e4:	4b51      	ldr	r3, [pc, #324]	; (800052c <initSystem+0x1dc>)
 80003e6:	4a4d      	ldr	r2, [pc, #308]	; (800051c <initSystem+0x1cc>)
 80003e8:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 80003ea:	4b50      	ldr	r3, [pc, #320]	; (800052c <initSystem+0x1dc>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80003f0:	4b4e      	ldr	r3, [pc, #312]	; (800052c <initSystem+0x1dc>)
 80003f2:	2202      	movs	r2, #2
 80003f4:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003f6:	4b4d      	ldr	r3, [pc, #308]	; (800052c <initSystem+0x1dc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80003fc:	4b4b      	ldr	r3, [pc, #300]	; (800052c <initSystem+0x1dc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000402:	4b4a      	ldr	r3, [pc, #296]	; (800052c <initSystem+0x1dc>)
 8000404:	2201      	movs	r2, #1
 8000406:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000408:	4b48      	ldr	r3, [pc, #288]	; (800052c <initSystem+0x1dc>)
 800040a:	2207      	movs	r2, #7
 800040c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del Tx PIN
	GPIO_Config(&handlerTxPIN);
 800040e:	4847      	ldr	r0, [pc, #284]	; (800052c <initSystem+0x1dc>)
 8000410:	f000 fcc0 	bl	8000d94 <GPIO_Config>

	// Configuraci√≥n del USART2
	handlerUSART2.ptrUSARTx							= USART2;
 8000414:	4b46      	ldr	r3, [pc, #280]	; (8000530 <initSystem+0x1e0>)
 8000416:	4a47      	ldr	r2, [pc, #284]	; (8000534 <initSystem+0x1e4>)
 8000418:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_mode			= USART_MODE_RXTX;
 800041a:	4b45      	ldr	r3, [pc, #276]	; (8000530 <initSystem+0x1e0>)
 800041c:	2202      	movs	r2, #2
 800041e:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <initSystem+0x1e0>)
 8000422:	2202      	movs	r2, #2
 8000424:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 8000426:	4b42      	ldr	r3, [pc, #264]	; (8000530 <initSystem+0x1e0>)
 8000428:	2200      	movs	r2, #0
 800042a:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity			= USART_PARITY_NONE;
 800042c:	4b40      	ldr	r3, [pc, #256]	; (8000530 <initSystem+0x1e0>)
 800042e:	2200      	movs	r2, #0
 8000430:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 8000432:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <initSystem+0x1e0>)
 8000434:	2200      	movs	r2, #0
 8000436:	721a      	strb	r2, [r3, #8]
	handlerUSART2.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 8000438:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <initSystem+0x1e0>)
 800043a:	2201      	movs	r2, #1
 800043c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuraci√≥n del USART
	USART_Config(&handlerUSART2);
 800043e:	483c      	ldr	r0, [pc, #240]	; (8000530 <initSystem+0x1e0>)
 8000440:	f000 fe10 	bl	8001064 <USART_Config>

	// Configuraci√≥n del Timer 2
	handlerStateLedTimer.ptrTIMx						= TIM2;
 8000444:	4b3c      	ldr	r3, [pc, #240]	; (8000538 <initSystem+0x1e8>)
 8000446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044a:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 800044c:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <initSystem+0x1e8>)
 800044e:	2201      	movs	r2, #1
 8000450:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 8000452:	4b39      	ldr	r3, [pc, #228]	; (8000538 <initSystem+0x1e8>)
 8000454:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000458:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 800045a:	4b37      	ldr	r3, [pc, #220]	; (8000538 <initSystem+0x1e8>)
 800045c:	22fa      	movs	r2, #250	; 0xfa
 800045e:	609a      	str	r2, [r3, #8]

	//Cargamos la configuraci√≥n TIM2
	BTimer_Config(&handlerStateLedTimer);
 8000460:	4835      	ldr	r0, [pc, #212]	; (8000538 <initSystem+0x1e8>)
 8000462:	f000 fbb9 	bl	8000bd8 <BTimer_Config>

	// Configuraci√≥n del Timer para el ADC
	handlerAdcSamplingTimer.ptrTIMx						= TIM4;
 8000466:	4b35      	ldr	r3, [pc, #212]	; (800053c <initSystem+0x1ec>)
 8000468:	4a35      	ldr	r2, [pc, #212]	; (8000540 <initSystem+0x1f0>)
 800046a:	601a      	str	r2, [r3, #0]
	handlerAdcSamplingTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 800046c:	4b33      	ldr	r3, [pc, #204]	; (800053c <initSystem+0x1ec>)
 800046e:	2201      	movs	r2, #1
 8000470:	711a      	strb	r2, [r3, #4]
	handlerAdcSamplingTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_10us;
 8000472:	4b32      	ldr	r3, [pc, #200]	; (800053c <initSystem+0x1ec>)
 8000474:	22a0      	movs	r2, #160	; 0xa0
 8000476:	80da      	strh	r2, [r3, #6]
	handlerAdcSamplingTimer.timerConfig.Timer_period	= 2;
 8000478:	4b30      	ldr	r3, [pc, #192]	; (800053c <initSystem+0x1ec>)
 800047a:	2202      	movs	r2, #2
 800047c:	609a      	str	r2, [r3, #8]

	//Cargamos la configuraci√≥n TIM2
	BTimer_Config(&handlerAdcSamplingTimer);
 800047e:	482f      	ldr	r0, [pc, #188]	; (800053c <initSystem+0x1ec>)
 8000480:	f000 fbaa 	bl	8000bd8 <BTimer_Config>

	// Configuracion del ADC
	adcConfig1.channel			= ADC_CHANNEL_0;
 8000484:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <initSystem+0x1f4>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
	adcConfig1.dataAlignment	= ADC_ALIGNMENT_RIGHT;
 800048a:	4b2e      	ldr	r3, [pc, #184]	; (8000544 <initSystem+0x1f4>)
 800048c:	2200      	movs	r2, #0
 800048e:	711a      	strb	r2, [r3, #4]
	adcConfig1.resolution		= ADC_RESOLUTION_12_BIT;
 8000490:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <initSystem+0x1f4>)
 8000492:	2200      	movs	r2, #0
 8000494:	705a      	strb	r2, [r3, #1]
	adcConfig1.samplingPeriod	= ADC_SAMPLING_PERIOD_144_CYCLES;
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <initSystem+0x1f4>)
 8000498:	2206      	movs	r2, #6
 800049a:	805a      	strh	r2, [r3, #2]
	sensores[0] = adcConfig1;
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <initSystem+0x1f8>)
 800049e:	4a29      	ldr	r2, [pc, #164]	; (8000544 <initSystem+0x1f4>)
 80004a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a4:	6018      	str	r0, [r3, #0]
 80004a6:	3304      	adds	r3, #4
 80004a8:	8019      	strh	r1, [r3, #0]
	adcSingle_Config(&adcConfig1);
 80004aa:	4826      	ldr	r0, [pc, #152]	; (8000544 <initSystem+0x1f4>)
 80004ac:	f000 f91c 	bl	80006e8 <adcSingle_Config>

	adcConfig2.channel			= ADC_CHANNEL_8;
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <initSystem+0x1fc>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	701a      	strb	r2, [r3, #0]
	adcConfig2.dataAlignment	= ADC_ALIGNMENT_RIGHT;
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <initSystem+0x1fc>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	711a      	strb	r2, [r3, #4]
	adcConfig2.resolution		= ADC_RESOLUTION_12_BIT;
 80004bc:	4b23      	ldr	r3, [pc, #140]	; (800054c <initSystem+0x1fc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	705a      	strb	r2, [r3, #1]
	adcConfig2.samplingPeriod	= ADC_SAMPLING_PERIOD_144_CYCLES;
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <initSystem+0x1fc>)
 80004c4:	2206      	movs	r2, #6
 80004c6:	805a      	strh	r2, [r3, #2]
	sensores[1] = adcConfig2;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <initSystem+0x1f8>)
 80004ca:	4a20      	ldr	r2, [pc, #128]	; (800054c <initSystem+0x1fc>)
 80004cc:	3306      	adds	r3, #6
 80004ce:	6810      	ldr	r0, [r2, #0]
 80004d0:	6018      	str	r0, [r3, #0]
 80004d2:	8892      	ldrh	r2, [r2, #4]
 80004d4:	809a      	strh	r2, [r3, #4]
	adcSingle_Config(&adcConfig2);
 80004d6:	481d      	ldr	r0, [pc, #116]	; (800054c <initSystem+0x1fc>)
 80004d8:	f000 f906 	bl	80006e8 <adcSingle_Config>

	adcConfig3.channel			= ADC_CHANNEL_10;
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <initSystem+0x200>)
 80004de:	220a      	movs	r2, #10
 80004e0:	701a      	strb	r2, [r3, #0]
	adcConfig3.dataAlignment	= ADC_ALIGNMENT_RIGHT;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <initSystem+0x200>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	711a      	strb	r2, [r3, #4]
	adcConfig3.resolution		= ADC_RESOLUTION_12_BIT;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <initSystem+0x200>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	705a      	strb	r2, [r3, #1]
	adcConfig3.samplingPeriod	= ADC_SAMPLING_PERIOD_144_CYCLES;
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <initSystem+0x200>)
 80004f0:	2206      	movs	r2, #6
 80004f2:	805a      	strh	r2, [r3, #2]
	sensores[2] = adcConfig3;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <initSystem+0x1f8>)
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <initSystem+0x200>)
 80004f8:	330c      	adds	r3, #12
 80004fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fe:	6018      	str	r0, [r3, #0]
 8000500:	3304      	adds	r3, #4
 8000502:	8019      	strh	r1, [r3, #0]
	adcSingle_Config(&adcConfig3);
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <initSystem+0x200>)
 8000506:	f000 f8ef 	bl	80006e8 <adcSingle_Config>

	adcSQRx_Config(sensores, NUM_SESNSORS);
 800050a:	2103      	movs	r1, #3
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <initSystem+0x1f8>)
 800050e:	f000 f9a9 	bl	8000864 <adcSQRx_Config>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000094 	.word	0x20000094
 800051c:	40020000 	.word	0x40020000
 8000520:	200000a0 	.word	0x200000a0
 8000524:	40020400 	.word	0x40020400
 8000528:	200000ac 	.word	0x200000ac
 800052c:	200000b8 	.word	0x200000b8
 8000530:	200000e4 	.word	0x200000e4
 8000534:	40004400 	.word	0x40004400
 8000538:	200000c4 	.word	0x200000c4
 800053c:	200000d4 	.word	0x200000d4
 8000540:	40000800 	.word	0x40000800
 8000544:	20000170 	.word	0x20000170
 8000548:	20000188 	.word	0x20000188
 800054c:	20000178 	.word	0x20000178
 8000550:	20000180 	.word	0x20000180

08000554 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <BTimer2_Callback+0x1c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <BTimer2_Callback+0x1c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f082 0220 	eor.w	r2, r2, #32
 8000566:	615a      	str	r2, [r3, #20]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	20000094 	.word	0x20000094

08000574 <BTimer4_Callback>:

/* Implementacion del Callback para el timer4 */
void BTimer4_Callback(void){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000584:	f000 ff48 	bl	8001418 <getRxData>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <Usart2_RX_Callback+0x14>)
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000019a 	.word	0x2000019a

08000598 <Usart2_TX_Callback>:

void Usart2_TX_Callback(void){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	__NOP();
 800059c:	bf00      	nop
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
	...

080005a8 <adcComplete_Callback>:

void adcComplete_Callback(void){
 80005a8:	b598      	push	{r3, r4, r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	adcSignal[dataPosition] = getADC();
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <adcComplete_Callback+0x3c>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461c      	mov	r4, r3
 80005b2:	f000 f9fb 	bl	80009ac <getADC>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <adcComplete_Callback+0x40>)
 80005bc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <adcComplete_Callback+0x3c>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <adcComplete_Callback+0x3c>)
 80005ca:	801a      	strh	r2, [r3, #0]
	if (dataPosition >= ADC_SIGNAL_SIZE){
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <adcComplete_Callback+0x3c>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	2b7f      	cmp	r3, #127	; 0x7f
 80005d2:	d905      	bls.n	80005e0 <adcComplete_Callback+0x38>
		dataPosition = 0;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <adcComplete_Callback+0x3c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <adcComplete_Callback+0x44>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
	}
}
 80005e0:	bf00      	nop
 80005e2:	bd98      	pop	{r3, r4, r7, pc}
 80005e4:	2000029c 	.word	0x2000029c
 80005e8:	2000019c 	.word	0x2000019c
 80005ec:	2000019b 	.word	0x2000019b

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 ff9e 	bl	8001560 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20020000 	.word	0x20020000
 8000650:	00000400 	.word	0x00000400
 8000654:	200002a0 	.word	0x200002a0
 8000658:	200002d0 	.word	0x200002d0

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	; (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 ff6f 	bl	800156c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fdf7 	bl	8000280 <main>

08000692 <LoopForever>:

LoopForever:
    b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80006a0:	08001ef4 	.word	0x08001ef4
  ldr r2, =_sbss
 80006a4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80006a8:	200002cc 	.word	0x200002cc

080006ac <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <BusFault_Handler>
	...

080006b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db0b      	blt.n	80006da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 021f 	and.w	r2, r3, #31
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <__NVIC_EnableIRQ+0x34>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	095b      	lsrs	r3, r3, #5
 80006d0:	2001      	movs	r0, #1
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <adcSingle_Config>:

GPIO_Handler_t 	handlerAdcPin 	= {0};
uint16_t		adcRawData 		= 0;
uint8_t			scanSequencePos = 1;

void adcSingle_Config(ADC_Config_t *adcConfig){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	/* 1. Configuramos el PinX para que cumpla la funci√≥n de canal an√°logo deseado */
	configAnalogPin(adcConfig->channel);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f979 	bl	80009ec <configAnalogPin>

	/* 2. Activamos la se√±al de reloj para el perif√©rico ADC1 (bus APB2) */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006fa:	4b57      	ldr	r3, [pc, #348]	; (8000858 <adcSingle_Config+0x170>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a56      	ldr	r2, [pc, #344]	; (8000858 <adcSingle_Config+0x170>)
 8000700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000704:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurarlos
	ADC1->CR1 = 0;
 8000706:	4b55      	ldr	r3, [pc, #340]	; (800085c <adcSingle_Config+0x174>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 800070c:	4b53      	ldr	r3, [pc, #332]	; (800085c <adcSingle_Config+0x174>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuraci√≥n del ADC1 */
	/* 3. Resoluci√≥n del ADC */
	switch(adcConfig->resolution){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	2b03      	cmp	r3, #3
 8000718:	d83e      	bhi.n	8000798 <adcSingle_Config+0xb0>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <adcSingle_Config+0x38>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000731 	.word	0x08000731
 8000724:	0800074b 	.word	0x0800074b
 8000728:	08000765 	.word	0x08000765
 800072c:	0800077f 	.word	0x0800077f
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000730:	4b4a      	ldr	r3, [pc, #296]	; (800085c <adcSingle_Config+0x174>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4a49      	ldr	r2, [pc, #292]	; (800085c <adcSingle_Config+0x174>)
 8000736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800073a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <adcSingle_Config+0x174>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a46      	ldr	r2, [pc, #280]	; (800085c <adcSingle_Config+0x174>)
 8000742:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000746:	6053      	str	r3, [r2, #4]
		break;
 8000748:	e027      	b.n	800079a <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_10_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <adcSingle_Config+0x174>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4a43      	ldr	r2, [pc, #268]	; (800085c <adcSingle_Config+0x174>)
 8000750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000754:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <adcSingle_Config+0x174>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a40      	ldr	r2, [pc, #256]	; (800085c <adcSingle_Config+0x174>)
 800075c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000760:	6053      	str	r3, [r2, #4]
		break;
 8000762:	e01a      	b.n	800079a <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_8_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <adcSingle_Config+0x174>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a3c      	ldr	r2, [pc, #240]	; (800085c <adcSingle_Config+0x174>)
 800076a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800076e:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <adcSingle_Config+0x174>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a39      	ldr	r2, [pc, #228]	; (800085c <adcSingle_Config+0x174>)
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077a:	6053      	str	r3, [r2, #4]
		break;
 800077c:	e00d      	b.n	800079a <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <adcSingle_Config+0x174>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	4a36      	ldr	r2, [pc, #216]	; (800085c <adcSingle_Config+0x174>)
 8000784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000788:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <adcSingle_Config+0x174>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <adcSingle_Config+0x174>)
 8000790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000794:	6053      	str	r3, [r2, #4]
		break;
 8000796:	e000      	b.n	800079a <adcSingle_Config+0xb2>
	}
	default:
	{
		break;
 8000798:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1->CR1 &= ~ADC_CR1_SCAN;
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <adcSingle_Config+0x174>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	4a2f      	ldr	r2, [pc, #188]	; (800085c <adcSingle_Config+0x174>)
 80007a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007a4:	6053      	str	r3, [r2, #4]


	/* 5. Configuramos la alineaci√≥n de los datos (derecha o izquierda) */
	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT){
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d106      	bne.n	80007bc <adcSingle_Config+0xd4>
		//Alineaci√≥n a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <adcSingle_Config+0x174>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <adcSingle_Config+0x174>)
 80007b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007b8:	6093      	str	r3, [r2, #8]
 80007ba:	e005      	b.n	80007c8 <adcSingle_Config+0xe0>
	}
	else {
		// Alineaci√≥n a la izquierda (para algunos c√°lculos matem√°ticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <adcSingle_Config+0x174>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <adcSingle_Config+0x174>)
 80007c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c6:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <adcSingle_Config+0x174>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a23      	ldr	r2, [pc, #140]	; (800085c <adcSingle_Config+0x174>)
 80007ce:	f023 0302 	bic.w	r3, r3, #2
 80007d2:	6093      	str	r3, [r2, #8]

	/* 7. Ac√° se deber√≠a configurar el sampling */
	if (adcConfig->channel < ADC_CHANNEL_10){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b09      	cmp	r3, #9
 80007da:	d810      	bhi.n	80007fe <adcSingle_Config+0x116>
		ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel)));
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <adcSingle_Config+0x174>)
 80007de:	691a      	ldr	r2, [r3, #16]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	885b      	ldrh	r3, [r3, #2]
 80007e4:	4618      	mov	r0, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	460b      	mov	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	440b      	add	r3, r1
 80007f2:	fa00 f303 	lsl.w	r3, r0, r3
 80007f6:	4919      	ldr	r1, [pc, #100]	; (800085c <adcSingle_Config+0x174>)
 80007f8:	4313      	orrs	r3, r2
 80007fa:	610b      	str	r3, [r1, #16]
 80007fc:	e010      	b.n	8000820 <adcSingle_Config+0x138>
	}
	else{
		ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel - 9)));
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <adcSingle_Config+0x174>)
 8000800:	68d9      	ldr	r1, [r3, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	885b      	ldrh	r3, [r3, #2]
 8000806:	4618      	mov	r0, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f1a3 0209 	sub.w	r2, r3, #9
 8000810:	4613      	mov	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	fa00 f303 	lsl.w	r3, r0, r3
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <adcSingle_Config+0x174>)
 800081c:	430b      	orrs	r3, r1
 800081e:	60d3      	str	r3, [r2, #12]
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el m√°s r√°pido que se puede tener) */
	ADC->CCR = ADC_CCR_ADCPRE_0;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <adcSingle_Config+0x178>)
 8000822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000826:	605a      	str	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupci√≥n debida a la finalizaci√≥n de una conversi√≥n EOC */
	ADC1->CR1 |= ADC_CR1_EOCIE;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <adcSingle_Config+0x174>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <adcSingle_Config+0x174>)
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	6053      	str	r3, [r2, #4]

	/* 11.a. Matriculamos la interrupci√≥n en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 8000838:	2012      	movs	r0, #18
 800083a:	f7ff ff39 	bl	80006b0 <__NVIC_EnableIRQ>
	//__NVIC_SetPriority(ADC_IRQn, 4);

	/* 12. Activamos el m√≥dulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <adcSingle_Config+0x174>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a06      	ldr	r2, [pc, #24]	; (800085c <adcSingle_Config+0x174>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800084a:	b662      	cpsie	i
}
 800084c:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40012000 	.word	0x40012000
 8000860:	40012300 	.word	0x40012300

08000864 <adcSQRx_Config>:

void adcSQRx_Config(ADC_Config_t *adcChannels, uint8_t numChannels){
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 1; i <= numChannels; i++){
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e047      	b.n	8000906 <adcSQRx_Config+0xa2>
		/* 8. Configuramos la secuencia y cuantos elemenos hay en la secuencia */
		// Al hacerlo to.do 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
		if ((i >= 1) && (i <= 6)){
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d012      	beq.n	80008a2 <adcSQRx_Config+0x3e>
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b06      	cmp	r3, #6
 8000880:	d80f      	bhi.n	80008a2 <adcSQRx_Config+0x3e>
			ADC1->SQR3 |= (adcChannels->channel << ((i-1) * 5));
 8000882:	4b31      	ldr	r3, [pc, #196]	; (8000948 <adcSQRx_Config+0xe4>)
 8000884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	fa00 f303 	lsl.w	r3, r0, r3
 800089a:	4a2b      	ldr	r2, [pc, #172]	; (8000948 <adcSQRx_Config+0xe4>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6353      	str	r3, [r2, #52]	; 0x34
 80008a0:	e02b      	b.n	80008fa <adcSQRx_Config+0x96>
		}
		else if ((i >= 7) && (i <= 12)){
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b06      	cmp	r3, #6
 80008a6:	d912      	bls.n	80008ce <adcSQRx_Config+0x6a>
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b0c      	cmp	r3, #12
 80008ac:	d80f      	bhi.n	80008ce <adcSQRx_Config+0x6a>
			ADC1->SQR2 |= (adcChannels->channel << ((i-7) * 5));
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <adcSQRx_Config+0xe4>)
 80008b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	1fda      	subs	r2, r3, #7
 80008bc:	4613      	mov	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	fa00 f303 	lsl.w	r3, r0, r3
 80008c6:	4a20      	ldr	r2, [pc, #128]	; (8000948 <adcSQRx_Config+0xe4>)
 80008c8:	430b      	orrs	r3, r1
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	e015      	b.n	80008fa <adcSQRx_Config+0x96>
		}
		else if ((i >= 13) && (i <= 16)){
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d912      	bls.n	80008fa <adcSQRx_Config+0x96>
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b10      	cmp	r3, #16
 80008d8:	d80f      	bhi.n	80008fa <adcSQRx_Config+0x96>
			ADC1->SQR1 |= (adcChannels->channel << ((i-13) * 5));
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <adcSQRx_Config+0xe4>)
 80008dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	f1a3 020d 	sub.w	r2, r3, #13
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	fa00 f303 	lsl.w	r3, r0, r3
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <adcSQRx_Config+0xe4>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		adcChannels++;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3306      	adds	r3, #6
 80008fe:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 1; i <= numChannels; i++){
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	3301      	adds	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	429a      	cmp	r2, r3
 800090c:	d9b3      	bls.n	8000876 <adcSQRx_Config+0x12>
	}
	if (numChannels > 1){
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d914      	bls.n	800093e <adcSQRx_Config+0xda>
		ADC1->CR2 |= ADC_CR2_EOCS;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <adcSQRx_Config+0xe4>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <adcSQRx_Config+0xe4>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091e:	6093      	str	r3, [r2, #8]
		ADC1->SQR1 |= ((numChannels-1) << ADC_SQR1_L_Pos);
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <adcSQRx_Config+0xe4>)
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	78fa      	ldrb	r2, [r7, #3]
 8000926:	3a01      	subs	r2, #1
 8000928:	0512      	lsls	r2, r2, #20
 800092a:	4611      	mov	r1, r2
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <adcSQRx_Config+0xe4>)
 800092e:	430b      	orrs	r3, r1
 8000930:	62d3      	str	r3, [r2, #44]	; 0x2c
		ADC1->CR1 |= ADC_CR1_SCAN;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <adcSQRx_Config+0xe4>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <adcSQRx_Config+0xe4>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093c:	6053      	str	r3, [r2, #4]
	}
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	40012000 	.word	0x40012000

0800094c <startSingleConversion>:



/* */
void startSingleConversion(void){
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversi√≥n ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <startSingleConversion+0x18>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4a03      	ldr	r2, [pc, #12]	; (8000964 <startSingleConversion+0x18>)
 8000956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800095a:	6093      	str	r3, [r2, #8]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40012000 	.word	0x40012000

08000968 <startContinuousConversion>:

void startContinuousConversion(void){
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_CONT;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <startContinuousConversion+0x24>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <startContinuousConversion+0x24>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	6093      	str	r3, [r2, #8]
	/* Iniciamos un ciclo de conversi√≥n ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <startContinuousConversion+0x24>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <startContinuousConversion+0x24>)
 800097e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000982:	6093      	str	r3, [r2, #8]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40012000 	.word	0x40012000

08000990 <stopContinuousConversion>:

void stopContinuousConversion(void){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <stopContinuousConversion+0x18>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <stopContinuousConversion+0x18>)
 800099a:	f023 0302 	bic.w	r3, r3, #2
 800099e:	6093      	str	r3, [r2, #8]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40012000 	.word	0x40012000

080009ac <getADC>:

/* Funci√≥n que me retorna el √∫ltimo dato adquirido por la ADC */
uint16_t getADC(void){
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	return adcRawData;
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <getADC+0x10>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	200002b0 	.word	0x200002b0

080009c0 <ADC_IRQHandler>:

/* Esta es la ISR de la interrupci√≥n por conversi√≥n ADC */
void ADC_IRQHandler(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interupci√≥n por conversi√≥n ADC
	if (ADC1->SR & ADC_SR_EOC){
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <ADC_IRQHandler+0x24>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversi√≥n ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1->DR;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <ADC_IRQHandler+0x24>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <ADC_IRQHandler+0x28>)
 80009d8:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la funci√≥n que se ejecutar√° en el main
		adcComplete_Callback();
 80009da:	f7ff fde5 	bl	80005a8 <adcComplete_Callback>
	}
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40012000 	.word	0x40012000
 80009e8:	200002b0 	.word	0x200002b0

080009ec <configAnalogPin>:
__attribute__ ((weak)) void adcComplete_Callback(void){
	__NOP();
}

/* con esta funci√≥n configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como an√°logo
	switch (adcChannel){
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	f200 8093 	bhi.w	8000b24 <configAnalogPin+0x138>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <configAnalogPin+0x18>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a45 	.word	0x08000a45
 8000a08:	08000a53 	.word	0x08000a53
 8000a0c:	08000a61 	.word	0x08000a61
 8000a10:	08000a6f 	.word	0x08000a6f
 8000a14:	08000a7d 	.word	0x08000a7d
 8000a18:	08000a8b 	.word	0x08000a8b
 8000a1c:	08000a99 	.word	0x08000a99
 8000a20:	08000aa7 	.word	0x08000aa7
 8000a24:	08000ab5 	.word	0x08000ab5
 8000a28:	08000ac3 	.word	0x08000ac3
 8000a2c:	08000ad1 	.word	0x08000ad1
 8000a30:	08000adf 	.word	0x08000adf
 8000a34:	08000aed 	.word	0x08000aed
 8000a38:	08000afb 	.word	0x08000afb
 8000a3c:	08000b09 	.word	0x08000b09
 8000a40:	08000b17 	.word	0x08000b17

	case ADC_CHANNEL_0:
	{
		// Es el Pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a44:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <configAnalogPin+0x150>)
 8000a46:	4a3e      	ldr	r2, [pc, #248]	; (8000b40 <configAnalogPin+0x154>)
 8000a48:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <configAnalogPin+0x150>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	711a      	strb	r2, [r3, #4]
		break;
 8000a50:	e069      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1:
	{
		//Es el pin PA1
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <configAnalogPin+0x150>)
 8000a54:	4a3a      	ldr	r2, [pc, #232]	; (8000b40 <configAnalogPin+0x154>)
 8000a56:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000a58:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <configAnalogPin+0x150>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	711a      	strb	r2, [r3, #4]
		break;
 8000a5e:	e062      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_2:
	{
		//Es el pin PA2
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <configAnalogPin+0x150>)
 8000a62:	4a37      	ldr	r2, [pc, #220]	; (8000b40 <configAnalogPin+0x154>)
 8000a64:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000a66:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <configAnalogPin+0x150>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	711a      	strb	r2, [r3, #4]
		break;
 8000a6c:	e05b      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_3:
	{
		//Es el pin PA3
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a6e:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <configAnalogPin+0x150>)
 8000a70:	4a33      	ldr	r2, [pc, #204]	; (8000b40 <configAnalogPin+0x154>)
 8000a72:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <configAnalogPin+0x150>)
 8000a76:	2203      	movs	r2, #3
 8000a78:	711a      	strb	r2, [r3, #4]
		break;
 8000a7a:	e054      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_4:
	{
		//Es el pin PA4
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <configAnalogPin+0x150>)
 8000a7e:	4a30      	ldr	r2, [pc, #192]	; (8000b40 <configAnalogPin+0x154>)
 8000a80:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <configAnalogPin+0x150>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	711a      	strb	r2, [r3, #4]
		break;
 8000a88:	e04d      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_5:
	{
		//Es el pin PA5
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <configAnalogPin+0x150>)
 8000a8c:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <configAnalogPin+0x154>)
 8000a8e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <configAnalogPin+0x150>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	711a      	strb	r2, [r3, #4]
		break;
 8000a96:	e046      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6:
	{
		//Es el pin PA6
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <configAnalogPin+0x150>)
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <configAnalogPin+0x154>)
 8000a9c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <configAnalogPin+0x150>)
 8000aa0:	2206      	movs	r2, #6
 8000aa2:	711a      	strb	r2, [r3, #4]
		break;
 8000aa4:	e03f      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7:
	{
		//Es el pin PA7
		handlerAdcPin.pGPIOx						= GPIOA;
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <configAnalogPin+0x150>)
 8000aa8:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <configAnalogPin+0x154>)
 8000aaa:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <configAnalogPin+0x150>)
 8000aae:	2207      	movs	r2, #7
 8000ab0:	711a      	strb	r2, [r3, #4]
		break;
 8000ab2:	e038      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8:
	{
		//Es el pin PB0
		handlerAdcPin.pGPIOx						= GPIOB;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <configAnalogPin+0x150>)
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <configAnalogPin+0x158>)
 8000ab8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <configAnalogPin+0x150>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	711a      	strb	r2, [r3, #4]
		break;
 8000ac0:	e031      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9:
	{
		//Es el pin PB1
		handlerAdcPin.pGPIOx						= GPIOB;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <configAnalogPin+0x150>)
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <configAnalogPin+0x158>)
 8000ac6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <configAnalogPin+0x150>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	711a      	strb	r2, [r3, #4]
		break;
 8000ace:	e02a      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10:
	{
		//Es el pin PC0
		handlerAdcPin.pGPIOx						= GPIOC;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <configAnalogPin+0x150>)
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <configAnalogPin+0x15c>)
 8000ad4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <configAnalogPin+0x150>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	711a      	strb	r2, [r3, #4]
		break;
 8000adc:	e023      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11:
	{
		//Es el pin PC1
		handlerAdcPin.pGPIOx						= GPIOC;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <configAnalogPin+0x150>)
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <configAnalogPin+0x15c>)
 8000ae2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <configAnalogPin+0x150>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	711a      	strb	r2, [r3, #4]
		break;
 8000aea:	e01c      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12:
	{
		//Es el pin PC2
		handlerAdcPin.pGPIOx						= GPIOC;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <configAnalogPin+0x150>)
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <configAnalogPin+0x15c>)
 8000af0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <configAnalogPin+0x150>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	711a      	strb	r2, [r3, #4]
		break;
 8000af8:	e015      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13:
	{
		//Es el pin PC3
		handlerAdcPin.pGPIOx						= GPIOC;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <configAnalogPin+0x150>)
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <configAnalogPin+0x15c>)
 8000afe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <configAnalogPin+0x150>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	711a      	strb	r2, [r3, #4]
		break;
 8000b06:	e00e      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14:
	{
		//Es el pin PC4
		handlerAdcPin.pGPIOx						= GPIOC;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <configAnalogPin+0x150>)
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <configAnalogPin+0x15c>)
 8000b0c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <configAnalogPin+0x150>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	711a      	strb	r2, [r3, #4]
		break;
 8000b14:	e007      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15:
	{
		//Es el pin PC5
		handlerAdcPin.pGPIOx						= GPIOC;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <configAnalogPin+0x150>)
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <configAnalogPin+0x15c>)
 8000b1a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <configAnalogPin+0x150>)
 8000b1e:	2205      	movs	r2, #5
 8000b20:	711a      	strb	r2, [r3, #4]
		break;
 8000b22:	e000      	b.n	8000b26 <configAnalogPin+0x13a>
	}
	default:
	{
		break;
 8000b24:	bf00      	nop
	}
	}

	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <configAnalogPin+0x150>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <configAnalogPin+0x150>)
 8000b2e:	f000 f931 	bl	8000d94 <GPIO_Config>

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200002a4 	.word	0x200002a4
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800

08000b4c <__NVIC_EnableIRQ>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <BTimer_Config>:

/*
 * Funci√≥n que configura un Timer b√°sico para que genere interrupcines de forma peri√≥dica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a46      	ldr	r2, [pc, #280]	; (8000d00 <BTimer_Config+0x128>)
 8000be6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la se√±al de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d106      	bne.n	8000c04 <BTimer_Config+0x2c>
		// Activamos la se√±al del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000bf6:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <BTimer_Config+0x12c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a42      	ldr	r2, [pc, #264]	; (8000d04 <BTimer_Config+0x12c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	e016      	b.n	8000c32 <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <BTimer_Config+0x130>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <BTimer_Config+0x44>
		// Activamos la se√±al del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <BTimer_Config+0x12c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a3c      	ldr	r2, [pc, #240]	; (8000d04 <BTimer_Config+0x12c>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	e00a      	b.n	8000c32 <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <BTimer_Config+0x134>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d105      	bne.n	8000c32 <BTimer_Config+0x5a>
		// Activamos la se√±al del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <BTimer_Config+0x12c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <BTimer_Config+0x12c>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	791b      	ldrb	r3, [r3, #4]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10c      	bne.n	8000c54 <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0210 	bic.w	r2, r2, #16
 8000c48:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
 8000c52:	e00d      	b.n	8000c70 <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0210 	orr.w	r2, r2, #16
 8000c62:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuraci√≥n del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	88db      	ldrh	r3, [r3, #6]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3a01      	subs	r2, #1
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0201 	orr.w	r2, r2, #1
 8000ca6:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la se√±al de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb0:	d107      	bne.n	8000cc2 <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000cb2:	201c      	movs	r0, #28
 8000cb4:	f7ff ff4a 	bl	8000b4c <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000cb8:	2103      	movs	r1, #3
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f7ff ff62 	bl	8000b84 <__NVIC_SetPriority>
 8000cc0:	e018      	b.n	8000cf4 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <BTimer_Config+0x130>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d107      	bne.n	8000cdc <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000ccc:	201d      	movs	r0, #29
 8000cce:	f7ff ff3d 	bl	8000b4c <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8000cd2:	2103      	movs	r1, #3
 8000cd4:	201d      	movs	r0, #29
 8000cd6:	f7ff ff55 	bl	8000b84 <__NVIC_SetPriority>
 8000cda:	e00b      	b.n	8000cf4 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <BTimer_Config+0x134>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000ce6:	201e      	movs	r0, #30
 8000ce8:	f7ff ff30 	bl	8000b4c <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 8000cec:	2103      	movs	r1, #3
 8000cee:	201e      	movs	r0, #30
 8000cf0:	f7ff ff48 	bl	8000b84 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf4:	b662      	cpsie	i
}
 8000cf6:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200002b4 	.word	0x200002b4
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	40000800 	.word	0x40000800

08000d10 <stopTimer>:
void startTimer(BTIMER_Handler_t *ptrTimerConfig){
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
}

/* Desctiva el contador para que el timer se incremente */
void stopTimer(BTIMER_Handler_t *ptrTimerConfig){
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
	 __NOP();
 8000d36:	bf00      	nop
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <TIM2_IRQHandler>:
__attribute__((weak)) void BTimer4_Callback(void){
	 __NOP();
}

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8000d54:	f7ff fbfe 	bl	8000554 <BTimer2_Callback>

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <TIM3_IRQHandler+0x18>)
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <TIM3_IRQHandler+0x18>)
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000d6c:	f7ff ffe1 	bl	8000d32 <BTimer3_Callback>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40000400 	.word	0x40000400

08000d78 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <TIM4_IRQHandler+0x18>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <TIM4_IRQHandler+0x18>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000d88:	f7ff fbf4 	bl	8000574 <BTimer4_Callback>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40000800 	.word	0x40000800

08000d94 <GPIO_Config>:
 *  que el sistema permita configurar el perif√©rico X.Lo primero y m√°s importante es activar la se√±al del
 *  reloj principal hacia ese elemento espec√≠fico relacionado con el perif√©rico RCC, a esto llamaremos
 *  simplemente "activar el perif√©rico o activar la se√±al de reloj del perif√©rico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el perif√©rico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a87      	ldr	r2, [pc, #540]	; (8000fc8 <GPIO_Config+0x234>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d106      	bne.n	8000dbc <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000dae:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <GPIO_Config+0x238>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a86      	ldr	r2, [pc, #536]	; (8000fcc <GPIO_Config+0x238>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	e03a      	b.n	8000e32 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a83      	ldr	r2, [pc, #524]	; (8000fd0 <GPIO_Config+0x23c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d106      	bne.n	8000dd4 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000dc6:	4b81      	ldr	r3, [pc, #516]	; (8000fcc <GPIO_Config+0x238>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a80      	ldr	r2, [pc, #512]	; (8000fcc <GPIO_Config+0x238>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	e02e      	b.n	8000e32 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a7e      	ldr	r2, [pc, #504]	; (8000fd4 <GPIO_Config+0x240>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d106      	bne.n	8000dec <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000dde:	4b7b      	ldr	r3, [pc, #492]	; (8000fcc <GPIO_Config+0x238>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a7a      	ldr	r2, [pc, #488]	; (8000fcc <GPIO_Config+0x238>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	e022      	b.n	8000e32 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a79      	ldr	r2, [pc, #484]	; (8000fd8 <GPIO_Config+0x244>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d106      	bne.n	8000e04 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000df6:	4b75      	ldr	r3, [pc, #468]	; (8000fcc <GPIO_Config+0x238>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a74      	ldr	r2, [pc, #464]	; (8000fcc <GPIO_Config+0x238>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	e016      	b.n	8000e32 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a74      	ldr	r2, [pc, #464]	; (8000fdc <GPIO_Config+0x248>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d106      	bne.n	8000e1c <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <GPIO_Config+0x238>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a6e      	ldr	r2, [pc, #440]	; (8000fcc <GPIO_Config+0x238>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	e00a      	b.n	8000e32 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a6f      	ldr	r2, [pc, #444]	; (8000fe0 <GPIO_Config+0x24c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d105      	bne.n	8000e32 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000e26:	4b69      	ldr	r3, [pc, #420]	; (8000fcc <GPIO_Config+0x238>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a68      	ldr	r2, [pc, #416]	; (8000fcc <GPIO_Config+0x238>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
	//Despu√©s de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Ac√° estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits espec√≠ficos de ese registro (0b00)
	// para lo cual aplicamos una m√°scara y una operaci√≥n bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2103      	movs	r1, #3
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	400a      	ands	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7a1b      	ldrb	r3, [r3, #8]
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2301      	movs	r3, #1
 8000e90:	408b      	lsls	r3, r1
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	799b      	ldrb	r3, [r3, #6]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	791b      	ldrb	r3, [r3, #4]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2103      	movs	r1, #3
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	400a      	ands	r2, r1
 8000edc:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6899      	ldr	r1, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	79db      	ldrb	r3, [r3, #7]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68d9      	ldr	r1, [r3, #12]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	795b      	ldrb	r3, [r3, #5]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d143      	bne.n	8000fbe <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	2b07      	cmp	r3, #7
 8000f3c:	d81f      	bhi.n	8000f7e <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a5b      	ldrb	r3, [r3, #9]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000f7c:	e01f      	b.n	8000fbe <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	3b08      	subs	r3, #8
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8e:	210f      	movs	r1, #15
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7a5b      	ldrb	r3, [r3, #9]
 8000fac:	4619      	mov	r1, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021c00 	.word	0x40021c00

08000fe4 <__NVIC_EnableIRQ>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4906      	ldr	r1, [pc, #24]	; (8001018 <__NVIC_EnableIRQ+0x34>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_DisableIRQ>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db12      	blt.n	8001054 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	490a      	ldr	r1, [pc, #40]	; (8001060 <__NVIC_DisableIRQ+0x44>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	3320      	adds	r3, #32
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001048:	f3bf 8f4f 	dsb	sy
}
 800104c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800104e:	f3bf 8f6f 	isb	sy
}
 8001052:	bf00      	nop
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la se√±al de reloj del perif√©rico que se est√° utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la se√±al del reloj que viene desde el BUS al que pertenece el perif√©rico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a88      	ldr	r2, [pc, #544]	; (8001294 <USART_Config+0x230>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d106      	bne.n	8001084 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8001076:	4b88      	ldr	r3, [pc, #544]	; (8001298 <USART_Config+0x234>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a87      	ldr	r2, [pc, #540]	; (8001298 <USART_Config+0x234>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	e016      	b.n	80010b2 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a84      	ldr	r2, [pc, #528]	; (800129c <USART_Config+0x238>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d106      	bne.n	800109c <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <USART_Config+0x234>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a81      	ldr	r2, [pc, #516]	; (8001298 <USART_Config+0x234>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	e00a      	b.n	80010b2 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a7f      	ldr	r2, [pc, #508]	; (80012a0 <USART_Config+0x23c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d105      	bne.n	80010b2 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 80010a6:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <USART_Config+0x234>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a7b      	ldr	r2, [pc, #492]	; (8001298 <USART_Config+0x234>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por √∫ltimo activamos el m√≥dulo USART cuando to-do est√° correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuraci√≥n desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuraci√≥n del Parity: */
	//Verificamos si el parity est√° activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	79db      	ldrb	r3, [r3, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d023      	beq.n	8001112 <USART_Config+0xae>
		// Si se entra aqu√≠, entonces se desea el parity-check, as√≠ que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010d8:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	79db      	ldrb	r3, [r3, #7]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d10b      	bne.n	80010fa <USART_Config+0x96>
			// Es Even, entonces cargamos la configuraci√≥n adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010f0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	719a      	strb	r2, [r3, #6]
 80010f8:	e013      	b.n	8001122 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuraci√≥n
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001108:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	719a      	strb	r2, [r3, #6]
 8001110:	e007      	b.n	8001122 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos ac√°, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001120:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tama√±o del dato */
	// Verificamos si el tama√±o es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	799b      	ldrb	r3, [r3, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d108      	bne.n	800113c <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e007      	b.n	800114c <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800114a:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7a1b      	ldrb	r3, [r3, #8]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d82f      	bhi.n	80011b4 <USART_Config+0x150>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <USART_Config+0xf8>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800116d 	.word	0x0800116d
 8001160:	0800117f 	.word	0x0800117f
 8001164:	08001191 	.word	0x08001191
 8001168:	080011a3 	.word	0x080011a3
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691a      	ldr	r2, [r3, #16]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800117a:	611a      	str	r2, [r3, #16]
		break;
 800117c:	e01a      	b.n	80011b4 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800118c:	611a      	str	r2, [r3, #16]
		break;
 800118e:	e011      	b.n	80011b4 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800119e:	611a      	str	r2, [r3, #16]
		break;
 80011a0:	e008      	b.n	80011b4 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011b0:	611a      	str	r2, [r3, #16]
		break;
 80011b2:	bf00      	nop
	}
	}

	/* 2.5. Configuraci√≥n del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	795b      	ldrb	r3, [r3, #5]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d105      	bne.n	80011c8 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f240 6283 	movw	r2, #1667	; 0x683
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	e01a      	b.n	80011fe <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	795b      	ldrb	r3, [r3, #5]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f240 3241 	movw	r2, #833	; 0x341
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	e010      	b.n	80011fe <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	795b      	ldrb	r3, [r3, #5]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d104      	bne.n	80011ee <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	228b      	movs	r2, #139	; 0x8b
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e007      	b.n	80011fe <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d103      	bne.n	80011fe <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2211      	movs	r2, #17
 80011fc:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d84e      	bhi.n	80012a4 <USART_Config+0x240>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <USART_Config+0x1a8>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800121d 	.word	0x0800121d
 8001210:	0800122f 	.word	0x0800122f
 8001214:	08001241 	.word	0x08001241
 8001218:	08001263 	.word	0x08001263
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0208 	orr.w	r2, r2, #8
 800122a:	60da      	str	r2, [r3, #12]
		break;
 800122c:	e053      	b.n	80012d6 <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0204 	orr.w	r2, r2, #4
 800123c:	60da      	str	r2, [r3, #12]
		break;
 800123e:	e04a      	b.n	80012d6 <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisi√≥n como recepci√≥n
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0208 	orr.w	r2, r2, #8
 800124e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	60da      	str	r2, [r3, #12]
		break;
 8001260:	e039      	b.n	80012d6 <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0208 	bic.w	r2, r2, #8
 8001270:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0204 	bic.w	r2, r2, #4
 8001280:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001290:	60da      	str	r2, [r3, #12]
		break;
 8001292:	e020      	b.n	80012d6 <USART_Config+0x272>
 8001294:	40011000 	.word	0x40011000
 8001298:	40023800 	.word	0x40023800
 800129c:	40004400 	.word	0x40004400
 80012a0:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0208 	bic.w	r2, r2, #8
 80012b2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0204 	bic.w	r2, r2, #4
 80012c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012d2:	60da      	str	r2, [r3, #12]
		break;
 80012d4:	bf00      	nop
	}
	}


	/* 2.7. Activamos el m√≥dulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	791b      	ldrb	r3, [r3, #4]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d007      	beq.n	80012ee <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ec:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ee:	b672      	cpsid	i
}
 80012f0:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001300:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7a5b      	ldrb	r3, [r3, #9]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d01a      	beq.n	8001340 <USART_Config+0x2dc>
		/* Activamos la se√±al de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <USART_Config+0x31c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d103      	bne.n	800131c <USART_Config+0x2b8>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001314:	2025      	movs	r0, #37	; 0x25
 8001316:	f7ff fe65 	bl	8000fe4 <__NVIC_EnableIRQ>
 800131a:	e01a      	b.n	8001352 <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <USART_Config+0x320>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d103      	bne.n	800132e <USART_Config+0x2ca>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8001326:	2026      	movs	r0, #38	; 0x26
 8001328:	f7ff fe5c 	bl	8000fe4 <__NVIC_EnableIRQ>
 800132c:	e011      	b.n	8001352 <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <USART_Config+0x324>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d10c      	bne.n	8001352 <USART_Config+0x2ee>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001338:	2047      	movs	r0, #71	; 0x47
 800133a:	f7ff fe53 	bl	8000fe4 <__NVIC_EnableIRQ>
 800133e:	e008      	b.n	8001352 <USART_Config+0x2ee>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 8001340:	2025      	movs	r0, #37	; 0x25
 8001342:	f7ff fe6b 	bl	800101c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 8001346:	2026      	movs	r0, #38	; 0x26
 8001348:	f7ff fe68 	bl	800101c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 800134c:	2047      	movs	r0, #71	; 0x47
 800134e:	f7ff fe65 	bl	800101c <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7a5b      	ldrb	r3, [r3, #9]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d003      	beq.n	8001362 <USART_Config+0x2fe>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7a5b      	ldrb	r3, [r3, #9]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d107      	bne.n	8001372 <USART_Config+0x30e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0220 	orr.w	r2, r2, #32
 8001370:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001372:	b662      	cpsie	i
}
 8001374:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40011000 	.word	0x40011000
 8001384:	40004400 	.word	0x40004400
 8001388:	40011400 	.word	0x40011400

0800138c <writeChar>:

/* Funci√≥n para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7a5b      	ldrb	r3, [r3, #9]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <writeChar+0x1c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a5b      	ldrb	r3, [r3, #9]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d10c      	bne.n	80013c2 <writeChar+0x36>
		auxDataToSend = dataToSend;
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <writeChar+0x58>)
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e00c      	b.n	80013da <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 80013c0:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f7      	beq.n	80013c0 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	605a      	str	r2, [r3, #4]
	}
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	200002b9 	.word	0x200002b9

080013e8 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80013f2:	e008      	b.n	8001406 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffc6 	bl	800138c <writeChar>
		msgToSend++;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f2      	bne.n	80013f4 <writeMsg+0xc>
	}
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	return auxRxData;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <getRxData+0x10>)
 800141e:	781b      	ldrb	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200002b8 	.word	0x200002b8

0800142c <Usart1_TX_Callback>:

/*
 * *** Configuraci√≥n de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	 __NOP();
 8001430:	bf00      	nop
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <Usart6_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_TX_Callback(void){
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
	 __NOP();
 800143e:	bf00      	nop
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	 __NOP();
 800144c:	bf00      	nop
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
	 __NOP();
 800145a:	bf00      	nop
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <USART1_IRQHandler+0x48>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <USART1_IRQHandler+0x48>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <USART1_IRQHandler+0x4c>)
 800147c:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 800147e:	f7ff ffe3 	bl	8001448 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 8001482:	e011      	b.n	80014a8 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <USART1_IRQHandler+0x48>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <USART1_IRQHandler+0x50>)
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <USART1_IRQHandler+0x48>)
 8001496:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <USART1_IRQHandler+0x48>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4a03      	ldr	r2, [pc, #12]	; (80014ac <USART1_IRQHandler+0x48>)
 800149e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014a2:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 80014a4:	f7ff ffc2 	bl	800142c <Usart1_TX_Callback>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40011000 	.word	0x40011000
 80014b0:	200002b8 	.word	0x200002b8
 80014b4:	200002b9 	.word	0x200002b9

080014b8 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <USART2_IRQHandler+0x48>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <USART2_IRQHandler+0x48>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <USART2_IRQHandler+0x4c>)
 80014d0:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 80014d2:	f7ff f855 	bl	8000580 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 80014d6:	e011      	b.n	80014fc <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <USART2_IRQHandler+0x48>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <USART2_IRQHandler+0x50>)
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <USART2_IRQHandler+0x48>)
 80014ea:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <USART2_IRQHandler+0x48>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <USART2_IRQHandler+0x48>)
 80014f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014f6:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80014f8:	f7ff f84e 	bl	8000598 <Usart2_TX_Callback>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40004400 	.word	0x40004400
 8001504:	200002b8 	.word	0x200002b8
 8001508:	200002b9 	.word	0x200002b9

0800150c <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <USART6_IRQHandler+0x48>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <USART6_IRQHandler+0x48>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <USART6_IRQHandler+0x4c>)
 8001524:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 8001526:	f7ff ff96 	bl	8001456 <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 800152a:	e011      	b.n	8001550 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <USART6_IRQHandler+0x48>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <USART6_IRQHandler+0x50>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <USART6_IRQHandler+0x48>)
 800153e:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <USART6_IRQHandler+0x48>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <USART6_IRQHandler+0x48>)
 8001546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800154a:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 800154c:	f7ff ff75 	bl	800143a <Usart6_TX_Callback>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40011400 	.word	0x40011400
 8001558:	200002b8 	.word	0x200002b8
 800155c:	200002b9 	.word	0x200002b9

08001560 <__errno>:
 8001560:	4b01      	ldr	r3, [pc, #4]	; (8001568 <__errno+0x8>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000014 	.word	0x20000014

0800156c <__libc_init_array>:
 800156c:	b570      	push	{r4, r5, r6, lr}
 800156e:	4d0d      	ldr	r5, [pc, #52]	; (80015a4 <__libc_init_array+0x38>)
 8001570:	4c0d      	ldr	r4, [pc, #52]	; (80015a8 <__libc_init_array+0x3c>)
 8001572:	1b64      	subs	r4, r4, r5
 8001574:	10a4      	asrs	r4, r4, #2
 8001576:	2600      	movs	r6, #0
 8001578:	42a6      	cmp	r6, r4
 800157a:	d109      	bne.n	8001590 <__libc_init_array+0x24>
 800157c:	4d0b      	ldr	r5, [pc, #44]	; (80015ac <__libc_init_array+0x40>)
 800157e:	4c0c      	ldr	r4, [pc, #48]	; (80015b0 <__libc_init_array+0x44>)
 8001580:	f000 fc84 	bl	8001e8c <_init>
 8001584:	1b64      	subs	r4, r4, r5
 8001586:	10a4      	asrs	r4, r4, #2
 8001588:	2600      	movs	r6, #0
 800158a:	42a6      	cmp	r6, r4
 800158c:	d105      	bne.n	800159a <__libc_init_array+0x2e>
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	f855 3b04 	ldr.w	r3, [r5], #4
 8001594:	4798      	blx	r3
 8001596:	3601      	adds	r6, #1
 8001598:	e7ee      	b.n	8001578 <__libc_init_array+0xc>
 800159a:	f855 3b04 	ldr.w	r3, [r5], #4
 800159e:	4798      	blx	r3
 80015a0:	3601      	adds	r6, #1
 80015a2:	e7f2      	b.n	800158a <__libc_init_array+0x1e>
 80015a4:	08001eec 	.word	0x08001eec
 80015a8:	08001eec 	.word	0x08001eec
 80015ac:	08001eec 	.word	0x08001eec
 80015b0:	08001ef0 	.word	0x08001ef0

080015b4 <siprintf>:
 80015b4:	b40e      	push	{r1, r2, r3}
 80015b6:	b500      	push	{lr}
 80015b8:	b09c      	sub	sp, #112	; 0x70
 80015ba:	ab1d      	add	r3, sp, #116	; 0x74
 80015bc:	9002      	str	r0, [sp, #8]
 80015be:	9006      	str	r0, [sp, #24]
 80015c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <siprintf+0x38>)
 80015c6:	9107      	str	r1, [sp, #28]
 80015c8:	9104      	str	r1, [sp, #16]
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <siprintf+0x3c>)
 80015cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80015d0:	9105      	str	r1, [sp, #20]
 80015d2:	6800      	ldr	r0, [r0, #0]
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	a902      	add	r1, sp, #8
 80015d8:	f000 f868 	bl	80016ac <_svfiprintf_r>
 80015dc:	9b02      	ldr	r3, [sp, #8]
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	b01c      	add	sp, #112	; 0x70
 80015e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80015e8:	b003      	add	sp, #12
 80015ea:	4770      	bx	lr
 80015ec:	20000014 	.word	0x20000014
 80015f0:	ffff0208 	.word	0xffff0208

080015f4 <__ssputs_r>:
 80015f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015f8:	688e      	ldr	r6, [r1, #8]
 80015fa:	429e      	cmp	r6, r3
 80015fc:	4682      	mov	sl, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	4690      	mov	r8, r2
 8001602:	461f      	mov	r7, r3
 8001604:	d838      	bhi.n	8001678 <__ssputs_r+0x84>
 8001606:	898a      	ldrh	r2, [r1, #12]
 8001608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800160c:	d032      	beq.n	8001674 <__ssputs_r+0x80>
 800160e:	6825      	ldr	r5, [r4, #0]
 8001610:	6909      	ldr	r1, [r1, #16]
 8001612:	eba5 0901 	sub.w	r9, r5, r1
 8001616:	6965      	ldr	r5, [r4, #20]
 8001618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800161c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001620:	3301      	adds	r3, #1
 8001622:	444b      	add	r3, r9
 8001624:	106d      	asrs	r5, r5, #1
 8001626:	429d      	cmp	r5, r3
 8001628:	bf38      	it	cc
 800162a:	461d      	movcc	r5, r3
 800162c:	0553      	lsls	r3, r2, #21
 800162e:	d531      	bpl.n	8001694 <__ssputs_r+0xa0>
 8001630:	4629      	mov	r1, r5
 8001632:	f000 fb61 	bl	8001cf8 <_malloc_r>
 8001636:	4606      	mov	r6, r0
 8001638:	b950      	cbnz	r0, 8001650 <__ssputs_r+0x5c>
 800163a:	230c      	movs	r3, #12
 800163c:	f8ca 3000 	str.w	r3, [sl]
 8001640:	89a3      	ldrh	r3, [r4, #12]
 8001642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001646:	81a3      	strh	r3, [r4, #12]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001650:	6921      	ldr	r1, [r4, #16]
 8001652:	464a      	mov	r2, r9
 8001654:	f000 fabe 	bl	8001bd4 <memcpy>
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800165e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001662:	81a3      	strh	r3, [r4, #12]
 8001664:	6126      	str	r6, [r4, #16]
 8001666:	6165      	str	r5, [r4, #20]
 8001668:	444e      	add	r6, r9
 800166a:	eba5 0509 	sub.w	r5, r5, r9
 800166e:	6026      	str	r6, [r4, #0]
 8001670:	60a5      	str	r5, [r4, #8]
 8001672:	463e      	mov	r6, r7
 8001674:	42be      	cmp	r6, r7
 8001676:	d900      	bls.n	800167a <__ssputs_r+0x86>
 8001678:	463e      	mov	r6, r7
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	4632      	mov	r2, r6
 800167e:	4641      	mov	r1, r8
 8001680:	f000 fab6 	bl	8001bf0 <memmove>
 8001684:	68a3      	ldr	r3, [r4, #8]
 8001686:	1b9b      	subs	r3, r3, r6
 8001688:	60a3      	str	r3, [r4, #8]
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	4433      	add	r3, r6
 800168e:	6023      	str	r3, [r4, #0]
 8001690:	2000      	movs	r0, #0
 8001692:	e7db      	b.n	800164c <__ssputs_r+0x58>
 8001694:	462a      	mov	r2, r5
 8001696:	f000 fba3 	bl	8001de0 <_realloc_r>
 800169a:	4606      	mov	r6, r0
 800169c:	2800      	cmp	r0, #0
 800169e:	d1e1      	bne.n	8001664 <__ssputs_r+0x70>
 80016a0:	6921      	ldr	r1, [r4, #16]
 80016a2:	4650      	mov	r0, sl
 80016a4:	f000 fabe 	bl	8001c24 <_free_r>
 80016a8:	e7c7      	b.n	800163a <__ssputs_r+0x46>
	...

080016ac <_svfiprintf_r>:
 80016ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b0:	4698      	mov	r8, r3
 80016b2:	898b      	ldrh	r3, [r1, #12]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	b09d      	sub	sp, #116	; 0x74
 80016b8:	4607      	mov	r7, r0
 80016ba:	460d      	mov	r5, r1
 80016bc:	4614      	mov	r4, r2
 80016be:	d50e      	bpl.n	80016de <_svfiprintf_r+0x32>
 80016c0:	690b      	ldr	r3, [r1, #16]
 80016c2:	b963      	cbnz	r3, 80016de <_svfiprintf_r+0x32>
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	f000 fb17 	bl	8001cf8 <_malloc_r>
 80016ca:	6028      	str	r0, [r5, #0]
 80016cc:	6128      	str	r0, [r5, #16]
 80016ce:	b920      	cbnz	r0, 80016da <_svfiprintf_r+0x2e>
 80016d0:	230c      	movs	r3, #12
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	e0d1      	b.n	800187e <_svfiprintf_r+0x1d2>
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	616b      	str	r3, [r5, #20]
 80016de:	2300      	movs	r3, #0
 80016e0:	9309      	str	r3, [sp, #36]	; 0x24
 80016e2:	2320      	movs	r3, #32
 80016e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80016ec:	2330      	movs	r3, #48	; 0x30
 80016ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001898 <_svfiprintf_r+0x1ec>
 80016f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016f6:	f04f 0901 	mov.w	r9, #1
 80016fa:	4623      	mov	r3, r4
 80016fc:	469a      	mov	sl, r3
 80016fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001702:	b10a      	cbz	r2, 8001708 <_svfiprintf_r+0x5c>
 8001704:	2a25      	cmp	r2, #37	; 0x25
 8001706:	d1f9      	bne.n	80016fc <_svfiprintf_r+0x50>
 8001708:	ebba 0b04 	subs.w	fp, sl, r4
 800170c:	d00b      	beq.n	8001726 <_svfiprintf_r+0x7a>
 800170e:	465b      	mov	r3, fp
 8001710:	4622      	mov	r2, r4
 8001712:	4629      	mov	r1, r5
 8001714:	4638      	mov	r0, r7
 8001716:	f7ff ff6d 	bl	80015f4 <__ssputs_r>
 800171a:	3001      	adds	r0, #1
 800171c:	f000 80aa 	beq.w	8001874 <_svfiprintf_r+0x1c8>
 8001720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001722:	445a      	add	r2, fp
 8001724:	9209      	str	r2, [sp, #36]	; 0x24
 8001726:	f89a 3000 	ldrb.w	r3, [sl]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80a2 	beq.w	8001874 <_svfiprintf_r+0x1c8>
 8001730:	2300      	movs	r3, #0
 8001732:	f04f 32ff 	mov.w	r2, #4294967295
 8001736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800173a:	f10a 0a01 	add.w	sl, sl, #1
 800173e:	9304      	str	r3, [sp, #16]
 8001740:	9307      	str	r3, [sp, #28]
 8001742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001746:	931a      	str	r3, [sp, #104]	; 0x68
 8001748:	4654      	mov	r4, sl
 800174a:	2205      	movs	r2, #5
 800174c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001750:	4851      	ldr	r0, [pc, #324]	; (8001898 <_svfiprintf_r+0x1ec>)
 8001752:	f7fe fd45 	bl	80001e0 <memchr>
 8001756:	9a04      	ldr	r2, [sp, #16]
 8001758:	b9d8      	cbnz	r0, 8001792 <_svfiprintf_r+0xe6>
 800175a:	06d0      	lsls	r0, r2, #27
 800175c:	bf44      	itt	mi
 800175e:	2320      	movmi	r3, #32
 8001760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001764:	0711      	lsls	r1, r2, #28
 8001766:	bf44      	itt	mi
 8001768:	232b      	movmi	r3, #43	; 0x2b
 800176a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800176e:	f89a 3000 	ldrb.w	r3, [sl]
 8001772:	2b2a      	cmp	r3, #42	; 0x2a
 8001774:	d015      	beq.n	80017a2 <_svfiprintf_r+0xf6>
 8001776:	9a07      	ldr	r2, [sp, #28]
 8001778:	4654      	mov	r4, sl
 800177a:	2000      	movs	r0, #0
 800177c:	f04f 0c0a 	mov.w	ip, #10
 8001780:	4621      	mov	r1, r4
 8001782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001786:	3b30      	subs	r3, #48	; 0x30
 8001788:	2b09      	cmp	r3, #9
 800178a:	d94e      	bls.n	800182a <_svfiprintf_r+0x17e>
 800178c:	b1b0      	cbz	r0, 80017bc <_svfiprintf_r+0x110>
 800178e:	9207      	str	r2, [sp, #28]
 8001790:	e014      	b.n	80017bc <_svfiprintf_r+0x110>
 8001792:	eba0 0308 	sub.w	r3, r0, r8
 8001796:	fa09 f303 	lsl.w	r3, r9, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	9304      	str	r3, [sp, #16]
 800179e:	46a2      	mov	sl, r4
 80017a0:	e7d2      	b.n	8001748 <_svfiprintf_r+0x9c>
 80017a2:	9b03      	ldr	r3, [sp, #12]
 80017a4:	1d19      	adds	r1, r3, #4
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	9103      	str	r1, [sp, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bfbb      	ittet	lt
 80017ae:	425b      	neglt	r3, r3
 80017b0:	f042 0202 	orrlt.w	r2, r2, #2
 80017b4:	9307      	strge	r3, [sp, #28]
 80017b6:	9307      	strlt	r3, [sp, #28]
 80017b8:	bfb8      	it	lt
 80017ba:	9204      	strlt	r2, [sp, #16]
 80017bc:	7823      	ldrb	r3, [r4, #0]
 80017be:	2b2e      	cmp	r3, #46	; 0x2e
 80017c0:	d10c      	bne.n	80017dc <_svfiprintf_r+0x130>
 80017c2:	7863      	ldrb	r3, [r4, #1]
 80017c4:	2b2a      	cmp	r3, #42	; 0x2a
 80017c6:	d135      	bne.n	8001834 <_svfiprintf_r+0x188>
 80017c8:	9b03      	ldr	r3, [sp, #12]
 80017ca:	1d1a      	adds	r2, r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bfb8      	it	lt
 80017d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80017d8:	3402      	adds	r4, #2
 80017da:	9305      	str	r3, [sp, #20]
 80017dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800189c <_svfiprintf_r+0x1f0>
 80017e0:	7821      	ldrb	r1, [r4, #0]
 80017e2:	2203      	movs	r2, #3
 80017e4:	4650      	mov	r0, sl
 80017e6:	f7fe fcfb 	bl	80001e0 <memchr>
 80017ea:	b140      	cbz	r0, 80017fe <_svfiprintf_r+0x152>
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	eba0 000a 	sub.w	r0, r0, sl
 80017f2:	fa03 f000 	lsl.w	r0, r3, r0
 80017f6:	9b04      	ldr	r3, [sp, #16]
 80017f8:	4303      	orrs	r3, r0
 80017fa:	3401      	adds	r4, #1
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001802:	4827      	ldr	r0, [pc, #156]	; (80018a0 <_svfiprintf_r+0x1f4>)
 8001804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001808:	2206      	movs	r2, #6
 800180a:	f7fe fce9 	bl	80001e0 <memchr>
 800180e:	2800      	cmp	r0, #0
 8001810:	d038      	beq.n	8001884 <_svfiprintf_r+0x1d8>
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <_svfiprintf_r+0x1f8>)
 8001814:	bb1b      	cbnz	r3, 800185e <_svfiprintf_r+0x1b2>
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	3307      	adds	r3, #7
 800181a:	f023 0307 	bic.w	r3, r3, #7
 800181e:	3308      	adds	r3, #8
 8001820:	9303      	str	r3, [sp, #12]
 8001822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001824:	4433      	add	r3, r6
 8001826:	9309      	str	r3, [sp, #36]	; 0x24
 8001828:	e767      	b.n	80016fa <_svfiprintf_r+0x4e>
 800182a:	fb0c 3202 	mla	r2, ip, r2, r3
 800182e:	460c      	mov	r4, r1
 8001830:	2001      	movs	r0, #1
 8001832:	e7a5      	b.n	8001780 <_svfiprintf_r+0xd4>
 8001834:	2300      	movs	r3, #0
 8001836:	3401      	adds	r4, #1
 8001838:	9305      	str	r3, [sp, #20]
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 0c0a 	mov.w	ip, #10
 8001840:	4620      	mov	r0, r4
 8001842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001846:	3a30      	subs	r2, #48	; 0x30
 8001848:	2a09      	cmp	r2, #9
 800184a:	d903      	bls.n	8001854 <_svfiprintf_r+0x1a8>
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0c5      	beq.n	80017dc <_svfiprintf_r+0x130>
 8001850:	9105      	str	r1, [sp, #20]
 8001852:	e7c3      	b.n	80017dc <_svfiprintf_r+0x130>
 8001854:	fb0c 2101 	mla	r1, ip, r1, r2
 8001858:	4604      	mov	r4, r0
 800185a:	2301      	movs	r3, #1
 800185c:	e7f0      	b.n	8001840 <_svfiprintf_r+0x194>
 800185e:	ab03      	add	r3, sp, #12
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	462a      	mov	r2, r5
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_svfiprintf_r+0x1fc>)
 8001866:	a904      	add	r1, sp, #16
 8001868:	4638      	mov	r0, r7
 800186a:	f3af 8000 	nop.w
 800186e:	1c42      	adds	r2, r0, #1
 8001870:	4606      	mov	r6, r0
 8001872:	d1d6      	bne.n	8001822 <_svfiprintf_r+0x176>
 8001874:	89ab      	ldrh	r3, [r5, #12]
 8001876:	065b      	lsls	r3, r3, #25
 8001878:	f53f af2c 	bmi.w	80016d4 <_svfiprintf_r+0x28>
 800187c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800187e:	b01d      	add	sp, #116	; 0x74
 8001880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001884:	ab03      	add	r3, sp, #12
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462a      	mov	r2, r5
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_svfiprintf_r+0x1fc>)
 800188c:	a904      	add	r1, sp, #16
 800188e:	4638      	mov	r0, r7
 8001890:	f000 f87a 	bl	8001988 <_printf_i>
 8001894:	e7eb      	b.n	800186e <_svfiprintf_r+0x1c2>
 8001896:	bf00      	nop
 8001898:	08001eb6 	.word	0x08001eb6
 800189c:	08001ebc 	.word	0x08001ebc
 80018a0:	08001ec0 	.word	0x08001ec0
 80018a4:	00000000 	.word	0x00000000
 80018a8:	080015f5 	.word	0x080015f5

080018ac <_printf_common>:
 80018ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018b0:	4616      	mov	r6, r2
 80018b2:	4699      	mov	r9, r3
 80018b4:	688a      	ldr	r2, [r1, #8]
 80018b6:	690b      	ldr	r3, [r1, #16]
 80018b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018bc:	4293      	cmp	r3, r2
 80018be:	bfb8      	it	lt
 80018c0:	4613      	movlt	r3, r2
 80018c2:	6033      	str	r3, [r6, #0]
 80018c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018c8:	4607      	mov	r7, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	b10a      	cbz	r2, 80018d2 <_printf_common+0x26>
 80018ce:	3301      	adds	r3, #1
 80018d0:	6033      	str	r3, [r6, #0]
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	0699      	lsls	r1, r3, #26
 80018d6:	bf42      	ittt	mi
 80018d8:	6833      	ldrmi	r3, [r6, #0]
 80018da:	3302      	addmi	r3, #2
 80018dc:	6033      	strmi	r3, [r6, #0]
 80018de:	6825      	ldr	r5, [r4, #0]
 80018e0:	f015 0506 	ands.w	r5, r5, #6
 80018e4:	d106      	bne.n	80018f4 <_printf_common+0x48>
 80018e6:	f104 0a19 	add.w	sl, r4, #25
 80018ea:	68e3      	ldr	r3, [r4, #12]
 80018ec:	6832      	ldr	r2, [r6, #0]
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	42ab      	cmp	r3, r5
 80018f2:	dc26      	bgt.n	8001942 <_printf_common+0x96>
 80018f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018f8:	1e13      	subs	r3, r2, #0
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	bf18      	it	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	0692      	lsls	r2, r2, #26
 8001902:	d42b      	bmi.n	800195c <_printf_common+0xb0>
 8001904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001908:	4649      	mov	r1, r9
 800190a:	4638      	mov	r0, r7
 800190c:	47c0      	blx	r8
 800190e:	3001      	adds	r0, #1
 8001910:	d01e      	beq.n	8001950 <_printf_common+0xa4>
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	68e5      	ldr	r5, [r4, #12]
 8001916:	6832      	ldr	r2, [r6, #0]
 8001918:	f003 0306 	and.w	r3, r3, #6
 800191c:	2b04      	cmp	r3, #4
 800191e:	bf08      	it	eq
 8001920:	1aad      	subeq	r5, r5, r2
 8001922:	68a3      	ldr	r3, [r4, #8]
 8001924:	6922      	ldr	r2, [r4, #16]
 8001926:	bf0c      	ite	eq
 8001928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800192c:	2500      	movne	r5, #0
 800192e:	4293      	cmp	r3, r2
 8001930:	bfc4      	itt	gt
 8001932:	1a9b      	subgt	r3, r3, r2
 8001934:	18ed      	addgt	r5, r5, r3
 8001936:	2600      	movs	r6, #0
 8001938:	341a      	adds	r4, #26
 800193a:	42b5      	cmp	r5, r6
 800193c:	d11a      	bne.n	8001974 <_printf_common+0xc8>
 800193e:	2000      	movs	r0, #0
 8001940:	e008      	b.n	8001954 <_printf_common+0xa8>
 8001942:	2301      	movs	r3, #1
 8001944:	4652      	mov	r2, sl
 8001946:	4649      	mov	r1, r9
 8001948:	4638      	mov	r0, r7
 800194a:	47c0      	blx	r8
 800194c:	3001      	adds	r0, #1
 800194e:	d103      	bne.n	8001958 <_printf_common+0xac>
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001958:	3501      	adds	r5, #1
 800195a:	e7c6      	b.n	80018ea <_printf_common+0x3e>
 800195c:	18e1      	adds	r1, r4, r3
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	2030      	movs	r0, #48	; 0x30
 8001962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001966:	4422      	add	r2, r4
 8001968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800196c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001970:	3302      	adds	r3, #2
 8001972:	e7c7      	b.n	8001904 <_printf_common+0x58>
 8001974:	2301      	movs	r3, #1
 8001976:	4622      	mov	r2, r4
 8001978:	4649      	mov	r1, r9
 800197a:	4638      	mov	r0, r7
 800197c:	47c0      	blx	r8
 800197e:	3001      	adds	r0, #1
 8001980:	d0e6      	beq.n	8001950 <_printf_common+0xa4>
 8001982:	3601      	adds	r6, #1
 8001984:	e7d9      	b.n	800193a <_printf_common+0x8e>
	...

08001988 <_printf_i>:
 8001988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800198c:	7e0f      	ldrb	r7, [r1, #24]
 800198e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001990:	2f78      	cmp	r7, #120	; 0x78
 8001992:	4691      	mov	r9, r2
 8001994:	4680      	mov	r8, r0
 8001996:	460c      	mov	r4, r1
 8001998:	469a      	mov	sl, r3
 800199a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800199e:	d807      	bhi.n	80019b0 <_printf_i+0x28>
 80019a0:	2f62      	cmp	r7, #98	; 0x62
 80019a2:	d80a      	bhi.n	80019ba <_printf_i+0x32>
 80019a4:	2f00      	cmp	r7, #0
 80019a6:	f000 80d8 	beq.w	8001b5a <_printf_i+0x1d2>
 80019aa:	2f58      	cmp	r7, #88	; 0x58
 80019ac:	f000 80a3 	beq.w	8001af6 <_printf_i+0x16e>
 80019b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019b8:	e03a      	b.n	8001a30 <_printf_i+0xa8>
 80019ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019be:	2b15      	cmp	r3, #21
 80019c0:	d8f6      	bhi.n	80019b0 <_printf_i+0x28>
 80019c2:	a101      	add	r1, pc, #4	; (adr r1, 80019c8 <_printf_i+0x40>)
 80019c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019c8:	08001a21 	.word	0x08001a21
 80019cc:	08001a35 	.word	0x08001a35
 80019d0:	080019b1 	.word	0x080019b1
 80019d4:	080019b1 	.word	0x080019b1
 80019d8:	080019b1 	.word	0x080019b1
 80019dc:	080019b1 	.word	0x080019b1
 80019e0:	08001a35 	.word	0x08001a35
 80019e4:	080019b1 	.word	0x080019b1
 80019e8:	080019b1 	.word	0x080019b1
 80019ec:	080019b1 	.word	0x080019b1
 80019f0:	080019b1 	.word	0x080019b1
 80019f4:	08001b41 	.word	0x08001b41
 80019f8:	08001a65 	.word	0x08001a65
 80019fc:	08001b23 	.word	0x08001b23
 8001a00:	080019b1 	.word	0x080019b1
 8001a04:	080019b1 	.word	0x080019b1
 8001a08:	08001b63 	.word	0x08001b63
 8001a0c:	080019b1 	.word	0x080019b1
 8001a10:	08001a65 	.word	0x08001a65
 8001a14:	080019b1 	.word	0x080019b1
 8001a18:	080019b1 	.word	0x080019b1
 8001a1c:	08001b2b 	.word	0x08001b2b
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	1d1a      	adds	r2, r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	602a      	str	r2, [r5, #0]
 8001a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0a3      	b.n	8001b7c <_printf_i+0x1f4>
 8001a34:	6820      	ldr	r0, [r4, #0]
 8001a36:	6829      	ldr	r1, [r5, #0]
 8001a38:	0606      	lsls	r6, r0, #24
 8001a3a:	f101 0304 	add.w	r3, r1, #4
 8001a3e:	d50a      	bpl.n	8001a56 <_printf_i+0xce>
 8001a40:	680e      	ldr	r6, [r1, #0]
 8001a42:	602b      	str	r3, [r5, #0]
 8001a44:	2e00      	cmp	r6, #0
 8001a46:	da03      	bge.n	8001a50 <_printf_i+0xc8>
 8001a48:	232d      	movs	r3, #45	; 0x2d
 8001a4a:	4276      	negs	r6, r6
 8001a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a50:	485e      	ldr	r0, [pc, #376]	; (8001bcc <_printf_i+0x244>)
 8001a52:	230a      	movs	r3, #10
 8001a54:	e019      	b.n	8001a8a <_printf_i+0x102>
 8001a56:	680e      	ldr	r6, [r1, #0]
 8001a58:	602b      	str	r3, [r5, #0]
 8001a5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a5e:	bf18      	it	ne
 8001a60:	b236      	sxthne	r6, r6
 8001a62:	e7ef      	b.n	8001a44 <_printf_i+0xbc>
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	6820      	ldr	r0, [r4, #0]
 8001a68:	1d19      	adds	r1, r3, #4
 8001a6a:	6029      	str	r1, [r5, #0]
 8001a6c:	0601      	lsls	r1, r0, #24
 8001a6e:	d501      	bpl.n	8001a74 <_printf_i+0xec>
 8001a70:	681e      	ldr	r6, [r3, #0]
 8001a72:	e002      	b.n	8001a7a <_printf_i+0xf2>
 8001a74:	0646      	lsls	r6, r0, #25
 8001a76:	d5fb      	bpl.n	8001a70 <_printf_i+0xe8>
 8001a78:	881e      	ldrh	r6, [r3, #0]
 8001a7a:	4854      	ldr	r0, [pc, #336]	; (8001bcc <_printf_i+0x244>)
 8001a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8001a7e:	bf0c      	ite	eq
 8001a80:	2308      	moveq	r3, #8
 8001a82:	230a      	movne	r3, #10
 8001a84:	2100      	movs	r1, #0
 8001a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a8a:	6865      	ldr	r5, [r4, #4]
 8001a8c:	60a5      	str	r5, [r4, #8]
 8001a8e:	2d00      	cmp	r5, #0
 8001a90:	bfa2      	ittt	ge
 8001a92:	6821      	ldrge	r1, [r4, #0]
 8001a94:	f021 0104 	bicge.w	r1, r1, #4
 8001a98:	6021      	strge	r1, [r4, #0]
 8001a9a:	b90e      	cbnz	r6, 8001aa0 <_printf_i+0x118>
 8001a9c:	2d00      	cmp	r5, #0
 8001a9e:	d04d      	beq.n	8001b3c <_printf_i+0x1b4>
 8001aa0:	4615      	mov	r5, r2
 8001aa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8001aa6:	fb03 6711 	mls	r7, r3, r1, r6
 8001aaa:	5dc7      	ldrb	r7, [r0, r7]
 8001aac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ab0:	4637      	mov	r7, r6
 8001ab2:	42bb      	cmp	r3, r7
 8001ab4:	460e      	mov	r6, r1
 8001ab6:	d9f4      	bls.n	8001aa2 <_printf_i+0x11a>
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d10b      	bne.n	8001ad4 <_printf_i+0x14c>
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	07de      	lsls	r6, r3, #31
 8001ac0:	d508      	bpl.n	8001ad4 <_printf_i+0x14c>
 8001ac2:	6923      	ldr	r3, [r4, #16]
 8001ac4:	6861      	ldr	r1, [r4, #4]
 8001ac6:	4299      	cmp	r1, r3
 8001ac8:	bfde      	ittt	le
 8001aca:	2330      	movle	r3, #48	; 0x30
 8001acc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ad0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ad4:	1b52      	subs	r2, r2, r5
 8001ad6:	6122      	str	r2, [r4, #16]
 8001ad8:	f8cd a000 	str.w	sl, [sp]
 8001adc:	464b      	mov	r3, r9
 8001ade:	aa03      	add	r2, sp, #12
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4640      	mov	r0, r8
 8001ae4:	f7ff fee2 	bl	80018ac <_printf_common>
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d14c      	bne.n	8001b86 <_printf_i+0x1fe>
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	b004      	add	sp, #16
 8001af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af6:	4835      	ldr	r0, [pc, #212]	; (8001bcc <_printf_i+0x244>)
 8001af8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001afc:	6829      	ldr	r1, [r5, #0]
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b04:	6029      	str	r1, [r5, #0]
 8001b06:	061d      	lsls	r5, r3, #24
 8001b08:	d514      	bpl.n	8001b34 <_printf_i+0x1ac>
 8001b0a:	07df      	lsls	r7, r3, #31
 8001b0c:	bf44      	itt	mi
 8001b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8001b12:	6023      	strmi	r3, [r4, #0]
 8001b14:	b91e      	cbnz	r6, 8001b1e <_printf_i+0x196>
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	f023 0320 	bic.w	r3, r3, #32
 8001b1c:	6023      	str	r3, [r4, #0]
 8001b1e:	2310      	movs	r3, #16
 8001b20:	e7b0      	b.n	8001a84 <_printf_i+0xfc>
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	f043 0320 	orr.w	r3, r3, #32
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	2378      	movs	r3, #120	; 0x78
 8001b2c:	4828      	ldr	r0, [pc, #160]	; (8001bd0 <_printf_i+0x248>)
 8001b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b32:	e7e3      	b.n	8001afc <_printf_i+0x174>
 8001b34:	0659      	lsls	r1, r3, #25
 8001b36:	bf48      	it	mi
 8001b38:	b2b6      	uxthmi	r6, r6
 8001b3a:	e7e6      	b.n	8001b0a <_printf_i+0x182>
 8001b3c:	4615      	mov	r5, r2
 8001b3e:	e7bb      	b.n	8001ab8 <_printf_i+0x130>
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	6826      	ldr	r6, [r4, #0]
 8001b44:	6961      	ldr	r1, [r4, #20]
 8001b46:	1d18      	adds	r0, r3, #4
 8001b48:	6028      	str	r0, [r5, #0]
 8001b4a:	0635      	lsls	r5, r6, #24
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	d501      	bpl.n	8001b54 <_printf_i+0x1cc>
 8001b50:	6019      	str	r1, [r3, #0]
 8001b52:	e002      	b.n	8001b5a <_printf_i+0x1d2>
 8001b54:	0670      	lsls	r0, r6, #25
 8001b56:	d5fb      	bpl.n	8001b50 <_printf_i+0x1c8>
 8001b58:	8019      	strh	r1, [r3, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	6123      	str	r3, [r4, #16]
 8001b5e:	4615      	mov	r5, r2
 8001b60:	e7ba      	b.n	8001ad8 <_printf_i+0x150>
 8001b62:	682b      	ldr	r3, [r5, #0]
 8001b64:	1d1a      	adds	r2, r3, #4
 8001b66:	602a      	str	r2, [r5, #0]
 8001b68:	681d      	ldr	r5, [r3, #0]
 8001b6a:	6862      	ldr	r2, [r4, #4]
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f7fe fb36 	bl	80001e0 <memchr>
 8001b74:	b108      	cbz	r0, 8001b7a <_printf_i+0x1f2>
 8001b76:	1b40      	subs	r0, r0, r5
 8001b78:	6060      	str	r0, [r4, #4]
 8001b7a:	6863      	ldr	r3, [r4, #4]
 8001b7c:	6123      	str	r3, [r4, #16]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b84:	e7a8      	b.n	8001ad8 <_printf_i+0x150>
 8001b86:	6923      	ldr	r3, [r4, #16]
 8001b88:	462a      	mov	r2, r5
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	47d0      	blx	sl
 8001b90:	3001      	adds	r0, #1
 8001b92:	d0ab      	beq.n	8001aec <_printf_i+0x164>
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	079b      	lsls	r3, r3, #30
 8001b98:	d413      	bmi.n	8001bc2 <_printf_i+0x23a>
 8001b9a:	68e0      	ldr	r0, [r4, #12]
 8001b9c:	9b03      	ldr	r3, [sp, #12]
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	bfb8      	it	lt
 8001ba2:	4618      	movlt	r0, r3
 8001ba4:	e7a4      	b.n	8001af0 <_printf_i+0x168>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4632      	mov	r2, r6
 8001baa:	4649      	mov	r1, r9
 8001bac:	4640      	mov	r0, r8
 8001bae:	47d0      	blx	sl
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	d09b      	beq.n	8001aec <_printf_i+0x164>
 8001bb4:	3501      	adds	r5, #1
 8001bb6:	68e3      	ldr	r3, [r4, #12]
 8001bb8:	9903      	ldr	r1, [sp, #12]
 8001bba:	1a5b      	subs	r3, r3, r1
 8001bbc:	42ab      	cmp	r3, r5
 8001bbe:	dcf2      	bgt.n	8001ba6 <_printf_i+0x21e>
 8001bc0:	e7eb      	b.n	8001b9a <_printf_i+0x212>
 8001bc2:	2500      	movs	r5, #0
 8001bc4:	f104 0619 	add.w	r6, r4, #25
 8001bc8:	e7f5      	b.n	8001bb6 <_printf_i+0x22e>
 8001bca:	bf00      	nop
 8001bcc:	08001ec7 	.word	0x08001ec7
 8001bd0:	08001ed8 	.word	0x08001ed8

08001bd4 <memcpy>:
 8001bd4:	440a      	add	r2, r1
 8001bd6:	4291      	cmp	r1, r2
 8001bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001bdc:	d100      	bne.n	8001be0 <memcpy+0xc>
 8001bde:	4770      	bx	lr
 8001be0:	b510      	push	{r4, lr}
 8001be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bea:	4291      	cmp	r1, r2
 8001bec:	d1f9      	bne.n	8001be2 <memcpy+0xe>
 8001bee:	bd10      	pop	{r4, pc}

08001bf0 <memmove>:
 8001bf0:	4288      	cmp	r0, r1
 8001bf2:	b510      	push	{r4, lr}
 8001bf4:	eb01 0402 	add.w	r4, r1, r2
 8001bf8:	d902      	bls.n	8001c00 <memmove+0x10>
 8001bfa:	4284      	cmp	r4, r0
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	d807      	bhi.n	8001c10 <memmove+0x20>
 8001c00:	1e43      	subs	r3, r0, #1
 8001c02:	42a1      	cmp	r1, r4
 8001c04:	d008      	beq.n	8001c18 <memmove+0x28>
 8001c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c0e:	e7f8      	b.n	8001c02 <memmove+0x12>
 8001c10:	4402      	add	r2, r0
 8001c12:	4601      	mov	r1, r0
 8001c14:	428a      	cmp	r2, r1
 8001c16:	d100      	bne.n	8001c1a <memmove+0x2a>
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c22:	e7f7      	b.n	8001c14 <memmove+0x24>

08001c24 <_free_r>:
 8001c24:	b538      	push	{r3, r4, r5, lr}
 8001c26:	4605      	mov	r5, r0
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	d041      	beq.n	8001cb0 <_free_r+0x8c>
 8001c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c30:	1f0c      	subs	r4, r1, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bfb8      	it	lt
 8001c36:	18e4      	addlt	r4, r4, r3
 8001c38:	f000 f912 	bl	8001e60 <__malloc_lock>
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <_free_r+0x90>)
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	b933      	cbnz	r3, 8001c50 <_free_r+0x2c>
 8001c42:	6063      	str	r3, [r4, #4]
 8001c44:	6014      	str	r4, [r2, #0]
 8001c46:	4628      	mov	r0, r5
 8001c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c4c:	f000 b90e 	b.w	8001e6c <__malloc_unlock>
 8001c50:	42a3      	cmp	r3, r4
 8001c52:	d908      	bls.n	8001c66 <_free_r+0x42>
 8001c54:	6820      	ldr	r0, [r4, #0]
 8001c56:	1821      	adds	r1, r4, r0
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	bf01      	itttt	eq
 8001c5c:	6819      	ldreq	r1, [r3, #0]
 8001c5e:	685b      	ldreq	r3, [r3, #4]
 8001c60:	1809      	addeq	r1, r1, r0
 8001c62:	6021      	streq	r1, [r4, #0]
 8001c64:	e7ed      	b.n	8001c42 <_free_r+0x1e>
 8001c66:	461a      	mov	r2, r3
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	b10b      	cbz	r3, 8001c70 <_free_r+0x4c>
 8001c6c:	42a3      	cmp	r3, r4
 8001c6e:	d9fa      	bls.n	8001c66 <_free_r+0x42>
 8001c70:	6811      	ldr	r1, [r2, #0]
 8001c72:	1850      	adds	r0, r2, r1
 8001c74:	42a0      	cmp	r0, r4
 8001c76:	d10b      	bne.n	8001c90 <_free_r+0x6c>
 8001c78:	6820      	ldr	r0, [r4, #0]
 8001c7a:	4401      	add	r1, r0
 8001c7c:	1850      	adds	r0, r2, r1
 8001c7e:	4283      	cmp	r3, r0
 8001c80:	6011      	str	r1, [r2, #0]
 8001c82:	d1e0      	bne.n	8001c46 <_free_r+0x22>
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6053      	str	r3, [r2, #4]
 8001c8a:	4401      	add	r1, r0
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	e7da      	b.n	8001c46 <_free_r+0x22>
 8001c90:	d902      	bls.n	8001c98 <_free_r+0x74>
 8001c92:	230c      	movs	r3, #12
 8001c94:	602b      	str	r3, [r5, #0]
 8001c96:	e7d6      	b.n	8001c46 <_free_r+0x22>
 8001c98:	6820      	ldr	r0, [r4, #0]
 8001c9a:	1821      	adds	r1, r4, r0
 8001c9c:	428b      	cmp	r3, r1
 8001c9e:	bf04      	itt	eq
 8001ca0:	6819      	ldreq	r1, [r3, #0]
 8001ca2:	685b      	ldreq	r3, [r3, #4]
 8001ca4:	6063      	str	r3, [r4, #4]
 8001ca6:	bf04      	itt	eq
 8001ca8:	1809      	addeq	r1, r1, r0
 8001caa:	6021      	streq	r1, [r4, #0]
 8001cac:	6054      	str	r4, [r2, #4]
 8001cae:	e7ca      	b.n	8001c46 <_free_r+0x22>
 8001cb0:	bd38      	pop	{r3, r4, r5, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002bc 	.word	0x200002bc

08001cb8 <sbrk_aligned>:
 8001cb8:	b570      	push	{r4, r5, r6, lr}
 8001cba:	4e0e      	ldr	r6, [pc, #56]	; (8001cf4 <sbrk_aligned+0x3c>)
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	6831      	ldr	r1, [r6, #0]
 8001cc0:	4605      	mov	r5, r0
 8001cc2:	b911      	cbnz	r1, 8001cca <sbrk_aligned+0x12>
 8001cc4:	f000 f8bc 	bl	8001e40 <_sbrk_r>
 8001cc8:	6030      	str	r0, [r6, #0]
 8001cca:	4621      	mov	r1, r4
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f000 f8b7 	bl	8001e40 <_sbrk_r>
 8001cd2:	1c43      	adds	r3, r0, #1
 8001cd4:	d00a      	beq.n	8001cec <sbrk_aligned+0x34>
 8001cd6:	1cc4      	adds	r4, r0, #3
 8001cd8:	f024 0403 	bic.w	r4, r4, #3
 8001cdc:	42a0      	cmp	r0, r4
 8001cde:	d007      	beq.n	8001cf0 <sbrk_aligned+0x38>
 8001ce0:	1a21      	subs	r1, r4, r0
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f000 f8ac 	bl	8001e40 <_sbrk_r>
 8001ce8:	3001      	adds	r0, #1
 8001cea:	d101      	bne.n	8001cf0 <sbrk_aligned+0x38>
 8001cec:	f04f 34ff 	mov.w	r4, #4294967295
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}
 8001cf4:	200002c0 	.word	0x200002c0

08001cf8 <_malloc_r>:
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfc:	1ccd      	adds	r5, r1, #3
 8001cfe:	f025 0503 	bic.w	r5, r5, #3
 8001d02:	3508      	adds	r5, #8
 8001d04:	2d0c      	cmp	r5, #12
 8001d06:	bf38      	it	cc
 8001d08:	250c      	movcc	r5, #12
 8001d0a:	2d00      	cmp	r5, #0
 8001d0c:	4607      	mov	r7, r0
 8001d0e:	db01      	blt.n	8001d14 <_malloc_r+0x1c>
 8001d10:	42a9      	cmp	r1, r5
 8001d12:	d905      	bls.n	8001d20 <_malloc_r+0x28>
 8001d14:	230c      	movs	r3, #12
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	2600      	movs	r6, #0
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d20:	4e2e      	ldr	r6, [pc, #184]	; (8001ddc <_malloc_r+0xe4>)
 8001d22:	f000 f89d 	bl	8001e60 <__malloc_lock>
 8001d26:	6833      	ldr	r3, [r6, #0]
 8001d28:	461c      	mov	r4, r3
 8001d2a:	bb34      	cbnz	r4, 8001d7a <_malloc_r+0x82>
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	4638      	mov	r0, r7
 8001d30:	f7ff ffc2 	bl	8001cb8 <sbrk_aligned>
 8001d34:	1c43      	adds	r3, r0, #1
 8001d36:	4604      	mov	r4, r0
 8001d38:	d14d      	bne.n	8001dd6 <_malloc_r+0xde>
 8001d3a:	6834      	ldr	r4, [r6, #0]
 8001d3c:	4626      	mov	r6, r4
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	d140      	bne.n	8001dc4 <_malloc_r+0xcc>
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	4631      	mov	r1, r6
 8001d46:	4638      	mov	r0, r7
 8001d48:	eb04 0803 	add.w	r8, r4, r3
 8001d4c:	f000 f878 	bl	8001e40 <_sbrk_r>
 8001d50:	4580      	cmp	r8, r0
 8001d52:	d13a      	bne.n	8001dca <_malloc_r+0xd2>
 8001d54:	6821      	ldr	r1, [r4, #0]
 8001d56:	3503      	adds	r5, #3
 8001d58:	1a6d      	subs	r5, r5, r1
 8001d5a:	f025 0503 	bic.w	r5, r5, #3
 8001d5e:	3508      	adds	r5, #8
 8001d60:	2d0c      	cmp	r5, #12
 8001d62:	bf38      	it	cc
 8001d64:	250c      	movcc	r5, #12
 8001d66:	4629      	mov	r1, r5
 8001d68:	4638      	mov	r0, r7
 8001d6a:	f7ff ffa5 	bl	8001cb8 <sbrk_aligned>
 8001d6e:	3001      	adds	r0, #1
 8001d70:	d02b      	beq.n	8001dca <_malloc_r+0xd2>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	442b      	add	r3, r5
 8001d76:	6023      	str	r3, [r4, #0]
 8001d78:	e00e      	b.n	8001d98 <_malloc_r+0xa0>
 8001d7a:	6822      	ldr	r2, [r4, #0]
 8001d7c:	1b52      	subs	r2, r2, r5
 8001d7e:	d41e      	bmi.n	8001dbe <_malloc_r+0xc6>
 8001d80:	2a0b      	cmp	r2, #11
 8001d82:	d916      	bls.n	8001db2 <_malloc_r+0xba>
 8001d84:	1961      	adds	r1, r4, r5
 8001d86:	42a3      	cmp	r3, r4
 8001d88:	6025      	str	r5, [r4, #0]
 8001d8a:	bf18      	it	ne
 8001d8c:	6059      	strne	r1, [r3, #4]
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	bf08      	it	eq
 8001d92:	6031      	streq	r1, [r6, #0]
 8001d94:	5162      	str	r2, [r4, r5]
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	4638      	mov	r0, r7
 8001d9a:	f104 060b 	add.w	r6, r4, #11
 8001d9e:	f000 f865 	bl	8001e6c <__malloc_unlock>
 8001da2:	f026 0607 	bic.w	r6, r6, #7
 8001da6:	1d23      	adds	r3, r4, #4
 8001da8:	1af2      	subs	r2, r6, r3
 8001daa:	d0b6      	beq.n	8001d1a <_malloc_r+0x22>
 8001dac:	1b9b      	subs	r3, r3, r6
 8001dae:	50a3      	str	r3, [r4, r2]
 8001db0:	e7b3      	b.n	8001d1a <_malloc_r+0x22>
 8001db2:	6862      	ldr	r2, [r4, #4]
 8001db4:	42a3      	cmp	r3, r4
 8001db6:	bf0c      	ite	eq
 8001db8:	6032      	streq	r2, [r6, #0]
 8001dba:	605a      	strne	r2, [r3, #4]
 8001dbc:	e7ec      	b.n	8001d98 <_malloc_r+0xa0>
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	6864      	ldr	r4, [r4, #4]
 8001dc2:	e7b2      	b.n	8001d2a <_malloc_r+0x32>
 8001dc4:	4634      	mov	r4, r6
 8001dc6:	6876      	ldr	r6, [r6, #4]
 8001dc8:	e7b9      	b.n	8001d3e <_malloc_r+0x46>
 8001dca:	230c      	movs	r3, #12
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f000 f84c 	bl	8001e6c <__malloc_unlock>
 8001dd4:	e7a1      	b.n	8001d1a <_malloc_r+0x22>
 8001dd6:	6025      	str	r5, [r4, #0]
 8001dd8:	e7de      	b.n	8001d98 <_malloc_r+0xa0>
 8001dda:	bf00      	nop
 8001ddc:	200002bc 	.word	0x200002bc

08001de0 <_realloc_r>:
 8001de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de4:	4680      	mov	r8, r0
 8001de6:	4614      	mov	r4, r2
 8001de8:	460e      	mov	r6, r1
 8001dea:	b921      	cbnz	r1, 8001df6 <_realloc_r+0x16>
 8001dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	4611      	mov	r1, r2
 8001df2:	f7ff bf81 	b.w	8001cf8 <_malloc_r>
 8001df6:	b92a      	cbnz	r2, 8001e04 <_realloc_r+0x24>
 8001df8:	f7ff ff14 	bl	8001c24 <_free_r>
 8001dfc:	4625      	mov	r5, r4
 8001dfe:	4628      	mov	r0, r5
 8001e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e04:	f000 f838 	bl	8001e78 <_malloc_usable_size_r>
 8001e08:	4284      	cmp	r4, r0
 8001e0a:	4607      	mov	r7, r0
 8001e0c:	d802      	bhi.n	8001e14 <_realloc_r+0x34>
 8001e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e12:	d812      	bhi.n	8001e3a <_realloc_r+0x5a>
 8001e14:	4621      	mov	r1, r4
 8001e16:	4640      	mov	r0, r8
 8001e18:	f7ff ff6e 	bl	8001cf8 <_malloc_r>
 8001e1c:	4605      	mov	r5, r0
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d0ed      	beq.n	8001dfe <_realloc_r+0x1e>
 8001e22:	42bc      	cmp	r4, r7
 8001e24:	4622      	mov	r2, r4
 8001e26:	4631      	mov	r1, r6
 8001e28:	bf28      	it	cs
 8001e2a:	463a      	movcs	r2, r7
 8001e2c:	f7ff fed2 	bl	8001bd4 <memcpy>
 8001e30:	4631      	mov	r1, r6
 8001e32:	4640      	mov	r0, r8
 8001e34:	f7ff fef6 	bl	8001c24 <_free_r>
 8001e38:	e7e1      	b.n	8001dfe <_realloc_r+0x1e>
 8001e3a:	4635      	mov	r5, r6
 8001e3c:	e7df      	b.n	8001dfe <_realloc_r+0x1e>
	...

08001e40 <_sbrk_r>:
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	4d06      	ldr	r5, [pc, #24]	; (8001e5c <_sbrk_r+0x1c>)
 8001e44:	2300      	movs	r3, #0
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	602b      	str	r3, [r5, #0]
 8001e4c:	f7fe fbd0 	bl	80005f0 <_sbrk>
 8001e50:	1c43      	adds	r3, r0, #1
 8001e52:	d102      	bne.n	8001e5a <_sbrk_r+0x1a>
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	b103      	cbz	r3, 8001e5a <_sbrk_r+0x1a>
 8001e58:	6023      	str	r3, [r4, #0]
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	200002c4 	.word	0x200002c4

08001e60 <__malloc_lock>:
 8001e60:	4801      	ldr	r0, [pc, #4]	; (8001e68 <__malloc_lock+0x8>)
 8001e62:	f000 b811 	b.w	8001e88 <__retarget_lock_acquire_recursive>
 8001e66:	bf00      	nop
 8001e68:	200002c8 	.word	0x200002c8

08001e6c <__malloc_unlock>:
 8001e6c:	4801      	ldr	r0, [pc, #4]	; (8001e74 <__malloc_unlock+0x8>)
 8001e6e:	f000 b80c 	b.w	8001e8a <__retarget_lock_release_recursive>
 8001e72:	bf00      	nop
 8001e74:	200002c8 	.word	0x200002c8

08001e78 <_malloc_usable_size_r>:
 8001e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e7c:	1f18      	subs	r0, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bfbc      	itt	lt
 8001e82:	580b      	ldrlt	r3, [r1, r0]
 8001e84:	18c0      	addlt	r0, r0, r3
 8001e86:	4770      	bx	lr

08001e88 <__retarget_lock_acquire_recursive>:
 8001e88:	4770      	bx	lr

08001e8a <__retarget_lock_release_recursive>:
 8001e8a:	4770      	bx	lr

08001e8c <_init>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	bf00      	nop
 8001e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e92:	bc08      	pop	{r3}
 8001e94:	469e      	mov	lr, r3
 8001e96:	4770      	bx	lr

08001e98 <_fini>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	bf00      	nop
 8001e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9e:	bc08      	pop	{r3}
 8001ea0:	469e      	mov	lr, r3
 8001ea2:	4770      	bx	lr
