
UsartDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000724  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008bc  080008c4  000108c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008bc  080008bc  000108c4  2**0
                  CONTENTS
  4 .ARM          00000000  080008bc  080008bc  000108c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008bc  080008c4  000108c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008c0  080008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ce8  00000000  00000000  000108f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000390  00000000  00000000  000115dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00011970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00011a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef58  00000000  00000000  00011a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001786  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054009  00000000  00000000  00022156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007615f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000164  00000000  00000000  000761b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008a4 	.word	0x080008a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080008a4 	.word	0x080008a4

080001d8 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a88      	ldr	r2, [pc, #544]	; (8000410 <GPIO_Config+0x238>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80001f2:	4b88      	ldr	r3, [pc, #544]	; (8000414 <GPIO_Config+0x23c>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a87      	ldr	r2, [pc, #540]	; (8000414 <GPIO_Config+0x23c>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
 80001fe:	e03a      	b.n	8000276 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a84      	ldr	r2, [pc, #528]	; (8000418 <GPIO_Config+0x240>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d106      	bne.n	8000218 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800020a:	4b82      	ldr	r3, [pc, #520]	; (8000414 <GPIO_Config+0x23c>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	4a81      	ldr	r2, [pc, #516]	; (8000414 <GPIO_Config+0x23c>)
 8000210:	f043 0302 	orr.w	r3, r3, #2
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
 8000216:	e02e      	b.n	8000276 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a7f      	ldr	r2, [pc, #508]	; (800041c <GPIO_Config+0x244>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000222:	4b7c      	ldr	r3, [pc, #496]	; (8000414 <GPIO_Config+0x23c>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000226:	4a7b      	ldr	r2, [pc, #492]	; (8000414 <GPIO_Config+0x23c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	6313      	str	r3, [r2, #48]	; 0x30
 800022e:	e022      	b.n	8000276 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a7a      	ldr	r2, [pc, #488]	; (8000420 <GPIO_Config+0x248>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800023a:	4b76      	ldr	r3, [pc, #472]	; (8000414 <GPIO_Config+0x23c>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a75      	ldr	r2, [pc, #468]	; (8000414 <GPIO_Config+0x23c>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
 8000246:	e016      	b.n	8000276 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a75      	ldr	r2, [pc, #468]	; (8000424 <GPIO_Config+0x24c>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d106      	bne.n	8000260 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000252:	4b70      	ldr	r3, [pc, #448]	; (8000414 <GPIO_Config+0x23c>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4a6f      	ldr	r2, [pc, #444]	; (8000414 <GPIO_Config+0x23c>)
 8000258:	f043 0310 	orr.w	r3, r3, #16
 800025c:	6313      	str	r3, [r2, #48]	; 0x30
 800025e:	e00a      	b.n	8000276 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a70      	ldr	r2, [pc, #448]	; (8000428 <GPIO_Config+0x250>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d105      	bne.n	8000276 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800026a:	4b6a      	ldr	r3, [pc, #424]	; (8000414 <GPIO_Config+0x23c>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a69      	ldr	r2, [pc, #420]	; (8000414 <GPIO_Config+0x23c>)
 8000270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	795b      	ldrb	r3, [r3, #5]
 800027a:	461a      	mov	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	791b      	ldrb	r3, [r3, #4]
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2103      	movs	r1, #3
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	43db      	mvns	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	400a      	ands	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	6819      	ldr	r1, [r3, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	7a1b      	ldrb	r3, [r3, #8]
 80002ba:	461a      	mov	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	fa02 f303 	lsl.w	r3, r2, r3
 80002c4:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	4619      	mov	r1, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	408b      	lsls	r3, r1
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	400a      	ands	r2, r1
 80002e0:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6859      	ldr	r1, [r3, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	799b      	ldrb	r3, [r3, #6]
 80002f6:	461a      	mov	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	791b      	ldrb	r3, [r3, #4]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000302:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	2103      	movs	r1, #3
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	4619      	mov	r1, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	400a      	ands	r2, r1
 8000320:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	6899      	ldr	r1, [r3, #8]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	430a      	orrs	r2, r1
 8000330:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	79db      	ldrb	r3, [r3, #7]
 8000336:	461a      	mov	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	68da      	ldr	r2, [r3, #12]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	791b      	ldrb	r3, [r3, #4]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	2103      	movs	r1, #3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4619      	mov	r1, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	400a      	ands	r2, r1
 8000360:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	68d9      	ldr	r1, [r3, #12]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	430a      	orrs	r2, r1
 8000370:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	795b      	ldrb	r3, [r3, #5]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d143      	bne.n	8000402 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	791b      	ldrb	r3, [r3, #4]
 800037e:	2b07      	cmp	r3, #7
 8000380:	d81f      	bhi.n	80003c2 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6a1a      	ldr	r2, [r3, #32]
 8000390:	210f      	movs	r1, #15
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	4619      	mov	r1, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	400a      	ands	r2, r1
 80003a2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6a1a      	ldr	r2, [r3, #32]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5b      	ldrb	r3, [r3, #9]
 80003ae:	4619      	mov	r1, r3
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	4619      	mov	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	430a      	orrs	r2, r1
 80003be:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 80003c0:	e01f      	b.n	8000402 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	3b08      	subs	r3, #8
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003d2:	210f      	movs	r1, #15
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	400a      	ands	r2, r1
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7a5b      	ldrb	r3, [r3, #9]
 80003f0:	4619      	mov	r1, r3
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	430a      	orrs	r2, r1
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40020000 	.word	0x40020000
 8000414:	40023800 	.word	0x40023800
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40021000 	.word	0x40021000
 8000428:	40021c00 	.word	0x40021c00

0800042c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a84      	ldr	r2, [pc, #528]	; (800064c <USART_Config+0x220>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 800043e:	4b84      	ldr	r3, [pc, #528]	; (8000650 <USART_Config+0x224>)
 8000440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000442:	4a83      	ldr	r2, [pc, #524]	; (8000650 <USART_Config+0x224>)
 8000444:	f043 0310 	orr.w	r3, r3, #16
 8000448:	6453      	str	r3, [r2, #68]	; 0x44
 800044a:	e016      	b.n	800047a <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a80      	ldr	r2, [pc, #512]	; (8000654 <USART_Config+0x228>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000456:	4b7e      	ldr	r3, [pc, #504]	; (8000650 <USART_Config+0x224>)
 8000458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045a:	4a7d      	ldr	r2, [pc, #500]	; (8000650 <USART_Config+0x224>)
 800045c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000460:	6413      	str	r3, [r2, #64]	; 0x40
 8000462:	e00a      	b.n	800047a <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a7b      	ldr	r2, [pc, #492]	; (8000658 <USART_Config+0x22c>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d105      	bne.n	800047a <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 800046e:	4b78      	ldr	r3, [pc, #480]	; (8000650 <USART_Config+0x224>)
 8000470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000472:	4a77      	ldr	r2, [pc, #476]	; (8000650 <USART_Config+0x224>)
 8000474:	f043 0320 	orr.w	r3, r3, #32
 8000478:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	79db      	ldrb	r3, [r3, #7]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d023      	beq.n	80004da <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	68da      	ldr	r2, [r3, #12]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004a0:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	79db      	ldrb	r3, [r3, #7]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d10b      	bne.n	80004c2 <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80004b8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2201      	movs	r2, #1
 80004be:	719a      	strb	r2, [r3, #6]
 80004c0:	e013      	b.n	80004ea <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004d0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	719a      	strb	r2, [r3, #6]
 80004d8:	e007      	b.n	80004ea <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68da      	ldr	r2, [r3, #12]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004e8:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	799b      	ldrb	r3, [r3, #6]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d108      	bne.n	8000504 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68da      	ldr	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	e007      	b.n	8000514 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68da      	ldr	r2, [r3, #12]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000512:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7a1b      	ldrb	r3, [r3, #8]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d82f      	bhi.n	800057c <USART_Config+0x150>
 800051c:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <USART_Config+0xf8>)
 800051e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	08000535 	.word	0x08000535
 8000528:	08000547 	.word	0x08000547
 800052c:	08000559 	.word	0x08000559
 8000530:	0800056b 	.word	0x0800056b
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	691a      	ldr	r2, [r3, #16]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000542:	611a      	str	r2, [r3, #16]
		break;
 8000544:	e01a      	b.n	800057c <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	691a      	ldr	r2, [r3, #16]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000554:	611a      	str	r2, [r3, #16]
		break;
 8000556:	e011      	b.n	800057c <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	691a      	ldr	r2, [r3, #16]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000566:	611a      	str	r2, [r3, #16]
		break;
 8000568:	e008      	b.n	800057c <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	691a      	ldr	r2, [r3, #16]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000578:	611a      	str	r2, [r3, #16]
		break;
 800057a:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d105      	bne.n	8000590 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f240 6283 	movw	r2, #1667	; 0x683
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	e011      	b.n	80005b4 <USART_Config+0x188>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d105      	bne.n	80005a4 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f240 3241 	movw	r2, #833	; 0x341
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	e007      	b.n	80005b4 <USART_Config+0x188>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d103      	bne.n	80005b4 <USART_Config+0x188>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = 0xB
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	228b      	movs	r2, #139	; 0x8b
 80005b2:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d84f      	bhi.n	800065c <USART_Config+0x230>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <USART_Config+0x198>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005d5 	.word	0x080005d5
 80005c8:	080005e7 	.word	0x080005e7
 80005cc:	080005f9 	.word	0x080005f9
 80005d0:	0800061b 	.word	0x0800061b
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68da      	ldr	r2, [r3, #12]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f042 0208 	orr.w	r2, r2, #8
 80005e2:	60da      	str	r2, [r3, #12]
		break;
 80005e4:	e053      	b.n	800068e <USART_Config+0x262>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f042 0204 	orr.w	r2, r2, #4
 80005f4:	60da      	str	r2, [r3, #12]
		break;
 80005f6:	e04a      	b.n	800068e <USART_Config+0x262>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	68da      	ldr	r2, [r3, #12]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f042 0208 	orr.w	r2, r2, #8
 8000606:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f042 0204 	orr.w	r2, r2, #4
 8000616:	60da      	str	r2, [r3, #12]
		break;
 8000618:	e039      	b.n	800068e <USART_Config+0x262>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f022 0208 	bic.w	r2, r2, #8
 8000628:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f022 0204 	bic.w	r2, r2, #4
 8000638:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000648:	60da      	str	r2, [r3, #12]
		break;
 800064a:	e020      	b.n	800068e <USART_Config+0x262>
 800064c:	40011000 	.word	0x40011000
 8000650:	40023800 	.word	0x40023800
 8000654:	40004400 	.word	0x40004400
 8000658:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f022 0208 	bic.w	r2, r2, #8
 800066a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f022 0204 	bic.w	r2, r2, #4
 800067a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800068a:	60da      	str	r2, [r3, #12]
		break;
 800068c:	bf00      	nop
	}
	}

	/* 2.6. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d007      	beq.n	80006a6 <USART_Config+0x27a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80006a4:	60da      	str	r2, [r3, #12]
	}
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <writeChar>:

/* Función para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80006be:	e000      	b.n	80006c2 <writeChar+0xe>
		__NOP();
 80006c0:	bf00      	nop
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0f7      	beq.n	80006c0 <writeChar+0xc>
	}
	// Escribimos el dataToSend en el Data Register
	ptrUsartHandler->ptrUSARTx->DR |= dataToSend;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6859      	ldr	r1, [r3, #4]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	430a      	orrs	r2, r1
 80006de:	605a      	str	r2, [r3, #4]
	return dataToSend;
 80006e0:	683b      	ldr	r3, [r7, #0]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <main>:
#include <stm32f4xx.h>
#include <stdint.h>
#include "GPIOxDriver.h"
#include "USARTxDriver.h"

int main(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0a6      	sub	sp, #152	; 0x98
 80006f4:	af00      	add	r7, sp, #0
	GPIO_Handler_t handlerTxPin 	= {0};
 80006f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
	USART_Handler_t handlerUsart2 	= {0};
 8000702:	463b      	mov	r3, r7
 8000704:	228c      	movs	r2, #140	; 0x8c
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f8c3 	bl	8000894 <memset>

	handlerTxPin.pGPIOx = GPIOA;
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <main+0x100>)
 8000710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	handlerTxPin.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 8000714:	2302      	movs	r3, #2
 8000716:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	handlerTxPin.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 800071a:	2302      	movs	r3, #2
 800071c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	handlerTxPin.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	handlerTxPin.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000726:	2300      	movs	r3, #0
 8000728:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	handlerTxPin.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 800072c:	2301      	movs	r3, #1
 800072e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	handlerTxPin.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000732:	2307      	movs	r3, #7
 8000734:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

	handlerUsart2.ptrUSARTx = USART2;
 8000738:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <main+0x104>)
 800073a:	603b      	str	r3, [r7, #0]
	handlerUsart2.USART_Config.USART_mode			= USART_MODE_TX;
 800073c:	2300      	movs	r3, #0
 800073e:	713b      	strb	r3, [r7, #4]
	handlerUsart2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8000740:	2302      	movs	r3, #2
 8000742:	717b      	strb	r3, [r7, #5]
	handlerUsart2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 8000744:	2300      	movs	r3, #0
 8000746:	71bb      	strb	r3, [r7, #6]
	handlerUsart2.USART_Config.USART_parity			= USART_PARITY_EVEN;
 8000748:	2302      	movs	r3, #2
 800074a:	71fb      	strb	r3, [r7, #7]
	handlerUsart2.USART_Config.USART_stopbits		= USART_STOPBIT_2;
 800074c:	2302      	movs	r3, #2
 800074e:	723b      	strb	r3, [r7, #8]

	GPIO_Config(&handlerTxPin);
 8000750:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd3f 	bl	80001d8 <GPIO_Config>
	USART_Config(&handlerUsart2);
 800075a:	463b      	mov	r3, r7
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe65 	bl	800042c <USART_Config>

	while(1){
		writeChar(&handlerUsart2, 'S');
 8000762:	463b      	mov	r3, r7
 8000764:	2153      	movs	r1, #83	; 0x53
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffa4 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'E');
 800076c:	463b      	mov	r3, r7
 800076e:	2145      	movs	r1, #69	; 0x45
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff9f 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'R');
 8000776:	463b      	mov	r3, r7
 8000778:	2152      	movs	r1, #82	; 0x52
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff9a 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, ' ');
 8000780:	463b      	mov	r3, r7
 8000782:	2120      	movs	r1, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff95 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'O');
 800078a:	463b      	mov	r3, r7
 800078c:	214f      	movs	r1, #79	; 0x4f
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff90 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, ' ');
 8000794:	463b      	mov	r3, r7
 8000796:	2120      	movs	r1, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff8b 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'N');
 800079e:	463b      	mov	r3, r7
 80007a0:	214e      	movs	r1, #78	; 0x4e
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff86 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'O');
 80007a8:	463b      	mov	r3, r7
 80007aa:	214f      	movs	r1, #79	; 0x4f
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff81 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, ' ');
 80007b2:	463b      	mov	r3, r7
 80007b4:	2120      	movs	r1, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff7c 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'S');
 80007bc:	463b      	mov	r3, r7
 80007be:	2153      	movs	r1, #83	; 0x53
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff77 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'E');
 80007c6:	463b      	mov	r3, r7
 80007c8:	2145      	movs	r1, #69	; 0x45
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff72 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'R');
 80007d0:	463b      	mov	r3, r7
 80007d2:	2152      	movs	r1, #82	; 0x52
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff6d 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, '\n');
 80007da:	463b      	mov	r3, r7
 80007dc:	210a      	movs	r1, #10
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff68 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, '\r');
 80007e4:	463b      	mov	r3, r7
 80007e6:	210d      	movs	r1, #13
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff63 	bl	80006b4 <writeChar>
		writeChar(&handlerUsart2, 'S');
 80007ee:	e7b8      	b.n	8000762 <main+0x72>
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40004400 	.word	0x40004400

080007f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000826:	f000 f811 	bl	800084c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff ff61 	bl	80006f0 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   r0, =_estack
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800083c:	080008c4 	.word	0x080008c4
  ldr r2, =_sbss
 8000840:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000844:	2000001c 	.word	0x2000001c

08000848 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <__libc_init_array>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	4d0d      	ldr	r5, [pc, #52]	; (8000884 <__libc_init_array+0x38>)
 8000850:	4c0d      	ldr	r4, [pc, #52]	; (8000888 <__libc_init_array+0x3c>)
 8000852:	1b64      	subs	r4, r4, r5
 8000854:	10a4      	asrs	r4, r4, #2
 8000856:	2600      	movs	r6, #0
 8000858:	42a6      	cmp	r6, r4
 800085a:	d109      	bne.n	8000870 <__libc_init_array+0x24>
 800085c:	4d0b      	ldr	r5, [pc, #44]	; (800088c <__libc_init_array+0x40>)
 800085e:	4c0c      	ldr	r4, [pc, #48]	; (8000890 <__libc_init_array+0x44>)
 8000860:	f000 f820 	bl	80008a4 <_init>
 8000864:	1b64      	subs	r4, r4, r5
 8000866:	10a4      	asrs	r4, r4, #2
 8000868:	2600      	movs	r6, #0
 800086a:	42a6      	cmp	r6, r4
 800086c:	d105      	bne.n	800087a <__libc_init_array+0x2e>
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f855 3b04 	ldr.w	r3, [r5], #4
 8000874:	4798      	blx	r3
 8000876:	3601      	adds	r6, #1
 8000878:	e7ee      	b.n	8000858 <__libc_init_array+0xc>
 800087a:	f855 3b04 	ldr.w	r3, [r5], #4
 800087e:	4798      	blx	r3
 8000880:	3601      	adds	r6, #1
 8000882:	e7f2      	b.n	800086a <__libc_init_array+0x1e>
 8000884:	080008bc 	.word	0x080008bc
 8000888:	080008bc 	.word	0x080008bc
 800088c:	080008bc 	.word	0x080008bc
 8000890:	080008c0 	.word	0x080008c0

08000894 <memset>:
 8000894:	4402      	add	r2, r0
 8000896:	4603      	mov	r3, r0
 8000898:	4293      	cmp	r3, r2
 800089a:	d100      	bne.n	800089e <memset+0xa>
 800089c:	4770      	bx	lr
 800089e:	f803 1b01 	strb.w	r1, [r3], #1
 80008a2:	e7f9      	b.n	8000898 <memset+0x4>

080008a4 <_init>:
 80008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a6:	bf00      	nop
 80008a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008aa:	bc08      	pop	{r3}
 80008ac:	469e      	mov	lr, r3
 80008ae:	4770      	bx	lr

080008b0 <_fini>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	bf00      	nop
 80008b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b6:	bc08      	pop	{r3}
 80008b8:	469e      	mov	lr, r3
 80008ba:	4770      	bx	lr
