
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa0  08001fa0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa0  08001fa0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa0  08001fa0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000064  0800200c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800200c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003153  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ac6  00000000  00000000  000231e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00023ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00023f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f637  00000000  00000000  000241d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003121  00000000  00000000  00033807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005515c  00000000  00000000  00036928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ba84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d28  00000000  00000000  0008bad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f44 	.word	0x08001f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001f44 	.word	0x08001f44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db12      	blt.n	80002b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	490a      	ldr	r1, [pc, #40]	; (80002c4 <__NVIC_DisableIRQ+0x44>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	3320      	adds	r3, #32
 80002a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ac:	f3bf 8f4f 	dsb	sy
}
 80002b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002b2:	f3bf 8f6f 	isb	sy
}
 80002b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <main>:
char			bufferData[20] = {0};

/* Definición de los prototipos de las funciones */
void initSystem(void);

int main(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	// Se inicializa la configuración
	initSystem();
 80002cc:	f000 f802 	bl	80002d4 <initSystem>
	while(1){
 80002d0:	e7fe      	b.n	80002d0 <main+0x8>
	...

080002d4 <initSystem>:

	}
	return 0;
}

void initSystem(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 80002d8:	4b4e      	ldr	r3, [pc, #312]	; (8000414 <initSystem+0x140>)
 80002da:	4a4f      	ldr	r2, [pc, #316]	; (8000418 <initSystem+0x144>)
 80002dc:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80002de:	4b4d      	ldr	r3, [pc, #308]	; (8000414 <initSystem+0x140>)
 80002e0:	2205      	movs	r2, #5
 80002e2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 80002e4:	4b4b      	ldr	r3, [pc, #300]	; (8000414 <initSystem+0x140>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 80002ea:	4b4a      	ldr	r3, [pc, #296]	; (8000414 <initSystem+0x140>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 80002f0:	4b48      	ldr	r3, [pc, #288]	; (8000414 <initSystem+0x140>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 80002f6:	4847      	ldr	r0, [pc, #284]	; (8000414 <initSystem+0x140>)
 80002f8:	f000 fd72 	bl	8000de0 <GPIO_Config>

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <initSystem+0x148>)
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000302:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000304:	4b45      	ldr	r3, [pc, #276]	; (800041c <initSystem+0x148>)
 8000306:	2201      	movs	r2, #1
 8000308:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_1ms;
 800030a:	4b44      	ldr	r3, [pc, #272]	; (800041c <initSystem+0x148>)
 800030c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000310:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 8000312:	4b42      	ldr	r3, [pc, #264]	; (800041c <initSystem+0x148>)
 8000314:	22fa      	movs	r2, #250	; 0xfa
 8000316:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 8000318:	4840      	ldr	r0, [pc, #256]	; (800041c <initSystem+0x148>)
 800031a:	f000 f973 	bl	8000604 <BTimer_Config>


	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM5;
 800031e:	4b3f      	ldr	r3, [pc, #252]	; (800041c <initSystem+0x148>)
 8000320:	4a3f      	ldr	r2, [pc, #252]	; (8000420 <initSystem+0x14c>)
 8000322:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000324:	4b3d      	ldr	r3, [pc, #244]	; (800041c <initSystem+0x148>)
 8000326:	2201      	movs	r2, #1
 8000328:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= 16-1;
 800032a:	4b3c      	ldr	r3, [pc, #240]	; (800041c <initSystem+0x148>)
 800032c:	220f      	movs	r2, #15
 800032e:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 4294967296 - 1;
 8000330:	4b3a      	ldr	r3, [pc, #232]	; (800041c <initSystem+0x148>)
 8000332:	f04f 32ff 	mov.w	r2, #4294967295
 8000336:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 8000338:	4838      	ldr	r0, [pc, #224]	; (800041c <initSystem+0x148>)
 800033a:	f000 f963 	bl	8000604 <BTimer_Config>
	//TIM5->DIER &= ~TIM_DIER_UIE;
	__NVIC_DisableIRQ(TIM5_IRQn);
 800033e:	2032      	movs	r0, #50	; 0x32
 8000340:	f7ff ff9e 	bl	8000280 <__NVIC_DisableIRQ>

	/* Configuración del EXTI10 */
	extiEmision.EXTIx			= EXTI10;
 8000344:	4b37      	ldr	r3, [pc, #220]	; (8000424 <initSystem+0x150>)
 8000346:	220a      	movs	r2, #10
 8000348:	701a      	strb	r2, [r3, #0]
	extiEmision.pinPort			= PC;
 800034a:	4b36      	ldr	r3, [pc, #216]	; (8000424 <initSystem+0x150>)
 800034c:	2202      	movs	r2, #2
 800034e:	705a      	strb	r2, [r3, #1]
	extiEmision.pinPUPD_Mode    = GPIO_PUPDR_PULLDOWN;
 8000350:	4b34      	ldr	r3, [pc, #208]	; (8000424 <initSystem+0x150>)
 8000352:	2202      	movs	r2, #2
 8000354:	709a      	strb	r2, [r3, #2]
	extiEmision.triggerMode		= RISING_TRIGGER;
 8000356:	4b33      	ldr	r3, [pc, #204]	; (8000424 <initSystem+0x150>)
 8000358:	2200      	movs	r2, #0
 800035a:	70da      	strb	r2, [r3, #3]
	// Se carga la configuración del EXTI
	exti_Config(&extiEmision);
 800035c:	4831      	ldr	r0, [pc, #196]	; (8000424 <initSystem+0x150>)
 800035e:	f000 fa73 	bl	8000848 <exti_Config>

	/* Configuración del EXTI10 */
	extiReception.EXTIx			= EXTI12;
 8000362:	4b31      	ldr	r3, [pc, #196]	; (8000428 <initSystem+0x154>)
 8000364:	220c      	movs	r2, #12
 8000366:	701a      	strb	r2, [r3, #0]
	extiReception.pinPort		= PC;
 8000368:	4b2f      	ldr	r3, [pc, #188]	; (8000428 <initSystem+0x154>)
 800036a:	2202      	movs	r2, #2
 800036c:	705a      	strb	r2, [r3, #1]
	extiReception.pinPUPD_Mode  = GPIO_PUPDR_PULLDOWN;
 800036e:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <initSystem+0x154>)
 8000370:	2202      	movs	r2, #2
 8000372:	709a      	strb	r2, [r3, #2]
	extiReception.triggerMode	= RISING_TRIGGER;
 8000374:	4b2c      	ldr	r3, [pc, #176]	; (8000428 <initSystem+0x154>)
 8000376:	2200      	movs	r2, #0
 8000378:	70da      	strb	r2, [r3, #3]
	// Se carga la configuración del EXTI
	exti_Config(&extiReception);
 800037a:	482b      	ldr	r0, [pc, #172]	; (8000428 <initSystem+0x154>)
 800037c:	f000 fa64 	bl	8000848 <exti_Config>

	/* Configuración del PIN que recibe la información por la USB */
	handlerRxPIN.pGPIOx								= GPIOA;
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <initSystem+0x158>)
 8000382:	4a25      	ldr	r2, [pc, #148]	; (8000418 <initSystem+0x144>)
 8000384:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000386:	4b29      	ldr	r3, [pc, #164]	; (800042c <initSystem+0x158>)
 8000388:	2203      	movs	r2, #3
 800038a:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 800038c:	4b27      	ldr	r3, [pc, #156]	; (800042c <initSystem+0x158>)
 800038e:	2202      	movs	r2, #2
 8000390:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <initSystem+0x158>)
 8000394:	2200      	movs	r2, #0
 8000396:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <initSystem+0x158>)
 800039a:	2200      	movs	r2, #0
 800039c:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <initSystem+0x158>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <initSystem+0x158>)
 80003a6:	2207      	movs	r2, #7
 80003a8:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 80003aa:	4820      	ldr	r0, [pc, #128]	; (800042c <initSystem+0x158>)
 80003ac:	f000 fd18 	bl	8000de0 <GPIO_Config>

	/* Configuración del PIN que envía la información por la USB (TX) */
	handlerTxPIN.pGPIOx								= GPIOA;
 80003b0:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <initSystem+0x15c>)
 80003b2:	4a19      	ldr	r2, [pc, #100]	; (8000418 <initSystem+0x144>)
 80003b4:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <initSystem+0x15c>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <initSystem+0x15c>)
 80003be:	2202      	movs	r2, #2
 80003c0:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003c2:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <initSystem+0x15c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80003c8:	4b19      	ldr	r3, [pc, #100]	; (8000430 <initSystem+0x15c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <initSystem+0x15c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <initSystem+0x15c>)
 80003d6:	2207      	movs	r2, #7
 80003d8:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 80003da:	4815      	ldr	r0, [pc, #84]	; (8000430 <initSystem+0x15c>)
 80003dc:	f000 fd00 	bl	8000de0 <GPIO_Config>

	/* Configuración del USART2 */
	handlerUSART2.ptrUSARTx							= USART2;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <initSystem+0x160>)
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <initSystem+0x164>)
 80003e4:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_mode			= USART_MODE_RXTX;
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <initSystem+0x160>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <initSystem+0x160>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <initSystem+0x160>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity			= USART_PARITY_NONE;
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <initSystem+0x160>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <initSystem+0x160>)
 8000400:	2200      	movs	r2, #0
 8000402:	721a      	strb	r2, [r3, #8]
	handlerUSART2.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <initSystem+0x160>)
 8000406:	2201      	movs	r2, #1
 8000408:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del USART
	USART_Config(&handlerUSART2);
 800040a:	480a      	ldr	r0, [pc, #40]	; (8000434 <initSystem+0x160>)
 800040c:	f000 fe7a 	bl	8001104 <USART_Config>


}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000080 	.word	0x20000080
 8000418:	40020000 	.word	0x40020000
 800041c:	2000008c 	.word	0x2000008c
 8000420:	40000c00 	.word	0x40000c00
 8000424:	20000150 	.word	0x20000150
 8000428:	20000160 	.word	0x20000160
 800042c:	20000138 	.word	0x20000138
 8000430:	20000144 	.word	0x20000144
 8000434:	200000ac 	.word	0x200000ac
 8000438:	40004400 	.word	0x40004400

0800043c <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <BTimer2_Callback+0x1c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <BTimer2_Callback+0x1c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f082 0220 	eor.w	r2, r2, #32
 800044e:	615a      	str	r2, [r3, #20]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	20000080 	.word	0x20000080

0800045c <Exti10_Callback>:

/* Implementación del Callback para el EXTI10 */
void Exti10_Callback(void){
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	timeStamp = handlerLightTimer.ptrTIMx->CNT;
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <Exti10_Callback+0x18>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000466:	4a04      	ldr	r2, [pc, #16]	; (8000478 <Exti10_Callback+0x1c>)
 8000468:	6013      	str	r3, [r2, #0]
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	2000009c 	.word	0x2000009c
 8000478:	20000170 	.word	0x20000170

0800047c <Exti12_Callback>:

/* Implementación del Callback para el EXTI10 */
void Exti12_Callback(void){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	sprintf(bufferData,"Time = %lu us\n", handlerLightTimer.ptrTIMx->CNT - timeStamp);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <Exti12_Callback+0x28>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <Exti12_Callback+0x2c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	461a      	mov	r2, r3
 800048e:	4907      	ldr	r1, [pc, #28]	; (80004ac <Exti12_Callback+0x30>)
 8000490:	4807      	ldr	r0, [pc, #28]	; (80004b0 <Exti12_Callback+0x34>)
 8000492:	f001 f8eb 	bl	800166c <siprintf>
	writeMsg(&handlerUSART2, bufferData);
 8000496:	4906      	ldr	r1, [pc, #24]	; (80004b0 <Exti12_Callback+0x34>)
 8000498:	4806      	ldr	r0, [pc, #24]	; (80004b4 <Exti12_Callback+0x38>)
 800049a:	f000 fffd 	bl	8001498 <writeMsg>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000009c 	.word	0x2000009c
 80004a8:	20000170 	.word	0x20000170
 80004ac:	08001f5c 	.word	0x08001f5c
 80004b0:	20000174 	.word	0x20000174
 80004b4:	200000ac 	.word	0x200000ac

080004b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <_sbrk+0x5c>)
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <_sbrk+0x60>)
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <_sbrk+0x64>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <_sbrk+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d207      	bcs.n	80004f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e8:	f001 f896 	bl	8001618 <__errno>
 80004ec:	4603      	mov	r3, r0
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	e009      	b.n	800050c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <_sbrk+0x64>)
 8000508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20020000 	.word	0x20020000
 8000518:	00000400 	.word	0x00000400
 800051c:	20000188 	.word	0x20000188
 8000520:	200001b0 	.word	0x200001b0

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f001 f867 	bl	8001624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff feb7 	bl	80002c8 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000568:	08001fa8 	.word	0x08001fa8
  ldr r2, =_sbss
 800056c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000570:	200001b0 	.word	0x200001b0

08000574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>
	...

08000578 <__NVIC_EnableIRQ>:
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	db0b      	blt.n	80005a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 021f 	and.w	r2, r3, #31
 8000590:	4906      	ldr	r1, [pc, #24]	; (80005ac <__NVIC_EnableIRQ+0x34>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	095b      	lsrs	r3, r3, #5
 8000598:	2001      	movs	r0, #1
 800059a:	fa00 f202 	lsl.w	r2, r0, r2
 800059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db0a      	blt.n	80005da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	490c      	ldr	r1, [pc, #48]	; (80005fc <__NVIC_SetPriority+0x4c>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	0112      	lsls	r2, r2, #4
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	440b      	add	r3, r1
 80005d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d8:	e00a      	b.n	80005f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4908      	ldr	r1, [pc, #32]	; (8000600 <__NVIC_SetPriority+0x50>)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	f003 030f 	and.w	r3, r3, #15
 80005e6:	3b04      	subs	r3, #4
 80005e8:	0112      	lsls	r2, r2, #4
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	440b      	add	r3, r1
 80005ee:	761a      	strb	r2, [r3, #24]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000e100 	.word	0xe000e100
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a53      	ldr	r2, [pc, #332]	; (8000760 <BTimer_Config+0x15c>)
 8000612:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000620:	d106      	bne.n	8000630 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000622:	4b50      	ldr	r3, [pc, #320]	; (8000764 <BTimer_Config+0x160>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	4a4f      	ldr	r2, [pc, #316]	; (8000764 <BTimer_Config+0x160>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6413      	str	r3, [r2, #64]	; 0x40
 800062e:	e022      	b.n	8000676 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a4c      	ldr	r2, [pc, #304]	; (8000768 <BTimer_Config+0x164>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800063a:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <BTimer_Config+0x160>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	4a49      	ldr	r2, [pc, #292]	; (8000764 <BTimer_Config+0x160>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6413      	str	r3, [r2, #64]	; 0x40
 8000646:	e016      	b.n	8000676 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a47      	ldr	r2, [pc, #284]	; (800076c <BTimer_Config+0x168>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000652:	4b44      	ldr	r3, [pc, #272]	; (8000764 <BTimer_Config+0x160>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a43      	ldr	r2, [pc, #268]	; (8000764 <BTimer_Config+0x160>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	e00a      	b.n	8000676 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a42      	ldr	r2, [pc, #264]	; (8000770 <BTimer_Config+0x16c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d105      	bne.n	8000676 <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <BTimer_Config+0x160>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a3d      	ldr	r2, [pc, #244]	; (8000764 <BTimer_Config+0x160>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10c      	bne.n	8000698 <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f022 0210 	bic.w	r2, r2, #16
 800068c:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
 8000696:	e00d      	b.n	80006b4 <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f042 0210 	orr.w	r2, r2, #16
 80006a6:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3a01      	subs	r2, #1
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	88db      	ldrh	r3, [r3, #6]
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3a01      	subs	r2, #1
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f042 0201 	orr.w	r2, r2, #1
 80006da:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f042 0201 	orr.w	r2, r2, #1
 80006ea:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f4:	d107      	bne.n	8000706 <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff ff3e 	bl	8000578 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 80006fc:	2103      	movs	r1, #3
 80006fe:	201c      	movs	r0, #28
 8000700:	f7ff ff56 	bl	80005b0 <__NVIC_SetPriority>
 8000704:	e025      	b.n	8000752 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <BTimer_Config+0x164>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d107      	bne.n	8000720 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000710:	201d      	movs	r0, #29
 8000712:	f7ff ff31 	bl	8000578 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8000716:	2103      	movs	r1, #3
 8000718:	201d      	movs	r0, #29
 800071a:	f7ff ff49 	bl	80005b0 <__NVIC_SetPriority>
 800071e:	e018      	b.n	8000752 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a11      	ldr	r2, [pc, #68]	; (800076c <BTimer_Config+0x168>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d107      	bne.n	800073a <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 800072a:	201e      	movs	r0, #30
 800072c:	f7ff ff24 	bl	8000578 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 1);
 8000730:	2101      	movs	r1, #1
 8000732:	201e      	movs	r0, #30
 8000734:	f7ff ff3c 	bl	80005b0 <__NVIC_SetPriority>
 8000738:	e00b      	b.n	8000752 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <BTimer_Config+0x16c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000744:	2032      	movs	r0, #50	; 0x32
 8000746:	f7ff ff17 	bl	8000578 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 800074a:	2104      	movs	r1, #4
 800074c:	2032      	movs	r0, #50	; 0x32
 800074e:	f7ff ff2f 	bl	80005b0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000752:	b662      	cpsie	i
}
 8000754:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000018c 	.word	0x2000018c
 8000764:	40023800 	.word	0x40023800
 8000768:	40000400 	.word	0x40000400
 800076c:	40000800 	.word	0x40000800
 8000770:	40000c00 	.word	0x40000c00

08000774 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	 __NOP();
 8000778:	bf00      	nop
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
	 __NOP();
 8000786:	bf00      	nop
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <BTimer5_Callback>:

__attribute__((weak)) void BTimer5_Callback(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	 __NOP();
 8000794:	bf00      	nop
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80007a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 80007b2:	f7ff fe43 	bl	800043c <BTimer2_Callback>

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <TIM3_IRQHandler+0x18>)
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <TIM3_IRQHandler+0x18>)
 80007c6:	f023 0301 	bic.w	r3, r3, #1
 80007ca:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 80007cc:	f7ff ffd2 	bl	8000774 <BTimer3_Callback>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40000400 	.word	0x40000400

080007d8 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <TIM4_IRQHandler+0x18>)
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <TIM4_IRQHandler+0x18>)
 80007e2:	f023 0301 	bic.w	r3, r3, #1
 80007e6:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 80007e8:	f7ff ffcb 	bl	8000782 <BTimer4_Callback>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40000800 	.word	0x40000800

080007f4 <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <TIM5_IRQHandler+0x18>)
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <TIM5_IRQHandler+0x18>)
 80007fe:	f023 0301 	bic.w	r3, r3, #1
 8000802:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 8000804:	f7ff ffc4 	bl	8000790 <BTimer5_Callback>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40000c00 	.word	0x40000c00

08000810 <__NVIC_EnableIRQ>:
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <__NVIC_EnableIRQ+0x34>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100

08000848 <exti_Config>:
#include "GPIOxDriver.h"


GPIO_Handler_t 	handlerExtiPIN = {0};

void exti_Config(EXTI_Config_t	*extiConfig){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	/* Se activa la señal de reloj para SYSCFG*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000850:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <exti_Config+0x1e8>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4a76      	ldr	r2, [pc, #472]	; (8000a30 <exti_Config+0x1e8>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Configuramos el PINX como entrada digital */
	configExtiPin(extiConfig);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 fa63 	bl	8000d28 <configExtiPin>


	/* Se conecta la entrada del PIN configurado al EXTI correspondiente */
	if (extiConfig->EXTIx <= EXTI3){
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d80e      	bhi.n	8000888 <exti_Config+0x40>
		SYSCFG->EXTICR[0] |= (extiConfig->pinPort << (extiConfig->EXTIx)*4);
 800086a:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <exti_Config+0x1ec>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	7852      	ldrb	r2, [r2, #1]
 8000872:	4611      	mov	r1, r2
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a6c      	ldr	r2, [pc, #432]	; (8000a34 <exti_Config+0x1ec>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6093      	str	r3, [r2, #8]
 8000886:	e046      	b.n	8000916 <exti_Config+0xce>
	}
	else if ((extiConfig->EXTIx >= EXTI4 && extiConfig->EXTIx <= EXTI7)){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d913      	bls.n	80008b8 <exti_Config+0x70>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b07      	cmp	r3, #7
 8000896:	d80f      	bhi.n	80008b8 <exti_Config+0x70>
		SYSCFG->EXTICR[1] |= (extiConfig->pinPort << (extiConfig->EXTIx-4)*4);
 8000898:	4b66      	ldr	r3, [pc, #408]	; (8000a34 <exti_Config+0x1ec>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	7852      	ldrb	r2, [r2, #1]
 80008a0:	4611      	mov	r1, r2
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	3a04      	subs	r2, #4
 80008a8:	0092      	lsls	r2, r2, #2
 80008aa:	fa01 f202 	lsl.w	r2, r1, r2
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a60      	ldr	r2, [pc, #384]	; (8000a34 <exti_Config+0x1ec>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	60d3      	str	r3, [r2, #12]
 80008b6:	e02e      	b.n	8000916 <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI8 && extiConfig->EXTIx <= EXTI11){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d913      	bls.n	80008e8 <exti_Config+0xa0>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b0b      	cmp	r3, #11
 80008c6:	d80f      	bhi.n	80008e8 <exti_Config+0xa0>
		SYSCFG->EXTICR[2] |= (extiConfig->pinPort << (extiConfig->EXTIx-8)*4);
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <exti_Config+0x1ec>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	7852      	ldrb	r2, [r2, #1]
 80008d0:	4611      	mov	r1, r2
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	3a08      	subs	r2, #8
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4a54      	ldr	r2, [pc, #336]	; (8000a34 <exti_Config+0x1ec>)
 80008e2:	430b      	orrs	r3, r1
 80008e4:	6113      	str	r3, [r2, #16]
 80008e6:	e016      	b.n	8000916 <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI12 && extiConfig->EXTIx <= EXTI15){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	d912      	bls.n	8000916 <exti_Config+0xce>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80e      	bhi.n	8000916 <exti_Config+0xce>
		SYSCFG->EXTICR[3] |= (extiConfig->pinPort << (extiConfig->EXTIx-12)*4);
 80008f8:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <exti_Config+0x1ec>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	7852      	ldrb	r2, [r2, #1]
 8000900:	4611      	mov	r1, r2
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	3a0c      	subs	r2, #12
 8000908:	0092      	lsls	r2, r2, #2
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4a48      	ldr	r2, [pc, #288]	; (8000a34 <exti_Config+0x1ec>)
 8000912:	430b      	orrs	r3, r1
 8000914:	6153      	str	r3, [r2, #20]
	}

	/* Configurar el tipo de flanco según el PIN utilizado*/
	switch(extiConfig->triggerMode){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	78db      	ldrb	r3, [r3, #3]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d01e      	beq.n	800095c <exti_Config+0x114>
 800091e:	2b02      	cmp	r3, #2
 8000920:	dc33      	bgt.n	800098a <exti_Config+0x142>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <exti_Config+0xe4>
 8000926:	2b01      	cmp	r3, #1
 8000928:	d00c      	beq.n	8000944 <exti_Config+0xfc>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
		break;
	}
	default:
	{
		break;
 800092a:	e02e      	b.n	800098a <exti_Config+0x142>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 800092c:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <exti_Config+0x1f0>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	2201      	movs	r2, #1
 8000938:	408a      	lsls	r2, r1
 800093a:	4611      	mov	r1, r2
 800093c:	4a3e      	ldr	r2, [pc, #248]	; (8000a38 <exti_Config+0x1f0>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6093      	str	r3, [r2, #8]
		break;
 8000942:	e023      	b.n	800098c <exti_Config+0x144>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 8000944:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <exti_Config+0x1f0>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	4611      	mov	r1, r2
 800094e:	2201      	movs	r2, #1
 8000950:	408a      	lsls	r2, r1
 8000952:	4611      	mov	r1, r2
 8000954:	4a38      	ldr	r2, [pc, #224]	; (8000a38 <exti_Config+0x1f0>)
 8000956:	430b      	orrs	r3, r1
 8000958:	60d3      	str	r3, [r2, #12]
		break;
 800095a:	e017      	b.n	800098c <exti_Config+0x144>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 800095c:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <exti_Config+0x1f0>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	7812      	ldrb	r2, [r2, #0]
 8000964:	4611      	mov	r1, r2
 8000966:	2201      	movs	r2, #1
 8000968:	408a      	lsls	r2, r1
 800096a:	4611      	mov	r1, r2
 800096c:	4a32      	ldr	r2, [pc, #200]	; (8000a38 <exti_Config+0x1f0>)
 800096e:	430b      	orrs	r3, r1
 8000970:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <exti_Config+0x1f0>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	4611      	mov	r1, r2
 800097c:	2201      	movs	r2, #1
 800097e:	408a      	lsls	r2, r1
 8000980:	4611      	mov	r1, r2
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <exti_Config+0x1f0>)
 8000984:	430b      	orrs	r3, r1
 8000986:	60d3      	str	r3, [r2, #12]
		break;
 8000988:	e000      	b.n	800098c <exti_Config+0x144>
		break;
 800098a:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
	}
	}

	__disable_irq();
	/* Se activa la interrupción para el EXTI configurado */
	EXTI->IMR |= (0b1 << extiConfig->EXTIx);
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <exti_Config+0x1f0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	4611      	mov	r1, r2
 800099a:	2201      	movs	r2, #1
 800099c:	408a      	lsls	r2, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	4a25      	ldr	r2, [pc, #148]	; (8000a38 <exti_Config+0x1f0>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]

	/* Se matricula la interrupción correspondiente en el NVIC */

	if (extiConfig->EXTIx == EXTI0){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <exti_Config+0x16e>
		__NVIC_EnableIRQ(EXTI0_IRQn);
 80009ae:	2006      	movs	r0, #6
 80009b0:	f7ff ff2e 	bl	8000810 <__NVIC_EnableIRQ>
 80009b4:	e036      	b.n	8000a24 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI1){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d103      	bne.n	80009c6 <exti_Config+0x17e>
		__NVIC_EnableIRQ(EXTI1_IRQn);
 80009be:	2007      	movs	r0, #7
 80009c0:	f7ff ff26 	bl	8000810 <__NVIC_EnableIRQ>
 80009c4:	e02e      	b.n	8000a24 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI2){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d103      	bne.n	80009d6 <exti_Config+0x18e>
		__NVIC_EnableIRQ(EXTI2_IRQn);
 80009ce:	2008      	movs	r0, #8
 80009d0:	f7ff ff1e 	bl	8000810 <__NVIC_EnableIRQ>
 80009d4:	e026      	b.n	8000a24 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI3){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d103      	bne.n	80009e6 <exti_Config+0x19e>
		__NVIC_EnableIRQ(EXTI3_IRQn);
 80009de:	2009      	movs	r0, #9
 80009e0:	f7ff ff16 	bl	8000810 <__NVIC_EnableIRQ>
 80009e4:	e01e      	b.n	8000a24 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI4){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d103      	bne.n	80009f6 <exti_Config+0x1ae>
		__NVIC_EnableIRQ(EXTI4_IRQn);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f7ff ff0e 	bl	8000810 <__NVIC_EnableIRQ>
 80009f4:	e016      	b.n	8000a24 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI5 && extiConfig->EXTIx <= EXTI9){
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d907      	bls.n	8000a0e <exti_Config+0x1c6>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b09      	cmp	r3, #9
 8000a04:	d803      	bhi.n	8000a0e <exti_Config+0x1c6>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a06:	2017      	movs	r0, #23
 8000a08:	f7ff ff02 	bl	8000810 <__NVIC_EnableIRQ>
 8000a0c:	e00a      	b.n	8000a24 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI10 && extiConfig->EXTIx <= EXTI15){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b09      	cmp	r3, #9
 8000a14:	d906      	bls.n	8000a24 <exti_Config+0x1dc>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d802      	bhi.n	8000a24 <exti_Config+0x1dc>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a1e:	2028      	movs	r0, #40	; 0x28
 8000a20:	f7ff fef6 	bl	8000810 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a24:	b662      	cpsie	i
}
 8000a26:	bf00      	nop

	/* Se reactican las interrupciones globales */
	__enable_irq();


}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40013c00 	.word	0x40013c00

08000a3c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0){
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <EXTI0_IRQHandler+0x24>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <EXTI0_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR0;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <EXTI0_IRQHandler+0x24>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <EXTI0_IRQHandler+0x24>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6153      	str	r3, [r2, #20]
		Exti0_Callback();
 8000a58:	f000 f904 	bl	8000c64 <Exti0_Callback>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40013c00 	.word	0x40013c00

08000a64 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1){
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <EXTI1_IRQHandler+0x24>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d007      	beq.n	8000a84 <EXTI1_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR1;
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <EXTI1_IRQHandler+0x24>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <EXTI1_IRQHandler+0x24>)
 8000a7a:	f043 0302 	orr.w	r3, r3, #2
 8000a7e:	6153      	str	r3, [r2, #20]
		Exti1_Callback();
 8000a80:	f000 f8f7 	bl	8000c72 <Exti1_Callback>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40013c00 	.word	0x40013c00

08000a8c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2){
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <EXTI2_IRQHandler+0x24>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d007      	beq.n	8000aac <EXTI2_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR2;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <EXTI2_IRQHandler+0x24>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <EXTI2_IRQHandler+0x24>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6153      	str	r3, [r2, #20]
		Exti2_Callback();
 8000aa8:	f000 f8ea 	bl	8000c80 <Exti2_Callback>
	}
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013c00 	.word	0x40013c00

08000ab4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR3){
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <EXTI3_IRQHandler+0x24>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d007      	beq.n	8000ad4 <EXTI3_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR3;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <EXTI3_IRQHandler+0x24>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <EXTI3_IRQHandler+0x24>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6153      	str	r3, [r2, #20]
		Exti3_Callback();
 8000ad0:	f000 f8dd 	bl	8000c8e <Exti3_Callback>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013c00 	.word	0x40013c00

08000adc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR4){
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <EXTI4_IRQHandler+0x24>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d007      	beq.n	8000afc <EXTI4_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR4;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <EXTI4_IRQHandler+0x24>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <EXTI4_IRQHandler+0x24>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6153      	str	r3, [r2, #20]
		Exti4_Callback();
 8000af8:	f000 f8d0 	bl	8000c9c <Exti4_Callback>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40013c00 	.word	0x40013c00

08000b04 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5){
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d008      	beq.n	8000b26 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR5;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b1a:	f043 0320 	orr.w	r3, r3, #32
 8000b1e:	6153      	str	r3, [r2, #20]
		Exti5_Callback();
 8000b20:	f000 f8c3 	bl	8000caa <Exti5_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR9){
		EXTI->PR |= EXTI_PR_PR9;
		Exti9_Callback();
	}
}
 8000b24:	e03a      	b.n	8000b9c <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR6){
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3c:	6153      	str	r3, [r2, #20]
		Exti6_Callback();
 8000b3e:	f000 f8bb 	bl	8000cb8 <Exti6_Callback>
}
 8000b42:	e02b      	b.n	8000b9c <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR7){
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d008      	beq.n	8000b62 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5a:	6153      	str	r3, [r2, #20]
		Exti7_Callback();
 8000b5c:	f000 f8b3 	bl	8000cc6 <Exti7_Callback>
}
 8000b60:	e01c      	b.n	8000b9c <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR8){
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d008      	beq.n	8000b80 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6153      	str	r3, [r2, #20]
		Exti8_Callback();
 8000b7a:	f000 f8ab 	bl	8000cd4 <Exti8_Callback>
}
 8000b7e:	e00d      	b.n	8000b9c <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR9){
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <EXTI9_5_IRQHandler+0x9c>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6153      	str	r3, [r2, #20]
		Exti9_Callback();
 8000b98:	f000 f8a3 	bl	8000ce2 <Exti9_Callback>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40013c00 	.word	0x40013c00

08000ba4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR10){
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d008      	beq.n	8000bc6 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR10;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6153      	str	r3, [r2, #20]
		Exti10_Callback();
 8000bc0:	f7ff fc4c 	bl	800045c <Exti10_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR15){
		EXTI->PR |= EXTI_PR_PR15;
		Exti15_Callback();
	}
}
 8000bc4:	e049      	b.n	8000c5a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR11){
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d008      	beq.n	8000be4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bdc:	6153      	str	r3, [r2, #20]
		Exti11_Callback();
 8000bde:	f000 f887 	bl	8000cf0 <Exti11_Callback>
}
 8000be2:	e03a      	b.n	8000c5a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR12){
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d008      	beq.n	8000c02 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfa:	6153      	str	r3, [r2, #20]
		Exti12_Callback();
 8000bfc:	f7ff fc3e 	bl	800047c <Exti12_Callback>
}
 8000c00:	e02b      	b.n	8000c5a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR13){
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d008      	beq.n	8000c20 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c18:	6153      	str	r3, [r2, #20]
		Exti13_Callback();
 8000c1a:	f000 f870 	bl	8000cfe <Exti13_Callback>
}
 8000c1e:	e01c      	b.n	8000c5a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR14){
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d008      	beq.n	8000c3e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c36:	6153      	str	r3, [r2, #20]
		Exti14_Callback();
 8000c38:	f000 f868 	bl	8000d0c <Exti14_Callback>
}
 8000c3c:	e00d      	b.n	8000c5a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR15){
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <EXTI15_10_IRQHandler+0xbc>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c54:	6153      	str	r3, [r2, #20]
		Exti15_Callback();
 8000c56:	f000 f860 	bl	8000d1a <Exti15_Callback>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40013c00 	.word	0x40013c00

08000c64 <Exti0_Callback>:


__attribute__ ((weak)) void Exti0_Callback(void){
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	__NOP();
 8000c68:	bf00      	nop
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <Exti1_Callback>:
__attribute__ ((weak)) void Exti1_Callback(void){
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
	__NOP();
 8000c76:	bf00      	nop
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <Exti2_Callback>:
__attribute__ ((weak)) void Exti2_Callback(void){
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	__NOP();
 8000c84:	bf00      	nop
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <Exti3_Callback>:
__attribute__ ((weak)) void Exti3_Callback(void){
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
	__NOP();
 8000c92:	bf00      	nop
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <Exti4_Callback>:
__attribute__ ((weak)) void Exti4_Callback(void){
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	__NOP();
 8000ca0:	bf00      	nop
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <Exti5_Callback>:
__attribute__ ((weak)) void Exti5_Callback(void){
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
	__NOP();
 8000cae:	bf00      	nop
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <Exti6_Callback>:
__attribute__ ((weak)) void Exti6_Callback(void){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	__NOP();
 8000cbc:	bf00      	nop
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <Exti7_Callback>:
__attribute__ ((weak)) void Exti7_Callback(void){
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
	__NOP();
 8000cca:	bf00      	nop
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <Exti8_Callback>:

__attribute__ ((weak)) void Exti8_Callback(void){
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	__NOP();
 8000cd8:	bf00      	nop
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <Exti9_Callback>:
__attribute__ ((weak)) void Exti9_Callback(void){
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
	__NOP();
 8000ce6:	bf00      	nop
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <Exti11_Callback>:
__attribute__ ((weak)) void Exti10_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti11_Callback(void){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	__NOP();
 8000cf4:	bf00      	nop
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <Exti13_Callback>:
__attribute__ ((weak)) void Exti12_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti13_Callback(void){
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
	__NOP();
 8000d02:	bf00      	nop
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <Exti14_Callback>:
__attribute__ ((weak)) void Exti14_Callback(void){
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	__NOP();
 8000d10:	bf00      	nop
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <Exti15_Callback>:
__attribute__ ((weak)) void Exti15_Callback(void){
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
	__NOP();
 8000d1e:	bf00      	nop
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <configExtiPin>:

void configExtiPin(EXTI_Config_t *extiConfig){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	switch (extiConfig->pinPort){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	2b07      	cmp	r3, #7
 8000d36:	d82b      	bhi.n	8000d90 <configExtiPin+0x68>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <configExtiPin+0x18>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d61 	.word	0x08000d61
 8000d44:	08000d69 	.word	0x08000d69
 8000d48:	08000d71 	.word	0x08000d71
 8000d4c:	08000d79 	.word	0x08000d79
 8000d50:	08000d81 	.word	0x08000d81
 8000d54:	08000d91 	.word	0x08000d91
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000d89 	.word	0x08000d89
	case PA:
	{
		handlerExtiPIN.pGPIOx = GPIOA;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <configExtiPin+0x9c>)
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <configExtiPin+0xa0>)
 8000d64:	601a      	str	r2, [r3, #0]
		break;
 8000d66:	e014      	b.n	8000d92 <configExtiPin+0x6a>
	}
	case PB:
	{
		handlerExtiPIN.pGPIOx = GPIOB;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <configExtiPin+0x9c>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <configExtiPin+0xa4>)
 8000d6c:	601a      	str	r2, [r3, #0]
		break;
 8000d6e:	e010      	b.n	8000d92 <configExtiPin+0x6a>
	}
	case PC:
	{
		handlerExtiPIN.pGPIOx = GPIOC;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <configExtiPin+0x9c>)
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <configExtiPin+0xa8>)
 8000d74:	601a      	str	r2, [r3, #0]
		break;
 8000d76:	e00c      	b.n	8000d92 <configExtiPin+0x6a>
	}
	case PD:
	{
		handlerExtiPIN.pGPIOx = GPIOD;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <configExtiPin+0x9c>)
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <configExtiPin+0xac>)
 8000d7c:	601a      	str	r2, [r3, #0]
		break;
 8000d7e:	e008      	b.n	8000d92 <configExtiPin+0x6a>
	}
	case PE:
	{
		handlerExtiPIN.pGPIOx = GPIOE;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <configExtiPin+0x9c>)
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <configExtiPin+0xb0>)
 8000d84:	601a      	str	r2, [r3, #0]
		break;
 8000d86:	e004      	b.n	8000d92 <configExtiPin+0x6a>
	}
	case PH:
	{
		handlerExtiPIN.pGPIOx = GPIOH;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <configExtiPin+0x9c>)
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <configExtiPin+0xb4>)
 8000d8c:	601a      	str	r2, [r3, #0]
		break;
 8000d8e:	e000      	b.n	8000d92 <configExtiPin+0x6a>
	}
	default:
	{
		break;
 8000d90:	bf00      	nop
	}
	}

	handlerExtiPIN.GPIO_PinConfig.GPIO_PinNumber 		= extiConfig->EXTIx;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <configExtiPin+0x9c>)
 8000d98:	711a      	strb	r2, [r3, #4]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <configExtiPin+0x9c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= extiConfig->pinPUPD_Mode;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	789a      	ldrb	r2, [r3, #2]
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <configExtiPin+0x9c>)
 8000da6:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerExtiPIN);
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <configExtiPin+0x9c>)
 8000daa:	f000 f819 	bl	8000de0 <GPIO_Config>
	extiConfig->handlerEXTIPin = handlerExtiPIN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <configExtiPin+0x9c>)
 8000db2:	3304      	adds	r3, #4
 8000db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000190 	.word	0x20000190
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40021c00 	.word	0x40021c00

08000de0 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a87      	ldr	r2, [pc, #540]	; (8001014 <GPIO_Config+0x234>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d106      	bne.n	8000e08 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000dfa:	4b87      	ldr	r3, [pc, #540]	; (8001018 <GPIO_Config+0x238>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a86      	ldr	r2, [pc, #536]	; (8001018 <GPIO_Config+0x238>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	e03a      	b.n	8000e7e <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a83      	ldr	r2, [pc, #524]	; (800101c <GPIO_Config+0x23c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d106      	bne.n	8000e20 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000e12:	4b81      	ldr	r3, [pc, #516]	; (8001018 <GPIO_Config+0x238>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a80      	ldr	r2, [pc, #512]	; (8001018 <GPIO_Config+0x238>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	e02e      	b.n	8000e7e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7e      	ldr	r2, [pc, #504]	; (8001020 <GPIO_Config+0x240>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d106      	bne.n	8000e38 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <GPIO_Config+0x238>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a7a      	ldr	r2, [pc, #488]	; (8001018 <GPIO_Config+0x238>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	e022      	b.n	8000e7e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a79      	ldr	r2, [pc, #484]	; (8001024 <GPIO_Config+0x244>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d106      	bne.n	8000e50 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000e42:	4b75      	ldr	r3, [pc, #468]	; (8001018 <GPIO_Config+0x238>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a74      	ldr	r2, [pc, #464]	; (8001018 <GPIO_Config+0x238>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	e016      	b.n	8000e7e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a74      	ldr	r2, [pc, #464]	; (8001028 <GPIO_Config+0x248>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d106      	bne.n	8000e68 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000e5a:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <GPIO_Config+0x238>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a6e      	ldr	r2, [pc, #440]	; (8001018 <GPIO_Config+0x238>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	e00a      	b.n	8000e7e <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a6f      	ldr	r2, [pc, #444]	; (800102c <GPIO_Config+0x24c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d105      	bne.n	8000e7e <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000e72:	4b69      	ldr	r3, [pc, #420]	; (8001018 <GPIO_Config+0x238>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a68      	ldr	r2, [pc, #416]	; (8001018 <GPIO_Config+0x238>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	795b      	ldrb	r3, [r3, #5]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	791b      	ldrb	r3, [r3, #4]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	400a      	ands	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7a1b      	ldrb	r3, [r3, #8]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2301      	movs	r3, #1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6859      	ldr	r1, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	799b      	ldrb	r3, [r3, #6]
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	791b      	ldrb	r3, [r3, #4]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2103      	movs	r1, #3
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	400a      	ands	r2, r1
 8000f28:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6899      	ldr	r1, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2103      	movs	r1, #3
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	400a      	ands	r2, r1
 8000f68:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68d9      	ldr	r1, [r3, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	795b      	ldrb	r3, [r3, #5]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d143      	bne.n	800100a <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	791b      	ldrb	r3, [r3, #4]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d81f      	bhi.n	8000fca <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	210f      	movs	r1, #15
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7a5b      	ldrb	r3, [r3, #9]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000fc8:	e01f      	b.n	800100a <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	3b08      	subs	r3, #8
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fda:	210f      	movs	r1, #15
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	400a      	ands	r2, r1
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a5b      	ldrb	r3, [r3, #9]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4619      	mov	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40020000 	.word	0x40020000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021c00 	.word	0x40021c00

08001030 <__NVIC_EnableIRQ>:
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4906      	ldr	r1, [pc, #24]	; (8001064 <__NVIC_EnableIRQ+0x34>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_DisableIRQ>:
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db12      	blt.n	80010a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	490a      	ldr	r1, [pc, #40]	; (80010ac <__NVIC_DisableIRQ+0x44>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	3320      	adds	r3, #32
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001094:	f3bf 8f4f 	dsb	sy
}
 8001098:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800109a:	f3bf 8f6f 	isb	sy
}
 800109e:	bf00      	nop
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a88      	ldr	r2, [pc, #544]	; (8001334 <USART_Config+0x230>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d106      	bne.n	8001124 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8001116:	4b88      	ldr	r3, [pc, #544]	; (8001338 <USART_Config+0x234>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a87      	ldr	r2, [pc, #540]	; (8001338 <USART_Config+0x234>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	e016      	b.n	8001152 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a84      	ldr	r2, [pc, #528]	; (800133c <USART_Config+0x238>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d106      	bne.n	800113c <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <USART_Config+0x234>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a81      	ldr	r2, [pc, #516]	; (8001338 <USART_Config+0x234>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	e00a      	b.n	8001152 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a7f      	ldr	r2, [pc, #508]	; (8001340 <USART_Config+0x23c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d105      	bne.n	8001152 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8001146:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <USART_Config+0x234>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a7b      	ldr	r2, [pc, #492]	; (8001338 <USART_Config+0x234>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	79db      	ldrb	r3, [r3, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d023      	beq.n	80011b2 <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001178:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	79db      	ldrb	r3, [r3, #7]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d10b      	bne.n	800119a <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001190:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	719a      	strb	r2, [r3, #6]
 8001198:	e013      	b.n	80011c2 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011a8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	719a      	strb	r2, [r3, #6]
 80011b0:	e007      	b.n	80011c2 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c0:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	799b      	ldrb	r3, [r3, #6]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d108      	bne.n	80011dc <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	e007      	b.n	80011ec <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ea:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d82f      	bhi.n	8001254 <USART_Config+0x150>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <USART_Config+0xf8>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	0800121f 	.word	0x0800121f
 8001204:	08001231 	.word	0x08001231
 8001208:	08001243 	.word	0x08001243
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800121a:	611a      	str	r2, [r3, #16]
		break;
 800121c:	e01a      	b.n	8001254 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800122c:	611a      	str	r2, [r3, #16]
		break;
 800122e:	e011      	b.n	8001254 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800123e:	611a      	str	r2, [r3, #16]
		break;
 8001240:	e008      	b.n	8001254 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001250:	611a      	str	r2, [r3, #16]
		break;
 8001252:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	795b      	ldrb	r3, [r3, #5]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f240 6283 	movw	r2, #1667	; 0x683
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	e01a      	b.n	800129e <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	795b      	ldrb	r3, [r3, #5]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f240 3241 	movw	r2, #833	; 0x341
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	e010      	b.n	800129e <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	795b      	ldrb	r3, [r3, #5]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d104      	bne.n	800128e <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	228b      	movs	r2, #139	; 0x8b
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e007      	b.n	800129e <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	795b      	ldrb	r3, [r3, #5]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d103      	bne.n	800129e <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2211      	movs	r2, #17
 800129c:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d84e      	bhi.n	8001344 <USART_Config+0x240>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <USART_Config+0x1a8>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012cf 	.word	0x080012cf
 80012b4:	080012e1 	.word	0x080012e1
 80012b8:	08001303 	.word	0x08001303
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0208 	orr.w	r2, r2, #8
 80012ca:	60da      	str	r2, [r3, #12]
		break;
 80012cc:	e053      	b.n	8001376 <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0204 	orr.w	r2, r2, #4
 80012dc:	60da      	str	r2, [r3, #12]
		break;
 80012de:	e04a      	b.n	8001376 <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0208 	orr.w	r2, r2, #8
 80012ee:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0204 	orr.w	r2, r2, #4
 80012fe:	60da      	str	r2, [r3, #12]
		break;
 8001300:	e039      	b.n	8001376 <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0208 	bic.w	r2, r2, #8
 8001310:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0204 	bic.w	r2, r2, #4
 8001320:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001330:	60da      	str	r2, [r3, #12]
		break;
 8001332:	e020      	b.n	8001376 <USART_Config+0x272>
 8001334:	40011000 	.word	0x40011000
 8001338:	40023800 	.word	0x40023800
 800133c:	40004400 	.word	0x40004400
 8001340:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0208 	bic.w	r2, r2, #8
 8001352:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0204 	bic.w	r2, r2, #4
 8001362:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001372:	60da      	str	r2, [r3, #12]
		break;
 8001374:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d007      	beq.n	800138e <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800138c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800138e:	b672      	cpsid	i
}
 8001390:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a0:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7a5b      	ldrb	r3, [r3, #9]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d022      	beq.n	80013f0 <USART_Config+0x2ec>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <USART_Config+0x32c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d107      	bne.n	80013c4 <USART_Config+0x2c0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80013b4:	2025      	movs	r0, #37	; 0x25
 80013b6:	f7ff fe3b 	bl	8001030 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART1_IRQn, 1);
 80013ba:	2101      	movs	r1, #1
 80013bc:	2025      	movs	r0, #37	; 0x25
 80013be:	f7ff fe77 	bl	80010b0 <__NVIC_SetPriority>
 80013c2:	e01e      	b.n	8001402 <USART_Config+0x2fe>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <USART_Config+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d107      	bne.n	80013de <USART_Config+0x2da>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80013ce:	2026      	movs	r0, #38	; 0x26
 80013d0:	f7ff fe2e 	bl	8001030 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART2_IRQn, 2);
 80013d4:	2102      	movs	r1, #2
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f7ff fe6a 	bl	80010b0 <__NVIC_SetPriority>
 80013dc:	e011      	b.n	8001402 <USART_Config+0x2fe>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <USART_Config+0x334>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d10c      	bne.n	8001402 <USART_Config+0x2fe>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80013e8:	2047      	movs	r0, #71	; 0x47
 80013ea:	f7ff fe21 	bl	8001030 <__NVIC_EnableIRQ>
 80013ee:	e008      	b.n	8001402 <USART_Config+0x2fe>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 80013f0:	2025      	movs	r0, #37	; 0x25
 80013f2:	f7ff fe39 	bl	8001068 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 80013f6:	2026      	movs	r0, #38	; 0x26
 80013f8:	f7ff fe36 	bl	8001068 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 80013fc:	2047      	movs	r0, #71	; 0x47
 80013fe:	f7ff fe33 	bl	8001068 <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a5b      	ldrb	r3, [r3, #9]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d003      	beq.n	8001412 <USART_Config+0x30e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7a5b      	ldrb	r3, [r3, #9]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d107      	bne.n	8001422 <USART_Config+0x31e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001422:	b662      	cpsie	i
}
 8001424:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40011000 	.word	0x40011000
 8001434:	40004400 	.word	0x40004400
 8001438:	40011400 	.word	0x40011400

0800143c <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7a5b      	ldrb	r3, [r3, #9]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <writeChar+0x1c>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7a5b      	ldrb	r3, [r3, #9]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d10c      	bne.n	8001472 <writeChar+0x36>
		auxDataToSend = dataToSend;
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <writeChar+0x58>)
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	e00c      	b.n	800148a <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 8001470:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f7      	beq.n	8001470 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	605a      	str	r2, [r3, #4]
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	2000019d 	.word	0x2000019d

08001498 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80014a2:	e008      	b.n	80014b6 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffc6 	bl	800143c <writeChar>
		msgToSend++;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f2      	bne.n	80014a4 <writeMsg+0xc>
	}
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	 __NOP();
 80014cc:	bf00      	nop
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <Usart2_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
	 __NOP();
 80014da:	bf00      	nop
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	 __NOP();
 80014e8:	bf00      	nop
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
	 __NOP();
 80014f6:	bf00      	nop
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <Usart2_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	 __NOP();
 8001504:	bf00      	nop
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <Usart6_RX_Callback>:

__attribute__((weak)) void Usart6_RX_Callback(void){
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
	 __NOP();
 8001512:	bf00      	nop
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <USART1_IRQHandler+0x48>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <USART1_IRQHandler+0x48>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <USART1_IRQHandler+0x4c>)
 8001534:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 8001536:	f7ff ffdc 	bl	80014f2 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 800153a:	e011      	b.n	8001560 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <USART1_IRQHandler+0x48>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <USART1_IRQHandler+0x50>)
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <USART1_IRQHandler+0x48>)
 800154e:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <USART1_IRQHandler+0x48>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <USART1_IRQHandler+0x48>)
 8001556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800155a:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 800155c:	f7ff ffb4 	bl	80014c8 <Usart1_TX_Callback>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40011000 	.word	0x40011000
 8001568:	2000019c 	.word	0x2000019c
 800156c:	2000019d 	.word	0x2000019d

08001570 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <USART2_IRQHandler+0x48>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <USART2_IRQHandler+0x48>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <USART2_IRQHandler+0x4c>)
 8001588:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 800158a:	f7ff ffb9 	bl	8001500 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 800158e:	e011      	b.n	80015b4 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <USART2_IRQHandler+0x48>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00b      	beq.n	80015b4 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <USART2_IRQHandler+0x50>)
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <USART2_IRQHandler+0x48>)
 80015a2:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <USART2_IRQHandler+0x48>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <USART2_IRQHandler+0x48>)
 80015aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ae:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80015b0:	f7ff ff91 	bl	80014d6 <Usart2_TX_Callback>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40004400 	.word	0x40004400
 80015bc:	2000019c 	.word	0x2000019c
 80015c0:	2000019d 	.word	0x2000019d

080015c4 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <USART6_IRQHandler+0x48>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <USART6_IRQHandler+0x48>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <USART6_IRQHandler+0x4c>)
 80015dc:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 80015de:	f7ff ff96 	bl	800150e <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 80015e2:	e011      	b.n	8001608 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <USART6_IRQHandler+0x48>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <USART6_IRQHandler+0x50>)
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <USART6_IRQHandler+0x48>)
 80015f6:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <USART6_IRQHandler+0x48>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <USART6_IRQHandler+0x48>)
 80015fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001602:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8001604:	f7ff ff6e 	bl	80014e4 <Usart6_TX_Callback>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40011400 	.word	0x40011400
 8001610:	2000019c 	.word	0x2000019c
 8001614:	2000019d 	.word	0x2000019d

08001618 <__errno>:
 8001618:	4b01      	ldr	r3, [pc, #4]	; (8001620 <__errno+0x8>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000

08001624 <__libc_init_array>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	4d0d      	ldr	r5, [pc, #52]	; (800165c <__libc_init_array+0x38>)
 8001628:	4c0d      	ldr	r4, [pc, #52]	; (8001660 <__libc_init_array+0x3c>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	2600      	movs	r6, #0
 8001630:	42a6      	cmp	r6, r4
 8001632:	d109      	bne.n	8001648 <__libc_init_array+0x24>
 8001634:	4d0b      	ldr	r5, [pc, #44]	; (8001664 <__libc_init_array+0x40>)
 8001636:	4c0c      	ldr	r4, [pc, #48]	; (8001668 <__libc_init_array+0x44>)
 8001638:	f000 fc84 	bl	8001f44 <_init>
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	2600      	movs	r6, #0
 8001642:	42a6      	cmp	r6, r4
 8001644:	d105      	bne.n	8001652 <__libc_init_array+0x2e>
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	f855 3b04 	ldr.w	r3, [r5], #4
 800164c:	4798      	blx	r3
 800164e:	3601      	adds	r6, #1
 8001650:	e7ee      	b.n	8001630 <__libc_init_array+0xc>
 8001652:	f855 3b04 	ldr.w	r3, [r5], #4
 8001656:	4798      	blx	r3
 8001658:	3601      	adds	r6, #1
 800165a:	e7f2      	b.n	8001642 <__libc_init_array+0x1e>
 800165c:	08001fa0 	.word	0x08001fa0
 8001660:	08001fa0 	.word	0x08001fa0
 8001664:	08001fa0 	.word	0x08001fa0
 8001668:	08001fa4 	.word	0x08001fa4

0800166c <siprintf>:
 800166c:	b40e      	push	{r1, r2, r3}
 800166e:	b500      	push	{lr}
 8001670:	b09c      	sub	sp, #112	; 0x70
 8001672:	ab1d      	add	r3, sp, #116	; 0x74
 8001674:	9002      	str	r0, [sp, #8]
 8001676:	9006      	str	r0, [sp, #24]
 8001678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <siprintf+0x38>)
 800167e:	9107      	str	r1, [sp, #28]
 8001680:	9104      	str	r1, [sp, #16]
 8001682:	4909      	ldr	r1, [pc, #36]	; (80016a8 <siprintf+0x3c>)
 8001684:	f853 2b04 	ldr.w	r2, [r3], #4
 8001688:	9105      	str	r1, [sp, #20]
 800168a:	6800      	ldr	r0, [r0, #0]
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	a902      	add	r1, sp, #8
 8001690:	f000 f868 	bl	8001764 <_svfiprintf_r>
 8001694:	9b02      	ldr	r3, [sp, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	b01c      	add	sp, #112	; 0x70
 800169c:	f85d eb04 	ldr.w	lr, [sp], #4
 80016a0:	b003      	add	sp, #12
 80016a2:	4770      	bx	lr
 80016a4:	20000000 	.word	0x20000000
 80016a8:	ffff0208 	.word	0xffff0208

080016ac <__ssputs_r>:
 80016ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016b0:	688e      	ldr	r6, [r1, #8]
 80016b2:	429e      	cmp	r6, r3
 80016b4:	4682      	mov	sl, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	4690      	mov	r8, r2
 80016ba:	461f      	mov	r7, r3
 80016bc:	d838      	bhi.n	8001730 <__ssputs_r+0x84>
 80016be:	898a      	ldrh	r2, [r1, #12]
 80016c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80016c4:	d032      	beq.n	800172c <__ssputs_r+0x80>
 80016c6:	6825      	ldr	r5, [r4, #0]
 80016c8:	6909      	ldr	r1, [r1, #16]
 80016ca:	eba5 0901 	sub.w	r9, r5, r1
 80016ce:	6965      	ldr	r5, [r4, #20]
 80016d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016d8:	3301      	adds	r3, #1
 80016da:	444b      	add	r3, r9
 80016dc:	106d      	asrs	r5, r5, #1
 80016de:	429d      	cmp	r5, r3
 80016e0:	bf38      	it	cc
 80016e2:	461d      	movcc	r5, r3
 80016e4:	0553      	lsls	r3, r2, #21
 80016e6:	d531      	bpl.n	800174c <__ssputs_r+0xa0>
 80016e8:	4629      	mov	r1, r5
 80016ea:	f000 fb61 	bl	8001db0 <_malloc_r>
 80016ee:	4606      	mov	r6, r0
 80016f0:	b950      	cbnz	r0, 8001708 <__ssputs_r+0x5c>
 80016f2:	230c      	movs	r3, #12
 80016f4:	f8ca 3000 	str.w	r3, [sl]
 80016f8:	89a3      	ldrh	r3, [r4, #12]
 80016fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fe:	81a3      	strh	r3, [r4, #12]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001708:	6921      	ldr	r1, [r4, #16]
 800170a:	464a      	mov	r2, r9
 800170c:	f000 fabe 	bl	8001c8c <memcpy>
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	81a3      	strh	r3, [r4, #12]
 800171c:	6126      	str	r6, [r4, #16]
 800171e:	6165      	str	r5, [r4, #20]
 8001720:	444e      	add	r6, r9
 8001722:	eba5 0509 	sub.w	r5, r5, r9
 8001726:	6026      	str	r6, [r4, #0]
 8001728:	60a5      	str	r5, [r4, #8]
 800172a:	463e      	mov	r6, r7
 800172c:	42be      	cmp	r6, r7
 800172e:	d900      	bls.n	8001732 <__ssputs_r+0x86>
 8001730:	463e      	mov	r6, r7
 8001732:	6820      	ldr	r0, [r4, #0]
 8001734:	4632      	mov	r2, r6
 8001736:	4641      	mov	r1, r8
 8001738:	f000 fab6 	bl	8001ca8 <memmove>
 800173c:	68a3      	ldr	r3, [r4, #8]
 800173e:	1b9b      	subs	r3, r3, r6
 8001740:	60a3      	str	r3, [r4, #8]
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	4433      	add	r3, r6
 8001746:	6023      	str	r3, [r4, #0]
 8001748:	2000      	movs	r0, #0
 800174a:	e7db      	b.n	8001704 <__ssputs_r+0x58>
 800174c:	462a      	mov	r2, r5
 800174e:	f000 fba3 	bl	8001e98 <_realloc_r>
 8001752:	4606      	mov	r6, r0
 8001754:	2800      	cmp	r0, #0
 8001756:	d1e1      	bne.n	800171c <__ssputs_r+0x70>
 8001758:	6921      	ldr	r1, [r4, #16]
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fabe 	bl	8001cdc <_free_r>
 8001760:	e7c7      	b.n	80016f2 <__ssputs_r+0x46>
	...

08001764 <_svfiprintf_r>:
 8001764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001768:	4698      	mov	r8, r3
 800176a:	898b      	ldrh	r3, [r1, #12]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	b09d      	sub	sp, #116	; 0x74
 8001770:	4607      	mov	r7, r0
 8001772:	460d      	mov	r5, r1
 8001774:	4614      	mov	r4, r2
 8001776:	d50e      	bpl.n	8001796 <_svfiprintf_r+0x32>
 8001778:	690b      	ldr	r3, [r1, #16]
 800177a:	b963      	cbnz	r3, 8001796 <_svfiprintf_r+0x32>
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	f000 fb17 	bl	8001db0 <_malloc_r>
 8001782:	6028      	str	r0, [r5, #0]
 8001784:	6128      	str	r0, [r5, #16]
 8001786:	b920      	cbnz	r0, 8001792 <_svfiprintf_r+0x2e>
 8001788:	230c      	movs	r3, #12
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	e0d1      	b.n	8001936 <_svfiprintf_r+0x1d2>
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	616b      	str	r3, [r5, #20]
 8001796:	2300      	movs	r3, #0
 8001798:	9309      	str	r3, [sp, #36]	; 0x24
 800179a:	2320      	movs	r3, #32
 800179c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80017a4:	2330      	movs	r3, #48	; 0x30
 80017a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001950 <_svfiprintf_r+0x1ec>
 80017aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017ae:	f04f 0901 	mov.w	r9, #1
 80017b2:	4623      	mov	r3, r4
 80017b4:	469a      	mov	sl, r3
 80017b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017ba:	b10a      	cbz	r2, 80017c0 <_svfiprintf_r+0x5c>
 80017bc:	2a25      	cmp	r2, #37	; 0x25
 80017be:	d1f9      	bne.n	80017b4 <_svfiprintf_r+0x50>
 80017c0:	ebba 0b04 	subs.w	fp, sl, r4
 80017c4:	d00b      	beq.n	80017de <_svfiprintf_r+0x7a>
 80017c6:	465b      	mov	r3, fp
 80017c8:	4622      	mov	r2, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	4638      	mov	r0, r7
 80017ce:	f7ff ff6d 	bl	80016ac <__ssputs_r>
 80017d2:	3001      	adds	r0, #1
 80017d4:	f000 80aa 	beq.w	800192c <_svfiprintf_r+0x1c8>
 80017d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017da:	445a      	add	r2, fp
 80017dc:	9209      	str	r2, [sp, #36]	; 0x24
 80017de:	f89a 3000 	ldrb.w	r3, [sl]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a2 	beq.w	800192c <_svfiprintf_r+0x1c8>
 80017e8:	2300      	movs	r3, #0
 80017ea:	f04f 32ff 	mov.w	r2, #4294967295
 80017ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017f2:	f10a 0a01 	add.w	sl, sl, #1
 80017f6:	9304      	str	r3, [sp, #16]
 80017f8:	9307      	str	r3, [sp, #28]
 80017fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017fe:	931a      	str	r3, [sp, #104]	; 0x68
 8001800:	4654      	mov	r4, sl
 8001802:	2205      	movs	r2, #5
 8001804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001808:	4851      	ldr	r0, [pc, #324]	; (8001950 <_svfiprintf_r+0x1ec>)
 800180a:	f7fe fce9 	bl	80001e0 <memchr>
 800180e:	9a04      	ldr	r2, [sp, #16]
 8001810:	b9d8      	cbnz	r0, 800184a <_svfiprintf_r+0xe6>
 8001812:	06d0      	lsls	r0, r2, #27
 8001814:	bf44      	itt	mi
 8001816:	2320      	movmi	r3, #32
 8001818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800181c:	0711      	lsls	r1, r2, #28
 800181e:	bf44      	itt	mi
 8001820:	232b      	movmi	r3, #43	; 0x2b
 8001822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001826:	f89a 3000 	ldrb.w	r3, [sl]
 800182a:	2b2a      	cmp	r3, #42	; 0x2a
 800182c:	d015      	beq.n	800185a <_svfiprintf_r+0xf6>
 800182e:	9a07      	ldr	r2, [sp, #28]
 8001830:	4654      	mov	r4, sl
 8001832:	2000      	movs	r0, #0
 8001834:	f04f 0c0a 	mov.w	ip, #10
 8001838:	4621      	mov	r1, r4
 800183a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800183e:	3b30      	subs	r3, #48	; 0x30
 8001840:	2b09      	cmp	r3, #9
 8001842:	d94e      	bls.n	80018e2 <_svfiprintf_r+0x17e>
 8001844:	b1b0      	cbz	r0, 8001874 <_svfiprintf_r+0x110>
 8001846:	9207      	str	r2, [sp, #28]
 8001848:	e014      	b.n	8001874 <_svfiprintf_r+0x110>
 800184a:	eba0 0308 	sub.w	r3, r0, r8
 800184e:	fa09 f303 	lsl.w	r3, r9, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	9304      	str	r3, [sp, #16]
 8001856:	46a2      	mov	sl, r4
 8001858:	e7d2      	b.n	8001800 <_svfiprintf_r+0x9c>
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	1d19      	adds	r1, r3, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	9103      	str	r1, [sp, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	bfbb      	ittet	lt
 8001866:	425b      	neglt	r3, r3
 8001868:	f042 0202 	orrlt.w	r2, r2, #2
 800186c:	9307      	strge	r3, [sp, #28]
 800186e:	9307      	strlt	r3, [sp, #28]
 8001870:	bfb8      	it	lt
 8001872:	9204      	strlt	r2, [sp, #16]
 8001874:	7823      	ldrb	r3, [r4, #0]
 8001876:	2b2e      	cmp	r3, #46	; 0x2e
 8001878:	d10c      	bne.n	8001894 <_svfiprintf_r+0x130>
 800187a:	7863      	ldrb	r3, [r4, #1]
 800187c:	2b2a      	cmp	r3, #42	; 0x2a
 800187e:	d135      	bne.n	80018ec <_svfiprintf_r+0x188>
 8001880:	9b03      	ldr	r3, [sp, #12]
 8001882:	1d1a      	adds	r2, r3, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	9203      	str	r2, [sp, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfb8      	it	lt
 800188c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001890:	3402      	adds	r4, #2
 8001892:	9305      	str	r3, [sp, #20]
 8001894:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001954 <_svfiprintf_r+0x1f0>
 8001898:	7821      	ldrb	r1, [r4, #0]
 800189a:	2203      	movs	r2, #3
 800189c:	4650      	mov	r0, sl
 800189e:	f7fe fc9f 	bl	80001e0 <memchr>
 80018a2:	b140      	cbz	r0, 80018b6 <_svfiprintf_r+0x152>
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	eba0 000a 	sub.w	r0, r0, sl
 80018aa:	fa03 f000 	lsl.w	r0, r3, r0
 80018ae:	9b04      	ldr	r3, [sp, #16]
 80018b0:	4303      	orrs	r3, r0
 80018b2:	3401      	adds	r4, #1
 80018b4:	9304      	str	r3, [sp, #16]
 80018b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ba:	4827      	ldr	r0, [pc, #156]	; (8001958 <_svfiprintf_r+0x1f4>)
 80018bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018c0:	2206      	movs	r2, #6
 80018c2:	f7fe fc8d 	bl	80001e0 <memchr>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d038      	beq.n	800193c <_svfiprintf_r+0x1d8>
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <_svfiprintf_r+0x1f8>)
 80018cc:	bb1b      	cbnz	r3, 8001916 <_svfiprintf_r+0x1b2>
 80018ce:	9b03      	ldr	r3, [sp, #12]
 80018d0:	3307      	adds	r3, #7
 80018d2:	f023 0307 	bic.w	r3, r3, #7
 80018d6:	3308      	adds	r3, #8
 80018d8:	9303      	str	r3, [sp, #12]
 80018da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018dc:	4433      	add	r3, r6
 80018de:	9309      	str	r3, [sp, #36]	; 0x24
 80018e0:	e767      	b.n	80017b2 <_svfiprintf_r+0x4e>
 80018e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80018e6:	460c      	mov	r4, r1
 80018e8:	2001      	movs	r0, #1
 80018ea:	e7a5      	b.n	8001838 <_svfiprintf_r+0xd4>
 80018ec:	2300      	movs	r3, #0
 80018ee:	3401      	adds	r4, #1
 80018f0:	9305      	str	r3, [sp, #20]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 0c0a 	mov.w	ip, #10
 80018f8:	4620      	mov	r0, r4
 80018fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018fe:	3a30      	subs	r2, #48	; 0x30
 8001900:	2a09      	cmp	r2, #9
 8001902:	d903      	bls.n	800190c <_svfiprintf_r+0x1a8>
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0c5      	beq.n	8001894 <_svfiprintf_r+0x130>
 8001908:	9105      	str	r1, [sp, #20]
 800190a:	e7c3      	b.n	8001894 <_svfiprintf_r+0x130>
 800190c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001910:	4604      	mov	r4, r0
 8001912:	2301      	movs	r3, #1
 8001914:	e7f0      	b.n	80018f8 <_svfiprintf_r+0x194>
 8001916:	ab03      	add	r3, sp, #12
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	462a      	mov	r2, r5
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_svfiprintf_r+0x1fc>)
 800191e:	a904      	add	r1, sp, #16
 8001920:	4638      	mov	r0, r7
 8001922:	f3af 8000 	nop.w
 8001926:	1c42      	adds	r2, r0, #1
 8001928:	4606      	mov	r6, r0
 800192a:	d1d6      	bne.n	80018da <_svfiprintf_r+0x176>
 800192c:	89ab      	ldrh	r3, [r5, #12]
 800192e:	065b      	lsls	r3, r3, #25
 8001930:	f53f af2c 	bmi.w	800178c <_svfiprintf_r+0x28>
 8001934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001936:	b01d      	add	sp, #116	; 0x74
 8001938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193c:	ab03      	add	r3, sp, #12
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	462a      	mov	r2, r5
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_svfiprintf_r+0x1fc>)
 8001944:	a904      	add	r1, sp, #16
 8001946:	4638      	mov	r0, r7
 8001948:	f000 f87a 	bl	8001a40 <_printf_i>
 800194c:	e7eb      	b.n	8001926 <_svfiprintf_r+0x1c2>
 800194e:	bf00      	nop
 8001950:	08001f6b 	.word	0x08001f6b
 8001954:	08001f71 	.word	0x08001f71
 8001958:	08001f75 	.word	0x08001f75
 800195c:	00000000 	.word	0x00000000
 8001960:	080016ad 	.word	0x080016ad

08001964 <_printf_common>:
 8001964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001968:	4616      	mov	r6, r2
 800196a:	4699      	mov	r9, r3
 800196c:	688a      	ldr	r2, [r1, #8]
 800196e:	690b      	ldr	r3, [r1, #16]
 8001970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001974:	4293      	cmp	r3, r2
 8001976:	bfb8      	it	lt
 8001978:	4613      	movlt	r3, r2
 800197a:	6033      	str	r3, [r6, #0]
 800197c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001980:	4607      	mov	r7, r0
 8001982:	460c      	mov	r4, r1
 8001984:	b10a      	cbz	r2, 800198a <_printf_common+0x26>
 8001986:	3301      	adds	r3, #1
 8001988:	6033      	str	r3, [r6, #0]
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	0699      	lsls	r1, r3, #26
 800198e:	bf42      	ittt	mi
 8001990:	6833      	ldrmi	r3, [r6, #0]
 8001992:	3302      	addmi	r3, #2
 8001994:	6033      	strmi	r3, [r6, #0]
 8001996:	6825      	ldr	r5, [r4, #0]
 8001998:	f015 0506 	ands.w	r5, r5, #6
 800199c:	d106      	bne.n	80019ac <_printf_common+0x48>
 800199e:	f104 0a19 	add.w	sl, r4, #25
 80019a2:	68e3      	ldr	r3, [r4, #12]
 80019a4:	6832      	ldr	r2, [r6, #0]
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	42ab      	cmp	r3, r5
 80019aa:	dc26      	bgt.n	80019fa <_printf_common+0x96>
 80019ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019b0:	1e13      	subs	r3, r2, #0
 80019b2:	6822      	ldr	r2, [r4, #0]
 80019b4:	bf18      	it	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	0692      	lsls	r2, r2, #26
 80019ba:	d42b      	bmi.n	8001a14 <_printf_common+0xb0>
 80019bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019c0:	4649      	mov	r1, r9
 80019c2:	4638      	mov	r0, r7
 80019c4:	47c0      	blx	r8
 80019c6:	3001      	adds	r0, #1
 80019c8:	d01e      	beq.n	8001a08 <_printf_common+0xa4>
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	68e5      	ldr	r5, [r4, #12]
 80019ce:	6832      	ldr	r2, [r6, #0]
 80019d0:	f003 0306 	and.w	r3, r3, #6
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	bf08      	it	eq
 80019d8:	1aad      	subeq	r5, r5, r2
 80019da:	68a3      	ldr	r3, [r4, #8]
 80019dc:	6922      	ldr	r2, [r4, #16]
 80019de:	bf0c      	ite	eq
 80019e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019e4:	2500      	movne	r5, #0
 80019e6:	4293      	cmp	r3, r2
 80019e8:	bfc4      	itt	gt
 80019ea:	1a9b      	subgt	r3, r3, r2
 80019ec:	18ed      	addgt	r5, r5, r3
 80019ee:	2600      	movs	r6, #0
 80019f0:	341a      	adds	r4, #26
 80019f2:	42b5      	cmp	r5, r6
 80019f4:	d11a      	bne.n	8001a2c <_printf_common+0xc8>
 80019f6:	2000      	movs	r0, #0
 80019f8:	e008      	b.n	8001a0c <_printf_common+0xa8>
 80019fa:	2301      	movs	r3, #1
 80019fc:	4652      	mov	r2, sl
 80019fe:	4649      	mov	r1, r9
 8001a00:	4638      	mov	r0, r7
 8001a02:	47c0      	blx	r8
 8001a04:	3001      	adds	r0, #1
 8001a06:	d103      	bne.n	8001a10 <_printf_common+0xac>
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a10:	3501      	adds	r5, #1
 8001a12:	e7c6      	b.n	80019a2 <_printf_common+0x3e>
 8001a14:	18e1      	adds	r1, r4, r3
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	2030      	movs	r0, #48	; 0x30
 8001a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a1e:	4422      	add	r2, r4
 8001a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a28:	3302      	adds	r3, #2
 8001a2a:	e7c7      	b.n	80019bc <_printf_common+0x58>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4622      	mov	r2, r4
 8001a30:	4649      	mov	r1, r9
 8001a32:	4638      	mov	r0, r7
 8001a34:	47c0      	blx	r8
 8001a36:	3001      	adds	r0, #1
 8001a38:	d0e6      	beq.n	8001a08 <_printf_common+0xa4>
 8001a3a:	3601      	adds	r6, #1
 8001a3c:	e7d9      	b.n	80019f2 <_printf_common+0x8e>
	...

08001a40 <_printf_i>:
 8001a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a44:	7e0f      	ldrb	r7, [r1, #24]
 8001a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a48:	2f78      	cmp	r7, #120	; 0x78
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	4680      	mov	r8, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	469a      	mov	sl, r3
 8001a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a56:	d807      	bhi.n	8001a68 <_printf_i+0x28>
 8001a58:	2f62      	cmp	r7, #98	; 0x62
 8001a5a:	d80a      	bhi.n	8001a72 <_printf_i+0x32>
 8001a5c:	2f00      	cmp	r7, #0
 8001a5e:	f000 80d8 	beq.w	8001c12 <_printf_i+0x1d2>
 8001a62:	2f58      	cmp	r7, #88	; 0x58
 8001a64:	f000 80a3 	beq.w	8001bae <_printf_i+0x16e>
 8001a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a70:	e03a      	b.n	8001ae8 <_printf_i+0xa8>
 8001a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a76:	2b15      	cmp	r3, #21
 8001a78:	d8f6      	bhi.n	8001a68 <_printf_i+0x28>
 8001a7a:	a101      	add	r1, pc, #4	; (adr r1, 8001a80 <_printf_i+0x40>)
 8001a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a80:	08001ad9 	.word	0x08001ad9
 8001a84:	08001aed 	.word	0x08001aed
 8001a88:	08001a69 	.word	0x08001a69
 8001a8c:	08001a69 	.word	0x08001a69
 8001a90:	08001a69 	.word	0x08001a69
 8001a94:	08001a69 	.word	0x08001a69
 8001a98:	08001aed 	.word	0x08001aed
 8001a9c:	08001a69 	.word	0x08001a69
 8001aa0:	08001a69 	.word	0x08001a69
 8001aa4:	08001a69 	.word	0x08001a69
 8001aa8:	08001a69 	.word	0x08001a69
 8001aac:	08001bf9 	.word	0x08001bf9
 8001ab0:	08001b1d 	.word	0x08001b1d
 8001ab4:	08001bdb 	.word	0x08001bdb
 8001ab8:	08001a69 	.word	0x08001a69
 8001abc:	08001a69 	.word	0x08001a69
 8001ac0:	08001c1b 	.word	0x08001c1b
 8001ac4:	08001a69 	.word	0x08001a69
 8001ac8:	08001b1d 	.word	0x08001b1d
 8001acc:	08001a69 	.word	0x08001a69
 8001ad0:	08001a69 	.word	0x08001a69
 8001ad4:	08001be3 	.word	0x08001be3
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	1d1a      	adds	r2, r3, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	602a      	str	r2, [r5, #0]
 8001ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0a3      	b.n	8001c34 <_printf_i+0x1f4>
 8001aec:	6820      	ldr	r0, [r4, #0]
 8001aee:	6829      	ldr	r1, [r5, #0]
 8001af0:	0606      	lsls	r6, r0, #24
 8001af2:	f101 0304 	add.w	r3, r1, #4
 8001af6:	d50a      	bpl.n	8001b0e <_printf_i+0xce>
 8001af8:	680e      	ldr	r6, [r1, #0]
 8001afa:	602b      	str	r3, [r5, #0]
 8001afc:	2e00      	cmp	r6, #0
 8001afe:	da03      	bge.n	8001b08 <_printf_i+0xc8>
 8001b00:	232d      	movs	r3, #45	; 0x2d
 8001b02:	4276      	negs	r6, r6
 8001b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b08:	485e      	ldr	r0, [pc, #376]	; (8001c84 <_printf_i+0x244>)
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	e019      	b.n	8001b42 <_printf_i+0x102>
 8001b0e:	680e      	ldr	r6, [r1, #0]
 8001b10:	602b      	str	r3, [r5, #0]
 8001b12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b16:	bf18      	it	ne
 8001b18:	b236      	sxthne	r6, r6
 8001b1a:	e7ef      	b.n	8001afc <_printf_i+0xbc>
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	6820      	ldr	r0, [r4, #0]
 8001b20:	1d19      	adds	r1, r3, #4
 8001b22:	6029      	str	r1, [r5, #0]
 8001b24:	0601      	lsls	r1, r0, #24
 8001b26:	d501      	bpl.n	8001b2c <_printf_i+0xec>
 8001b28:	681e      	ldr	r6, [r3, #0]
 8001b2a:	e002      	b.n	8001b32 <_printf_i+0xf2>
 8001b2c:	0646      	lsls	r6, r0, #25
 8001b2e:	d5fb      	bpl.n	8001b28 <_printf_i+0xe8>
 8001b30:	881e      	ldrh	r6, [r3, #0]
 8001b32:	4854      	ldr	r0, [pc, #336]	; (8001c84 <_printf_i+0x244>)
 8001b34:	2f6f      	cmp	r7, #111	; 0x6f
 8001b36:	bf0c      	ite	eq
 8001b38:	2308      	moveq	r3, #8
 8001b3a:	230a      	movne	r3, #10
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b42:	6865      	ldr	r5, [r4, #4]
 8001b44:	60a5      	str	r5, [r4, #8]
 8001b46:	2d00      	cmp	r5, #0
 8001b48:	bfa2      	ittt	ge
 8001b4a:	6821      	ldrge	r1, [r4, #0]
 8001b4c:	f021 0104 	bicge.w	r1, r1, #4
 8001b50:	6021      	strge	r1, [r4, #0]
 8001b52:	b90e      	cbnz	r6, 8001b58 <_printf_i+0x118>
 8001b54:	2d00      	cmp	r5, #0
 8001b56:	d04d      	beq.n	8001bf4 <_printf_i+0x1b4>
 8001b58:	4615      	mov	r5, r2
 8001b5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b5e:	fb03 6711 	mls	r7, r3, r1, r6
 8001b62:	5dc7      	ldrb	r7, [r0, r7]
 8001b64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b68:	4637      	mov	r7, r6
 8001b6a:	42bb      	cmp	r3, r7
 8001b6c:	460e      	mov	r6, r1
 8001b6e:	d9f4      	bls.n	8001b5a <_printf_i+0x11a>
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d10b      	bne.n	8001b8c <_printf_i+0x14c>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	07de      	lsls	r6, r3, #31
 8001b78:	d508      	bpl.n	8001b8c <_printf_i+0x14c>
 8001b7a:	6923      	ldr	r3, [r4, #16]
 8001b7c:	6861      	ldr	r1, [r4, #4]
 8001b7e:	4299      	cmp	r1, r3
 8001b80:	bfde      	ittt	le
 8001b82:	2330      	movle	r3, #48	; 0x30
 8001b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b8c:	1b52      	subs	r2, r2, r5
 8001b8e:	6122      	str	r2, [r4, #16]
 8001b90:	f8cd a000 	str.w	sl, [sp]
 8001b94:	464b      	mov	r3, r9
 8001b96:	aa03      	add	r2, sp, #12
 8001b98:	4621      	mov	r1, r4
 8001b9a:	4640      	mov	r0, r8
 8001b9c:	f7ff fee2 	bl	8001964 <_printf_common>
 8001ba0:	3001      	adds	r0, #1
 8001ba2:	d14c      	bne.n	8001c3e <_printf_i+0x1fe>
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	b004      	add	sp, #16
 8001baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bae:	4835      	ldr	r0, [pc, #212]	; (8001c84 <_printf_i+0x244>)
 8001bb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bb4:	6829      	ldr	r1, [r5, #0]
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bbc:	6029      	str	r1, [r5, #0]
 8001bbe:	061d      	lsls	r5, r3, #24
 8001bc0:	d514      	bpl.n	8001bec <_printf_i+0x1ac>
 8001bc2:	07df      	lsls	r7, r3, #31
 8001bc4:	bf44      	itt	mi
 8001bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8001bca:	6023      	strmi	r3, [r4, #0]
 8001bcc:	b91e      	cbnz	r6, 8001bd6 <_printf_i+0x196>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	f023 0320 	bic.w	r3, r3, #32
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	e7b0      	b.n	8001b3c <_printf_i+0xfc>
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	6023      	str	r3, [r4, #0]
 8001be2:	2378      	movs	r3, #120	; 0x78
 8001be4:	4828      	ldr	r0, [pc, #160]	; (8001c88 <_printf_i+0x248>)
 8001be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bea:	e7e3      	b.n	8001bb4 <_printf_i+0x174>
 8001bec:	0659      	lsls	r1, r3, #25
 8001bee:	bf48      	it	mi
 8001bf0:	b2b6      	uxthmi	r6, r6
 8001bf2:	e7e6      	b.n	8001bc2 <_printf_i+0x182>
 8001bf4:	4615      	mov	r5, r2
 8001bf6:	e7bb      	b.n	8001b70 <_printf_i+0x130>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	6826      	ldr	r6, [r4, #0]
 8001bfc:	6961      	ldr	r1, [r4, #20]
 8001bfe:	1d18      	adds	r0, r3, #4
 8001c00:	6028      	str	r0, [r5, #0]
 8001c02:	0635      	lsls	r5, r6, #24
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	d501      	bpl.n	8001c0c <_printf_i+0x1cc>
 8001c08:	6019      	str	r1, [r3, #0]
 8001c0a:	e002      	b.n	8001c12 <_printf_i+0x1d2>
 8001c0c:	0670      	lsls	r0, r6, #25
 8001c0e:	d5fb      	bpl.n	8001c08 <_printf_i+0x1c8>
 8001c10:	8019      	strh	r1, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	6123      	str	r3, [r4, #16]
 8001c16:	4615      	mov	r5, r2
 8001c18:	e7ba      	b.n	8001b90 <_printf_i+0x150>
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	1d1a      	adds	r2, r3, #4
 8001c1e:	602a      	str	r2, [r5, #0]
 8001c20:	681d      	ldr	r5, [r3, #0]
 8001c22:	6862      	ldr	r2, [r4, #4]
 8001c24:	2100      	movs	r1, #0
 8001c26:	4628      	mov	r0, r5
 8001c28:	f7fe fada 	bl	80001e0 <memchr>
 8001c2c:	b108      	cbz	r0, 8001c32 <_printf_i+0x1f2>
 8001c2e:	1b40      	subs	r0, r0, r5
 8001c30:	6060      	str	r0, [r4, #4]
 8001c32:	6863      	ldr	r3, [r4, #4]
 8001c34:	6123      	str	r3, [r4, #16]
 8001c36:	2300      	movs	r3, #0
 8001c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c3c:	e7a8      	b.n	8001b90 <_printf_i+0x150>
 8001c3e:	6923      	ldr	r3, [r4, #16]
 8001c40:	462a      	mov	r2, r5
 8001c42:	4649      	mov	r1, r9
 8001c44:	4640      	mov	r0, r8
 8001c46:	47d0      	blx	sl
 8001c48:	3001      	adds	r0, #1
 8001c4a:	d0ab      	beq.n	8001ba4 <_printf_i+0x164>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	079b      	lsls	r3, r3, #30
 8001c50:	d413      	bmi.n	8001c7a <_printf_i+0x23a>
 8001c52:	68e0      	ldr	r0, [r4, #12]
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	4298      	cmp	r0, r3
 8001c58:	bfb8      	it	lt
 8001c5a:	4618      	movlt	r0, r3
 8001c5c:	e7a4      	b.n	8001ba8 <_printf_i+0x168>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4632      	mov	r2, r6
 8001c62:	4649      	mov	r1, r9
 8001c64:	4640      	mov	r0, r8
 8001c66:	47d0      	blx	sl
 8001c68:	3001      	adds	r0, #1
 8001c6a:	d09b      	beq.n	8001ba4 <_printf_i+0x164>
 8001c6c:	3501      	adds	r5, #1
 8001c6e:	68e3      	ldr	r3, [r4, #12]
 8001c70:	9903      	ldr	r1, [sp, #12]
 8001c72:	1a5b      	subs	r3, r3, r1
 8001c74:	42ab      	cmp	r3, r5
 8001c76:	dcf2      	bgt.n	8001c5e <_printf_i+0x21e>
 8001c78:	e7eb      	b.n	8001c52 <_printf_i+0x212>
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	f104 0619 	add.w	r6, r4, #25
 8001c80:	e7f5      	b.n	8001c6e <_printf_i+0x22e>
 8001c82:	bf00      	nop
 8001c84:	08001f7c 	.word	0x08001f7c
 8001c88:	08001f8d 	.word	0x08001f8d

08001c8c <memcpy>:
 8001c8c:	440a      	add	r2, r1
 8001c8e:	4291      	cmp	r1, r2
 8001c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c94:	d100      	bne.n	8001c98 <memcpy+0xc>
 8001c96:	4770      	bx	lr
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ca2:	4291      	cmp	r1, r2
 8001ca4:	d1f9      	bne.n	8001c9a <memcpy+0xe>
 8001ca6:	bd10      	pop	{r4, pc}

08001ca8 <memmove>:
 8001ca8:	4288      	cmp	r0, r1
 8001caa:	b510      	push	{r4, lr}
 8001cac:	eb01 0402 	add.w	r4, r1, r2
 8001cb0:	d902      	bls.n	8001cb8 <memmove+0x10>
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	d807      	bhi.n	8001cc8 <memmove+0x20>
 8001cb8:	1e43      	subs	r3, r0, #1
 8001cba:	42a1      	cmp	r1, r4
 8001cbc:	d008      	beq.n	8001cd0 <memmove+0x28>
 8001cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001cc6:	e7f8      	b.n	8001cba <memmove+0x12>
 8001cc8:	4402      	add	r2, r0
 8001cca:	4601      	mov	r1, r0
 8001ccc:	428a      	cmp	r2, r1
 8001cce:	d100      	bne.n	8001cd2 <memmove+0x2a>
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001cda:	e7f7      	b.n	8001ccc <memmove+0x24>

08001cdc <_free_r>:
 8001cdc:	b538      	push	{r3, r4, r5, lr}
 8001cde:	4605      	mov	r5, r0
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d041      	beq.n	8001d68 <_free_r+0x8c>
 8001ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ce8:	1f0c      	subs	r4, r1, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bfb8      	it	lt
 8001cee:	18e4      	addlt	r4, r4, r3
 8001cf0:	f000 f912 	bl	8001f18 <__malloc_lock>
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <_free_r+0x90>)
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	b933      	cbnz	r3, 8001d08 <_free_r+0x2c>
 8001cfa:	6063      	str	r3, [r4, #4]
 8001cfc:	6014      	str	r4, [r2, #0]
 8001cfe:	4628      	mov	r0, r5
 8001d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d04:	f000 b90e 	b.w	8001f24 <__malloc_unlock>
 8001d08:	42a3      	cmp	r3, r4
 8001d0a:	d908      	bls.n	8001d1e <_free_r+0x42>
 8001d0c:	6820      	ldr	r0, [r4, #0]
 8001d0e:	1821      	adds	r1, r4, r0
 8001d10:	428b      	cmp	r3, r1
 8001d12:	bf01      	itttt	eq
 8001d14:	6819      	ldreq	r1, [r3, #0]
 8001d16:	685b      	ldreq	r3, [r3, #4]
 8001d18:	1809      	addeq	r1, r1, r0
 8001d1a:	6021      	streq	r1, [r4, #0]
 8001d1c:	e7ed      	b.n	8001cfa <_free_r+0x1e>
 8001d1e:	461a      	mov	r2, r3
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	b10b      	cbz	r3, 8001d28 <_free_r+0x4c>
 8001d24:	42a3      	cmp	r3, r4
 8001d26:	d9fa      	bls.n	8001d1e <_free_r+0x42>
 8001d28:	6811      	ldr	r1, [r2, #0]
 8001d2a:	1850      	adds	r0, r2, r1
 8001d2c:	42a0      	cmp	r0, r4
 8001d2e:	d10b      	bne.n	8001d48 <_free_r+0x6c>
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	4401      	add	r1, r0
 8001d34:	1850      	adds	r0, r2, r1
 8001d36:	4283      	cmp	r3, r0
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	d1e0      	bne.n	8001cfe <_free_r+0x22>
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	6053      	str	r3, [r2, #4]
 8001d42:	4401      	add	r1, r0
 8001d44:	6011      	str	r1, [r2, #0]
 8001d46:	e7da      	b.n	8001cfe <_free_r+0x22>
 8001d48:	d902      	bls.n	8001d50 <_free_r+0x74>
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	602b      	str	r3, [r5, #0]
 8001d4e:	e7d6      	b.n	8001cfe <_free_r+0x22>
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	1821      	adds	r1, r4, r0
 8001d54:	428b      	cmp	r3, r1
 8001d56:	bf04      	itt	eq
 8001d58:	6819      	ldreq	r1, [r3, #0]
 8001d5a:	685b      	ldreq	r3, [r3, #4]
 8001d5c:	6063      	str	r3, [r4, #4]
 8001d5e:	bf04      	itt	eq
 8001d60:	1809      	addeq	r1, r1, r0
 8001d62:	6021      	streq	r1, [r4, #0]
 8001d64:	6054      	str	r4, [r2, #4]
 8001d66:	e7ca      	b.n	8001cfe <_free_r+0x22>
 8001d68:	bd38      	pop	{r3, r4, r5, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200001a0 	.word	0x200001a0

08001d70 <sbrk_aligned>:
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	4e0e      	ldr	r6, [pc, #56]	; (8001dac <sbrk_aligned+0x3c>)
 8001d74:	460c      	mov	r4, r1
 8001d76:	6831      	ldr	r1, [r6, #0]
 8001d78:	4605      	mov	r5, r0
 8001d7a:	b911      	cbnz	r1, 8001d82 <sbrk_aligned+0x12>
 8001d7c:	f000 f8bc 	bl	8001ef8 <_sbrk_r>
 8001d80:	6030      	str	r0, [r6, #0]
 8001d82:	4621      	mov	r1, r4
 8001d84:	4628      	mov	r0, r5
 8001d86:	f000 f8b7 	bl	8001ef8 <_sbrk_r>
 8001d8a:	1c43      	adds	r3, r0, #1
 8001d8c:	d00a      	beq.n	8001da4 <sbrk_aligned+0x34>
 8001d8e:	1cc4      	adds	r4, r0, #3
 8001d90:	f024 0403 	bic.w	r4, r4, #3
 8001d94:	42a0      	cmp	r0, r4
 8001d96:	d007      	beq.n	8001da8 <sbrk_aligned+0x38>
 8001d98:	1a21      	subs	r1, r4, r0
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f000 f8ac 	bl	8001ef8 <_sbrk_r>
 8001da0:	3001      	adds	r0, #1
 8001da2:	d101      	bne.n	8001da8 <sbrk_aligned+0x38>
 8001da4:	f04f 34ff 	mov.w	r4, #4294967295
 8001da8:	4620      	mov	r0, r4
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
 8001dac:	200001a4 	.word	0x200001a4

08001db0 <_malloc_r>:
 8001db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db4:	1ccd      	adds	r5, r1, #3
 8001db6:	f025 0503 	bic.w	r5, r5, #3
 8001dba:	3508      	adds	r5, #8
 8001dbc:	2d0c      	cmp	r5, #12
 8001dbe:	bf38      	it	cc
 8001dc0:	250c      	movcc	r5, #12
 8001dc2:	2d00      	cmp	r5, #0
 8001dc4:	4607      	mov	r7, r0
 8001dc6:	db01      	blt.n	8001dcc <_malloc_r+0x1c>
 8001dc8:	42a9      	cmp	r1, r5
 8001dca:	d905      	bls.n	8001dd8 <_malloc_r+0x28>
 8001dcc:	230c      	movs	r3, #12
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	2600      	movs	r6, #0
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd8:	4e2e      	ldr	r6, [pc, #184]	; (8001e94 <_malloc_r+0xe4>)
 8001dda:	f000 f89d 	bl	8001f18 <__malloc_lock>
 8001dde:	6833      	ldr	r3, [r6, #0]
 8001de0:	461c      	mov	r4, r3
 8001de2:	bb34      	cbnz	r4, 8001e32 <_malloc_r+0x82>
 8001de4:	4629      	mov	r1, r5
 8001de6:	4638      	mov	r0, r7
 8001de8:	f7ff ffc2 	bl	8001d70 <sbrk_aligned>
 8001dec:	1c43      	adds	r3, r0, #1
 8001dee:	4604      	mov	r4, r0
 8001df0:	d14d      	bne.n	8001e8e <_malloc_r+0xde>
 8001df2:	6834      	ldr	r4, [r6, #0]
 8001df4:	4626      	mov	r6, r4
 8001df6:	2e00      	cmp	r6, #0
 8001df8:	d140      	bne.n	8001e7c <_malloc_r+0xcc>
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	4631      	mov	r1, r6
 8001dfe:	4638      	mov	r0, r7
 8001e00:	eb04 0803 	add.w	r8, r4, r3
 8001e04:	f000 f878 	bl	8001ef8 <_sbrk_r>
 8001e08:	4580      	cmp	r8, r0
 8001e0a:	d13a      	bne.n	8001e82 <_malloc_r+0xd2>
 8001e0c:	6821      	ldr	r1, [r4, #0]
 8001e0e:	3503      	adds	r5, #3
 8001e10:	1a6d      	subs	r5, r5, r1
 8001e12:	f025 0503 	bic.w	r5, r5, #3
 8001e16:	3508      	adds	r5, #8
 8001e18:	2d0c      	cmp	r5, #12
 8001e1a:	bf38      	it	cc
 8001e1c:	250c      	movcc	r5, #12
 8001e1e:	4629      	mov	r1, r5
 8001e20:	4638      	mov	r0, r7
 8001e22:	f7ff ffa5 	bl	8001d70 <sbrk_aligned>
 8001e26:	3001      	adds	r0, #1
 8001e28:	d02b      	beq.n	8001e82 <_malloc_r+0xd2>
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	442b      	add	r3, r5
 8001e2e:	6023      	str	r3, [r4, #0]
 8001e30:	e00e      	b.n	8001e50 <_malloc_r+0xa0>
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	1b52      	subs	r2, r2, r5
 8001e36:	d41e      	bmi.n	8001e76 <_malloc_r+0xc6>
 8001e38:	2a0b      	cmp	r2, #11
 8001e3a:	d916      	bls.n	8001e6a <_malloc_r+0xba>
 8001e3c:	1961      	adds	r1, r4, r5
 8001e3e:	42a3      	cmp	r3, r4
 8001e40:	6025      	str	r5, [r4, #0]
 8001e42:	bf18      	it	ne
 8001e44:	6059      	strne	r1, [r3, #4]
 8001e46:	6863      	ldr	r3, [r4, #4]
 8001e48:	bf08      	it	eq
 8001e4a:	6031      	streq	r1, [r6, #0]
 8001e4c:	5162      	str	r2, [r4, r5]
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	4638      	mov	r0, r7
 8001e52:	f104 060b 	add.w	r6, r4, #11
 8001e56:	f000 f865 	bl	8001f24 <__malloc_unlock>
 8001e5a:	f026 0607 	bic.w	r6, r6, #7
 8001e5e:	1d23      	adds	r3, r4, #4
 8001e60:	1af2      	subs	r2, r6, r3
 8001e62:	d0b6      	beq.n	8001dd2 <_malloc_r+0x22>
 8001e64:	1b9b      	subs	r3, r3, r6
 8001e66:	50a3      	str	r3, [r4, r2]
 8001e68:	e7b3      	b.n	8001dd2 <_malloc_r+0x22>
 8001e6a:	6862      	ldr	r2, [r4, #4]
 8001e6c:	42a3      	cmp	r3, r4
 8001e6e:	bf0c      	ite	eq
 8001e70:	6032      	streq	r2, [r6, #0]
 8001e72:	605a      	strne	r2, [r3, #4]
 8001e74:	e7ec      	b.n	8001e50 <_malloc_r+0xa0>
 8001e76:	4623      	mov	r3, r4
 8001e78:	6864      	ldr	r4, [r4, #4]
 8001e7a:	e7b2      	b.n	8001de2 <_malloc_r+0x32>
 8001e7c:	4634      	mov	r4, r6
 8001e7e:	6876      	ldr	r6, [r6, #4]
 8001e80:	e7b9      	b.n	8001df6 <_malloc_r+0x46>
 8001e82:	230c      	movs	r3, #12
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4638      	mov	r0, r7
 8001e88:	f000 f84c 	bl	8001f24 <__malloc_unlock>
 8001e8c:	e7a1      	b.n	8001dd2 <_malloc_r+0x22>
 8001e8e:	6025      	str	r5, [r4, #0]
 8001e90:	e7de      	b.n	8001e50 <_malloc_r+0xa0>
 8001e92:	bf00      	nop
 8001e94:	200001a0 	.word	0x200001a0

08001e98 <_realloc_r>:
 8001e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	460e      	mov	r6, r1
 8001ea2:	b921      	cbnz	r1, 8001eae <_realloc_r+0x16>
 8001ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f7ff bf81 	b.w	8001db0 <_malloc_r>
 8001eae:	b92a      	cbnz	r2, 8001ebc <_realloc_r+0x24>
 8001eb0:	f7ff ff14 	bl	8001cdc <_free_r>
 8001eb4:	4625      	mov	r5, r4
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ebc:	f000 f838 	bl	8001f30 <_malloc_usable_size_r>
 8001ec0:	4284      	cmp	r4, r0
 8001ec2:	4607      	mov	r7, r0
 8001ec4:	d802      	bhi.n	8001ecc <_realloc_r+0x34>
 8001ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001eca:	d812      	bhi.n	8001ef2 <_realloc_r+0x5a>
 8001ecc:	4621      	mov	r1, r4
 8001ece:	4640      	mov	r0, r8
 8001ed0:	f7ff ff6e 	bl	8001db0 <_malloc_r>
 8001ed4:	4605      	mov	r5, r0
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d0ed      	beq.n	8001eb6 <_realloc_r+0x1e>
 8001eda:	42bc      	cmp	r4, r7
 8001edc:	4622      	mov	r2, r4
 8001ede:	4631      	mov	r1, r6
 8001ee0:	bf28      	it	cs
 8001ee2:	463a      	movcs	r2, r7
 8001ee4:	f7ff fed2 	bl	8001c8c <memcpy>
 8001ee8:	4631      	mov	r1, r6
 8001eea:	4640      	mov	r0, r8
 8001eec:	f7ff fef6 	bl	8001cdc <_free_r>
 8001ef0:	e7e1      	b.n	8001eb6 <_realloc_r+0x1e>
 8001ef2:	4635      	mov	r5, r6
 8001ef4:	e7df      	b.n	8001eb6 <_realloc_r+0x1e>
	...

08001ef8 <_sbrk_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4d06      	ldr	r5, [pc, #24]	; (8001f14 <_sbrk_r+0x1c>)
 8001efc:	2300      	movs	r3, #0
 8001efe:	4604      	mov	r4, r0
 8001f00:	4608      	mov	r0, r1
 8001f02:	602b      	str	r3, [r5, #0]
 8001f04:	f7fe fad8 	bl	80004b8 <_sbrk>
 8001f08:	1c43      	adds	r3, r0, #1
 8001f0a:	d102      	bne.n	8001f12 <_sbrk_r+0x1a>
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	b103      	cbz	r3, 8001f12 <_sbrk_r+0x1a>
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
 8001f14:	200001a8 	.word	0x200001a8

08001f18 <__malloc_lock>:
 8001f18:	4801      	ldr	r0, [pc, #4]	; (8001f20 <__malloc_lock+0x8>)
 8001f1a:	f000 b811 	b.w	8001f40 <__retarget_lock_acquire_recursive>
 8001f1e:	bf00      	nop
 8001f20:	200001ac 	.word	0x200001ac

08001f24 <__malloc_unlock>:
 8001f24:	4801      	ldr	r0, [pc, #4]	; (8001f2c <__malloc_unlock+0x8>)
 8001f26:	f000 b80c 	b.w	8001f42 <__retarget_lock_release_recursive>
 8001f2a:	bf00      	nop
 8001f2c:	200001ac 	.word	0x200001ac

08001f30 <_malloc_usable_size_r>:
 8001f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f34:	1f18      	subs	r0, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bfbc      	itt	lt
 8001f3a:	580b      	ldrlt	r3, [r1, r0]
 8001f3c:	18c0      	addlt	r0, r0, r3
 8001f3e:	4770      	bx	lr

08001f40 <__retarget_lock_acquire_recursive>:
 8001f40:	4770      	bx	lr

08001f42 <__retarget_lock_release_recursive>:
 8001f42:	4770      	bx	lr

08001f44 <_init>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	bf00      	nop
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr

08001f50 <_fini>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	bf00      	nop
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr
