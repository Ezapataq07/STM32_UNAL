
Taller2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  4 .ARM          00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000308  08000308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800030c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800030c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001c6  00000000  00000000  0001033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000008a  00000000  00000000  00010502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  000105d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f34  00000000  00000000  00010608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000041c  00000000  00000000  0001153c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003b97  00000000  00000000  00011958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000154ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000064  00000000  00000000  00015540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002ec 	.word	0x080002ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002ec 	.word	0x080002ec

080001d8 <main>:
 */


#include <stdint.h>

int main(void){
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0

	uint8_t num1, num2, num3, num4,  num5, num6, num7;
	num1 = 0b01010010;
 80001de:	2352      	movs	r3, #82	; 0x52
 80001e0:	75fb      	strb	r3, [r7, #23]
	num2 = 0b01110011;
 80001e2:	2373      	movs	r3, #115	; 0x73
 80001e4:	75bb      	strb	r3, [r7, #22]
//	unsigned char NOR = (AMasB_ == A_B_);




	num1 |= 0x90; // 0x90 en binario es 10010000 "SET"
 80001e6:	7dfb      	ldrb	r3, [r7, #23]
 80001e8:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80001ec:	75fb      	strb	r3, [r7, #23]

	num3 = 0b1111111;
 80001ee:	237f      	movs	r3, #127	; 0x7f
 80001f0:	757b      	strb	r3, [r7, #21]
	//num3 &= 0x47; // 0x47 en binario es 1000111 -> "RESET"
	num3 &= ~ 0x38; // 0x38 en binario es 0111000
 80001f2:	7d7b      	ldrb	r3, [r7, #21]
 80001f4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80001f8:	757b      	strb	r3, [r7, #21]





	num7 = 2;
 80001fa:	2302      	movs	r3, #2
 80001fc:	753b      	strb	r3, [r7, #20]

	uint8_t num7_1bit_iz = num7<<1;
 80001fe:	7d3b      	ldrb	r3, [r7, #20]
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	74fb      	strb	r3, [r7, #19]
	uint8_t num7_2bit_iz = num7<<2;
 8000204:	7d3b      	ldrb	r3, [r7, #20]
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	74bb      	strb	r3, [r7, #18]
	uint8_t num7_3bit_iz = num7<<3;
 800020a:	7d3b      	ldrb	r3, [r7, #20]
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	747b      	strb	r3, [r7, #17]
	uint8_t num7_4bit_iz = num7<<4;
 8000210:	7d3b      	ldrb	r3, [r7, #20]
 8000212:	011b      	lsls	r3, r3, #4
 8000214:	743b      	strb	r3, [r7, #16]


	unsigned short num8 = 1024;
 8000216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021a:	81fb      	strh	r3, [r7, #14]

	unsigned short  num8_1bit_der = num8>>1;
 800021c:	89fb      	ldrh	r3, [r7, #14]
 800021e:	085b      	lsrs	r3, r3, #1
 8000220:	81bb      	strh	r3, [r7, #12]
	unsigned short  num8_2bit_der = num8>>2;
 8000222:	89fb      	ldrh	r3, [r7, #14]
 8000224:	089b      	lsrs	r3, r3, #2
 8000226:	817b      	strh	r3, [r7, #10]
	unsigned short  num8_3bit_der = num8>>3;
 8000228:	89fb      	ldrh	r3, [r7, #14]
 800022a:	08db      	lsrs	r3, r3, #3
 800022c:	813b      	strh	r3, [r7, #8]
	unsigned short  num8_4bit_der = num8>>4;
 800022e:	89fb      	ldrh	r3, [r7, #14]
 8000230:	091b      	lsrs	r3, r3, #4
 8000232:	80fb      	strh	r3, [r7, #6]
	unsigned short  num8_5bit_der = num8>>5;
 8000234:	89fb      	ldrh	r3, [r7, #14]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	80bb      	strh	r3, [r7, #4]
	unsigned short  num8_6bit_der = num8>>6;
 800023a:	89fb      	ldrh	r3, [r7, #14]
 800023c:	099b      	lsrs	r3, r3, #6
 800023e:	807b      	strh	r3, [r7, #2]
 8000240:	2300      	movs	r3, #0





}
 8000242:	4618      	mov	r0, r3
 8000244:	371c      	adds	r7, #28
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
	...

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	; (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	; (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f811 	bl	80002a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffa9 	bl	80001d8 <main>

08000286 <LoopForever>:

LoopForever:
    b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	0800030c 	.word	0x0800030c
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC_IRQHandler>
	...

080002a4 <__libc_init_array>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	4d0d      	ldr	r5, [pc, #52]	; (80002dc <__libc_init_array+0x38>)
 80002a8:	4c0d      	ldr	r4, [pc, #52]	; (80002e0 <__libc_init_array+0x3c>)
 80002aa:	1b64      	subs	r4, r4, r5
 80002ac:	10a4      	asrs	r4, r4, #2
 80002ae:	2600      	movs	r6, #0
 80002b0:	42a6      	cmp	r6, r4
 80002b2:	d109      	bne.n	80002c8 <__libc_init_array+0x24>
 80002b4:	4d0b      	ldr	r5, [pc, #44]	; (80002e4 <__libc_init_array+0x40>)
 80002b6:	4c0c      	ldr	r4, [pc, #48]	; (80002e8 <__libc_init_array+0x44>)
 80002b8:	f000 f818 	bl	80002ec <_init>
 80002bc:	1b64      	subs	r4, r4, r5
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	2600      	movs	r6, #0
 80002c2:	42a6      	cmp	r6, r4
 80002c4:	d105      	bne.n	80002d2 <__libc_init_array+0x2e>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002cc:	4798      	blx	r3
 80002ce:	3601      	adds	r6, #1
 80002d0:	e7ee      	b.n	80002b0 <__libc_init_array+0xc>
 80002d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d6:	4798      	blx	r3
 80002d8:	3601      	adds	r6, #1
 80002da:	e7f2      	b.n	80002c2 <__libc_init_array+0x1e>
 80002dc:	08000304 	.word	0x08000304
 80002e0:	08000304 	.word	0x08000304
 80002e4:	08000304 	.word	0x08000304
 80002e8:	08000308 	.word	0x08000308

080002ec <_init>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr

080002f8 <_fini>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr
