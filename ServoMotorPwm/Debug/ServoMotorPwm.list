
ServoMotorPwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bd0  08001bd0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001bd0  08001bd0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bd0  08001bd0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200000a4  08001c7c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001c7c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026bd  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000922  00000000  00000000  0002278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  000230b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00023298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f66e  00000000  00000000  00023418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ce6  00000000  00000000  00032a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054fab  00000000  00000000  0003576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008a717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009b8  00000000  00000000  0008a768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b78 	.word	0x08001b78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08001b78 	.word	0x08001b78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
uint16_t			oldDuty					= 0;

/* Definición de los prototipos de las funciones */
void initSystem(void);

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	// Se inicializa la configuración
	initSystem();
 8000284:	f000 f86e 	bl	8000364 <initSystem>
	sprintf(bufferData, "Duty = %u\n\r",(unsigned int) oldDuty);
 8000288:	4b2f      	ldr	r3, [pc, #188]	; (8000348 <main+0xc8>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	492f      	ldr	r1, [pc, #188]	; (800034c <main+0xcc>)
 8000290:	482f      	ldr	r0, [pc, #188]	; (8000350 <main+0xd0>)
 8000292:	f001 f805 	bl	80012a0 <siprintf>
	writeMsg(&handlerUSART2, bufferData);
 8000296:	492e      	ldr	r1, [pc, #184]	; (8000350 <main+0xd0>)
 8000298:	482e      	ldr	r0, [pc, #184]	; (8000354 <main+0xd4>)
 800029a:	f000 ff1b 	bl	80010d4 <writeMsg>

	/* Ciclo principal del programa */
	while(1){
		if (rxData != '\0'){
 800029e:	4b2e      	ldr	r3, [pc, #184]	; (8000358 <main+0xd8>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0fb      	beq.n	800029e <main+0x1e>
			writeChar(&handlerUSART2, rxData);
 80002a6:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <main+0xd8>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	4619      	mov	r1, r3
 80002ac:	4829      	ldr	r0, [pc, #164]	; (8000354 <main+0xd4>)
 80002ae:	f000 fee3 	bl	8001078 <writeChar>
			if (rxData == 'u'){
 80002b2:	4b29      	ldr	r3, [pc, #164]	; (8000358 <main+0xd8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b75      	cmp	r3, #117	; 0x75
 80002b8:	d116      	bne.n	80002e8 <main+0x68>
				oldDuty = oldDuty + 1;
 80002ba:	4b23      	ldr	r3, [pc, #140]	; (8000348 <main+0xc8>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	3301      	adds	r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b21      	ldr	r3, [pc, #132]	; (8000348 <main+0xc8>)
 80002c4:	801a      	strh	r2, [r3, #0]
				sprintf(bufferData, "Duty = %u\n\r",(unsigned int) oldDuty);
 80002c6:	4b20      	ldr	r3, [pc, #128]	; (8000348 <main+0xc8>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	491f      	ldr	r1, [pc, #124]	; (800034c <main+0xcc>)
 80002ce:	4820      	ldr	r0, [pc, #128]	; (8000350 <main+0xd0>)
 80002d0:	f000 ffe6 	bl	80012a0 <siprintf>
				writeMsg(&handlerUSART2, bufferData);
 80002d4:	491e      	ldr	r1, [pc, #120]	; (8000350 <main+0xd0>)
 80002d6:	481f      	ldr	r0, [pc, #124]	; (8000354 <main+0xd4>)
 80002d8:	f000 fefc 	bl	80010d4 <writeMsg>
				setPwmDuty(&handlerPWM, oldDuty);
 80002dc:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <main+0xc8>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	4619      	mov	r1, r3
 80002e2:	481e      	ldr	r0, [pc, #120]	; (800035c <main+0xdc>)
 80002e4:	f000 fcbc 	bl	8000c60 <setPwmDuty>
			}
			if (rxData == 'd'){
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <main+0xd8>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b64      	cmp	r3, #100	; 0x64
 80002ee:	d116      	bne.n	800031e <main+0x9e>
				oldDuty = oldDuty - 1;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <main+0xc8>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <main+0xc8>)
 80002fa:	801a      	strh	r2, [r3, #0]
				sprintf(bufferData, "Duty = %u\n\r",(unsigned int) oldDuty);
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <main+0xc8>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4912      	ldr	r1, [pc, #72]	; (800034c <main+0xcc>)
 8000304:	4812      	ldr	r0, [pc, #72]	; (8000350 <main+0xd0>)
 8000306:	f000 ffcb 	bl	80012a0 <siprintf>
				writeMsg(&handlerUSART2, bufferData);
 800030a:	4911      	ldr	r1, [pc, #68]	; (8000350 <main+0xd0>)
 800030c:	4811      	ldr	r0, [pc, #68]	; (8000354 <main+0xd4>)
 800030e:	f000 fee1 	bl	80010d4 <writeMsg>
				setPwmDuty(&handlerPWM, oldDuty);
 8000312:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <main+0xc8>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <main+0xdc>)
 800031a:	f000 fca1 	bl	8000c60 <setPwmDuty>

			}
			if (rxData == 's'){
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <main+0xd8>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b73      	cmp	r3, #115	; 0x73
 8000324:	d10c      	bne.n	8000340 <main+0xc0>
				if(siuu){
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <main+0xe0>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <main+0xb8>
					setPwmDuty(&handlerPWM, 50);
 800032e:	2132      	movs	r1, #50	; 0x32
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <main+0xdc>)
 8000332:	f000 fc95 	bl	8000c60 <setPwmDuty>
 8000336:	e003      	b.n	8000340 <main+0xc0>
				}
				else {
					setPwmDuty(&handlerPWM, 235);
 8000338:	21eb      	movs	r1, #235	; 0xeb
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <main+0xdc>)
 800033c:	f000 fc90 	bl	8000c60 <setPwmDuty>
				}

			}
			rxData = '\0';
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <main+0xd8>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8000346:	e7aa      	b.n	800029e <main+0x1e>
 8000348:	2000019a 	.word	0x2000019a
 800034c:	08001b90 	.word	0x08001b90
 8000350:	20000000 	.word	0x20000000
 8000354:	200000f4 	.word	0x200000f4
 8000358:	20000199 	.word	0x20000199
 800035c:	200000c0 	.word	0x200000c0
 8000360:	20000198 	.word	0x20000198

08000364 <initSystem>:


	return 0;
}

void initSystem(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 8000368:	4b4b      	ldr	r3, [pc, #300]	; (8000498 <initSystem+0x134>)
 800036a:	4a4c      	ldr	r2, [pc, #304]	; (800049c <initSystem+0x138>)
 800036c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800036e:	4b4a      	ldr	r3, [pc, #296]	; (8000498 <initSystem+0x134>)
 8000370:	2205      	movs	r2, #5
 8000372:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000374:	4b48      	ldr	r3, [pc, #288]	; (8000498 <initSystem+0x134>)
 8000376:	2201      	movs	r2, #1
 8000378:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800037a:	4b47      	ldr	r3, [pc, #284]	; (8000498 <initSystem+0x134>)
 800037c:	2200      	movs	r2, #0
 800037e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000380:	4b45      	ldr	r3, [pc, #276]	; (8000498 <initSystem+0x134>)
 8000382:	2201      	movs	r2, #1
 8000384:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8000386:	4844      	ldr	r0, [pc, #272]	; (8000498 <initSystem+0x134>)
 8000388:	f000 fa46 	bl	8000818 <GPIO_Config>

	/* Configuración del Display1 */
	handlerPwmPin.pGPIOx 								= GPIOA;
 800038c:	4b44      	ldr	r3, [pc, #272]	; (80004a0 <initSystem+0x13c>)
 800038e:	4a43      	ldr	r2, [pc, #268]	; (800049c <initSystem+0x138>)
 8000390:	601a      	str	r2, [r3, #0]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 8000392:	4b43      	ldr	r3, [pc, #268]	; (80004a0 <initSystem+0x13c>)
 8000394:	2206      	movs	r2, #6
 8000396:	711a      	strb	r2, [r3, #4]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000398:	4b41      	ldr	r3, [pc, #260]	; (80004a0 <initSystem+0x13c>)
 800039a:	2202      	movs	r2, #2
 800039c:	715a      	strb	r2, [r3, #5]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800039e:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <initSystem+0x13c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	721a      	strb	r2, [r3, #8]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 80003a4:	4b3e      	ldr	r3, [pc, #248]	; (80004a0 <initSystem+0x13c>)
 80003a6:	2203      	movs	r2, #3
 80003a8:	719a      	strb	r2, [r3, #6]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinAltFunMode		= AF2;
 80003aa:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <initSystem+0x13c>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Display1
	GPIO_Config(&handlerPwmPin);
 80003b0:	483b      	ldr	r0, [pc, #236]	; (80004a0 <initSystem+0x13c>)
 80003b2:	f000 fa31 	bl	8000818 <GPIO_Config>

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 80003b6:	4b3b      	ldr	r3, [pc, #236]	; (80004a4 <initSystem+0x140>)
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 80003be:	4b39      	ldr	r3, [pc, #228]	; (80004a4 <initSystem+0x140>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_1ms;
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <initSystem+0x140>)
 80003c6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003ca:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 80003cc:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <initSystem+0x140>)
 80003ce:	22fa      	movs	r2, #250	; 0xfa
 80003d0:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 80003d2:	4834      	ldr	r0, [pc, #208]	; (80004a4 <initSystem+0x140>)
 80003d4:	f000 f94c 	bl	8000670 <BTimer_Config>

	handlerPWM.ptrTIMx 					= TIM3;
 80003d8:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <initSystem+0x144>)
 80003da:	4a34      	ldr	r2, [pc, #208]	; (80004ac <initSystem+0x148>)
 80003dc:	601a      	str	r2, [r3, #0]
	handlerPWM.pwmConfig.PWM_channel 	= CHANNEL1;
 80003de:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <initSystem+0x144>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	711a      	strb	r2, [r3, #4]
	handlerPWM.pwmConfig.PWM_prescaler	= TIMER_INCR_SPEED_10us;
 80003e4:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <initSystem+0x144>)
 80003e6:	22a0      	movs	r2, #160	; 0xa0
 80003e8:	80da      	strh	r2, [r3, #6]
	handlerPWM.pwmConfig.PWM_period		= 2000;
 80003ea:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <initSystem+0x144>)
 80003ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003f0:	811a      	strh	r2, [r3, #8]
	handlerPWM.pwmConfig.PWM_dutyCycle	= 100;
 80003f2:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <initSystem+0x144>)
 80003f4:	2264      	movs	r2, #100	; 0x64
 80003f6:	815a      	strh	r2, [r3, #10]
	PWM_Config(&handlerPWM);
 80003f8:	482b      	ldr	r0, [pc, #172]	; (80004a8 <initSystem+0x144>)
 80003fa:	f000 fb35 	bl	8000a68 <PWM_Config>
	oldDuty = 100;
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <initSystem+0x14c>)
 8000400:	2264      	movs	r2, #100	; 0x64
 8000402:	801a      	strh	r2, [r3, #0]

	// Configuración del PIN que recibe la información por la USB
	handlerRxPIN.pGPIOx								= GPIOA;
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <initSystem+0x150>)
 8000406:	4a25      	ldr	r2, [pc, #148]	; (800049c <initSystem+0x138>)
 8000408:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <initSystem+0x150>)
 800040c:	2203      	movs	r2, #3
 800040e:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <initSystem+0x150>)
 8000412:	2202      	movs	r2, #2
 8000414:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <initSystem+0x150>)
 8000418:	2200      	movs	r2, #0
 800041a:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <initSystem+0x150>)
 800041e:	2200      	movs	r2, #0
 8000420:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <initSystem+0x150>)
 8000424:	2201      	movs	r2, #1
 8000426:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <initSystem+0x150>)
 800042a:	2207      	movs	r2, #7
 800042c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 800042e:	4821      	ldr	r0, [pc, #132]	; (80004b4 <initSystem+0x150>)
 8000430:	f000 f9f2 	bl	8000818 <GPIO_Config>

	// Configuración del PIN que envía la información por la USB (TX)
	handlerTxPIN.pGPIOx								= GPIOA;
 8000434:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <initSystem+0x154>)
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <initSystem+0x138>)
 8000438:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <initSystem+0x154>)
 800043c:	2202      	movs	r2, #2
 800043e:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <initSystem+0x154>)
 8000442:	2202      	movs	r2, #2
 8000444:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <initSystem+0x154>)
 8000448:	2200      	movs	r2, #0
 800044a:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <initSystem+0x154>)
 800044e:	2200      	movs	r2, #0
 8000450:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <initSystem+0x154>)
 8000454:	2201      	movs	r2, #1
 8000456:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <initSystem+0x154>)
 800045a:	2207      	movs	r2, #7
 800045c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 800045e:	4816      	ldr	r0, [pc, #88]	; (80004b8 <initSystem+0x154>)
 8000460:	f000 f9da 	bl	8000818 <GPIO_Config>

	// Configuración del USART2
	handlerUSART2.ptrUSARTx							= USART2;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <initSystem+0x158>)
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <initSystem+0x15c>)
 8000468:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_mode			= USART_MODE_RXTX;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <initSystem+0x158>)
 800046c:	2202      	movs	r2, #2
 800046e:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <initSystem+0x158>)
 8000472:	2202      	movs	r2, #2
 8000474:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <initSystem+0x158>)
 8000478:	2200      	movs	r2, #0
 800047a:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity			= USART_PARITY_NONE;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <initSystem+0x158>)
 800047e:	2200      	movs	r2, #0
 8000480:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <initSystem+0x158>)
 8000484:	2200      	movs	r2, #0
 8000486:	721a      	strb	r2, [r3, #8]
	handlerUSART2.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <initSystem+0x158>)
 800048a:	2201      	movs	r2, #1
 800048c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del USART
	USART_Config(&handlerUSART2);
 800048e:	480b      	ldr	r0, [pc, #44]	; (80004bc <initSystem+0x158>)
 8000490:	f000 fc5e 	bl	8000d50 <USART_Config>

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200000d8 	.word	0x200000d8
 800049c:	40020000 	.word	0x40020000
 80004a0:	200000cc 	.word	0x200000cc
 80004a4:	200000e4 	.word	0x200000e4
 80004a8:	200000c0 	.word	0x200000c0
 80004ac:	40000400 	.word	0x40000400
 80004b0:	2000019a 	.word	0x2000019a
 80004b4:	20000180 	.word	0x20000180
 80004b8:	2000018c 	.word	0x2000018c
 80004bc:	200000f4 	.word	0x200000f4
 80004c0:	40004400 	.word	0x40004400

080004c4 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <BTimer2_Callback+0x1c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <BTimer2_Callback+0x1c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f082 0220 	eor.w	r2, r2, #32
 80004d6:	615a      	str	r2, [r3, #20]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	200000d8 	.word	0x200000d8

080004e4 <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80004e8:	f000 fe0c 	bl	8001104 <getRxData>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <Usart2_RX_Callback+0x28>)
 80004f2:	701a      	strb	r2, [r3, #0]
	siuu = !(siuu);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <Usart2_RX_Callback+0x2c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf0c      	ite	eq
 80004fc:	2301      	moveq	r3, #1
 80004fe:	2300      	movne	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <Usart2_RX_Callback+0x2c>)
 8000506:	701a      	strb	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000199 	.word	0x20000199
 8000510:	20000198 	.word	0x20000198

08000514 <Usart2_TX_Callback>:

void Usart2_TX_Callback(void){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	__NOP();
 8000518:	bf00      	nop
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <_sbrk+0x5c>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_sbrk+0x60>)
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x64>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <_sbrk+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	429a      	cmp	r2, r3
 8000552:	d207      	bcs.n	8000564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000554:	f000 fe7a 	bl	800124c <__errno>
 8000558:	4603      	mov	r3, r0
 800055a:	220c      	movs	r2, #12
 800055c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	e009      	b.n	8000578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <_sbrk+0x64>)
 8000574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20020000 	.word	0x20020000
 8000584:	00000400 	.word	0x00000400
 8000588:	2000019c 	.word	0x2000019c
 800058c:	200001b8 	.word	0x200001b8

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 fe4b 	bl	8001258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fe5d 	bl	8000280 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80005d4:	08001bd8 	.word	0x08001bd8
  ldr r2, =_sbss
 80005d8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80005dc:	200001b8 	.word	0x200001b8

080005e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>
	...

080005e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db0b      	blt.n	800060e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 021f 	and.w	r2, r3, #31
 80005fc:	4906      	ldr	r1, [pc, #24]	; (8000618 <__NVIC_EnableIRQ+0x34>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	2001      	movs	r0, #1
 8000606:	fa00 f202 	lsl.w	r2, r0, r2
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100

0800061c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	db0a      	blt.n	8000646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	490c      	ldr	r1, [pc, #48]	; (8000668 <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	0112      	lsls	r2, r2, #4
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	440b      	add	r3, r1
 8000640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000644:	e00a      	b.n	800065c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	0112      	lsls	r2, r2, #4
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	440b      	add	r3, r1
 800065a:	761a      	strb	r2, [r3, #24]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a46      	ldr	r2, [pc, #280]	; (8000798 <BTimer_Config+0x128>)
 800067e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800068c:	d106      	bne.n	800069c <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800068e:	4b43      	ldr	r3, [pc, #268]	; (800079c <BTimer_Config+0x12c>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a42      	ldr	r2, [pc, #264]	; (800079c <BTimer_Config+0x12c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	e016      	b.n	80006ca <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a3f      	ldr	r2, [pc, #252]	; (80007a0 <BTimer_Config+0x130>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80006a6:	4b3d      	ldr	r3, [pc, #244]	; (800079c <BTimer_Config+0x12c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a3c      	ldr	r2, [pc, #240]	; (800079c <BTimer_Config+0x12c>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	e00a      	b.n	80006ca <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <BTimer_Config+0x134>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d105      	bne.n	80006ca <BTimer_Config+0x5a>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <BTimer_Config+0x12c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a36      	ldr	r2, [pc, #216]	; (800079c <BTimer_Config+0x12c>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d10c      	bne.n	80006ec <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f022 0210 	bic.w	r2, r2, #16
 80006e0:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
 80006ea:	e00d      	b.n	8000708 <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f042 0210 	orr.w	r2, r2, #16
 80006fa:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3a01      	subs	r2, #1
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	88db      	ldrh	r3, [r3, #6]
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3a01      	subs	r2, #1
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0201 	orr.w	r2, r2, #1
 800073e:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000748:	d107      	bne.n	800075a <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 800074a:	201c      	movs	r0, #28
 800074c:	f7ff ff4a 	bl	80005e4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000750:	2103      	movs	r1, #3
 8000752:	201c      	movs	r0, #28
 8000754:	f7ff ff62 	bl	800061c <__NVIC_SetPriority>
 8000758:	e018      	b.n	800078c <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <BTimer_Config+0x130>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d107      	bne.n	8000774 <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000764:	201d      	movs	r0, #29
 8000766:	f7ff ff3d 	bl	80005e4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 800076a:	2103      	movs	r1, #3
 800076c:	201d      	movs	r0, #29
 800076e:	f7ff ff55 	bl	800061c <__NVIC_SetPriority>
 8000772:	e00b      	b.n	800078c <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <BTimer_Config+0x134>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 800077e:	201e      	movs	r0, #30
 8000780:	f7ff ff30 	bl	80005e4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 8000784:	2103      	movs	r1, #3
 8000786:	201e      	movs	r0, #30
 8000788:	f7ff ff48 	bl	800061c <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800078c:	b662      	cpsie	i
}
 800078e:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001a0 	.word	0x200001a0
 800079c:	40023800 	.word	0x40023800
 80007a0:	40000400 	.word	0x40000400
 80007a4:	40000800 	.word	0x40000800

080007a8 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	 __NOP();
 80007ac:	bf00      	nop
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
	 __NOP();
 80007ba:	bf00      	nop
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80007c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	f023 0301 	bic.w	r3, r3, #1
 80007d6:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 80007d8:	f7ff fe74 	bl	80004c4 <BTimer2_Callback>

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <TIM3_IRQHandler+0x18>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <TIM3_IRQHandler+0x18>)
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 80007f0:	f7ff ffda 	bl	80007a8 <BTimer3_Callback>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40000400 	.word	0x40000400

080007fc <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <TIM4_IRQHandler+0x18>)
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <TIM4_IRQHandler+0x18>)
 8000806:	f023 0301 	bic.w	r3, r3, #1
 800080a:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 800080c:	f7ff ffd3 	bl	80007b6 <BTimer4_Callback>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40000800 	.word	0x40000800

08000818 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a87      	ldr	r2, [pc, #540]	; (8000a4c <GPIO_Config+0x234>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000832:	4b87      	ldr	r3, [pc, #540]	; (8000a50 <GPIO_Config+0x238>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a86      	ldr	r2, [pc, #536]	; (8000a50 <GPIO_Config+0x238>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	e03a      	b.n	80008b6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a83      	ldr	r2, [pc, #524]	; (8000a54 <GPIO_Config+0x23c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800084a:	4b81      	ldr	r3, [pc, #516]	; (8000a50 <GPIO_Config+0x238>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a80      	ldr	r2, [pc, #512]	; (8000a50 <GPIO_Config+0x238>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	e02e      	b.n	80008b6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a7e      	ldr	r2, [pc, #504]	; (8000a58 <GPIO_Config+0x240>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000862:	4b7b      	ldr	r3, [pc, #492]	; (8000a50 <GPIO_Config+0x238>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a7a      	ldr	r2, [pc, #488]	; (8000a50 <GPIO_Config+0x238>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	e022      	b.n	80008b6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a79      	ldr	r2, [pc, #484]	; (8000a5c <GPIO_Config+0x244>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800087a:	4b75      	ldr	r3, [pc, #468]	; (8000a50 <GPIO_Config+0x238>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a74      	ldr	r2, [pc, #464]	; (8000a50 <GPIO_Config+0x238>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	e016      	b.n	80008b6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a74      	ldr	r2, [pc, #464]	; (8000a60 <GPIO_Config+0x248>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000892:	4b6f      	ldr	r3, [pc, #444]	; (8000a50 <GPIO_Config+0x238>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a6e      	ldr	r2, [pc, #440]	; (8000a50 <GPIO_Config+0x238>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	e00a      	b.n	80008b6 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6f      	ldr	r2, [pc, #444]	; (8000a64 <GPIO_Config+0x24c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d105      	bne.n	80008b6 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 80008aa:	4b69      	ldr	r3, [pc, #420]	; (8000a50 <GPIO_Config+0x238>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a68      	ldr	r2, [pc, #416]	; (8000a50 <GPIO_Config+0x238>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	461a      	mov	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	400a      	ands	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	4619      	mov	r1, r3
 8000912:	2301      	movs	r3, #1
 8000914:	408b      	lsls	r3, r1
 8000916:	43db      	mvns	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	400a      	ands	r2, r1
 8000920:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6859      	ldr	r1, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	430a      	orrs	r2, r1
 8000930:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	799b      	ldrb	r3, [r3, #6]
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2103      	movs	r1, #3
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6899      	ldr	r1, [r3, #8]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	430a      	orrs	r2, r1
 8000970:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	79db      	ldrb	r3, [r3, #7]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2103      	movs	r1, #3
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	400a      	ands	r2, r1
 80009a0:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68d9      	ldr	r1, [r3, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	430a      	orrs	r2, r1
 80009b0:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	795b      	ldrb	r3, [r3, #5]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d143      	bne.n	8000a42 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	d81f      	bhi.n	8000a02 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a1a      	ldr	r2, [r3, #32]
 80009d0:	210f      	movs	r1, #15
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	4619      	mov	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	400a      	ands	r2, r1
 80009e2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a1a      	ldr	r2, [r3, #32]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7a5b      	ldrb	r3, [r3, #9]
 80009ee:	4619      	mov	r1, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000a00:	e01f      	b.n	8000a42 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	3b08      	subs	r3, #8
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a12:	210f      	movs	r1, #15
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	400a      	ands	r2, r1
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7a5b      	ldrb	r3, [r3, #9]
 8000a30:	4619      	mov	r1, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40021c00 	.word	0x40021c00

08000a68 <PWM_Config>:
 */

#include "BasicTimer.h"
#include "PwmDriver.h"

void PWM_Config(PWM_Handler_t	*pPwmConfig){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]


	/* 1. Activar la señal de reloj para el periferico especifico */
		if (pPwmConfig->ptrTIMx == TIM2){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d106      	bne.n	8000a88 <PWM_Config+0x20>
			// Activamos la señal del TIM2
			RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000a7a:	4b76      	ldr	r3, [pc, #472]	; (8000c54 <PWM_Config+0x1ec>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a75      	ldr	r2, [pc, #468]	; (8000c54 <PWM_Config+0x1ec>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	e016      	b.n	8000ab6 <PWM_Config+0x4e>
		}
		else if (pPwmConfig->ptrTIMx == TIM3){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a72      	ldr	r2, [pc, #456]	; (8000c58 <PWM_Config+0x1f0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <PWM_Config+0x38>
			// Activamos la señal del TIM3
			RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000a92:	4b70      	ldr	r3, [pc, #448]	; (8000c54 <PWM_Config+0x1ec>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a6f      	ldr	r2, [pc, #444]	; (8000c54 <PWM_Config+0x1ec>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	e00a      	b.n	8000ab6 <PWM_Config+0x4e>
		}
		else if (pPwmConfig->ptrTIMx == TIM4){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a6d      	ldr	r2, [pc, #436]	; (8000c5c <PWM_Config+0x1f4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d105      	bne.n	8000ab6 <PWM_Config+0x4e>
			// Activamos la señal del TIM4
			RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000aaa:	4b6a      	ldr	r3, [pc, #424]	; (8000c54 <PWM_Config+0x1ec>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a69      	ldr	r2, [pc, #420]	; (8000c54 <PWM_Config+0x1ec>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
		}

	/* Counter used as upcounter */
	pPwmConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0210 	bic.w	r2, r2, #16
 8000ac4:	601a      	str	r2, [r3, #0]

	/* Se reincia el contador a 0 */
	pPwmConfig->ptrTIMx->CNT = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24

	/* Se configura el prescaler */
	pPwmConfig->ptrTIMx->PSC = pPwmConfig->pwmConfig.PWM_prescaler-1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	88db      	ldrh	r3, [r3, #6]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Se configura el periodo en el ARR */
	pPwmConfig->ptrTIMx->ARR = pPwmConfig->pwmConfig.PWM_period-1;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	891b      	ldrh	r3, [r3, #8]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c


	/* Se activa el contador */
	pPwmConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 0201 	orr.w	r2, r2, #1
 8000af4:	601a      	str	r2, [r3, #0]


	switch(pPwmConfig->pwmConfig.PWM_channel){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	f200 80a3 	bhi.w	8000c48 <PWM_Config+0x1e0>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <PWM_Config+0xa0>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b65 	.word	0x08000b65
 8000b10:	08000bb1 	.word	0x08000bb1
 8000b14:	08000bfd 	.word	0x08000bfd
	case CHANNEL1:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR1 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	895a      	ldrh	r2, [r3, #10]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0203 	bic.w	r2, r2, #3
 8000b30:	619a      	str	r2, [r3, #24]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	699a      	ldr	r2, [r3, #24]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0208 	orr.w	r2, r2, #8
 8000b40:	619a      	str	r2, [r3, #24]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000b50:	619a      	str	r2, [r3, #24]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a1a      	ldr	r2, [r3, #32]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0201 	orr.w	r2, r2, #1
 8000b60:	621a      	str	r2, [r3, #32]
		break;
 8000b62:	e072      	b.n	8000c4a <PWM_Config+0x1e2>
	}
	case CHANNEL2:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR2 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	895a      	ldrh	r2, [r3, #10]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	639a      	str	r2, [r3, #56]	; 0x38
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b7c:	619a      	str	r2, [r3, #24]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	699a      	ldr	r2, [r3, #24]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b8c:	619a      	str	r2, [r3, #24]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	699a      	ldr	r2, [r3, #24]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000b9c:	619a      	str	r2, [r3, #24]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a1a      	ldr	r2, [r3, #32]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0210 	orr.w	r2, r2, #16
 8000bac:	621a      	str	r2, [r3, #32]
		break;
 8000bae:	e04c      	b.n	8000c4a <PWM_Config+0x1e2>
	}
	case CHANNEL3:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR3 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	895a      	ldrh	r2, [r3, #10]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69da      	ldr	r2, [r3, #28]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0203 	bic.w	r2, r2, #3
 8000bc8:	61da      	str	r2, [r3, #28]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	69da      	ldr	r2, [r3, #28]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f042 0208 	orr.w	r2, r2, #8
 8000bd8:	61da      	str	r2, [r3, #28]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000be8:	61da      	str	r2, [r3, #28]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6a1a      	ldr	r2, [r3, #32]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bf8:	621a      	str	r2, [r3, #32]
		break;
 8000bfa:	e026      	b.n	8000c4a <PWM_Config+0x1e2>
	}
	case CHANNEL4:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR4 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	895a      	ldrh	r2, [r3, #10]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	69da      	ldr	r2, [r3, #28]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c14:	61da      	str	r2, [r3, #28]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	69da      	ldr	r2, [r3, #28]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c24:	61da      	str	r2, [r3, #28]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	69da      	ldr	r2, [r3, #28]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000c34:	61da      	str	r2, [r3, #28]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a1a      	ldr	r2, [r3, #32]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c44:	621a      	str	r2, [r3, #32]
		break;
 8000c46:	e000      	b.n	8000c4a <PWM_Config+0x1e2>
	}
	default:
	{
		break;
 8000c48:	bf00      	nop
	}
	}

}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40000400 	.word	0x40000400
 8000c5c:	40000800 	.word	0x40000800

08000c60 <setPwmDuty>:

void setPwmDuty(PWM_Handler_t *pPwmConfig, uint16_t newDuty){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
	pPwmConfig->pwmConfig.PWM_dutyCycle = newDuty;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	815a      	strh	r2, [r3, #10]
	switch(pPwmConfig->pwmConfig.PWM_channel){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d823      	bhi.n	8000cc4 <setPwmDuty+0x64>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <setPwmDuty+0x24>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	08000c95 	.word	0x08000c95
 8000c88:	08000ca1 	.word	0x08000ca1
 8000c8c:	08000cad 	.word	0x08000cad
 8000c90:	08000cb9 	.word	0x08000cb9
		case CHANNEL1:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR1 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	895a      	ldrh	r2, [r3, #10]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000c9e:	e012      	b.n	8000cc6 <setPwmDuty+0x66>
		}
		case CHANNEL2:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR2 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	895a      	ldrh	r2, [r3, #10]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000caa:	e00c      	b.n	8000cc6 <setPwmDuty+0x66>
		}
		case CHANNEL3:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR3 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	895a      	ldrh	r2, [r3, #10]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000cb6:	e006      	b.n	8000cc6 <setPwmDuty+0x66>
		}
		case CHANNEL4:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR4 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	895a      	ldrh	r2, [r3, #10]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000cc2:	e000      	b.n	8000cc6 <setPwmDuty+0x66>
		}
		default:
		{
			break;
 8000cc4:	bf00      	nop
		}
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <__NVIC_EnableIRQ>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_DisableIRQ>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db12      	blt.n	8000d40 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	490a      	ldr	r1, [pc, #40]	; (8000d4c <__NVIC_DisableIRQ+0x44>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	3320      	adds	r3, #32
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d34:	f3bf 8f4f 	dsb	sy
}
 8000d38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d3a:	f3bf 8f6f 	isb	sy
}
 8000d3e:	bf00      	nop
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a88      	ldr	r2, [pc, #544]	; (8000f80 <USART_Config+0x230>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <USART_Config+0x234>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <USART_Config+0x234>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	e016      	b.n	8000d9e <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a84      	ldr	r2, [pc, #528]	; (8000f88 <USART_Config+0x238>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d106      	bne.n	8000d88 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000d7a:	4b82      	ldr	r3, [pc, #520]	; (8000f84 <USART_Config+0x234>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a81      	ldr	r2, [pc, #516]	; (8000f84 <USART_Config+0x234>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	e00a      	b.n	8000d9e <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a7f      	ldr	r2, [pc, #508]	; (8000f8c <USART_Config+0x23c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d105      	bne.n	8000d9e <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000d92:	4b7c      	ldr	r3, [pc, #496]	; (8000f84 <USART_Config+0x234>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a7b      	ldr	r2, [pc, #492]	; (8000f84 <USART_Config+0x234>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	79db      	ldrb	r3, [r3, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d023      	beq.n	8000dfe <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dc4:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	79db      	ldrb	r3, [r3, #7]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d10b      	bne.n	8000de6 <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ddc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	719a      	strb	r2, [r3, #6]
 8000de4:	e013      	b.n	8000e0e <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000df4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	719a      	strb	r2, [r3, #6]
 8000dfc:	e007      	b.n	8000e0e <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e0c:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	799b      	ldrb	r3, [r3, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	e007      	b.n	8000e38 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e36:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7a1b      	ldrb	r3, [r3, #8]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d82f      	bhi.n	8000ea0 <USART_Config+0x150>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <USART_Config+0xf8>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e59 	.word	0x08000e59
 8000e4c:	08000e6b 	.word	0x08000e6b
 8000e50:	08000e7d 	.word	0x08000e7d
 8000e54:	08000e8f 	.word	0x08000e8f
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e66:	611a      	str	r2, [r3, #16]
		break;
 8000e68:	e01a      	b.n	8000ea0 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e78:	611a      	str	r2, [r3, #16]
		break;
 8000e7a:	e011      	b.n	8000ea0 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e8a:	611a      	str	r2, [r3, #16]
		break;
 8000e8c:	e008      	b.n	8000ea0 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e9c:	611a      	str	r2, [r3, #16]
		break;
 8000e9e:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	795b      	ldrb	r3, [r3, #5]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f240 6283 	movw	r2, #1667	; 0x683
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	e01a      	b.n	8000eea <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	795b      	ldrb	r3, [r3, #5]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f240 3241 	movw	r2, #833	; 0x341
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	e010      	b.n	8000eea <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	795b      	ldrb	r3, [r3, #5]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d104      	bne.n	8000eda <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	228b      	movs	r2, #139	; 0x8b
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	e007      	b.n	8000eea <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d103      	bne.n	8000eea <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2211      	movs	r2, #17
 8000ee8:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d84e      	bhi.n	8000f90 <USART_Config+0x240>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <USART_Config+0x1a8>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f09 	.word	0x08000f09
 8000efc:	08000f1b 	.word	0x08000f1b
 8000f00:	08000f2d 	.word	0x08000f2d
 8000f04:	08000f4f 	.word	0x08000f4f
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0208 	orr.w	r2, r2, #8
 8000f16:	60da      	str	r2, [r3, #12]
		break;
 8000f18:	e053      	b.n	8000fc2 <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f042 0204 	orr.w	r2, r2, #4
 8000f28:	60da      	str	r2, [r3, #12]
		break;
 8000f2a:	e04a      	b.n	8000fc2 <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0208 	orr.w	r2, r2, #8
 8000f3a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0204 	orr.w	r2, r2, #4
 8000f4a:	60da      	str	r2, [r3, #12]
		break;
 8000f4c:	e039      	b.n	8000fc2 <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0208 	bic.w	r2, r2, #8
 8000f5c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0204 	bic.w	r2, r2, #4
 8000f6c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f7c:	60da      	str	r2, [r3, #12]
		break;
 8000f7e:	e020      	b.n	8000fc2 <USART_Config+0x272>
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0208 	bic.w	r2, r2, #8
 8000f9e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fbe:	60da      	str	r2, [r3, #12]
		break;
 8000fc0:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d007      	beq.n	8000fda <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fd8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fda:	b672      	cpsid	i
}
 8000fdc:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fec:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7a5b      	ldrb	r3, [r3, #9]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d01a      	beq.n	800102c <USART_Config+0x2dc>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <USART_Config+0x31c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d103      	bne.n	8001008 <USART_Config+0x2b8>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001000:	2025      	movs	r0, #37	; 0x25
 8001002:	f7ff fe65 	bl	8000cd0 <__NVIC_EnableIRQ>
 8001006:	e01a      	b.n	800103e <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a18      	ldr	r2, [pc, #96]	; (8001070 <USART_Config+0x320>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d103      	bne.n	800101a <USART_Config+0x2ca>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8001012:	2026      	movs	r0, #38	; 0x26
 8001014:	f7ff fe5c 	bl	8000cd0 <__NVIC_EnableIRQ>
 8001018:	e011      	b.n	800103e <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <USART_Config+0x324>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d10c      	bne.n	800103e <USART_Config+0x2ee>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001024:	2047      	movs	r0, #71	; 0x47
 8001026:	f7ff fe53 	bl	8000cd0 <__NVIC_EnableIRQ>
 800102a:	e008      	b.n	800103e <USART_Config+0x2ee>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 800102c:	2025      	movs	r0, #37	; 0x25
 800102e:	f7ff fe6b 	bl	8000d08 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 8001032:	2026      	movs	r0, #38	; 0x26
 8001034:	f7ff fe68 	bl	8000d08 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 8001038:	2047      	movs	r0, #71	; 0x47
 800103a:	f7ff fe65 	bl	8000d08 <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7a5b      	ldrb	r3, [r3, #9]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d003      	beq.n	800104e <USART_Config+0x2fe>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7a5b      	ldrb	r3, [r3, #9]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d107      	bne.n	800105e <USART_Config+0x30e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0220 	orr.w	r2, r2, #32
 800105c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800105e:	b662      	cpsie	i
}
 8001060:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40011000 	.word	0x40011000
 8001070:	40004400 	.word	0x40004400
 8001074:	40011400 	.word	0x40011400

08001078 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7a5b      	ldrb	r3, [r3, #9]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <writeChar+0x1c>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a5b      	ldrb	r3, [r3, #9]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d10c      	bne.n	80010ae <writeChar+0x36>
		auxDataToSend = dataToSend;
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <writeChar+0x58>)
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	e00c      	b.n	80010c6 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 80010ac:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f7      	beq.n	80010ac <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	78fa      	ldrb	r2, [r7, #3]
 80010c2:	605a      	str	r2, [r3, #4]
	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	200001a5 	.word	0x200001a5

080010d4 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80010de:	e008      	b.n	80010f2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffc6 	bl	8001078 <writeChar>
		msgToSend++;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f2      	bne.n	80010e0 <writeMsg+0xc>
	}
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	return auxRxData;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <getRxData+0x10>)
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	200001a4 	.word	0x200001a4

08001118 <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	 __NOP();
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_TX_Callback(void){
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
	 __NOP();
 800112a:	bf00      	nop
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	 __NOP();
 8001138:	bf00      	nop
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
	 __NOP();
 8001146:	bf00      	nop
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <USART1_IRQHandler+0x48>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <USART1_IRQHandler+0x48>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <USART1_IRQHandler+0x4c>)
 8001168:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 800116a:	f7ff ffe3 	bl	8001134 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 800116e:	e011      	b.n	8001194 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <USART1_IRQHandler+0x48>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <USART1_IRQHandler+0x50>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <USART1_IRQHandler+0x48>)
 8001182:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <USART1_IRQHandler+0x48>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <USART1_IRQHandler+0x48>)
 800118a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800118e:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 8001190:	f7ff ffc2 	bl	8001118 <Usart1_TX_Callback>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40011000 	.word	0x40011000
 800119c:	200001a4 	.word	0x200001a4
 80011a0:	200001a5 	.word	0x200001a5

080011a4 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <USART2_IRQHandler+0x48>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d007      	beq.n	80011c4 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <USART2_IRQHandler+0x48>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <USART2_IRQHandler+0x4c>)
 80011bc:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 80011be:	f7ff f991 	bl	80004e4 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 80011c2:	e011      	b.n	80011e8 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <USART2_IRQHandler+0x48>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <USART2_IRQHandler+0x50>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <USART2_IRQHandler+0x48>)
 80011d6:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <USART2_IRQHandler+0x48>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <USART2_IRQHandler+0x48>)
 80011de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011e2:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80011e4:	f7ff f996 	bl	8000514 <Usart2_TX_Callback>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40004400 	.word	0x40004400
 80011f0:	200001a4 	.word	0x200001a4
 80011f4:	200001a5 	.word	0x200001a5

080011f8 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <USART6_IRQHandler+0x48>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <USART6_IRQHandler+0x48>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <USART6_IRQHandler+0x4c>)
 8001210:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 8001212:	f7ff ff96 	bl	8001142 <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 8001216:	e011      	b.n	800123c <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <USART6_IRQHandler+0x48>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <USART6_IRQHandler+0x50>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <USART6_IRQHandler+0x48>)
 800122a:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <USART6_IRQHandler+0x48>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <USART6_IRQHandler+0x48>)
 8001232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001236:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8001238:	f7ff ff75 	bl	8001126 <Usart6_TX_Callback>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40011400 	.word	0x40011400
 8001244:	200001a4 	.word	0x200001a4
 8001248:	200001a5 	.word	0x200001a5

0800124c <__errno>:
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <__errno+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000040 	.word	0x20000040

08001258 <__libc_init_array>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4d0d      	ldr	r5, [pc, #52]	; (8001290 <__libc_init_array+0x38>)
 800125c:	4c0d      	ldr	r4, [pc, #52]	; (8001294 <__libc_init_array+0x3c>)
 800125e:	1b64      	subs	r4, r4, r5
 8001260:	10a4      	asrs	r4, r4, #2
 8001262:	2600      	movs	r6, #0
 8001264:	42a6      	cmp	r6, r4
 8001266:	d109      	bne.n	800127c <__libc_init_array+0x24>
 8001268:	4d0b      	ldr	r5, [pc, #44]	; (8001298 <__libc_init_array+0x40>)
 800126a:	4c0c      	ldr	r4, [pc, #48]	; (800129c <__libc_init_array+0x44>)
 800126c:	f000 fc84 	bl	8001b78 <_init>
 8001270:	1b64      	subs	r4, r4, r5
 8001272:	10a4      	asrs	r4, r4, #2
 8001274:	2600      	movs	r6, #0
 8001276:	42a6      	cmp	r6, r4
 8001278:	d105      	bne.n	8001286 <__libc_init_array+0x2e>
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001280:	4798      	blx	r3
 8001282:	3601      	adds	r6, #1
 8001284:	e7ee      	b.n	8001264 <__libc_init_array+0xc>
 8001286:	f855 3b04 	ldr.w	r3, [r5], #4
 800128a:	4798      	blx	r3
 800128c:	3601      	adds	r6, #1
 800128e:	e7f2      	b.n	8001276 <__libc_init_array+0x1e>
 8001290:	08001bd0 	.word	0x08001bd0
 8001294:	08001bd0 	.word	0x08001bd0
 8001298:	08001bd0 	.word	0x08001bd0
 800129c:	08001bd4 	.word	0x08001bd4

080012a0 <siprintf>:
 80012a0:	b40e      	push	{r1, r2, r3}
 80012a2:	b500      	push	{lr}
 80012a4:	b09c      	sub	sp, #112	; 0x70
 80012a6:	ab1d      	add	r3, sp, #116	; 0x74
 80012a8:	9002      	str	r0, [sp, #8]
 80012aa:	9006      	str	r0, [sp, #24]
 80012ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <siprintf+0x38>)
 80012b2:	9107      	str	r1, [sp, #28]
 80012b4:	9104      	str	r1, [sp, #16]
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <siprintf+0x3c>)
 80012b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80012bc:	9105      	str	r1, [sp, #20]
 80012be:	6800      	ldr	r0, [r0, #0]
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	a902      	add	r1, sp, #8
 80012c4:	f000 f868 	bl	8001398 <_svfiprintf_r>
 80012c8:	9b02      	ldr	r3, [sp, #8]
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	b01c      	add	sp, #112	; 0x70
 80012d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80012d4:	b003      	add	sp, #12
 80012d6:	4770      	bx	lr
 80012d8:	20000040 	.word	0x20000040
 80012dc:	ffff0208 	.word	0xffff0208

080012e0 <__ssputs_r>:
 80012e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e4:	688e      	ldr	r6, [r1, #8]
 80012e6:	429e      	cmp	r6, r3
 80012e8:	4682      	mov	sl, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	4690      	mov	r8, r2
 80012ee:	461f      	mov	r7, r3
 80012f0:	d838      	bhi.n	8001364 <__ssputs_r+0x84>
 80012f2:	898a      	ldrh	r2, [r1, #12]
 80012f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012f8:	d032      	beq.n	8001360 <__ssputs_r+0x80>
 80012fa:	6825      	ldr	r5, [r4, #0]
 80012fc:	6909      	ldr	r1, [r1, #16]
 80012fe:	eba5 0901 	sub.w	r9, r5, r1
 8001302:	6965      	ldr	r5, [r4, #20]
 8001304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800130c:	3301      	adds	r3, #1
 800130e:	444b      	add	r3, r9
 8001310:	106d      	asrs	r5, r5, #1
 8001312:	429d      	cmp	r5, r3
 8001314:	bf38      	it	cc
 8001316:	461d      	movcc	r5, r3
 8001318:	0553      	lsls	r3, r2, #21
 800131a:	d531      	bpl.n	8001380 <__ssputs_r+0xa0>
 800131c:	4629      	mov	r1, r5
 800131e:	f000 fb61 	bl	80019e4 <_malloc_r>
 8001322:	4606      	mov	r6, r0
 8001324:	b950      	cbnz	r0, 800133c <__ssputs_r+0x5c>
 8001326:	230c      	movs	r3, #12
 8001328:	f8ca 3000 	str.w	r3, [sl]
 800132c:	89a3      	ldrh	r3, [r4, #12]
 800132e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001332:	81a3      	strh	r3, [r4, #12]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133c:	6921      	ldr	r1, [r4, #16]
 800133e:	464a      	mov	r2, r9
 8001340:	f000 fabe 	bl	80018c0 <memcpy>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800134a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	6126      	str	r6, [r4, #16]
 8001352:	6165      	str	r5, [r4, #20]
 8001354:	444e      	add	r6, r9
 8001356:	eba5 0509 	sub.w	r5, r5, r9
 800135a:	6026      	str	r6, [r4, #0]
 800135c:	60a5      	str	r5, [r4, #8]
 800135e:	463e      	mov	r6, r7
 8001360:	42be      	cmp	r6, r7
 8001362:	d900      	bls.n	8001366 <__ssputs_r+0x86>
 8001364:	463e      	mov	r6, r7
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	4632      	mov	r2, r6
 800136a:	4641      	mov	r1, r8
 800136c:	f000 fab6 	bl	80018dc <memmove>
 8001370:	68a3      	ldr	r3, [r4, #8]
 8001372:	1b9b      	subs	r3, r3, r6
 8001374:	60a3      	str	r3, [r4, #8]
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	4433      	add	r3, r6
 800137a:	6023      	str	r3, [r4, #0]
 800137c:	2000      	movs	r0, #0
 800137e:	e7db      	b.n	8001338 <__ssputs_r+0x58>
 8001380:	462a      	mov	r2, r5
 8001382:	f000 fba3 	bl	8001acc <_realloc_r>
 8001386:	4606      	mov	r6, r0
 8001388:	2800      	cmp	r0, #0
 800138a:	d1e1      	bne.n	8001350 <__ssputs_r+0x70>
 800138c:	6921      	ldr	r1, [r4, #16]
 800138e:	4650      	mov	r0, sl
 8001390:	f000 fabe 	bl	8001910 <_free_r>
 8001394:	e7c7      	b.n	8001326 <__ssputs_r+0x46>
	...

08001398 <_svfiprintf_r>:
 8001398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800139c:	4698      	mov	r8, r3
 800139e:	898b      	ldrh	r3, [r1, #12]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	b09d      	sub	sp, #116	; 0x74
 80013a4:	4607      	mov	r7, r0
 80013a6:	460d      	mov	r5, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	d50e      	bpl.n	80013ca <_svfiprintf_r+0x32>
 80013ac:	690b      	ldr	r3, [r1, #16]
 80013ae:	b963      	cbnz	r3, 80013ca <_svfiprintf_r+0x32>
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	f000 fb17 	bl	80019e4 <_malloc_r>
 80013b6:	6028      	str	r0, [r5, #0]
 80013b8:	6128      	str	r0, [r5, #16]
 80013ba:	b920      	cbnz	r0, 80013c6 <_svfiprintf_r+0x2e>
 80013bc:	230c      	movs	r3, #12
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	e0d1      	b.n	800156a <_svfiprintf_r+0x1d2>
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	616b      	str	r3, [r5, #20]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9309      	str	r3, [sp, #36]	; 0x24
 80013ce:	2320      	movs	r3, #32
 80013d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80013d8:	2330      	movs	r3, #48	; 0x30
 80013da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001584 <_svfiprintf_r+0x1ec>
 80013de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013e2:	f04f 0901 	mov.w	r9, #1
 80013e6:	4623      	mov	r3, r4
 80013e8:	469a      	mov	sl, r3
 80013ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013ee:	b10a      	cbz	r2, 80013f4 <_svfiprintf_r+0x5c>
 80013f0:	2a25      	cmp	r2, #37	; 0x25
 80013f2:	d1f9      	bne.n	80013e8 <_svfiprintf_r+0x50>
 80013f4:	ebba 0b04 	subs.w	fp, sl, r4
 80013f8:	d00b      	beq.n	8001412 <_svfiprintf_r+0x7a>
 80013fa:	465b      	mov	r3, fp
 80013fc:	4622      	mov	r2, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	4638      	mov	r0, r7
 8001402:	f7ff ff6d 	bl	80012e0 <__ssputs_r>
 8001406:	3001      	adds	r0, #1
 8001408:	f000 80aa 	beq.w	8001560 <_svfiprintf_r+0x1c8>
 800140c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800140e:	445a      	add	r2, fp
 8001410:	9209      	str	r2, [sp, #36]	; 0x24
 8001412:	f89a 3000 	ldrb.w	r3, [sl]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80a2 	beq.w	8001560 <_svfiprintf_r+0x1c8>
 800141c:	2300      	movs	r3, #0
 800141e:	f04f 32ff 	mov.w	r2, #4294967295
 8001422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001426:	f10a 0a01 	add.w	sl, sl, #1
 800142a:	9304      	str	r3, [sp, #16]
 800142c:	9307      	str	r3, [sp, #28]
 800142e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001432:	931a      	str	r3, [sp, #104]	; 0x68
 8001434:	4654      	mov	r4, sl
 8001436:	2205      	movs	r2, #5
 8001438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800143c:	4851      	ldr	r0, [pc, #324]	; (8001584 <_svfiprintf_r+0x1ec>)
 800143e:	f7fe fecf 	bl	80001e0 <memchr>
 8001442:	9a04      	ldr	r2, [sp, #16]
 8001444:	b9d8      	cbnz	r0, 800147e <_svfiprintf_r+0xe6>
 8001446:	06d0      	lsls	r0, r2, #27
 8001448:	bf44      	itt	mi
 800144a:	2320      	movmi	r3, #32
 800144c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001450:	0711      	lsls	r1, r2, #28
 8001452:	bf44      	itt	mi
 8001454:	232b      	movmi	r3, #43	; 0x2b
 8001456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800145a:	f89a 3000 	ldrb.w	r3, [sl]
 800145e:	2b2a      	cmp	r3, #42	; 0x2a
 8001460:	d015      	beq.n	800148e <_svfiprintf_r+0xf6>
 8001462:	9a07      	ldr	r2, [sp, #28]
 8001464:	4654      	mov	r4, sl
 8001466:	2000      	movs	r0, #0
 8001468:	f04f 0c0a 	mov.w	ip, #10
 800146c:	4621      	mov	r1, r4
 800146e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001472:	3b30      	subs	r3, #48	; 0x30
 8001474:	2b09      	cmp	r3, #9
 8001476:	d94e      	bls.n	8001516 <_svfiprintf_r+0x17e>
 8001478:	b1b0      	cbz	r0, 80014a8 <_svfiprintf_r+0x110>
 800147a:	9207      	str	r2, [sp, #28]
 800147c:	e014      	b.n	80014a8 <_svfiprintf_r+0x110>
 800147e:	eba0 0308 	sub.w	r3, r0, r8
 8001482:	fa09 f303 	lsl.w	r3, r9, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	9304      	str	r3, [sp, #16]
 800148a:	46a2      	mov	sl, r4
 800148c:	e7d2      	b.n	8001434 <_svfiprintf_r+0x9c>
 800148e:	9b03      	ldr	r3, [sp, #12]
 8001490:	1d19      	adds	r1, r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	9103      	str	r1, [sp, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	bfbb      	ittet	lt
 800149a:	425b      	neglt	r3, r3
 800149c:	f042 0202 	orrlt.w	r2, r2, #2
 80014a0:	9307      	strge	r3, [sp, #28]
 80014a2:	9307      	strlt	r3, [sp, #28]
 80014a4:	bfb8      	it	lt
 80014a6:	9204      	strlt	r2, [sp, #16]
 80014a8:	7823      	ldrb	r3, [r4, #0]
 80014aa:	2b2e      	cmp	r3, #46	; 0x2e
 80014ac:	d10c      	bne.n	80014c8 <_svfiprintf_r+0x130>
 80014ae:	7863      	ldrb	r3, [r4, #1]
 80014b0:	2b2a      	cmp	r3, #42	; 0x2a
 80014b2:	d135      	bne.n	8001520 <_svfiprintf_r+0x188>
 80014b4:	9b03      	ldr	r3, [sp, #12]
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	9203      	str	r2, [sp, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bfb8      	it	lt
 80014c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80014c4:	3402      	adds	r4, #2
 80014c6:	9305      	str	r3, [sp, #20]
 80014c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001588 <_svfiprintf_r+0x1f0>
 80014cc:	7821      	ldrb	r1, [r4, #0]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4650      	mov	r0, sl
 80014d2:	f7fe fe85 	bl	80001e0 <memchr>
 80014d6:	b140      	cbz	r0, 80014ea <_svfiprintf_r+0x152>
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	eba0 000a 	sub.w	r0, r0, sl
 80014de:	fa03 f000 	lsl.w	r0, r3, r0
 80014e2:	9b04      	ldr	r3, [sp, #16]
 80014e4:	4303      	orrs	r3, r0
 80014e6:	3401      	adds	r4, #1
 80014e8:	9304      	str	r3, [sp, #16]
 80014ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ee:	4827      	ldr	r0, [pc, #156]	; (800158c <_svfiprintf_r+0x1f4>)
 80014f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014f4:	2206      	movs	r2, #6
 80014f6:	f7fe fe73 	bl	80001e0 <memchr>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d038      	beq.n	8001570 <_svfiprintf_r+0x1d8>
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <_svfiprintf_r+0x1f8>)
 8001500:	bb1b      	cbnz	r3, 800154a <_svfiprintf_r+0x1b2>
 8001502:	9b03      	ldr	r3, [sp, #12]
 8001504:	3307      	adds	r3, #7
 8001506:	f023 0307 	bic.w	r3, r3, #7
 800150a:	3308      	adds	r3, #8
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001510:	4433      	add	r3, r6
 8001512:	9309      	str	r3, [sp, #36]	; 0x24
 8001514:	e767      	b.n	80013e6 <_svfiprintf_r+0x4e>
 8001516:	fb0c 3202 	mla	r2, ip, r2, r3
 800151a:	460c      	mov	r4, r1
 800151c:	2001      	movs	r0, #1
 800151e:	e7a5      	b.n	800146c <_svfiprintf_r+0xd4>
 8001520:	2300      	movs	r3, #0
 8001522:	3401      	adds	r4, #1
 8001524:	9305      	str	r3, [sp, #20]
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 0c0a 	mov.w	ip, #10
 800152c:	4620      	mov	r0, r4
 800152e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001532:	3a30      	subs	r2, #48	; 0x30
 8001534:	2a09      	cmp	r2, #9
 8001536:	d903      	bls.n	8001540 <_svfiprintf_r+0x1a8>
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0c5      	beq.n	80014c8 <_svfiprintf_r+0x130>
 800153c:	9105      	str	r1, [sp, #20]
 800153e:	e7c3      	b.n	80014c8 <_svfiprintf_r+0x130>
 8001540:	fb0c 2101 	mla	r1, ip, r1, r2
 8001544:	4604      	mov	r4, r0
 8001546:	2301      	movs	r3, #1
 8001548:	e7f0      	b.n	800152c <_svfiprintf_r+0x194>
 800154a:	ab03      	add	r3, sp, #12
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	462a      	mov	r2, r5
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_svfiprintf_r+0x1fc>)
 8001552:	a904      	add	r1, sp, #16
 8001554:	4638      	mov	r0, r7
 8001556:	f3af 8000 	nop.w
 800155a:	1c42      	adds	r2, r0, #1
 800155c:	4606      	mov	r6, r0
 800155e:	d1d6      	bne.n	800150e <_svfiprintf_r+0x176>
 8001560:	89ab      	ldrh	r3, [r5, #12]
 8001562:	065b      	lsls	r3, r3, #25
 8001564:	f53f af2c 	bmi.w	80013c0 <_svfiprintf_r+0x28>
 8001568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800156a:	b01d      	add	sp, #116	; 0x74
 800156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001570:	ab03      	add	r3, sp, #12
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	462a      	mov	r2, r5
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_svfiprintf_r+0x1fc>)
 8001578:	a904      	add	r1, sp, #16
 800157a:	4638      	mov	r0, r7
 800157c:	f000 f87a 	bl	8001674 <_printf_i>
 8001580:	e7eb      	b.n	800155a <_svfiprintf_r+0x1c2>
 8001582:	bf00      	nop
 8001584:	08001b9c 	.word	0x08001b9c
 8001588:	08001ba2 	.word	0x08001ba2
 800158c:	08001ba6 	.word	0x08001ba6
 8001590:	00000000 	.word	0x00000000
 8001594:	080012e1 	.word	0x080012e1

08001598 <_printf_common>:
 8001598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800159c:	4616      	mov	r6, r2
 800159e:	4699      	mov	r9, r3
 80015a0:	688a      	ldr	r2, [r1, #8]
 80015a2:	690b      	ldr	r3, [r1, #16]
 80015a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	bfb8      	it	lt
 80015ac:	4613      	movlt	r3, r2
 80015ae:	6033      	str	r3, [r6, #0]
 80015b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015b4:	4607      	mov	r7, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	b10a      	cbz	r2, 80015be <_printf_common+0x26>
 80015ba:	3301      	adds	r3, #1
 80015bc:	6033      	str	r3, [r6, #0]
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	0699      	lsls	r1, r3, #26
 80015c2:	bf42      	ittt	mi
 80015c4:	6833      	ldrmi	r3, [r6, #0]
 80015c6:	3302      	addmi	r3, #2
 80015c8:	6033      	strmi	r3, [r6, #0]
 80015ca:	6825      	ldr	r5, [r4, #0]
 80015cc:	f015 0506 	ands.w	r5, r5, #6
 80015d0:	d106      	bne.n	80015e0 <_printf_common+0x48>
 80015d2:	f104 0a19 	add.w	sl, r4, #25
 80015d6:	68e3      	ldr	r3, [r4, #12]
 80015d8:	6832      	ldr	r2, [r6, #0]
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	42ab      	cmp	r3, r5
 80015de:	dc26      	bgt.n	800162e <_printf_common+0x96>
 80015e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015e4:	1e13      	subs	r3, r2, #0
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	bf18      	it	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	0692      	lsls	r2, r2, #26
 80015ee:	d42b      	bmi.n	8001648 <_printf_common+0xb0>
 80015f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015f4:	4649      	mov	r1, r9
 80015f6:	4638      	mov	r0, r7
 80015f8:	47c0      	blx	r8
 80015fa:	3001      	adds	r0, #1
 80015fc:	d01e      	beq.n	800163c <_printf_common+0xa4>
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	68e5      	ldr	r5, [r4, #12]
 8001602:	6832      	ldr	r2, [r6, #0]
 8001604:	f003 0306 	and.w	r3, r3, #6
 8001608:	2b04      	cmp	r3, #4
 800160a:	bf08      	it	eq
 800160c:	1aad      	subeq	r5, r5, r2
 800160e:	68a3      	ldr	r3, [r4, #8]
 8001610:	6922      	ldr	r2, [r4, #16]
 8001612:	bf0c      	ite	eq
 8001614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001618:	2500      	movne	r5, #0
 800161a:	4293      	cmp	r3, r2
 800161c:	bfc4      	itt	gt
 800161e:	1a9b      	subgt	r3, r3, r2
 8001620:	18ed      	addgt	r5, r5, r3
 8001622:	2600      	movs	r6, #0
 8001624:	341a      	adds	r4, #26
 8001626:	42b5      	cmp	r5, r6
 8001628:	d11a      	bne.n	8001660 <_printf_common+0xc8>
 800162a:	2000      	movs	r0, #0
 800162c:	e008      	b.n	8001640 <_printf_common+0xa8>
 800162e:	2301      	movs	r3, #1
 8001630:	4652      	mov	r2, sl
 8001632:	4649      	mov	r1, r9
 8001634:	4638      	mov	r0, r7
 8001636:	47c0      	blx	r8
 8001638:	3001      	adds	r0, #1
 800163a:	d103      	bne.n	8001644 <_printf_common+0xac>
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001644:	3501      	adds	r5, #1
 8001646:	e7c6      	b.n	80015d6 <_printf_common+0x3e>
 8001648:	18e1      	adds	r1, r4, r3
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	2030      	movs	r0, #48	; 0x30
 800164e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001652:	4422      	add	r2, r4
 8001654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800165c:	3302      	adds	r3, #2
 800165e:	e7c7      	b.n	80015f0 <_printf_common+0x58>
 8001660:	2301      	movs	r3, #1
 8001662:	4622      	mov	r2, r4
 8001664:	4649      	mov	r1, r9
 8001666:	4638      	mov	r0, r7
 8001668:	47c0      	blx	r8
 800166a:	3001      	adds	r0, #1
 800166c:	d0e6      	beq.n	800163c <_printf_common+0xa4>
 800166e:	3601      	adds	r6, #1
 8001670:	e7d9      	b.n	8001626 <_printf_common+0x8e>
	...

08001674 <_printf_i>:
 8001674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001678:	7e0f      	ldrb	r7, [r1, #24]
 800167a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800167c:	2f78      	cmp	r7, #120	; 0x78
 800167e:	4691      	mov	r9, r2
 8001680:	4680      	mov	r8, r0
 8001682:	460c      	mov	r4, r1
 8001684:	469a      	mov	sl, r3
 8001686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800168a:	d807      	bhi.n	800169c <_printf_i+0x28>
 800168c:	2f62      	cmp	r7, #98	; 0x62
 800168e:	d80a      	bhi.n	80016a6 <_printf_i+0x32>
 8001690:	2f00      	cmp	r7, #0
 8001692:	f000 80d8 	beq.w	8001846 <_printf_i+0x1d2>
 8001696:	2f58      	cmp	r7, #88	; 0x58
 8001698:	f000 80a3 	beq.w	80017e2 <_printf_i+0x16e>
 800169c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016a4:	e03a      	b.n	800171c <_printf_i+0xa8>
 80016a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016aa:	2b15      	cmp	r3, #21
 80016ac:	d8f6      	bhi.n	800169c <_printf_i+0x28>
 80016ae:	a101      	add	r1, pc, #4	; (adr r1, 80016b4 <_printf_i+0x40>)
 80016b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016b4:	0800170d 	.word	0x0800170d
 80016b8:	08001721 	.word	0x08001721
 80016bc:	0800169d 	.word	0x0800169d
 80016c0:	0800169d 	.word	0x0800169d
 80016c4:	0800169d 	.word	0x0800169d
 80016c8:	0800169d 	.word	0x0800169d
 80016cc:	08001721 	.word	0x08001721
 80016d0:	0800169d 	.word	0x0800169d
 80016d4:	0800169d 	.word	0x0800169d
 80016d8:	0800169d 	.word	0x0800169d
 80016dc:	0800169d 	.word	0x0800169d
 80016e0:	0800182d 	.word	0x0800182d
 80016e4:	08001751 	.word	0x08001751
 80016e8:	0800180f 	.word	0x0800180f
 80016ec:	0800169d 	.word	0x0800169d
 80016f0:	0800169d 	.word	0x0800169d
 80016f4:	0800184f 	.word	0x0800184f
 80016f8:	0800169d 	.word	0x0800169d
 80016fc:	08001751 	.word	0x08001751
 8001700:	0800169d 	.word	0x0800169d
 8001704:	0800169d 	.word	0x0800169d
 8001708:	08001817 	.word	0x08001817
 800170c:	682b      	ldr	r3, [r5, #0]
 800170e:	1d1a      	adds	r2, r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	602a      	str	r2, [r5, #0]
 8001714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800171c:	2301      	movs	r3, #1
 800171e:	e0a3      	b.n	8001868 <_printf_i+0x1f4>
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	6829      	ldr	r1, [r5, #0]
 8001724:	0606      	lsls	r6, r0, #24
 8001726:	f101 0304 	add.w	r3, r1, #4
 800172a:	d50a      	bpl.n	8001742 <_printf_i+0xce>
 800172c:	680e      	ldr	r6, [r1, #0]
 800172e:	602b      	str	r3, [r5, #0]
 8001730:	2e00      	cmp	r6, #0
 8001732:	da03      	bge.n	800173c <_printf_i+0xc8>
 8001734:	232d      	movs	r3, #45	; 0x2d
 8001736:	4276      	negs	r6, r6
 8001738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800173c:	485e      	ldr	r0, [pc, #376]	; (80018b8 <_printf_i+0x244>)
 800173e:	230a      	movs	r3, #10
 8001740:	e019      	b.n	8001776 <_printf_i+0x102>
 8001742:	680e      	ldr	r6, [r1, #0]
 8001744:	602b      	str	r3, [r5, #0]
 8001746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800174a:	bf18      	it	ne
 800174c:	b236      	sxthne	r6, r6
 800174e:	e7ef      	b.n	8001730 <_printf_i+0xbc>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	6820      	ldr	r0, [r4, #0]
 8001754:	1d19      	adds	r1, r3, #4
 8001756:	6029      	str	r1, [r5, #0]
 8001758:	0601      	lsls	r1, r0, #24
 800175a:	d501      	bpl.n	8001760 <_printf_i+0xec>
 800175c:	681e      	ldr	r6, [r3, #0]
 800175e:	e002      	b.n	8001766 <_printf_i+0xf2>
 8001760:	0646      	lsls	r6, r0, #25
 8001762:	d5fb      	bpl.n	800175c <_printf_i+0xe8>
 8001764:	881e      	ldrh	r6, [r3, #0]
 8001766:	4854      	ldr	r0, [pc, #336]	; (80018b8 <_printf_i+0x244>)
 8001768:	2f6f      	cmp	r7, #111	; 0x6f
 800176a:	bf0c      	ite	eq
 800176c:	2308      	moveq	r3, #8
 800176e:	230a      	movne	r3, #10
 8001770:	2100      	movs	r1, #0
 8001772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001776:	6865      	ldr	r5, [r4, #4]
 8001778:	60a5      	str	r5, [r4, #8]
 800177a:	2d00      	cmp	r5, #0
 800177c:	bfa2      	ittt	ge
 800177e:	6821      	ldrge	r1, [r4, #0]
 8001780:	f021 0104 	bicge.w	r1, r1, #4
 8001784:	6021      	strge	r1, [r4, #0]
 8001786:	b90e      	cbnz	r6, 800178c <_printf_i+0x118>
 8001788:	2d00      	cmp	r5, #0
 800178a:	d04d      	beq.n	8001828 <_printf_i+0x1b4>
 800178c:	4615      	mov	r5, r2
 800178e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001792:	fb03 6711 	mls	r7, r3, r1, r6
 8001796:	5dc7      	ldrb	r7, [r0, r7]
 8001798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800179c:	4637      	mov	r7, r6
 800179e:	42bb      	cmp	r3, r7
 80017a0:	460e      	mov	r6, r1
 80017a2:	d9f4      	bls.n	800178e <_printf_i+0x11a>
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d10b      	bne.n	80017c0 <_printf_i+0x14c>
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	07de      	lsls	r6, r3, #31
 80017ac:	d508      	bpl.n	80017c0 <_printf_i+0x14c>
 80017ae:	6923      	ldr	r3, [r4, #16]
 80017b0:	6861      	ldr	r1, [r4, #4]
 80017b2:	4299      	cmp	r1, r3
 80017b4:	bfde      	ittt	le
 80017b6:	2330      	movle	r3, #48	; 0x30
 80017b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017c0:	1b52      	subs	r2, r2, r5
 80017c2:	6122      	str	r2, [r4, #16]
 80017c4:	f8cd a000 	str.w	sl, [sp]
 80017c8:	464b      	mov	r3, r9
 80017ca:	aa03      	add	r2, sp, #12
 80017cc:	4621      	mov	r1, r4
 80017ce:	4640      	mov	r0, r8
 80017d0:	f7ff fee2 	bl	8001598 <_printf_common>
 80017d4:	3001      	adds	r0, #1
 80017d6:	d14c      	bne.n	8001872 <_printf_i+0x1fe>
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	b004      	add	sp, #16
 80017de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e2:	4835      	ldr	r0, [pc, #212]	; (80018b8 <_printf_i+0x244>)
 80017e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80017e8:	6829      	ldr	r1, [r5, #0]
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80017f0:	6029      	str	r1, [r5, #0]
 80017f2:	061d      	lsls	r5, r3, #24
 80017f4:	d514      	bpl.n	8001820 <_printf_i+0x1ac>
 80017f6:	07df      	lsls	r7, r3, #31
 80017f8:	bf44      	itt	mi
 80017fa:	f043 0320 	orrmi.w	r3, r3, #32
 80017fe:	6023      	strmi	r3, [r4, #0]
 8001800:	b91e      	cbnz	r6, 800180a <_printf_i+0x196>
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	f023 0320 	bic.w	r3, r3, #32
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	2310      	movs	r3, #16
 800180c:	e7b0      	b.n	8001770 <_printf_i+0xfc>
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6023      	str	r3, [r4, #0]
 8001816:	2378      	movs	r3, #120	; 0x78
 8001818:	4828      	ldr	r0, [pc, #160]	; (80018bc <_printf_i+0x248>)
 800181a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800181e:	e7e3      	b.n	80017e8 <_printf_i+0x174>
 8001820:	0659      	lsls	r1, r3, #25
 8001822:	bf48      	it	mi
 8001824:	b2b6      	uxthmi	r6, r6
 8001826:	e7e6      	b.n	80017f6 <_printf_i+0x182>
 8001828:	4615      	mov	r5, r2
 800182a:	e7bb      	b.n	80017a4 <_printf_i+0x130>
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	6826      	ldr	r6, [r4, #0]
 8001830:	6961      	ldr	r1, [r4, #20]
 8001832:	1d18      	adds	r0, r3, #4
 8001834:	6028      	str	r0, [r5, #0]
 8001836:	0635      	lsls	r5, r6, #24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	d501      	bpl.n	8001840 <_printf_i+0x1cc>
 800183c:	6019      	str	r1, [r3, #0]
 800183e:	e002      	b.n	8001846 <_printf_i+0x1d2>
 8001840:	0670      	lsls	r0, r6, #25
 8001842:	d5fb      	bpl.n	800183c <_printf_i+0x1c8>
 8001844:	8019      	strh	r1, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	6123      	str	r3, [r4, #16]
 800184a:	4615      	mov	r5, r2
 800184c:	e7ba      	b.n	80017c4 <_printf_i+0x150>
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	1d1a      	adds	r2, r3, #4
 8001852:	602a      	str	r2, [r5, #0]
 8001854:	681d      	ldr	r5, [r3, #0]
 8001856:	6862      	ldr	r2, [r4, #4]
 8001858:	2100      	movs	r1, #0
 800185a:	4628      	mov	r0, r5
 800185c:	f7fe fcc0 	bl	80001e0 <memchr>
 8001860:	b108      	cbz	r0, 8001866 <_printf_i+0x1f2>
 8001862:	1b40      	subs	r0, r0, r5
 8001864:	6060      	str	r0, [r4, #4]
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	6123      	str	r3, [r4, #16]
 800186a:	2300      	movs	r3, #0
 800186c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001870:	e7a8      	b.n	80017c4 <_printf_i+0x150>
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	462a      	mov	r2, r5
 8001876:	4649      	mov	r1, r9
 8001878:	4640      	mov	r0, r8
 800187a:	47d0      	blx	sl
 800187c:	3001      	adds	r0, #1
 800187e:	d0ab      	beq.n	80017d8 <_printf_i+0x164>
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	079b      	lsls	r3, r3, #30
 8001884:	d413      	bmi.n	80018ae <_printf_i+0x23a>
 8001886:	68e0      	ldr	r0, [r4, #12]
 8001888:	9b03      	ldr	r3, [sp, #12]
 800188a:	4298      	cmp	r0, r3
 800188c:	bfb8      	it	lt
 800188e:	4618      	movlt	r0, r3
 8001890:	e7a4      	b.n	80017dc <_printf_i+0x168>
 8001892:	2301      	movs	r3, #1
 8001894:	4632      	mov	r2, r6
 8001896:	4649      	mov	r1, r9
 8001898:	4640      	mov	r0, r8
 800189a:	47d0      	blx	sl
 800189c:	3001      	adds	r0, #1
 800189e:	d09b      	beq.n	80017d8 <_printf_i+0x164>
 80018a0:	3501      	adds	r5, #1
 80018a2:	68e3      	ldr	r3, [r4, #12]
 80018a4:	9903      	ldr	r1, [sp, #12]
 80018a6:	1a5b      	subs	r3, r3, r1
 80018a8:	42ab      	cmp	r3, r5
 80018aa:	dcf2      	bgt.n	8001892 <_printf_i+0x21e>
 80018ac:	e7eb      	b.n	8001886 <_printf_i+0x212>
 80018ae:	2500      	movs	r5, #0
 80018b0:	f104 0619 	add.w	r6, r4, #25
 80018b4:	e7f5      	b.n	80018a2 <_printf_i+0x22e>
 80018b6:	bf00      	nop
 80018b8:	08001bad 	.word	0x08001bad
 80018bc:	08001bbe 	.word	0x08001bbe

080018c0 <memcpy>:
 80018c0:	440a      	add	r2, r1
 80018c2:	4291      	cmp	r1, r2
 80018c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80018c8:	d100      	bne.n	80018cc <memcpy+0xc>
 80018ca:	4770      	bx	lr
 80018cc:	b510      	push	{r4, lr}
 80018ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018d6:	4291      	cmp	r1, r2
 80018d8:	d1f9      	bne.n	80018ce <memcpy+0xe>
 80018da:	bd10      	pop	{r4, pc}

080018dc <memmove>:
 80018dc:	4288      	cmp	r0, r1
 80018de:	b510      	push	{r4, lr}
 80018e0:	eb01 0402 	add.w	r4, r1, r2
 80018e4:	d902      	bls.n	80018ec <memmove+0x10>
 80018e6:	4284      	cmp	r4, r0
 80018e8:	4623      	mov	r3, r4
 80018ea:	d807      	bhi.n	80018fc <memmove+0x20>
 80018ec:	1e43      	subs	r3, r0, #1
 80018ee:	42a1      	cmp	r1, r4
 80018f0:	d008      	beq.n	8001904 <memmove+0x28>
 80018f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80018f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80018fa:	e7f8      	b.n	80018ee <memmove+0x12>
 80018fc:	4402      	add	r2, r0
 80018fe:	4601      	mov	r1, r0
 8001900:	428a      	cmp	r2, r1
 8001902:	d100      	bne.n	8001906 <memmove+0x2a>
 8001904:	bd10      	pop	{r4, pc}
 8001906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800190a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800190e:	e7f7      	b.n	8001900 <memmove+0x24>

08001910 <_free_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4605      	mov	r5, r0
 8001914:	2900      	cmp	r1, #0
 8001916:	d041      	beq.n	800199c <_free_r+0x8c>
 8001918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800191c:	1f0c      	subs	r4, r1, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	bfb8      	it	lt
 8001922:	18e4      	addlt	r4, r4, r3
 8001924:	f000 f912 	bl	8001b4c <__malloc_lock>
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <_free_r+0x90>)
 800192a:	6813      	ldr	r3, [r2, #0]
 800192c:	b933      	cbnz	r3, 800193c <_free_r+0x2c>
 800192e:	6063      	str	r3, [r4, #4]
 8001930:	6014      	str	r4, [r2, #0]
 8001932:	4628      	mov	r0, r5
 8001934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001938:	f000 b90e 	b.w	8001b58 <__malloc_unlock>
 800193c:	42a3      	cmp	r3, r4
 800193e:	d908      	bls.n	8001952 <_free_r+0x42>
 8001940:	6820      	ldr	r0, [r4, #0]
 8001942:	1821      	adds	r1, r4, r0
 8001944:	428b      	cmp	r3, r1
 8001946:	bf01      	itttt	eq
 8001948:	6819      	ldreq	r1, [r3, #0]
 800194a:	685b      	ldreq	r3, [r3, #4]
 800194c:	1809      	addeq	r1, r1, r0
 800194e:	6021      	streq	r1, [r4, #0]
 8001950:	e7ed      	b.n	800192e <_free_r+0x1e>
 8001952:	461a      	mov	r2, r3
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	b10b      	cbz	r3, 800195c <_free_r+0x4c>
 8001958:	42a3      	cmp	r3, r4
 800195a:	d9fa      	bls.n	8001952 <_free_r+0x42>
 800195c:	6811      	ldr	r1, [r2, #0]
 800195e:	1850      	adds	r0, r2, r1
 8001960:	42a0      	cmp	r0, r4
 8001962:	d10b      	bne.n	800197c <_free_r+0x6c>
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	4401      	add	r1, r0
 8001968:	1850      	adds	r0, r2, r1
 800196a:	4283      	cmp	r3, r0
 800196c:	6011      	str	r1, [r2, #0]
 800196e:	d1e0      	bne.n	8001932 <_free_r+0x22>
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	6053      	str	r3, [r2, #4]
 8001976:	4401      	add	r1, r0
 8001978:	6011      	str	r1, [r2, #0]
 800197a:	e7da      	b.n	8001932 <_free_r+0x22>
 800197c:	d902      	bls.n	8001984 <_free_r+0x74>
 800197e:	230c      	movs	r3, #12
 8001980:	602b      	str	r3, [r5, #0]
 8001982:	e7d6      	b.n	8001932 <_free_r+0x22>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	1821      	adds	r1, r4, r0
 8001988:	428b      	cmp	r3, r1
 800198a:	bf04      	itt	eq
 800198c:	6819      	ldreq	r1, [r3, #0]
 800198e:	685b      	ldreq	r3, [r3, #4]
 8001990:	6063      	str	r3, [r4, #4]
 8001992:	bf04      	itt	eq
 8001994:	1809      	addeq	r1, r1, r0
 8001996:	6021      	streq	r1, [r4, #0]
 8001998:	6054      	str	r4, [r2, #4]
 800199a:	e7ca      	b.n	8001932 <_free_r+0x22>
 800199c:	bd38      	pop	{r3, r4, r5, pc}
 800199e:	bf00      	nop
 80019a0:	200001a8 	.word	0x200001a8

080019a4 <sbrk_aligned>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	4e0e      	ldr	r6, [pc, #56]	; (80019e0 <sbrk_aligned+0x3c>)
 80019a8:	460c      	mov	r4, r1
 80019aa:	6831      	ldr	r1, [r6, #0]
 80019ac:	4605      	mov	r5, r0
 80019ae:	b911      	cbnz	r1, 80019b6 <sbrk_aligned+0x12>
 80019b0:	f000 f8bc 	bl	8001b2c <_sbrk_r>
 80019b4:	6030      	str	r0, [r6, #0]
 80019b6:	4621      	mov	r1, r4
 80019b8:	4628      	mov	r0, r5
 80019ba:	f000 f8b7 	bl	8001b2c <_sbrk_r>
 80019be:	1c43      	adds	r3, r0, #1
 80019c0:	d00a      	beq.n	80019d8 <sbrk_aligned+0x34>
 80019c2:	1cc4      	adds	r4, r0, #3
 80019c4:	f024 0403 	bic.w	r4, r4, #3
 80019c8:	42a0      	cmp	r0, r4
 80019ca:	d007      	beq.n	80019dc <sbrk_aligned+0x38>
 80019cc:	1a21      	subs	r1, r4, r0
 80019ce:	4628      	mov	r0, r5
 80019d0:	f000 f8ac 	bl	8001b2c <_sbrk_r>
 80019d4:	3001      	adds	r0, #1
 80019d6:	d101      	bne.n	80019dc <sbrk_aligned+0x38>
 80019d8:	f04f 34ff 	mov.w	r4, #4294967295
 80019dc:	4620      	mov	r0, r4
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	200001ac 	.word	0x200001ac

080019e4 <_malloc_r>:
 80019e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e8:	1ccd      	adds	r5, r1, #3
 80019ea:	f025 0503 	bic.w	r5, r5, #3
 80019ee:	3508      	adds	r5, #8
 80019f0:	2d0c      	cmp	r5, #12
 80019f2:	bf38      	it	cc
 80019f4:	250c      	movcc	r5, #12
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	4607      	mov	r7, r0
 80019fa:	db01      	blt.n	8001a00 <_malloc_r+0x1c>
 80019fc:	42a9      	cmp	r1, r5
 80019fe:	d905      	bls.n	8001a0c <_malloc_r+0x28>
 8001a00:	230c      	movs	r3, #12
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	2600      	movs	r6, #0
 8001a06:	4630      	mov	r0, r6
 8001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a0c:	4e2e      	ldr	r6, [pc, #184]	; (8001ac8 <_malloc_r+0xe4>)
 8001a0e:	f000 f89d 	bl	8001b4c <__malloc_lock>
 8001a12:	6833      	ldr	r3, [r6, #0]
 8001a14:	461c      	mov	r4, r3
 8001a16:	bb34      	cbnz	r4, 8001a66 <_malloc_r+0x82>
 8001a18:	4629      	mov	r1, r5
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f7ff ffc2 	bl	80019a4 <sbrk_aligned>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	4604      	mov	r4, r0
 8001a24:	d14d      	bne.n	8001ac2 <_malloc_r+0xde>
 8001a26:	6834      	ldr	r4, [r6, #0]
 8001a28:	4626      	mov	r6, r4
 8001a2a:	2e00      	cmp	r6, #0
 8001a2c:	d140      	bne.n	8001ab0 <_malloc_r+0xcc>
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	4631      	mov	r1, r6
 8001a32:	4638      	mov	r0, r7
 8001a34:	eb04 0803 	add.w	r8, r4, r3
 8001a38:	f000 f878 	bl	8001b2c <_sbrk_r>
 8001a3c:	4580      	cmp	r8, r0
 8001a3e:	d13a      	bne.n	8001ab6 <_malloc_r+0xd2>
 8001a40:	6821      	ldr	r1, [r4, #0]
 8001a42:	3503      	adds	r5, #3
 8001a44:	1a6d      	subs	r5, r5, r1
 8001a46:	f025 0503 	bic.w	r5, r5, #3
 8001a4a:	3508      	adds	r5, #8
 8001a4c:	2d0c      	cmp	r5, #12
 8001a4e:	bf38      	it	cc
 8001a50:	250c      	movcc	r5, #12
 8001a52:	4629      	mov	r1, r5
 8001a54:	4638      	mov	r0, r7
 8001a56:	f7ff ffa5 	bl	80019a4 <sbrk_aligned>
 8001a5a:	3001      	adds	r0, #1
 8001a5c:	d02b      	beq.n	8001ab6 <_malloc_r+0xd2>
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	442b      	add	r3, r5
 8001a62:	6023      	str	r3, [r4, #0]
 8001a64:	e00e      	b.n	8001a84 <_malloc_r+0xa0>
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	1b52      	subs	r2, r2, r5
 8001a6a:	d41e      	bmi.n	8001aaa <_malloc_r+0xc6>
 8001a6c:	2a0b      	cmp	r2, #11
 8001a6e:	d916      	bls.n	8001a9e <_malloc_r+0xba>
 8001a70:	1961      	adds	r1, r4, r5
 8001a72:	42a3      	cmp	r3, r4
 8001a74:	6025      	str	r5, [r4, #0]
 8001a76:	bf18      	it	ne
 8001a78:	6059      	strne	r1, [r3, #4]
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	bf08      	it	eq
 8001a7e:	6031      	streq	r1, [r6, #0]
 8001a80:	5162      	str	r2, [r4, r5]
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	4638      	mov	r0, r7
 8001a86:	f104 060b 	add.w	r6, r4, #11
 8001a8a:	f000 f865 	bl	8001b58 <__malloc_unlock>
 8001a8e:	f026 0607 	bic.w	r6, r6, #7
 8001a92:	1d23      	adds	r3, r4, #4
 8001a94:	1af2      	subs	r2, r6, r3
 8001a96:	d0b6      	beq.n	8001a06 <_malloc_r+0x22>
 8001a98:	1b9b      	subs	r3, r3, r6
 8001a9a:	50a3      	str	r3, [r4, r2]
 8001a9c:	e7b3      	b.n	8001a06 <_malloc_r+0x22>
 8001a9e:	6862      	ldr	r2, [r4, #4]
 8001aa0:	42a3      	cmp	r3, r4
 8001aa2:	bf0c      	ite	eq
 8001aa4:	6032      	streq	r2, [r6, #0]
 8001aa6:	605a      	strne	r2, [r3, #4]
 8001aa8:	e7ec      	b.n	8001a84 <_malloc_r+0xa0>
 8001aaa:	4623      	mov	r3, r4
 8001aac:	6864      	ldr	r4, [r4, #4]
 8001aae:	e7b2      	b.n	8001a16 <_malloc_r+0x32>
 8001ab0:	4634      	mov	r4, r6
 8001ab2:	6876      	ldr	r6, [r6, #4]
 8001ab4:	e7b9      	b.n	8001a2a <_malloc_r+0x46>
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4638      	mov	r0, r7
 8001abc:	f000 f84c 	bl	8001b58 <__malloc_unlock>
 8001ac0:	e7a1      	b.n	8001a06 <_malloc_r+0x22>
 8001ac2:	6025      	str	r5, [r4, #0]
 8001ac4:	e7de      	b.n	8001a84 <_malloc_r+0xa0>
 8001ac6:	bf00      	nop
 8001ac8:	200001a8 	.word	0x200001a8

08001acc <_realloc_r>:
 8001acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	460e      	mov	r6, r1
 8001ad6:	b921      	cbnz	r1, 8001ae2 <_realloc_r+0x16>
 8001ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001adc:	4611      	mov	r1, r2
 8001ade:	f7ff bf81 	b.w	80019e4 <_malloc_r>
 8001ae2:	b92a      	cbnz	r2, 8001af0 <_realloc_r+0x24>
 8001ae4:	f7ff ff14 	bl	8001910 <_free_r>
 8001ae8:	4625      	mov	r5, r4
 8001aea:	4628      	mov	r0, r5
 8001aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af0:	f000 f838 	bl	8001b64 <_malloc_usable_size_r>
 8001af4:	4284      	cmp	r4, r0
 8001af6:	4607      	mov	r7, r0
 8001af8:	d802      	bhi.n	8001b00 <_realloc_r+0x34>
 8001afa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001afe:	d812      	bhi.n	8001b26 <_realloc_r+0x5a>
 8001b00:	4621      	mov	r1, r4
 8001b02:	4640      	mov	r0, r8
 8001b04:	f7ff ff6e 	bl	80019e4 <_malloc_r>
 8001b08:	4605      	mov	r5, r0
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d0ed      	beq.n	8001aea <_realloc_r+0x1e>
 8001b0e:	42bc      	cmp	r4, r7
 8001b10:	4622      	mov	r2, r4
 8001b12:	4631      	mov	r1, r6
 8001b14:	bf28      	it	cs
 8001b16:	463a      	movcs	r2, r7
 8001b18:	f7ff fed2 	bl	80018c0 <memcpy>
 8001b1c:	4631      	mov	r1, r6
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f7ff fef6 	bl	8001910 <_free_r>
 8001b24:	e7e1      	b.n	8001aea <_realloc_r+0x1e>
 8001b26:	4635      	mov	r5, r6
 8001b28:	e7df      	b.n	8001aea <_realloc_r+0x1e>
	...

08001b2c <_sbrk_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	4d06      	ldr	r5, [pc, #24]	; (8001b48 <_sbrk_r+0x1c>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	602b      	str	r3, [r5, #0]
 8001b38:	f7fe fcf4 	bl	8000524 <_sbrk>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d102      	bne.n	8001b46 <_sbrk_r+0x1a>
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	b103      	cbz	r3, 8001b46 <_sbrk_r+0x1a>
 8001b44:	6023      	str	r3, [r4, #0]
 8001b46:	bd38      	pop	{r3, r4, r5, pc}
 8001b48:	200001b0 	.word	0x200001b0

08001b4c <__malloc_lock>:
 8001b4c:	4801      	ldr	r0, [pc, #4]	; (8001b54 <__malloc_lock+0x8>)
 8001b4e:	f000 b811 	b.w	8001b74 <__retarget_lock_acquire_recursive>
 8001b52:	bf00      	nop
 8001b54:	200001b4 	.word	0x200001b4

08001b58 <__malloc_unlock>:
 8001b58:	4801      	ldr	r0, [pc, #4]	; (8001b60 <__malloc_unlock+0x8>)
 8001b5a:	f000 b80c 	b.w	8001b76 <__retarget_lock_release_recursive>
 8001b5e:	bf00      	nop
 8001b60:	200001b4 	.word	0x200001b4

08001b64 <_malloc_usable_size_r>:
 8001b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b68:	1f18      	subs	r0, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bfbc      	itt	lt
 8001b6e:	580b      	ldrlt	r3, [r1, r0]
 8001b70:	18c0      	addlt	r0, r0, r3
 8001b72:	4770      	bx	lr

08001b74 <__retarget_lock_acquire_recursive>:
 8001b74:	4770      	bx	lr

08001b76 <__retarget_lock_release_recursive>:
 8001b76:	4770      	bx	lr

08001b78 <_init>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr

08001b84 <_fini>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr
