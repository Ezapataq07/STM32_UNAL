
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001108  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012a0  080012a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012a0  080012a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012a0  080012a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012a0  080012a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012a4  080012a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080012b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080012b4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020a0  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000748  00000000  00000000  000220d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00022820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00022a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f20f  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002194  00000000  00000000  00031de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054d48  00000000  00000000  00033f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00088cc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000668  00000000  00000000  00088d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001288 	.word	0x08001288

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001288 	.word	0x08001288

080001d8 <main>:

void initSystem(void);
void Display_WriteNumber(uint8_t number);
void setDisplayPins(void);

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	initSystem();
 80001dc:	f000 f840 	bl	8000260 <initSystem>
	setDisplayPins();
 80001e0:	f000 fa62 	bl	80006a8 <setDisplayPins>
	GPIO_WritePin(&handlerDisplay1, 0);
 80001e4:	2100      	movs	r1, #0
 80001e6:	4817      	ldr	r0, [pc, #92]	; (8000244 <main+0x6c>)
 80001e8:	f000 ffe8 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&handlerDisplay2, 1);
 80001ec:	2101      	movs	r1, #1
 80001ee:	4816      	ldr	r0, [pc, #88]	; (8000248 <main+0x70>)
 80001f0:	f000 ffe4 	bl	80011bc <GPIO_WritePin>

	while(1){
		if (displaySet == false){
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <main+0x74>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d1fb      	bne.n	80001f4 <main+0x1c>
			display2State = GPIO_ReadPin(&handlerDisplay2);
 80001fc:	4812      	ldr	r0, [pc, #72]	; (8000248 <main+0x70>)
 80001fe:	f001 f807 	bl	8001210 <GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <main+0x78>)
 8000208:	701a      	strb	r2, [r3, #0]
			if(display2State == SET){
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0x78>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d10b      	bne.n	800022a <main+0x52>
				Display_WriteNumber(numbers[units]);
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <main+0x7c>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	461a      	mov	r2, r3
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0x80>)
 800021a:	5c9b      	ldrb	r3, [r3, r2]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9c7 	bl	80005b0 <Display_WriteNumber>
				displaySet = true;
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <main+0x74>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
 8000228:	e7e4      	b.n	80001f4 <main+0x1c>
			}
			else{
				Display_WriteNumber(numbers[tens]);
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <main+0x84>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <main+0x80>)
 8000232:	5c9b      	ldrb	r3, [r3, r2]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9bb 	bl	80005b0 <Display_WriteNumber>
				displaySet = true;
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <main+0x74>)
 800023c:	2201      	movs	r2, #1
 800023e:	701a      	strb	r2, [r3, #0]
		if (displaySet == false){
 8000240:	e7d8      	b.n	80001f4 <main+0x1c>
 8000242:	bf00      	nop
 8000244:	20000060 	.word	0x20000060
 8000248:	2000006c 	.word	0x2000006c
 800024c:	200000df 	.word	0x200000df
 8000250:	200000dc 	.word	0x200000dc
 8000254:	200000dd 	.word	0x200000dd
 8000258:	20000000 	.word	0x20000000
 800025c:	200000de 	.word	0x200000de

08000260 <initSystem>:


	return 0;
}

void initSystem(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	// Configuración para el State LED
	handlerStateLED.pGPIOx 								= GPIOA;
 8000264:	4b8d      	ldr	r3, [pc, #564]	; (800049c <initSystem+0x23c>)
 8000266:	4a8e      	ldr	r2, [pc, #568]	; (80004a0 <initSystem+0x240>)
 8000268:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800026a:	4b8c      	ldr	r3, [pc, #560]	; (800049c <initSystem+0x23c>)
 800026c:	2205      	movs	r2, #5
 800026e:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000270:	4b8a      	ldr	r3, [pc, #552]	; (800049c <initSystem+0x23c>)
 8000272:	2201      	movs	r2, #1
 8000274:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8000276:	4b89      	ldr	r3, [pc, #548]	; (800049c <initSystem+0x23c>)
 8000278:	2200      	movs	r2, #0
 800027a:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 800027c:	4b87      	ldr	r3, [pc, #540]	; (800049c <initSystem+0x23c>)
 800027e:	2200      	movs	r2, #0
 8000280:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000282:	4b86      	ldr	r3, [pc, #536]	; (800049c <initSystem+0x23c>)
 8000284:	2201      	movs	r2, #1
 8000286:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Está configuración no es relevante para el PIN en este caso
 8000288:	4b84      	ldr	r3, [pc, #528]	; (800049c <initSystem+0x23c>)
 800028a:	2200      	movs	r2, #0
 800028c:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 800028e:	4883      	ldr	r0, [pc, #524]	; (800049c <initSystem+0x23c>)
 8000290:	f000 fe6c 	bl	8000f6c <GPIO_Config>

	// Configuración para el Test LED
	handlerExtLED.pGPIOx 								= GPIOB;
 8000294:	4b83      	ldr	r3, [pc, #524]	; (80004a4 <initSystem+0x244>)
 8000296:	4a84      	ldr	r2, [pc, #528]	; (80004a8 <initSystem+0x248>)
 8000298:	601a      	str	r2, [r3, #0]
	handlerExtLED.GPIO_PinConfig.GPIO_PinNumber			= PIN_9;
 800029a:	4b82      	ldr	r3, [pc, #520]	; (80004a4 <initSystem+0x244>)
 800029c:	2209      	movs	r2, #9
 800029e:	711a      	strb	r2, [r3, #4]
	handlerExtLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 80002a0:	4b80      	ldr	r3, [pc, #512]	; (80004a4 <initSystem+0x244>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	715a      	strb	r2, [r3, #5]
	handlerExtLED.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 80002a6:	4b7f      	ldr	r3, [pc, #508]	; (80004a4 <initSystem+0x244>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	721a      	strb	r2, [r3, #8]
	handlerExtLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 80002ac:	4b7d      	ldr	r3, [pc, #500]	; (80004a4 <initSystem+0x244>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	71da      	strb	r2, [r3, #7]
	handlerExtLED.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 80002b2:	4b7c      	ldr	r3, [pc, #496]	; (80004a4 <initSystem+0x244>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	719a      	strb	r2, [r3, #6]
	handlerExtLED.GPIO_PinConfig.GPIO_PinAltFunMode		= AF0;					// Está configuración no es relevante para el PIN en este caso
 80002b8:	4b7a      	ldr	r3, [pc, #488]	; (80004a4 <initSystem+0x244>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del State LED
	GPIO_Config(&handlerExtLED);
 80002be:	4879      	ldr	r0, [pc, #484]	; (80004a4 <initSystem+0x244>)
 80002c0:	f000 fe54 	bl	8000f6c <GPIO_Config>


	handlerDisplay1.pGPIOx 									= GPIOB;
 80002c4:	4b79      	ldr	r3, [pc, #484]	; (80004ac <initSystem+0x24c>)
 80002c6:	4a78      	ldr	r2, [pc, #480]	; (80004a8 <initSystem+0x248>)
 80002c8:	601a      	str	r2, [r3, #0]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinNumber			= PIN_8;
 80002ca:	4b78      	ldr	r3, [pc, #480]	; (80004ac <initSystem+0x24c>)
 80002cc:	2208      	movs	r2, #8
 80002ce:	711a      	strb	r2, [r3, #4]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80002d0:	4b76      	ldr	r3, [pc, #472]	; (80004ac <initSystem+0x24c>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	715a      	strb	r2, [r3, #5]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80002d6:	4b75      	ldr	r3, [pc, #468]	; (80004ac <initSystem+0x24c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	721a      	strb	r2, [r3, #8]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 80002dc:	4b73      	ldr	r3, [pc, #460]	; (80004ac <initSystem+0x24c>)
 80002de:	2203      	movs	r2, #3
 80002e0:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerDisplay1);
 80002e2:	4872      	ldr	r0, [pc, #456]	; (80004ac <initSystem+0x24c>)
 80002e4:	f000 fe42 	bl	8000f6c <GPIO_Config>
	GPIO_WritePin(&handlerDisplay1, 0);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4870      	ldr	r0, [pc, #448]	; (80004ac <initSystem+0x24c>)
 80002ec:	f000 ff66 	bl	80011bc <GPIO_WritePin>

	handlerDisplay2.pGPIOx 									= GPIOB;
 80002f0:	4b6f      	ldr	r3, [pc, #444]	; (80004b0 <initSystem+0x250>)
 80002f2:	4a6d      	ldr	r2, [pc, #436]	; (80004a8 <initSystem+0x248>)
 80002f4:	601a      	str	r2, [r3, #0]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinNumber			= PIN_9;
 80002f6:	4b6e      	ldr	r3, [pc, #440]	; (80004b0 <initSystem+0x250>)
 80002f8:	2209      	movs	r2, #9
 80002fa:	711a      	strb	r2, [r3, #4]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80002fc:	4b6c      	ldr	r3, [pc, #432]	; (80004b0 <initSystem+0x250>)
 80002fe:	2201      	movs	r2, #1
 8000300:	715a      	strb	r2, [r3, #5]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000302:	4b6b      	ldr	r3, [pc, #428]	; (80004b0 <initSystem+0x250>)
 8000304:	2200      	movs	r2, #0
 8000306:	721a      	strb	r2, [r3, #8]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 8000308:	4b69      	ldr	r3, [pc, #420]	; (80004b0 <initSystem+0x250>)
 800030a:	2203      	movs	r2, #3
 800030c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerDisplay2);
 800030e:	4868      	ldr	r0, [pc, #416]	; (80004b0 <initSystem+0x250>)
 8000310:	f000 fe2c 	bl	8000f6c <GPIO_Config>
	GPIO_WritePin(&handlerDisplay2, 0);
 8000314:	2100      	movs	r1, #0
 8000316:	4866      	ldr	r0, [pc, #408]	; (80004b0 <initSystem+0x250>)
 8000318:	f000 ff50 	bl	80011bc <GPIO_WritePin>

	LedA.pGPIOx 									= GPIOA;
 800031c:	4b65      	ldr	r3, [pc, #404]	; (80004b4 <initSystem+0x254>)
 800031e:	4a60      	ldr	r2, [pc, #384]	; (80004a0 <initSystem+0x240>)
 8000320:	601a      	str	r2, [r3, #0]
	LedA.GPIO_PinConfig.GPIO_PinNumber				= PIN_11;
 8000322:	4b64      	ldr	r3, [pc, #400]	; (80004b4 <initSystem+0x254>)
 8000324:	220b      	movs	r2, #11
 8000326:	711a      	strb	r2, [r3, #4]
	LedA.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000328:	4b62      	ldr	r3, [pc, #392]	; (80004b4 <initSystem+0x254>)
 800032a:	2201      	movs	r2, #1
 800032c:	715a      	strb	r2, [r3, #5]
	LedA.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 800032e:	4b61      	ldr	r3, [pc, #388]	; (80004b4 <initSystem+0x254>)
 8000330:	2200      	movs	r2, #0
 8000332:	721a      	strb	r2, [r3, #8]
	LedA.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000334:	4b5f      	ldr	r3, [pc, #380]	; (80004b4 <initSystem+0x254>)
 8000336:	2203      	movs	r2, #3
 8000338:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedA);
 800033a:	485e      	ldr	r0, [pc, #376]	; (80004b4 <initSystem+0x254>)
 800033c:	f000 fe16 	bl	8000f6c <GPIO_Config>

	LedB.pGPIOx 									= GPIOA;
 8000340:	4b5d      	ldr	r3, [pc, #372]	; (80004b8 <initSystem+0x258>)
 8000342:	4a57      	ldr	r2, [pc, #348]	; (80004a0 <initSystem+0x240>)
 8000344:	601a      	str	r2, [r3, #0]
	LedB.GPIO_PinConfig.GPIO_PinNumber				= PIN_10;
 8000346:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <initSystem+0x258>)
 8000348:	220a      	movs	r2, #10
 800034a:	711a      	strb	r2, [r3, #4]
	LedB.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <initSystem+0x258>)
 800034e:	2201      	movs	r2, #1
 8000350:	715a      	strb	r2, [r3, #5]
	LedB.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000352:	4b59      	ldr	r3, [pc, #356]	; (80004b8 <initSystem+0x258>)
 8000354:	2200      	movs	r2, #0
 8000356:	721a      	strb	r2, [r3, #8]
	LedB.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000358:	4b57      	ldr	r3, [pc, #348]	; (80004b8 <initSystem+0x258>)
 800035a:	2203      	movs	r2, #3
 800035c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedB);
 800035e:	4856      	ldr	r0, [pc, #344]	; (80004b8 <initSystem+0x258>)
 8000360:	f000 fe04 	bl	8000f6c <GPIO_Config>

	LedC.pGPIOx 									= GPIOA;
 8000364:	4b55      	ldr	r3, [pc, #340]	; (80004bc <initSystem+0x25c>)
 8000366:	4a4e      	ldr	r2, [pc, #312]	; (80004a0 <initSystem+0x240>)
 8000368:	601a      	str	r2, [r3, #0]
	LedC.GPIO_PinConfig.GPIO_PinNumber				= PIN_9;
 800036a:	4b54      	ldr	r3, [pc, #336]	; (80004bc <initSystem+0x25c>)
 800036c:	2209      	movs	r2, #9
 800036e:	711a      	strb	r2, [r3, #4]
	LedC.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000370:	4b52      	ldr	r3, [pc, #328]	; (80004bc <initSystem+0x25c>)
 8000372:	2201      	movs	r2, #1
 8000374:	715a      	strb	r2, [r3, #5]
	LedC.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000376:	4b51      	ldr	r3, [pc, #324]	; (80004bc <initSystem+0x25c>)
 8000378:	2200      	movs	r2, #0
 800037a:	721a      	strb	r2, [r3, #8]
	LedC.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 800037c:	4b4f      	ldr	r3, [pc, #316]	; (80004bc <initSystem+0x25c>)
 800037e:	2203      	movs	r2, #3
 8000380:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedC);
 8000382:	484e      	ldr	r0, [pc, #312]	; (80004bc <initSystem+0x25c>)
 8000384:	f000 fdf2 	bl	8000f6c <GPIO_Config>


	LedD.pGPIOx 									= GPIOA;
 8000388:	4b4d      	ldr	r3, [pc, #308]	; (80004c0 <initSystem+0x260>)
 800038a:	4a45      	ldr	r2, [pc, #276]	; (80004a0 <initSystem+0x240>)
 800038c:	601a      	str	r2, [r3, #0]
	LedD.GPIO_PinConfig.GPIO_PinNumber				= PIN_8;
 800038e:	4b4c      	ldr	r3, [pc, #304]	; (80004c0 <initSystem+0x260>)
 8000390:	2208      	movs	r2, #8
 8000392:	711a      	strb	r2, [r3, #4]
	LedD.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000394:	4b4a      	ldr	r3, [pc, #296]	; (80004c0 <initSystem+0x260>)
 8000396:	2201      	movs	r2, #1
 8000398:	715a      	strb	r2, [r3, #5]
	LedD.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 800039a:	4b49      	ldr	r3, [pc, #292]	; (80004c0 <initSystem+0x260>)
 800039c:	2200      	movs	r2, #0
 800039e:	721a      	strb	r2, [r3, #8]
	LedD.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80003a0:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <initSystem+0x260>)
 80003a2:	2203      	movs	r2, #3
 80003a4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedD);
 80003a6:	4846      	ldr	r0, [pc, #280]	; (80004c0 <initSystem+0x260>)
 80003a8:	f000 fde0 	bl	8000f6c <GPIO_Config>

	LedE.pGPIOx 									= GPIOA;
 80003ac:	4b45      	ldr	r3, [pc, #276]	; (80004c4 <initSystem+0x264>)
 80003ae:	4a3c      	ldr	r2, [pc, #240]	; (80004a0 <initSystem+0x240>)
 80003b0:	601a      	str	r2, [r3, #0]
	LedE.GPIO_PinConfig.GPIO_PinNumber				= PIN_7;
 80003b2:	4b44      	ldr	r3, [pc, #272]	; (80004c4 <initSystem+0x264>)
 80003b4:	2207      	movs	r2, #7
 80003b6:	711a      	strb	r2, [r3, #4]
	LedE.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80003b8:	4b42      	ldr	r3, [pc, #264]	; (80004c4 <initSystem+0x264>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	715a      	strb	r2, [r3, #5]
	LedE.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80003be:	4b41      	ldr	r3, [pc, #260]	; (80004c4 <initSystem+0x264>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	721a      	strb	r2, [r3, #8]
	LedE.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80003c4:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <initSystem+0x264>)
 80003c6:	2203      	movs	r2, #3
 80003c8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedE);
 80003ca:	483e      	ldr	r0, [pc, #248]	; (80004c4 <initSystem+0x264>)
 80003cc:	f000 fdce 	bl	8000f6c <GPIO_Config>

	LedF.pGPIOx 									= GPIOA;
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <initSystem+0x268>)
 80003d2:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <initSystem+0x240>)
 80003d4:	601a      	str	r2, [r3, #0]
	LedF.GPIO_PinConfig.GPIO_PinNumber				= PIN_6;
 80003d6:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <initSystem+0x268>)
 80003d8:	2206      	movs	r2, #6
 80003da:	711a      	strb	r2, [r3, #4]
	LedF.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80003dc:	4b3a      	ldr	r3, [pc, #232]	; (80004c8 <initSystem+0x268>)
 80003de:	2201      	movs	r2, #1
 80003e0:	715a      	strb	r2, [r3, #5]
	LedF.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80003e2:	4b39      	ldr	r3, [pc, #228]	; (80004c8 <initSystem+0x268>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	721a      	strb	r2, [r3, #8]
	LedF.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80003e8:	4b37      	ldr	r3, [pc, #220]	; (80004c8 <initSystem+0x268>)
 80003ea:	2203      	movs	r2, #3
 80003ec:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedF);
 80003ee:	4836      	ldr	r0, [pc, #216]	; (80004c8 <initSystem+0x268>)
 80003f0:	f000 fdbc 	bl	8000f6c <GPIO_Config>

	LedG.pGPIOx 									= GPIOB;
 80003f4:	4b35      	ldr	r3, [pc, #212]	; (80004cc <initSystem+0x26c>)
 80003f6:	4a2c      	ldr	r2, [pc, #176]	; (80004a8 <initSystem+0x248>)
 80003f8:	601a      	str	r2, [r3, #0]
	LedG.GPIO_PinConfig.GPIO_PinNumber				= PIN_10;
 80003fa:	4b34      	ldr	r3, [pc, #208]	; (80004cc <initSystem+0x26c>)
 80003fc:	220a      	movs	r2, #10
 80003fe:	711a      	strb	r2, [r3, #4]
	LedG.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000400:	4b32      	ldr	r3, [pc, #200]	; (80004cc <initSystem+0x26c>)
 8000402:	2201      	movs	r2, #1
 8000404:	715a      	strb	r2, [r3, #5]
	LedG.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000406:	4b31      	ldr	r3, [pc, #196]	; (80004cc <initSystem+0x26c>)
 8000408:	2200      	movs	r2, #0
 800040a:	721a      	strb	r2, [r3, #8]
	LedG.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <initSystem+0x26c>)
 800040e:	2203      	movs	r2, #3
 8000410:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedG);
 8000412:	482e      	ldr	r0, [pc, #184]	; (80004cc <initSystem+0x26c>)
 8000414:	f000 fdaa 	bl	8000f6c <GPIO_Config>

	LedDP.pGPIOx 								= GPIOA;
 8000418:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <initSystem+0x270>)
 800041a:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <initSystem+0x240>)
 800041c:	601a      	str	r2, [r3, #0]
	LedDP.GPIO_PinConfig.GPIO_PinNumber			= PIN_4;
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <initSystem+0x270>)
 8000420:	2204      	movs	r2, #4
 8000422:	711a      	strb	r2, [r3, #4]
	LedDP.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000424:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <initSystem+0x270>)
 8000426:	2201      	movs	r2, #1
 8000428:	715a      	strb	r2, [r3, #5]
	LedDP.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <initSystem+0x270>)
 800042c:	2200      	movs	r2, #0
 800042e:	721a      	strb	r2, [r3, #8]
	LedDP.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <initSystem+0x270>)
 8000432:	2203      	movs	r2, #3
 8000434:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&LedDP);
 8000436:	4826      	ldr	r0, [pc, #152]	; (80004d0 <initSystem+0x270>)
 8000438:	f000 fd98 	bl	8000f6c <GPIO_Config>

	// Configuración del Timer 2
	handlerStateLedTimer.ptrTIMx						= TIM2;
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <initSystem+0x274>)
 800043e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000442:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000444:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <initSystem+0x274>)
 8000446:	2201      	movs	r2, #1
 8000448:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <initSystem+0x274>)
 800044c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000450:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <initSystem+0x274>)
 8000454:	22fa      	movs	r2, #250	; 0xfa
 8000456:	609a      	str	r2, [r3, #8]

	//Cargamos la configuración TIM2
	BTimer_Config(&handlerStateLedTimer);
 8000458:	481e      	ldr	r0, [pc, #120]	; (80004d4 <initSystem+0x274>)
 800045a:	f000 f9c9 	bl	80007f0 <BTimer_Config>

	// Configuración del Timer 2
	handlerDisplayTimer.ptrTIMx						= TIM4;
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <initSystem+0x278>)
 8000460:	4a1e      	ldr	r2, [pc, #120]	; (80004dc <initSystem+0x27c>)
 8000462:	601a      	str	r2, [r3, #0]
	handlerDisplayTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <initSystem+0x278>)
 8000466:	2201      	movs	r2, #1
 8000468:	711a      	strb	r2, [r3, #4]
	handlerDisplayTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <initSystem+0x278>)
 800046c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000470:	80da      	strh	r2, [r3, #6]
	handlerDisplayTimer.timerConfig.Timer_period	= 10;
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <initSystem+0x278>)
 8000474:	220a      	movs	r2, #10
 8000476:	609a      	str	r2, [r3, #8]

	//Cargamos la configuración TIM2
	BTimer_Config(&handlerDisplayTimer);
 8000478:	4817      	ldr	r0, [pc, #92]	; (80004d8 <initSystem+0x278>)
 800047a:	f000 f9b9 	bl	80007f0 <BTimer_Config>

	extiConfig.EXTIx			= EXTI0;
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <initSystem+0x280>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
	extiConfig.pinPort			= PB;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <initSystem+0x280>)
 8000486:	2201      	movs	r2, #1
 8000488:	705a      	strb	r2, [r3, #1]
	extiConfig.triggerMode		= RISING_TRIGGER;
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <initSystem+0x280>)
 800048c:	2200      	movs	r2, #0
 800048e:	709a      	strb	r2, [r3, #2]

	exti_Config(&extiConfig);
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <initSystem+0x280>)
 8000492:	f000 fa97 	bl	80009c4 <exti_Config>


}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000028 	.word	0x20000028
 80004a0:	40020000 	.word	0x40020000
 80004a4:	20000034 	.word	0x20000034
 80004a8:	40020400 	.word	0x40020400
 80004ac:	20000060 	.word	0x20000060
 80004b0:	2000006c 	.word	0x2000006c
 80004b4:	20000078 	.word	0x20000078
 80004b8:	20000084 	.word	0x20000084
 80004bc:	20000090 	.word	0x20000090
 80004c0:	2000009c 	.word	0x2000009c
 80004c4:	200000a8 	.word	0x200000a8
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	200000c0 	.word	0x200000c0
 80004d0:	200000cc 	.word	0x200000cc
 80004d4:	20000040 	.word	0x20000040
 80004d8:	20000050 	.word	0x20000050
 80004dc:	40000800 	.word	0x40000800
 80004e0:	200000d8 	.word	0x200000d8

080004e4 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <BTimer2_Callback+0x1c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <BTimer2_Callback+0x1c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f082 0220 	eor.w	r2, r2, #32
 80004f6:	615a      	str	r2, [r3, #20]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000028 	.word	0x20000028

08000504 <BTimer4_Callback>:

void BTimer4_Callback(void){
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	displaySet = false;
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <BTimer4_Callback+0x40>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
	displayON ^= 0b1;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <BTimer4_Callback+0x44>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	f083 0301 	eor.w	r3, r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <BTimer4_Callback+0x44>)
 800051a:	701a      	strb	r2, [r3, #0]
	handlerDisplay1.pGPIOx->ODR ^= GPIO_ODR_OD8;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <BTimer4_Callback+0x48>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <BTimer4_Callback+0x48>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 800052a:	615a      	str	r2, [r3, #20]
	handlerDisplay2.pGPIOx->ODR ^= GPIO_ODR_OD9;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <BTimer4_Callback+0x4c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <BTimer4_Callback+0x4c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800053a:	615a      	str	r2, [r3, #20]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	200000df 	.word	0x200000df
 8000548:	200000db 	.word	0x200000db
 800054c:	20000060 	.word	0x20000060
 8000550:	2000006c 	.word	0x2000006c

08000554 <Exti0_Callback>:

void Exti0_Callback(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	if (units == 9 && tens == 9){
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <Exti0_Callback+0x54>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b09      	cmp	r3, #9
 800055e:	d10a      	bne.n	8000576 <Exti0_Callback+0x22>
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <Exti0_Callback+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b09      	cmp	r3, #9
 8000566:	d106      	bne.n	8000576 <Exti0_Callback+0x22>
		units 	= 0;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <Exti0_Callback+0x54>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		tens 	= 0;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <Exti0_Callback+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		tens++;
	}
	else{
		units++;
	}
}
 8000574:	e013      	b.n	800059e <Exti0_Callback+0x4a>
	else if (units == 9){
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <Exti0_Callback+0x54>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b09      	cmp	r3, #9
 800057c:	d109      	bne.n	8000592 <Exti0_Callback+0x3e>
		units = 0;
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <Exti0_Callback+0x54>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
		tens++;
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <Exti0_Callback+0x58>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <Exti0_Callback+0x58>)
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	e005      	b.n	800059e <Exti0_Callback+0x4a>
		units++;
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <Exti0_Callback+0x54>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <Exti0_Callback+0x54>)
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000dd 	.word	0x200000dd
 80005ac:	200000de 	.word	0x200000de

080005b0 <Display_WriteNumber>:

void Display_WriteNumber(uint8_t number){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	number = ~number;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	43db      	mvns	r3, r3
 80005be:	71fb      	strb	r3, [r7, #7]
	uint8_t state = 0b1 & number;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	085b      	lsrs	r3, r3, #1
 80005cc:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedDP, state);
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4619      	mov	r1, r3
 80005d2:	482d      	ldr	r0, [pc, #180]	; (8000688 <Display_WriteNumber+0xd8>)
 80005d4:	f000 fdf2 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedG, state);
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4828      	ldr	r0, [pc, #160]	; (800068c <Display_WriteNumber+0xdc>)
 80005ec:	f000 fde6 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	085b      	lsrs	r3, r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedF, state);
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	4619      	mov	r1, r3
 8000602:	4823      	ldr	r0, [pc, #140]	; (8000690 <Display_WriteNumber+0xe0>)
 8000604:	f000 fdda 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedE, state);
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4619      	mov	r1, r3
 800061a:	481e      	ldr	r0, [pc, #120]	; (8000694 <Display_WriteNumber+0xe4>)
 800061c:	f000 fdce 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedD, state);
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	4619      	mov	r1, r3
 8000632:	4819      	ldr	r0, [pc, #100]	; (8000698 <Display_WriteNumber+0xe8>)
 8000634:	f000 fdc2 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	085b      	lsrs	r3, r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedC, state);
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	4619      	mov	r1, r3
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <Display_WriteNumber+0xec>)
 800064c:	f000 fdb6 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	085b      	lsrs	r3, r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedB, state);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4619      	mov	r1, r3
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <Display_WriteNumber+0xf0>)
 8000664:	f000 fdaa 	bl	80011bc <GPIO_WritePin>

	state = 0b1 & number;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
	number >>= 1;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	085b      	lsrs	r3, r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&LedA, state);
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	4619      	mov	r1, r3
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <Display_WriteNumber+0xf4>)
 800067c:	f000 fd9e 	bl	80011bc <GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000cc 	.word	0x200000cc
 800068c:	200000c0 	.word	0x200000c0
 8000690:	200000b4 	.word	0x200000b4
 8000694:	200000a8 	.word	0x200000a8
 8000698:	2000009c 	.word	0x2000009c
 800069c:	20000090 	.word	0x20000090
 80006a0:	20000084 	.word	0x20000084
 80006a4:	20000078 	.word	0x20000078

080006a8 <setDisplayPins>:

void setDisplayPins(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	GPIO_WritePin(&LedA, 1);
 80006ac:	2101      	movs	r1, #1
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <setDisplayPins+0x48>)
 80006b0:	f000 fd84 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedB, 1);
 80006b4:	2101      	movs	r1, #1
 80006b6:	480f      	ldr	r0, [pc, #60]	; (80006f4 <setDisplayPins+0x4c>)
 80006b8:	f000 fd80 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedC, 1);
 80006bc:	2101      	movs	r1, #1
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <setDisplayPins+0x50>)
 80006c0:	f000 fd7c 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedD, 1);
 80006c4:	2101      	movs	r1, #1
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <setDisplayPins+0x54>)
 80006c8:	f000 fd78 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedE, 1);
 80006cc:	2101      	movs	r1, #1
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <setDisplayPins+0x58>)
 80006d0:	f000 fd74 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedF, 1);
 80006d4:	2101      	movs	r1, #1
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <setDisplayPins+0x5c>)
 80006d8:	f000 fd70 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedG, 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <setDisplayPins+0x60>)
 80006e0:	f000 fd6c 	bl	80011bc <GPIO_WritePin>
	GPIO_WritePin(&LedDP, 1);
 80006e4:	2101      	movs	r1, #1
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <setDisplayPins+0x64>)
 80006e8:	f000 fd68 	bl	80011bc <GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000078 	.word	0x20000078
 80006f4:	20000084 	.word	0x20000084
 80006f8:	20000090 	.word	0x20000090
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	200000a8 	.word	0x200000a8
 8000704:	200000b4 	.word	0x200000b4
 8000708:	200000c0 	.word	0x200000c0
 800070c:	200000cc 	.word	0x200000cc

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073e:	f000 fd7f 	bl	8001240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fd49 	bl	80001d8 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	080012a8 	.word	0x080012a8
  ldr r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800075c:	200000f0 	.word	0x200000f0

08000760 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4906      	ldr	r1, [pc, #24]	; (8000798 <__NVIC_EnableIRQ+0x34>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a46      	ldr	r2, [pc, #280]	; (8000918 <BTimer_Config+0x128>)
 80007fe:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800080c:	d106      	bne.n	800081c <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800080e:	4b43      	ldr	r3, [pc, #268]	; (800091c <BTimer_Config+0x12c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a42      	ldr	r2, [pc, #264]	; (800091c <BTimer_Config+0x12c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	e016      	b.n	800084a <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a3f      	ldr	r2, [pc, #252]	; (8000920 <BTimer_Config+0x130>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <BTimer_Config+0x12c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a3c      	ldr	r2, [pc, #240]	; (800091c <BTimer_Config+0x12c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	e00a      	b.n	800084a <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a3a      	ldr	r2, [pc, #232]	; (8000924 <BTimer_Config+0x134>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d105      	bne.n	800084a <BTimer_Config+0x5a>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <BTimer_Config+0x12c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a36      	ldr	r2, [pc, #216]	; (800091c <BTimer_Config+0x12c>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d10c      	bne.n	800086c <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 0210 	bic.w	r2, r2, #16
 8000860:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
 800086a:	e00d      	b.n	8000888 <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0210 	orr.w	r2, r2, #16
 800087a:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3a01      	subs	r2, #1
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	88db      	ldrh	r3, [r3, #6]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3a01      	subs	r2, #1
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 0201 	orr.w	r2, r2, #1
 80008ae:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f042 0201 	orr.w	r2, r2, #1
 80008be:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c8:	d107      	bne.n	80008da <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 80008ca:	201c      	movs	r0, #28
 80008cc:	f7ff ff4a 	bl	8000764 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 80008d0:	2103      	movs	r1, #3
 80008d2:	201c      	movs	r0, #28
 80008d4:	f7ff ff62 	bl	800079c <__NVIC_SetPriority>
 80008d8:	e018      	b.n	800090c <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <BTimer_Config+0x130>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d107      	bne.n	80008f4 <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 80008e4:	201d      	movs	r0, #29
 80008e6:	f7ff ff3d 	bl	8000764 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 80008ea:	2103      	movs	r1, #3
 80008ec:	201d      	movs	r0, #29
 80008ee:	f7ff ff55 	bl	800079c <__NVIC_SetPriority>
 80008f2:	e00b      	b.n	800090c <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <BTimer_Config+0x134>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 80008fe:	201e      	movs	r0, #30
 8000900:	f7ff ff30 	bl	8000764 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 8000904:	2103      	movs	r1, #3
 8000906:	201e      	movs	r0, #30
 8000908:	f7ff ff48 	bl	800079c <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800090c:	b662      	cpsie	i
}
 800090e:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000e0 	.word	0x200000e0
 800091c:	40023800 	.word	0x40023800
 8000920:	40000400 	.word	0x40000400
 8000924:	40000800 	.word	0x40000800

08000928 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	 __NOP();
 800092c:	bf00      	nop
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <TIM2_IRQHandler>:
__attribute__((weak)) void BTimer4_Callback(void){
	 __NOP();
}

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 800093a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 800094a:	f7ff fdcb 	bl	80004e4 <BTimer2_Callback>

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <TIM3_IRQHandler+0x18>)
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	4a03      	ldr	r2, [pc, #12]	; (800096c <TIM3_IRQHandler+0x18>)
 800095e:	f023 0301 	bic.w	r3, r3, #1
 8000962:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000964:	f7ff ffe0 	bl	8000928 <BTimer3_Callback>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40000400 	.word	0x40000400

08000970 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <TIM4_IRQHandler+0x18>)
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <TIM4_IRQHandler+0x18>)
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000980:	f7ff fdc0 	bl	8000504 <BTimer4_Callback>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40000800 	.word	0x40000800

0800098c <__NVIC_EnableIRQ>:
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db0b      	blt.n	80009b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 021f 	and.w	r2, r3, #31
 80009a4:	4906      	ldr	r1, [pc, #24]	; (80009c0 <__NVIC_EnableIRQ+0x34>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	2001      	movs	r0, #1
 80009ae:	fa00 f202 	lsl.w	r2, r0, r2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <exti_Config>:
#include "GPIOxDriver.h"


GPIO_Handler_t 	handlerExtiPIN = {0};

void exti_Config(EXTI_Config_t	*extiConfig){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

	/* Se activa la señal de reloj para SYSCFG*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80009cc:	4b7a      	ldr	r3, [pc, #488]	; (8000bb8 <exti_Config+0x1f4>)
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	4a79      	ldr	r2, [pc, #484]	; (8000bb8 <exti_Config+0x1f4>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6453      	str	r3, [r2, #68]	; 0x44

	/* 1-> Configuramos el PINX como entrada digital */
	configExtiPin(extiConfig->EXTIx, extiConfig->pinPort);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4610      	mov	r0, r2
 80009e4:	f000 fa6c 	bl	8000ec0 <configExtiPin>


	/* Se conecta la entrada del PIN configurado al EXTI correspondiente */

	if (extiConfig->EXTIx <= EXTI3){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d80e      	bhi.n	8000a0e <exti_Config+0x4a>
		SYSCFG->EXTICR[0] |= (extiConfig->pinPort << (extiConfig->EXTIx)*4);
 80009f0:	4b72      	ldr	r3, [pc, #456]	; (8000bbc <exti_Config+0x1f8>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	7852      	ldrb	r2, [r2, #1]
 80009f8:	4611      	mov	r1, r2
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a6d      	ldr	r2, [pc, #436]	; (8000bbc <exti_Config+0x1f8>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6093      	str	r3, [r2, #8]
 8000a0c:	e046      	b.n	8000a9c <exti_Config+0xd8>
	}
	else if ((extiConfig->EXTIx >= EXTI4 && extiConfig->EXTIx <= EXTI7)){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d913      	bls.n	8000a3e <exti_Config+0x7a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d80f      	bhi.n	8000a3e <exti_Config+0x7a>
		SYSCFG->EXTICR[1] |= (extiConfig->pinPort << (extiConfig->EXTIx-4)*4);
 8000a1e:	4b67      	ldr	r3, [pc, #412]	; (8000bbc <exti_Config+0x1f8>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	7852      	ldrb	r2, [r2, #1]
 8000a26:	4611      	mov	r1, r2
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	3a04      	subs	r2, #4
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a61      	ldr	r2, [pc, #388]	; (8000bbc <exti_Config+0x1f8>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	60d3      	str	r3, [r2, #12]
 8000a3c:	e02e      	b.n	8000a9c <exti_Config+0xd8>
	}
	else if (extiConfig->EXTIx >= EXTI8 && extiConfig->EXTIx <= EXTI11){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b07      	cmp	r3, #7
 8000a44:	d913      	bls.n	8000a6e <exti_Config+0xaa>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b0b      	cmp	r3, #11
 8000a4c:	d80f      	bhi.n	8000a6e <exti_Config+0xaa>
		SYSCFG->EXTICR[2] |= (extiConfig->pinPort << (extiConfig->EXTIx-8)*4);
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <exti_Config+0x1f8>)
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	7852      	ldrb	r2, [r2, #1]
 8000a56:	4611      	mov	r1, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	3a08      	subs	r2, #8
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a55      	ldr	r2, [pc, #340]	; (8000bbc <exti_Config+0x1f8>)
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6113      	str	r3, [r2, #16]
 8000a6c:	e016      	b.n	8000a9c <exti_Config+0xd8>
	}
	else if (extiConfig->EXTIx >= EXTI12 && extiConfig->EXTIx <= EXTI15){
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b0b      	cmp	r3, #11
 8000a74:	d912      	bls.n	8000a9c <exti_Config+0xd8>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d80e      	bhi.n	8000a9c <exti_Config+0xd8>
		SYSCFG->EXTICR[3] |= (extiConfig->pinPort << (extiConfig->EXTIx-12)*4);
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <exti_Config+0x1f8>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	7852      	ldrb	r2, [r2, #1]
 8000a86:	4611      	mov	r1, r2
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	3a0c      	subs	r2, #12
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a49      	ldr	r2, [pc, #292]	; (8000bbc <exti_Config+0x1f8>)
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6153      	str	r3, [r2, #20]
	}

	/* Configurar el tipo de flanco según el PIN utilizado*/
	switch(extiConfig->triggerMode){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d01e      	beq.n	8000ae2 <exti_Config+0x11e>
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	dc33      	bgt.n	8000b10 <exti_Config+0x14c>
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <exti_Config+0xee>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d00c      	beq.n	8000aca <exti_Config+0x106>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
		break;
	}
	default:
	{
		break;
 8000ab0:	e02e      	b.n	8000b10 <exti_Config+0x14c>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <exti_Config+0x1fc>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	4611      	mov	r1, r2
 8000abc:	2201      	movs	r2, #1
 8000abe:	408a      	lsls	r2, r1
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a3f      	ldr	r2, [pc, #252]	; (8000bc0 <exti_Config+0x1fc>)
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6093      	str	r3, [r2, #8]
		break;
 8000ac8:	e023      	b.n	8000b12 <exti_Config+0x14e>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 8000aca:	4b3d      	ldr	r3, [pc, #244]	; (8000bc0 <exti_Config+0x1fc>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	408a      	lsls	r2, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4a39      	ldr	r2, [pc, #228]	; (8000bc0 <exti_Config+0x1fc>)
 8000adc:	430b      	orrs	r3, r1
 8000ade:	60d3      	str	r3, [r2, #12]
		break;
 8000ae0:	e017      	b.n	8000b12 <exti_Config+0x14e>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <exti_Config+0x1fc>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	4611      	mov	r1, r2
 8000aec:	2201      	movs	r2, #1
 8000aee:	408a      	lsls	r2, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <exti_Config+0x1fc>)
 8000af4:	430b      	orrs	r3, r1
 8000af6:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 8000af8:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <exti_Config+0x1fc>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	4611      	mov	r1, r2
 8000b02:	2201      	movs	r2, #1
 8000b04:	408a      	lsls	r2, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	4a2d      	ldr	r2, [pc, #180]	; (8000bc0 <exti_Config+0x1fc>)
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	60d3      	str	r3, [r2, #12]
		break;
 8000b0e:	e000      	b.n	8000b12 <exti_Config+0x14e>
		break;
 8000b10:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8000b12:	b672      	cpsid	i
}
 8000b14:	bf00      	nop
	}
	}

	__disable_irq();
	/* Se activa la interrupción para el EXTI configurado */
	EXTI->IMR |= (0b1 << extiConfig->EXTIx);
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <exti_Config+0x1fc>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	2201      	movs	r2, #1
 8000b22:	408a      	lsls	r2, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <exti_Config+0x1fc>)
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]

	/* Se matricula la interrupción correspondiente en el NVIC */

	if (extiConfig->EXTIx == EXTI0){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d103      	bne.n	8000b3c <exti_Config+0x178>
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8000b34:	2006      	movs	r0, #6
 8000b36:	f7ff ff29 	bl	800098c <__NVIC_EnableIRQ>
 8000b3a:	e036      	b.n	8000baa <exti_Config+0x1e6>
	}
	else if (extiConfig->EXTIx == EXTI1){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d103      	bne.n	8000b4c <exti_Config+0x188>
		__NVIC_EnableIRQ(EXTI1_IRQn);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff ff21 	bl	800098c <__NVIC_EnableIRQ>
 8000b4a:	e02e      	b.n	8000baa <exti_Config+0x1e6>
	}
	else if (extiConfig->EXTIx == EXTI2){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d103      	bne.n	8000b5c <exti_Config+0x198>
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8000b54:	2008      	movs	r0, #8
 8000b56:	f7ff ff19 	bl	800098c <__NVIC_EnableIRQ>
 8000b5a:	e026      	b.n	8000baa <exti_Config+0x1e6>
	}
	else if (extiConfig->EXTIx == EXTI3){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d103      	bne.n	8000b6c <exti_Config+0x1a8>
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8000b64:	2009      	movs	r0, #9
 8000b66:	f7ff ff11 	bl	800098c <__NVIC_EnableIRQ>
 8000b6a:	e01e      	b.n	8000baa <exti_Config+0x1e6>
	}
	else if (extiConfig->EXTIx == EXTI4){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d103      	bne.n	8000b7c <exti_Config+0x1b8>
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f7ff ff09 	bl	800098c <__NVIC_EnableIRQ>
 8000b7a:	e016      	b.n	8000baa <exti_Config+0x1e6>
	}
	else if (extiConfig->EXTIx >= EXTI5 && extiConfig->EXTIx <= EXTI9){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d907      	bls.n	8000b94 <exti_Config+0x1d0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b09      	cmp	r3, #9
 8000b8a:	d803      	bhi.n	8000b94 <exti_Config+0x1d0>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b8c:	2017      	movs	r0, #23
 8000b8e:	f7ff fefd 	bl	800098c <__NVIC_EnableIRQ>
 8000b92:	e00a      	b.n	8000baa <exti_Config+0x1e6>
	}
	else if (extiConfig->EXTIx >= EXTI10 && extiConfig->EXTIx <= EXTI15){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d906      	bls.n	8000baa <exti_Config+0x1e6>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d802      	bhi.n	8000baa <exti_Config+0x1e6>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba4:	2028      	movs	r0, #40	; 0x28
 8000ba6:	f7ff fef1 	bl	800098c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000baa:	b662      	cpsie	i
}
 8000bac:	bf00      	nop

	/* Se reactican las interrupciones globales */
	__enable_irq();


}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40013c00 	.word	0x40013c00

08000bc4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0){
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <EXTI0_IRQHandler+0x24>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <EXTI0_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR0;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <EXTI0_IRQHandler+0x24>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <EXTI0_IRQHandler+0x24>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6153      	str	r3, [r2, #20]
		Exti0_Callback();
 8000be0:	f7ff fcb8 	bl	8000554 <Exti0_Callback>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013c00 	.word	0x40013c00

08000bec <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1){
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <EXTI1_IRQHandler+0x24>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <EXTI1_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR1;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <EXTI1_IRQHandler+0x24>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <EXTI1_IRQHandler+0x24>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	6153      	str	r3, [r2, #20]
		Exti1_Callback();
 8000c08:	f000 f8f0 	bl	8000dec <Exti1_Callback>
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013c00 	.word	0x40013c00

08000c14 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2){
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <EXTI2_IRQHandler+0x24>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <EXTI2_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR2;
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <EXTI2_IRQHandler+0x24>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <EXTI2_IRQHandler+0x24>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6153      	str	r3, [r2, #20]
		Exti2_Callback();
 8000c30:	f000 f8e3 	bl	8000dfa <Exti2_Callback>
	}
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40013c00 	.word	0x40013c00

08000c3c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR3){
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <EXTI3_IRQHandler+0x24>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <EXTI3_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR3;
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <EXTI3_IRQHandler+0x24>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <EXTI3_IRQHandler+0x24>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6153      	str	r3, [r2, #20]
		Exti3_Callback();
 8000c58:	f000 f8d6 	bl	8000e08 <Exti3_Callback>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013c00 	.word	0x40013c00

08000c64 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR4){
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <EXTI4_IRQHandler+0x24>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <EXTI4_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR4;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <EXTI4_IRQHandler+0x24>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <EXTI4_IRQHandler+0x24>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6153      	str	r3, [r2, #20]
		Exti4_Callback();
 8000c80:	f000 f8c9 	bl	8000e16 <Exti4_Callback>
	}
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40013c00 	.word	0x40013c00

08000c8c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5){
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f003 0320 	and.w	r3, r3, #32
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR5;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	6153      	str	r3, [r2, #20]
		Exti5_Callback();
 8000ca8:	f000 f8bc 	bl	8000e24 <Exti5_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR9){
		EXTI->PR |= EXTI_PR_PR9;
		Exti9_Callback();
	}
}
 8000cac:	e03a      	b.n	8000d24 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR6){
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d008      	beq.n	8000ccc <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a1a      	ldr	r2, [pc, #104]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc4:	6153      	str	r3, [r2, #20]
		Exti6_Callback();
 8000cc6:	f000 f8b4 	bl	8000e32 <Exti6_Callback>
}
 8000cca:	e02b      	b.n	8000d24 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR7){
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d008      	beq.n	8000cea <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce2:	6153      	str	r3, [r2, #20]
		Exti7_Callback();
 8000ce4:	f000 f8ac 	bl	8000e40 <Exti7_Callback>
}
 8000ce8:	e01c      	b.n	8000d24 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR8){
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d008      	beq.n	8000d08 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6153      	str	r3, [r2, #20]
		Exti8_Callback();
 8000d02:	f000 f8a4 	bl	8000e4e <Exti8_Callback>
}
 8000d06:	e00d      	b.n	8000d24 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR9){
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <EXTI9_5_IRQHandler+0x9c>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6153      	str	r3, [r2, #20]
		Exti9_Callback();
 8000d20:	f000 f89c 	bl	8000e5c <Exti9_Callback>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40013c00 	.word	0x40013c00

08000d2c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR10){
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR10;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6153      	str	r3, [r2, #20]
		Exti10_Callback();
 8000d48:	f000 f88f 	bl	8000e6a <Exti10_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR15){
		EXTI->PR |= EXTI_PR_PR15;
		Exti15_Callback();
	}
}
 8000d4c:	e049      	b.n	8000de2 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR11){
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d008      	beq.n	8000d6c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d64:	6153      	str	r3, [r2, #20]
		Exti11_Callback();
 8000d66:	f000 f887 	bl	8000e78 <Exti11_Callback>
}
 8000d6a:	e03a      	b.n	8000de2 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR12){
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d82:	6153      	str	r3, [r2, #20]
		Exti12_Callback();
 8000d84:	f000 f87f 	bl	8000e86 <Exti12_Callback>
}
 8000d88:	e02b      	b.n	8000de2 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR13){
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d008      	beq.n	8000da8 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000d9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da0:	6153      	str	r3, [r2, #20]
		Exti13_Callback();
 8000da2:	f000 f877 	bl	8000e94 <Exti13_Callback>
}
 8000da6:	e01c      	b.n	8000de2 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR14){
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6153      	str	r3, [r2, #20]
		Exti14_Callback();
 8000dc0:	f000 f86f 	bl	8000ea2 <Exti14_Callback>
}
 8000dc4:	e00d      	b.n	8000de2 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR15){
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <EXTI15_10_IRQHandler+0xbc>)
 8000dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ddc:	6153      	str	r3, [r2, #20]
		Exti15_Callback();
 8000dde:	f000 f867 	bl	8000eb0 <Exti15_Callback>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40013c00 	.word	0x40013c00

08000dec <Exti1_Callback>:


__attribute__ ((weak)) void Exti0_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti1_Callback(void){
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	__NOP();
 8000df0:	bf00      	nop
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <Exti2_Callback>:
__attribute__ ((weak)) void Exti2_Callback(void){
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
	__NOP();
 8000dfe:	bf00      	nop
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <Exti3_Callback>:
__attribute__ ((weak)) void Exti3_Callback(void){
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	__NOP();
 8000e0c:	bf00      	nop
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <Exti4_Callback>:
__attribute__ ((weak)) void Exti4_Callback(void){
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
	__NOP();
 8000e1a:	bf00      	nop
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <Exti5_Callback>:
__attribute__ ((weak)) void Exti5_Callback(void){
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	__NOP();
 8000e28:	bf00      	nop
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <Exti6_Callback>:
__attribute__ ((weak)) void Exti6_Callback(void){
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
	__NOP();
 8000e36:	bf00      	nop
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <Exti7_Callback>:
__attribute__ ((weak)) void Exti7_Callback(void){
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	__NOP();
 8000e44:	bf00      	nop
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <Exti8_Callback>:
__attribute__ ((weak)) void Exti8_Callback(void){
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
	__NOP();
 8000e52:	bf00      	nop
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <Exti9_Callback>:
__attribute__ ((weak)) void Exti9_Callback(void){
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	__NOP();
 8000e60:	bf00      	nop
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <Exti10_Callback>:
__attribute__ ((weak)) void Exti10_Callback(void){
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
	__NOP();
 8000e6e:	bf00      	nop
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <Exti11_Callback>:
__attribute__ ((weak)) void Exti11_Callback(void){
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	__NOP();
 8000e7c:	bf00      	nop
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <Exti12_Callback>:
__attribute__ ((weak)) void Exti12_Callback(void){
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
	__NOP();
 8000e8a:	bf00      	nop
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <Exti13_Callback>:
__attribute__ ((weak)) void Exti13_Callback(void){
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	__NOP();
 8000e98:	bf00      	nop
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <Exti14_Callback>:
__attribute__ ((weak)) void Exti14_Callback(void){
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
	__NOP();
 8000ea6:	bf00      	nop
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <Exti15_Callback>:
__attribute__ ((weak)) void Exti15_Callback(void){
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	__NOP();
 8000eb4:	bf00      	nop
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
	...

08000ec0 <configExtiPin>:

void configExtiPin(uint8_t pinNumber, uint8_t pinPort){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]

	switch (pinPort){
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d82a      	bhi.n	8000f2c <configExtiPin+0x6c>
 8000ed6:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <configExtiPin+0x1c>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000efd 	.word	0x08000efd
 8000ee0:	08000f05 	.word	0x08000f05
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	08000f15 	.word	0x08000f15
 8000eec:	08000f1d 	.word	0x08000f1d
 8000ef0:	08000f2d 	.word	0x08000f2d
 8000ef4:	08000f2d 	.word	0x08000f2d
 8000ef8:	08000f25 	.word	0x08000f25
	case PA:
	{
		handlerExtiPIN.pGPIOx = GPIOA;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <configExtiPin+0x90>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <configExtiPin+0x94>)
 8000f00:	601a      	str	r2, [r3, #0]
		break;
 8000f02:	e014      	b.n	8000f2e <configExtiPin+0x6e>
	}
	case PB:
	{
		handlerExtiPIN.pGPIOx = GPIOB;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <configExtiPin+0x90>)
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <configExtiPin+0x98>)
 8000f08:	601a      	str	r2, [r3, #0]
		break;
 8000f0a:	e010      	b.n	8000f2e <configExtiPin+0x6e>
	}
	case PC:
	{
		handlerExtiPIN.pGPIOx = GPIOC;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <configExtiPin+0x90>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <configExtiPin+0x9c>)
 8000f10:	601a      	str	r2, [r3, #0]
		break;
 8000f12:	e00c      	b.n	8000f2e <configExtiPin+0x6e>
	}
	case PD:
	{
		handlerExtiPIN.pGPIOx = GPIOD;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <configExtiPin+0x90>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <configExtiPin+0xa0>)
 8000f18:	601a      	str	r2, [r3, #0]
		break;
 8000f1a:	e008      	b.n	8000f2e <configExtiPin+0x6e>
	}
	case PE:
	{
		handlerExtiPIN.pGPIOx = GPIOE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <configExtiPin+0x90>)
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <configExtiPin+0xa4>)
 8000f20:	601a      	str	r2, [r3, #0]
		break;
 8000f22:	e004      	b.n	8000f2e <configExtiPin+0x6e>
	}
	case PH:
	{
		handlerExtiPIN.pGPIOx = GPIOH;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <configExtiPin+0x90>)
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <configExtiPin+0xa8>)
 8000f28:	601a      	str	r2, [r3, #0]
		break;
 8000f2a:	e000      	b.n	8000f2e <configExtiPin+0x6e>
	}
	default:
	{
		break;
 8000f2c:	bf00      	nop
	}
	}

	handlerExtiPIN.GPIO_PinConfig.GPIO_PinNumber 		= pinNumber;
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <configExtiPin+0x90>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	7113      	strb	r3, [r2, #4]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <configExtiPin+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	715a      	strb	r2, [r3, #5]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLDOWN;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <configExtiPin+0x90>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerExtiPIN);
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <configExtiPin+0x90>)
 8000f42:	f000 f813 	bl	8000f6c <GPIO_Config>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000e4 	.word	0x200000e4
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40021c00 	.word	0x40021c00

08000f6c <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <GPIO_Config+0x234>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d106      	bne.n	8000f94 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000f86:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <GPIO_Config+0x238>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <GPIO_Config+0x238>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	e03a      	b.n	800100a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a83      	ldr	r2, [pc, #524]	; (80011a8 <GPIO_Config+0x23c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d106      	bne.n	8000fac <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000f9e:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <GPIO_Config+0x238>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a80      	ldr	r2, [pc, #512]	; (80011a4 <GPIO_Config+0x238>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	e02e      	b.n	800100a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <GPIO_Config+0x240>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <GPIO_Config+0x238>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a7a      	ldr	r2, [pc, #488]	; (80011a4 <GPIO_Config+0x238>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	e022      	b.n	800100a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a79      	ldr	r2, [pc, #484]	; (80011b0 <GPIO_Config+0x244>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d106      	bne.n	8000fdc <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000fce:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <GPIO_Config+0x238>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a74      	ldr	r2, [pc, #464]	; (80011a4 <GPIO_Config+0x238>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	e016      	b.n	800100a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a74      	ldr	r2, [pc, #464]	; (80011b4 <GPIO_Config+0x248>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d106      	bne.n	8000ff4 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000fe6:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <GPIO_Config+0x238>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a6e      	ldr	r2, [pc, #440]	; (80011a4 <GPIO_Config+0x238>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	e00a      	b.n	800100a <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a6f      	ldr	r2, [pc, #444]	; (80011b8 <GPIO_Config+0x24c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d105      	bne.n	800100a <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000ffe:	4b69      	ldr	r3, [pc, #420]	; (80011a4 <GPIO_Config+0x238>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a68      	ldr	r2, [pc, #416]	; (80011a4 <GPIO_Config+0x238>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	795b      	ldrb	r3, [r3, #5]
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	791b      	ldrb	r3, [r3, #4]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2103      	movs	r1, #3
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	400a      	ands	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	4619      	mov	r1, r3
 8001066:	2301      	movs	r3, #1
 8001068:	408b      	lsls	r3, r1
 800106a:	43db      	mvns	r3, r3
 800106c:	4619      	mov	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	400a      	ands	r2, r1
 8001074:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	430a      	orrs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	799b      	ldrb	r3, [r3, #6]
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	791b      	ldrb	r3, [r3, #4]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2103      	movs	r1, #3
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	400a      	ands	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6899      	ldr	r1, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	79db      	ldrb	r3, [r3, #7]
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2103      	movs	r1, #3
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	400a      	ands	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68d9      	ldr	r1, [r3, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	430a      	orrs	r2, r1
 8001104:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	795b      	ldrb	r3, [r3, #5]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d143      	bne.n	8001196 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d81f      	bhi.n	8001156 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	210f      	movs	r1, #15
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7a5b      	ldrb	r3, [r3, #9]
 8001142:	4619      	mov	r1, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	4619      	mov	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8001154:	e01f      	b.n	8001196 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	3b08      	subs	r3, #8
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001166:	210f      	movs	r1, #15
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	400a      	ands	r2, r1
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7a5b      	ldrb	r3, [r3, #9]
 8001184:	4619      	mov	r1, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021c00 	.word	0x40021c00

080011bc <GPIO_WritePin>:
/**
 * Función utilizada para cambiar de estado el pin entregado en el handler, asignando el valor
 * entregado en la variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10d      	bne.n	80011ea <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	4619      	mov	r1, r3
 80011da:	2301      	movs	r3, #1
 80011dc:	408b      	lsls	r3, r1
 80011de:	4619      	mov	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80011e8:	e00d      	b.n	8001206 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	791b      	ldrb	r3, [r3, #4]
 80011f4:	3310      	adds	r3, #16
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	619a      	str	r2, [r3, #24]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <GPIO_ReadPin>:

/**
 * Función para leer el estado de un PIN especifico
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cuel luego retornaremos
	uint32_t pinValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]

	//Cargamos el valor del registro IDR, desplazando a la derecha tantas veces como la ubicación del PIN específico
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	7912      	ldrb	r2, [r2, #4]
 8001226:	40d3      	lsrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
	pinValue &= 0b1;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
	return pinValue;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <__libc_init_array>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	4d0d      	ldr	r5, [pc, #52]	; (8001278 <__libc_init_array+0x38>)
 8001244:	4c0d      	ldr	r4, [pc, #52]	; (800127c <__libc_init_array+0x3c>)
 8001246:	1b64      	subs	r4, r4, r5
 8001248:	10a4      	asrs	r4, r4, #2
 800124a:	2600      	movs	r6, #0
 800124c:	42a6      	cmp	r6, r4
 800124e:	d109      	bne.n	8001264 <__libc_init_array+0x24>
 8001250:	4d0b      	ldr	r5, [pc, #44]	; (8001280 <__libc_init_array+0x40>)
 8001252:	4c0c      	ldr	r4, [pc, #48]	; (8001284 <__libc_init_array+0x44>)
 8001254:	f000 f818 	bl	8001288 <_init>
 8001258:	1b64      	subs	r4, r4, r5
 800125a:	10a4      	asrs	r4, r4, #2
 800125c:	2600      	movs	r6, #0
 800125e:	42a6      	cmp	r6, r4
 8001260:	d105      	bne.n	800126e <__libc_init_array+0x2e>
 8001262:	bd70      	pop	{r4, r5, r6, pc}
 8001264:	f855 3b04 	ldr.w	r3, [r5], #4
 8001268:	4798      	blx	r3
 800126a:	3601      	adds	r6, #1
 800126c:	e7ee      	b.n	800124c <__libc_init_array+0xc>
 800126e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001272:	4798      	blx	r3
 8001274:	3601      	adds	r6, #1
 8001276:	e7f2      	b.n	800125e <__libc_init_array+0x1e>
 8001278:	080012a0 	.word	0x080012a0
 800127c:	080012a0 	.word	0x080012a0
 8001280:	080012a0 	.word	0x080012a0
 8001284:	080012a4 	.word	0x080012a4

08001288 <_init>:
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	bf00      	nop
 800128c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128e:	bc08      	pop	{r3}
 8001290:	469e      	mov	lr, r3
 8001292:	4770      	bx	lr

08001294 <_fini>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr
