
Examen_ezapataq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000854c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000acc  080086f0  080086f0  000186f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091bc  080091bc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080091bc  080091bc  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091bc  080091bc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001d8  0800939c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800939c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005480  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001350  00000000  00000000  00025688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  000269d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00026e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001093d  00000000  00000000  00027230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a02  00000000  00000000  00037b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056f04  00000000  00000000  0003d56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00094473  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000944c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086d4 	.word	0x080086d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080086d4 	.word	0x080086d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <main>:
void initSystem(void);
void parseCommands(char *ptrBufferReception);
void servoPartyMode(PWM_Handler_t *ptrHandlerPwm);

/* Función principal */
int main(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	// Se inicializa el sistema y los periféricos
	initSystem();
 8000d2a:	f000 f943 	bl	8000fb4 <initSystem>
	stopTimer(&handlerLcdRefreshTimer); // Se detiene el Timer que controla el refresco de la LCD
 8000d2e:	488a      	ldr	r0, [pc, #552]	; (8000f58 <main+0x234>)
 8000d30:	f001 fafc 	bl	800232c <stopTimer>
	stopPWM(&handlerPWM);				// Se detiene la generación de la señal PWM
 8000d34:	4889      	ldr	r0, [pc, #548]	; (8000f5c <main+0x238>)
 8000d36:	f002 f833 	bl	8002da0 <stopPWM>
	autoUpdateLcd = false;
 8000d3a:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <main+0x23c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	/* Ciclo principal */
	while(1){
		// Las siguientes operaciones se ejecutan cuando el USART utilizado reciba información
		if (rxData != '\0'){
 8000d40:	4b88      	ldr	r3, [pc, #544]	; (8000f64 <main+0x240>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01f      	beq.n	8000d88 <main+0x64>
			// Se comienzan a acumular los caracteres recibidos en un buffer
			bufferReception[counterReception] = rxData;
 8000d48:	4b87      	ldr	r3, [pc, #540]	; (8000f68 <main+0x244>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b85      	ldr	r3, [pc, #532]	; (8000f64 <main+0x240>)
 8000d50:	7819      	ldrb	r1, [r3, #0]
 8000d52:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <main+0x248>)
 8000d54:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d56:	4b84      	ldr	r3, [pc, #528]	; (8000f68 <main+0x244>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b82      	ldr	r3, [pc, #520]	; (8000f68 <main+0x244>)
 8000d60:	801a      	strh	r2, [r3, #0]
			// Si se recibe el caracter @ se activa la variable de estado que indica que se recibió la información necesaria
			if (rxData == '@'){
 8000d62:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <main+0x240>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b40      	cmp	r3, #64	; 0x40
 8000d68:	d10b      	bne.n	8000d82 <main+0x5e>
				stringComplete = true;
 8000d6a:	4b81      	ldr	r3, [pc, #516]	; (8000f70 <main+0x24c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
				bufferReception[counterReception-1] = '\0';  // Se hace nulo la posición del caracter @
 8000d70:	4b7d      	ldr	r3, [pc, #500]	; (8000f68 <main+0x244>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	4a7d      	ldr	r2, [pc, #500]	; (8000f6c <main+0x248>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	54d1      	strb	r1, [r2, r3]
				counterReception = 0;
 8000d7c:	4b7a      	ldr	r3, [pc, #488]	; (8000f68 <main+0x244>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	801a      	strh	r2, [r3, #0]
			}
			rxData = '\0'; // Se hace nulo la variable rxData con el fin de que sólo se entre a la condición cuando el Usart recibe datos
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <main+0x240>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		}
		// Las siguientes operaciones se ejecutan cuando el buffer de recepción tiene la información completa
		if (stringComplete){
 8000d88:	4b79      	ldr	r3, [pc, #484]	; (8000f70 <main+0x24c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <main+0x78>
			// Se llama a la función parseCommands, la cual ejecuta el código correspondiente al comando enviado vía USART
			parseCommands(bufferReception);
 8000d90:	4876      	ldr	r0, [pc, #472]	; (8000f6c <main+0x248>)
 8000d92:	f000 fa59 	bl	8001248 <parseCommands>
			stringComplete = false;
 8000d96:	4b76      	ldr	r3, [pc, #472]	; (8000f70 <main+0x24c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
		}
		// Las siguientes operaciones se ejecutan cuando se termina la conversión ADC (en la cual se hace conversión de dos canales y se guardan los datos en el
		// arreglo joystickAdcData
		if (adcIsComplete == true){
 8000d9c:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <main+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d042      	beq.n	8000e2a <main+0x106>
			stopContinuousConversion(); 						// Se detiene la conversión
 8000da4:	f001 f8ce 	bl	8001f44 <stopContinuousConversion>
			// Se calcula el Duty con el que se controlará el servomotor que depende de ambos ejes del joystick según la suma de ambos ejes
			// Además, el mínimo valor de Duty que puede ingresarse en el motor es 50, y el máximo 230, para un timer con una velocidad de 10us y 50Hz de frecuencia
			newDuty = joystickAdcData[0] + joystickAdcData[1];
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <main+0x254>)
 8000daa:	881a      	ldrh	r2, [r3, #0]
 8000dac:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <main+0x254>)
 8000dae:	885b      	ldrh	r3, [r3, #2]
 8000db0:	4413      	add	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b71      	ldr	r3, [pc, #452]	; (8000f7c <main+0x258>)
 8000db6:	801a      	strh	r2, [r3, #0]
			newDuty = (180*newDuty)/8190 + 50;
 8000db8:	4b70      	ldr	r3, [pc, #448]	; (8000f7c <main+0x258>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	23b4      	movs	r3, #180	; 0xb4
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <main+0x25c>)
 8000dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dca:	441a      	add	r2, r3
 8000dcc:	1312      	asrs	r2, r2, #12
 8000dce:	17db      	asrs	r3, r3, #31
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3332      	adds	r3, #50	; 0x32
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b68      	ldr	r3, [pc, #416]	; (8000f7c <main+0x258>)
 8000dda:	801a      	strh	r2, [r3, #0]
			// Las variables AdcXLine y AdcYLine contienen la longitud de la barra que muestra el valor de ADC en la LCD (en macropíxeles)
			AdcXLine = (8*joystickAdcData[0])/4095 + 1;
 8000ddc:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <main+0x254>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4a67      	ldr	r2, [pc, #412]	; (8000f80 <main+0x25c>)
 8000de4:	fb82 1203 	smull	r1, r2, r2, r3
 8000de8:	441a      	add	r2, r3
 8000dea:	12d2      	asrs	r2, r2, #11
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	3301      	adds	r3, #1
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b63      	ldr	r3, [pc, #396]	; (8000f84 <main+0x260>)
 8000df8:	801a      	strh	r2, [r3, #0]
			AdcYLine = (8*joystickAdcData[1])/4095 + 1;
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <main+0x254>)
 8000dfc:	885b      	ldrh	r3, [r3, #2]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <main+0x25c>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	441a      	add	r2, r3
 8000e08:	12d2      	asrs	r2, r2, #11
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b5c      	ldr	r3, [pc, #368]	; (8000f88 <main+0x264>)
 8000e16:	801a      	strh	r2, [r3, #0]
			// Si el control por PWM del ADC está activo, se actualiza el Duty según lo calculado anteriormente
			setPwmDuty(&handlerPWM, newDuty);
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <main+0x258>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	484f      	ldr	r0, [pc, #316]	; (8000f5c <main+0x238>)
 8000e20:	f001 ff84 	bl	8002d2c <setPwmDuty>
			adcIsComplete = false;
 8000e24:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <main+0x250>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
		}
		// Las siguientes operaciones se ejecutan si el auto refresco de la LCD está activado
		if (autoUpdateLcd){
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <main+0x23c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8089 	beq.w	8000f46 <main+0x222>
			// Como el proceso de escritura en la LCD es lento respecto a los demás procesos llevados a cabo por el MCU, se hace el refresco de la misma por segmentos
			// De manera que en un ciclo del Timer que controla la velocidad de refresco, se actualicen las barras de ADC, y en otro se actualicen los valores numéricos
			if (LCD_segment){
 8000e34:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <main+0x268>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d043      	beq.n	8000ec4 <main+0x1a0>
				// En este caso se actualizan los valores numéricos
				// Se separa la actualización entre los datos de la conversión ADC y los datos del PWM que controla el motor, pues en algunos comandos solo estará
				// funcionando la conversión ADC, en otros solo estará funcionando el motor controlado con comandos, y en el caso más usual ambos pueden estar
				// trabajando en conjunto
				if (AdcON){
 8000e3c:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <main+0x26c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d019      	beq.n	8000e78 <main+0x154>
					// Se actualizan los datos de la conversión ADC
					sprintf(bufferData, "%u   ", (unsigned int) joystickAdcData[0]);
 8000e44:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <main+0x254>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4952      	ldr	r1, [pc, #328]	; (8000f94 <main+0x270>)
 8000e4c:	4852      	ldr	r0, [pc, #328]	; (8000f98 <main+0x274>)
 8000e4e:	f003 fa17 	bl	8004280 <siprintf>
					LCD_writeStringXY(&handlerLCD, bufferData, 1, 16);
 8000e52:	2310      	movs	r3, #16
 8000e54:	2201      	movs	r2, #1
 8000e56:	4950      	ldr	r1, [pc, #320]	; (8000f98 <main+0x274>)
 8000e58:	4850      	ldr	r0, [pc, #320]	; (8000f9c <main+0x278>)
 8000e5a:	f001 fe4f 	bl	8002afc <LCD_writeStringXY>
					sprintf(bufferData, "%u   ", (unsigned int) joystickAdcData[1]);
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <main+0x254>)
 8000e60:	885b      	ldrh	r3, [r3, #2]
 8000e62:	461a      	mov	r2, r3
 8000e64:	494b      	ldr	r1, [pc, #300]	; (8000f94 <main+0x270>)
 8000e66:	484c      	ldr	r0, [pc, #304]	; (8000f98 <main+0x274>)
 8000e68:	f003 fa0a 	bl	8004280 <siprintf>
					LCD_writeStringXY(&handlerLCD, bufferData, 4, 16);
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4949      	ldr	r1, [pc, #292]	; (8000f98 <main+0x274>)
 8000e72:	484a      	ldr	r0, [pc, #296]	; (8000f9c <main+0x278>)
 8000e74:	f001 fe42 	bl	8002afc <LCD_writeStringXY>
				}
				if (ServoON){
 8000e78:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <main+0x27c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d05f      	beq.n	8000f40 <main+0x21c>
					degree = newDuty - 50;	// Se calcula el grado al que se encuentra el motor según su valor de Duty
 8000e80:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <main+0x258>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	3b32      	subs	r3, #50	; 0x32
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <main+0x280>)
 8000e8a:	801a      	strh	r2, [r3, #0]
					// Se actualizan los datos referentes al motor
					sprintf(bufferData, "%u  ", (unsigned int) newDuty);
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <main+0x258>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4945      	ldr	r1, [pc, #276]	; (8000fa8 <main+0x284>)
 8000e94:	4840      	ldr	r0, [pc, #256]	; (8000f98 <main+0x274>)
 8000e96:	f003 f9f3 	bl	8004280 <siprintf>
					LCD_writeStringXY(&handlerLCD, bufferData, 2, 16);
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	493e      	ldr	r1, [pc, #248]	; (8000f98 <main+0x274>)
 8000ea0:	483e      	ldr	r0, [pc, #248]	; (8000f9c <main+0x278>)
 8000ea2:	f001 fe2b 	bl	8002afc <LCD_writeStringXY>
					sprintf(bufferData, "%u%c  ", (unsigned int) degree, 0xDF);
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <main+0x280>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	23df      	movs	r3, #223	; 0xdf
 8000eae:	493f      	ldr	r1, [pc, #252]	; (8000fac <main+0x288>)
 8000eb0:	4839      	ldr	r0, [pc, #228]	; (8000f98 <main+0x274>)
 8000eb2:	f003 f9e5 	bl	8004280 <siprintf>
					LCD_writeStringXY(&handlerLCD, bufferData, 3, 15);
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4937      	ldr	r1, [pc, #220]	; (8000f98 <main+0x274>)
 8000ebc:	4837      	ldr	r0, [pc, #220]	; (8000f9c <main+0x278>)
 8000ebe:	f001 fe1d 	bl	8002afc <LCD_writeStringXY>
 8000ec2:	e03d      	b.n	8000f40 <main+0x21c>
				}
			} else {
				// Se actualizan las barras de ADC solo en el caso que la conversión ADC esté activada
				if (AdcON){
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <main+0x26c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d039      	beq.n	8000f40 <main+0x21c>
					// Se ubica el cursor de la LCD en el inicio de la barra para el ADCx
					LCD_cursorPosition(&handlerLCD, 2, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4832      	ldr	r0, [pc, #200]	; (8000f9c <main+0x278>)
 8000ed2:	f001 fdbb 	bl	8002a4c <LCD_cursorPosition>
					// Se llena la barra encendiendo to.do el macropíxel hasta el valor AdcXLine y se ponen los demas en blanco
					for (uint i = 1; i <= 9; i++){
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e011      	b.n	8000f00 <main+0x1dc>
						if (i <= AdcXLine){
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <main+0x260>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d804      	bhi.n	8000ef2 <main+0x1ce>
							LCD_writeCharacter(&handlerLCD, 0xFF);
 8000ee8:	21ff      	movs	r1, #255	; 0xff
 8000eea:	482c      	ldr	r0, [pc, #176]	; (8000f9c <main+0x278>)
 8000eec:	f001 fd8d 	bl	8002a0a <LCD_writeCharacter>
 8000ef0:	e003      	b.n	8000efa <main+0x1d6>
						} else {
							LCD_writeCharacter(&handlerLCD, ' ');
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4829      	ldr	r0, [pc, #164]	; (8000f9c <main+0x278>)
 8000ef6:	f001 fd88 	bl	8002a0a <LCD_writeCharacter>
					for (uint i = 1; i <= 9; i++){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3301      	adds	r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b09      	cmp	r3, #9
 8000f04:	d9ea      	bls.n	8000edc <main+0x1b8>
						}
					}
					// Se ubica el cursor de la LCD en el inicio de la barra para el ADCy
					LCD_cursorPosition(&handlerLCD, 4, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4824      	ldr	r0, [pc, #144]	; (8000f9c <main+0x278>)
 8000f0c:	f001 fd9e 	bl	8002a4c <LCD_cursorPosition>
					// Se llena la barra encendiendo to.do el macropíxel hasta el valor AdcYLine y se ponen los demas en blanco
					for (uint i = 1; i <= 9; i++){
 8000f10:	2301      	movs	r3, #1
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	e011      	b.n	8000f3a <main+0x216>
						if (i <= AdcYLine){
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <main+0x264>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d804      	bhi.n	8000f2c <main+0x208>
							LCD_writeCharacter(&handlerLCD, 0xFF);
 8000f22:	21ff      	movs	r1, #255	; 0xff
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <main+0x278>)
 8000f26:	f001 fd70 	bl	8002a0a <LCD_writeCharacter>
 8000f2a:	e003      	b.n	8000f34 <main+0x210>
						} else {
							LCD_writeCharacter(&handlerLCD, ' ');
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	481b      	ldr	r0, [pc, #108]	; (8000f9c <main+0x278>)
 8000f30:	f001 fd6b 	bl	8002a0a <LCD_writeCharacter>
					for (uint i = 1; i <= 9; i++){
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b09      	cmp	r3, #9
 8000f3e:	d9ea      	bls.n	8000f16 <main+0x1f2>
						}
					}
				}
			}
			autoUpdateLcd = false;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <main+0x23c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		}
		// La siguiente función se ejecuta si el Modo Party está activado
		if (partyMode){
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <main+0x28c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f43f aef8 	beq.w	8000d40 <main+0x1c>
			servoPartyMode(&handlerPWM);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <main+0x238>)
 8000f52:	f000 fc63 	bl	800181c <servoPartyMode>
		if (rxData != '\0'){
 8000f56:	e6f3      	b.n	8000d40 <main+0x1c>
 8000f58:	20000228 	.word	0x20000228
 8000f5c:	200002c4 	.word	0x200002c4
 8000f60:	20000333 	.word	0x20000333
 8000f64:	20000398 	.word	0x20000398
 8000f68:	2000039a 	.word	0x2000039a
 8000f6c:	20000338 	.word	0x20000338
 8000f70:	20000332 	.word	0x20000332
 8000f74:	2000031c 	.word	0x2000031c
 8000f78:	20000318 	.word	0x20000318
 8000f7c:	2000032a 	.word	0x2000032a
 8000f80:	80080081 	.word	0x80080081
 8000f84:	20000324 	.word	0x20000324
 8000f88:	20000326 	.word	0x20000326
 8000f8c:	2000032e 	.word	0x2000032e
 8000f90:	20000328 	.word	0x20000328
 8000f94:	080086f0 	.word	0x080086f0
 8000f98:	20000358 	.word	0x20000358
 8000f9c:	200002f4 	.word	0x200002f4
 8000fa0:	2000032d 	.word	0x2000032d
 8000fa4:	20000330 	.word	0x20000330
 8000fa8:	080086f8 	.word	0x080086f8
 8000fac:	08008700 	.word	0x08008700
 8000fb0:	2000032c 	.word	0x2000032c

08000fb4 <initSystem>:
		}
	}

}

void initSystem(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	/**
	 * La función initSystem se encarga de inicializar y configurar los periféricos a utilizar
	 */
	/* Configuración para el State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 8000fb8:	4b8e      	ldr	r3, [pc, #568]	; (80011f4 <initSystem+0x240>)
 8000fba:	4a8f      	ldr	r2, [pc, #572]	; (80011f8 <initSystem+0x244>)
 8000fbc:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000fbe:	4b8d      	ldr	r3, [pc, #564]	; (80011f4 <initSystem+0x240>)
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000fc4:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <initSystem+0x240>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000fca:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <initSystem+0x240>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000fd0:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <initSystem+0x240>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000fd6:	4b87      	ldr	r3, [pc, #540]	; (80011f4 <initSystem+0x240>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;
 8000fdc:	4b85      	ldr	r3, [pc, #532]	; (80011f4 <initSystem+0x240>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8000fe2:	4884      	ldr	r0, [pc, #528]	; (80011f4 <initSystem+0x240>)
 8000fe4:	f001 fa0e 	bl	8002404 <GPIO_Config>

	// Configuración del PIN que recibe la información por la USB (RX) */
	handlerRxPIN.pGPIOx								= GPIOA;
 8000fe8:	4b84      	ldr	r3, [pc, #528]	; (80011fc <initSystem+0x248>)
 8000fea:	4a83      	ldr	r2, [pc, #524]	; (80011f8 <initSystem+0x244>)
 8000fec:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_10;
 8000fee:	4b83      	ldr	r3, [pc, #524]	; (80011fc <initSystem+0x248>)
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000ff4:	4b81      	ldr	r3, [pc, #516]	; (80011fc <initSystem+0x248>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000ffa:	4b80      	ldr	r3, [pc, #512]	; (80011fc <initSystem+0x248>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001000:	4b7e      	ldr	r3, [pc, #504]	; (80011fc <initSystem+0x248>)
 8001002:	2200      	movs	r2, #0
 8001004:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001006:	4b7d      	ldr	r3, [pc, #500]	; (80011fc <initSystem+0x248>)
 8001008:	2201      	movs	r2, #1
 800100a:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 800100c:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <initSystem+0x248>)
 800100e:	2207      	movs	r2, #7
 8001010:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 8001012:	487a      	ldr	r0, [pc, #488]	; (80011fc <initSystem+0x248>)
 8001014:	f001 f9f6 	bl	8002404 <GPIO_Config>

	/* Configuración del PIN que envía la información por la USB (TX) */
	handlerTxPIN.pGPIOx								= GPIOA;
 8001018:	4b79      	ldr	r3, [pc, #484]	; (8001200 <initSystem+0x24c>)
 800101a:	4a77      	ldr	r2, [pc, #476]	; (80011f8 <initSystem+0x244>)
 800101c:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 800101e:	4b78      	ldr	r3, [pc, #480]	; (8001200 <initSystem+0x24c>)
 8001020:	2209      	movs	r2, #9
 8001022:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001024:	4b76      	ldr	r3, [pc, #472]	; (8001200 <initSystem+0x24c>)
 8001026:	2202      	movs	r2, #2
 8001028:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800102a:	4b75      	ldr	r3, [pc, #468]	; (8001200 <initSystem+0x24c>)
 800102c:	2200      	movs	r2, #0
 800102e:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001030:	4b73      	ldr	r3, [pc, #460]	; (8001200 <initSystem+0x24c>)
 8001032:	2200      	movs	r2, #0
 8001034:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001036:	4b72      	ldr	r3, [pc, #456]	; (8001200 <initSystem+0x24c>)
 8001038:	2201      	movs	r2, #1
 800103a:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 800103c:	4b70      	ldr	r3, [pc, #448]	; (8001200 <initSystem+0x24c>)
 800103e:	2207      	movs	r2, #7
 8001040:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 8001042:	486f      	ldr	r0, [pc, #444]	; (8001200 <initSystem+0x24c>)
 8001044:	f001 f9de 	bl	8002404 <GPIO_Config>

	/* Configuración del USART1 */
	handlerUSART1.ptrUSARTx							= USART1;
 8001048:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <initSystem+0x250>)
 800104a:	4a6f      	ldr	r2, [pc, #444]	; (8001208 <initSystem+0x254>)
 800104c:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_mode			= USART_MODE_RXTX;
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <initSystem+0x250>)
 8001050:	2202      	movs	r2, #2
 8001052:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8001054:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <initSystem+0x250>)
 8001056:	2202      	movs	r2, #2
 8001058:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <initSystem+0x250>)
 800105c:	2200      	movs	r2, #0
 800105e:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity			= USART_PARITY_NONE;
 8001060:	4b68      	ldr	r3, [pc, #416]	; (8001204 <initSystem+0x250>)
 8001062:	2200      	movs	r2, #0
 8001064:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <initSystem+0x250>)
 8001068:	2200      	movs	r2, #0
 800106a:	721a      	strb	r2, [r3, #8]
	handlerUSART1.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 800106c:	4b65      	ldr	r3, [pc, #404]	; (8001204 <initSystem+0x250>)
 800106e:	2201      	movs	r2, #1
 8001070:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del USART
	USART_Config(&handlerUSART1);
 8001072:	4864      	ldr	r0, [pc, #400]	; (8001204 <initSystem+0x250>)
 8001074:	f001 ffc8 	bl	8003008 <USART_Config>

	/* Configuración del Timer 2 */
	handlerStateLedTimer.ptrTIMx						= TIM2;
 8001078:	4b64      	ldr	r3, [pc, #400]	; (800120c <initSystem+0x258>)
 800107a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107e:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode			= TIMER_MODE_UP;
 8001080:	4b62      	ldr	r3, [pc, #392]	; (800120c <initSystem+0x258>)
 8001082:	2201      	movs	r2, #1
 8001084:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_10us;
 8001086:	4b61      	ldr	r3, [pc, #388]	; (800120c <initSystem+0x258>)
 8001088:	22a0      	movs	r2, #160	; 0xa0
 800108a:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period		= 100;
 800108c:	4b5f      	ldr	r3, [pc, #380]	; (800120c <initSystem+0x258>)
 800108e:	2264      	movs	r2, #100	; 0x64
 8001090:	609a      	str	r2, [r3, #8]
	// Cargamos la configuración TIM2
	BTimer_Config(&handlerStateLedTimer);
 8001092:	485e      	ldr	r0, [pc, #376]	; (800120c <initSystem+0x258>)
 8001094:	f001 f880 	bl	8002198 <BTimer_Config>

	/* Configuración del Timer para el refresco de la LCD */
	handlerLcdRefreshTimer.ptrTIMx						= TIM4;
 8001098:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <initSystem+0x25c>)
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <initSystem+0x260>)
 800109c:	601a      	str	r2, [r3, #0]
	handlerLcdRefreshTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 800109e:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <initSystem+0x25c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	711a      	strb	r2, [r3, #4]
	handlerLcdRefreshTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 80010a4:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <initSystem+0x25c>)
 80010a6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80010aa:	80da      	strh	r2, [r3, #6]
	handlerLcdRefreshTimer.timerConfig.Timer_period		= 250;
 80010ac:	4b58      	ldr	r3, [pc, #352]	; (8001210 <initSystem+0x25c>)
 80010ae:	22fa      	movs	r2, #250	; 0xfa
 80010b0:	609a      	str	r2, [r3, #8]
	// Cargamos la configuración TIM4
	BTimer_Config(&handlerLcdRefreshTimer);
 80010b2:	4857      	ldr	r0, [pc, #348]	; (8001210 <initSystem+0x25c>)
 80010b4:	f001 f870 	bl	8002198 <BTimer_Config>

	/* Configuracion del ADC para el eje X del Joystick */
	adcVxJoystick.channel			= ADC_CHANNEL_0;
 80010b8:	4b57      	ldr	r3, [pc, #348]	; (8001218 <initSystem+0x264>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
	adcVxJoystick.dataAlignment		= ADC_ALIGNMENT_RIGHT;
 80010be:	4b56      	ldr	r3, [pc, #344]	; (8001218 <initSystem+0x264>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	711a      	strb	r2, [r3, #4]
	adcVxJoystick.resolution		= ADC_RESOLUTION_12_BIT;
 80010c4:	4b54      	ldr	r3, [pc, #336]	; (8001218 <initSystem+0x264>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	705a      	strb	r2, [r3, #1]
	adcVxJoystick.samplingPeriod	= ADC_SAMPLING_PERIOD_144_CYCLES;
 80010ca:	4b53      	ldr	r3, [pc, #332]	; (8001218 <initSystem+0x264>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	805a      	strh	r2, [r3, #2]
	joystickAxes[0] = adcVxJoystick;
 80010d0:	4b52      	ldr	r3, [pc, #328]	; (800121c <initSystem+0x268>)
 80010d2:	4a51      	ldr	r2, [pc, #324]	; (8001218 <initSystem+0x264>)
 80010d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d8:	6018      	str	r0, [r3, #0]
 80010da:	3304      	adds	r3, #4
 80010dc:	8019      	strh	r1, [r3, #0]
	// Se carga la configuración del ADC
	adcSingle_Config(&adcVxJoystick);
 80010de:	484e      	ldr	r0, [pc, #312]	; (8001218 <initSystem+0x264>)
 80010e0:	f000 fde2 	bl	8001ca8 <adcSingle_Config>

	/* Configuracion del ADC para el eje Y del Joystick */
	adcVyJoystick.channel			= ADC_CHANNEL_8;
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <initSystem+0x26c>)
 80010e6:	2208      	movs	r2, #8
 80010e8:	701a      	strb	r2, [r3, #0]
	adcVyJoystick.dataAlignment		= ADC_ALIGNMENT_RIGHT;
 80010ea:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <initSystem+0x26c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	711a      	strb	r2, [r3, #4]
	adcVyJoystick.resolution		= ADC_RESOLUTION_12_BIT;
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <initSystem+0x26c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	705a      	strb	r2, [r3, #1]
	adcVyJoystick.samplingPeriod	= ADC_SAMPLING_PERIOD_144_CYCLES;
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <initSystem+0x26c>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	805a      	strh	r2, [r3, #2]
	joystickAxes[1] = adcVyJoystick;
 80010fc:	4b47      	ldr	r3, [pc, #284]	; (800121c <initSystem+0x268>)
 80010fe:	4a48      	ldr	r2, [pc, #288]	; (8001220 <initSystem+0x26c>)
 8001100:	3306      	adds	r3, #6
 8001102:	6810      	ldr	r0, [r2, #0]
 8001104:	6018      	str	r0, [r3, #0]
 8001106:	8892      	ldrh	r2, [r2, #4]
 8001108:	809a      	strh	r2, [r3, #4]
	// Se carga la configuración del ADC
	adcSingle_Config(&adcVyJoystick);
 800110a:	4845      	ldr	r0, [pc, #276]	; (8001220 <initSystem+0x26c>)
 800110c:	f000 fdcc 	bl	8001ca8 <adcSingle_Config>
	// Se carga la configuración para hacer trabajar el ADC con 2 canales
	adcSQRx_Config(joystickAxes, NUM_ADC_CONVERSIONS);
 8001110:	2102      	movs	r1, #2
 8001112:	4842      	ldr	r0, [pc, #264]	; (800121c <initSystem+0x268>)
 8001114:	f000 fe8a 	bl	8001e2c <adcSQRx_Config>

	/* Configuración del Pin por el que se tomará el PWM para el servomotor */
	handlerPwmPin.pGPIOx 								= GPIOA;
 8001118:	4b42      	ldr	r3, [pc, #264]	; (8001224 <initSystem+0x270>)
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <initSystem+0x244>)
 800111c:	601a      	str	r2, [r3, #0]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <initSystem+0x270>)
 8001120:	2206      	movs	r2, #6
 8001122:	711a      	strb	r2, [r3, #4]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <initSystem+0x270>)
 8001126:	2202      	movs	r2, #2
 8001128:	715a      	strb	r2, [r3, #5]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <initSystem+0x270>)
 800112c:	2200      	movs	r2, #0
 800112e:	721a      	strb	r2, [r3, #8]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <initSystem+0x270>)
 8001132:	2203      	movs	r2, #3
 8001134:	719a      	strb	r2, [r3, #6]
	handlerPwmPin.GPIO_PinConfig.GPIO_PinAltFunMode		= AF2;
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <initSystem+0x270>)
 8001138:	2202      	movs	r2, #2
 800113a:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Pin para el PWM
	GPIO_Config(&handlerPwmPin);
 800113c:	4839      	ldr	r0, [pc, #228]	; (8001224 <initSystem+0x270>)
 800113e:	f001 f961 	bl	8002404 <GPIO_Config>

	/* Configuración del Timer 3 para el PWM */
	handlerPWM.ptrTIMx 					= TIM3;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <initSystem+0x274>)
 8001144:	4a39      	ldr	r2, [pc, #228]	; (800122c <initSystem+0x278>)
 8001146:	601a      	str	r2, [r3, #0]
	handlerPWM.pwmConfig.PWM_channel 	= CHANNEL1;
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <initSystem+0x274>)
 800114a:	2201      	movs	r2, #1
 800114c:	711a      	strb	r2, [r3, #4]
	handlerPWM.pwmConfig.PWM_prescaler	= TIMER_INCR_SPEED_10us;
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <initSystem+0x274>)
 8001150:	22a0      	movs	r2, #160	; 0xa0
 8001152:	80da      	strh	r2, [r3, #6]
	handlerPWM.pwmConfig.PWM_period		= 2000;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <initSystem+0x274>)
 8001156:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800115a:	811a      	strh	r2, [r3, #8]
	handlerPWM.pwmConfig.PWM_dutyCycle	= 50;
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <initSystem+0x274>)
 800115e:	2232      	movs	r2, #50	; 0x32
 8001160:	815a      	strh	r2, [r3, #10]
	// Se carga la configuración del PWM
	PWM_Config(&handlerPWM);
 8001162:	4831      	ldr	r0, [pc, #196]	; (8001228 <initSystem+0x274>)
 8001164:	f001 fce4 	bl	8002b30 <PWM_Config>
	newDuty = 50;
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <initSystem+0x27c>)
 800116a:	2232      	movs	r2, #50	; 0x32
 800116c:	801a      	strh	r2, [r3, #0]

	/* Configurando los pines sobre los que funciona el I2C1 */
	handlerI2CSCL.pGPIOx								= GPIOB;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <initSystem+0x280>)
 8001170:	4a31      	ldr	r2, [pc, #196]	; (8001238 <initSystem+0x284>)
 8001172:	601a      	str	r2, [r3, #0]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <initSystem+0x280>)
 8001176:	2206      	movs	r2, #6
 8001178:	711a      	strb	r2, [r3, #4]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <initSystem+0x280>)
 800117c:	2202      	movs	r2, #2
 800117e:	715a      	strb	r2, [r3, #5]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <initSystem+0x280>)
 8001182:	2201      	movs	r2, #1
 8001184:	721a      	strb	r2, [r3, #8]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <initSystem+0x280>)
 8001188:	2201      	movs	r2, #1
 800118a:	71da      	strb	r2, [r3, #7]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <initSystem+0x280>)
 800118e:	2202      	movs	r2, #2
 8001190:	719a      	strb	r2, [r3, #6]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <initSystem+0x280>)
 8001194:	2204      	movs	r2, #4
 8001196:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerI2CSCL);
 8001198:	4826      	ldr	r0, [pc, #152]	; (8001234 <initSystem+0x280>)
 800119a:	f001 f933 	bl	8002404 <GPIO_Config>

	/* Configurando los pines sobre los que funciona el I2C1 */
	handlerI2CSDA.pGPIOx								= GPIOB;
 800119e:	4b27      	ldr	r3, [pc, #156]	; (800123c <initSystem+0x288>)
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <initSystem+0x284>)
 80011a2:	601a      	str	r2, [r3, #0]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <initSystem+0x288>)
 80011a6:	2207      	movs	r2, #7
 80011a8:	711a      	strb	r2, [r3, #4]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <initSystem+0x288>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	715a      	strb	r2, [r3, #5]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <initSystem+0x288>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	721a      	strb	r2, [r3, #8]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <initSystem+0x288>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	71da      	strb	r2, [r3, #7]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <initSystem+0x288>)
 80011be:	2202      	movs	r2, #2
 80011c0:	719a      	strb	r2, [r3, #6]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <initSystem+0x288>)
 80011c4:	2204      	movs	r2, #4
 80011c6:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerI2CSDA);
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <initSystem+0x288>)
 80011ca:	f001 f91b 	bl	8002404 <GPIO_Config>

	/* Configuración del I2C para la comunicación con la LCD */
	handlerLCD.ptrI2Cx		= I2C1;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <initSystem+0x28c>)
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <initSystem+0x290>)
 80011d2:	601a      	str	r2, [r3, #0]
	handlerLCD.modeI2C		= I2C_MODE_FM;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <initSystem+0x28c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	715a      	strb	r2, [r3, #5]
	handlerLCD.slaveAddress	= 0b0100111;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <initSystem+0x28c>)
 80011dc:	2227      	movs	r2, #39	; 0x27
 80011de:	711a      	strb	r2, [r3, #4]
	// Se carga la configuración del I2C
	I2C_Config(&handlerLCD);
 80011e0:	4817      	ldr	r0, [pc, #92]	; (8001240 <initSystem+0x28c>)
 80011e2:	f001 fa39 	bl	8002658 <I2C_Config>

	// Se activa el SysTick
	config_SysTickMs();
 80011e6:	f001 fe1d 	bl	8002e24 <config_SysTickMs>

	// Se activa la FPU
	FPU_Config();
 80011ea:	f001 f8f9 	bl	80023e0 <FPU_Config>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001f4 	.word	0x200001f4
 80011f8:	40020000 	.word	0x40020000
 80011fc:	20000200 	.word	0x20000200
 8001200:	2000020c 	.word	0x2000020c
 8001204:	20000238 	.word	0x20000238
 8001208:	40011000 	.word	0x40011000
 800120c:	20000218 	.word	0x20000218
 8001210:	20000228 	.word	0x20000228
 8001214:	40000800 	.word	0x40000800
 8001218:	200002fc 	.word	0x200002fc
 800121c:	2000030c 	.word	0x2000030c
 8001220:	20000304 	.word	0x20000304
 8001224:	200002d0 	.word	0x200002d0
 8001228:	200002c4 	.word	0x200002c4
 800122c:	40000400 	.word	0x40000400
 8001230:	2000032a 	.word	0x2000032a
 8001234:	200002e8 	.word	0x200002e8
 8001238:	40020400 	.word	0x40020400
 800123c:	200002dc 	.word	0x200002dc
 8001240:	200002f4 	.word	0x200002f4
 8001244:	40005400 	.word	0x40005400

08001248 <parseCommands>:

void parseCommands(char *ptrBufferReception){
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	/**
	 * La función parseCommands se encarga del control del programa por medio de comandos mediante el USART
	 */
	// Se toma la información del buffer recibido, leyendo el comando y el parámetro ingresado
	sscanf(ptrBufferReception, "%s %u ", cmd, (unsigned int*) &firstParameter);
 8001250:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <parseCommands+0x298>)
 8001252:	4aa4      	ldr	r2, [pc, #656]	; (80014e4 <parseCommands+0x29c>)
 8001254:	49a4      	ldr	r1, [pc, #656]	; (80014e8 <parseCommands+0x2a0>)
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f003 f832 	bl	80042c0 <siscanf>
	// Se ejecuta si el comando es "Menu"
	if (strcmp(cmd, "Menu") == 0){
 800125c:	49a3      	ldr	r1, [pc, #652]	; (80014ec <parseCommands+0x2a4>)
 800125e:	48a1      	ldr	r0, [pc, #644]	; (80014e4 <parseCommands+0x29c>)
 8001260:	f7fe ffbe 	bl	80001e0 <strcmp>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13c      	bne.n	80012e4 <parseCommands+0x9c>
		// Se imprime el Menu de comandos
		writeMsg(&handlerUSART1, "\nHelp Menu CMDS:\n");
 800126a:	49a1      	ldr	r1, [pc, #644]	; (80014f0 <parseCommands+0x2a8>)
 800126c:	48a1      	ldr	r0, [pc, #644]	; (80014f4 <parseCommands+0x2ac>)
 800126e:	f002 f893 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "1)  Menu              -- Print this menu\n");
 8001272:	49a1      	ldr	r1, [pc, #644]	; (80014f8 <parseCommands+0x2b0>)
 8001274:	489f      	ldr	r0, [pc, #636]	; (80014f4 <parseCommands+0x2ac>)
 8001276:	f002 f88f 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "2)  Start             -- Start Servomotor control with Joystick\n");
 800127a:	49a0      	ldr	r1, [pc, #640]	; (80014fc <parseCommands+0x2b4>)
 800127c:	489d      	ldr	r0, [pc, #628]	; (80014f4 <parseCommands+0x2ac>)
 800127e:	f002 f88b 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "3)  Stop              -- Stop Servomotor control with Joystick and ADC conversion\n");
 8001282:	499f      	ldr	r1, [pc, #636]	; (8001500 <parseCommands+0x2b8>)
 8001284:	489b      	ldr	r0, [pc, #620]	; (80014f4 <parseCommands+0x2ac>)
 8001286:	f002 f887 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "4)  stopServo         -- Stop Servomotor control with Joystick but ADC conversion continues\n");
 800128a:	499e      	ldr	r1, [pc, #632]	; (8001504 <parseCommands+0x2bc>)
 800128c:	4899      	ldr	r0, [pc, #612]	; (80014f4 <parseCommands+0x2ac>)
 800128e:	f002 f883 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "5)  stopAdc           -- Stop ADC conversion and Servomotor is controlled by commands\n");
 8001292:	499d      	ldr	r1, [pc, #628]	; (8001508 <parseCommands+0x2c0>)
 8001294:	4897      	ldr	r0, [pc, #604]	; (80014f4 <parseCommands+0x2ac>)
 8001296:	f002 f87f 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "6)  initLcd           -- Steps to initialize Lcd\n");
 800129a:	499c      	ldr	r1, [pc, #624]	; (800150c <parseCommands+0x2c4>)
 800129c:	4895      	ldr	r0, [pc, #596]	; (80014f4 <parseCommands+0x2ac>)
 800129e:	f002 f87b 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "7)  testLcd           -- Writes a default message on LCD\n");
 80012a2:	499b      	ldr	r1, [pc, #620]	; (8001510 <parseCommands+0x2c8>)
 80012a4:	4893      	ldr	r0, [pc, #588]	; (80014f4 <parseCommands+0x2ac>)
 80012a6:	f002 f877 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "8)  autoUpdateLcd #   -- Automatic LCD Update (# = 0, 1)\n");
 80012aa:	499a      	ldr	r1, [pc, #616]	; (8001514 <parseCommands+0x2cc>)
 80012ac:	4891      	ldr	r0, [pc, #580]	; (80014f4 <parseCommands+0x2ac>)
 80012ae:	f002 f873 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "9)  servoPosition #   -- Set Servomotor Position to # degrees (# = [0, 180])\n");
 80012b2:	4999      	ldr	r1, [pc, #612]	; (8001518 <parseCommands+0x2d0>)
 80012b4:	488f      	ldr	r0, [pc, #572]	; (80014f4 <parseCommands+0x2ac>)
 80012b6:	f002 f86f 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "10) minServoPos       -- Set Servomotor Position to 0 degrees\n");
 80012ba:	4998      	ldr	r1, [pc, #608]	; (800151c <parseCommands+0x2d4>)
 80012bc:	488d      	ldr	r0, [pc, #564]	; (80014f4 <parseCommands+0x2ac>)
 80012be:	f002 f86b 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "11) maxServoPos       -- Set Servomotor Position to 180 degrees\n");
 80012c2:	4997      	ldr	r1, [pc, #604]	; (8001520 <parseCommands+0x2d8>)
 80012c4:	488b      	ldr	r0, [pc, #556]	; (80014f4 <parseCommands+0x2ac>)
 80012c6:	f002 f867 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "12) setLedPeriod #    -- Set blinky period of State LED to # ms (# > 1)\n");
 80012ca:	4996      	ldr	r1, [pc, #600]	; (8001524 <parseCommands+0x2dc>)
 80012cc:	4889      	ldr	r0, [pc, #548]	; (80014f4 <parseCommands+0x2ac>)
 80012ce:	f002 f863 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "13) startServoParty   -- Set Servomotor in Party Mode\n");
 80012d2:	4995      	ldr	r1, [pc, #596]	; (8001528 <parseCommands+0x2e0>)
 80012d4:	4887      	ldr	r0, [pc, #540]	; (80014f4 <parseCommands+0x2ac>)
 80012d6:	f002 f85f 	bl	8003398 <writeMsg>
		writeMsg(&handlerUSART1, "14) getPi             -- Approximate Pi using the FPU\n");
 80012da:	4994      	ldr	r1, [pc, #592]	; (800152c <parseCommands+0x2e4>)
 80012dc:	4885      	ldr	r0, [pc, #532]	; (80014f4 <parseCommands+0x2ac>)
 80012de:	f002 f85b 	bl	8003398 <writeMsg>
	}
	else {
		// En caso de que el comando no sea ninguno de los anteriores, se indica por consola que es incorrecto
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
	}
}
 80012e2:	e268      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "Start") == 0){
 80012e4:	4992      	ldr	r1, [pc, #584]	; (8001530 <parseCommands+0x2e8>)
 80012e6:	487f      	ldr	r0, [pc, #508]	; (80014e4 <parseCommands+0x29c>)
 80012e8:	f7fe ff7a 	bl	80001e0 <strcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d110      	bne.n	8001314 <parseCommands+0xcc>
		writeMsg(&handlerUSART1, "CMD: Start\n");
 80012f2:	4990      	ldr	r1, [pc, #576]	; (8001534 <parseCommands+0x2ec>)
 80012f4:	487f      	ldr	r0, [pc, #508]	; (80014f4 <parseCommands+0x2ac>)
 80012f6:	f002 f84f 	bl	8003398 <writeMsg>
		startPWM(&handlerPWM);
 80012fa:	488f      	ldr	r0, [pc, #572]	; (8001538 <parseCommands+0x2f0>)
 80012fc:	f001 fd62 	bl	8002dc4 <startPWM>
		startAdc = true;
 8001300:	4b8e      	ldr	r3, [pc, #568]	; (800153c <parseCommands+0x2f4>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
		AdcON = true;
 8001306:	4b8e      	ldr	r3, [pc, #568]	; (8001540 <parseCommands+0x2f8>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		ServoON = true;
 800130c:	4b8d      	ldr	r3, [pc, #564]	; (8001544 <parseCommands+0x2fc>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	e250      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "Stop") == 0){
 8001314:	498c      	ldr	r1, [pc, #560]	; (8001548 <parseCommands+0x300>)
 8001316:	4873      	ldr	r0, [pc, #460]	; (80014e4 <parseCommands+0x29c>)
 8001318:	f7fe ff62 	bl	80001e0 <strcmp>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <parseCommands+0xf6>
		writeMsg(&handlerUSART1, "CMD: Stop\n");
 8001322:	498a      	ldr	r1, [pc, #552]	; (800154c <parseCommands+0x304>)
 8001324:	4873      	ldr	r0, [pc, #460]	; (80014f4 <parseCommands+0x2ac>)
 8001326:	f002 f837 	bl	8003398 <writeMsg>
		startAdc = false;
 800132a:	4b84      	ldr	r3, [pc, #528]	; (800153c <parseCommands+0x2f4>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		AdcON = false;
 8001330:	4b83      	ldr	r3, [pc, #524]	; (8001540 <parseCommands+0x2f8>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
		ServoON = false;
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <parseCommands+0x2fc>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	e23b      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "stopServo") == 0){
 800133e:	4984      	ldr	r1, [pc, #528]	; (8001550 <parseCommands+0x308>)
 8001340:	4868      	ldr	r0, [pc, #416]	; (80014e4 <parseCommands+0x29c>)
 8001342:	f7fe ff4d 	bl	80001e0 <strcmp>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10a      	bne.n	8001362 <parseCommands+0x11a>
		writeMsg(&handlerUSART1, "CMD: stopServo\n");
 800134c:	4981      	ldr	r1, [pc, #516]	; (8001554 <parseCommands+0x30c>)
 800134e:	4869      	ldr	r0, [pc, #420]	; (80014f4 <parseCommands+0x2ac>)
 8001350:	f002 f822 	bl	8003398 <writeMsg>
		stopPWM(&handlerPWM);
 8001354:	4878      	ldr	r0, [pc, #480]	; (8001538 <parseCommands+0x2f0>)
 8001356:	f001 fd23 	bl	8002da0 <stopPWM>
		ServoON = false;
 800135a:	4b7a      	ldr	r3, [pc, #488]	; (8001544 <parseCommands+0x2fc>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	e229      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "stopAdc") == 0){
 8001362:	497d      	ldr	r1, [pc, #500]	; (8001558 <parseCommands+0x310>)
 8001364:	485f      	ldr	r0, [pc, #380]	; (80014e4 <parseCommands+0x29c>)
 8001366:	f7fe ff3b 	bl	80001e0 <strcmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d107      	bne.n	8001380 <parseCommands+0x138>
		writeMsg(&handlerUSART1, "CMD: stopAdc\n");
 8001370:	497a      	ldr	r1, [pc, #488]	; (800155c <parseCommands+0x314>)
 8001372:	4860      	ldr	r0, [pc, #384]	; (80014f4 <parseCommands+0x2ac>)
 8001374:	f002 f810 	bl	8003398 <writeMsg>
		startAdc = false;
 8001378:	4b70      	ldr	r3, [pc, #448]	; (800153c <parseCommands+0x2f4>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	e21a      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "initLcd") == 0){
 8001380:	4977      	ldr	r1, [pc, #476]	; (8001560 <parseCommands+0x318>)
 8001382:	4858      	ldr	r0, [pc, #352]	; (80014e4 <parseCommands+0x29c>)
 8001384:	f7fe ff2c 	bl	80001e0 <strcmp>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d107      	bne.n	800139e <parseCommands+0x156>
		writeMsg(&handlerUSART1, "CMD: initLcd\n");
 800138e:	4975      	ldr	r1, [pc, #468]	; (8001564 <parseCommands+0x31c>)
 8001390:	4858      	ldr	r0, [pc, #352]	; (80014f4 <parseCommands+0x2ac>)
 8001392:	f002 f801 	bl	8003398 <writeMsg>
		initLCD(&handlerLCD);
 8001396:	4874      	ldr	r0, [pc, #464]	; (8001568 <parseCommands+0x320>)
 8001398:	f001 fa78 	bl	800288c <initLCD>
}
 800139c:	e20b      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "testLcd") == 0){
 800139e:	4973      	ldr	r1, [pc, #460]	; (800156c <parseCommands+0x324>)
 80013a0:	4850      	ldr	r0, [pc, #320]	; (80014e4 <parseCommands+0x29c>)
 80013a2:	f7fe ff1d 	bl	80001e0 <strcmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d119      	bne.n	80013e0 <parseCommands+0x198>
		writeMsg(&handlerUSART1, "CMD: testLcd\n");
 80013ac:	4970      	ldr	r1, [pc, #448]	; (8001570 <parseCommands+0x328>)
 80013ae:	4851      	ldr	r0, [pc, #324]	; (80014f4 <parseCommands+0x2ac>)
 80013b0:	f001 fff2 	bl	8003398 <writeMsg>
		LCD_writeCommand(&handlerLCD, CLEAR_DISPLAY);
 80013b4:	2101      	movs	r1, #1
 80013b6:	486c      	ldr	r0, [pc, #432]	; (8001568 <parseCommands+0x320>)
 80013b8:	f001 fb37 	bl	8002a2a <LCD_writeCommand>
		delay_ms(100);
 80013bc:	2064      	movs	r0, #100	; 0x64
 80013be:	f001 fd8f 	bl	8002ee0 <delay_ms>
		LCD_writeStringXY(&handlerLCD, "I'm Working =D", 3, 4);
 80013c2:	2304      	movs	r3, #4
 80013c4:	2203      	movs	r2, #3
 80013c6:	496b      	ldr	r1, [pc, #428]	; (8001574 <parseCommands+0x32c>)
 80013c8:	4867      	ldr	r0, [pc, #412]	; (8001568 <parseCommands+0x320>)
 80013ca:	f001 fb97 	bl	8002afc <LCD_writeStringXY>
		delay_ms(5000);
 80013ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80013d2:	f001 fd85 	bl	8002ee0 <delay_ms>
		LCD_writeCommand(&handlerLCD, CLEAR_DISPLAY);
 80013d6:	2101      	movs	r1, #1
 80013d8:	4863      	ldr	r0, [pc, #396]	; (8001568 <parseCommands+0x320>)
 80013da:	f001 fb26 	bl	8002a2a <LCD_writeCommand>
}
 80013de:	e1ea      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "autoUpdateLcd") == 0){
 80013e0:	4965      	ldr	r1, [pc, #404]	; (8001578 <parseCommands+0x330>)
 80013e2:	4840      	ldr	r0, [pc, #256]	; (80014e4 <parseCommands+0x29c>)
 80013e4:	f7fe fefc 	bl	80001e0 <strcmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d136      	bne.n	800145c <parseCommands+0x214>
		if (firstParameter){
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <parseCommands+0x298>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d02b      	beq.n	800144e <parseCommands+0x206>
			writeMsg(&handlerUSART1, "CMD: autoUpdateLcd\n");
 80013f6:	4961      	ldr	r1, [pc, #388]	; (800157c <parseCommands+0x334>)
 80013f8:	483e      	ldr	r0, [pc, #248]	; (80014f4 <parseCommands+0x2ac>)
 80013fa:	f001 ffcd 	bl	8003398 <writeMsg>
			LCD_writeStringXY(&handlerLCD, "ADCx", 1, 3);
 80013fe:	2303      	movs	r3, #3
 8001400:	2201      	movs	r2, #1
 8001402:	495f      	ldr	r1, [pc, #380]	; (8001580 <parseCommands+0x338>)
 8001404:	4858      	ldr	r0, [pc, #352]	; (8001568 <parseCommands+0x320>)
 8001406:	f001 fb79 	bl	8002afc <LCD_writeStringXY>
			LCD_writeStringXY(&handlerLCD, "ADCy", 3, 3);
 800140a:	2303      	movs	r3, #3
 800140c:	2203      	movs	r2, #3
 800140e:	495d      	ldr	r1, [pc, #372]	; (8001584 <parseCommands+0x33c>)
 8001410:	4855      	ldr	r0, [pc, #340]	; (8001568 <parseCommands+0x320>)
 8001412:	f001 fb73 	bl	8002afc <LCD_writeStringXY>
			LCD_writeStringXY(&handlerLCD, "|ADCx=", 1, 10);
 8001416:	230a      	movs	r3, #10
 8001418:	2201      	movs	r2, #1
 800141a:	495b      	ldr	r1, [pc, #364]	; (8001588 <parseCommands+0x340>)
 800141c:	4852      	ldr	r0, [pc, #328]	; (8001568 <parseCommands+0x320>)
 800141e:	f001 fb6d 	bl	8002afc <LCD_writeStringXY>
			LCD_writeStringXY(&handlerLCD, "|Duty=", 2, 10);
 8001422:	230a      	movs	r3, #10
 8001424:	2202      	movs	r2, #2
 8001426:	4959      	ldr	r1, [pc, #356]	; (800158c <parseCommands+0x344>)
 8001428:	484f      	ldr	r0, [pc, #316]	; (8001568 <parseCommands+0x320>)
 800142a:	f001 fb67 	bl	8002afc <LCD_writeStringXY>
			LCD_writeStringXY(&handlerLCD, "|ADCy=", 4, 10);
 800142e:	230a      	movs	r3, #10
 8001430:	2204      	movs	r2, #4
 8001432:	4957      	ldr	r1, [pc, #348]	; (8001590 <parseCommands+0x348>)
 8001434:	484c      	ldr	r0, [pc, #304]	; (8001568 <parseCommands+0x320>)
 8001436:	f001 fb61 	bl	8002afc <LCD_writeStringXY>
			LCD_writeStringXY(&handlerLCD, "|deg=", 3, 10);
 800143a:	230a      	movs	r3, #10
 800143c:	2203      	movs	r2, #3
 800143e:	4955      	ldr	r1, [pc, #340]	; (8001594 <parseCommands+0x34c>)
 8001440:	4849      	ldr	r0, [pc, #292]	; (8001568 <parseCommands+0x320>)
 8001442:	f001 fb5b 	bl	8002afc <LCD_writeStringXY>
			startTimer(&handlerLcdRefreshTimer);
 8001446:	4854      	ldr	r0, [pc, #336]	; (8001598 <parseCommands+0x350>)
 8001448:	f000 ff5e 	bl	8002308 <startTimer>
}
 800144c:	e1b3      	b.n	80017b6 <parseCommands+0x56e>
			stopTimer(&handlerLcdRefreshTimer);
 800144e:	4852      	ldr	r0, [pc, #328]	; (8001598 <parseCommands+0x350>)
 8001450:	f000 ff6c 	bl	800232c <stopTimer>
			autoUpdateLcd = false;
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <parseCommands+0x354>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
}
 800145a:	e1ac      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "servoPosition") == 0){
 800145c:	4950      	ldr	r1, [pc, #320]	; (80015a0 <parseCommands+0x358>)
 800145e:	4821      	ldr	r0, [pc, #132]	; (80014e4 <parseCommands+0x29c>)
 8001460:	f7fe febe 	bl	80001e0 <strcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11f      	bne.n	80014aa <parseCommands+0x262>
		writeMsg(&handlerUSART1, "CMD: servoPosition\n");
 800146a:	494e      	ldr	r1, [pc, #312]	; (80015a4 <parseCommands+0x35c>)
 800146c:	4821      	ldr	r0, [pc, #132]	; (80014f4 <parseCommands+0x2ac>)
 800146e:	f001 ff93 	bl	8003398 <writeMsg>
		if ((firstParameter >= 0) && (firstParameter <= 180)){
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <parseCommands+0x298>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2bb4      	cmp	r3, #180	; 0xb4
 8001478:	d812      	bhi.n	80014a0 <parseCommands+0x258>
			startPWM(&handlerPWM);
 800147a:	482f      	ldr	r0, [pc, #188]	; (8001538 <parseCommands+0x2f0>)
 800147c:	f001 fca2 	bl	8002dc4 <startPWM>
			ServoON = true;
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <parseCommands+0x2fc>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
			newDuty = firstParameter + 50;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <parseCommands+0x298>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	3332      	adds	r3, #50	; 0x32
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <parseCommands+0x360>)
 8001490:	801a      	strh	r2, [r3, #0]
			setPwmDuty(&handlerPWM, newDuty);
 8001492:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <parseCommands+0x360>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4827      	ldr	r0, [pc, #156]	; (8001538 <parseCommands+0x2f0>)
 800149a:	f001 fc47 	bl	8002d2c <setPwmDuty>
}
 800149e:	e18a      	b.n	80017b6 <parseCommands+0x56e>
			writeMsg(&handlerUSART1, "Incorrect Parameter!!!\n");
 80014a0:	4942      	ldr	r1, [pc, #264]	; (80015ac <parseCommands+0x364>)
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <parseCommands+0x2ac>)
 80014a4:	f001 ff78 	bl	8003398 <writeMsg>
}
 80014a8:	e185      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "minServoPos") == 0){
 80014aa:	4941      	ldr	r1, [pc, #260]	; (80015b0 <parseCommands+0x368>)
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <parseCommands+0x29c>)
 80014ae:	f7fe fe97 	bl	80001e0 <strcmp>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d17f      	bne.n	80015b8 <parseCommands+0x370>
		writeMsg(&handlerUSART1, "CMD: minServoPos\n");
 80014b8:	493e      	ldr	r1, [pc, #248]	; (80015b4 <parseCommands+0x36c>)
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <parseCommands+0x2ac>)
 80014bc:	f001 ff6c 	bl	8003398 <writeMsg>
		startPWM(&handlerPWM);
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <parseCommands+0x2f0>)
 80014c2:	f001 fc7f 	bl	8002dc4 <startPWM>
		ServoON = true;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <parseCommands+0x2fc>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
		newDuty = 50;
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <parseCommands+0x360>)
 80014ce:	2232      	movs	r2, #50	; 0x32
 80014d0:	801a      	strh	r2, [r3, #0]
		setPwmDuty(&handlerPWM, newDuty);
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <parseCommands+0x360>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <parseCommands+0x2f0>)
 80014da:	f001 fc27 	bl	8002d2c <setPwmDuty>
}
 80014de:	e16a      	b.n	80017b6 <parseCommands+0x56e>
 80014e0:	2000039c 	.word	0x2000039c
 80014e4:	200003a0 	.word	0x200003a0
 80014e8:	08008708 	.word	0x08008708
 80014ec:	08008710 	.word	0x08008710
 80014f0:	08008718 	.word	0x08008718
 80014f4:	20000238 	.word	0x20000238
 80014f8:	0800872c 	.word	0x0800872c
 80014fc:	08008758 	.word	0x08008758
 8001500:	0800879c 	.word	0x0800879c
 8001504:	080087f0 	.word	0x080087f0
 8001508:	08008850 	.word	0x08008850
 800150c:	080088a8 	.word	0x080088a8
 8001510:	080088dc 	.word	0x080088dc
 8001514:	08008918 	.word	0x08008918
 8001518:	08008954 	.word	0x08008954
 800151c:	080089a4 	.word	0x080089a4
 8001520:	080089e4 	.word	0x080089e4
 8001524:	08008a28 	.word	0x08008a28
 8001528:	08008a74 	.word	0x08008a74
 800152c:	08008aac 	.word	0x08008aac
 8001530:	08008ae4 	.word	0x08008ae4
 8001534:	08008aec 	.word	0x08008aec
 8001538:	200002c4 	.word	0x200002c4
 800153c:	20000322 	.word	0x20000322
 8001540:	20000328 	.word	0x20000328
 8001544:	2000032d 	.word	0x2000032d
 8001548:	08008af8 	.word	0x08008af8
 800154c:	08008b00 	.word	0x08008b00
 8001550:	08008b0c 	.word	0x08008b0c
 8001554:	08008b18 	.word	0x08008b18
 8001558:	08008b28 	.word	0x08008b28
 800155c:	08008b30 	.word	0x08008b30
 8001560:	08008b40 	.word	0x08008b40
 8001564:	08008b48 	.word	0x08008b48
 8001568:	200002f4 	.word	0x200002f4
 800156c:	08008b58 	.word	0x08008b58
 8001570:	08008b60 	.word	0x08008b60
 8001574:	08008b70 	.word	0x08008b70
 8001578:	08008b80 	.word	0x08008b80
 800157c:	08008b90 	.word	0x08008b90
 8001580:	08008ba4 	.word	0x08008ba4
 8001584:	08008bac 	.word	0x08008bac
 8001588:	08008bb4 	.word	0x08008bb4
 800158c:	08008bbc 	.word	0x08008bbc
 8001590:	08008bc4 	.word	0x08008bc4
 8001594:	08008bcc 	.word	0x08008bcc
 8001598:	20000228 	.word	0x20000228
 800159c:	20000333 	.word	0x20000333
 80015a0:	08008bd4 	.word	0x08008bd4
 80015a4:	08008be4 	.word	0x08008be4
 80015a8:	2000032a 	.word	0x2000032a
 80015ac:	08008bf8 	.word	0x08008bf8
 80015b0:	08008c10 	.word	0x08008c10
 80015b4:	08008c1c 	.word	0x08008c1c
	else if (strcmp(cmd, "maxServoPos") == 0){
 80015b8:	4981      	ldr	r1, [pc, #516]	; (80017c0 <parseCommands+0x578>)
 80015ba:	4882      	ldr	r0, [pc, #520]	; (80017c4 <parseCommands+0x57c>)
 80015bc:	f7fe fe10 	bl	80001e0 <strcmp>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d113      	bne.n	80015ee <parseCommands+0x3a6>
		writeMsg(&handlerUSART1, "CMD: maxServoPos\n");
 80015c6:	4980      	ldr	r1, [pc, #512]	; (80017c8 <parseCommands+0x580>)
 80015c8:	4880      	ldr	r0, [pc, #512]	; (80017cc <parseCommands+0x584>)
 80015ca:	f001 fee5 	bl	8003398 <writeMsg>
		startPWM(&handlerPWM);
 80015ce:	4880      	ldr	r0, [pc, #512]	; (80017d0 <parseCommands+0x588>)
 80015d0:	f001 fbf8 	bl	8002dc4 <startPWM>
		ServoON = true;
 80015d4:	4b7f      	ldr	r3, [pc, #508]	; (80017d4 <parseCommands+0x58c>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		newDuty = 230;
 80015da:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <parseCommands+0x590>)
 80015dc:	22e6      	movs	r2, #230	; 0xe6
 80015de:	801a      	strh	r2, [r3, #0]
		setPwmDuty(&handlerPWM, newDuty);
 80015e0:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <parseCommands+0x590>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	487a      	ldr	r0, [pc, #488]	; (80017d0 <parseCommands+0x588>)
 80015e8:	f001 fba0 	bl	8002d2c <setPwmDuty>
}
 80015ec:	e0e3      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "setLedPeriod") == 0){
 80015ee:	497b      	ldr	r1, [pc, #492]	; (80017dc <parseCommands+0x594>)
 80015f0:	4874      	ldr	r0, [pc, #464]	; (80017c4 <parseCommands+0x57c>)
 80015f2:	f7fe fdf5 	bl	80001e0 <strcmp>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d111      	bne.n	8001620 <parseCommands+0x3d8>
		writeMsg(&handlerUSART1, "CMD: setLedPeriod\n");
 80015fc:	4978      	ldr	r1, [pc, #480]	; (80017e0 <parseCommands+0x598>)
 80015fe:	4873      	ldr	r0, [pc, #460]	; (80017cc <parseCommands+0x584>)
 8001600:	f001 feca 	bl	8003398 <writeMsg>
		if (firstParameter > 1){
 8001604:	4b77      	ldr	r3, [pc, #476]	; (80017e4 <parseCommands+0x59c>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d904      	bls.n	8001616 <parseCommands+0x3ce>
			stateLedPeriod = firstParameter;
 800160c:	4b75      	ldr	r3, [pc, #468]	; (80017e4 <parseCommands+0x59c>)
 800160e:	881a      	ldrh	r2, [r3, #0]
 8001610:	4b75      	ldr	r3, [pc, #468]	; (80017e8 <parseCommands+0x5a0>)
 8001612:	801a      	strh	r2, [r3, #0]
}
 8001614:	e0cf      	b.n	80017b6 <parseCommands+0x56e>
			writeMsg(&handlerUSART1, "Incorrect Parameter!!!\n");
 8001616:	4975      	ldr	r1, [pc, #468]	; (80017ec <parseCommands+0x5a4>)
 8001618:	486c      	ldr	r0, [pc, #432]	; (80017cc <parseCommands+0x584>)
 800161a:	f001 febd 	bl	8003398 <writeMsg>
}
 800161e:	e0ca      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "startServoParty") == 0){
 8001620:	4973      	ldr	r1, [pc, #460]	; (80017f0 <parseCommands+0x5a8>)
 8001622:	4868      	ldr	r0, [pc, #416]	; (80017c4 <parseCommands+0x57c>)
 8001624:	f7fe fddc 	bl	80001e0 <strcmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10a      	bne.n	8001644 <parseCommands+0x3fc>
		writeMsg(&handlerUSART1, "CMD: startServoParty\n");
 800162e:	4971      	ldr	r1, [pc, #452]	; (80017f4 <parseCommands+0x5ac>)
 8001630:	4866      	ldr	r0, [pc, #408]	; (80017cc <parseCommands+0x584>)
 8001632:	f001 feb1 	bl	8003398 <writeMsg>
		startPWM(&handlerPWM);
 8001636:	4866      	ldr	r0, [pc, #408]	; (80017d0 <parseCommands+0x588>)
 8001638:	f001 fbc4 	bl	8002dc4 <startPWM>
		partyMode = true;
 800163c:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <parseCommands+0x5b0>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
}
 8001642:	e0b8      	b.n	80017b6 <parseCommands+0x56e>
	else if (strcmp(cmd, "getPi") == 0){
 8001644:	496d      	ldr	r1, [pc, #436]	; (80017fc <parseCommands+0x5b4>)
 8001646:	485f      	ldr	r0, [pc, #380]	; (80017c4 <parseCommands+0x57c>)
 8001648:	f7fe fdca 	bl	80001e0 <strcmp>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 80ad 	bne.w	80017ae <parseCommands+0x566>
		writeMsg(&handlerUSART1, "CMD: getPi\n");
 8001654:	496a      	ldr	r1, [pc, #424]	; (8001800 <parseCommands+0x5b8>)
 8001656:	485d      	ldr	r0, [pc, #372]	; (80017cc <parseCommands+0x584>)
 8001658:	f001 fe9e 	bl	8003398 <writeMsg>
		Pi = 0;
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <parseCommands+0x5bc>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
		for (uint8_t j = 2; j < 250; j++){
 8001664:	2302      	movs	r3, #2
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e083      	b.n	8001772 <parseCommands+0x52a>
			if ((j%2) == 0){
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d13d      	bne.n	80016f2 <parseCommands+0x4aa>
				Pi += 1.0/(2.0*((float)j - 2.0) + 1.0);
 8001676:	4b63      	ldr	r3, [pc, #396]	; (8001804 <parseCommands+0x5bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff7c 	bl	8000578 <__aeabi_f2d>
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168e:	ee17 0a90 	vmov	r0, s15
 8001692:	f7fe ff71 	bl	8000578 <__aeabi_f2d>
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169e:	f7fe fe0b 	bl	80002b8 <__aeabi_dsub>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	f7fe fe05 	bl	80002bc <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <parseCommands+0x5c0>)
 80016c0:	f7fe fdfc 	bl	80002bc <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	494e      	ldr	r1, [pc, #312]	; (8001808 <parseCommands+0x5c0>)
 80016ce:	f7ff f8d5 	bl	800087c <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe fdef 	bl	80002bc <__adddf3>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa97 	bl	8000c18 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a45      	ldr	r2, [pc, #276]	; (8001804 <parseCommands+0x5bc>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e03c      	b.n	800176c <parseCommands+0x524>
				Pi += -1.0/(2.0*((float)j - 2.0) + 1.0);
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <parseCommands+0x5bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff3e 	bl	8000578 <__aeabi_f2d>
 80016fc:	4604      	mov	r4, r0
 80016fe:	460d      	mov	r5, r1
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170a:	ee17 0a90 	vmov	r0, s15
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800171a:	f7fe fdcd 	bl	80002b8 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	f7fe fdc7 	bl	80002bc <__adddf3>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <parseCommands+0x5c0>)
 800173c:	f7fe fdbe 	bl	80002bc <__adddf3>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	4930      	ldr	r1, [pc, #192]	; (800180c <parseCommands+0x5c4>)
 800174a:	f7ff f897 	bl	800087c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fdb1 	bl	80002bc <__adddf3>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff fa59 	bl	8000c18 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <parseCommands+0x5bc>)
 800176a:	6013      	str	r3, [r2, #0]
		for (uint8_t j = 2; j < 250; j++){
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3301      	adds	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2bf9      	cmp	r3, #249	; 0xf9
 8001776:	f67f af78 	bls.w	800166a <parseCommands+0x422>
		Pi = 4*Pi;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <parseCommands+0x5bc>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <parseCommands+0x5bc>)
 800178a:	edc3 7a00 	vstr	s15, [r3]
		sprintf(bufferData, "The approximation of Pi made via the FPU is %f\n", Pi);
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <parseCommands+0x5bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fef0 	bl	8000578 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	491c      	ldr	r1, [pc, #112]	; (8001810 <parseCommands+0x5c8>)
 800179e:	481d      	ldr	r0, [pc, #116]	; (8001814 <parseCommands+0x5cc>)
 80017a0:	f002 fd6e 	bl	8004280 <siprintf>
		writeMsg(&handlerUSART1, bufferData);
 80017a4:	491b      	ldr	r1, [pc, #108]	; (8001814 <parseCommands+0x5cc>)
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <parseCommands+0x584>)
 80017a8:	f001 fdf6 	bl	8003398 <writeMsg>
}
 80017ac:	e003      	b.n	80017b6 <parseCommands+0x56e>
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
 80017ae:	491a      	ldr	r1, [pc, #104]	; (8001818 <parseCommands+0x5d0>)
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <parseCommands+0x584>)
 80017b2:	f001 fdf1 	bl	8003398 <writeMsg>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	08008c30 	.word	0x08008c30
 80017c4:	200003a0 	.word	0x200003a0
 80017c8:	08008c3c 	.word	0x08008c3c
 80017cc:	20000238 	.word	0x20000238
 80017d0:	200002c4 	.word	0x200002c4
 80017d4:	2000032d 	.word	0x2000032d
 80017d8:	2000032a 	.word	0x2000032a
 80017dc:	08008c50 	.word	0x08008c50
 80017e0:	08008c60 	.word	0x08008c60
 80017e4:	2000039c 	.word	0x2000039c
 80017e8:	20000000 	.word	0x20000000
 80017ec:	08008bf8 	.word	0x08008bf8
 80017f0:	08008c74 	.word	0x08008c74
 80017f4:	08008c84 	.word	0x08008c84
 80017f8:	2000032c 	.word	0x2000032c
 80017fc:	08008c9c 	.word	0x08008c9c
 8001800:	08008ca4 	.word	0x08008ca4
 8001804:	20000334 	.word	0x20000334
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	bff00000 	.word	0xbff00000
 8001810:	08008cb0 	.word	0x08008cb0
 8001814:	20000358 	.word	0x20000358
 8001818:	08008ce0 	.word	0x08008ce0

0800181c <servoPartyMode>:

void servoPartyMode(PWM_Handler_t *ptrHandlerPwm){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	/**
	 * La función servoPartuMode genera un patrón musical de movimiento en el motor, el patrón se repite 3 veces
	 */
	for (uint8_t i = 1; i <= 3; i++){
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e072      	b.n	8001910 <servoPartyMode+0xf4>
		setPwmDuty(ptrHandlerPwm, 90);
 800182a:	215a      	movs	r1, #90	; 0x5a
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f001 fa7d 	bl	8002d2c <setPwmDuty>
		delay_ms(2000);
 8001832:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001836:	f001 fb53 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 190);
 800183a:	21be      	movs	r1, #190	; 0xbe
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 fa75 	bl	8002d2c <setPwmDuty>
		delay_ms(800);
 8001842:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001846:	f001 fb4b 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 140);
 800184a:	218c      	movs	r1, #140	; 0x8c
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f001 fa6d 	bl	8002d2c <setPwmDuty>
		delay_ms(700);
 8001852:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001856:	f001 fb43 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 180);
 800185a:	21b4      	movs	r1, #180	; 0xb4
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 fa65 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 8001862:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001866:	f001 fb3b 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 140);
 800186a:	218c      	movs	r1, #140	; 0x8c
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f001 fa5d 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 8001872:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001876:	f001 fb33 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 180);
 800187a:	21b4      	movs	r1, #180	; 0xb4
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f001 fa55 	bl	8002d2c <setPwmDuty>
		delay_ms(750);
 8001882:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001886:	f001 fb2b 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 220);
 800188a:	21dc      	movs	r1, #220	; 0xdc
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 fa4d 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 8001892:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001896:	f001 fb23 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 180);
 800189a:	21b4      	movs	r1, #180	; 0xb4
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f001 fa45 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 80018a2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018a6:	f001 fb1b 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 220);
 80018aa:	21dc      	movs	r1, #220	; 0xdc
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f001 fa3d 	bl	8002d2c <setPwmDuty>
		delay_ms(750);
 80018b2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80018b6:	f001 fb13 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 164);
 80018ba:	21a4      	movs	r1, #164	; 0xa4
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f001 fa35 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 80018c2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018c6:	f001 fb0b 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 108);
 80018ca:	216c      	movs	r1, #108	; 0x6c
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f001 fa2d 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 80018d2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018d6:	f001 fb03 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 164);
 80018da:	21a4      	movs	r1, #164	; 0xa4
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 fa25 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 80018e2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018e6:	f001 fafb 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 125);
 80018ea:	217d      	movs	r1, #125	; 0x7d
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f001 fa1d 	bl	8002d2c <setPwmDuty>
		delay_ms(350);
 80018f2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018f6:	f001 faf3 	bl	8002ee0 <delay_ms>
		setPwmDuty(ptrHandlerPwm, 90);
 80018fa:	215a      	movs	r1, #90	; 0x5a
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f001 fa15 	bl	8002d2c <setPwmDuty>
		delay_ms(2000);
 8001902:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001906:	f001 faeb 	bl	8002ee0 <delay_ms>
	for (uint8_t i = 1; i <= 3; i++){
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d989      	bls.n	800182a <servoPartyMode+0xe>
	}
	partyMode = false;
 8001916:	4b03      	ldr	r3, [pc, #12]	; (8001924 <servoPartyMode+0x108>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000032c 	.word	0x2000032c

08001928 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	// Se incrementan las variables que hacen el conteo en ms para el stateLed y para el sampling time del ADC
	counterStateLED++;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <BTimer2_Callback+0x5c>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <BTimer2_Callback+0x5c>)
 8001936:	801a      	strh	r2, [r3, #0]
	counterAdcSampling++;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <BTimer2_Callback+0x60>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <BTimer2_Callback+0x60>)
 8001942:	801a      	strh	r2, [r3, #0]
	// Si el conteo llega al valor de la variable stateLedPeriod se hace el blinky del stateLED
	if (counterStateLED >= stateLedPeriod){
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <BTimer2_Callback+0x5c>)
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <BTimer2_Callback+0x64>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d30a      	bcc.n	8001966 <BTimer2_Callback+0x3e>
		handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <BTimer2_Callback+0x68>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <BTimer2_Callback+0x68>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f082 0220 	eor.w	r2, r2, #32
 800195e:	615a      	str	r2, [r3, #20]
		counterStateLED = 0;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <BTimer2_Callback+0x5c>)
 8001962:	2200      	movs	r2, #0
 8001964:	801a      	strh	r2, [r3, #0]
	}
	// Se hace una conversión de los ejes del Joystick cada 70ms, solo si la conversión está activada
	if (counterAdcSampling >= 70 && startAdc){
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <BTimer2_Callback+0x60>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b45      	cmp	r3, #69	; 0x45
 800196c:	d908      	bls.n	8001980 <BTimer2_Callback+0x58>
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <BTimer2_Callback+0x6c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <BTimer2_Callback+0x58>
		startContinuousConversion();
 8001976:	f000 facf 	bl	8001f18 <startContinuousConversion>
		counterAdcSampling = 0;
 800197a:	4b03      	ldr	r3, [pc, #12]	; (8001988 <BTimer2_Callback+0x60>)
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
	}
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200003c0 	.word	0x200003c0
 8001988:	20000320 	.word	0x20000320
 800198c:	20000000 	.word	0x20000000
 8001990:	200001f4 	.word	0x200001f4
 8001994:	20000322 	.word	0x20000322

08001998 <BTimer4_Callback>:

/* Implementacion del Callback para el timer4 */
void BTimer4_Callback(void){
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	// Se activa la variable de estado
	autoUpdateLcd = true;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <BTimer4_Callback+0x28>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
	// Se intercalan los segmentos de la LCD que se van a refrescar
	LCD_segment = !LCD_segment;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <BTimer4_Callback+0x2c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <BTimer4_Callback+0x2c>)
 80019b4:	701a      	strb	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000333 	.word	0x20000333
 80019c4:	2000032e 	.word	0x2000032e

080019c8 <Usart1_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart1_RX_Callback(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80019cc:	f001 fcfc 	bl	80033c8 <getRxData>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b01      	ldr	r3, [pc, #4]	; (80019dc <Usart1_RX_Callback+0x14>)
 80019d6:	701a      	strb	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000398 	.word	0x20000398

080019e0 <Usart1_TX_Callback>:

void Usart1_TX_Callback(void){
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	__NOP();
 80019e4:	bf00      	nop
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <adcComplete_Callback>:

void adcComplete_Callback(void){
 80019f0:	b598      	push	{r3, r4, r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	// Se guardan los datos de la conversión de el arreglo joystickAdcData
	joystickAdcData[dataPosition] = getADC();
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <adcComplete_Callback+0x3c>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	461c      	mov	r4, r3
 80019fa:	f000 fab3 	bl	8001f64 <getADC>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <adcComplete_Callback+0x40>)
 8001a04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <adcComplete_Callback+0x3c>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <adcComplete_Callback+0x3c>)
 8001a12:	801a      	strh	r2, [r3, #0]
	// Si el arreglo se llena, es porque se terminó la conversión de todos los canales, entonces se activa la variable de estado que indica esto
	if (dataPosition >= ADC_SIGNAL_SIZE){
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <adcComplete_Callback+0x3c>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d905      	bls.n	8001a28 <adcComplete_Callback+0x38>
		dataPosition = 0;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <adcComplete_Callback+0x3c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <adcComplete_Callback+0x44>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
	}
}
 8001a28:	bf00      	nop
 8001a2a:	bd98      	pop	{r3, r4, r7, pc}
 8001a2c:	2000031e 	.word	0x2000031e
 8001a30:	20000318 	.word	0x20000318
 8001a34:	2000031c 	.word	0x2000031c

08001a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_kill>:

int _kill(int pid, int sig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a52:	f001 fd63 	bl	800351c <__errno>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2216      	movs	r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a7a:	e7fe      	b.n	8001a7a <_exit+0x12>

08001a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e00a      	b.n	8001aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a8e:	f3af 8000 	nop.w
 8001a92:	4601      	mov	r1, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf0      	blt.n	8001a8e <_read+0x12>
	}

return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf1      	blt.n	8001ac8 <_write+0x12>
	}
	return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_close>:

int _close(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
	return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f001 fcc8 	bl	800351c <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20020000 	.word	0x20020000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	200003c4 	.word	0x200003c4
 8001bc0:	20000408 	.word	0x20000408

08001bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bf2:	f001 fc99 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff f895 	bl	8000d24 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c08:	080091c4 	.word	0x080091c4
  ldr r2, =_sbss
 8001c0c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c10:	20000404 	.word	0x20000404

08001c14 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <BusFault_Handler>
	...

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <adcSingle_Config>:

GPIO_Handler_t 	handlerAdcPin 	= {0};
uint16_t		adcRawData 		= 0;
uint8_t			scanSequencePos = 1;

void adcSingle_Config(ADC_Config_t *adcConfig){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado */
	configAnalogPin(adcConfig->channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 f977 	bl	8001fa8 <configAnalogPin>

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2) */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <adcSingle_Config+0x178>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a58      	ldr	r2, [pc, #352]	; (8001e20 <adcSingle_Config+0x178>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurarlos
	ADC1->CR1 = 0;
 8001cc6:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <adcSingle_Config+0x17c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <adcSingle_Config+0x17c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig->resolution){
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d83e      	bhi.n	8001d58 <adcSingle_Config+0xb0>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <adcSingle_Config+0x38>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001d0b 	.word	0x08001d0b
 8001ce8:	08001d25 	.word	0x08001d25
 8001cec:	08001d3f 	.word	0x08001d3f
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <adcSingle_Config+0x17c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <adcSingle_Config+0x17c>)
 8001cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <adcSingle_Config+0x17c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d06:	6053      	str	r3, [r2, #4]
		break;
 8001d08:	e027      	b.n	8001d5a <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_10_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a42      	ldr	r2, [pc, #264]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d1c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d20:	6053      	str	r3, [r2, #4]
		break;
 8001d22:	e01a      	b.n	8001d5a <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_8_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a3e      	ldr	r2, [pc, #248]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	6053      	str	r3, [r2, #4]
		break;
 8001d3c:	e00d      	b.n	8001d5a <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d48:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d54:	6053      	str	r3, [r2, #4]
		break;
 8001d56:	e000      	b.n	8001d5a <adcSingle_Config+0xb2>
	}
	default:
	{
		break;
 8001d58:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1->CR1 &= ~ADC_CR1_SCAN;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d64:	6053      	str	r3, [r2, #4]


	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT){
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	791b      	ldrb	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <adcSingle_Config+0xd4>
		//Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4a2c      	ldr	r2, [pc, #176]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d78:	6093      	str	r3, [r2, #8]
 8001d7a:	e005      	b.n	8001d88 <adcSingle_Config+0xe0>
	}
	else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d86:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d8e:	f023 0302 	bic.w	r3, r3, #2
 8001d92:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling */
	if (adcConfig->channel < ADC_CHANNEL_10){
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d810      	bhi.n	8001dbe <adcSingle_Config+0x116>
		ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel)));
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <adcSingle_Config+0x17c>)
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	4618      	mov	r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	440b      	add	r3, r1
 8001db2:	fa00 f303 	lsl.w	r3, r0, r3
 8001db6:	491b      	ldr	r1, [pc, #108]	; (8001e24 <adcSingle_Config+0x17c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	610b      	str	r3, [r1, #16]
 8001dbc:	e010      	b.n	8001de0 <adcSingle_Config+0x138>
	}
	else{
		ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel - 9)));
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <adcSingle_Config+0x17c>)
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	885b      	ldrh	r3, [r3, #2]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f1a3 0209 	sub.w	r2, r3, #9
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	fa00 f303 	lsl.w	r3, r0, r3
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <adcSingle_Config+0x17c>)
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	60d3      	str	r3, [r2, #12]
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el más rápido que se puede tener) */
	ADC->CCR = ADC_CCR_ADCPRE_0;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <adcSingle_Config+0x180>)
 8001de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001de6:	605a      	str	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC */
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <adcSingle_Config+0x17c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <adcSingle_Config+0x17c>)
 8001df2:	f043 0320 	orr.w	r3, r3, #32
 8001df6:	6053      	str	r3, [r2, #4]

	/* 11.a. Matriculamos la interrupción en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 8001df8:	2012      	movs	r0, #18
 8001dfa:	f7ff ff0d 	bl	8001c18 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(ADC_IRQn, 4);
 8001dfe:	2104      	movs	r1, #4
 8001e00:	2012      	movs	r0, #18
 8001e02:	f7ff ff27 	bl	8001c54 <__NVIC_SetPriority>

	/* 12. Activamos el módulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <adcSingle_Config+0x17c>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <adcSingle_Config+0x17c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e12:	b662      	cpsie	i
}
 8001e14:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40012000 	.word	0x40012000
 8001e28:	40012300 	.word	0x40012300

08001e2c <adcSQRx_Config>:

void adcSQRx_Config(ADC_Config_t *adcChannels, uint8_t numChannels){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 1; i <= numChannels; i++){
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e047      	b.n	8001ece <adcSQRx_Config+0xa2>
		/* 8. Configuramos la secuencia y cuantos elemenos hay en la secuencia */
		// Al hacerlo to.do 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
		if ((i >= 1) && (i <= 6)){
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <adcSQRx_Config+0x3e>
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d80f      	bhi.n	8001e6a <adcSQRx_Config+0x3e>
			ADC1->SQR3 |= (adcChannels->channel << ((i-1) * 5));
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001e4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	fa00 f303 	lsl.w	r3, r0, r3
 8001e62:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6353      	str	r3, [r2, #52]	; 0x34
 8001e68:	e02b      	b.n	8001ec2 <adcSQRx_Config+0x96>
		}
		else if ((i >= 7) && (i <= 12)){
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d912      	bls.n	8001e96 <adcSQRx_Config+0x6a>
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d80f      	bhi.n	8001e96 <adcSQRx_Config+0x6a>
			ADC1->SQR2 |= (adcChannels->channel << ((i-7) * 5));
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	1fda      	subs	r2, r3, #7
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	fa00 f303 	lsl.w	r3, r0, r3
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	e015      	b.n	8001ec2 <adcSQRx_Config+0x96>
		}
		else if ((i >= 13) && (i <= 16)){
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d912      	bls.n	8001ec2 <adcSQRx_Config+0x96>
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d80f      	bhi.n	8001ec2 <adcSQRx_Config+0x96>
			ADC1->SQR1 |= (adcChannels->channel << ((i-13) * 5));
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	f1a3 020d 	sub.w	r2, r3, #13
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	fa00 f303 	lsl.w	r3, r0, r3
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		adcChannels++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 1; i <= numChannels; i++){
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d9b3      	bls.n	8001e3e <adcSQRx_Config+0x12>
	}
	if (numChannels > 1){
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d914      	bls.n	8001f06 <adcSQRx_Config+0xda>
		ADC1->CR2 |= ADC_CR2_EOCS;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6093      	str	r3, [r2, #8]
		ADC1->SQR1 |= ((numChannels-1) << ADC_SQR1_L_Pos);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	0512      	lsls	r2, r2, #20
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
		ADC1->CR1 |= ADC_CR1_SCAN;
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <adcSQRx_Config+0xe8>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6053      	str	r3, [r2, #4]
	}
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40012000 	.word	0x40012000

08001f18 <startContinuousConversion>:
void startSingleConversion(void){
	/* Iniciamos un ciclo de conversión ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
}

void startContinuousConversion(void){
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_CONT;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <startContinuousConversion+0x28>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <startContinuousConversion+0x28>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	6093      	str	r3, [r2, #8]
	/* Iniciamos un ciclo de conversión ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <startContinuousConversion+0x28>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <startContinuousConversion+0x28>)
 8001f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f32:	6093      	str	r3, [r2, #8]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40012000 	.word	0x40012000

08001f44 <stopContinuousConversion>:

void stopContinuousConversion(void){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <stopContinuousConversion+0x1c>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <stopContinuousConversion+0x1c>)
 8001f4e:	f023 0302 	bic.w	r3, r3, #2
 8001f52:	6093      	str	r3, [r2, #8]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40012000 	.word	0x40012000

08001f64 <getADC>:

/* Función que me retorna el último dato adquirido por la ADC */
uint16_t getADC(void){
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	return adcRawData;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <getADC+0x14>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200003d4 	.word	0x200003d4

08001f7c <ADC_IRQHandler>:

/* Esta es la ISR de la interrupción por conversión ADC */
void ADC_IRQHandler(void){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interupción por conversión ADC
	if (ADC1->SR & ADC_SR_EOC){
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <ADC_IRQHandler+0x24>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1->DR;
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <ADC_IRQHandler+0x24>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <ADC_IRQHandler+0x28>)
 8001f94:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 8001f96:	f7ff fd2b 	bl	80019f0 <adcComplete_Callback>
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40012000 	.word	0x40012000
 8001fa4:	200003d4 	.word	0x200003d4

08001fa8 <configAnalogPin>:
__attribute__ ((weak)) void adcComplete_Callback(void){
	__NOP();
}

/* con esta función configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo
	switch (adcChannel){
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	f200 8093 	bhi.w	80020e0 <configAnalogPin+0x138>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <configAnalogPin+0x18>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08002001 	.word	0x08002001
 8001fc4:	0800200f 	.word	0x0800200f
 8001fc8:	0800201d 	.word	0x0800201d
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	08002039 	.word	0x08002039
 8001fd4:	08002047 	.word	0x08002047
 8001fd8:	08002055 	.word	0x08002055
 8001fdc:	08002063 	.word	0x08002063
 8001fe0:	08002071 	.word	0x08002071
 8001fe4:	0800207f 	.word	0x0800207f
 8001fe8:	0800208d 	.word	0x0800208d
 8001fec:	0800209b 	.word	0x0800209b
 8001ff0:	080020a9 	.word	0x080020a9
 8001ff4:	080020b7 	.word	0x080020b7
 8001ff8:	080020c5 	.word	0x080020c5
 8001ffc:	080020d3 	.word	0x080020d3

	case ADC_CHANNEL_0:
	{
		// Es el Pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 8002000:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <configAnalogPin+0x150>)
 8002002:	4a3e      	ldr	r2, [pc, #248]	; (80020fc <configAnalogPin+0x154>)
 8002004:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <configAnalogPin+0x150>)
 8002008:	2200      	movs	r2, #0
 800200a:	711a      	strb	r2, [r3, #4]
		break;
 800200c:	e069      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1:
	{
		//Es el pin PA1
		handlerAdcPin.pGPIOx						= GPIOA;
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <configAnalogPin+0x150>)
 8002010:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <configAnalogPin+0x154>)
 8002012:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002014:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <configAnalogPin+0x150>)
 8002016:	2201      	movs	r2, #1
 8002018:	711a      	strb	r2, [r3, #4]
		break;
 800201a:	e062      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_2:
	{
		//Es el pin PA2
		handlerAdcPin.pGPIOx						= GPIOA;
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <configAnalogPin+0x150>)
 800201e:	4a37      	ldr	r2, [pc, #220]	; (80020fc <configAnalogPin+0x154>)
 8002020:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <configAnalogPin+0x150>)
 8002024:	2202      	movs	r2, #2
 8002026:	711a      	strb	r2, [r3, #4]
		break;
 8002028:	e05b      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_3:
	{
		//Es el pin PA3
		handlerAdcPin.pGPIOx						= GPIOA;
 800202a:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <configAnalogPin+0x150>)
 800202c:	4a33      	ldr	r2, [pc, #204]	; (80020fc <configAnalogPin+0x154>)
 800202e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002030:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <configAnalogPin+0x150>)
 8002032:	2203      	movs	r2, #3
 8002034:	711a      	strb	r2, [r3, #4]
		break;
 8002036:	e054      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_4:
	{
		//Es el pin PA4
		handlerAdcPin.pGPIOx						= GPIOA;
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <configAnalogPin+0x150>)
 800203a:	4a30      	ldr	r2, [pc, #192]	; (80020fc <configAnalogPin+0x154>)
 800203c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <configAnalogPin+0x150>)
 8002040:	2204      	movs	r2, #4
 8002042:	711a      	strb	r2, [r3, #4]
		break;
 8002044:	e04d      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_5:
	{
		//Es el pin PA5
		handlerAdcPin.pGPIOx						= GPIOA;
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <configAnalogPin+0x150>)
 8002048:	4a2c      	ldr	r2, [pc, #176]	; (80020fc <configAnalogPin+0x154>)
 800204a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <configAnalogPin+0x150>)
 800204e:	2205      	movs	r2, #5
 8002050:	711a      	strb	r2, [r3, #4]
		break;
 8002052:	e046      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6:
	{
		//Es el pin PA6
		handlerAdcPin.pGPIOx						= GPIOA;
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <configAnalogPin+0x150>)
 8002056:	4a29      	ldr	r2, [pc, #164]	; (80020fc <configAnalogPin+0x154>)
 8002058:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <configAnalogPin+0x150>)
 800205c:	2206      	movs	r2, #6
 800205e:	711a      	strb	r2, [r3, #4]
		break;
 8002060:	e03f      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7:
	{
		//Es el pin PA7
		handlerAdcPin.pGPIOx						= GPIOA;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <configAnalogPin+0x150>)
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <configAnalogPin+0x154>)
 8002066:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <configAnalogPin+0x150>)
 800206a:	2207      	movs	r2, #7
 800206c:	711a      	strb	r2, [r3, #4]
		break;
 800206e:	e038      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8:
	{
		//Es el pin PB0
		handlerAdcPin.pGPIOx						= GPIOB;
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <configAnalogPin+0x150>)
 8002072:	4a23      	ldr	r2, [pc, #140]	; (8002100 <configAnalogPin+0x158>)
 8002074:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <configAnalogPin+0x150>)
 8002078:	2200      	movs	r2, #0
 800207a:	711a      	strb	r2, [r3, #4]
		break;
 800207c:	e031      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9:
	{
		//Es el pin PB1
		handlerAdcPin.pGPIOx						= GPIOB;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <configAnalogPin+0x150>)
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <configAnalogPin+0x158>)
 8002082:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <configAnalogPin+0x150>)
 8002086:	2201      	movs	r2, #1
 8002088:	711a      	strb	r2, [r3, #4]
		break;
 800208a:	e02a      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10:
	{
		//Es el pin PC0
		handlerAdcPin.pGPIOx						= GPIOC;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <configAnalogPin+0x150>)
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <configAnalogPin+0x15c>)
 8002090:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <configAnalogPin+0x150>)
 8002094:	2200      	movs	r2, #0
 8002096:	711a      	strb	r2, [r3, #4]
		break;
 8002098:	e023      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11:
	{
		//Es el pin PC1
		handlerAdcPin.pGPIOx						= GPIOC;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <configAnalogPin+0x150>)
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <configAnalogPin+0x15c>)
 800209e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <configAnalogPin+0x150>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	711a      	strb	r2, [r3, #4]
		break;
 80020a6:	e01c      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12:
	{
		//Es el pin PC2
		handlerAdcPin.pGPIOx						= GPIOC;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <configAnalogPin+0x150>)
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <configAnalogPin+0x15c>)
 80020ac:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <configAnalogPin+0x150>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	711a      	strb	r2, [r3, #4]
		break;
 80020b4:	e015      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13:
	{
		//Es el pin PC3
		handlerAdcPin.pGPIOx						= GPIOC;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <configAnalogPin+0x150>)
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <configAnalogPin+0x15c>)
 80020ba:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <configAnalogPin+0x150>)
 80020be:	2203      	movs	r2, #3
 80020c0:	711a      	strb	r2, [r3, #4]
		break;
 80020c2:	e00e      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14:
	{
		//Es el pin PC4
		handlerAdcPin.pGPIOx						= GPIOC;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <configAnalogPin+0x150>)
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <configAnalogPin+0x15c>)
 80020c8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <configAnalogPin+0x150>)
 80020cc:	2204      	movs	r2, #4
 80020ce:	711a      	strb	r2, [r3, #4]
		break;
 80020d0:	e007      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15:
	{
		//Es el pin PC5
		handlerAdcPin.pGPIOx						= GPIOC;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <configAnalogPin+0x150>)
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <configAnalogPin+0x15c>)
 80020d6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <configAnalogPin+0x150>)
 80020da:	2205      	movs	r2, #5
 80020dc:	711a      	strb	r2, [r3, #4]
		break;
 80020de:	e000      	b.n	80020e2 <configAnalogPin+0x13a>
	}
	default:
	{
		break;
 80020e0:	bf00      	nop
	}
	}

	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <configAnalogPin+0x150>)
 80020e4:	2203      	movs	r2, #3
 80020e6:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <configAnalogPin+0x150>)
 80020ea:	f000 f98b 	bl	8002404 <GPIO_Config>

}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003c8 	.word	0x200003c8
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800

08002108 <__NVIC_EnableIRQ>:
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a53      	ldr	r2, [pc, #332]	; (80022f4 <BTimer_Config+0x15c>)
 80021a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d106      	bne.n	80021c4 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80021b6:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <BTimer_Config+0x160>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <BTimer_Config+0x160>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	e022      	b.n	800220a <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <BTimer_Config+0x164>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d106      	bne.n	80021dc <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <BTimer_Config+0x160>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <BTimer_Config+0x160>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	e016      	b.n	800220a <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a47      	ldr	r2, [pc, #284]	; (8002300 <BTimer_Config+0x168>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d106      	bne.n	80021f4 <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <BTimer_Config+0x160>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <BTimer_Config+0x160>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	e00a      	b.n	800220a <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <BTimer_Config+0x16c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d105      	bne.n	800220a <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <BTimer_Config+0x160>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <BTimer_Config+0x160>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10c      	bne.n	800222c <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0210 	bic.w	r2, r2, #16
 8002220:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
 800222a:	e00d      	b.n	8002248 <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0210 	orr.w	r2, r2, #16
 800223a:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3a01      	subs	r2, #1
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	88db      	ldrh	r3, [r3, #6]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3a01      	subs	r2, #1
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d107      	bne.n	800229a <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 800228a:	201c      	movs	r0, #28
 800228c:	f7ff ff3c 	bl	8002108 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8002290:	2103      	movs	r1, #3
 8002292:	201c      	movs	r0, #28
 8002294:	f7ff ff56 	bl	8002144 <__NVIC_SetPriority>
 8002298:	e025      	b.n	80022e6 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <BTimer_Config+0x164>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d107      	bne.n	80022b4 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 80022a4:	201d      	movs	r0, #29
 80022a6:	f7ff ff2f 	bl	8002108 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 80022aa:	2103      	movs	r1, #3
 80022ac:	201d      	movs	r0, #29
 80022ae:	f7ff ff49 	bl	8002144 <__NVIC_SetPriority>
 80022b2:	e018      	b.n	80022e6 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <BTimer_Config+0x168>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d107      	bne.n	80022ce <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 80022be:	201e      	movs	r0, #30
 80022c0:	f7ff ff22 	bl	8002108 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 80022c4:	2103      	movs	r1, #3
 80022c6:	201e      	movs	r0, #30
 80022c8:	f7ff ff3c 	bl	8002144 <__NVIC_SetPriority>
 80022cc:	e00b      	b.n	80022e6 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <BTimer_Config+0x16c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d106      	bne.n	80022e6 <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 80022d8:	2032      	movs	r0, #50	; 0x32
 80022da:	f7ff ff15 	bl	8002108 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 80022de:	2104      	movs	r1, #4
 80022e0:	2032      	movs	r0, #50	; 0x32
 80022e2:	f7ff ff2f 	bl	8002144 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80022e6:	b662      	cpsie	i
}
 80022e8:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200003d8 	.word	0x200003d8
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00

08002308 <startTimer>:

/* Activa el contador para que el timer se incremente */
void startTimer(BTIMER_Handler_t *ptrTimerConfig){
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <stopTimer>:

/* Desctiva el contador para que el timer se incremente */
void stopTimer(BTIMER_Handler_t *ptrTimerConfig){
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
	 __NOP();
 8002354:	bf00      	nop
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <BTimer5_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer5_Callback(void){
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	 __NOP();
 8002364:	bf00      	nop
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8002374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8002384:	f7ff fad0 	bl	8001928 <BTimer2_Callback>

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <TIM3_IRQHandler+0x18>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <TIM3_IRQHandler+0x18>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 800239c:	f7ff ffd8 	bl	8002350 <BTimer3_Callback>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40000400 	.word	0x40000400

080023a8 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <TIM4_IRQHandler+0x18>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <TIM4_IRQHandler+0x18>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 80023b8:	f7ff faee 	bl	8001998 <BTimer4_Callback>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40000800 	.word	0x40000800

080023c4 <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <TIM5_IRQHandler+0x18>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <TIM5_IRQHandler+0x18>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 80023d4:	f7ff ffc4 	bl	8002360 <BTimer5_Callback>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40000c00 	.word	0x40000c00

080023e0 <FPU_Config>:
#include "stm32f4xx.h"
#include "core_cm4.h"

#include "FPU_Driver.h"

void FPU_Config(void){
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	/* Se activa el FPU dandole Full Access al CPACR */
	SCB->CPACR |= (0xF << 20);
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <FPU_Config+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <FPU_Config+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a88      	ldr	r2, [pc, #544]	; (800263c <GPIO_Config+0x238>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d106      	bne.n	800242c <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <GPIO_Config+0x23c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a87      	ldr	r2, [pc, #540]	; (8002640 <GPIO_Config+0x23c>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	e03a      	b.n	80024a2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a84      	ldr	r2, [pc, #528]	; (8002644 <GPIO_Config+0x240>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d106      	bne.n	8002444 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <GPIO_Config+0x23c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a81      	ldr	r2, [pc, #516]	; (8002640 <GPIO_Config+0x23c>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	e02e      	b.n	80024a2 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7f      	ldr	r2, [pc, #508]	; (8002648 <GPIO_Config+0x244>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d106      	bne.n	800245c <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 800244e:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <GPIO_Config+0x23c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a7b      	ldr	r2, [pc, #492]	; (8002640 <GPIO_Config+0x23c>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	e022      	b.n	80024a2 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7a      	ldr	r2, [pc, #488]	; (800264c <GPIO_Config+0x248>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d106      	bne.n	8002474 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <GPIO_Config+0x23c>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <GPIO_Config+0x23c>)
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	e016      	b.n	80024a2 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a75      	ldr	r2, [pc, #468]	; (8002650 <GPIO_Config+0x24c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d106      	bne.n	800248c <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 800247e:	4b70      	ldr	r3, [pc, #448]	; (8002640 <GPIO_Config+0x23c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <GPIO_Config+0x23c>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	e00a      	b.n	80024a2 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a70      	ldr	r2, [pc, #448]	; (8002654 <GPIO_Config+0x250>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d105      	bne.n	80024a2 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <GPIO_Config+0x23c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a69      	ldr	r2, [pc, #420]	; (8002640 <GPIO_Config+0x23c>)
 800249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	791b      	ldrb	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	791b      	ldrb	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2103      	movs	r1, #3
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7a1b      	ldrb	r3, [r3, #8]
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	791b      	ldrb	r3, [r3, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	2301      	movs	r3, #1
 8002500:	408b      	lsls	r3, r1
 8002502:	43db      	mvns	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	799b      	ldrb	r3, [r3, #6]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	791b      	ldrb	r3, [r3, #4]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2103      	movs	r1, #3
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	4619      	mov	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	79db      	ldrb	r3, [r3, #7]
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2103      	movs	r1, #3
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	400a      	ands	r2, r1
 800258c:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68d9      	ldr	r1, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	430a      	orrs	r2, r1
 800259c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	795b      	ldrb	r3, [r3, #5]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d143      	bne.n	800262e <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	791b      	ldrb	r3, [r3, #4]
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	d81f      	bhi.n	80025ee <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	791b      	ldrb	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	210f      	movs	r1, #15
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	400a      	ands	r2, r1
 80025ce:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a1a      	ldr	r2, [r3, #32]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7a5b      	ldrb	r3, [r3, #9]
 80025da:	4619      	mov	r1, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 80025ec:	e01f      	b.n	800262e <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	791b      	ldrb	r3, [r3, #4]
 80025f2:	3b08      	subs	r3, #8
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	210f      	movs	r1, #15
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	400a      	ands	r2, r1
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7a5b      	ldrb	r3, [r3, #9]
 800261c:	4619      	mov	r1, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	4619      	mov	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40020000 	.word	0x40020000
 8002640:	40023800 	.word	0x40023800
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40021c00 	.word	0x40021c00

08002658 <I2C_Config>:
 * Además, estos pines deben ser configurados como salidas open-drain y con las resistencias en modo pull-up
 */

uint8_t auxByte = 0;

void I2C_Config(I2C_Handler_t	*ptrHandlerI2C){
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

	/* 1. Activamos la señal de reloj para el módulo I2C seleccionado */
	if (ptrHandlerI2C->ptrI2Cx == I2C1){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a46      	ldr	r2, [pc, #280]	; (8002780 <I2C_Config+0x128>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d106      	bne.n	8002678 <I2C_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <I2C_Config+0x12c>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a45      	ldr	r2, [pc, #276]	; (8002784 <I2C_Config+0x12c>)
 8002670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	e016      	b.n	80026a6 <I2C_Config+0x4e>
	}
	else if (ptrHandlerI2C->ptrI2Cx == I2C2){
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a42      	ldr	r2, [pc, #264]	; (8002788 <I2C_Config+0x130>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d106      	bne.n	8002690 <I2C_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002682:	4b40      	ldr	r3, [pc, #256]	; (8002784 <I2C_Config+0x12c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a3f      	ldr	r2, [pc, #252]	; (8002784 <I2C_Config+0x12c>)
 8002688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	e00a      	b.n	80026a6 <I2C_Config+0x4e>
	}
	else if (ptrHandlerI2C->ptrI2Cx == I2C3){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3d      	ldr	r2, [pc, #244]	; (800278c <I2C_Config+0x134>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d105      	bne.n	80026a6 <I2C_Config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <I2C_Config+0x12c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a39      	ldr	r2, [pc, #228]	; (8002784 <I2C_Config+0x12c>)
 80026a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periférico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b4:	601a      	str	r2, [r3, #0]
	__NOP();
 80026b6:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c6:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada por el periférico para generar la señal de reloj para el bus I2C */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración anterior
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026d6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0210 	orr.w	r2, r2, #16
 80026e6:	605a      	str	r2, [r3, #4]

	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la velocidad del reloj y el tiempo máximo para el cambio de la señal (T-Rise)
	 * To.do comienza con los dos registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	795b      	ldrb	r3, [r3, #5]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d118      	bne.n	8002732 <I2C_Config+0xda>
		// Estamos en el modo "standar"
		// Seleccionamos el modo estándar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270e:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800271e:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0211 	orr.w	r2, r2, #17
 800272e:	621a      	str	r2, [r3, #32]
 8002730:	e017      	b.n	8002762 <I2C_Config+0x10a>
	}
	else {
		// Estamos en el modo "fast"
		// Seleccionamos el modo rápido
		ptrHandlerI2C->ptrI2Cx->CCR |= I2C_CCR_FS;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002740:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 020e 	orr.w	r2, r2, #14
 8002750:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0206 	orr.w	r2, r2, #6
 8002760:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el módulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40005400 	.word	0x40005400
 8002784:	40023800 	.word	0x40023800
 8002788:	40005800 	.word	0x40005800
 800278c:	40005c00 	.word	0x40005c00

08002790 <I2C_startTransaction>:


void I2C_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	/* Verificamos que la línea no está ocupada - bit "busy" en I2C_CR2 */
	while (ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8002798:	e000      	b.n	800279c <I2C_startTransaction+0xc>
		__NOP();
 800279a:	bf00      	nop
	while (ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f7      	bne.n	800279a <I2C_startTransaction+0xa>
	}
	/* Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b8:	601a      	str	r2, [r3, #0]

	/* Esperamos a que la bander del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1 */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80027ba:	e000      	b.n	80027be <I2C_startTransaction+0x2e>
		__NOP();
 80027bc:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f7      	beq.n	80027bc <I2C_startTransaction+0x2c>
	}
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <I2C_sendSlaveAddressRW>:

void I2C_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t readOrWrite){
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
	/* Enviamos la dirección del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente pase se envia la direccion de memoria que se desea leer */
	ptrHandlerI2C->ptrI2Cx->DR = (ptrHandlerI2C->slaveAddress << 1) | readOrWrite;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	005a      	lsls	r2, r3, #1
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que la bandera del evento "addr" se levante (esto nos indica que la dirección fue enviada satisfactoriamente) */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80027f8:	e000      	b.n	80027fc <I2C_sendSlaveAddressRW+0x20>
		__NOP();
 80027fa:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f7      	beq.n	80027fa <I2C_sendSlaveAddressRW+0x1e>
	}

	/* Debemos limpiar la bandera de la recepción de ACK de la "addr", para lo cual debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <I2C_sendSlaveAddressRW+0x54>)
 8002814:	701a      	strb	r2, [r3, #0]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <I2C_sendSlaveAddressRW+0x54>)
 8002820:	701a      	strb	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200003dc 	.word	0x200003dc

08002834 <I2C_stopTransaction>:
	/* Activamos la indicación para la ACK (indicación para el Slave de seguir enviando datos)
	 * (Debemos escribir 1 en la posición ACK del CR1) */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

void I2C_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	/* Generamos la condición de STOP */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <I2C_sendDataByte>:
	/* Leemos el byte recibido */
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
	return ptrHandlerI2C->dataI2C;
}

void I2C_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
	/* Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR =  dataToWrite;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que el byte sea transmitido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800286c:	e000      	b.n	8002870 <I2C_sendDataByte+0x18>
		__NOP();
 800286e:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f7      	beq.n	800286e <I2C_sendDataByte+0x16>
	}
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <initLCD>:
 */

#include "LCD_Driver.h"
#include "SysTickDriver.h"

void initLCD(I2C_Handler_t *ptrHandlerI2C){
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/**
	 * La función initLCD se encarga de inicializar y sincronizar la LCD
	 */
	// Se activa el Systick para realizar delays
	config_SysTickMs();
 8002894:	f000 fac6 	bl	8002e24 <config_SysTickMs>
	// Se hace una comunicación inicial por I2C para resetear todos los pines
	I2C_startTransaction(ptrHandlerI2C);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff79 	bl	8002790 <I2C_startTransaction>
	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 800289e:	2100      	movs	r1, #0
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff9b 	bl	80027dc <I2C_sendSlaveAddressRW>
	I2C_sendDataByte(ptrHandlerI2C, 0x00);
 80028a6:	2100      	movs	r1, #0
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ffd5 	bl	8002858 <I2C_sendDataByte>
	I2C_stopTransaction(ptrHandlerI2C);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffc0 	bl	8002834 <I2C_stopTransaction>

	delay_ms(15);
 80028b4:	200f      	movs	r0, #15
 80028b6:	f000 fb13 	bl	8002ee0 <delay_ms>
	// Se envía tres veces 0b0011 con el fin de sincronizar la LCD
	for (uint8_t i = 0; i < 3; i++){
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	e00a      	b.n	80028d6 <initLCD+0x4a>
		I2C_sendDataLCD(ptrHandlerI2C, 0, 0x03); //0b0011
 80028c0:	2203      	movs	r2, #3
 80028c2:	2100      	movs	r1, #0
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f856 	bl	8002976 <I2C_sendDataLCD>
		delay_ms(5);
 80028ca:	2005      	movs	r0, #5
 80028cc:	f000 fb08 	bl	8002ee0 <delay_ms>
	for (uint8_t i = 0; i < 3; i++){
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	3301      	adds	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d9f1      	bls.n	80028c0 <initLCD+0x34>
 	}
	// Se envia 0x02, que es un comando par comenzar la inicialización con interfaz de 4 bits
	I2C_sendDataLCD(ptrHandlerI2C, 0, 0x02);
 80028dc:	2202      	movs	r2, #2
 80028de:	2100      	movs	r1, #0
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f848 	bl	8002976 <I2C_sendDataLCD>
	// Se envía 0x2C, indicando que se trabajará con 2 líneas del Display y con
	LCD_writeByte(ptrHandlerI2C, 0, 0x2C);
 80028e6:	222c      	movs	r2, #44	; 0x2c
 80028e8:	2100      	movs	r1, #0
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f870 	bl	80029d0 <LCD_writeByte>
	delay_ms(5);
 80028f0:	2005      	movs	r0, #5
 80028f2:	f000 faf5 	bl	8002ee0 <delay_ms>
	// Se envía 0x08 que es un comando que apaga el Display de la LCD
	LCD_writeByte(ptrHandlerI2C, 0, 0x08);
 80028f6:	2208      	movs	r2, #8
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f868 	bl	80029d0 <LCD_writeByte>
	delay_ms(5);
 8002900:	2005      	movs	r0, #5
 8002902:	f000 faed 	bl	8002ee0 <delay_ms>
	// Se envía 0x01, comando que borra to.do lo que haya en la pantalla
	LCD_writeByte(ptrHandlerI2C, 0, 0x01);
 8002906:	2201      	movs	r2, #1
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f860 	bl	80029d0 <LCD_writeByte>
	delay_ms(5);
 8002910:	2005      	movs	r0, #5
 8002912:	f000 fae5 	bl	8002ee0 <delay_ms>
	// Se envía 0x06, comando que configura el modo de entrada, cada vez que se escriba el cursor se mueve a la derecha,
	LCD_writeByte(ptrHandlerI2C, 0, 0x06);
 8002916:	2206      	movs	r2, #6
 8002918:	2100      	movs	r1, #0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f858 	bl	80029d0 <LCD_writeByte>
	delay_ms(5);
 8002920:	2005      	movs	r0, #5
 8002922:	f000 fadd 	bl	8002ee0 <delay_ms>
	// Se enciende el Display
	LCD_writeByte(ptrHandlerI2C, 0, 0x0C);
 8002926:	220c      	movs	r2, #12
 8002928:	2100      	movs	r1, #0
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f850 	bl	80029d0 <LCD_writeByte>
	delay_ms(5);
 8002930:	2005      	movs	r0, #5
 8002932:	f000 fad5 	bl	8002ee0 <delay_ms>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <I2C_writePCF>:

void I2C_writePCF(I2C_Handler_t *ptrHandlerI2C, uint8_t data){
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	70fb      	strb	r3, [r7, #3]
	/**
	 * La función I2C_writePCF hace la comunicacion I2C con el modulo PCF y envía los bits de data
	 */
	I2C_startTransaction(ptrHandlerI2C);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff20 	bl	8002790 <I2C_startTransaction>
	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 8002950:	2100      	movs	r1, #0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff42 	bl	80027dc <I2C_sendSlaveAddressRW>
	I2C_sendDataByte(ptrHandlerI2C, data | LED_LCD);
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff78 	bl	8002858 <I2C_sendDataByte>
	I2C_stopTransaction(ptrHandlerI2C);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff63 	bl	8002834 <I2C_stopTransaction>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <I2C_sendDataLCD>:

void I2C_sendDataLCD(I2C_Handler_t *ptrHandlerI2C, uint8_t ctrl, uint8_t data){
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	70fb      	strb	r3, [r7, #3]
 8002982:	4613      	mov	r3, r2
 8002984:	70bb      	strb	r3, [r7, #2]
	/**
	 * La función sendDataLCD toma los primeros 4 bits de data para enviarlos a la LCD
	 */
	uint8_t dataToSend = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]

	// Se hace un shift de data para poner los primeros 4 bits en los últimos 4, siguiendo la manera de conexión de la LCD con el PCF
	dataToSend = (data << 4) & 0xF0;
 800298a:	78bb      	ldrb	r3, [r7, #2]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	73fb      	strb	r3, [r7, #15]
	// Ctrl indica si se desea enviar un comando (0) o un dato (1)
	if (ctrl == 1){
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d104      	bne.n	80029a0 <I2C_sendDataLCD+0x2a>
		dataToSend |= LCD_RS;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e003      	b.n	80029a8 <I2C_sendDataLCD+0x32>
	} else {
		dataToSend &= ~LCD_RS;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
	}
	// Se envía el dato con el bit LCD_E encendido y luego en reset, con lo cual se logra que la LCD lo lea correctamente
	I2C_writePCF(ptrHandlerI2C, dataToSend | LCD_E);
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffc3 	bl	800293e <I2C_writePCF>
	I2C_writePCF(ptrHandlerI2C, dataToSend & ~LCD_E);
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	f023 0304 	bic.w	r3, r3, #4
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffbb 	bl	800293e <I2C_writePCF>
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <LCD_writeByte>:

void LCD_writeByte(I2C_Handler_t *ptrHandlerI2C, uint8_t ctrl, uint8_t byte){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
 80029dc:	4613      	mov	r3, r2
 80029de:	70bb      	strb	r3, [r7, #2]
	/**
	 * La función LCD_writeByte se encarga de enviar un byte completo a la LCD, teniendo en cuenta el formato de 4 bits
	 */
	// Se envían los 4 bits bajos
	I2C_sendDataLCD(ptrHandlerI2C, ctrl, byte >> 4);
 80029e0:	78bb      	ldrb	r3, [r7, #2]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ffc3 	bl	8002976 <I2C_sendDataLCD>
	// Se envían los 4 bits altos
	I2C_sendDataLCD(ptrHandlerI2C, ctrl, byte & 0x0F);
 80029f0:	78bb      	ldrb	r3, [r7, #2]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ffba 	bl	8002976 <I2C_sendDataLCD>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <LCD_writeCharacter>:

void LCD_writeCharacter(I2C_Handler_t *ptrHandlerI2C, uint8_t character){
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	70fb      	strb	r3, [r7, #3]
	/**
	 * La función LCD_writeCharacte envía un Dato a la LCD
	 */
	LCD_writeByte(ptrHandlerI2C, 1, character);
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffd7 	bl	80029d0 <LCD_writeByte>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <LCD_writeCommand>:

void LCD_writeCommand(I2C_Handler_t *ptrHandlerI2C, uint8_t command){
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	70fb      	strb	r3, [r7, #3]
	/**
	 * La función LCD_writeCommand envía un Comando a la LCD
	 */
	LCD_writeByte(ptrHandlerI2C, 0, command);
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ffc7 	bl	80029d0 <LCD_writeByte>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <LCD_cursorPosition>:

void LCD_cursorPosition(I2C_Handler_t *ptrHandlerI2C, uint8_t row, uint8_t column){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	70fb      	strb	r3, [r7, #3]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	70bb      	strb	r3, [r7, #2]
	/**
	 * La función LCD_cursorPosition ubica el cursor de la LCD en la fila y columnas indicadas en la entrada
	 */
	switch (row){
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d82b      	bhi.n	8002abc <LCD_cursorPosition+0x70>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <LCD_cursorPosition+0x20>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a8d 	.word	0x08002a8d
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002aad 	.word	0x08002aad
	case 1:
	{
		LCD_writeCommand(ptrHandlerI2C, 0x80 + (column-1));
 8002a7c:	78bb      	ldrb	r3, [r7, #2]
 8002a7e:	337f      	adds	r3, #127	; 0x7f
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ffd0 	bl	8002a2a <LCD_writeCommand>
		break;
 8002a8a:	e018      	b.n	8002abe <LCD_cursorPosition+0x72>
	}
	case 2:
	{
		LCD_writeCommand(ptrHandlerI2C, 0xC0 + (column-1));
 8002a8c:	78bb      	ldrb	r3, [r7, #2]
 8002a8e:	3b41      	subs	r3, #65	; 0x41
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffc8 	bl	8002a2a <LCD_writeCommand>
		break;
 8002a9a:	e010      	b.n	8002abe <LCD_cursorPosition+0x72>
	}
	case 3:
	{
		LCD_writeCommand(ptrHandlerI2C, 0x94 + (column-1));
 8002a9c:	78bb      	ldrb	r3, [r7, #2]
 8002a9e:	3b6d      	subs	r3, #109	; 0x6d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ffc0 	bl	8002a2a <LCD_writeCommand>
		break;
 8002aaa:	e008      	b.n	8002abe <LCD_cursorPosition+0x72>
	}
	case 4:
	{
		LCD_writeCommand(ptrHandlerI2C, 0xD4 + (column-1));
 8002aac:	78bb      	ldrb	r3, [r7, #2]
 8002aae:	3b2d      	subs	r3, #45	; 0x2d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ffb8 	bl	8002a2a <LCD_writeCommand>
		break;
 8002aba:	e000      	b.n	8002abe <LCD_cursorPosition+0x72>
	}
	default:
	{
		break;
 8002abc:	bf00      	nop
	}
	}
	delay_ms(5);
 8002abe:	2005      	movs	r0, #5
 8002ac0:	f000 fa0e 	bl	8002ee0 <delay_ms>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <LCD_writeString>:

void LCD_writeString(I2C_Handler_t *ptrHandlerI2C, char* bufferData){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	/**
	 * La función LCD_writeString envía un String a la LCD
	 */
	// Se recorre el buffer de datos hasta que se encuantre un caracter nulo
	while(*bufferData != '\0'){
 8002ad6:	e008      	b.n	8002aea <LCD_writeString+0x1e>
		LCD_writeCharacter(ptrHandlerI2C, *bufferData);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ff93 	bl	8002a0a <LCD_writeCharacter>
		bufferData++;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	603b      	str	r3, [r7, #0]
	while(*bufferData != '\0'){
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f2      	bne.n	8002ad8 <LCD_writeString+0xc>
	}
}
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <LCD_writeStringXY>:

void LCD_writeStringXY(I2C_Handler_t *ptrHandlerI2C, char* bufferData, uint8_t row, uint8_t column){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	71fb      	strb	r3, [r7, #7]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71bb      	strb	r3, [r7, #6]
	/**
	 * La función LCD_writeStringXY envía un String a la LCD y lo ubica en la fila y columna indicadas
	 */
	LCD_cursorPosition(ptrHandlerI2C, row, column);
 8002b12:	79ba      	ldrb	r2, [r7, #6]
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4619      	mov	r1, r3
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff ff97 	bl	8002a4c <LCD_cursorPosition>
	LCD_writeString(ptrHandlerI2C, bufferData);
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff ffd3 	bl	8002acc <LCD_writeString>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <PWM_Config>:
 */

#include "BasicTimer.h"
#include "PwmDriver.h"

void PWM_Config(PWM_Handler_t	*pPwmConfig){
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]


	/* 1. Activar la señal de reloj para el periferico especifico */
		if (pPwmConfig->ptrTIMx == TIM2){
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d106      	bne.n	8002b50 <PWM_Config+0x20>
			// Activamos la señal del TIM2
			RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002b42:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <PWM_Config+0x1f0>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <PWM_Config+0x1f0>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	e016      	b.n	8002b7e <PWM_Config+0x4e>
		}
		else if (pPwmConfig->ptrTIMx == TIM3){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <PWM_Config+0x1f4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d106      	bne.n	8002b68 <PWM_Config+0x38>
			// Activamos la señal del TIM3
			RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <PWM_Config+0x1f0>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a70      	ldr	r2, [pc, #448]	; (8002d20 <PWM_Config+0x1f0>)
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	e00a      	b.n	8002b7e <PWM_Config+0x4e>
		}
		else if (pPwmConfig->ptrTIMx == TIM4){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <PWM_Config+0x1f8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d105      	bne.n	8002b7e <PWM_Config+0x4e>
			// Activamos la señal del TIM4
			RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002b72:	4b6b      	ldr	r3, [pc, #428]	; (8002d20 <PWM_Config+0x1f0>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a6a      	ldr	r2, [pc, #424]	; (8002d20 <PWM_Config+0x1f0>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
		}

	/* Counter used as upcounter */
	pPwmConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	601a      	str	r2, [r3, #0]

	/* Se reincia el contador a 0 */
	pPwmConfig->ptrTIMx->CNT = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

	/* Se configura el prescaler */
	pPwmConfig->ptrTIMx->PSC = pPwmConfig->pwmConfig.PWM_prescaler-1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	88db      	ldrh	r3, [r3, #6]
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Se configura el periodo en el ARR */
	pPwmConfig->ptrTIMx->ARR = pPwmConfig->pwmConfig.PWM_period-1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	891b      	ldrh	r3, [r3, #8]
 8002ba6:	1e5a      	subs	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c


	/* Se activa el contador */
	pPwmConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]


	switch(pPwmConfig->pwmConfig.PWM_channel){
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	791b      	ldrb	r3, [r3, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	f200 80a3 	bhi.w	8002d10 <PWM_Config+0x1e0>
 8002bca:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <PWM_Config+0xa0>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c79 	.word	0x08002c79
 8002bdc:	08002cc5 	.word	0x08002cc5
	case CHANNEL1:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR1 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	895a      	ldrh	r2, [r3, #10]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0203 	bic.w	r2, r2, #3
 8002bf8:	619a      	str	r2, [r3, #24]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0208 	orr.w	r2, r2, #8
 8002c08:	619a      	str	r2, [r3, #24]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002c18:	619a      	str	r2, [r3, #24]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	621a      	str	r2, [r3, #32]
		break;
 8002c2a:	e072      	b.n	8002d12 <PWM_Config+0x1e2>
	}
	case CHANNEL2:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR2 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	895a      	ldrh	r2, [r3, #10]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c44:	619a      	str	r2, [r3, #24]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c54:	619a      	str	r2, [r3, #24]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002c64:	619a      	str	r2, [r3, #24]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0210 	orr.w	r2, r2, #16
 8002c74:	621a      	str	r2, [r3, #32]
		break;
 8002c76:	e04c      	b.n	8002d12 <PWM_Config+0x1e2>
	}
	case CHANNEL3:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR3 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	895a      	ldrh	r2, [r3, #10]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0203 	bic.w	r2, r2, #3
 8002c90:	61da      	str	r2, [r3, #28]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0208 	orr.w	r2, r2, #8
 8002ca0:	61da      	str	r2, [r3, #28]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002cb0:	61da      	str	r2, [r3, #28]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc0:	621a      	str	r2, [r3, #32]
		break;
 8002cc2:	e026      	b.n	8002d12 <PWM_Config+0x1e2>
	}
	case CHANNEL4:
	{
		/* Se configura el dutyCycle */
		pPwmConfig->ptrTIMx->CCR4 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	895a      	ldrh	r2, [r3, #10]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
		/* Se configura el canal como OUTPUT */
		pPwmConfig->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cdc:	61da      	str	r2, [r3, #28]
		/* Se activa el Preload */
		pPwmConfig->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cec:	61da      	str	r2, [r3, #28]
		/* Se configura el modo Compare en PWM mode 1 */
		pPwmConfig->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002cfc:	61da      	str	r2, [r3, #28]
		/* Se activa el canal */
		pPwmConfig->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d0c:	621a      	str	r2, [r3, #32]
		break;
 8002d0e:	e000      	b.n	8002d12 <PWM_Config+0x1e2>
	}
	default:
	{
		break;
 8002d10:	bf00      	nop
	}
	}

}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40000800 	.word	0x40000800

08002d2c <setPwmDuty>:

void setPwmDuty(PWM_Handler_t *pPwmConfig, uint16_t newDuty){
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
	pPwmConfig->pwmConfig.PWM_dutyCycle = newDuty;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	815a      	strh	r2, [r3, #10]
	switch(pPwmConfig->pwmConfig.PWM_channel){
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d823      	bhi.n	8002d90 <setPwmDuty+0x64>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <setPwmDuty+0x24>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d6d 	.word	0x08002d6d
 8002d58:	08002d79 	.word	0x08002d79
 8002d5c:	08002d85 	.word	0x08002d85
		case CHANNEL1:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR1 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	895a      	ldrh	r2, [r3, #10]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002d6a:	e012      	b.n	8002d92 <setPwmDuty+0x66>
		}
		case CHANNEL2:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR2 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	895a      	ldrh	r2, [r3, #10]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002d76:	e00c      	b.n	8002d92 <setPwmDuty+0x66>
		}
		case CHANNEL3:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR3 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	895a      	ldrh	r2, [r3, #10]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002d82:	e006      	b.n	8002d92 <setPwmDuty+0x66>
		}
		case CHANNEL4:
		{
			/* Se configura el dutyCycle */
			pPwmConfig->ptrTIMx->CCR4 = pPwmConfig->pwmConfig.PWM_dutyCycle;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	895a      	ldrh	r2, [r3, #10]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002d8e:	e000      	b.n	8002d92 <setPwmDuty+0x66>
		}
		default:
		{
			break;
 8002d90:	bf00      	nop
		}
	}
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <stopPWM>:

void stopPWM(PWM_Handler_t *ptrHandlerPWM){
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	ptrHandlerPWM->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <startPWM>:

void startPWM(PWM_Handler_t *ptrHandlerPWM){
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	ptrHandlerPWM->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <__NVIC_EnableIRQ>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	; (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <config_SysTickMs>:
uint64_t ticks;
uint32_t sysTicksStart = 0;
uint32_t sysTicksEnd   = 0;

/**/
void config_SysTickMs(void){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8002e28:	4914      	ldr	r1, [pc, #80]	; (8002e7c <config_SysTickMs+0x58>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9c1 2300 	strd	r2, r3, [r1]

	// Cargando el valor del limite de icrementos que representan 1ms
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e38:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002e3c:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e50:	b672      	cpsid	i
}
 8002e52:	bf00      	nop

	// Desactivamos la interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	6013      	str	r3, [r2, #0]

	// Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ffc0 	bl	8002de8 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <config_SysTickMs+0x5c>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e74:	b662      	cpsie	i
}
 8002e76:	bf00      	nop

	// Activamos las interrupciones globales
	__enable_irq();
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200003e0 	.word	0x200003e0
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <getTicksMs>:

uint64_t getTicksMs(void){
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	return ticks;
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <getTicksMs+0x18>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	200003e0 	.word	0x200003e0

08002ea0 <SysTick_Handler>:

/**/
void SysTick_Handler(void){
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	//Verificamos que la interrupción se lanzó
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <SysTick_Handler+0x38>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <SysTick_Handler+0x2e>
		//Limpiamos la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <SysTick_Handler+0x38>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <SysTick_Handler+0x38>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
		//Incrementamos en 1 el contador
		ticks++;
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <SysTick_Handler+0x3c>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	1c50      	adds	r0, r2, #1
 8002ec4:	f143 0100 	adc.w	r1, r3, #0
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <SysTick_Handler+0x3c>)
 8002eca:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e010 	.word	0xe000e010
 8002edc:	200003e0 	.word	0x200003e0

08002ee0 <delay_ms>:

void delay_ms(uint32_t time){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	sysTicksStart = getTicksMs();
 8002ee8:	f7ff ffcc 	bl	8002e84 <getTicksMs>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <delay_ms+0x48>)
 8002ef2:	601a      	str	r2, [r3, #0]
	sysTicksEnd = getTicksMs();
 8002ef4:	f7ff ffc6 	bl	8002e84 <getTicksMs>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <delay_ms+0x4c>)
 8002efe:	601a      	str	r2, [r3, #0]
	while ((sysTicksEnd - sysTicksStart) < time){
 8002f00:	e005      	b.n	8002f0e <delay_ms+0x2e>
		sysTicksEnd = getTicksMs();
 8002f02:	f7ff ffbf 	bl	8002e84 <getTicksMs>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <delay_ms+0x4c>)
 8002f0c:	601a      	str	r2, [r3, #0]
	while ((sysTicksEnd - sysTicksStart) < time){
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <delay_ms+0x4c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <delay_ms+0x48>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d8f1      	bhi.n	8002f02 <delay_ms+0x22>
	}
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200003e8 	.word	0x200003e8
 8002f2c:	200003ec 	.word	0x200003ec

08002f30 <__NVIC_EnableIRQ>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db0b      	blt.n	8002f5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	4907      	ldr	r1, [pc, #28]	; (8002f68 <__NVIC_EnableIRQ+0x38>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	2001      	movs	r0, #1
 8002f52:	fa00 f202 	lsl.w	r2, r0, r2
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <__NVIC_DisableIRQ>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db12      	blt.n	8002fa4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <__NVIC_DisableIRQ+0x44>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	3320      	adds	r3, #32
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f98:	f3bf 8f4f 	dsb	sy
}
 8002f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f9e:	f3bf 8f6f 	isb	sy
}
 8002fa2:	bf00      	nop
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	; (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a88      	ldr	r2, [pc, #544]	; (8003238 <USART_Config+0x230>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d106      	bne.n	8003028 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 800301a:	4b88      	ldr	r3, [pc, #544]	; (800323c <USART_Config+0x234>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a87      	ldr	r2, [pc, #540]	; (800323c <USART_Config+0x234>)
 8003020:	f043 0310 	orr.w	r3, r3, #16
 8003024:	6453      	str	r3, [r2, #68]	; 0x44
 8003026:	e016      	b.n	8003056 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a84      	ldr	r2, [pc, #528]	; (8003240 <USART_Config+0x238>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d106      	bne.n	8003040 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8003032:	4b82      	ldr	r3, [pc, #520]	; (800323c <USART_Config+0x234>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a81      	ldr	r2, [pc, #516]	; (800323c <USART_Config+0x234>)
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	e00a      	b.n	8003056 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a7f      	ldr	r2, [pc, #508]	; (8003244 <USART_Config+0x23c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d105      	bne.n	8003056 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 800304a:	4b7c      	ldr	r3, [pc, #496]	; (800323c <USART_Config+0x234>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a7b      	ldr	r2, [pc, #492]	; (800323c <USART_Config+0x234>)
 8003050:	f043 0320 	orr.w	r3, r3, #32
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	79db      	ldrb	r3, [r3, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d023      	beq.n	80030b6 <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307c:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	79db      	ldrb	r3, [r3, #7]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d10b      	bne.n	800309e <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003094:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	719a      	strb	r2, [r3, #6]
 800309c:	e013      	b.n	80030c6 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ac:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	719a      	strb	r2, [r3, #6]
 80030b4:	e007      	b.n	80030c6 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c4:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	799b      	ldrb	r3, [r3, #6]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	e007      	b.n	80030f0 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ee:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7a1b      	ldrb	r3, [r3, #8]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d82f      	bhi.n	8003158 <USART_Config+0x150>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <USART_Config+0xf8>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003111 	.word	0x08003111
 8003104:	08003123 	.word	0x08003123
 8003108:	08003135 	.word	0x08003135
 800310c:	08003147 	.word	0x08003147
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800311e:	611a      	str	r2, [r3, #16]
		break;
 8003120:	e01a      	b.n	8003158 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003130:	611a      	str	r2, [r3, #16]
		break;
 8003132:	e011      	b.n	8003158 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003142:	611a      	str	r2, [r3, #16]
		break;
 8003144:	e008      	b.n	8003158 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003154:	611a      	str	r2, [r3, #16]
		break;
 8003156:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	795b      	ldrb	r3, [r3, #5]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f240 6283 	movw	r2, #1667	; 0x683
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e01a      	b.n	80031a2 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	795b      	ldrb	r3, [r3, #5]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f240 3241 	movw	r2, #833	; 0x341
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	e010      	b.n	80031a2 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	795b      	ldrb	r3, [r3, #5]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d104      	bne.n	8003192 <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	228b      	movs	r2, #139	; 0x8b
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	e007      	b.n	80031a2 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	795b      	ldrb	r3, [r3, #5]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d103      	bne.n	80031a2 <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2211      	movs	r2, #17
 80031a0:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	791b      	ldrb	r3, [r3, #4]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d84e      	bhi.n	8003248 <USART_Config+0x240>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <USART_Config+0x1a8>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031d3 	.word	0x080031d3
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	08003207 	.word	0x08003207
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0208 	orr.w	r2, r2, #8
 80031ce:	60da      	str	r2, [r3, #12]
		break;
 80031d0:	e053      	b.n	800327a <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0204 	orr.w	r2, r2, #4
 80031e0:	60da      	str	r2, [r3, #12]
		break;
 80031e2:	e04a      	b.n	800327a <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0208 	orr.w	r2, r2, #8
 80031f2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0204 	orr.w	r2, r2, #4
 8003202:	60da      	str	r2, [r3, #12]
		break;
 8003204:	e039      	b.n	800327a <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0208 	bic.w	r2, r2, #8
 8003214:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0204 	bic.w	r2, r2, #4
 8003224:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003234:	60da      	str	r2, [r3, #12]
		break;
 8003236:	e020      	b.n	800327a <USART_Config+0x272>
 8003238:	40011000 	.word	0x40011000
 800323c:	40023800 	.word	0x40023800
 8003240:	40004400 	.word	0x40004400
 8003244:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0208 	bic.w	r2, r2, #8
 8003256:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003276:	60da      	str	r2, [r3, #12]
		break;
 8003278:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	791b      	ldrb	r3, [r3, #4]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d007      	beq.n	8003292 <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003290:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003292:	b672      	cpsid	i
}
 8003294:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7a5b      	ldrb	r3, [r3, #9]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d01e      	beq.n	80032ec <USART_Config+0x2e4>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <USART_Config+0x324>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d107      	bne.n	80032c8 <USART_Config+0x2c0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80032b8:	2025      	movs	r0, #37	; 0x25
 80032ba:	f7ff fe39 	bl	8002f30 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART1_IRQn, 1);
 80032be:	2101      	movs	r1, #1
 80032c0:	2025      	movs	r0, #37	; 0x25
 80032c2:	f7ff fe77 	bl	8002fb4 <__NVIC_SetPriority>
 80032c6:	e01a      	b.n	80032fe <USART_Config+0x2f6>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <USART_Config+0x328>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d103      	bne.n	80032da <USART_Config+0x2d2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80032d2:	2026      	movs	r0, #38	; 0x26
 80032d4:	f7ff fe2c 	bl	8002f30 <__NVIC_EnableIRQ>
 80032d8:	e011      	b.n	80032fe <USART_Config+0x2f6>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <USART_Config+0x32c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10c      	bne.n	80032fe <USART_Config+0x2f6>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80032e4:	2047      	movs	r0, #71	; 0x47
 80032e6:	f7ff fe23 	bl	8002f30 <__NVIC_EnableIRQ>
 80032ea:	e008      	b.n	80032fe <USART_Config+0x2f6>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 80032ec:	2025      	movs	r0, #37	; 0x25
 80032ee:	f7ff fe3d 	bl	8002f6c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 80032f2:	2026      	movs	r0, #38	; 0x26
 80032f4:	f7ff fe3a 	bl	8002f6c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 80032f8:	2047      	movs	r0, #71	; 0x47
 80032fa:	f7ff fe37 	bl	8002f6c <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7a5b      	ldrb	r3, [r3, #9]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d003      	beq.n	800330e <USART_Config+0x306>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7a5b      	ldrb	r3, [r3, #9]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d107      	bne.n	800331e <USART_Config+0x316>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0220 	orr.w	r2, r2, #32
 800331c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800331e:	b662      	cpsie	i
}
 8003320:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40011000 	.word	0x40011000
 8003330:	40004400 	.word	0x40004400
 8003334:	40011400 	.word	0x40011400

08003338 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7a5b      	ldrb	r3, [r3, #9]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <writeChar+0x1c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7a5b      	ldrb	r3, [r3, #9]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d10c      	bne.n	800336e <writeChar+0x36>
		auxDataToSend = dataToSend;
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <writeChar+0x5c>)
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	e00c      	b.n	8003386 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 800336c:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f7      	beq.n	800336c <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	605a      	str	r2, [r3, #4]
	}
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	200003f1 	.word	0x200003f1

08003398 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80033a2:	e008      	b.n	80033b6 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffc4 	bl	8003338 <writeChar>
		msgToSend++;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f2      	bne.n	80033a4 <writeMsg+0xc>
	}
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
	return auxRxData;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <getRxData+0x14>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	200003f0 	.word	0x200003f0

080033e0 <Usart2_TX_Callback>:

__attribute__((weak)) void Usart1_TX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart2_TX_Callback(void){
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	 __NOP();
 80033e4:	bf00      	nop
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
	 __NOP();
 80033f4:	bf00      	nop
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <Usart2_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart2_RX_Callback(void){
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	 __NOP();
 8003404:	bf00      	nop
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <Usart6_RX_Callback>:

__attribute__((weak)) void Usart6_RX_Callback(void){
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
	 __NOP();
 8003414:	bf00      	nop
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <USART1_IRQHandler+0x48>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <USART1_IRQHandler+0x48>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <USART1_IRQHandler+0x4c>)
 8003438:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 800343a:	f7fe fac5 	bl	80019c8 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 800343e:	e011      	b.n	8003464 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <USART1_IRQHandler+0x48>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <USART1_IRQHandler+0x50>)
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <USART1_IRQHandler+0x48>)
 8003452:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <USART1_IRQHandler+0x48>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a03      	ldr	r2, [pc, #12]	; (8003468 <USART1_IRQHandler+0x48>)
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345e:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 8003460:	f7fe fabe 	bl	80019e0 <Usart1_TX_Callback>
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40011000 	.word	0x40011000
 800346c:	200003f0 	.word	0x200003f0
 8003470:	200003f1 	.word	0x200003f1

08003474 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <USART2_IRQHandler+0x48>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <USART2_IRQHandler+0x48>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <USART2_IRQHandler+0x4c>)
 800348c:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 800348e:	f7ff ffb7 	bl	8003400 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 8003492:	e011      	b.n	80034b8 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <USART2_IRQHandler+0x48>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <USART2_IRQHandler+0x50>)
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <USART2_IRQHandler+0x48>)
 80034a6:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <USART2_IRQHandler+0x48>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a03      	ldr	r2, [pc, #12]	; (80034bc <USART2_IRQHandler+0x48>)
 80034ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b2:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80034b4:	f7ff ff94 	bl	80033e0 <Usart2_TX_Callback>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40004400 	.word	0x40004400
 80034c0:	200003f0 	.word	0x200003f0
 80034c4:	200003f1 	.word	0x200003f1

080034c8 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <USART6_IRQHandler+0x48>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <USART6_IRQHandler+0x48>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <USART6_IRQHandler+0x4c>)
 80034e0:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 80034e2:	f7ff ff95 	bl	8003410 <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 80034e6:	e011      	b.n	800350c <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <USART6_IRQHandler+0x48>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <USART6_IRQHandler+0x50>)
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <USART6_IRQHandler+0x48>)
 80034fa:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <USART6_IRQHandler+0x48>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <USART6_IRQHandler+0x48>)
 8003502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003506:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8003508:	f7ff ff72 	bl	80033f0 <Usart6_TX_Callback>
}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40011400 	.word	0x40011400
 8003514:	200003f0 	.word	0x200003f0
 8003518:	200003f1 	.word	0x200003f1

0800351c <__errno>:
 800351c:	4b01      	ldr	r3, [pc, #4]	; (8003524 <__errno+0x8>)
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000004 	.word	0x20000004

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4d0d      	ldr	r5, [pc, #52]	; (8003560 <__libc_init_array+0x38>)
 800352c:	4c0d      	ldr	r4, [pc, #52]	; (8003564 <__libc_init_array+0x3c>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	2600      	movs	r6, #0
 8003534:	42a6      	cmp	r6, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	4d0b      	ldr	r5, [pc, #44]	; (8003568 <__libc_init_array+0x40>)
 800353a:	4c0c      	ldr	r4, [pc, #48]	; (800356c <__libc_init_array+0x44>)
 800353c:	f005 f8ca 	bl	80086d4 <_init>
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	2600      	movs	r6, #0
 8003546:	42a6      	cmp	r6, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003550:	4798      	blx	r3
 8003552:	3601      	adds	r6, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f855 3b04 	ldr.w	r3, [r5], #4
 800355a:	4798      	blx	r3
 800355c:	3601      	adds	r6, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	080091bc 	.word	0x080091bc
 8003564:	080091bc 	.word	0x080091bc
 8003568:	080091bc 	.word	0x080091bc
 800356c:	080091c0 	.word	0x080091c0

08003570 <memset>:
 8003570:	4402      	add	r2, r0
 8003572:	4603      	mov	r3, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <__cvt>:
 8003580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003584:	ec55 4b10 	vmov	r4, r5, d0
 8003588:	2d00      	cmp	r5, #0
 800358a:	460e      	mov	r6, r1
 800358c:	4619      	mov	r1, r3
 800358e:	462b      	mov	r3, r5
 8003590:	bfbb      	ittet	lt
 8003592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003596:	461d      	movlt	r5, r3
 8003598:	2300      	movge	r3, #0
 800359a:	232d      	movlt	r3, #45	; 0x2d
 800359c:	700b      	strb	r3, [r1, #0]
 800359e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80035a4:	4691      	mov	r9, r2
 80035a6:	f023 0820 	bic.w	r8, r3, #32
 80035aa:	bfbc      	itt	lt
 80035ac:	4622      	movlt	r2, r4
 80035ae:	4614      	movlt	r4, r2
 80035b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035b4:	d005      	beq.n	80035c2 <__cvt+0x42>
 80035b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80035ba:	d100      	bne.n	80035be <__cvt+0x3e>
 80035bc:	3601      	adds	r6, #1
 80035be:	2102      	movs	r1, #2
 80035c0:	e000      	b.n	80035c4 <__cvt+0x44>
 80035c2:	2103      	movs	r1, #3
 80035c4:	ab03      	add	r3, sp, #12
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	ab02      	add	r3, sp, #8
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	ec45 4b10 	vmov	d0, r4, r5
 80035d0:	4653      	mov	r3, sl
 80035d2:	4632      	mov	r2, r6
 80035d4:	f001 fe44 	bl	8005260 <_dtoa_r>
 80035d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80035dc:	4607      	mov	r7, r0
 80035de:	d102      	bne.n	80035e6 <__cvt+0x66>
 80035e0:	f019 0f01 	tst.w	r9, #1
 80035e4:	d022      	beq.n	800362c <__cvt+0xac>
 80035e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035ea:	eb07 0906 	add.w	r9, r7, r6
 80035ee:	d110      	bne.n	8003612 <__cvt+0x92>
 80035f0:	783b      	ldrb	r3, [r7, #0]
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d10a      	bne.n	800360c <__cvt+0x8c>
 80035f6:	2200      	movs	r2, #0
 80035f8:	2300      	movs	r3, #0
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7fd fa7b 	bl	8000af8 <__aeabi_dcmpeq>
 8003602:	b918      	cbnz	r0, 800360c <__cvt+0x8c>
 8003604:	f1c6 0601 	rsb	r6, r6, #1
 8003608:	f8ca 6000 	str.w	r6, [sl]
 800360c:	f8da 3000 	ldr.w	r3, [sl]
 8003610:	4499      	add	r9, r3
 8003612:	2200      	movs	r2, #0
 8003614:	2300      	movs	r3, #0
 8003616:	4620      	mov	r0, r4
 8003618:	4629      	mov	r1, r5
 800361a:	f7fd fa6d 	bl	8000af8 <__aeabi_dcmpeq>
 800361e:	b108      	cbz	r0, 8003624 <__cvt+0xa4>
 8003620:	f8cd 900c 	str.w	r9, [sp, #12]
 8003624:	2230      	movs	r2, #48	; 0x30
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	454b      	cmp	r3, r9
 800362a:	d307      	bcc.n	800363c <__cvt+0xbc>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003630:	1bdb      	subs	r3, r3, r7
 8003632:	4638      	mov	r0, r7
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	b004      	add	sp, #16
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	1c59      	adds	r1, r3, #1
 800363e:	9103      	str	r1, [sp, #12]
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e7f0      	b.n	8003626 <__cvt+0xa6>

08003644 <__exponent>:
 8003644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003646:	4603      	mov	r3, r0
 8003648:	2900      	cmp	r1, #0
 800364a:	bfb8      	it	lt
 800364c:	4249      	neglt	r1, r1
 800364e:	f803 2b02 	strb.w	r2, [r3], #2
 8003652:	bfb4      	ite	lt
 8003654:	222d      	movlt	r2, #45	; 0x2d
 8003656:	222b      	movge	r2, #43	; 0x2b
 8003658:	2909      	cmp	r1, #9
 800365a:	7042      	strb	r2, [r0, #1]
 800365c:	dd2a      	ble.n	80036b4 <__exponent+0x70>
 800365e:	f10d 0407 	add.w	r4, sp, #7
 8003662:	46a4      	mov	ip, r4
 8003664:	270a      	movs	r7, #10
 8003666:	46a6      	mov	lr, r4
 8003668:	460a      	mov	r2, r1
 800366a:	fb91 f6f7 	sdiv	r6, r1, r7
 800366e:	fb07 1516 	mls	r5, r7, r6, r1
 8003672:	3530      	adds	r5, #48	; 0x30
 8003674:	2a63      	cmp	r2, #99	; 0x63
 8003676:	f104 34ff 	add.w	r4, r4, #4294967295
 800367a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800367e:	4631      	mov	r1, r6
 8003680:	dcf1      	bgt.n	8003666 <__exponent+0x22>
 8003682:	3130      	adds	r1, #48	; 0x30
 8003684:	f1ae 0502 	sub.w	r5, lr, #2
 8003688:	f804 1c01 	strb.w	r1, [r4, #-1]
 800368c:	1c44      	adds	r4, r0, #1
 800368e:	4629      	mov	r1, r5
 8003690:	4561      	cmp	r1, ip
 8003692:	d30a      	bcc.n	80036aa <__exponent+0x66>
 8003694:	f10d 0209 	add.w	r2, sp, #9
 8003698:	eba2 020e 	sub.w	r2, r2, lr
 800369c:	4565      	cmp	r5, ip
 800369e:	bf88      	it	hi
 80036a0:	2200      	movhi	r2, #0
 80036a2:	4413      	add	r3, r2
 80036a4:	1a18      	subs	r0, r3, r0
 80036a6:	b003      	add	sp, #12
 80036a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80036b2:	e7ed      	b.n	8003690 <__exponent+0x4c>
 80036b4:	2330      	movs	r3, #48	; 0x30
 80036b6:	3130      	adds	r1, #48	; 0x30
 80036b8:	7083      	strb	r3, [r0, #2]
 80036ba:	70c1      	strb	r1, [r0, #3]
 80036bc:	1d03      	adds	r3, r0, #4
 80036be:	e7f1      	b.n	80036a4 <__exponent+0x60>

080036c0 <_printf_float>:
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	ed2d 8b02 	vpush	{d8}
 80036c8:	b08d      	sub	sp, #52	; 0x34
 80036ca:	460c      	mov	r4, r1
 80036cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80036d0:	4616      	mov	r6, r2
 80036d2:	461f      	mov	r7, r3
 80036d4:	4605      	mov	r5, r0
 80036d6:	f002 ff21 	bl	800651c <_localeconv_r>
 80036da:	f8d0 a000 	ldr.w	sl, [r0]
 80036de:	4650      	mov	r0, sl
 80036e0:	f7fc fd88 	bl	80001f4 <strlen>
 80036e4:	2300      	movs	r3, #0
 80036e6:	930a      	str	r3, [sp, #40]	; 0x28
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	9305      	str	r3, [sp, #20]
 80036ec:	f8d8 3000 	ldr.w	r3, [r8]
 80036f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80036f4:	3307      	adds	r3, #7
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	f103 0208 	add.w	r2, r3, #8
 80036fe:	f8c8 2000 	str.w	r2, [r8]
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800370a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800370e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003712:	9307      	str	r3, [sp, #28]
 8003714:	f8cd 8018 	str.w	r8, [sp, #24]
 8003718:	ee08 0a10 	vmov	s16, r0
 800371c:	4b9f      	ldr	r3, [pc, #636]	; (800399c <_printf_float+0x2dc>)
 800371e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	f7fd fa19 	bl	8000b5c <__aeabi_dcmpun>
 800372a:	bb88      	cbnz	r0, 8003790 <_printf_float+0xd0>
 800372c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003730:	4b9a      	ldr	r3, [pc, #616]	; (800399c <_printf_float+0x2dc>)
 8003732:	f04f 32ff 	mov.w	r2, #4294967295
 8003736:	f7fd f9f3 	bl	8000b20 <__aeabi_dcmple>
 800373a:	bb48      	cbnz	r0, 8003790 <_printf_float+0xd0>
 800373c:	2200      	movs	r2, #0
 800373e:	2300      	movs	r3, #0
 8003740:	4640      	mov	r0, r8
 8003742:	4649      	mov	r1, r9
 8003744:	f7fd f9e2 	bl	8000b0c <__aeabi_dcmplt>
 8003748:	b110      	cbz	r0, 8003750 <_printf_float+0x90>
 800374a:	232d      	movs	r3, #45	; 0x2d
 800374c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003750:	4b93      	ldr	r3, [pc, #588]	; (80039a0 <_printf_float+0x2e0>)
 8003752:	4894      	ldr	r0, [pc, #592]	; (80039a4 <_printf_float+0x2e4>)
 8003754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003758:	bf94      	ite	ls
 800375a:	4698      	movls	r8, r3
 800375c:	4680      	movhi	r8, r0
 800375e:	2303      	movs	r3, #3
 8003760:	6123      	str	r3, [r4, #16]
 8003762:	9b05      	ldr	r3, [sp, #20]
 8003764:	f023 0204 	bic.w	r2, r3, #4
 8003768:	6022      	str	r2, [r4, #0]
 800376a:	f04f 0900 	mov.w	r9, #0
 800376e:	9700      	str	r7, [sp, #0]
 8003770:	4633      	mov	r3, r6
 8003772:	aa0b      	add	r2, sp, #44	; 0x2c
 8003774:	4621      	mov	r1, r4
 8003776:	4628      	mov	r0, r5
 8003778:	f000 f9d8 	bl	8003b2c <_printf_common>
 800377c:	3001      	adds	r0, #1
 800377e:	f040 8090 	bne.w	80038a2 <_printf_float+0x1e2>
 8003782:	f04f 30ff 	mov.w	r0, #4294967295
 8003786:	b00d      	add	sp, #52	; 0x34
 8003788:	ecbd 8b02 	vpop	{d8}
 800378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	4640      	mov	r0, r8
 8003796:	4649      	mov	r1, r9
 8003798:	f7fd f9e0 	bl	8000b5c <__aeabi_dcmpun>
 800379c:	b140      	cbz	r0, 80037b0 <_printf_float+0xf0>
 800379e:	464b      	mov	r3, r9
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bfbc      	itt	lt
 80037a4:	232d      	movlt	r3, #45	; 0x2d
 80037a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80037aa:	487f      	ldr	r0, [pc, #508]	; (80039a8 <_printf_float+0x2e8>)
 80037ac:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <_printf_float+0x2ec>)
 80037ae:	e7d1      	b.n	8003754 <_printf_float+0x94>
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80037b6:	9206      	str	r2, [sp, #24]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	d13f      	bne.n	800383c <_printf_float+0x17c>
 80037bc:	2306      	movs	r3, #6
 80037be:	6063      	str	r3, [r4, #4]
 80037c0:	9b05      	ldr	r3, [sp, #20]
 80037c2:	6861      	ldr	r1, [r4, #4]
 80037c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037c8:	2300      	movs	r3, #0
 80037ca:	9303      	str	r3, [sp, #12]
 80037cc:	ab0a      	add	r3, sp, #40	; 0x28
 80037ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80037d2:	ab09      	add	r3, sp, #36	; 0x24
 80037d4:	ec49 8b10 	vmov	d0, r8, r9
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	6022      	str	r2, [r4, #0]
 80037dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff fecd 	bl	8003580 <__cvt>
 80037e6:	9b06      	ldr	r3, [sp, #24]
 80037e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037ea:	2b47      	cmp	r3, #71	; 0x47
 80037ec:	4680      	mov	r8, r0
 80037ee:	d108      	bne.n	8003802 <_printf_float+0x142>
 80037f0:	1cc8      	adds	r0, r1, #3
 80037f2:	db02      	blt.n	80037fa <_printf_float+0x13a>
 80037f4:	6863      	ldr	r3, [r4, #4]
 80037f6:	4299      	cmp	r1, r3
 80037f8:	dd41      	ble.n	800387e <_printf_float+0x1be>
 80037fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80037fe:	fa5f fb8b 	uxtb.w	fp, fp
 8003802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003806:	d820      	bhi.n	800384a <_printf_float+0x18a>
 8003808:	3901      	subs	r1, #1
 800380a:	465a      	mov	r2, fp
 800380c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003810:	9109      	str	r1, [sp, #36]	; 0x24
 8003812:	f7ff ff17 	bl	8003644 <__exponent>
 8003816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003818:	1813      	adds	r3, r2, r0
 800381a:	2a01      	cmp	r2, #1
 800381c:	4681      	mov	r9, r0
 800381e:	6123      	str	r3, [r4, #16]
 8003820:	dc02      	bgt.n	8003828 <_printf_float+0x168>
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	07d2      	lsls	r2, r2, #31
 8003826:	d501      	bpl.n	800382c <_printf_float+0x16c>
 8003828:	3301      	adds	r3, #1
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003830:	2b00      	cmp	r3, #0
 8003832:	d09c      	beq.n	800376e <_printf_float+0xae>
 8003834:	232d      	movs	r3, #45	; 0x2d
 8003836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383a:	e798      	b.n	800376e <_printf_float+0xae>
 800383c:	9a06      	ldr	r2, [sp, #24]
 800383e:	2a47      	cmp	r2, #71	; 0x47
 8003840:	d1be      	bne.n	80037c0 <_printf_float+0x100>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1bc      	bne.n	80037c0 <_printf_float+0x100>
 8003846:	2301      	movs	r3, #1
 8003848:	e7b9      	b.n	80037be <_printf_float+0xfe>
 800384a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800384e:	d118      	bne.n	8003882 <_printf_float+0x1c2>
 8003850:	2900      	cmp	r1, #0
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	dd0b      	ble.n	800386e <_printf_float+0x1ae>
 8003856:	6121      	str	r1, [r4, #16]
 8003858:	b913      	cbnz	r3, 8003860 <_printf_float+0x1a0>
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	07d0      	lsls	r0, r2, #31
 800385e:	d502      	bpl.n	8003866 <_printf_float+0x1a6>
 8003860:	3301      	adds	r3, #1
 8003862:	440b      	add	r3, r1
 8003864:	6123      	str	r3, [r4, #16]
 8003866:	65a1      	str	r1, [r4, #88]	; 0x58
 8003868:	f04f 0900 	mov.w	r9, #0
 800386c:	e7de      	b.n	800382c <_printf_float+0x16c>
 800386e:	b913      	cbnz	r3, 8003876 <_printf_float+0x1b6>
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	07d2      	lsls	r2, r2, #31
 8003874:	d501      	bpl.n	800387a <_printf_float+0x1ba>
 8003876:	3302      	adds	r3, #2
 8003878:	e7f4      	b.n	8003864 <_printf_float+0x1a4>
 800387a:	2301      	movs	r3, #1
 800387c:	e7f2      	b.n	8003864 <_printf_float+0x1a4>
 800387e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003884:	4299      	cmp	r1, r3
 8003886:	db05      	blt.n	8003894 <_printf_float+0x1d4>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	6121      	str	r1, [r4, #16]
 800388c:	07d8      	lsls	r0, r3, #31
 800388e:	d5ea      	bpl.n	8003866 <_printf_float+0x1a6>
 8003890:	1c4b      	adds	r3, r1, #1
 8003892:	e7e7      	b.n	8003864 <_printf_float+0x1a4>
 8003894:	2900      	cmp	r1, #0
 8003896:	bfd4      	ite	le
 8003898:	f1c1 0202 	rsble	r2, r1, #2
 800389c:	2201      	movgt	r2, #1
 800389e:	4413      	add	r3, r2
 80038a0:	e7e0      	b.n	8003864 <_printf_float+0x1a4>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	055a      	lsls	r2, r3, #21
 80038a6:	d407      	bmi.n	80038b8 <_printf_float+0x1f8>
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	4642      	mov	r2, r8
 80038ac:	4631      	mov	r1, r6
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b8      	blx	r7
 80038b2:	3001      	adds	r0, #1
 80038b4:	d12c      	bne.n	8003910 <_printf_float+0x250>
 80038b6:	e764      	b.n	8003782 <_printf_float+0xc2>
 80038b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80038bc:	f240 80e0 	bls.w	8003a80 <_printf_float+0x3c0>
 80038c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038c4:	2200      	movs	r2, #0
 80038c6:	2300      	movs	r3, #0
 80038c8:	f7fd f916 	bl	8000af8 <__aeabi_dcmpeq>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d034      	beq.n	800393a <_printf_float+0x27a>
 80038d0:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <_printf_float+0x2f0>)
 80038d2:	2301      	movs	r3, #1
 80038d4:	4631      	mov	r1, r6
 80038d6:	4628      	mov	r0, r5
 80038d8:	47b8      	blx	r7
 80038da:	3001      	adds	r0, #1
 80038dc:	f43f af51 	beq.w	8003782 <_printf_float+0xc2>
 80038e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038e4:	429a      	cmp	r2, r3
 80038e6:	db02      	blt.n	80038ee <_printf_float+0x22e>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	07d8      	lsls	r0, r3, #31
 80038ec:	d510      	bpl.n	8003910 <_printf_float+0x250>
 80038ee:	ee18 3a10 	vmov	r3, s16
 80038f2:	4652      	mov	r2, sl
 80038f4:	4631      	mov	r1, r6
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	3001      	adds	r0, #1
 80038fc:	f43f af41 	beq.w	8003782 <_printf_float+0xc2>
 8003900:	f04f 0800 	mov.w	r8, #0
 8003904:	f104 091a 	add.w	r9, r4, #26
 8003908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	4543      	cmp	r3, r8
 800390e:	dc09      	bgt.n	8003924 <_printf_float+0x264>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	079b      	lsls	r3, r3, #30
 8003914:	f100 8105 	bmi.w	8003b22 <_printf_float+0x462>
 8003918:	68e0      	ldr	r0, [r4, #12]
 800391a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800391c:	4298      	cmp	r0, r3
 800391e:	bfb8      	it	lt
 8003920:	4618      	movlt	r0, r3
 8003922:	e730      	b.n	8003786 <_printf_float+0xc6>
 8003924:	2301      	movs	r3, #1
 8003926:	464a      	mov	r2, r9
 8003928:	4631      	mov	r1, r6
 800392a:	4628      	mov	r0, r5
 800392c:	47b8      	blx	r7
 800392e:	3001      	adds	r0, #1
 8003930:	f43f af27 	beq.w	8003782 <_printf_float+0xc2>
 8003934:	f108 0801 	add.w	r8, r8, #1
 8003938:	e7e6      	b.n	8003908 <_printf_float+0x248>
 800393a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	dc39      	bgt.n	80039b4 <_printf_float+0x2f4>
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <_printf_float+0x2f0>)
 8003942:	2301      	movs	r3, #1
 8003944:	4631      	mov	r1, r6
 8003946:	4628      	mov	r0, r5
 8003948:	47b8      	blx	r7
 800394a:	3001      	adds	r0, #1
 800394c:	f43f af19 	beq.w	8003782 <_printf_float+0xc2>
 8003950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003954:	4313      	orrs	r3, r2
 8003956:	d102      	bne.n	800395e <_printf_float+0x29e>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	07d9      	lsls	r1, r3, #31
 800395c:	d5d8      	bpl.n	8003910 <_printf_float+0x250>
 800395e:	ee18 3a10 	vmov	r3, s16
 8003962:	4652      	mov	r2, sl
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	47b8      	blx	r7
 800396a:	3001      	adds	r0, #1
 800396c:	f43f af09 	beq.w	8003782 <_printf_float+0xc2>
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	f104 0a1a 	add.w	sl, r4, #26
 8003978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800397a:	425b      	negs	r3, r3
 800397c:	454b      	cmp	r3, r9
 800397e:	dc01      	bgt.n	8003984 <_printf_float+0x2c4>
 8003980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003982:	e792      	b.n	80038aa <_printf_float+0x1ea>
 8003984:	2301      	movs	r3, #1
 8003986:	4652      	mov	r2, sl
 8003988:	4631      	mov	r1, r6
 800398a:	4628      	mov	r0, r5
 800398c:	47b8      	blx	r7
 800398e:	3001      	adds	r0, #1
 8003990:	f43f aef7 	beq.w	8003782 <_printf_float+0xc2>
 8003994:	f109 0901 	add.w	r9, r9, #1
 8003998:	e7ee      	b.n	8003978 <_printf_float+0x2b8>
 800399a:	bf00      	nop
 800399c:	7fefffff 	.word	0x7fefffff
 80039a0:	08008d08 	.word	0x08008d08
 80039a4:	08008d0c 	.word	0x08008d0c
 80039a8:	08008d14 	.word	0x08008d14
 80039ac:	08008d10 	.word	0x08008d10
 80039b0:	08009109 	.word	0x08009109
 80039b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039b8:	429a      	cmp	r2, r3
 80039ba:	bfa8      	it	ge
 80039bc:	461a      	movge	r2, r3
 80039be:	2a00      	cmp	r2, #0
 80039c0:	4691      	mov	r9, r2
 80039c2:	dc37      	bgt.n	8003a34 <_printf_float+0x374>
 80039c4:	f04f 0b00 	mov.w	fp, #0
 80039c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039cc:	f104 021a 	add.w	r2, r4, #26
 80039d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039d2:	9305      	str	r3, [sp, #20]
 80039d4:	eba3 0309 	sub.w	r3, r3, r9
 80039d8:	455b      	cmp	r3, fp
 80039da:	dc33      	bgt.n	8003a44 <_printf_float+0x384>
 80039dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039e0:	429a      	cmp	r2, r3
 80039e2:	db3b      	blt.n	8003a5c <_printf_float+0x39c>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	07da      	lsls	r2, r3, #31
 80039e8:	d438      	bmi.n	8003a5c <_printf_float+0x39c>
 80039ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ec:	9a05      	ldr	r2, [sp, #20]
 80039ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039f0:	1a9a      	subs	r2, r3, r2
 80039f2:	eba3 0901 	sub.w	r9, r3, r1
 80039f6:	4591      	cmp	r9, r2
 80039f8:	bfa8      	it	ge
 80039fa:	4691      	movge	r9, r2
 80039fc:	f1b9 0f00 	cmp.w	r9, #0
 8003a00:	dc35      	bgt.n	8003a6e <_printf_float+0x3ae>
 8003a02:	f04f 0800 	mov.w	r8, #0
 8003a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a0a:	f104 0a1a 	add.w	sl, r4, #26
 8003a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	eba3 0309 	sub.w	r3, r3, r9
 8003a18:	4543      	cmp	r3, r8
 8003a1a:	f77f af79 	ble.w	8003910 <_printf_float+0x250>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4652      	mov	r2, sl
 8003a22:	4631      	mov	r1, r6
 8003a24:	4628      	mov	r0, r5
 8003a26:	47b8      	blx	r7
 8003a28:	3001      	adds	r0, #1
 8003a2a:	f43f aeaa 	beq.w	8003782 <_printf_float+0xc2>
 8003a2e:	f108 0801 	add.w	r8, r8, #1
 8003a32:	e7ec      	b.n	8003a0e <_printf_float+0x34e>
 8003a34:	4613      	mov	r3, r2
 8003a36:	4631      	mov	r1, r6
 8003a38:	4642      	mov	r2, r8
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	47b8      	blx	r7
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d1c0      	bne.n	80039c4 <_printf_float+0x304>
 8003a42:	e69e      	b.n	8003782 <_printf_float+0xc2>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	9205      	str	r2, [sp, #20]
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	f43f ae97 	beq.w	8003782 <_printf_float+0xc2>
 8003a54:	9a05      	ldr	r2, [sp, #20]
 8003a56:	f10b 0b01 	add.w	fp, fp, #1
 8003a5a:	e7b9      	b.n	80039d0 <_printf_float+0x310>
 8003a5c:	ee18 3a10 	vmov	r3, s16
 8003a60:	4652      	mov	r2, sl
 8003a62:	4631      	mov	r1, r6
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b8      	blx	r7
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d1be      	bne.n	80039ea <_printf_float+0x32a>
 8003a6c:	e689      	b.n	8003782 <_printf_float+0xc2>
 8003a6e:	9a05      	ldr	r2, [sp, #20]
 8003a70:	464b      	mov	r3, r9
 8003a72:	4442      	add	r2, r8
 8003a74:	4631      	mov	r1, r6
 8003a76:	4628      	mov	r0, r5
 8003a78:	47b8      	blx	r7
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d1c1      	bne.n	8003a02 <_printf_float+0x342>
 8003a7e:	e680      	b.n	8003782 <_printf_float+0xc2>
 8003a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a82:	2a01      	cmp	r2, #1
 8003a84:	dc01      	bgt.n	8003a8a <_printf_float+0x3ca>
 8003a86:	07db      	lsls	r3, r3, #31
 8003a88:	d538      	bpl.n	8003afc <_printf_float+0x43c>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	4631      	mov	r1, r6
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b8      	blx	r7
 8003a94:	3001      	adds	r0, #1
 8003a96:	f43f ae74 	beq.w	8003782 <_printf_float+0xc2>
 8003a9a:	ee18 3a10 	vmov	r3, s16
 8003a9e:	4652      	mov	r2, sl
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	47b8      	blx	r7
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	f43f ae6b 	beq.w	8003782 <_printf_float+0xc2>
 8003aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f7fd f820 	bl	8000af8 <__aeabi_dcmpeq>
 8003ab8:	b9d8      	cbnz	r0, 8003af2 <_printf_float+0x432>
 8003aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003abc:	f108 0201 	add.w	r2, r8, #1
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d10e      	bne.n	8003aea <_printf_float+0x42a>
 8003acc:	e659      	b.n	8003782 <_printf_float+0xc2>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4652      	mov	r2, sl
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	47b8      	blx	r7
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f43f ae52 	beq.w	8003782 <_printf_float+0xc2>
 8003ade:	f108 0801 	add.w	r8, r8, #1
 8003ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	4543      	cmp	r3, r8
 8003ae8:	dcf1      	bgt.n	8003ace <_printf_float+0x40e>
 8003aea:	464b      	mov	r3, r9
 8003aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003af0:	e6dc      	b.n	80038ac <_printf_float+0x1ec>
 8003af2:	f04f 0800 	mov.w	r8, #0
 8003af6:	f104 0a1a 	add.w	sl, r4, #26
 8003afa:	e7f2      	b.n	8003ae2 <_printf_float+0x422>
 8003afc:	2301      	movs	r3, #1
 8003afe:	4642      	mov	r2, r8
 8003b00:	e7df      	b.n	8003ac2 <_printf_float+0x402>
 8003b02:	2301      	movs	r3, #1
 8003b04:	464a      	mov	r2, r9
 8003b06:	4631      	mov	r1, r6
 8003b08:	4628      	mov	r0, r5
 8003b0a:	47b8      	blx	r7
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f43f ae38 	beq.w	8003782 <_printf_float+0xc2>
 8003b12:	f108 0801 	add.w	r8, r8, #1
 8003b16:	68e3      	ldr	r3, [r4, #12]
 8003b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b1a:	1a5b      	subs	r3, r3, r1
 8003b1c:	4543      	cmp	r3, r8
 8003b1e:	dcf0      	bgt.n	8003b02 <_printf_float+0x442>
 8003b20:	e6fa      	b.n	8003918 <_printf_float+0x258>
 8003b22:	f04f 0800 	mov.w	r8, #0
 8003b26:	f104 0919 	add.w	r9, r4, #25
 8003b2a:	e7f4      	b.n	8003b16 <_printf_float+0x456>

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4616      	mov	r6, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	bfb8      	it	lt
 8003b40:	4613      	movlt	r3, r2
 8003b42:	6033      	str	r3, [r6, #0]
 8003b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b48:	4607      	mov	r7, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	b10a      	cbz	r2, 8003b52 <_printf_common+0x26>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0699      	lsls	r1, r3, #26
 8003b56:	bf42      	ittt	mi
 8003b58:	6833      	ldrmi	r3, [r6, #0]
 8003b5a:	3302      	addmi	r3, #2
 8003b5c:	6033      	strmi	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d106      	bne.n	8003b74 <_printf_common+0x48>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc26      	bgt.n	8003bc2 <_printf_common+0x96>
 8003b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b78:	1e13      	subs	r3, r2, #0
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d42b      	bmi.n	8003bdc <_printf_common+0xb0>
 8003b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d01e      	beq.n	8003bd0 <_printf_common+0xa4>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	68e5      	ldr	r5, [r4, #12]
 8003b96:	6832      	ldr	r2, [r6, #0]
 8003b98:	f003 0306 	and.w	r3, r3, #6
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	bf08      	it	eq
 8003ba0:	1aad      	subeq	r5, r5, r2
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	6922      	ldr	r2, [r4, #16]
 8003ba6:	bf0c      	ite	eq
 8003ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bac:	2500      	movne	r5, #0
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	bfc4      	itt	gt
 8003bb2:	1a9b      	subgt	r3, r3, r2
 8003bb4:	18ed      	addgt	r5, r5, r3
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	341a      	adds	r4, #26
 8003bba:	42b5      	cmp	r5, r6
 8003bbc:	d11a      	bne.n	8003bf4 <_printf_common+0xc8>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e008      	b.n	8003bd4 <_printf_common+0xa8>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4652      	mov	r2, sl
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4638      	mov	r0, r7
 8003bca:	47c0      	blx	r8
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d103      	bne.n	8003bd8 <_printf_common+0xac>
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	3501      	adds	r5, #1
 8003bda:	e7c6      	b.n	8003b6a <_printf_common+0x3e>
 8003bdc:	18e1      	adds	r1, r4, r3
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	2030      	movs	r0, #48	; 0x30
 8003be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be6:	4422      	add	r2, r4
 8003be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	e7c7      	b.n	8003b84 <_printf_common+0x58>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	47c0      	blx	r8
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d0e6      	beq.n	8003bd0 <_printf_common+0xa4>
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7d9      	b.n	8003bba <_printf_common+0x8e>
	...

08003c08 <_printf_i>:
 8003c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	7e0f      	ldrb	r7, [r1, #24]
 8003c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c10:	2f78      	cmp	r7, #120	; 0x78
 8003c12:	4691      	mov	r9, r2
 8003c14:	4680      	mov	r8, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	469a      	mov	sl, r3
 8003c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c1e:	d807      	bhi.n	8003c30 <_printf_i+0x28>
 8003c20:	2f62      	cmp	r7, #98	; 0x62
 8003c22:	d80a      	bhi.n	8003c3a <_printf_i+0x32>
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	f000 80d8 	beq.w	8003dda <_printf_i+0x1d2>
 8003c2a:	2f58      	cmp	r7, #88	; 0x58
 8003c2c:	f000 80a3 	beq.w	8003d76 <_printf_i+0x16e>
 8003c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c38:	e03a      	b.n	8003cb0 <_printf_i+0xa8>
 8003c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c3e:	2b15      	cmp	r3, #21
 8003c40:	d8f6      	bhi.n	8003c30 <_printf_i+0x28>
 8003c42:	a101      	add	r1, pc, #4	; (adr r1, 8003c48 <_printf_i+0x40>)
 8003c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c48:	08003ca1 	.word	0x08003ca1
 8003c4c:	08003cb5 	.word	0x08003cb5
 8003c50:	08003c31 	.word	0x08003c31
 8003c54:	08003c31 	.word	0x08003c31
 8003c58:	08003c31 	.word	0x08003c31
 8003c5c:	08003c31 	.word	0x08003c31
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003c31 	.word	0x08003c31
 8003c68:	08003c31 	.word	0x08003c31
 8003c6c:	08003c31 	.word	0x08003c31
 8003c70:	08003c31 	.word	0x08003c31
 8003c74:	08003dc1 	.word	0x08003dc1
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003da3 	.word	0x08003da3
 8003c80:	08003c31 	.word	0x08003c31
 8003c84:	08003c31 	.word	0x08003c31
 8003c88:	08003de3 	.word	0x08003de3
 8003c8c:	08003c31 	.word	0x08003c31
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003c31 	.word	0x08003c31
 8003c98:	08003c31 	.word	0x08003c31
 8003c9c:	08003dab 	.word	0x08003dab
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	602a      	str	r2, [r5, #0]
 8003ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0a3      	b.n	8003dfc <_printf_i+0x1f4>
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	6829      	ldr	r1, [r5, #0]
 8003cb8:	0606      	lsls	r6, r0, #24
 8003cba:	f101 0304 	add.w	r3, r1, #4
 8003cbe:	d50a      	bpl.n	8003cd6 <_printf_i+0xce>
 8003cc0:	680e      	ldr	r6, [r1, #0]
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	da03      	bge.n	8003cd0 <_printf_i+0xc8>
 8003cc8:	232d      	movs	r3, #45	; 0x2d
 8003cca:	4276      	negs	r6, r6
 8003ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd0:	485e      	ldr	r0, [pc, #376]	; (8003e4c <_printf_i+0x244>)
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	e019      	b.n	8003d0a <_printf_i+0x102>
 8003cd6:	680e      	ldr	r6, [r1, #0]
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cde:	bf18      	it	ne
 8003ce0:	b236      	sxthne	r6, r6
 8003ce2:	e7ef      	b.n	8003cc4 <_printf_i+0xbc>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	1d19      	adds	r1, r3, #4
 8003cea:	6029      	str	r1, [r5, #0]
 8003cec:	0601      	lsls	r1, r0, #24
 8003cee:	d501      	bpl.n	8003cf4 <_printf_i+0xec>
 8003cf0:	681e      	ldr	r6, [r3, #0]
 8003cf2:	e002      	b.n	8003cfa <_printf_i+0xf2>
 8003cf4:	0646      	lsls	r6, r0, #25
 8003cf6:	d5fb      	bpl.n	8003cf0 <_printf_i+0xe8>
 8003cf8:	881e      	ldrh	r6, [r3, #0]
 8003cfa:	4854      	ldr	r0, [pc, #336]	; (8003e4c <_printf_i+0x244>)
 8003cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8003cfe:	bf0c      	ite	eq
 8003d00:	2308      	moveq	r3, #8
 8003d02:	230a      	movne	r3, #10
 8003d04:	2100      	movs	r1, #0
 8003d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0a:	6865      	ldr	r5, [r4, #4]
 8003d0c:	60a5      	str	r5, [r4, #8]
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	bfa2      	ittt	ge
 8003d12:	6821      	ldrge	r1, [r4, #0]
 8003d14:	f021 0104 	bicge.w	r1, r1, #4
 8003d18:	6021      	strge	r1, [r4, #0]
 8003d1a:	b90e      	cbnz	r6, 8003d20 <_printf_i+0x118>
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	d04d      	beq.n	8003dbc <_printf_i+0x1b4>
 8003d20:	4615      	mov	r5, r2
 8003d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d26:	fb03 6711 	mls	r7, r3, r1, r6
 8003d2a:	5dc7      	ldrb	r7, [r0, r7]
 8003d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d30:	4637      	mov	r7, r6
 8003d32:	42bb      	cmp	r3, r7
 8003d34:	460e      	mov	r6, r1
 8003d36:	d9f4      	bls.n	8003d22 <_printf_i+0x11a>
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d10b      	bne.n	8003d54 <_printf_i+0x14c>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	07de      	lsls	r6, r3, #31
 8003d40:	d508      	bpl.n	8003d54 <_printf_i+0x14c>
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	6861      	ldr	r1, [r4, #4]
 8003d46:	4299      	cmp	r1, r3
 8003d48:	bfde      	ittt	le
 8003d4a:	2330      	movle	r3, #48	; 0x30
 8003d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d54:	1b52      	subs	r2, r2, r5
 8003d56:	6122      	str	r2, [r4, #16]
 8003d58:	f8cd a000 	str.w	sl, [sp]
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	aa03      	add	r2, sp, #12
 8003d60:	4621      	mov	r1, r4
 8003d62:	4640      	mov	r0, r8
 8003d64:	f7ff fee2 	bl	8003b2c <_printf_common>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d14c      	bne.n	8003e06 <_printf_i+0x1fe>
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	b004      	add	sp, #16
 8003d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d76:	4835      	ldr	r0, [pc, #212]	; (8003e4c <_printf_i+0x244>)
 8003d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d7c:	6829      	ldr	r1, [r5, #0]
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d84:	6029      	str	r1, [r5, #0]
 8003d86:	061d      	lsls	r5, r3, #24
 8003d88:	d514      	bpl.n	8003db4 <_printf_i+0x1ac>
 8003d8a:	07df      	lsls	r7, r3, #31
 8003d8c:	bf44      	itt	mi
 8003d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d92:	6023      	strmi	r3, [r4, #0]
 8003d94:	b91e      	cbnz	r6, 8003d9e <_printf_i+0x196>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f023 0320 	bic.w	r3, r3, #32
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	2310      	movs	r3, #16
 8003da0:	e7b0      	b.n	8003d04 <_printf_i+0xfc>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f043 0320 	orr.w	r3, r3, #32
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	2378      	movs	r3, #120	; 0x78
 8003dac:	4828      	ldr	r0, [pc, #160]	; (8003e50 <_printf_i+0x248>)
 8003dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db2:	e7e3      	b.n	8003d7c <_printf_i+0x174>
 8003db4:	0659      	lsls	r1, r3, #25
 8003db6:	bf48      	it	mi
 8003db8:	b2b6      	uxthmi	r6, r6
 8003dba:	e7e6      	b.n	8003d8a <_printf_i+0x182>
 8003dbc:	4615      	mov	r5, r2
 8003dbe:	e7bb      	b.n	8003d38 <_printf_i+0x130>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	6826      	ldr	r6, [r4, #0]
 8003dc4:	6961      	ldr	r1, [r4, #20]
 8003dc6:	1d18      	adds	r0, r3, #4
 8003dc8:	6028      	str	r0, [r5, #0]
 8003dca:	0635      	lsls	r5, r6, #24
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0x1cc>
 8003dd0:	6019      	str	r1, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0x1d2>
 8003dd4:	0670      	lsls	r0, r6, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0x1c8>
 8003dd8:	8019      	strh	r1, [r3, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	4615      	mov	r5, r2
 8003de0:	e7ba      	b.n	8003d58 <_printf_i+0x150>
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	602a      	str	r2, [r5, #0]
 8003de8:	681d      	ldr	r5, [r3, #0]
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	2100      	movs	r1, #0
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7fc fa0e 	bl	8000210 <memchr>
 8003df4:	b108      	cbz	r0, 8003dfa <_printf_i+0x1f2>
 8003df6:	1b40      	subs	r0, r0, r5
 8003df8:	6060      	str	r0, [r4, #4]
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	6123      	str	r3, [r4, #16]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e04:	e7a8      	b.n	8003d58 <_printf_i+0x150>
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	47d0      	blx	sl
 8003e10:	3001      	adds	r0, #1
 8003e12:	d0ab      	beq.n	8003d6c <_printf_i+0x164>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	079b      	lsls	r3, r3, #30
 8003e18:	d413      	bmi.n	8003e42 <_printf_i+0x23a>
 8003e1a:	68e0      	ldr	r0, [r4, #12]
 8003e1c:	9b03      	ldr	r3, [sp, #12]
 8003e1e:	4298      	cmp	r0, r3
 8003e20:	bfb8      	it	lt
 8003e22:	4618      	movlt	r0, r3
 8003e24:	e7a4      	b.n	8003d70 <_printf_i+0x168>
 8003e26:	2301      	movs	r3, #1
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	47d0      	blx	sl
 8003e30:	3001      	adds	r0, #1
 8003e32:	d09b      	beq.n	8003d6c <_printf_i+0x164>
 8003e34:	3501      	adds	r5, #1
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	9903      	ldr	r1, [sp, #12]
 8003e3a:	1a5b      	subs	r3, r3, r1
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	dcf2      	bgt.n	8003e26 <_printf_i+0x21e>
 8003e40:	e7eb      	b.n	8003e1a <_printf_i+0x212>
 8003e42:	2500      	movs	r5, #0
 8003e44:	f104 0619 	add.w	r6, r4, #25
 8003e48:	e7f5      	b.n	8003e36 <_printf_i+0x22e>
 8003e4a:	bf00      	nop
 8003e4c:	08008d18 	.word	0x08008d18
 8003e50:	08008d29 	.word	0x08008d29

08003e54 <_scanf_float>:
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	b087      	sub	sp, #28
 8003e5a:	4617      	mov	r7, r2
 8003e5c:	9303      	str	r3, [sp, #12]
 8003e5e:	688b      	ldr	r3, [r1, #8]
 8003e60:	1e5a      	subs	r2, r3, #1
 8003e62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003e66:	bf83      	ittte	hi
 8003e68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003e6c:	195b      	addhi	r3, r3, r5
 8003e6e:	9302      	strhi	r3, [sp, #8]
 8003e70:	2300      	movls	r3, #0
 8003e72:	bf86      	itte	hi
 8003e74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003e78:	608b      	strhi	r3, [r1, #8]
 8003e7a:	9302      	strls	r3, [sp, #8]
 8003e7c:	680b      	ldr	r3, [r1, #0]
 8003e7e:	468b      	mov	fp, r1
 8003e80:	2500      	movs	r5, #0
 8003e82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003e86:	f84b 3b1c 	str.w	r3, [fp], #28
 8003e8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003e8e:	4680      	mov	r8, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	465e      	mov	r6, fp
 8003e94:	46aa      	mov	sl, r5
 8003e96:	46a9      	mov	r9, r5
 8003e98:	9501      	str	r5, [sp, #4]
 8003e9a:	68a2      	ldr	r2, [r4, #8]
 8003e9c:	b152      	cbz	r2, 8003eb4 <_scanf_float+0x60>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8003ea4:	d864      	bhi.n	8003f70 <_scanf_float+0x11c>
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d83c      	bhi.n	8003f24 <_scanf_float+0xd0>
 8003eaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003eae:	b2c8      	uxtb	r0, r1
 8003eb0:	280e      	cmp	r0, #14
 8003eb2:	d93a      	bls.n	8003f2a <_scanf_float+0xd6>
 8003eb4:	f1b9 0f00 	cmp.w	r9, #0
 8003eb8:	d003      	beq.n	8003ec2 <_scanf_float+0x6e>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ec6:	f1ba 0f01 	cmp.w	sl, #1
 8003eca:	f200 8113 	bhi.w	80040f4 <_scanf_float+0x2a0>
 8003ece:	455e      	cmp	r6, fp
 8003ed0:	f200 8105 	bhi.w	80040de <_scanf_float+0x28a>
 8003ed4:	2501      	movs	r5, #1
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	b007      	add	sp, #28
 8003eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ede:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003ee2:	2a0d      	cmp	r2, #13
 8003ee4:	d8e6      	bhi.n	8003eb4 <_scanf_float+0x60>
 8003ee6:	a101      	add	r1, pc, #4	; (adr r1, 8003eec <_scanf_float+0x98>)
 8003ee8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003eec:	0800402b 	.word	0x0800402b
 8003ef0:	08003eb5 	.word	0x08003eb5
 8003ef4:	08003eb5 	.word	0x08003eb5
 8003ef8:	08003eb5 	.word	0x08003eb5
 8003efc:	0800408b 	.word	0x0800408b
 8003f00:	08004063 	.word	0x08004063
 8003f04:	08003eb5 	.word	0x08003eb5
 8003f08:	08003eb5 	.word	0x08003eb5
 8003f0c:	08004039 	.word	0x08004039
 8003f10:	08003eb5 	.word	0x08003eb5
 8003f14:	08003eb5 	.word	0x08003eb5
 8003f18:	08003eb5 	.word	0x08003eb5
 8003f1c:	08003eb5 	.word	0x08003eb5
 8003f20:	08003ff1 	.word	0x08003ff1
 8003f24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003f28:	e7db      	b.n	8003ee2 <_scanf_float+0x8e>
 8003f2a:	290e      	cmp	r1, #14
 8003f2c:	d8c2      	bhi.n	8003eb4 <_scanf_float+0x60>
 8003f2e:	a001      	add	r0, pc, #4	; (adr r0, 8003f34 <_scanf_float+0xe0>)
 8003f30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003f34:	08003fe3 	.word	0x08003fe3
 8003f38:	08003eb5 	.word	0x08003eb5
 8003f3c:	08003fe3 	.word	0x08003fe3
 8003f40:	08004077 	.word	0x08004077
 8003f44:	08003eb5 	.word	0x08003eb5
 8003f48:	08003f91 	.word	0x08003f91
 8003f4c:	08003fcd 	.word	0x08003fcd
 8003f50:	08003fcd 	.word	0x08003fcd
 8003f54:	08003fcd 	.word	0x08003fcd
 8003f58:	08003fcd 	.word	0x08003fcd
 8003f5c:	08003fcd 	.word	0x08003fcd
 8003f60:	08003fcd 	.word	0x08003fcd
 8003f64:	08003fcd 	.word	0x08003fcd
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08003fcd 	.word	0x08003fcd
 8003f70:	2b6e      	cmp	r3, #110	; 0x6e
 8003f72:	d809      	bhi.n	8003f88 <_scanf_float+0x134>
 8003f74:	2b60      	cmp	r3, #96	; 0x60
 8003f76:	d8b2      	bhi.n	8003ede <_scanf_float+0x8a>
 8003f78:	2b54      	cmp	r3, #84	; 0x54
 8003f7a:	d077      	beq.n	800406c <_scanf_float+0x218>
 8003f7c:	2b59      	cmp	r3, #89	; 0x59
 8003f7e:	d199      	bne.n	8003eb4 <_scanf_float+0x60>
 8003f80:	2d07      	cmp	r5, #7
 8003f82:	d197      	bne.n	8003eb4 <_scanf_float+0x60>
 8003f84:	2508      	movs	r5, #8
 8003f86:	e029      	b.n	8003fdc <_scanf_float+0x188>
 8003f88:	2b74      	cmp	r3, #116	; 0x74
 8003f8a:	d06f      	beq.n	800406c <_scanf_float+0x218>
 8003f8c:	2b79      	cmp	r3, #121	; 0x79
 8003f8e:	e7f6      	b.n	8003f7e <_scanf_float+0x12a>
 8003f90:	6821      	ldr	r1, [r4, #0]
 8003f92:	05c8      	lsls	r0, r1, #23
 8003f94:	d51a      	bpl.n	8003fcc <_scanf_float+0x178>
 8003f96:	9b02      	ldr	r3, [sp, #8]
 8003f98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003f9c:	6021      	str	r1, [r4, #0]
 8003f9e:	f109 0901 	add.w	r9, r9, #1
 8003fa2:	b11b      	cbz	r3, 8003fac <_scanf_float+0x158>
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	3201      	adds	r2, #1
 8003fa8:	9302      	str	r3, [sp, #8]
 8003faa:	60a2      	str	r2, [r4, #8]
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	60a3      	str	r3, [r4, #8]
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	f340 8084 	ble.w	80040cc <_scanf_float+0x278>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	e766      	b.n	8003e9a <_scanf_float+0x46>
 8003fcc:	eb1a 0f05 	cmn.w	sl, r5
 8003fd0:	f47f af70 	bne.w	8003eb4 <_scanf_float+0x60>
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003fda:	6022      	str	r2, [r4, #0]
 8003fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8003fe0:	e7e4      	b.n	8003fac <_scanf_float+0x158>
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	0610      	lsls	r0, r2, #24
 8003fe6:	f57f af65 	bpl.w	8003eb4 <_scanf_float+0x60>
 8003fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fee:	e7f4      	b.n	8003fda <_scanf_float+0x186>
 8003ff0:	f1ba 0f00 	cmp.w	sl, #0
 8003ff4:	d10e      	bne.n	8004014 <_scanf_float+0x1c0>
 8003ff6:	f1b9 0f00 	cmp.w	r9, #0
 8003ffa:	d10e      	bne.n	800401a <_scanf_float+0x1c6>
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004002:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004006:	d108      	bne.n	800401a <_scanf_float+0x1c6>
 8004008:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800400c:	6022      	str	r2, [r4, #0]
 800400e:	f04f 0a01 	mov.w	sl, #1
 8004012:	e7e3      	b.n	8003fdc <_scanf_float+0x188>
 8004014:	f1ba 0f02 	cmp.w	sl, #2
 8004018:	d055      	beq.n	80040c6 <_scanf_float+0x272>
 800401a:	2d01      	cmp	r5, #1
 800401c:	d002      	beq.n	8004024 <_scanf_float+0x1d0>
 800401e:	2d04      	cmp	r5, #4
 8004020:	f47f af48 	bne.w	8003eb4 <_scanf_float+0x60>
 8004024:	3501      	adds	r5, #1
 8004026:	b2ed      	uxtb	r5, r5
 8004028:	e7d8      	b.n	8003fdc <_scanf_float+0x188>
 800402a:	f1ba 0f01 	cmp.w	sl, #1
 800402e:	f47f af41 	bne.w	8003eb4 <_scanf_float+0x60>
 8004032:	f04f 0a02 	mov.w	sl, #2
 8004036:	e7d1      	b.n	8003fdc <_scanf_float+0x188>
 8004038:	b97d      	cbnz	r5, 800405a <_scanf_float+0x206>
 800403a:	f1b9 0f00 	cmp.w	r9, #0
 800403e:	f47f af3c 	bne.w	8003eba <_scanf_float+0x66>
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004048:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800404c:	f47f af39 	bne.w	8003ec2 <_scanf_float+0x6e>
 8004050:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004054:	6022      	str	r2, [r4, #0]
 8004056:	2501      	movs	r5, #1
 8004058:	e7c0      	b.n	8003fdc <_scanf_float+0x188>
 800405a:	2d03      	cmp	r5, #3
 800405c:	d0e2      	beq.n	8004024 <_scanf_float+0x1d0>
 800405e:	2d05      	cmp	r5, #5
 8004060:	e7de      	b.n	8004020 <_scanf_float+0x1cc>
 8004062:	2d02      	cmp	r5, #2
 8004064:	f47f af26 	bne.w	8003eb4 <_scanf_float+0x60>
 8004068:	2503      	movs	r5, #3
 800406a:	e7b7      	b.n	8003fdc <_scanf_float+0x188>
 800406c:	2d06      	cmp	r5, #6
 800406e:	f47f af21 	bne.w	8003eb4 <_scanf_float+0x60>
 8004072:	2507      	movs	r5, #7
 8004074:	e7b2      	b.n	8003fdc <_scanf_float+0x188>
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	0591      	lsls	r1, r2, #22
 800407a:	f57f af1b 	bpl.w	8003eb4 <_scanf_float+0x60>
 800407e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004082:	6022      	str	r2, [r4, #0]
 8004084:	f8cd 9004 	str.w	r9, [sp, #4]
 8004088:	e7a8      	b.n	8003fdc <_scanf_float+0x188>
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004090:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004094:	d006      	beq.n	80040a4 <_scanf_float+0x250>
 8004096:	0550      	lsls	r0, r2, #21
 8004098:	f57f af0c 	bpl.w	8003eb4 <_scanf_float+0x60>
 800409c:	f1b9 0f00 	cmp.w	r9, #0
 80040a0:	f43f af0f 	beq.w	8003ec2 <_scanf_float+0x6e>
 80040a4:	0591      	lsls	r1, r2, #22
 80040a6:	bf58      	it	pl
 80040a8:	9901      	ldrpl	r1, [sp, #4]
 80040aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80040ae:	bf58      	it	pl
 80040b0:	eba9 0101 	subpl.w	r1, r9, r1
 80040b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80040b8:	bf58      	it	pl
 80040ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80040be:	6022      	str	r2, [r4, #0]
 80040c0:	f04f 0900 	mov.w	r9, #0
 80040c4:	e78a      	b.n	8003fdc <_scanf_float+0x188>
 80040c6:	f04f 0a03 	mov.w	sl, #3
 80040ca:	e787      	b.n	8003fdc <_scanf_float+0x188>
 80040cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80040d0:	4639      	mov	r1, r7
 80040d2:	4640      	mov	r0, r8
 80040d4:	4798      	blx	r3
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f43f aedf 	beq.w	8003e9a <_scanf_float+0x46>
 80040dc:	e6ea      	b.n	8003eb4 <_scanf_float+0x60>
 80040de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80040e6:	463a      	mov	r2, r7
 80040e8:	4640      	mov	r0, r8
 80040ea:	4798      	blx	r3
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	6123      	str	r3, [r4, #16]
 80040f2:	e6ec      	b.n	8003ece <_scanf_float+0x7a>
 80040f4:	1e6b      	subs	r3, r5, #1
 80040f6:	2b06      	cmp	r3, #6
 80040f8:	d825      	bhi.n	8004146 <_scanf_float+0x2f2>
 80040fa:	2d02      	cmp	r5, #2
 80040fc:	d836      	bhi.n	800416c <_scanf_float+0x318>
 80040fe:	455e      	cmp	r6, fp
 8004100:	f67f aee8 	bls.w	8003ed4 <_scanf_float+0x80>
 8004104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004108:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800410c:	463a      	mov	r2, r7
 800410e:	4640      	mov	r0, r8
 8004110:	4798      	blx	r3
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	3b01      	subs	r3, #1
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	e7f1      	b.n	80040fe <_scanf_float+0x2aa>
 800411a:	9802      	ldr	r0, [sp, #8]
 800411c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004120:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004124:	9002      	str	r0, [sp, #8]
 8004126:	463a      	mov	r2, r7
 8004128:	4640      	mov	r0, r8
 800412a:	4798      	blx	r3
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	3b01      	subs	r3, #1
 8004130:	6123      	str	r3, [r4, #16]
 8004132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004136:	fa5f fa8a 	uxtb.w	sl, sl
 800413a:	f1ba 0f02 	cmp.w	sl, #2
 800413e:	d1ec      	bne.n	800411a <_scanf_float+0x2c6>
 8004140:	3d03      	subs	r5, #3
 8004142:	b2ed      	uxtb	r5, r5
 8004144:	1b76      	subs	r6, r6, r5
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	05da      	lsls	r2, r3, #23
 800414a:	d52f      	bpl.n	80041ac <_scanf_float+0x358>
 800414c:	055b      	lsls	r3, r3, #21
 800414e:	d510      	bpl.n	8004172 <_scanf_float+0x31e>
 8004150:	455e      	cmp	r6, fp
 8004152:	f67f aebf 	bls.w	8003ed4 <_scanf_float+0x80>
 8004156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800415a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800415e:	463a      	mov	r2, r7
 8004160:	4640      	mov	r0, r8
 8004162:	4798      	blx	r3
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	3b01      	subs	r3, #1
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	e7f1      	b.n	8004150 <_scanf_float+0x2fc>
 800416c:	46aa      	mov	sl, r5
 800416e:	9602      	str	r6, [sp, #8]
 8004170:	e7df      	b.n	8004132 <_scanf_float+0x2de>
 8004172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004176:	6923      	ldr	r3, [r4, #16]
 8004178:	2965      	cmp	r1, #101	; 0x65
 800417a:	f103 33ff 	add.w	r3, r3, #4294967295
 800417e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	d00c      	beq.n	80041a0 <_scanf_float+0x34c>
 8004186:	2945      	cmp	r1, #69	; 0x45
 8004188:	d00a      	beq.n	80041a0 <_scanf_float+0x34c>
 800418a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800418e:	463a      	mov	r2, r7
 8004190:	4640      	mov	r0, r8
 8004192:	4798      	blx	r3
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800419a:	3b01      	subs	r3, #1
 800419c:	1eb5      	subs	r5, r6, #2
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041a4:	463a      	mov	r2, r7
 80041a6:	4640      	mov	r0, r8
 80041a8:	4798      	blx	r3
 80041aa:	462e      	mov	r6, r5
 80041ac:	6825      	ldr	r5, [r4, #0]
 80041ae:	f015 0510 	ands.w	r5, r5, #16
 80041b2:	d159      	bne.n	8004268 <_scanf_float+0x414>
 80041b4:	7035      	strb	r5, [r6, #0]
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d11b      	bne.n	80041fa <_scanf_float+0x3a6>
 80041c2:	9b01      	ldr	r3, [sp, #4]
 80041c4:	454b      	cmp	r3, r9
 80041c6:	eba3 0209 	sub.w	r2, r3, r9
 80041ca:	d123      	bne.n	8004214 <_scanf_float+0x3c0>
 80041cc:	2200      	movs	r2, #0
 80041ce:	4659      	mov	r1, fp
 80041d0:	4640      	mov	r0, r8
 80041d2:	f000 ff0b 	bl	8004fec <_strtod_r>
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	f012 0f02 	tst.w	r2, #2
 80041de:	ec57 6b10 	vmov	r6, r7, d0
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	d021      	beq.n	800422a <_scanf_float+0x3d6>
 80041e6:	9903      	ldr	r1, [sp, #12]
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	600a      	str	r2, [r1, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	e9c3 6700 	strd	r6, r7, [r3]
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60e3      	str	r3, [r4, #12]
 80041f8:	e66d      	b.n	8003ed6 <_scanf_float+0x82>
 80041fa:	9b04      	ldr	r3, [sp, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0e5      	beq.n	80041cc <_scanf_float+0x378>
 8004200:	9905      	ldr	r1, [sp, #20]
 8004202:	230a      	movs	r3, #10
 8004204:	462a      	mov	r2, r5
 8004206:	3101      	adds	r1, #1
 8004208:	4640      	mov	r0, r8
 800420a:	f000 ff77 	bl	80050fc <_strtol_r>
 800420e:	9b04      	ldr	r3, [sp, #16]
 8004210:	9e05      	ldr	r6, [sp, #20]
 8004212:	1ac2      	subs	r2, r0, r3
 8004214:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004218:	429e      	cmp	r6, r3
 800421a:	bf28      	it	cs
 800421c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004220:	4912      	ldr	r1, [pc, #72]	; (800426c <_scanf_float+0x418>)
 8004222:	4630      	mov	r0, r6
 8004224:	f000 f82c 	bl	8004280 <siprintf>
 8004228:	e7d0      	b.n	80041cc <_scanf_float+0x378>
 800422a:	9903      	ldr	r1, [sp, #12]
 800422c:	f012 0f04 	tst.w	r2, #4
 8004230:	f103 0204 	add.w	r2, r3, #4
 8004234:	600a      	str	r2, [r1, #0]
 8004236:	d1d9      	bne.n	80041ec <_scanf_float+0x398>
 8004238:	f8d3 8000 	ldr.w	r8, [r3]
 800423c:	ee10 2a10 	vmov	r2, s0
 8004240:	ee10 0a10 	vmov	r0, s0
 8004244:	463b      	mov	r3, r7
 8004246:	4639      	mov	r1, r7
 8004248:	f7fc fc88 	bl	8000b5c <__aeabi_dcmpun>
 800424c:	b128      	cbz	r0, 800425a <_scanf_float+0x406>
 800424e:	4808      	ldr	r0, [pc, #32]	; (8004270 <_scanf_float+0x41c>)
 8004250:	f000 f810 	bl	8004274 <nanf>
 8004254:	ed88 0a00 	vstr	s0, [r8]
 8004258:	e7cb      	b.n	80041f2 <_scanf_float+0x39e>
 800425a:	4630      	mov	r0, r6
 800425c:	4639      	mov	r1, r7
 800425e:	f7fc fcdb 	bl	8000c18 <__aeabi_d2f>
 8004262:	f8c8 0000 	str.w	r0, [r8]
 8004266:	e7c4      	b.n	80041f2 <_scanf_float+0x39e>
 8004268:	2500      	movs	r5, #0
 800426a:	e634      	b.n	8003ed6 <_scanf_float+0x82>
 800426c:	08008d3a 	.word	0x08008d3a
 8004270:	0800915b 	.word	0x0800915b

08004274 <nanf>:
 8004274:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800427c <nanf+0x8>
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	7fc00000 	.word	0x7fc00000

08004280 <siprintf>:
 8004280:	b40e      	push	{r1, r2, r3}
 8004282:	b500      	push	{lr}
 8004284:	b09c      	sub	sp, #112	; 0x70
 8004286:	ab1d      	add	r3, sp, #116	; 0x74
 8004288:	9002      	str	r0, [sp, #8]
 800428a:	9006      	str	r0, [sp, #24]
 800428c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004290:	4809      	ldr	r0, [pc, #36]	; (80042b8 <siprintf+0x38>)
 8004292:	9107      	str	r1, [sp, #28]
 8004294:	9104      	str	r1, [sp, #16]
 8004296:	4909      	ldr	r1, [pc, #36]	; (80042bc <siprintf+0x3c>)
 8004298:	f853 2b04 	ldr.w	r2, [r3], #4
 800429c:	9105      	str	r1, [sp, #20]
 800429e:	6800      	ldr	r0, [r0, #0]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	a902      	add	r1, sp, #8
 80042a4:	f002 ff8c 	bl	80071c0 <_svfiprintf_r>
 80042a8:	9b02      	ldr	r3, [sp, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	b01c      	add	sp, #112	; 0x70
 80042b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b4:	b003      	add	sp, #12
 80042b6:	4770      	bx	lr
 80042b8:	20000004 	.word	0x20000004
 80042bc:	ffff0208 	.word	0xffff0208

080042c0 <siscanf>:
 80042c0:	b40e      	push	{r1, r2, r3}
 80042c2:	b510      	push	{r4, lr}
 80042c4:	b09f      	sub	sp, #124	; 0x7c
 80042c6:	ac21      	add	r4, sp, #132	; 0x84
 80042c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80042cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80042d0:	9201      	str	r2, [sp, #4]
 80042d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80042d6:	9004      	str	r0, [sp, #16]
 80042d8:	9008      	str	r0, [sp, #32]
 80042da:	f7fb ff8b 	bl	80001f4 <strlen>
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <siscanf+0x50>)
 80042e0:	9005      	str	r0, [sp, #20]
 80042e2:	9009      	str	r0, [sp, #36]	; 0x24
 80042e4:	930d      	str	r3, [sp, #52]	; 0x34
 80042e6:	480b      	ldr	r0, [pc, #44]	; (8004314 <siscanf+0x54>)
 80042e8:	9a01      	ldr	r2, [sp, #4]
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	9403      	str	r4, [sp, #12]
 80042ee:	2300      	movs	r3, #0
 80042f0:	9311      	str	r3, [sp, #68]	; 0x44
 80042f2:	9316      	str	r3, [sp, #88]	; 0x58
 80042f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	4623      	mov	r3, r4
 8004300:	f003 f8b8 	bl	8007474 <__ssvfiscanf_r>
 8004304:	b01f      	add	sp, #124	; 0x7c
 8004306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430a:	b003      	add	sp, #12
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	0800433b 	.word	0x0800433b
 8004314:	20000004 	.word	0x20000004

08004318 <__sread>:
 8004318:	b510      	push	{r4, lr}
 800431a:	460c      	mov	r4, r1
 800431c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004320:	f003 fb72 	bl	8007a08 <_read_r>
 8004324:	2800      	cmp	r0, #0
 8004326:	bfab      	itete	ge
 8004328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800432a:	89a3      	ldrhlt	r3, [r4, #12]
 800432c:	181b      	addge	r3, r3, r0
 800432e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004332:	bfac      	ite	ge
 8004334:	6563      	strge	r3, [r4, #84]	; 0x54
 8004336:	81a3      	strhlt	r3, [r4, #12]
 8004338:	bd10      	pop	{r4, pc}

0800433a <__seofread>:
 800433a:	2000      	movs	r0, #0
 800433c:	4770      	bx	lr

0800433e <__swrite>:
 800433e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	461f      	mov	r7, r3
 8004344:	898b      	ldrh	r3, [r1, #12]
 8004346:	05db      	lsls	r3, r3, #23
 8004348:	4605      	mov	r5, r0
 800434a:	460c      	mov	r4, r1
 800434c:	4616      	mov	r6, r2
 800434e:	d505      	bpl.n	800435c <__swrite+0x1e>
 8004350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004354:	2302      	movs	r3, #2
 8004356:	2200      	movs	r2, #0
 8004358:	f002 f8e4 	bl	8006524 <_lseek_r>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	4632      	mov	r2, r6
 800436a:	463b      	mov	r3, r7
 800436c:	4628      	mov	r0, r5
 800436e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004372:	f000 bec5 	b.w	8005100 <_write_r>

08004376 <__sseek>:
 8004376:	b510      	push	{r4, lr}
 8004378:	460c      	mov	r4, r1
 800437a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437e:	f002 f8d1 	bl	8006524 <_lseek_r>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	bf15      	itete	ne
 8004388:	6560      	strne	r0, [r4, #84]	; 0x54
 800438a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800438e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004392:	81a3      	strheq	r3, [r4, #12]
 8004394:	bf18      	it	ne
 8004396:	81a3      	strhne	r3, [r4, #12]
 8004398:	bd10      	pop	{r4, pc}

0800439a <__sclose>:
 800439a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439e:	f000 bec1 	b.w	8005124 <_close_r>

080043a2 <sulp>:
 80043a2:	b570      	push	{r4, r5, r6, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	460d      	mov	r5, r1
 80043a8:	ec45 4b10 	vmov	d0, r4, r5
 80043ac:	4616      	mov	r6, r2
 80043ae:	f002 fc65 	bl	8006c7c <__ulp>
 80043b2:	ec51 0b10 	vmov	r0, r1, d0
 80043b6:	b17e      	cbz	r6, 80043d8 <sulp+0x36>
 80043b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80043bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dd09      	ble.n	80043d8 <sulp+0x36>
 80043c4:	051b      	lsls	r3, r3, #20
 80043c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80043ca:	2400      	movs	r4, #0
 80043cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80043d0:	4622      	mov	r2, r4
 80043d2:	462b      	mov	r3, r5
 80043d4:	f7fc f928 	bl	8000628 <__aeabi_dmul>
 80043d8:	bd70      	pop	{r4, r5, r6, pc}
 80043da:	0000      	movs	r0, r0
 80043dc:	0000      	movs	r0, r0
	...

080043e0 <_strtod_l>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	ed2d 8b02 	vpush	{d8}
 80043e8:	b09d      	sub	sp, #116	; 0x74
 80043ea:	461f      	mov	r7, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	9318      	str	r3, [sp, #96]	; 0x60
 80043f0:	4ba2      	ldr	r3, [pc, #648]	; (800467c <_strtod_l+0x29c>)
 80043f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	9305      	str	r3, [sp, #20]
 80043f8:	4604      	mov	r4, r0
 80043fa:	4618      	mov	r0, r3
 80043fc:	4688      	mov	r8, r1
 80043fe:	f7fb fef9 	bl	80001f4 <strlen>
 8004402:	f04f 0a00 	mov.w	sl, #0
 8004406:	4605      	mov	r5, r0
 8004408:	f04f 0b00 	mov.w	fp, #0
 800440c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	2a2b      	cmp	r2, #43	; 0x2b
 8004416:	d04e      	beq.n	80044b6 <_strtod_l+0xd6>
 8004418:	d83b      	bhi.n	8004492 <_strtod_l+0xb2>
 800441a:	2a0d      	cmp	r2, #13
 800441c:	d834      	bhi.n	8004488 <_strtod_l+0xa8>
 800441e:	2a08      	cmp	r2, #8
 8004420:	d834      	bhi.n	800448c <_strtod_l+0xac>
 8004422:	2a00      	cmp	r2, #0
 8004424:	d03e      	beq.n	80044a4 <_strtod_l+0xc4>
 8004426:	2300      	movs	r3, #0
 8004428:	930a      	str	r3, [sp, #40]	; 0x28
 800442a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800442c:	7833      	ldrb	r3, [r6, #0]
 800442e:	2b30      	cmp	r3, #48	; 0x30
 8004430:	f040 80b0 	bne.w	8004594 <_strtod_l+0x1b4>
 8004434:	7873      	ldrb	r3, [r6, #1]
 8004436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800443a:	2b58      	cmp	r3, #88	; 0x58
 800443c:	d168      	bne.n	8004510 <_strtod_l+0x130>
 800443e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	ab18      	add	r3, sp, #96	; 0x60
 8004444:	9702      	str	r7, [sp, #8]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	4a8d      	ldr	r2, [pc, #564]	; (8004680 <_strtod_l+0x2a0>)
 800444a:	ab19      	add	r3, sp, #100	; 0x64
 800444c:	a917      	add	r1, sp, #92	; 0x5c
 800444e:	4620      	mov	r0, r4
 8004450:	f001 fd5c 	bl	8005f0c <__gethex>
 8004454:	f010 0707 	ands.w	r7, r0, #7
 8004458:	4605      	mov	r5, r0
 800445a:	d005      	beq.n	8004468 <_strtod_l+0x88>
 800445c:	2f06      	cmp	r7, #6
 800445e:	d12c      	bne.n	80044ba <_strtod_l+0xda>
 8004460:	3601      	adds	r6, #1
 8004462:	2300      	movs	r3, #0
 8004464:	9617      	str	r6, [sp, #92]	; 0x5c
 8004466:	930a      	str	r3, [sp, #40]	; 0x28
 8004468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8590 	bne.w	8004f90 <_strtod_l+0xbb0>
 8004470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004472:	b1eb      	cbz	r3, 80044b0 <_strtod_l+0xd0>
 8004474:	4652      	mov	r2, sl
 8004476:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800447a:	ec43 2b10 	vmov	d0, r2, r3
 800447e:	b01d      	add	sp, #116	; 0x74
 8004480:	ecbd 8b02 	vpop	{d8}
 8004484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004488:	2a20      	cmp	r2, #32
 800448a:	d1cc      	bne.n	8004426 <_strtod_l+0x46>
 800448c:	3301      	adds	r3, #1
 800448e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004490:	e7be      	b.n	8004410 <_strtod_l+0x30>
 8004492:	2a2d      	cmp	r2, #45	; 0x2d
 8004494:	d1c7      	bne.n	8004426 <_strtod_l+0x46>
 8004496:	2201      	movs	r2, #1
 8004498:	920a      	str	r2, [sp, #40]	; 0x28
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	9217      	str	r2, [sp, #92]	; 0x5c
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1c2      	bne.n	800442a <_strtod_l+0x4a>
 80044a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 856e 	bne.w	8004f8c <_strtod_l+0xbac>
 80044b0:	4652      	mov	r2, sl
 80044b2:	465b      	mov	r3, fp
 80044b4:	e7e1      	b.n	800447a <_strtod_l+0x9a>
 80044b6:	2200      	movs	r2, #0
 80044b8:	e7ee      	b.n	8004498 <_strtod_l+0xb8>
 80044ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80044bc:	b13a      	cbz	r2, 80044ce <_strtod_l+0xee>
 80044be:	2135      	movs	r1, #53	; 0x35
 80044c0:	a81a      	add	r0, sp, #104	; 0x68
 80044c2:	f002 fce6 	bl	8006e92 <__copybits>
 80044c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80044c8:	4620      	mov	r0, r4
 80044ca:	f002 f8a5 	bl	8006618 <_Bfree>
 80044ce:	3f01      	subs	r7, #1
 80044d0:	2f04      	cmp	r7, #4
 80044d2:	d806      	bhi.n	80044e2 <_strtod_l+0x102>
 80044d4:	e8df f007 	tbb	[pc, r7]
 80044d8:	1714030a 	.word	0x1714030a
 80044dc:	0a          	.byte	0x0a
 80044dd:	00          	.byte	0x00
 80044de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80044e2:	0728      	lsls	r0, r5, #28
 80044e4:	d5c0      	bpl.n	8004468 <_strtod_l+0x88>
 80044e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80044ea:	e7bd      	b.n	8004468 <_strtod_l+0x88>
 80044ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80044f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80044fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80044fe:	e7f0      	b.n	80044e2 <_strtod_l+0x102>
 8004500:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004684 <_strtod_l+0x2a4>
 8004504:	e7ed      	b.n	80044e2 <_strtod_l+0x102>
 8004506:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800450a:	f04f 3aff 	mov.w	sl, #4294967295
 800450e:	e7e8      	b.n	80044e2 <_strtod_l+0x102>
 8004510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	9217      	str	r2, [sp, #92]	; 0x5c
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d0f9      	beq.n	8004510 <_strtod_l+0x130>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0a3      	beq.n	8004468 <_strtod_l+0x88>
 8004520:	2301      	movs	r3, #1
 8004522:	f04f 0900 	mov.w	r9, #0
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800452a:	9308      	str	r3, [sp, #32]
 800452c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004530:	464f      	mov	r7, r9
 8004532:	220a      	movs	r2, #10
 8004534:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004536:	7806      	ldrb	r6, [r0, #0]
 8004538:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800453c:	b2d9      	uxtb	r1, r3
 800453e:	2909      	cmp	r1, #9
 8004540:	d92a      	bls.n	8004598 <_strtod_l+0x1b8>
 8004542:	9905      	ldr	r1, [sp, #20]
 8004544:	462a      	mov	r2, r5
 8004546:	f003 fac3 	bl	8007ad0 <strncmp>
 800454a:	b398      	cbz	r0, 80045b4 <_strtod_l+0x1d4>
 800454c:	2000      	movs	r0, #0
 800454e:	4632      	mov	r2, r6
 8004550:	463d      	mov	r5, r7
 8004552:	9005      	str	r0, [sp, #20]
 8004554:	4603      	mov	r3, r0
 8004556:	2a65      	cmp	r2, #101	; 0x65
 8004558:	d001      	beq.n	800455e <_strtod_l+0x17e>
 800455a:	2a45      	cmp	r2, #69	; 0x45
 800455c:	d118      	bne.n	8004590 <_strtod_l+0x1b0>
 800455e:	b91d      	cbnz	r5, 8004568 <_strtod_l+0x188>
 8004560:	9a04      	ldr	r2, [sp, #16]
 8004562:	4302      	orrs	r2, r0
 8004564:	d09e      	beq.n	80044a4 <_strtod_l+0xc4>
 8004566:	2500      	movs	r5, #0
 8004568:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800456c:	f108 0201 	add.w	r2, r8, #1
 8004570:	9217      	str	r2, [sp, #92]	; 0x5c
 8004572:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004576:	2a2b      	cmp	r2, #43	; 0x2b
 8004578:	d075      	beq.n	8004666 <_strtod_l+0x286>
 800457a:	2a2d      	cmp	r2, #45	; 0x2d
 800457c:	d07b      	beq.n	8004676 <_strtod_l+0x296>
 800457e:	f04f 0c00 	mov.w	ip, #0
 8004582:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004586:	2909      	cmp	r1, #9
 8004588:	f240 8082 	bls.w	8004690 <_strtod_l+0x2b0>
 800458c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004590:	2600      	movs	r6, #0
 8004592:	e09d      	b.n	80046d0 <_strtod_l+0x2f0>
 8004594:	2300      	movs	r3, #0
 8004596:	e7c4      	b.n	8004522 <_strtod_l+0x142>
 8004598:	2f08      	cmp	r7, #8
 800459a:	bfd8      	it	le
 800459c:	9907      	ldrle	r1, [sp, #28]
 800459e:	f100 0001 	add.w	r0, r0, #1
 80045a2:	bfda      	itte	le
 80045a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80045a8:	9307      	strle	r3, [sp, #28]
 80045aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80045ae:	3701      	adds	r7, #1
 80045b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80045b2:	e7bf      	b.n	8004534 <_strtod_l+0x154>
 80045b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045b6:	195a      	adds	r2, r3, r5
 80045b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80045ba:	5d5a      	ldrb	r2, [r3, r5]
 80045bc:	2f00      	cmp	r7, #0
 80045be:	d037      	beq.n	8004630 <_strtod_l+0x250>
 80045c0:	9005      	str	r0, [sp, #20]
 80045c2:	463d      	mov	r5, r7
 80045c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d912      	bls.n	80045f2 <_strtod_l+0x212>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e7c2      	b.n	8004556 <_strtod_l+0x176>
 80045d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80045d6:	785a      	ldrb	r2, [r3, #1]
 80045d8:	3001      	adds	r0, #1
 80045da:	2a30      	cmp	r2, #48	; 0x30
 80045dc:	d0f8      	beq.n	80045d0 <_strtod_l+0x1f0>
 80045de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	f200 84d9 	bhi.w	8004f9a <_strtod_l+0xbba>
 80045e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045ea:	9005      	str	r0, [sp, #20]
 80045ec:	2000      	movs	r0, #0
 80045ee:	9308      	str	r3, [sp, #32]
 80045f0:	4605      	mov	r5, r0
 80045f2:	3a30      	subs	r2, #48	; 0x30
 80045f4:	f100 0301 	add.w	r3, r0, #1
 80045f8:	d014      	beq.n	8004624 <_strtod_l+0x244>
 80045fa:	9905      	ldr	r1, [sp, #20]
 80045fc:	4419      	add	r1, r3
 80045fe:	9105      	str	r1, [sp, #20]
 8004600:	462b      	mov	r3, r5
 8004602:	eb00 0e05 	add.w	lr, r0, r5
 8004606:	210a      	movs	r1, #10
 8004608:	4573      	cmp	r3, lr
 800460a:	d113      	bne.n	8004634 <_strtod_l+0x254>
 800460c:	182b      	adds	r3, r5, r0
 800460e:	2b08      	cmp	r3, #8
 8004610:	f105 0501 	add.w	r5, r5, #1
 8004614:	4405      	add	r5, r0
 8004616:	dc1c      	bgt.n	8004652 <_strtod_l+0x272>
 8004618:	9907      	ldr	r1, [sp, #28]
 800461a:	230a      	movs	r3, #10
 800461c:	fb03 2301 	mla	r3, r3, r1, r2
 8004620:	9307      	str	r3, [sp, #28]
 8004622:	2300      	movs	r3, #0
 8004624:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004626:	1c51      	adds	r1, r2, #1
 8004628:	9117      	str	r1, [sp, #92]	; 0x5c
 800462a:	7852      	ldrb	r2, [r2, #1]
 800462c:	4618      	mov	r0, r3
 800462e:	e7c9      	b.n	80045c4 <_strtod_l+0x1e4>
 8004630:	4638      	mov	r0, r7
 8004632:	e7d2      	b.n	80045da <_strtod_l+0x1fa>
 8004634:	2b08      	cmp	r3, #8
 8004636:	dc04      	bgt.n	8004642 <_strtod_l+0x262>
 8004638:	9e07      	ldr	r6, [sp, #28]
 800463a:	434e      	muls	r6, r1
 800463c:	9607      	str	r6, [sp, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	e7e2      	b.n	8004608 <_strtod_l+0x228>
 8004642:	f103 0c01 	add.w	ip, r3, #1
 8004646:	f1bc 0f10 	cmp.w	ip, #16
 800464a:	bfd8      	it	le
 800464c:	fb01 f909 	mulle.w	r9, r1, r9
 8004650:	e7f5      	b.n	800463e <_strtod_l+0x25e>
 8004652:	2d10      	cmp	r5, #16
 8004654:	bfdc      	itt	le
 8004656:	230a      	movle	r3, #10
 8004658:	fb03 2909 	mlale	r9, r3, r9, r2
 800465c:	e7e1      	b.n	8004622 <_strtod_l+0x242>
 800465e:	2300      	movs	r3, #0
 8004660:	9305      	str	r3, [sp, #20]
 8004662:	2301      	movs	r3, #1
 8004664:	e77c      	b.n	8004560 <_strtod_l+0x180>
 8004666:	f04f 0c00 	mov.w	ip, #0
 800466a:	f108 0202 	add.w	r2, r8, #2
 800466e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004670:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004674:	e785      	b.n	8004582 <_strtod_l+0x1a2>
 8004676:	f04f 0c01 	mov.w	ip, #1
 800467a:	e7f6      	b.n	800466a <_strtod_l+0x28a>
 800467c:	08008f88 	.word	0x08008f88
 8004680:	08008d40 	.word	0x08008d40
 8004684:	7ff00000 	.word	0x7ff00000
 8004688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800468a:	1c51      	adds	r1, r2, #1
 800468c:	9117      	str	r1, [sp, #92]	; 0x5c
 800468e:	7852      	ldrb	r2, [r2, #1]
 8004690:	2a30      	cmp	r2, #48	; 0x30
 8004692:	d0f9      	beq.n	8004688 <_strtod_l+0x2a8>
 8004694:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004698:	2908      	cmp	r1, #8
 800469a:	f63f af79 	bhi.w	8004590 <_strtod_l+0x1b0>
 800469e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80046a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80046a4:	9206      	str	r2, [sp, #24]
 80046a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80046a8:	1c51      	adds	r1, r2, #1
 80046aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80046ac:	7852      	ldrb	r2, [r2, #1]
 80046ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80046b2:	2e09      	cmp	r6, #9
 80046b4:	d937      	bls.n	8004726 <_strtod_l+0x346>
 80046b6:	9e06      	ldr	r6, [sp, #24]
 80046b8:	1b89      	subs	r1, r1, r6
 80046ba:	2908      	cmp	r1, #8
 80046bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80046c0:	dc02      	bgt.n	80046c8 <_strtod_l+0x2e8>
 80046c2:	4576      	cmp	r6, lr
 80046c4:	bfa8      	it	ge
 80046c6:	4676      	movge	r6, lr
 80046c8:	f1bc 0f00 	cmp.w	ip, #0
 80046cc:	d000      	beq.n	80046d0 <_strtod_l+0x2f0>
 80046ce:	4276      	negs	r6, r6
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d14d      	bne.n	8004770 <_strtod_l+0x390>
 80046d4:	9904      	ldr	r1, [sp, #16]
 80046d6:	4301      	orrs	r1, r0
 80046d8:	f47f aec6 	bne.w	8004468 <_strtod_l+0x88>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f aee1 	bne.w	80044a4 <_strtod_l+0xc4>
 80046e2:	2a69      	cmp	r2, #105	; 0x69
 80046e4:	d027      	beq.n	8004736 <_strtod_l+0x356>
 80046e6:	dc24      	bgt.n	8004732 <_strtod_l+0x352>
 80046e8:	2a49      	cmp	r2, #73	; 0x49
 80046ea:	d024      	beq.n	8004736 <_strtod_l+0x356>
 80046ec:	2a4e      	cmp	r2, #78	; 0x4e
 80046ee:	f47f aed9 	bne.w	80044a4 <_strtod_l+0xc4>
 80046f2:	499f      	ldr	r1, [pc, #636]	; (8004970 <_strtod_l+0x590>)
 80046f4:	a817      	add	r0, sp, #92	; 0x5c
 80046f6:	f001 fe61 	bl	80063bc <__match>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	f43f aed2 	beq.w	80044a4 <_strtod_l+0xc4>
 8004700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b28      	cmp	r3, #40	; 0x28
 8004706:	d12d      	bne.n	8004764 <_strtod_l+0x384>
 8004708:	499a      	ldr	r1, [pc, #616]	; (8004974 <_strtod_l+0x594>)
 800470a:	aa1a      	add	r2, sp, #104	; 0x68
 800470c:	a817      	add	r0, sp, #92	; 0x5c
 800470e:	f001 fe69 	bl	80063e4 <__hexnan>
 8004712:	2805      	cmp	r0, #5
 8004714:	d126      	bne.n	8004764 <_strtod_l+0x384>
 8004716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004718:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800471c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004720:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004724:	e6a0      	b.n	8004468 <_strtod_l+0x88>
 8004726:	210a      	movs	r1, #10
 8004728:	fb01 2e0e 	mla	lr, r1, lr, r2
 800472c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004730:	e7b9      	b.n	80046a6 <_strtod_l+0x2c6>
 8004732:	2a6e      	cmp	r2, #110	; 0x6e
 8004734:	e7db      	b.n	80046ee <_strtod_l+0x30e>
 8004736:	4990      	ldr	r1, [pc, #576]	; (8004978 <_strtod_l+0x598>)
 8004738:	a817      	add	r0, sp, #92	; 0x5c
 800473a:	f001 fe3f 	bl	80063bc <__match>
 800473e:	2800      	cmp	r0, #0
 8004740:	f43f aeb0 	beq.w	80044a4 <_strtod_l+0xc4>
 8004744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004746:	498d      	ldr	r1, [pc, #564]	; (800497c <_strtod_l+0x59c>)
 8004748:	3b01      	subs	r3, #1
 800474a:	a817      	add	r0, sp, #92	; 0x5c
 800474c:	9317      	str	r3, [sp, #92]	; 0x5c
 800474e:	f001 fe35 	bl	80063bc <__match>
 8004752:	b910      	cbnz	r0, 800475a <_strtod_l+0x37a>
 8004754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004756:	3301      	adds	r3, #1
 8004758:	9317      	str	r3, [sp, #92]	; 0x5c
 800475a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800498c <_strtod_l+0x5ac>
 800475e:	f04f 0a00 	mov.w	sl, #0
 8004762:	e681      	b.n	8004468 <_strtod_l+0x88>
 8004764:	4886      	ldr	r0, [pc, #536]	; (8004980 <_strtod_l+0x5a0>)
 8004766:	f003 f963 	bl	8007a30 <nan>
 800476a:	ec5b ab10 	vmov	sl, fp, d0
 800476e:	e67b      	b.n	8004468 <_strtod_l+0x88>
 8004770:	9b05      	ldr	r3, [sp, #20]
 8004772:	9807      	ldr	r0, [sp, #28]
 8004774:	1af3      	subs	r3, r6, r3
 8004776:	2f00      	cmp	r7, #0
 8004778:	bf08      	it	eq
 800477a:	462f      	moveq	r7, r5
 800477c:	2d10      	cmp	r5, #16
 800477e:	9306      	str	r3, [sp, #24]
 8004780:	46a8      	mov	r8, r5
 8004782:	bfa8      	it	ge
 8004784:	f04f 0810 	movge.w	r8, #16
 8004788:	f7fb fed4 	bl	8000534 <__aeabi_ui2d>
 800478c:	2d09      	cmp	r5, #9
 800478e:	4682      	mov	sl, r0
 8004790:	468b      	mov	fp, r1
 8004792:	dd13      	ble.n	80047bc <_strtod_l+0x3dc>
 8004794:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <_strtod_l+0x5a4>)
 8004796:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800479a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800479e:	f7fb ff43 	bl	8000628 <__aeabi_dmul>
 80047a2:	4682      	mov	sl, r0
 80047a4:	4648      	mov	r0, r9
 80047a6:	468b      	mov	fp, r1
 80047a8:	f7fb fec4 	bl	8000534 <__aeabi_ui2d>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4650      	mov	r0, sl
 80047b2:	4659      	mov	r1, fp
 80047b4:	f7fb fd82 	bl	80002bc <__adddf3>
 80047b8:	4682      	mov	sl, r0
 80047ba:	468b      	mov	fp, r1
 80047bc:	2d0f      	cmp	r5, #15
 80047be:	dc38      	bgt.n	8004832 <_strtod_l+0x452>
 80047c0:	9b06      	ldr	r3, [sp, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f43f ae50 	beq.w	8004468 <_strtod_l+0x88>
 80047c8:	dd24      	ble.n	8004814 <_strtod_l+0x434>
 80047ca:	2b16      	cmp	r3, #22
 80047cc:	dc0b      	bgt.n	80047e6 <_strtod_l+0x406>
 80047ce:	496d      	ldr	r1, [pc, #436]	; (8004984 <_strtod_l+0x5a4>)
 80047d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80047d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047d8:	4652      	mov	r2, sl
 80047da:	465b      	mov	r3, fp
 80047dc:	f7fb ff24 	bl	8000628 <__aeabi_dmul>
 80047e0:	4682      	mov	sl, r0
 80047e2:	468b      	mov	fp, r1
 80047e4:	e640      	b.n	8004468 <_strtod_l+0x88>
 80047e6:	9a06      	ldr	r2, [sp, #24]
 80047e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80047ec:	4293      	cmp	r3, r2
 80047ee:	db20      	blt.n	8004832 <_strtod_l+0x452>
 80047f0:	4c64      	ldr	r4, [pc, #400]	; (8004984 <_strtod_l+0x5a4>)
 80047f2:	f1c5 050f 	rsb	r5, r5, #15
 80047f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80047fa:	4652      	mov	r2, sl
 80047fc:	465b      	mov	r3, fp
 80047fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004802:	f7fb ff11 	bl	8000628 <__aeabi_dmul>
 8004806:	9b06      	ldr	r3, [sp, #24]
 8004808:	1b5d      	subs	r5, r3, r5
 800480a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800480e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004812:	e7e3      	b.n	80047dc <_strtod_l+0x3fc>
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	3316      	adds	r3, #22
 8004818:	db0b      	blt.n	8004832 <_strtod_l+0x452>
 800481a:	9b05      	ldr	r3, [sp, #20]
 800481c:	1b9e      	subs	r6, r3, r6
 800481e:	4b59      	ldr	r3, [pc, #356]	; (8004984 <_strtod_l+0x5a4>)
 8004820:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004824:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fc f826 	bl	800087c <__aeabi_ddiv>
 8004830:	e7d6      	b.n	80047e0 <_strtod_l+0x400>
 8004832:	9b06      	ldr	r3, [sp, #24]
 8004834:	eba5 0808 	sub.w	r8, r5, r8
 8004838:	4498      	add	r8, r3
 800483a:	f1b8 0f00 	cmp.w	r8, #0
 800483e:	dd74      	ble.n	800492a <_strtod_l+0x54a>
 8004840:	f018 030f 	ands.w	r3, r8, #15
 8004844:	d00a      	beq.n	800485c <_strtod_l+0x47c>
 8004846:	494f      	ldr	r1, [pc, #316]	; (8004984 <_strtod_l+0x5a4>)
 8004848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800484c:	4652      	mov	r2, sl
 800484e:	465b      	mov	r3, fp
 8004850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004854:	f7fb fee8 	bl	8000628 <__aeabi_dmul>
 8004858:	4682      	mov	sl, r0
 800485a:	468b      	mov	fp, r1
 800485c:	f038 080f 	bics.w	r8, r8, #15
 8004860:	d04f      	beq.n	8004902 <_strtod_l+0x522>
 8004862:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004866:	dd22      	ble.n	80048ae <_strtod_l+0x4ce>
 8004868:	2500      	movs	r5, #0
 800486a:	462e      	mov	r6, r5
 800486c:	9507      	str	r5, [sp, #28]
 800486e:	9505      	str	r5, [sp, #20]
 8004870:	2322      	movs	r3, #34	; 0x22
 8004872:	f8df b118 	ldr.w	fp, [pc, #280]	; 800498c <_strtod_l+0x5ac>
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	f04f 0a00 	mov.w	sl, #0
 800487c:	9b07      	ldr	r3, [sp, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f43f adf2 	beq.w	8004468 <_strtod_l+0x88>
 8004884:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004886:	4620      	mov	r0, r4
 8004888:	f001 fec6 	bl	8006618 <_Bfree>
 800488c:	9905      	ldr	r1, [sp, #20]
 800488e:	4620      	mov	r0, r4
 8004890:	f001 fec2 	bl	8006618 <_Bfree>
 8004894:	4631      	mov	r1, r6
 8004896:	4620      	mov	r0, r4
 8004898:	f001 febe 	bl	8006618 <_Bfree>
 800489c:	9907      	ldr	r1, [sp, #28]
 800489e:	4620      	mov	r0, r4
 80048a0:	f001 feba 	bl	8006618 <_Bfree>
 80048a4:	4629      	mov	r1, r5
 80048a6:	4620      	mov	r0, r4
 80048a8:	f001 feb6 	bl	8006618 <_Bfree>
 80048ac:	e5dc      	b.n	8004468 <_strtod_l+0x88>
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <_strtod_l+0x5a8>)
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	2300      	movs	r3, #0
 80048b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80048b8:	4650      	mov	r0, sl
 80048ba:	4659      	mov	r1, fp
 80048bc:	4699      	mov	r9, r3
 80048be:	f1b8 0f01 	cmp.w	r8, #1
 80048c2:	dc21      	bgt.n	8004908 <_strtod_l+0x528>
 80048c4:	b10b      	cbz	r3, 80048ca <_strtod_l+0x4ea>
 80048c6:	4682      	mov	sl, r0
 80048c8:	468b      	mov	fp, r1
 80048ca:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <_strtod_l+0x5a8>)
 80048cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80048d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80048d4:	4652      	mov	r2, sl
 80048d6:	465b      	mov	r3, fp
 80048d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80048dc:	f7fb fea4 	bl	8000628 <__aeabi_dmul>
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <_strtod_l+0x5ac>)
 80048e2:	460a      	mov	r2, r1
 80048e4:	400b      	ands	r3, r1
 80048e6:	492a      	ldr	r1, [pc, #168]	; (8004990 <_strtod_l+0x5b0>)
 80048e8:	428b      	cmp	r3, r1
 80048ea:	4682      	mov	sl, r0
 80048ec:	d8bc      	bhi.n	8004868 <_strtod_l+0x488>
 80048ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80048f2:	428b      	cmp	r3, r1
 80048f4:	bf86      	itte	hi
 80048f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004994 <_strtod_l+0x5b4>
 80048fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80048fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004902:	2300      	movs	r3, #0
 8004904:	9304      	str	r3, [sp, #16]
 8004906:	e084      	b.n	8004a12 <_strtod_l+0x632>
 8004908:	f018 0f01 	tst.w	r8, #1
 800490c:	d005      	beq.n	800491a <_strtod_l+0x53a>
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fe88 	bl	8000628 <__aeabi_dmul>
 8004918:	2301      	movs	r3, #1
 800491a:	9a04      	ldr	r2, [sp, #16]
 800491c:	3208      	adds	r2, #8
 800491e:	f109 0901 	add.w	r9, r9, #1
 8004922:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004926:	9204      	str	r2, [sp, #16]
 8004928:	e7c9      	b.n	80048be <_strtod_l+0x4de>
 800492a:	d0ea      	beq.n	8004902 <_strtod_l+0x522>
 800492c:	f1c8 0800 	rsb	r8, r8, #0
 8004930:	f018 020f 	ands.w	r2, r8, #15
 8004934:	d00a      	beq.n	800494c <_strtod_l+0x56c>
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <_strtod_l+0x5a4>)
 8004938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800493c:	4650      	mov	r0, sl
 800493e:	4659      	mov	r1, fp
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb ff9a 	bl	800087c <__aeabi_ddiv>
 8004948:	4682      	mov	sl, r0
 800494a:	468b      	mov	fp, r1
 800494c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004950:	d0d7      	beq.n	8004902 <_strtod_l+0x522>
 8004952:	f1b8 0f1f 	cmp.w	r8, #31
 8004956:	dd1f      	ble.n	8004998 <_strtod_l+0x5b8>
 8004958:	2500      	movs	r5, #0
 800495a:	462e      	mov	r6, r5
 800495c:	9507      	str	r5, [sp, #28]
 800495e:	9505      	str	r5, [sp, #20]
 8004960:	2322      	movs	r3, #34	; 0x22
 8004962:	f04f 0a00 	mov.w	sl, #0
 8004966:	f04f 0b00 	mov.w	fp, #0
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	e786      	b.n	800487c <_strtod_l+0x49c>
 800496e:	bf00      	nop
 8004970:	08008d15 	.word	0x08008d15
 8004974:	08008d54 	.word	0x08008d54
 8004978:	08008d0d 	.word	0x08008d0d
 800497c:	08008e94 	.word	0x08008e94
 8004980:	0800915b 	.word	0x0800915b
 8004984:	08009020 	.word	0x08009020
 8004988:	08008ff8 	.word	0x08008ff8
 800498c:	7ff00000 	.word	0x7ff00000
 8004990:	7ca00000 	.word	0x7ca00000
 8004994:	7fefffff 	.word	0x7fefffff
 8004998:	f018 0310 	ands.w	r3, r8, #16
 800499c:	bf18      	it	ne
 800499e:	236a      	movne	r3, #106	; 0x6a
 80049a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004d50 <_strtod_l+0x970>
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	4650      	mov	r0, sl
 80049a8:	4659      	mov	r1, fp
 80049aa:	2300      	movs	r3, #0
 80049ac:	f018 0f01 	tst.w	r8, #1
 80049b0:	d004      	beq.n	80049bc <_strtod_l+0x5dc>
 80049b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80049b6:	f7fb fe37 	bl	8000628 <__aeabi_dmul>
 80049ba:	2301      	movs	r3, #1
 80049bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80049c0:	f109 0908 	add.w	r9, r9, #8
 80049c4:	d1f2      	bne.n	80049ac <_strtod_l+0x5cc>
 80049c6:	b10b      	cbz	r3, 80049cc <_strtod_l+0x5ec>
 80049c8:	4682      	mov	sl, r0
 80049ca:	468b      	mov	fp, r1
 80049cc:	9b04      	ldr	r3, [sp, #16]
 80049ce:	b1c3      	cbz	r3, 8004a02 <_strtod_l+0x622>
 80049d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80049d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80049d8:	2b00      	cmp	r3, #0
 80049da:	4659      	mov	r1, fp
 80049dc:	dd11      	ble.n	8004a02 <_strtod_l+0x622>
 80049de:	2b1f      	cmp	r3, #31
 80049e0:	f340 8124 	ble.w	8004c2c <_strtod_l+0x84c>
 80049e4:	2b34      	cmp	r3, #52	; 0x34
 80049e6:	bfde      	ittt	le
 80049e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80049ec:	f04f 33ff 	movle.w	r3, #4294967295
 80049f0:	fa03 f202 	lslle.w	r2, r3, r2
 80049f4:	f04f 0a00 	mov.w	sl, #0
 80049f8:	bfcc      	ite	gt
 80049fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80049fe:	ea02 0b01 	andle.w	fp, r2, r1
 8004a02:	2200      	movs	r2, #0
 8004a04:	2300      	movs	r3, #0
 8004a06:	4650      	mov	r0, sl
 8004a08:	4659      	mov	r1, fp
 8004a0a:	f7fc f875 	bl	8000af8 <__aeabi_dcmpeq>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d1a2      	bne.n	8004958 <_strtod_l+0x578>
 8004a12:	9b07      	ldr	r3, [sp, #28]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	9908      	ldr	r1, [sp, #32]
 8004a18:	462b      	mov	r3, r5
 8004a1a:	463a      	mov	r2, r7
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f001 fe63 	bl	80066e8 <__s2b>
 8004a22:	9007      	str	r0, [sp, #28]
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f43f af1f 	beq.w	8004868 <_strtod_l+0x488>
 8004a2a:	9b05      	ldr	r3, [sp, #20]
 8004a2c:	1b9e      	subs	r6, r3, r6
 8004a2e:	9b06      	ldr	r3, [sp, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bfb4      	ite	lt
 8004a34:	4633      	movlt	r3, r6
 8004a36:	2300      	movge	r3, #0
 8004a38:	930c      	str	r3, [sp, #48]	; 0x30
 8004a3a:	9b06      	ldr	r3, [sp, #24]
 8004a3c:	2500      	movs	r5, #0
 8004a3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a42:	9312      	str	r3, [sp, #72]	; 0x48
 8004a44:	462e      	mov	r6, r5
 8004a46:	9b07      	ldr	r3, [sp, #28]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	f001 fda4 	bl	8006598 <_Balloc>
 8004a50:	9005      	str	r0, [sp, #20]
 8004a52:	2800      	cmp	r0, #0
 8004a54:	f43f af0c 	beq.w	8004870 <_strtod_l+0x490>
 8004a58:	9b07      	ldr	r3, [sp, #28]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	3202      	adds	r2, #2
 8004a5e:	f103 010c 	add.w	r1, r3, #12
 8004a62:	0092      	lsls	r2, r2, #2
 8004a64:	300c      	adds	r0, #12
 8004a66:	f001 fd89 	bl	800657c <memcpy>
 8004a6a:	ec4b ab10 	vmov	d0, sl, fp
 8004a6e:	aa1a      	add	r2, sp, #104	; 0x68
 8004a70:	a919      	add	r1, sp, #100	; 0x64
 8004a72:	4620      	mov	r0, r4
 8004a74:	f002 f97e 	bl	8006d74 <__d2b>
 8004a78:	ec4b ab18 	vmov	d8, sl, fp
 8004a7c:	9018      	str	r0, [sp, #96]	; 0x60
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	f43f aef6 	beq.w	8004870 <_strtod_l+0x490>
 8004a84:	2101      	movs	r1, #1
 8004a86:	4620      	mov	r0, r4
 8004a88:	f001 fec8 	bl	800681c <__i2b>
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f43f aeee 	beq.w	8004870 <_strtod_l+0x490>
 8004a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a96:	9904      	ldr	r1, [sp, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bfab      	itete	ge
 8004a9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004a9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004aa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004aa2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004aa6:	bfac      	ite	ge
 8004aa8:	eb03 0902 	addge.w	r9, r3, r2
 8004aac:	1ad7      	sublt	r7, r2, r3
 8004aae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004ab0:	eba3 0801 	sub.w	r8, r3, r1
 8004ab4:	4490      	add	r8, r2
 8004ab6:	4ba1      	ldr	r3, [pc, #644]	; (8004d3c <_strtod_l+0x95c>)
 8004ab8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004abc:	4598      	cmp	r8, r3
 8004abe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ac2:	f280 80c7 	bge.w	8004c54 <_strtod_l+0x874>
 8004ac6:	eba3 0308 	sub.w	r3, r3, r8
 8004aca:	2b1f      	cmp	r3, #31
 8004acc:	eba2 0203 	sub.w	r2, r2, r3
 8004ad0:	f04f 0101 	mov.w	r1, #1
 8004ad4:	f300 80b1 	bgt.w	8004c3a <_strtod_l+0x85a>
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	930d      	str	r3, [sp, #52]	; 0x34
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9308      	str	r3, [sp, #32]
 8004ae2:	eb09 0802 	add.w	r8, r9, r2
 8004ae6:	9b04      	ldr	r3, [sp, #16]
 8004ae8:	45c1      	cmp	r9, r8
 8004aea:	4417      	add	r7, r2
 8004aec:	441f      	add	r7, r3
 8004aee:	464b      	mov	r3, r9
 8004af0:	bfa8      	it	ge
 8004af2:	4643      	movge	r3, r8
 8004af4:	42bb      	cmp	r3, r7
 8004af6:	bfa8      	it	ge
 8004af8:	463b      	movge	r3, r7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bfc2      	ittt	gt
 8004afe:	eba8 0803 	subgt.w	r8, r8, r3
 8004b02:	1aff      	subgt	r7, r7, r3
 8004b04:	eba9 0903 	subgt.w	r9, r9, r3
 8004b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	dd17      	ble.n	8004b3e <_strtod_l+0x75e>
 8004b0e:	4631      	mov	r1, r6
 8004b10:	461a      	mov	r2, r3
 8004b12:	4620      	mov	r0, r4
 8004b14:	f001 ff42 	bl	800699c <__pow5mult>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	f43f aea8 	beq.w	8004870 <_strtod_l+0x490>
 8004b20:	4601      	mov	r1, r0
 8004b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004b24:	4620      	mov	r0, r4
 8004b26:	f001 fe8f 	bl	8006848 <__multiply>
 8004b2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f43f ae9f 	beq.w	8004870 <_strtod_l+0x490>
 8004b32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b34:	4620      	mov	r0, r4
 8004b36:	f001 fd6f 	bl	8006618 <_Bfree>
 8004b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b3c:	9318      	str	r3, [sp, #96]	; 0x60
 8004b3e:	f1b8 0f00 	cmp.w	r8, #0
 8004b42:	f300 808c 	bgt.w	8004c5e <_strtod_l+0x87e>
 8004b46:	9b06      	ldr	r3, [sp, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dd08      	ble.n	8004b5e <_strtod_l+0x77e>
 8004b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b4e:	9905      	ldr	r1, [sp, #20]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f001 ff23 	bl	800699c <__pow5mult>
 8004b56:	9005      	str	r0, [sp, #20]
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f43f ae89 	beq.w	8004870 <_strtod_l+0x490>
 8004b5e:	2f00      	cmp	r7, #0
 8004b60:	dd08      	ble.n	8004b74 <_strtod_l+0x794>
 8004b62:	9905      	ldr	r1, [sp, #20]
 8004b64:	463a      	mov	r2, r7
 8004b66:	4620      	mov	r0, r4
 8004b68:	f001 ff72 	bl	8006a50 <__lshift>
 8004b6c:	9005      	str	r0, [sp, #20]
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f43f ae7e 	beq.w	8004870 <_strtod_l+0x490>
 8004b74:	f1b9 0f00 	cmp.w	r9, #0
 8004b78:	dd08      	ble.n	8004b8c <_strtod_l+0x7ac>
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	464a      	mov	r2, r9
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f001 ff66 	bl	8006a50 <__lshift>
 8004b84:	4606      	mov	r6, r0
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f43f ae72 	beq.w	8004870 <_strtod_l+0x490>
 8004b8c:	9a05      	ldr	r2, [sp, #20]
 8004b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b90:	4620      	mov	r0, r4
 8004b92:	f001 ffe9 	bl	8006b68 <__mdiff>
 8004b96:	4605      	mov	r5, r0
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	f43f ae69 	beq.w	8004870 <_strtod_l+0x490>
 8004b9e:	68c3      	ldr	r3, [r0, #12]
 8004ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60c3      	str	r3, [r0, #12]
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	f001 ffc2 	bl	8006b30 <__mcmp>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	da60      	bge.n	8004c72 <_strtod_l+0x892>
 8004bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb2:	ea53 030a 	orrs.w	r3, r3, sl
 8004bb6:	f040 8082 	bne.w	8004cbe <_strtod_l+0x8de>
 8004bba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d17d      	bne.n	8004cbe <_strtod_l+0x8de>
 8004bc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004bc6:	0d1b      	lsrs	r3, r3, #20
 8004bc8:	051b      	lsls	r3, r3, #20
 8004bca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004bce:	d976      	bls.n	8004cbe <_strtod_l+0x8de>
 8004bd0:	696b      	ldr	r3, [r5, #20]
 8004bd2:	b913      	cbnz	r3, 8004bda <_strtod_l+0x7fa>
 8004bd4:	692b      	ldr	r3, [r5, #16]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	dd71      	ble.n	8004cbe <_strtod_l+0x8de>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4620      	mov	r0, r4
 8004be0:	f001 ff36 	bl	8006a50 <__lshift>
 8004be4:	4631      	mov	r1, r6
 8004be6:	4605      	mov	r5, r0
 8004be8:	f001 ffa2 	bl	8006b30 <__mcmp>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	dd66      	ble.n	8004cbe <_strtod_l+0x8de>
 8004bf0:	9904      	ldr	r1, [sp, #16]
 8004bf2:	4a53      	ldr	r2, [pc, #332]	; (8004d40 <_strtod_l+0x960>)
 8004bf4:	465b      	mov	r3, fp
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	f000 8081 	beq.w	8004cfe <_strtod_l+0x91e>
 8004bfc:	ea02 010b 	and.w	r1, r2, fp
 8004c00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004c04:	dc7b      	bgt.n	8004cfe <_strtod_l+0x91e>
 8004c06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004c0a:	f77f aea9 	ble.w	8004960 <_strtod_l+0x580>
 8004c0e:	4b4d      	ldr	r3, [pc, #308]	; (8004d44 <_strtod_l+0x964>)
 8004c10:	4650      	mov	r0, sl
 8004c12:	4659      	mov	r1, fp
 8004c14:	2200      	movs	r2, #0
 8004c16:	f7fb fd07 	bl	8000628 <__aeabi_dmul>
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4303      	orrs	r3, r0
 8004c1e:	bf08      	it	eq
 8004c20:	2322      	moveq	r3, #34	; 0x22
 8004c22:	4682      	mov	sl, r0
 8004c24:	468b      	mov	fp, r1
 8004c26:	bf08      	it	eq
 8004c28:	6023      	streq	r3, [r4, #0]
 8004c2a:	e62b      	b.n	8004884 <_strtod_l+0x4a4>
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	ea03 0a0a 	and.w	sl, r3, sl
 8004c38:	e6e3      	b.n	8004a02 <_strtod_l+0x622>
 8004c3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004c3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004c42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004c46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004c4a:	fa01 f308 	lsl.w	r3, r1, r8
 8004c4e:	9308      	str	r3, [sp, #32]
 8004c50:	910d      	str	r1, [sp, #52]	; 0x34
 8004c52:	e746      	b.n	8004ae2 <_strtod_l+0x702>
 8004c54:	2300      	movs	r3, #0
 8004c56:	9308      	str	r3, [sp, #32]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8004c5c:	e741      	b.n	8004ae2 <_strtod_l+0x702>
 8004c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004c60:	4642      	mov	r2, r8
 8004c62:	4620      	mov	r0, r4
 8004c64:	f001 fef4 	bl	8006a50 <__lshift>
 8004c68:	9018      	str	r0, [sp, #96]	; 0x60
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	f47f af6b 	bne.w	8004b46 <_strtod_l+0x766>
 8004c70:	e5fe      	b.n	8004870 <_strtod_l+0x490>
 8004c72:	465f      	mov	r7, fp
 8004c74:	d16e      	bne.n	8004d54 <_strtod_l+0x974>
 8004c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c7c:	b342      	cbz	r2, 8004cd0 <_strtod_l+0x8f0>
 8004c7e:	4a32      	ldr	r2, [pc, #200]	; (8004d48 <_strtod_l+0x968>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d128      	bne.n	8004cd6 <_strtod_l+0x8f6>
 8004c84:	9b04      	ldr	r3, [sp, #16]
 8004c86:	4651      	mov	r1, sl
 8004c88:	b1eb      	cbz	r3, 8004cc6 <_strtod_l+0x8e6>
 8004c8a:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <_strtod_l+0x960>)
 8004c8c:	403b      	ands	r3, r7
 8004c8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004c92:	f04f 32ff 	mov.w	r2, #4294967295
 8004c96:	d819      	bhi.n	8004ccc <_strtod_l+0x8ec>
 8004c98:	0d1b      	lsrs	r3, r3, #20
 8004c9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	4299      	cmp	r1, r3
 8004ca4:	d117      	bne.n	8004cd6 <_strtod_l+0x8f6>
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <_strtod_l+0x96c>)
 8004ca8:	429f      	cmp	r7, r3
 8004caa:	d102      	bne.n	8004cb2 <_strtod_l+0x8d2>
 8004cac:	3101      	adds	r1, #1
 8004cae:	f43f addf 	beq.w	8004870 <_strtod_l+0x490>
 8004cb2:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <_strtod_l+0x960>)
 8004cb4:	403b      	ands	r3, r7
 8004cb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004cba:	f04f 0a00 	mov.w	sl, #0
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1a4      	bne.n	8004c0e <_strtod_l+0x82e>
 8004cc4:	e5de      	b.n	8004884 <_strtod_l+0x4a4>
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e7ea      	b.n	8004ca2 <_strtod_l+0x8c2>
 8004ccc:	4613      	mov	r3, r2
 8004cce:	e7e8      	b.n	8004ca2 <_strtod_l+0x8c2>
 8004cd0:	ea53 030a 	orrs.w	r3, r3, sl
 8004cd4:	d08c      	beq.n	8004bf0 <_strtod_l+0x810>
 8004cd6:	9b08      	ldr	r3, [sp, #32]
 8004cd8:	b1db      	cbz	r3, 8004d12 <_strtod_l+0x932>
 8004cda:	423b      	tst	r3, r7
 8004cdc:	d0ef      	beq.n	8004cbe <_strtod_l+0x8de>
 8004cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce0:	9a04      	ldr	r2, [sp, #16]
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	b1c3      	cbz	r3, 8004d1a <_strtod_l+0x93a>
 8004ce8:	f7ff fb5b 	bl	80043a2 <sulp>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	ec51 0b18 	vmov	r0, r1, d8
 8004cf4:	f7fb fae2 	bl	80002bc <__adddf3>
 8004cf8:	4682      	mov	sl, r0
 8004cfa:	468b      	mov	fp, r1
 8004cfc:	e7df      	b.n	8004cbe <_strtod_l+0x8de>
 8004cfe:	4013      	ands	r3, r2
 8004d00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004d08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8004d10:	e7d5      	b.n	8004cbe <_strtod_l+0x8de>
 8004d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d14:	ea13 0f0a 	tst.w	r3, sl
 8004d18:	e7e0      	b.n	8004cdc <_strtod_l+0x8fc>
 8004d1a:	f7ff fb42 	bl	80043a2 <sulp>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	ec51 0b18 	vmov	r0, r1, d8
 8004d26:	f7fb fac7 	bl	80002b8 <__aeabi_dsub>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4682      	mov	sl, r0
 8004d30:	468b      	mov	fp, r1
 8004d32:	f7fb fee1 	bl	8000af8 <__aeabi_dcmpeq>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d0c1      	beq.n	8004cbe <_strtod_l+0x8de>
 8004d3a:	e611      	b.n	8004960 <_strtod_l+0x580>
 8004d3c:	fffffc02 	.word	0xfffffc02
 8004d40:	7ff00000 	.word	0x7ff00000
 8004d44:	39500000 	.word	0x39500000
 8004d48:	000fffff 	.word	0x000fffff
 8004d4c:	7fefffff 	.word	0x7fefffff
 8004d50:	08008d68 	.word	0x08008d68
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	f002 f868 	bl	8006e2c <__ratio>
 8004d5c:	ec59 8b10 	vmov	r8, r9, d0
 8004d60:	ee10 0a10 	vmov	r0, s0
 8004d64:	2200      	movs	r2, #0
 8004d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb fed8 	bl	8000b20 <__aeabi_dcmple>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d07a      	beq.n	8004e6a <_strtod_l+0xa8a>
 8004d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d04a      	beq.n	8004e10 <_strtod_l+0xa30>
 8004d7a:	4b95      	ldr	r3, [pc, #596]	; (8004fd0 <_strtod_l+0xbf0>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004fd0 <_strtod_l+0xbf0>
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <_strtod_l+0xbf4>)
 8004d8c:	403b      	ands	r3, r7
 8004d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d92:	4b91      	ldr	r3, [pc, #580]	; (8004fd8 <_strtod_l+0xbf8>)
 8004d94:	429a      	cmp	r2, r3
 8004d96:	f040 80b0 	bne.w	8004efa <_strtod_l+0xb1a>
 8004d9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004da2:	ec4b ab10 	vmov	d0, sl, fp
 8004da6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004daa:	f001 ff67 	bl	8006c7c <__ulp>
 8004dae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004db2:	ec53 2b10 	vmov	r2, r3, d0
 8004db6:	f7fb fc37 	bl	8000628 <__aeabi_dmul>
 8004dba:	4652      	mov	r2, sl
 8004dbc:	465b      	mov	r3, fp
 8004dbe:	f7fb fa7d 	bl	80002bc <__adddf3>
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4983      	ldr	r1, [pc, #524]	; (8004fd4 <_strtod_l+0xbf4>)
 8004dc6:	4a85      	ldr	r2, [pc, #532]	; (8004fdc <_strtod_l+0xbfc>)
 8004dc8:	4019      	ands	r1, r3
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	4682      	mov	sl, r0
 8004dce:	d960      	bls.n	8004e92 <_strtod_l+0xab2>
 8004dd0:	ee18 3a90 	vmov	r3, s17
 8004dd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d104      	bne.n	8004de6 <_strtod_l+0xa06>
 8004ddc:	ee18 3a10 	vmov	r3, s16
 8004de0:	3301      	adds	r3, #1
 8004de2:	f43f ad45 	beq.w	8004870 <_strtod_l+0x490>
 8004de6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004fe8 <_strtod_l+0xc08>
 8004dea:	f04f 3aff 	mov.w	sl, #4294967295
 8004dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004df0:	4620      	mov	r0, r4
 8004df2:	f001 fc11 	bl	8006618 <_Bfree>
 8004df6:	9905      	ldr	r1, [sp, #20]
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f001 fc0d 	bl	8006618 <_Bfree>
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4620      	mov	r0, r4
 8004e02:	f001 fc09 	bl	8006618 <_Bfree>
 8004e06:	4629      	mov	r1, r5
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f001 fc05 	bl	8006618 <_Bfree>
 8004e0e:	e61a      	b.n	8004a46 <_strtod_l+0x666>
 8004e10:	f1ba 0f00 	cmp.w	sl, #0
 8004e14:	d11b      	bne.n	8004e4e <_strtod_l+0xa6e>
 8004e16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e1a:	b9f3      	cbnz	r3, 8004e5a <_strtod_l+0xa7a>
 8004e1c:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <_strtod_l+0xbf0>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4640      	mov	r0, r8
 8004e22:	4649      	mov	r1, r9
 8004e24:	f7fb fe72 	bl	8000b0c <__aeabi_dcmplt>
 8004e28:	b9d0      	cbnz	r0, 8004e60 <_strtod_l+0xa80>
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4b6c      	ldr	r3, [pc, #432]	; (8004fe0 <_strtod_l+0xc00>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	f7fb fbf9 	bl	8000628 <__aeabi_dmul>
 8004e36:	4680      	mov	r8, r0
 8004e38:	4689      	mov	r9, r1
 8004e3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004e42:	9315      	str	r3, [sp, #84]	; 0x54
 8004e44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e4c:	e79d      	b.n	8004d8a <_strtod_l+0x9aa>
 8004e4e:	f1ba 0f01 	cmp.w	sl, #1
 8004e52:	d102      	bne.n	8004e5a <_strtod_l+0xa7a>
 8004e54:	2f00      	cmp	r7, #0
 8004e56:	f43f ad83 	beq.w	8004960 <_strtod_l+0x580>
 8004e5a:	4b62      	ldr	r3, [pc, #392]	; (8004fe4 <_strtod_l+0xc04>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	e78e      	b.n	8004d7e <_strtod_l+0x99e>
 8004e60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004fe0 <_strtod_l+0xc00>
 8004e64:	f04f 0800 	mov.w	r8, #0
 8004e68:	e7e7      	b.n	8004e3a <_strtod_l+0xa5a>
 8004e6a:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <_strtod_l+0xc00>)
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	2200      	movs	r2, #0
 8004e72:	f7fb fbd9 	bl	8000628 <__aeabi_dmul>
 8004e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e78:	4680      	mov	r8, r0
 8004e7a:	4689      	mov	r9, r1
 8004e7c:	b933      	cbnz	r3, 8004e8c <_strtod_l+0xaac>
 8004e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e82:	900e      	str	r0, [sp, #56]	; 0x38
 8004e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004e8a:	e7dd      	b.n	8004e48 <_strtod_l+0xa68>
 8004e8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004e90:	e7f9      	b.n	8004e86 <_strtod_l+0xaa6>
 8004e92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004e96:	9b04      	ldr	r3, [sp, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1a8      	bne.n	8004dee <_strtod_l+0xa0e>
 8004e9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ea2:	0d1b      	lsrs	r3, r3, #20
 8004ea4:	051b      	lsls	r3, r3, #20
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d1a1      	bne.n	8004dee <_strtod_l+0xa0e>
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4649      	mov	r1, r9
 8004eae:	f7fb ff03 	bl	8000cb8 <__aeabi_d2lz>
 8004eb2:	f7fb fb8b 	bl	80005cc <__aeabi_l2d>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4640      	mov	r0, r8
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	f7fb f9fb 	bl	80002b8 <__aeabi_dsub>
 8004ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ec8:	ea43 030a 	orr.w	r3, r3, sl
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	4680      	mov	r8, r0
 8004ed0:	4689      	mov	r9, r1
 8004ed2:	d055      	beq.n	8004f80 <_strtod_l+0xba0>
 8004ed4:	a336      	add	r3, pc, #216	; (adr r3, 8004fb0 <_strtod_l+0xbd0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb fe17 	bl	8000b0c <__aeabi_dcmplt>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f47f acd0 	bne.w	8004884 <_strtod_l+0x4a4>
 8004ee4:	a334      	add	r3, pc, #208	; (adr r3, 8004fb8 <_strtod_l+0xbd8>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	4640      	mov	r0, r8
 8004eec:	4649      	mov	r1, r9
 8004eee:	f7fb fe2b 	bl	8000b48 <__aeabi_dcmpgt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f43f af7b 	beq.w	8004dee <_strtod_l+0xa0e>
 8004ef8:	e4c4      	b.n	8004884 <_strtod_l+0x4a4>
 8004efa:	9b04      	ldr	r3, [sp, #16]
 8004efc:	b333      	cbz	r3, 8004f4c <_strtod_l+0xb6c>
 8004efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004f04:	d822      	bhi.n	8004f4c <_strtod_l+0xb6c>
 8004f06:	a32e      	add	r3, pc, #184	; (adr r3, 8004fc0 <_strtod_l+0xbe0>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb fe06 	bl	8000b20 <__aeabi_dcmple>
 8004f14:	b1a0      	cbz	r0, 8004f40 <_strtod_l+0xb60>
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	f7fb fe5d 	bl	8000bd8 <__aeabi_d2uiz>
 8004f1e:	2801      	cmp	r0, #1
 8004f20:	bf38      	it	cc
 8004f22:	2001      	movcc	r0, #1
 8004f24:	f7fb fb06 	bl	8000534 <__aeabi_ui2d>
 8004f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f2a:	4680      	mov	r8, r0
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	bb23      	cbnz	r3, 8004f7a <_strtod_l+0xb9a>
 8004f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f34:	9010      	str	r0, [sp, #64]	; 0x40
 8004f36:	9311      	str	r3, [sp, #68]	; 0x44
 8004f38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f50:	eeb0 0a48 	vmov.f32	s0, s16
 8004f54:	eef0 0a68 	vmov.f32	s1, s17
 8004f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f5c:	f001 fe8e 	bl	8006c7c <__ulp>
 8004f60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f64:	ec53 2b10 	vmov	r2, r3, d0
 8004f68:	f7fb fb5e 	bl	8000628 <__aeabi_dmul>
 8004f6c:	ec53 2b18 	vmov	r2, r3, d8
 8004f70:	f7fb f9a4 	bl	80002bc <__adddf3>
 8004f74:	4682      	mov	sl, r0
 8004f76:	468b      	mov	fp, r1
 8004f78:	e78d      	b.n	8004e96 <_strtod_l+0xab6>
 8004f7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004f7e:	e7db      	b.n	8004f38 <_strtod_l+0xb58>
 8004f80:	a311      	add	r3, pc, #68	; (adr r3, 8004fc8 <_strtod_l+0xbe8>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb fdc1 	bl	8000b0c <__aeabi_dcmplt>
 8004f8a:	e7b2      	b.n	8004ef2 <_strtod_l+0xb12>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	f7ff ba6b 	b.w	8004470 <_strtod_l+0x90>
 8004f9a:	2a65      	cmp	r2, #101	; 0x65
 8004f9c:	f43f ab5f 	beq.w	800465e <_strtod_l+0x27e>
 8004fa0:	2a45      	cmp	r2, #69	; 0x45
 8004fa2:	f43f ab5c 	beq.w	800465e <_strtod_l+0x27e>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f7ff bb94 	b.w	80046d4 <_strtod_l+0x2f4>
 8004fac:	f3af 8000 	nop.w
 8004fb0:	94a03595 	.word	0x94a03595
 8004fb4:	3fdfffff 	.word	0x3fdfffff
 8004fb8:	35afe535 	.word	0x35afe535
 8004fbc:	3fe00000 	.word	0x3fe00000
 8004fc0:	ffc00000 	.word	0xffc00000
 8004fc4:	41dfffff 	.word	0x41dfffff
 8004fc8:	94a03595 	.word	0x94a03595
 8004fcc:	3fcfffff 	.word	0x3fcfffff
 8004fd0:	3ff00000 	.word	0x3ff00000
 8004fd4:	7ff00000 	.word	0x7ff00000
 8004fd8:	7fe00000 	.word	0x7fe00000
 8004fdc:	7c9fffff 	.word	0x7c9fffff
 8004fe0:	3fe00000 	.word	0x3fe00000
 8004fe4:	bff00000 	.word	0xbff00000
 8004fe8:	7fefffff 	.word	0x7fefffff

08004fec <_strtod_r>:
 8004fec:	4b01      	ldr	r3, [pc, #4]	; (8004ff4 <_strtod_r+0x8>)
 8004fee:	f7ff b9f7 	b.w	80043e0 <_strtod_l>
 8004ff2:	bf00      	nop
 8004ff4:	2000006c 	.word	0x2000006c

08004ff8 <_strtol_l.constprop.0>:
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffe:	d001      	beq.n	8005004 <_strtol_l.constprop.0+0xc>
 8005000:	2b24      	cmp	r3, #36	; 0x24
 8005002:	d906      	bls.n	8005012 <_strtol_l.constprop.0+0x1a>
 8005004:	f7fe fa8a 	bl	800351c <__errno>
 8005008:	2316      	movs	r3, #22
 800500a:	6003      	str	r3, [r0, #0]
 800500c:	2000      	movs	r0, #0
 800500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005012:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80050f8 <_strtol_l.constprop.0+0x100>
 8005016:	460d      	mov	r5, r1
 8005018:	462e      	mov	r6, r5
 800501a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800501e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005022:	f017 0708 	ands.w	r7, r7, #8
 8005026:	d1f7      	bne.n	8005018 <_strtol_l.constprop.0+0x20>
 8005028:	2c2d      	cmp	r4, #45	; 0x2d
 800502a:	d132      	bne.n	8005092 <_strtol_l.constprop.0+0x9a>
 800502c:	782c      	ldrb	r4, [r5, #0]
 800502e:	2701      	movs	r7, #1
 8005030:	1cb5      	adds	r5, r6, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d05b      	beq.n	80050ee <_strtol_l.constprop.0+0xf6>
 8005036:	2b10      	cmp	r3, #16
 8005038:	d109      	bne.n	800504e <_strtol_l.constprop.0+0x56>
 800503a:	2c30      	cmp	r4, #48	; 0x30
 800503c:	d107      	bne.n	800504e <_strtol_l.constprop.0+0x56>
 800503e:	782c      	ldrb	r4, [r5, #0]
 8005040:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005044:	2c58      	cmp	r4, #88	; 0x58
 8005046:	d14d      	bne.n	80050e4 <_strtol_l.constprop.0+0xec>
 8005048:	786c      	ldrb	r4, [r5, #1]
 800504a:	2310      	movs	r3, #16
 800504c:	3502      	adds	r5, #2
 800504e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005052:	f108 38ff 	add.w	r8, r8, #4294967295
 8005056:	f04f 0c00 	mov.w	ip, #0
 800505a:	fbb8 f9f3 	udiv	r9, r8, r3
 800505e:	4666      	mov	r6, ip
 8005060:	fb03 8a19 	mls	sl, r3, r9, r8
 8005064:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005068:	f1be 0f09 	cmp.w	lr, #9
 800506c:	d816      	bhi.n	800509c <_strtol_l.constprop.0+0xa4>
 800506e:	4674      	mov	r4, lr
 8005070:	42a3      	cmp	r3, r4
 8005072:	dd24      	ble.n	80050be <_strtol_l.constprop.0+0xc6>
 8005074:	f1bc 0f00 	cmp.w	ip, #0
 8005078:	db1e      	blt.n	80050b8 <_strtol_l.constprop.0+0xc0>
 800507a:	45b1      	cmp	r9, r6
 800507c:	d31c      	bcc.n	80050b8 <_strtol_l.constprop.0+0xc0>
 800507e:	d101      	bne.n	8005084 <_strtol_l.constprop.0+0x8c>
 8005080:	45a2      	cmp	sl, r4
 8005082:	db19      	blt.n	80050b8 <_strtol_l.constprop.0+0xc0>
 8005084:	fb06 4603 	mla	r6, r6, r3, r4
 8005088:	f04f 0c01 	mov.w	ip, #1
 800508c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005090:	e7e8      	b.n	8005064 <_strtol_l.constprop.0+0x6c>
 8005092:	2c2b      	cmp	r4, #43	; 0x2b
 8005094:	bf04      	itt	eq
 8005096:	782c      	ldrbeq	r4, [r5, #0]
 8005098:	1cb5      	addeq	r5, r6, #2
 800509a:	e7ca      	b.n	8005032 <_strtol_l.constprop.0+0x3a>
 800509c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80050a0:	f1be 0f19 	cmp.w	lr, #25
 80050a4:	d801      	bhi.n	80050aa <_strtol_l.constprop.0+0xb2>
 80050a6:	3c37      	subs	r4, #55	; 0x37
 80050a8:	e7e2      	b.n	8005070 <_strtol_l.constprop.0+0x78>
 80050aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80050ae:	f1be 0f19 	cmp.w	lr, #25
 80050b2:	d804      	bhi.n	80050be <_strtol_l.constprop.0+0xc6>
 80050b4:	3c57      	subs	r4, #87	; 0x57
 80050b6:	e7db      	b.n	8005070 <_strtol_l.constprop.0+0x78>
 80050b8:	f04f 3cff 	mov.w	ip, #4294967295
 80050bc:	e7e6      	b.n	800508c <_strtol_l.constprop.0+0x94>
 80050be:	f1bc 0f00 	cmp.w	ip, #0
 80050c2:	da05      	bge.n	80050d0 <_strtol_l.constprop.0+0xd8>
 80050c4:	2322      	movs	r3, #34	; 0x22
 80050c6:	6003      	str	r3, [r0, #0]
 80050c8:	4646      	mov	r6, r8
 80050ca:	b942      	cbnz	r2, 80050de <_strtol_l.constprop.0+0xe6>
 80050cc:	4630      	mov	r0, r6
 80050ce:	e79e      	b.n	800500e <_strtol_l.constprop.0+0x16>
 80050d0:	b107      	cbz	r7, 80050d4 <_strtol_l.constprop.0+0xdc>
 80050d2:	4276      	negs	r6, r6
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d0f9      	beq.n	80050cc <_strtol_l.constprop.0+0xd4>
 80050d8:	f1bc 0f00 	cmp.w	ip, #0
 80050dc:	d000      	beq.n	80050e0 <_strtol_l.constprop.0+0xe8>
 80050de:	1e69      	subs	r1, r5, #1
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	e7f3      	b.n	80050cc <_strtol_l.constprop.0+0xd4>
 80050e4:	2430      	movs	r4, #48	; 0x30
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1b1      	bne.n	800504e <_strtol_l.constprop.0+0x56>
 80050ea:	2308      	movs	r3, #8
 80050ec:	e7af      	b.n	800504e <_strtol_l.constprop.0+0x56>
 80050ee:	2c30      	cmp	r4, #48	; 0x30
 80050f0:	d0a5      	beq.n	800503e <_strtol_l.constprop.0+0x46>
 80050f2:	230a      	movs	r3, #10
 80050f4:	e7ab      	b.n	800504e <_strtol_l.constprop.0+0x56>
 80050f6:	bf00      	nop
 80050f8:	08008d91 	.word	0x08008d91

080050fc <_strtol_r>:
 80050fc:	f7ff bf7c 	b.w	8004ff8 <_strtol_l.constprop.0>

08005100 <_write_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d07      	ldr	r5, [pc, #28]	; (8005120 <_write_r+0x20>)
 8005104:	4604      	mov	r4, r0
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	2200      	movs	r2, #0
 800510c:	602a      	str	r2, [r5, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f7fc fcd1 	bl	8001ab6 <_write>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_write_r+0x1e>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_write_r+0x1e>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	200003fc 	.word	0x200003fc

08005124 <_close_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_close_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	f7fc fcdd 	bl	8001aee <_close>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_close_r+0x1a>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_close_r+0x1a>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	200003fc 	.word	0x200003fc

08005144 <quorem>:
 8005144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	6903      	ldr	r3, [r0, #16]
 800514a:	690c      	ldr	r4, [r1, #16]
 800514c:	42a3      	cmp	r3, r4
 800514e:	4607      	mov	r7, r0
 8005150:	f2c0 8081 	blt.w	8005256 <quorem+0x112>
 8005154:	3c01      	subs	r4, #1
 8005156:	f101 0814 	add.w	r8, r1, #20
 800515a:	f100 0514 	add.w	r5, r0, #20
 800515e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800516c:	3301      	adds	r3, #1
 800516e:	429a      	cmp	r2, r3
 8005170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005178:	fbb2 f6f3 	udiv	r6, r2, r3
 800517c:	d331      	bcc.n	80051e2 <quorem+0x9e>
 800517e:	f04f 0e00 	mov.w	lr, #0
 8005182:	4640      	mov	r0, r8
 8005184:	46ac      	mov	ip, r5
 8005186:	46f2      	mov	sl, lr
 8005188:	f850 2b04 	ldr.w	r2, [r0], #4
 800518c:	b293      	uxth	r3, r2
 800518e:	fb06 e303 	mla	r3, r6, r3, lr
 8005192:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005196:	b29b      	uxth	r3, r3
 8005198:	ebaa 0303 	sub.w	r3, sl, r3
 800519c:	f8dc a000 	ldr.w	sl, [ip]
 80051a0:	0c12      	lsrs	r2, r2, #16
 80051a2:	fa13 f38a 	uxtah	r3, r3, sl
 80051a6:	fb06 e202 	mla	r2, r6, r2, lr
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051b2:	b292      	uxth	r2, r2
 80051b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80051c0:	4581      	cmp	r9, r0
 80051c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051c6:	f84c 3b04 	str.w	r3, [ip], #4
 80051ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051ce:	d2db      	bcs.n	8005188 <quorem+0x44>
 80051d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80051d4:	b92b      	cbnz	r3, 80051e2 <quorem+0x9e>
 80051d6:	9b01      	ldr	r3, [sp, #4]
 80051d8:	3b04      	subs	r3, #4
 80051da:	429d      	cmp	r5, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	d32e      	bcc.n	800523e <quorem+0xfa>
 80051e0:	613c      	str	r4, [r7, #16]
 80051e2:	4638      	mov	r0, r7
 80051e4:	f001 fca4 	bl	8006b30 <__mcmp>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	db24      	blt.n	8005236 <quorem+0xf2>
 80051ec:	3601      	adds	r6, #1
 80051ee:	4628      	mov	r0, r5
 80051f0:	f04f 0c00 	mov.w	ip, #0
 80051f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80051f8:	f8d0 e000 	ldr.w	lr, [r0]
 80051fc:	b293      	uxth	r3, r2
 80051fe:	ebac 0303 	sub.w	r3, ip, r3
 8005202:	0c12      	lsrs	r2, r2, #16
 8005204:	fa13 f38e 	uxtah	r3, r3, lr
 8005208:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800520c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005216:	45c1      	cmp	r9, r8
 8005218:	f840 3b04 	str.w	r3, [r0], #4
 800521c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005220:	d2e8      	bcs.n	80051f4 <quorem+0xb0>
 8005222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800522a:	b922      	cbnz	r2, 8005236 <quorem+0xf2>
 800522c:	3b04      	subs	r3, #4
 800522e:	429d      	cmp	r5, r3
 8005230:	461a      	mov	r2, r3
 8005232:	d30a      	bcc.n	800524a <quorem+0x106>
 8005234:	613c      	str	r4, [r7, #16]
 8005236:	4630      	mov	r0, r6
 8005238:	b003      	add	sp, #12
 800523a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	3b04      	subs	r3, #4
 8005242:	2a00      	cmp	r2, #0
 8005244:	d1cc      	bne.n	80051e0 <quorem+0x9c>
 8005246:	3c01      	subs	r4, #1
 8005248:	e7c7      	b.n	80051da <quorem+0x96>
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	3b04      	subs	r3, #4
 800524e:	2a00      	cmp	r2, #0
 8005250:	d1f0      	bne.n	8005234 <quorem+0xf0>
 8005252:	3c01      	subs	r4, #1
 8005254:	e7eb      	b.n	800522e <quorem+0xea>
 8005256:	2000      	movs	r0, #0
 8005258:	e7ee      	b.n	8005238 <quorem+0xf4>
 800525a:	0000      	movs	r0, r0
 800525c:	0000      	movs	r0, r0
	...

08005260 <_dtoa_r>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	ed2d 8b04 	vpush	{d8-d9}
 8005268:	ec57 6b10 	vmov	r6, r7, d0
 800526c:	b093      	sub	sp, #76	; 0x4c
 800526e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005274:	9106      	str	r1, [sp, #24]
 8005276:	ee10 aa10 	vmov	sl, s0
 800527a:	4604      	mov	r4, r0
 800527c:	9209      	str	r2, [sp, #36]	; 0x24
 800527e:	930c      	str	r3, [sp, #48]	; 0x30
 8005280:	46bb      	mov	fp, r7
 8005282:	b975      	cbnz	r5, 80052a2 <_dtoa_r+0x42>
 8005284:	2010      	movs	r0, #16
 8005286:	f001 f95f 	bl	8006548 <malloc>
 800528a:	4602      	mov	r2, r0
 800528c:	6260      	str	r0, [r4, #36]	; 0x24
 800528e:	b920      	cbnz	r0, 800529a <_dtoa_r+0x3a>
 8005290:	4ba7      	ldr	r3, [pc, #668]	; (8005530 <_dtoa_r+0x2d0>)
 8005292:	21ea      	movs	r1, #234	; 0xea
 8005294:	48a7      	ldr	r0, [pc, #668]	; (8005534 <_dtoa_r+0x2d4>)
 8005296:	f002 fceb 	bl	8007c70 <__assert_func>
 800529a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800529e:	6005      	str	r5, [r0, #0]
 80052a0:	60c5      	str	r5, [r0, #12]
 80052a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	b151      	cbz	r1, 80052be <_dtoa_r+0x5e>
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	604a      	str	r2, [r1, #4]
 80052ac:	2301      	movs	r3, #1
 80052ae:	4093      	lsls	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
 80052b2:	4620      	mov	r0, r4
 80052b4:	f001 f9b0 	bl	8006618 <_Bfree>
 80052b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	1e3b      	subs	r3, r7, #0
 80052c0:	bfaa      	itet	ge
 80052c2:	2300      	movge	r3, #0
 80052c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80052c8:	f8c8 3000 	strge.w	r3, [r8]
 80052cc:	4b9a      	ldr	r3, [pc, #616]	; (8005538 <_dtoa_r+0x2d8>)
 80052ce:	bfbc      	itt	lt
 80052d0:	2201      	movlt	r2, #1
 80052d2:	f8c8 2000 	strlt.w	r2, [r8]
 80052d6:	ea33 030b 	bics.w	r3, r3, fp
 80052da:	d11b      	bne.n	8005314 <_dtoa_r+0xb4>
 80052dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052de:	f242 730f 	movw	r3, #9999	; 0x270f
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052e8:	4333      	orrs	r3, r6
 80052ea:	f000 8592 	beq.w	8005e12 <_dtoa_r+0xbb2>
 80052ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f0:	b963      	cbnz	r3, 800530c <_dtoa_r+0xac>
 80052f2:	4b92      	ldr	r3, [pc, #584]	; (800553c <_dtoa_r+0x2dc>)
 80052f4:	e022      	b.n	800533c <_dtoa_r+0xdc>
 80052f6:	4b92      	ldr	r3, [pc, #584]	; (8005540 <_dtoa_r+0x2e0>)
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	3308      	adds	r3, #8
 80052fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	9801      	ldr	r0, [sp, #4]
 8005302:	b013      	add	sp, #76	; 0x4c
 8005304:	ecbd 8b04 	vpop	{d8-d9}
 8005308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530c:	4b8b      	ldr	r3, [pc, #556]	; (800553c <_dtoa_r+0x2dc>)
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	3303      	adds	r3, #3
 8005312:	e7f3      	b.n	80052fc <_dtoa_r+0x9c>
 8005314:	2200      	movs	r2, #0
 8005316:	2300      	movs	r3, #0
 8005318:	4650      	mov	r0, sl
 800531a:	4659      	mov	r1, fp
 800531c:	f7fb fbec 	bl	8000af8 <__aeabi_dcmpeq>
 8005320:	ec4b ab19 	vmov	d9, sl, fp
 8005324:	4680      	mov	r8, r0
 8005326:	b158      	cbz	r0, 8005340 <_dtoa_r+0xe0>
 8005328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800532a:	2301      	movs	r3, #1
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 856b 	beq.w	8005e0c <_dtoa_r+0xbac>
 8005336:	4883      	ldr	r0, [pc, #524]	; (8005544 <_dtoa_r+0x2e4>)
 8005338:	6018      	str	r0, [r3, #0]
 800533a:	1e43      	subs	r3, r0, #1
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	e7df      	b.n	8005300 <_dtoa_r+0xa0>
 8005340:	ec4b ab10 	vmov	d0, sl, fp
 8005344:	aa10      	add	r2, sp, #64	; 0x40
 8005346:	a911      	add	r1, sp, #68	; 0x44
 8005348:	4620      	mov	r0, r4
 800534a:	f001 fd13 	bl	8006d74 <__d2b>
 800534e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005352:	ee08 0a10 	vmov	s16, r0
 8005356:	2d00      	cmp	r5, #0
 8005358:	f000 8084 	beq.w	8005464 <_dtoa_r+0x204>
 800535c:	ee19 3a90 	vmov	r3, s19
 8005360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005368:	4656      	mov	r6, sl
 800536a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800536e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005376:	4b74      	ldr	r3, [pc, #464]	; (8005548 <_dtoa_r+0x2e8>)
 8005378:	2200      	movs	r2, #0
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	f7fa ff9b 	bl	80002b8 <__aeabi_dsub>
 8005382:	a365      	add	r3, pc, #404	; (adr r3, 8005518 <_dtoa_r+0x2b8>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f94e 	bl	8000628 <__aeabi_dmul>
 800538c:	a364      	add	r3, pc, #400	; (adr r3, 8005520 <_dtoa_r+0x2c0>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fa ff93 	bl	80002bc <__adddf3>
 8005396:	4606      	mov	r6, r0
 8005398:	4628      	mov	r0, r5
 800539a:	460f      	mov	r7, r1
 800539c:	f7fb f8da 	bl	8000554 <__aeabi_i2d>
 80053a0:	a361      	add	r3, pc, #388	; (adr r3, 8005528 <_dtoa_r+0x2c8>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f93f 	bl	8000628 <__aeabi_dmul>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fa ff83 	bl	80002bc <__adddf3>
 80053b6:	4606      	mov	r6, r0
 80053b8:	460f      	mov	r7, r1
 80053ba:	f7fb fbe5 	bl	8000b88 <__aeabi_d2iz>
 80053be:	2200      	movs	r2, #0
 80053c0:	9000      	str	r0, [sp, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb fba0 	bl	8000b0c <__aeabi_dcmplt>
 80053cc:	b150      	cbz	r0, 80053e4 <_dtoa_r+0x184>
 80053ce:	9800      	ldr	r0, [sp, #0]
 80053d0:	f7fb f8c0 	bl	8000554 <__aeabi_i2d>
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	f7fb fb8e 	bl	8000af8 <__aeabi_dcmpeq>
 80053dc:	b910      	cbnz	r0, 80053e4 <_dtoa_r+0x184>
 80053de:	9b00      	ldr	r3, [sp, #0]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	9b00      	ldr	r3, [sp, #0]
 80053e6:	2b16      	cmp	r3, #22
 80053e8:	d85a      	bhi.n	80054a0 <_dtoa_r+0x240>
 80053ea:	9a00      	ldr	r2, [sp, #0]
 80053ec:	4b57      	ldr	r3, [pc, #348]	; (800554c <_dtoa_r+0x2ec>)
 80053ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	ec51 0b19 	vmov	r0, r1, d9
 80053fa:	f7fb fb87 	bl	8000b0c <__aeabi_dcmplt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d050      	beq.n	80054a4 <_dtoa_r+0x244>
 8005402:	9b00      	ldr	r3, [sp, #0]
 8005404:	3b01      	subs	r3, #1
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2300      	movs	r3, #0
 800540a:	930b      	str	r3, [sp, #44]	; 0x2c
 800540c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800540e:	1b5d      	subs	r5, r3, r5
 8005410:	1e6b      	subs	r3, r5, #1
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	bf45      	ittet	mi
 8005416:	f1c5 0301 	rsbmi	r3, r5, #1
 800541a:	9304      	strmi	r3, [sp, #16]
 800541c:	2300      	movpl	r3, #0
 800541e:	2300      	movmi	r3, #0
 8005420:	bf4c      	ite	mi
 8005422:	9305      	strmi	r3, [sp, #20]
 8005424:	9304      	strpl	r3, [sp, #16]
 8005426:	9b00      	ldr	r3, [sp, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db3d      	blt.n	80054a8 <_dtoa_r+0x248>
 800542c:	9b05      	ldr	r3, [sp, #20]
 800542e:	9a00      	ldr	r2, [sp, #0]
 8005430:	920a      	str	r2, [sp, #40]	; 0x28
 8005432:	4413      	add	r3, r2
 8005434:	9305      	str	r3, [sp, #20]
 8005436:	2300      	movs	r3, #0
 8005438:	9307      	str	r3, [sp, #28]
 800543a:	9b06      	ldr	r3, [sp, #24]
 800543c:	2b09      	cmp	r3, #9
 800543e:	f200 8089 	bhi.w	8005554 <_dtoa_r+0x2f4>
 8005442:	2b05      	cmp	r3, #5
 8005444:	bfc4      	itt	gt
 8005446:	3b04      	subgt	r3, #4
 8005448:	9306      	strgt	r3, [sp, #24]
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	f1a3 0302 	sub.w	r3, r3, #2
 8005450:	bfcc      	ite	gt
 8005452:	2500      	movgt	r5, #0
 8005454:	2501      	movle	r5, #1
 8005456:	2b03      	cmp	r3, #3
 8005458:	f200 8087 	bhi.w	800556a <_dtoa_r+0x30a>
 800545c:	e8df f003 	tbb	[pc, r3]
 8005460:	59383a2d 	.word	0x59383a2d
 8005464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005468:	441d      	add	r5, r3
 800546a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800546e:	2b20      	cmp	r3, #32
 8005470:	bfc1      	itttt	gt
 8005472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800547a:	fa0b f303 	lslgt.w	r3, fp, r3
 800547e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005482:	bfda      	itte	le
 8005484:	f1c3 0320 	rsble	r3, r3, #32
 8005488:	fa06 f003 	lslle.w	r0, r6, r3
 800548c:	4318      	orrgt	r0, r3
 800548e:	f7fb f851 	bl	8000534 <__aeabi_ui2d>
 8005492:	2301      	movs	r3, #1
 8005494:	4606      	mov	r6, r0
 8005496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800549a:	3d01      	subs	r5, #1
 800549c:	930e      	str	r3, [sp, #56]	; 0x38
 800549e:	e76a      	b.n	8005376 <_dtoa_r+0x116>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e7b2      	b.n	800540a <_dtoa_r+0x1aa>
 80054a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80054a6:	e7b1      	b.n	800540c <_dtoa_r+0x1ac>
 80054a8:	9b04      	ldr	r3, [sp, #16]
 80054aa:	9a00      	ldr	r2, [sp, #0]
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	4253      	negs	r3, r2
 80054b2:	9307      	str	r3, [sp, #28]
 80054b4:	2300      	movs	r3, #0
 80054b6:	930a      	str	r3, [sp, #40]	; 0x28
 80054b8:	e7bf      	b.n	800543a <_dtoa_r+0x1da>
 80054ba:	2300      	movs	r3, #0
 80054bc:	9308      	str	r3, [sp, #32]
 80054be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dc55      	bgt.n	8005570 <_dtoa_r+0x310>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054ca:	461a      	mov	r2, r3
 80054cc:	9209      	str	r2, [sp, #36]	; 0x24
 80054ce:	e00c      	b.n	80054ea <_dtoa_r+0x28a>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e7f3      	b.n	80054bc <_dtoa_r+0x25c>
 80054d4:	2300      	movs	r3, #0
 80054d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d8:	9308      	str	r3, [sp, #32]
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	9302      	str	r3, [sp, #8]
 80054e0:	3301      	adds	r3, #1
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	9303      	str	r3, [sp, #12]
 80054e6:	bfb8      	it	lt
 80054e8:	2301      	movlt	r3, #1
 80054ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054ec:	2200      	movs	r2, #0
 80054ee:	6042      	str	r2, [r0, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	f102 0614 	add.w	r6, r2, #20
 80054f6:	429e      	cmp	r6, r3
 80054f8:	6841      	ldr	r1, [r0, #4]
 80054fa:	d93d      	bls.n	8005578 <_dtoa_r+0x318>
 80054fc:	4620      	mov	r0, r4
 80054fe:	f001 f84b 	bl	8006598 <_Balloc>
 8005502:	9001      	str	r0, [sp, #4]
 8005504:	2800      	cmp	r0, #0
 8005506:	d13b      	bne.n	8005580 <_dtoa_r+0x320>
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <_dtoa_r+0x2f0>)
 800550a:	4602      	mov	r2, r0
 800550c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005510:	e6c0      	b.n	8005294 <_dtoa_r+0x34>
 8005512:	2301      	movs	r3, #1
 8005514:	e7df      	b.n	80054d6 <_dtoa_r+0x276>
 8005516:	bf00      	nop
 8005518:	636f4361 	.word	0x636f4361
 800551c:	3fd287a7 	.word	0x3fd287a7
 8005520:	8b60c8b3 	.word	0x8b60c8b3
 8005524:	3fc68a28 	.word	0x3fc68a28
 8005528:	509f79fb 	.word	0x509f79fb
 800552c:	3fd34413 	.word	0x3fd34413
 8005530:	08008e9e 	.word	0x08008e9e
 8005534:	08008eb5 	.word	0x08008eb5
 8005538:	7ff00000 	.word	0x7ff00000
 800553c:	08008e9a 	.word	0x08008e9a
 8005540:	08008e91 	.word	0x08008e91
 8005544:	0800910a 	.word	0x0800910a
 8005548:	3ff80000 	.word	0x3ff80000
 800554c:	08009020 	.word	0x08009020
 8005550:	08008f10 	.word	0x08008f10
 8005554:	2501      	movs	r5, #1
 8005556:	2300      	movs	r3, #0
 8005558:	9306      	str	r3, [sp, #24]
 800555a:	9508      	str	r5, [sp, #32]
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005564:	2200      	movs	r2, #0
 8005566:	2312      	movs	r3, #18
 8005568:	e7b0      	b.n	80054cc <_dtoa_r+0x26c>
 800556a:	2301      	movs	r3, #1
 800556c:	9308      	str	r3, [sp, #32]
 800556e:	e7f5      	b.n	800555c <_dtoa_r+0x2fc>
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005576:	e7b8      	b.n	80054ea <_dtoa_r+0x28a>
 8005578:	3101      	adds	r1, #1
 800557a:	6041      	str	r1, [r0, #4]
 800557c:	0052      	lsls	r2, r2, #1
 800557e:	e7b8      	b.n	80054f2 <_dtoa_r+0x292>
 8005580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005582:	9a01      	ldr	r2, [sp, #4]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	2b0e      	cmp	r3, #14
 800558a:	f200 809d 	bhi.w	80056c8 <_dtoa_r+0x468>
 800558e:	2d00      	cmp	r5, #0
 8005590:	f000 809a 	beq.w	80056c8 <_dtoa_r+0x468>
 8005594:	9b00      	ldr	r3, [sp, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd32      	ble.n	8005600 <_dtoa_r+0x3a0>
 800559a:	4ab7      	ldr	r2, [pc, #732]	; (8005878 <_dtoa_r+0x618>)
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055a8:	9b00      	ldr	r3, [sp, #0]
 80055aa:	05d8      	lsls	r0, r3, #23
 80055ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055b0:	d516      	bpl.n	80055e0 <_dtoa_r+0x380>
 80055b2:	4bb2      	ldr	r3, [pc, #712]	; (800587c <_dtoa_r+0x61c>)
 80055b4:	ec51 0b19 	vmov	r0, r1, d9
 80055b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055bc:	f7fb f95e 	bl	800087c <__aeabi_ddiv>
 80055c0:	f007 070f 	and.w	r7, r7, #15
 80055c4:	4682      	mov	sl, r0
 80055c6:	468b      	mov	fp, r1
 80055c8:	2503      	movs	r5, #3
 80055ca:	4eac      	ldr	r6, [pc, #688]	; (800587c <_dtoa_r+0x61c>)
 80055cc:	b957      	cbnz	r7, 80055e4 <_dtoa_r+0x384>
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	4650      	mov	r0, sl
 80055d4:	4659      	mov	r1, fp
 80055d6:	f7fb f951 	bl	800087c <__aeabi_ddiv>
 80055da:	4682      	mov	sl, r0
 80055dc:	468b      	mov	fp, r1
 80055de:	e028      	b.n	8005632 <_dtoa_r+0x3d2>
 80055e0:	2502      	movs	r5, #2
 80055e2:	e7f2      	b.n	80055ca <_dtoa_r+0x36a>
 80055e4:	07f9      	lsls	r1, r7, #31
 80055e6:	d508      	bpl.n	80055fa <_dtoa_r+0x39a>
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055f0:	f7fb f81a 	bl	8000628 <__aeabi_dmul>
 80055f4:	3501      	adds	r5, #1
 80055f6:	4680      	mov	r8, r0
 80055f8:	4689      	mov	r9, r1
 80055fa:	107f      	asrs	r7, r7, #1
 80055fc:	3608      	adds	r6, #8
 80055fe:	e7e5      	b.n	80055cc <_dtoa_r+0x36c>
 8005600:	f000 809b 	beq.w	800573a <_dtoa_r+0x4da>
 8005604:	9b00      	ldr	r3, [sp, #0]
 8005606:	4f9d      	ldr	r7, [pc, #628]	; (800587c <_dtoa_r+0x61c>)
 8005608:	425e      	negs	r6, r3
 800560a:	4b9b      	ldr	r3, [pc, #620]	; (8005878 <_dtoa_r+0x618>)
 800560c:	f006 020f 	and.w	r2, r6, #15
 8005610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	ec51 0b19 	vmov	r0, r1, d9
 800561c:	f7fb f804 	bl	8000628 <__aeabi_dmul>
 8005620:	1136      	asrs	r6, r6, #4
 8005622:	4682      	mov	sl, r0
 8005624:	468b      	mov	fp, r1
 8005626:	2300      	movs	r3, #0
 8005628:	2502      	movs	r5, #2
 800562a:	2e00      	cmp	r6, #0
 800562c:	d17a      	bne.n	8005724 <_dtoa_r+0x4c4>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1d3      	bne.n	80055da <_dtoa_r+0x37a>
 8005632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8082 	beq.w	800573e <_dtoa_r+0x4de>
 800563a:	4b91      	ldr	r3, [pc, #580]	; (8005880 <_dtoa_r+0x620>)
 800563c:	2200      	movs	r2, #0
 800563e:	4650      	mov	r0, sl
 8005640:	4659      	mov	r1, fp
 8005642:	f7fb fa63 	bl	8000b0c <__aeabi_dcmplt>
 8005646:	2800      	cmp	r0, #0
 8005648:	d079      	beq.n	800573e <_dtoa_r+0x4de>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d076      	beq.n	800573e <_dtoa_r+0x4de>
 8005650:	9b02      	ldr	r3, [sp, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	dd36      	ble.n	80056c4 <_dtoa_r+0x464>
 8005656:	9b00      	ldr	r3, [sp, #0]
 8005658:	4650      	mov	r0, sl
 800565a:	4659      	mov	r1, fp
 800565c:	1e5f      	subs	r7, r3, #1
 800565e:	2200      	movs	r2, #0
 8005660:	4b88      	ldr	r3, [pc, #544]	; (8005884 <_dtoa_r+0x624>)
 8005662:	f7fa ffe1 	bl	8000628 <__aeabi_dmul>
 8005666:	9e02      	ldr	r6, [sp, #8]
 8005668:	4682      	mov	sl, r0
 800566a:	468b      	mov	fp, r1
 800566c:	3501      	adds	r5, #1
 800566e:	4628      	mov	r0, r5
 8005670:	f7fa ff70 	bl	8000554 <__aeabi_i2d>
 8005674:	4652      	mov	r2, sl
 8005676:	465b      	mov	r3, fp
 8005678:	f7fa ffd6 	bl	8000628 <__aeabi_dmul>
 800567c:	4b82      	ldr	r3, [pc, #520]	; (8005888 <_dtoa_r+0x628>)
 800567e:	2200      	movs	r2, #0
 8005680:	f7fa fe1c 	bl	80002bc <__adddf3>
 8005684:	46d0      	mov	r8, sl
 8005686:	46d9      	mov	r9, fp
 8005688:	4682      	mov	sl, r0
 800568a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800568e:	2e00      	cmp	r6, #0
 8005690:	d158      	bne.n	8005744 <_dtoa_r+0x4e4>
 8005692:	4b7e      	ldr	r3, [pc, #504]	; (800588c <_dtoa_r+0x62c>)
 8005694:	2200      	movs	r2, #0
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f7fa fe0d 	bl	80002b8 <__aeabi_dsub>
 800569e:	4652      	mov	r2, sl
 80056a0:	465b      	mov	r3, fp
 80056a2:	4680      	mov	r8, r0
 80056a4:	4689      	mov	r9, r1
 80056a6:	f7fb fa4f 	bl	8000b48 <__aeabi_dcmpgt>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	f040 8295 	bne.w	8005bda <_dtoa_r+0x97a>
 80056b0:	4652      	mov	r2, sl
 80056b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056b6:	4640      	mov	r0, r8
 80056b8:	4649      	mov	r1, r9
 80056ba:	f7fb fa27 	bl	8000b0c <__aeabi_dcmplt>
 80056be:	2800      	cmp	r0, #0
 80056c0:	f040 8289 	bne.w	8005bd6 <_dtoa_r+0x976>
 80056c4:	ec5b ab19 	vmov	sl, fp, d9
 80056c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f2c0 8148 	blt.w	8005960 <_dtoa_r+0x700>
 80056d0:	9a00      	ldr	r2, [sp, #0]
 80056d2:	2a0e      	cmp	r2, #14
 80056d4:	f300 8144 	bgt.w	8005960 <_dtoa_r+0x700>
 80056d8:	4b67      	ldr	r3, [pc, #412]	; (8005878 <_dtoa_r+0x618>)
 80056da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f280 80d5 	bge.w	8005894 <_dtoa_r+0x634>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f300 80d1 	bgt.w	8005894 <_dtoa_r+0x634>
 80056f2:	f040 826f 	bne.w	8005bd4 <_dtoa_r+0x974>
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <_dtoa_r+0x62c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fa ff93 	bl	8000628 <__aeabi_dmul>
 8005702:	4652      	mov	r2, sl
 8005704:	465b      	mov	r3, fp
 8005706:	f7fb fa15 	bl	8000b34 <__aeabi_dcmpge>
 800570a:	9e03      	ldr	r6, [sp, #12]
 800570c:	4637      	mov	r7, r6
 800570e:	2800      	cmp	r0, #0
 8005710:	f040 8245 	bne.w	8005b9e <_dtoa_r+0x93e>
 8005714:	9d01      	ldr	r5, [sp, #4]
 8005716:	2331      	movs	r3, #49	; 0x31
 8005718:	f805 3b01 	strb.w	r3, [r5], #1
 800571c:	9b00      	ldr	r3, [sp, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	e240      	b.n	8005ba6 <_dtoa_r+0x946>
 8005724:	07f2      	lsls	r2, r6, #31
 8005726:	d505      	bpl.n	8005734 <_dtoa_r+0x4d4>
 8005728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572c:	f7fa ff7c 	bl	8000628 <__aeabi_dmul>
 8005730:	3501      	adds	r5, #1
 8005732:	2301      	movs	r3, #1
 8005734:	1076      	asrs	r6, r6, #1
 8005736:	3708      	adds	r7, #8
 8005738:	e777      	b.n	800562a <_dtoa_r+0x3ca>
 800573a:	2502      	movs	r5, #2
 800573c:	e779      	b.n	8005632 <_dtoa_r+0x3d2>
 800573e:	9f00      	ldr	r7, [sp, #0]
 8005740:	9e03      	ldr	r6, [sp, #12]
 8005742:	e794      	b.n	800566e <_dtoa_r+0x40e>
 8005744:	9901      	ldr	r1, [sp, #4]
 8005746:	4b4c      	ldr	r3, [pc, #304]	; (8005878 <_dtoa_r+0x618>)
 8005748:	4431      	add	r1, r6
 800574a:	910d      	str	r1, [sp, #52]	; 0x34
 800574c:	9908      	ldr	r1, [sp, #32]
 800574e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005756:	2900      	cmp	r1, #0
 8005758:	d043      	beq.n	80057e2 <_dtoa_r+0x582>
 800575a:	494d      	ldr	r1, [pc, #308]	; (8005890 <_dtoa_r+0x630>)
 800575c:	2000      	movs	r0, #0
 800575e:	f7fb f88d 	bl	800087c <__aeabi_ddiv>
 8005762:	4652      	mov	r2, sl
 8005764:	465b      	mov	r3, fp
 8005766:	f7fa fda7 	bl	80002b8 <__aeabi_dsub>
 800576a:	9d01      	ldr	r5, [sp, #4]
 800576c:	4682      	mov	sl, r0
 800576e:	468b      	mov	fp, r1
 8005770:	4649      	mov	r1, r9
 8005772:	4640      	mov	r0, r8
 8005774:	f7fb fa08 	bl	8000b88 <__aeabi_d2iz>
 8005778:	4606      	mov	r6, r0
 800577a:	f7fa feeb 	bl	8000554 <__aeabi_i2d>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	f7fa fd97 	bl	80002b8 <__aeabi_dsub>
 800578a:	3630      	adds	r6, #48	; 0x30
 800578c:	f805 6b01 	strb.w	r6, [r5], #1
 8005790:	4652      	mov	r2, sl
 8005792:	465b      	mov	r3, fp
 8005794:	4680      	mov	r8, r0
 8005796:	4689      	mov	r9, r1
 8005798:	f7fb f9b8 	bl	8000b0c <__aeabi_dcmplt>
 800579c:	2800      	cmp	r0, #0
 800579e:	d163      	bne.n	8005868 <_dtoa_r+0x608>
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	4936      	ldr	r1, [pc, #216]	; (8005880 <_dtoa_r+0x620>)
 80057a6:	2000      	movs	r0, #0
 80057a8:	f7fa fd86 	bl	80002b8 <__aeabi_dsub>
 80057ac:	4652      	mov	r2, sl
 80057ae:	465b      	mov	r3, fp
 80057b0:	f7fb f9ac 	bl	8000b0c <__aeabi_dcmplt>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f040 80b5 	bne.w	8005924 <_dtoa_r+0x6c4>
 80057ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057bc:	429d      	cmp	r5, r3
 80057be:	d081      	beq.n	80056c4 <_dtoa_r+0x464>
 80057c0:	4b30      	ldr	r3, [pc, #192]	; (8005884 <_dtoa_r+0x624>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	4650      	mov	r0, sl
 80057c6:	4659      	mov	r1, fp
 80057c8:	f7fa ff2e 	bl	8000628 <__aeabi_dmul>
 80057cc:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <_dtoa_r+0x624>)
 80057ce:	4682      	mov	sl, r0
 80057d0:	468b      	mov	fp, r1
 80057d2:	4640      	mov	r0, r8
 80057d4:	4649      	mov	r1, r9
 80057d6:	2200      	movs	r2, #0
 80057d8:	f7fa ff26 	bl	8000628 <__aeabi_dmul>
 80057dc:	4680      	mov	r8, r0
 80057de:	4689      	mov	r9, r1
 80057e0:	e7c6      	b.n	8005770 <_dtoa_r+0x510>
 80057e2:	4650      	mov	r0, sl
 80057e4:	4659      	mov	r1, fp
 80057e6:	f7fa ff1f 	bl	8000628 <__aeabi_dmul>
 80057ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ec:	9d01      	ldr	r5, [sp, #4]
 80057ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80057f0:	4682      	mov	sl, r0
 80057f2:	468b      	mov	fp, r1
 80057f4:	4649      	mov	r1, r9
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7fb f9c6 	bl	8000b88 <__aeabi_d2iz>
 80057fc:	4606      	mov	r6, r0
 80057fe:	f7fa fea9 	bl	8000554 <__aeabi_i2d>
 8005802:	3630      	adds	r6, #48	; 0x30
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4640      	mov	r0, r8
 800580a:	4649      	mov	r1, r9
 800580c:	f7fa fd54 	bl	80002b8 <__aeabi_dsub>
 8005810:	f805 6b01 	strb.w	r6, [r5], #1
 8005814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005816:	429d      	cmp	r5, r3
 8005818:	4680      	mov	r8, r0
 800581a:	4689      	mov	r9, r1
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	d124      	bne.n	800586c <_dtoa_r+0x60c>
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <_dtoa_r+0x630>)
 8005824:	4650      	mov	r0, sl
 8005826:	4659      	mov	r1, fp
 8005828:	f7fa fd48 	bl	80002bc <__adddf3>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4640      	mov	r0, r8
 8005832:	4649      	mov	r1, r9
 8005834:	f7fb f988 	bl	8000b48 <__aeabi_dcmpgt>
 8005838:	2800      	cmp	r0, #0
 800583a:	d173      	bne.n	8005924 <_dtoa_r+0x6c4>
 800583c:	4652      	mov	r2, sl
 800583e:	465b      	mov	r3, fp
 8005840:	4913      	ldr	r1, [pc, #76]	; (8005890 <_dtoa_r+0x630>)
 8005842:	2000      	movs	r0, #0
 8005844:	f7fa fd38 	bl	80002b8 <__aeabi_dsub>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4640      	mov	r0, r8
 800584e:	4649      	mov	r1, r9
 8005850:	f7fb f95c 	bl	8000b0c <__aeabi_dcmplt>
 8005854:	2800      	cmp	r0, #0
 8005856:	f43f af35 	beq.w	80056c4 <_dtoa_r+0x464>
 800585a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800585c:	1e6b      	subs	r3, r5, #1
 800585e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005864:	2b30      	cmp	r3, #48	; 0x30
 8005866:	d0f8      	beq.n	800585a <_dtoa_r+0x5fa>
 8005868:	9700      	str	r7, [sp, #0]
 800586a:	e049      	b.n	8005900 <_dtoa_r+0x6a0>
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <_dtoa_r+0x624>)
 800586e:	f7fa fedb 	bl	8000628 <__aeabi_dmul>
 8005872:	4680      	mov	r8, r0
 8005874:	4689      	mov	r9, r1
 8005876:	e7bd      	b.n	80057f4 <_dtoa_r+0x594>
 8005878:	08009020 	.word	0x08009020
 800587c:	08008ff8 	.word	0x08008ff8
 8005880:	3ff00000 	.word	0x3ff00000
 8005884:	40240000 	.word	0x40240000
 8005888:	401c0000 	.word	0x401c0000
 800588c:	40140000 	.word	0x40140000
 8005890:	3fe00000 	.word	0x3fe00000
 8005894:	9d01      	ldr	r5, [sp, #4]
 8005896:	4656      	mov	r6, sl
 8005898:	465f      	mov	r7, fp
 800589a:	4642      	mov	r2, r8
 800589c:	464b      	mov	r3, r9
 800589e:	4630      	mov	r0, r6
 80058a0:	4639      	mov	r1, r7
 80058a2:	f7fa ffeb 	bl	800087c <__aeabi_ddiv>
 80058a6:	f7fb f96f 	bl	8000b88 <__aeabi_d2iz>
 80058aa:	4682      	mov	sl, r0
 80058ac:	f7fa fe52 	bl	8000554 <__aeabi_i2d>
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	f7fa feb8 	bl	8000628 <__aeabi_dmul>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058c4:	f7fa fcf8 	bl	80002b8 <__aeabi_dsub>
 80058c8:	f805 6b01 	strb.w	r6, [r5], #1
 80058cc:	9e01      	ldr	r6, [sp, #4]
 80058ce:	9f03      	ldr	r7, [sp, #12]
 80058d0:	1bae      	subs	r6, r5, r6
 80058d2:	42b7      	cmp	r7, r6
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	d135      	bne.n	8005946 <_dtoa_r+0x6e6>
 80058da:	f7fa fcef 	bl	80002bc <__adddf3>
 80058de:	4642      	mov	r2, r8
 80058e0:	464b      	mov	r3, r9
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	f7fb f92f 	bl	8000b48 <__aeabi_dcmpgt>
 80058ea:	b9d0      	cbnz	r0, 8005922 <_dtoa_r+0x6c2>
 80058ec:	4642      	mov	r2, r8
 80058ee:	464b      	mov	r3, r9
 80058f0:	4630      	mov	r0, r6
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fb f900 	bl	8000af8 <__aeabi_dcmpeq>
 80058f8:	b110      	cbz	r0, 8005900 <_dtoa_r+0x6a0>
 80058fa:	f01a 0f01 	tst.w	sl, #1
 80058fe:	d110      	bne.n	8005922 <_dtoa_r+0x6c2>
 8005900:	4620      	mov	r0, r4
 8005902:	ee18 1a10 	vmov	r1, s16
 8005906:	f000 fe87 	bl	8006618 <_Bfree>
 800590a:	2300      	movs	r3, #0
 800590c:	9800      	ldr	r0, [sp, #0]
 800590e:	702b      	strb	r3, [r5, #0]
 8005910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005912:	3001      	adds	r0, #1
 8005914:	6018      	str	r0, [r3, #0]
 8005916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005918:	2b00      	cmp	r3, #0
 800591a:	f43f acf1 	beq.w	8005300 <_dtoa_r+0xa0>
 800591e:	601d      	str	r5, [r3, #0]
 8005920:	e4ee      	b.n	8005300 <_dtoa_r+0xa0>
 8005922:	9f00      	ldr	r7, [sp, #0]
 8005924:	462b      	mov	r3, r5
 8005926:	461d      	mov	r5, r3
 8005928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800592c:	2a39      	cmp	r2, #57	; 0x39
 800592e:	d106      	bne.n	800593e <_dtoa_r+0x6de>
 8005930:	9a01      	ldr	r2, [sp, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d1f7      	bne.n	8005926 <_dtoa_r+0x6c6>
 8005936:	9901      	ldr	r1, [sp, #4]
 8005938:	2230      	movs	r2, #48	; 0x30
 800593a:	3701      	adds	r7, #1
 800593c:	700a      	strb	r2, [r1, #0]
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	3201      	adds	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e790      	b.n	8005868 <_dtoa_r+0x608>
 8005946:	4ba6      	ldr	r3, [pc, #664]	; (8005be0 <_dtoa_r+0x980>)
 8005948:	2200      	movs	r2, #0
 800594a:	f7fa fe6d 	bl	8000628 <__aeabi_dmul>
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	f7fb f8cf 	bl	8000af8 <__aeabi_dcmpeq>
 800595a:	2800      	cmp	r0, #0
 800595c:	d09d      	beq.n	800589a <_dtoa_r+0x63a>
 800595e:	e7cf      	b.n	8005900 <_dtoa_r+0x6a0>
 8005960:	9a08      	ldr	r2, [sp, #32]
 8005962:	2a00      	cmp	r2, #0
 8005964:	f000 80d7 	beq.w	8005b16 <_dtoa_r+0x8b6>
 8005968:	9a06      	ldr	r2, [sp, #24]
 800596a:	2a01      	cmp	r2, #1
 800596c:	f300 80ba 	bgt.w	8005ae4 <_dtoa_r+0x884>
 8005970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005972:	2a00      	cmp	r2, #0
 8005974:	f000 80b2 	beq.w	8005adc <_dtoa_r+0x87c>
 8005978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800597c:	9e07      	ldr	r6, [sp, #28]
 800597e:	9d04      	ldr	r5, [sp, #16]
 8005980:	9a04      	ldr	r2, [sp, #16]
 8005982:	441a      	add	r2, r3
 8005984:	9204      	str	r2, [sp, #16]
 8005986:	9a05      	ldr	r2, [sp, #20]
 8005988:	2101      	movs	r1, #1
 800598a:	441a      	add	r2, r3
 800598c:	4620      	mov	r0, r4
 800598e:	9205      	str	r2, [sp, #20]
 8005990:	f000 ff44 	bl	800681c <__i2b>
 8005994:	4607      	mov	r7, r0
 8005996:	2d00      	cmp	r5, #0
 8005998:	dd0c      	ble.n	80059b4 <_dtoa_r+0x754>
 800599a:	9b05      	ldr	r3, [sp, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	dd09      	ble.n	80059b4 <_dtoa_r+0x754>
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	9a04      	ldr	r2, [sp, #16]
 80059a4:	bfa8      	it	ge
 80059a6:	462b      	movge	r3, r5
 80059a8:	1ad2      	subs	r2, r2, r3
 80059aa:	9204      	str	r2, [sp, #16]
 80059ac:	9a05      	ldr	r2, [sp, #20]
 80059ae:	1aed      	subs	r5, r5, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	9305      	str	r3, [sp, #20]
 80059b4:	9b07      	ldr	r3, [sp, #28]
 80059b6:	b31b      	cbz	r3, 8005a00 <_dtoa_r+0x7a0>
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80af 	beq.w	8005b1e <_dtoa_r+0x8be>
 80059c0:	2e00      	cmp	r6, #0
 80059c2:	dd13      	ble.n	80059ec <_dtoa_r+0x78c>
 80059c4:	4639      	mov	r1, r7
 80059c6:	4632      	mov	r2, r6
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 ffe7 	bl	800699c <__pow5mult>
 80059ce:	ee18 2a10 	vmov	r2, s16
 80059d2:	4601      	mov	r1, r0
 80059d4:	4607      	mov	r7, r0
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 ff36 	bl	8006848 <__multiply>
 80059dc:	ee18 1a10 	vmov	r1, s16
 80059e0:	4680      	mov	r8, r0
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fe18 	bl	8006618 <_Bfree>
 80059e8:	ee08 8a10 	vmov	s16, r8
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	1b9a      	subs	r2, r3, r6
 80059f0:	d006      	beq.n	8005a00 <_dtoa_r+0x7a0>
 80059f2:	ee18 1a10 	vmov	r1, s16
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 ffd0 	bl	800699c <__pow5mult>
 80059fc:	ee08 0a10 	vmov	s16, r0
 8005a00:	2101      	movs	r1, #1
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 ff0a 	bl	800681c <__i2b>
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	f340 8088 	ble.w	8005b22 <_dtoa_r+0x8c2>
 8005a12:	461a      	mov	r2, r3
 8005a14:	4601      	mov	r1, r0
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 ffc0 	bl	800699c <__pow5mult>
 8005a1c:	9b06      	ldr	r3, [sp, #24]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	4606      	mov	r6, r0
 8005a22:	f340 8081 	ble.w	8005b28 <_dtoa_r+0x8c8>
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	6933      	ldr	r3, [r6, #16]
 8005a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a30:	6918      	ldr	r0, [r3, #16]
 8005a32:	f000 fea3 	bl	800677c <__hi0bits>
 8005a36:	f1c0 0020 	rsb	r0, r0, #32
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	4418      	add	r0, r3
 8005a3e:	f010 001f 	ands.w	r0, r0, #31
 8005a42:	f000 8092 	beq.w	8005b6a <_dtoa_r+0x90a>
 8005a46:	f1c0 0320 	rsb	r3, r0, #32
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	f340 808a 	ble.w	8005b64 <_dtoa_r+0x904>
 8005a50:	f1c0 001c 	rsb	r0, r0, #28
 8005a54:	9b04      	ldr	r3, [sp, #16]
 8005a56:	4403      	add	r3, r0
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	9b05      	ldr	r3, [sp, #20]
 8005a5c:	4403      	add	r3, r0
 8005a5e:	4405      	add	r5, r0
 8005a60:	9305      	str	r3, [sp, #20]
 8005a62:	9b04      	ldr	r3, [sp, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dd07      	ble.n	8005a78 <_dtoa_r+0x818>
 8005a68:	ee18 1a10 	vmov	r1, s16
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 ffee 	bl	8006a50 <__lshift>
 8005a74:	ee08 0a10 	vmov	s16, r0
 8005a78:	9b05      	ldr	r3, [sp, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd05      	ble.n	8005a8a <_dtoa_r+0x82a>
 8005a7e:	4631      	mov	r1, r6
 8005a80:	461a      	mov	r2, r3
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 ffe4 	bl	8006a50 <__lshift>
 8005a88:	4606      	mov	r6, r0
 8005a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d06e      	beq.n	8005b6e <_dtoa_r+0x90e>
 8005a90:	ee18 0a10 	vmov	r0, s16
 8005a94:	4631      	mov	r1, r6
 8005a96:	f001 f84b 	bl	8006b30 <__mcmp>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	da67      	bge.n	8005b6e <_dtoa_r+0x90e>
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	ee18 1a10 	vmov	r1, s16
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fdd5 	bl	800665c <__multadd>
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	ee08 0a10 	vmov	s16, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 81b1 	beq.w	8005e20 <_dtoa_r+0xbc0>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	220a      	movs	r2, #10
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fdc9 	bl	800665c <__multadd>
 8005aca:	9b02      	ldr	r3, [sp, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	4607      	mov	r7, r0
 8005ad0:	f300 808e 	bgt.w	8005bf0 <_dtoa_r+0x990>
 8005ad4:	9b06      	ldr	r3, [sp, #24]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	dc51      	bgt.n	8005b7e <_dtoa_r+0x91e>
 8005ada:	e089      	b.n	8005bf0 <_dtoa_r+0x990>
 8005adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ae2:	e74b      	b.n	800597c <_dtoa_r+0x71c>
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	1e5e      	subs	r6, r3, #1
 8005ae8:	9b07      	ldr	r3, [sp, #28]
 8005aea:	42b3      	cmp	r3, r6
 8005aec:	bfbf      	itttt	lt
 8005aee:	9b07      	ldrlt	r3, [sp, #28]
 8005af0:	9607      	strlt	r6, [sp, #28]
 8005af2:	1af2      	sublt	r2, r6, r3
 8005af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005af6:	bfb6      	itet	lt
 8005af8:	189b      	addlt	r3, r3, r2
 8005afa:	1b9e      	subge	r6, r3, r6
 8005afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	bfb8      	it	lt
 8005b02:	2600      	movlt	r6, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bfb7      	itett	lt
 8005b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b10:	1a9d      	sublt	r5, r3, r2
 8005b12:	2300      	movlt	r3, #0
 8005b14:	e734      	b.n	8005980 <_dtoa_r+0x720>
 8005b16:	9e07      	ldr	r6, [sp, #28]
 8005b18:	9d04      	ldr	r5, [sp, #16]
 8005b1a:	9f08      	ldr	r7, [sp, #32]
 8005b1c:	e73b      	b.n	8005996 <_dtoa_r+0x736>
 8005b1e:	9a07      	ldr	r2, [sp, #28]
 8005b20:	e767      	b.n	80059f2 <_dtoa_r+0x792>
 8005b22:	9b06      	ldr	r3, [sp, #24]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	dc18      	bgt.n	8005b5a <_dtoa_r+0x8fa>
 8005b28:	f1ba 0f00 	cmp.w	sl, #0
 8005b2c:	d115      	bne.n	8005b5a <_dtoa_r+0x8fa>
 8005b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b32:	b993      	cbnz	r3, 8005b5a <_dtoa_r+0x8fa>
 8005b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b38:	0d1b      	lsrs	r3, r3, #20
 8005b3a:	051b      	lsls	r3, r3, #20
 8005b3c:	b183      	cbz	r3, 8005b60 <_dtoa_r+0x900>
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	3301      	adds	r3, #1
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	9b05      	ldr	r3, [sp, #20]
 8005b46:	3301      	adds	r3, #1
 8005b48:	9305      	str	r3, [sp, #20]
 8005b4a:	f04f 0801 	mov.w	r8, #1
 8005b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f af6a 	bne.w	8005a2a <_dtoa_r+0x7ca>
 8005b56:	2001      	movs	r0, #1
 8005b58:	e76f      	b.n	8005a3a <_dtoa_r+0x7da>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	e7f6      	b.n	8005b4e <_dtoa_r+0x8ee>
 8005b60:	4698      	mov	r8, r3
 8005b62:	e7f4      	b.n	8005b4e <_dtoa_r+0x8ee>
 8005b64:	f43f af7d 	beq.w	8005a62 <_dtoa_r+0x802>
 8005b68:	4618      	mov	r0, r3
 8005b6a:	301c      	adds	r0, #28
 8005b6c:	e772      	b.n	8005a54 <_dtoa_r+0x7f4>
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	dc37      	bgt.n	8005be4 <_dtoa_r+0x984>
 8005b74:	9b06      	ldr	r3, [sp, #24]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	dd34      	ble.n	8005be4 <_dtoa_r+0x984>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	9302      	str	r3, [sp, #8]
 8005b7e:	9b02      	ldr	r3, [sp, #8]
 8005b80:	b96b      	cbnz	r3, 8005b9e <_dtoa_r+0x93e>
 8005b82:	4631      	mov	r1, r6
 8005b84:	2205      	movs	r2, #5
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fd68 	bl	800665c <__multadd>
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	4606      	mov	r6, r0
 8005b90:	ee18 0a10 	vmov	r0, s16
 8005b94:	f000 ffcc 	bl	8006b30 <__mcmp>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f73f adbb 	bgt.w	8005714 <_dtoa_r+0x4b4>
 8005b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba0:	9d01      	ldr	r5, [sp, #4]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	f04f 0800 	mov.w	r8, #0
 8005baa:	4631      	mov	r1, r6
 8005bac:	4620      	mov	r0, r4
 8005bae:	f000 fd33 	bl	8006618 <_Bfree>
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	f43f aea4 	beq.w	8005900 <_dtoa_r+0x6a0>
 8005bb8:	f1b8 0f00 	cmp.w	r8, #0
 8005bbc:	d005      	beq.n	8005bca <_dtoa_r+0x96a>
 8005bbe:	45b8      	cmp	r8, r7
 8005bc0:	d003      	beq.n	8005bca <_dtoa_r+0x96a>
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fd27 	bl	8006618 <_Bfree>
 8005bca:	4639      	mov	r1, r7
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 fd23 	bl	8006618 <_Bfree>
 8005bd2:	e695      	b.n	8005900 <_dtoa_r+0x6a0>
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	4637      	mov	r7, r6
 8005bd8:	e7e1      	b.n	8005b9e <_dtoa_r+0x93e>
 8005bda:	9700      	str	r7, [sp, #0]
 8005bdc:	4637      	mov	r7, r6
 8005bde:	e599      	b.n	8005714 <_dtoa_r+0x4b4>
 8005be0:	40240000 	.word	0x40240000
 8005be4:	9b08      	ldr	r3, [sp, #32]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80ca 	beq.w	8005d80 <_dtoa_r+0xb20>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	dd05      	ble.n	8005c00 <_dtoa_r+0x9a0>
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	462a      	mov	r2, r5
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 ff29 	bl	8006a50 <__lshift>
 8005bfe:	4607      	mov	r7, r0
 8005c00:	f1b8 0f00 	cmp.w	r8, #0
 8005c04:	d05b      	beq.n	8005cbe <_dtoa_r+0xa5e>
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fcc5 	bl	8006598 <_Balloc>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	b928      	cbnz	r0, 8005c1e <_dtoa_r+0x9be>
 8005c12:	4b87      	ldr	r3, [pc, #540]	; (8005e30 <_dtoa_r+0xbd0>)
 8005c14:	4602      	mov	r2, r0
 8005c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c1a:	f7ff bb3b 	b.w	8005294 <_dtoa_r+0x34>
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	3202      	adds	r2, #2
 8005c22:	0092      	lsls	r2, r2, #2
 8005c24:	f107 010c 	add.w	r1, r7, #12
 8005c28:	300c      	adds	r0, #12
 8005c2a:	f000 fca7 	bl	800657c <memcpy>
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4629      	mov	r1, r5
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 ff0c 	bl	8006a50 <__lshift>
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	f103 0901 	add.w	r9, r3, #1
 8005c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c42:	4413      	add	r3, r2
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	f00a 0301 	and.w	r3, sl, #1
 8005c4a:	46b8      	mov	r8, r7
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	4607      	mov	r7, r0
 8005c50:	4631      	mov	r1, r6
 8005c52:	ee18 0a10 	vmov	r0, s16
 8005c56:	f7ff fa75 	bl	8005144 <quorem>
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	9002      	str	r0, [sp, #8]
 8005c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c62:	ee18 0a10 	vmov	r0, s16
 8005c66:	f000 ff63 	bl	8006b30 <__mcmp>
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	9003      	str	r0, [sp, #12]
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 ff79 	bl	8006b68 <__mdiff>
 8005c76:	68c2      	ldr	r2, [r0, #12]
 8005c78:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	bb02      	cbnz	r2, 8005cc2 <_dtoa_r+0xa62>
 8005c80:	4601      	mov	r1, r0
 8005c82:	ee18 0a10 	vmov	r0, s16
 8005c86:	f000 ff53 	bl	8006b30 <__mcmp>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	9207      	str	r2, [sp, #28]
 8005c92:	f000 fcc1 	bl	8006618 <_Bfree>
 8005c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005c9a:	ea43 0102 	orr.w	r1, r3, r2
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	464d      	mov	r5, r9
 8005ca4:	d10f      	bne.n	8005cc6 <_dtoa_r+0xa66>
 8005ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005caa:	d02a      	beq.n	8005d02 <_dtoa_r+0xaa2>
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd02      	ble.n	8005cb8 <_dtoa_r+0xa58>
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cb8:	f88b a000 	strb.w	sl, [fp]
 8005cbc:	e775      	b.n	8005baa <_dtoa_r+0x94a>
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	e7ba      	b.n	8005c38 <_dtoa_r+0x9d8>
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	e7e2      	b.n	8005c8c <_dtoa_r+0xa2c>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	db04      	blt.n	8005cd6 <_dtoa_r+0xa76>
 8005ccc:	9906      	ldr	r1, [sp, #24]
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	9904      	ldr	r1, [sp, #16]
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	d122      	bne.n	8005d1c <_dtoa_r+0xabc>
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	ddee      	ble.n	8005cb8 <_dtoa_r+0xa58>
 8005cda:	ee18 1a10 	vmov	r1, s16
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 feb5 	bl	8006a50 <__lshift>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	ee08 0a10 	vmov	s16, r0
 8005cec:	f000 ff20 	bl	8006b30 <__mcmp>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	dc03      	bgt.n	8005cfc <_dtoa_r+0xa9c>
 8005cf4:	d1e0      	bne.n	8005cb8 <_dtoa_r+0xa58>
 8005cf6:	f01a 0f01 	tst.w	sl, #1
 8005cfa:	d0dd      	beq.n	8005cb8 <_dtoa_r+0xa58>
 8005cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d00:	d1d7      	bne.n	8005cb2 <_dtoa_r+0xa52>
 8005d02:	2339      	movs	r3, #57	; 0x39
 8005d04:	f88b 3000 	strb.w	r3, [fp]
 8005d08:	462b      	mov	r3, r5
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d12:	2a39      	cmp	r2, #57	; 0x39
 8005d14:	d071      	beq.n	8005dfa <_dtoa_r+0xb9a>
 8005d16:	3201      	adds	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	e746      	b.n	8005baa <_dtoa_r+0x94a>
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	dd07      	ble.n	8005d30 <_dtoa_r+0xad0>
 8005d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d24:	d0ed      	beq.n	8005d02 <_dtoa_r+0xaa2>
 8005d26:	f10a 0301 	add.w	r3, sl, #1
 8005d2a:	f88b 3000 	strb.w	r3, [fp]
 8005d2e:	e73c      	b.n	8005baa <_dtoa_r+0x94a>
 8005d30:	9b05      	ldr	r3, [sp, #20]
 8005d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d36:	4599      	cmp	r9, r3
 8005d38:	d047      	beq.n	8005dca <_dtoa_r+0xb6a>
 8005d3a:	ee18 1a10 	vmov	r1, s16
 8005d3e:	2300      	movs	r3, #0
 8005d40:	220a      	movs	r2, #10
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 fc8a 	bl	800665c <__multadd>
 8005d48:	45b8      	cmp	r8, r7
 8005d4a:	ee08 0a10 	vmov	s16, r0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	f04f 020a 	mov.w	r2, #10
 8005d56:	4641      	mov	r1, r8
 8005d58:	4620      	mov	r0, r4
 8005d5a:	d106      	bne.n	8005d6a <_dtoa_r+0xb0a>
 8005d5c:	f000 fc7e 	bl	800665c <__multadd>
 8005d60:	4680      	mov	r8, r0
 8005d62:	4607      	mov	r7, r0
 8005d64:	f109 0901 	add.w	r9, r9, #1
 8005d68:	e772      	b.n	8005c50 <_dtoa_r+0x9f0>
 8005d6a:	f000 fc77 	bl	800665c <__multadd>
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4680      	mov	r8, r0
 8005d72:	2300      	movs	r3, #0
 8005d74:	220a      	movs	r2, #10
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fc70 	bl	800665c <__multadd>
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	e7f1      	b.n	8005d64 <_dtoa_r+0xb04>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	9302      	str	r3, [sp, #8]
 8005d84:	9d01      	ldr	r5, [sp, #4]
 8005d86:	ee18 0a10 	vmov	r0, s16
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	f7ff f9da 	bl	8005144 <quorem>
 8005d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	f805 ab01 	strb.w	sl, [r5], #1
 8005d9a:	1aea      	subs	r2, r5, r3
 8005d9c:	9b02      	ldr	r3, [sp, #8]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	dd09      	ble.n	8005db6 <_dtoa_r+0xb56>
 8005da2:	ee18 1a10 	vmov	r1, s16
 8005da6:	2300      	movs	r3, #0
 8005da8:	220a      	movs	r2, #10
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fc56 	bl	800665c <__multadd>
 8005db0:	ee08 0a10 	vmov	s16, r0
 8005db4:	e7e7      	b.n	8005d86 <_dtoa_r+0xb26>
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfc8      	it	gt
 8005dbc:	461d      	movgt	r5, r3
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	bfd8      	it	le
 8005dc2:	2501      	movle	r5, #1
 8005dc4:	441d      	add	r5, r3
 8005dc6:	f04f 0800 	mov.w	r8, #0
 8005dca:	ee18 1a10 	vmov	r1, s16
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fe3d 	bl	8006a50 <__lshift>
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	ee08 0a10 	vmov	s16, r0
 8005ddc:	f000 fea8 	bl	8006b30 <__mcmp>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	dc91      	bgt.n	8005d08 <_dtoa_r+0xaa8>
 8005de4:	d102      	bne.n	8005dec <_dtoa_r+0xb8c>
 8005de6:	f01a 0f01 	tst.w	sl, #1
 8005dea:	d18d      	bne.n	8005d08 <_dtoa_r+0xaa8>
 8005dec:	462b      	mov	r3, r5
 8005dee:	461d      	mov	r5, r3
 8005df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005df4:	2a30      	cmp	r2, #48	; 0x30
 8005df6:	d0fa      	beq.n	8005dee <_dtoa_r+0xb8e>
 8005df8:	e6d7      	b.n	8005baa <_dtoa_r+0x94a>
 8005dfa:	9a01      	ldr	r2, [sp, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d184      	bne.n	8005d0a <_dtoa_r+0xaaa>
 8005e00:	9b00      	ldr	r3, [sp, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2331      	movs	r3, #49	; 0x31
 8005e08:	7013      	strb	r3, [r2, #0]
 8005e0a:	e6ce      	b.n	8005baa <_dtoa_r+0x94a>
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <_dtoa_r+0xbd4>)
 8005e0e:	f7ff ba95 	b.w	800533c <_dtoa_r+0xdc>
 8005e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f aa6e 	bne.w	80052f6 <_dtoa_r+0x96>
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <_dtoa_r+0xbd8>)
 8005e1c:	f7ff ba8e 	b.w	800533c <_dtoa_r+0xdc>
 8005e20:	9b02      	ldr	r3, [sp, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dcae      	bgt.n	8005d84 <_dtoa_r+0xb24>
 8005e26:	9b06      	ldr	r3, [sp, #24]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f73f aea8 	bgt.w	8005b7e <_dtoa_r+0x91e>
 8005e2e:	e7a9      	b.n	8005d84 <_dtoa_r+0xb24>
 8005e30:	08008f10 	.word	0x08008f10
 8005e34:	08009109 	.word	0x08009109
 8005e38:	08008e91 	.word	0x08008e91

08005e3c <rshift>:
 8005e3c:	6903      	ldr	r3, [r0, #16]
 8005e3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005e4a:	f100 0414 	add.w	r4, r0, #20
 8005e4e:	dd45      	ble.n	8005edc <rshift+0xa0>
 8005e50:	f011 011f 	ands.w	r1, r1, #31
 8005e54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e5c:	d10c      	bne.n	8005e78 <rshift+0x3c>
 8005e5e:	f100 0710 	add.w	r7, r0, #16
 8005e62:	4629      	mov	r1, r5
 8005e64:	42b1      	cmp	r1, r6
 8005e66:	d334      	bcc.n	8005ed2 <rshift+0x96>
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	1eea      	subs	r2, r5, #3
 8005e6e:	4296      	cmp	r6, r2
 8005e70:	bf38      	it	cc
 8005e72:	2300      	movcc	r3, #0
 8005e74:	4423      	add	r3, r4
 8005e76:	e015      	b.n	8005ea4 <rshift+0x68>
 8005e78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e7c:	f1c1 0820 	rsb	r8, r1, #32
 8005e80:	40cf      	lsrs	r7, r1
 8005e82:	f105 0e04 	add.w	lr, r5, #4
 8005e86:	46a1      	mov	r9, r4
 8005e88:	4576      	cmp	r6, lr
 8005e8a:	46f4      	mov	ip, lr
 8005e8c:	d815      	bhi.n	8005eba <rshift+0x7e>
 8005e8e:	1a9a      	subs	r2, r3, r2
 8005e90:	0092      	lsls	r2, r2, #2
 8005e92:	3a04      	subs	r2, #4
 8005e94:	3501      	adds	r5, #1
 8005e96:	42ae      	cmp	r6, r5
 8005e98:	bf38      	it	cc
 8005e9a:	2200      	movcc	r2, #0
 8005e9c:	18a3      	adds	r3, r4, r2
 8005e9e:	50a7      	str	r7, [r4, r2]
 8005ea0:	b107      	cbz	r7, 8005ea4 <rshift+0x68>
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	1b1a      	subs	r2, r3, r4
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005eac:	bf08      	it	eq
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	6102      	str	r2, [r0, #16]
 8005eb2:	bf08      	it	eq
 8005eb4:	6143      	streq	r3, [r0, #20]
 8005eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eba:	f8dc c000 	ldr.w	ip, [ip]
 8005ebe:	fa0c fc08 	lsl.w	ip, ip, r8
 8005ec2:	ea4c 0707 	orr.w	r7, ip, r7
 8005ec6:	f849 7b04 	str.w	r7, [r9], #4
 8005eca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ece:	40cf      	lsrs	r7, r1
 8005ed0:	e7da      	b.n	8005e88 <rshift+0x4c>
 8005ed2:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ed6:	f847 cf04 	str.w	ip, [r7, #4]!
 8005eda:	e7c3      	b.n	8005e64 <rshift+0x28>
 8005edc:	4623      	mov	r3, r4
 8005ede:	e7e1      	b.n	8005ea4 <rshift+0x68>

08005ee0 <__hexdig_fun>:
 8005ee0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d802      	bhi.n	8005eee <__hexdig_fun+0xe>
 8005ee8:	3820      	subs	r0, #32
 8005eea:	b2c0      	uxtb	r0, r0
 8005eec:	4770      	bx	lr
 8005eee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d801      	bhi.n	8005efa <__hexdig_fun+0x1a>
 8005ef6:	3847      	subs	r0, #71	; 0x47
 8005ef8:	e7f7      	b.n	8005eea <__hexdig_fun+0xa>
 8005efa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d801      	bhi.n	8005f06 <__hexdig_fun+0x26>
 8005f02:	3827      	subs	r0, #39	; 0x27
 8005f04:	e7f1      	b.n	8005eea <__hexdig_fun+0xa>
 8005f06:	2000      	movs	r0, #0
 8005f08:	4770      	bx	lr
	...

08005f0c <__gethex>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	ed2d 8b02 	vpush	{d8}
 8005f14:	b089      	sub	sp, #36	; 0x24
 8005f16:	ee08 0a10 	vmov	s16, r0
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	4bb4      	ldr	r3, [pc, #720]	; (80061f0 <__gethex+0x2e4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	4618      	mov	r0, r3
 8005f24:	468b      	mov	fp, r1
 8005f26:	4690      	mov	r8, r2
 8005f28:	f7fa f964 	bl	80001f4 <strlen>
 8005f2c:	9b01      	ldr	r3, [sp, #4]
 8005f2e:	f8db 2000 	ldr.w	r2, [fp]
 8005f32:	4403      	add	r3, r0
 8005f34:	4682      	mov	sl, r0
 8005f36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005f3a:	9305      	str	r3, [sp, #20]
 8005f3c:	1c93      	adds	r3, r2, #2
 8005f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005f46:	32fe      	adds	r2, #254	; 0xfe
 8005f48:	18d1      	adds	r1, r2, r3
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f50:	9100      	str	r1, [sp, #0]
 8005f52:	2830      	cmp	r0, #48	; 0x30
 8005f54:	d0f8      	beq.n	8005f48 <__gethex+0x3c>
 8005f56:	f7ff ffc3 	bl	8005ee0 <__hexdig_fun>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d13a      	bne.n	8005fd6 <__gethex+0xca>
 8005f60:	9901      	ldr	r1, [sp, #4]
 8005f62:	4652      	mov	r2, sl
 8005f64:	4638      	mov	r0, r7
 8005f66:	f001 fdb3 	bl	8007ad0 <strncmp>
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d168      	bne.n	8006042 <__gethex+0x136>
 8005f70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005f74:	eb07 060a 	add.w	r6, r7, sl
 8005f78:	f7ff ffb2 	bl	8005ee0 <__hexdig_fun>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d062      	beq.n	8006046 <__gethex+0x13a>
 8005f80:	4633      	mov	r3, r6
 8005f82:	7818      	ldrb	r0, [r3, #0]
 8005f84:	2830      	cmp	r0, #48	; 0x30
 8005f86:	461f      	mov	r7, r3
 8005f88:	f103 0301 	add.w	r3, r3, #1
 8005f8c:	d0f9      	beq.n	8005f82 <__gethex+0x76>
 8005f8e:	f7ff ffa7 	bl	8005ee0 <__hexdig_fun>
 8005f92:	2301      	movs	r3, #1
 8005f94:	fab0 f480 	clz	r4, r0
 8005f98:	0964      	lsrs	r4, r4, #5
 8005f9a:	4635      	mov	r5, r6
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	463a      	mov	r2, r7
 8005fa0:	4616      	mov	r6, r2
 8005fa2:	3201      	adds	r2, #1
 8005fa4:	7830      	ldrb	r0, [r6, #0]
 8005fa6:	f7ff ff9b 	bl	8005ee0 <__hexdig_fun>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d1f8      	bne.n	8005fa0 <__gethex+0x94>
 8005fae:	9901      	ldr	r1, [sp, #4]
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f001 fd8c 	bl	8007ad0 <strncmp>
 8005fb8:	b980      	cbnz	r0, 8005fdc <__gethex+0xd0>
 8005fba:	b94d      	cbnz	r5, 8005fd0 <__gethex+0xc4>
 8005fbc:	eb06 050a 	add.w	r5, r6, sl
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	3201      	adds	r2, #1
 8005fc6:	7830      	ldrb	r0, [r6, #0]
 8005fc8:	f7ff ff8a 	bl	8005ee0 <__hexdig_fun>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d1f8      	bne.n	8005fc2 <__gethex+0xb6>
 8005fd0:	1bad      	subs	r5, r5, r6
 8005fd2:	00ad      	lsls	r5, r5, #2
 8005fd4:	e004      	b.n	8005fe0 <__gethex+0xd4>
 8005fd6:	2400      	movs	r4, #0
 8005fd8:	4625      	mov	r5, r4
 8005fda:	e7e0      	b.n	8005f9e <__gethex+0x92>
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	d1f7      	bne.n	8005fd0 <__gethex+0xc4>
 8005fe0:	7833      	ldrb	r3, [r6, #0]
 8005fe2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fe6:	2b50      	cmp	r3, #80	; 0x50
 8005fe8:	d13b      	bne.n	8006062 <__gethex+0x156>
 8005fea:	7873      	ldrb	r3, [r6, #1]
 8005fec:	2b2b      	cmp	r3, #43	; 0x2b
 8005fee:	d02c      	beq.n	800604a <__gethex+0x13e>
 8005ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8005ff2:	d02e      	beq.n	8006052 <__gethex+0x146>
 8005ff4:	1c71      	adds	r1, r6, #1
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	7808      	ldrb	r0, [r1, #0]
 8005ffc:	f7ff ff70 	bl	8005ee0 <__hexdig_fun>
 8006000:	1e43      	subs	r3, r0, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b18      	cmp	r3, #24
 8006006:	d82c      	bhi.n	8006062 <__gethex+0x156>
 8006008:	f1a0 0210 	sub.w	r2, r0, #16
 800600c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006010:	f7ff ff66 	bl	8005ee0 <__hexdig_fun>
 8006014:	1e43      	subs	r3, r0, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b18      	cmp	r3, #24
 800601a:	d91d      	bls.n	8006058 <__gethex+0x14c>
 800601c:	f1b9 0f00 	cmp.w	r9, #0
 8006020:	d000      	beq.n	8006024 <__gethex+0x118>
 8006022:	4252      	negs	r2, r2
 8006024:	4415      	add	r5, r2
 8006026:	f8cb 1000 	str.w	r1, [fp]
 800602a:	b1e4      	cbz	r4, 8006066 <__gethex+0x15a>
 800602c:	9b00      	ldr	r3, [sp, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2700      	movne	r7, #0
 8006034:	2706      	moveq	r7, #6
 8006036:	4638      	mov	r0, r7
 8006038:	b009      	add	sp, #36	; 0x24
 800603a:	ecbd 8b02 	vpop	{d8}
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	463e      	mov	r6, r7
 8006044:	4625      	mov	r5, r4
 8006046:	2401      	movs	r4, #1
 8006048:	e7ca      	b.n	8005fe0 <__gethex+0xd4>
 800604a:	f04f 0900 	mov.w	r9, #0
 800604e:	1cb1      	adds	r1, r6, #2
 8006050:	e7d3      	b.n	8005ffa <__gethex+0xee>
 8006052:	f04f 0901 	mov.w	r9, #1
 8006056:	e7fa      	b.n	800604e <__gethex+0x142>
 8006058:	230a      	movs	r3, #10
 800605a:	fb03 0202 	mla	r2, r3, r2, r0
 800605e:	3a10      	subs	r2, #16
 8006060:	e7d4      	b.n	800600c <__gethex+0x100>
 8006062:	4631      	mov	r1, r6
 8006064:	e7df      	b.n	8006026 <__gethex+0x11a>
 8006066:	1bf3      	subs	r3, r6, r7
 8006068:	3b01      	subs	r3, #1
 800606a:	4621      	mov	r1, r4
 800606c:	2b07      	cmp	r3, #7
 800606e:	dc0b      	bgt.n	8006088 <__gethex+0x17c>
 8006070:	ee18 0a10 	vmov	r0, s16
 8006074:	f000 fa90 	bl	8006598 <_Balloc>
 8006078:	4604      	mov	r4, r0
 800607a:	b940      	cbnz	r0, 800608e <__gethex+0x182>
 800607c:	4b5d      	ldr	r3, [pc, #372]	; (80061f4 <__gethex+0x2e8>)
 800607e:	4602      	mov	r2, r0
 8006080:	21de      	movs	r1, #222	; 0xde
 8006082:	485d      	ldr	r0, [pc, #372]	; (80061f8 <__gethex+0x2ec>)
 8006084:	f001 fdf4 	bl	8007c70 <__assert_func>
 8006088:	3101      	adds	r1, #1
 800608a:	105b      	asrs	r3, r3, #1
 800608c:	e7ee      	b.n	800606c <__gethex+0x160>
 800608e:	f100 0914 	add.w	r9, r0, #20
 8006092:	f04f 0b00 	mov.w	fp, #0
 8006096:	f1ca 0301 	rsb	r3, sl, #1
 800609a:	f8cd 9008 	str.w	r9, [sp, #8]
 800609e:	f8cd b000 	str.w	fp, [sp]
 80060a2:	9306      	str	r3, [sp, #24]
 80060a4:	42b7      	cmp	r7, r6
 80060a6:	d340      	bcc.n	800612a <__gethex+0x21e>
 80060a8:	9802      	ldr	r0, [sp, #8]
 80060aa:	9b00      	ldr	r3, [sp, #0]
 80060ac:	f840 3b04 	str.w	r3, [r0], #4
 80060b0:	eba0 0009 	sub.w	r0, r0, r9
 80060b4:	1080      	asrs	r0, r0, #2
 80060b6:	0146      	lsls	r6, r0, #5
 80060b8:	6120      	str	r0, [r4, #16]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fb5e 	bl	800677c <__hi0bits>
 80060c0:	1a30      	subs	r0, r6, r0
 80060c2:	f8d8 6000 	ldr.w	r6, [r8]
 80060c6:	42b0      	cmp	r0, r6
 80060c8:	dd63      	ble.n	8006192 <__gethex+0x286>
 80060ca:	1b87      	subs	r7, r0, r6
 80060cc:	4639      	mov	r1, r7
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 ff02 	bl	8006ed8 <__any_on>
 80060d4:	4682      	mov	sl, r0
 80060d6:	b1a8      	cbz	r0, 8006104 <__gethex+0x1f8>
 80060d8:	1e7b      	subs	r3, r7, #1
 80060da:	1159      	asrs	r1, r3, #5
 80060dc:	f003 021f 	and.w	r2, r3, #31
 80060e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80060e4:	f04f 0a01 	mov.w	sl, #1
 80060e8:	fa0a f202 	lsl.w	r2, sl, r2
 80060ec:	420a      	tst	r2, r1
 80060ee:	d009      	beq.n	8006104 <__gethex+0x1f8>
 80060f0:	4553      	cmp	r3, sl
 80060f2:	dd05      	ble.n	8006100 <__gethex+0x1f4>
 80060f4:	1eb9      	subs	r1, r7, #2
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 feee 	bl	8006ed8 <__any_on>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d145      	bne.n	800618c <__gethex+0x280>
 8006100:	f04f 0a02 	mov.w	sl, #2
 8006104:	4639      	mov	r1, r7
 8006106:	4620      	mov	r0, r4
 8006108:	f7ff fe98 	bl	8005e3c <rshift>
 800610c:	443d      	add	r5, r7
 800610e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006112:	42ab      	cmp	r3, r5
 8006114:	da4c      	bge.n	80061b0 <__gethex+0x2a4>
 8006116:	ee18 0a10 	vmov	r0, s16
 800611a:	4621      	mov	r1, r4
 800611c:	f000 fa7c 	bl	8006618 <_Bfree>
 8006120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006122:	2300      	movs	r3, #0
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	27a3      	movs	r7, #163	; 0xa3
 8006128:	e785      	b.n	8006036 <__gethex+0x12a>
 800612a:	1e73      	subs	r3, r6, #1
 800612c:	9a05      	ldr	r2, [sp, #20]
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006134:	4293      	cmp	r3, r2
 8006136:	d019      	beq.n	800616c <__gethex+0x260>
 8006138:	f1bb 0f20 	cmp.w	fp, #32
 800613c:	d107      	bne.n	800614e <__gethex+0x242>
 800613e:	9b02      	ldr	r3, [sp, #8]
 8006140:	9a00      	ldr	r2, [sp, #0]
 8006142:	f843 2b04 	str.w	r2, [r3], #4
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	2300      	movs	r3, #0
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	469b      	mov	fp, r3
 800614e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006152:	f7ff fec5 	bl	8005ee0 <__hexdig_fun>
 8006156:	9b00      	ldr	r3, [sp, #0]
 8006158:	f000 000f 	and.w	r0, r0, #15
 800615c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006160:	4303      	orrs	r3, r0
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	f10b 0b04 	add.w	fp, fp, #4
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	e00d      	b.n	8006188 <__gethex+0x27c>
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	9a06      	ldr	r2, [sp, #24]
 8006170:	4413      	add	r3, r2
 8006172:	42bb      	cmp	r3, r7
 8006174:	d3e0      	bcc.n	8006138 <__gethex+0x22c>
 8006176:	4618      	mov	r0, r3
 8006178:	9901      	ldr	r1, [sp, #4]
 800617a:	9307      	str	r3, [sp, #28]
 800617c:	4652      	mov	r2, sl
 800617e:	f001 fca7 	bl	8007ad0 <strncmp>
 8006182:	9b07      	ldr	r3, [sp, #28]
 8006184:	2800      	cmp	r0, #0
 8006186:	d1d7      	bne.n	8006138 <__gethex+0x22c>
 8006188:	461e      	mov	r6, r3
 800618a:	e78b      	b.n	80060a4 <__gethex+0x198>
 800618c:	f04f 0a03 	mov.w	sl, #3
 8006190:	e7b8      	b.n	8006104 <__gethex+0x1f8>
 8006192:	da0a      	bge.n	80061aa <__gethex+0x29e>
 8006194:	1a37      	subs	r7, r6, r0
 8006196:	4621      	mov	r1, r4
 8006198:	ee18 0a10 	vmov	r0, s16
 800619c:	463a      	mov	r2, r7
 800619e:	f000 fc57 	bl	8006a50 <__lshift>
 80061a2:	1bed      	subs	r5, r5, r7
 80061a4:	4604      	mov	r4, r0
 80061a6:	f100 0914 	add.w	r9, r0, #20
 80061aa:	f04f 0a00 	mov.w	sl, #0
 80061ae:	e7ae      	b.n	800610e <__gethex+0x202>
 80061b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80061b4:	42a8      	cmp	r0, r5
 80061b6:	dd72      	ble.n	800629e <__gethex+0x392>
 80061b8:	1b45      	subs	r5, r0, r5
 80061ba:	42ae      	cmp	r6, r5
 80061bc:	dc36      	bgt.n	800622c <__gethex+0x320>
 80061be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d02a      	beq.n	800621c <__gethex+0x310>
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d02c      	beq.n	8006224 <__gethex+0x318>
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d11c      	bne.n	8006208 <__gethex+0x2fc>
 80061ce:	42ae      	cmp	r6, r5
 80061d0:	d11a      	bne.n	8006208 <__gethex+0x2fc>
 80061d2:	2e01      	cmp	r6, #1
 80061d4:	d112      	bne.n	80061fc <__gethex+0x2f0>
 80061d6:	9a04      	ldr	r2, [sp, #16]
 80061d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	2301      	movs	r3, #1
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	f8c9 3000 	str.w	r3, [r9]
 80061e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061e8:	2762      	movs	r7, #98	; 0x62
 80061ea:	601c      	str	r4, [r3, #0]
 80061ec:	e723      	b.n	8006036 <__gethex+0x12a>
 80061ee:	bf00      	nop
 80061f0:	08008f88 	.word	0x08008f88
 80061f4:	08008f10 	.word	0x08008f10
 80061f8:	08008f21 	.word	0x08008f21
 80061fc:	1e71      	subs	r1, r6, #1
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 fe6a 	bl	8006ed8 <__any_on>
 8006204:	2800      	cmp	r0, #0
 8006206:	d1e6      	bne.n	80061d6 <__gethex+0x2ca>
 8006208:	ee18 0a10 	vmov	r0, s16
 800620c:	4621      	mov	r1, r4
 800620e:	f000 fa03 	bl	8006618 <_Bfree>
 8006212:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006214:	2300      	movs	r3, #0
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	2750      	movs	r7, #80	; 0x50
 800621a:	e70c      	b.n	8006036 <__gethex+0x12a>
 800621c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f2      	bne.n	8006208 <__gethex+0x2fc>
 8006222:	e7d8      	b.n	80061d6 <__gethex+0x2ca>
 8006224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d5      	bne.n	80061d6 <__gethex+0x2ca>
 800622a:	e7ed      	b.n	8006208 <__gethex+0x2fc>
 800622c:	1e6f      	subs	r7, r5, #1
 800622e:	f1ba 0f00 	cmp.w	sl, #0
 8006232:	d131      	bne.n	8006298 <__gethex+0x38c>
 8006234:	b127      	cbz	r7, 8006240 <__gethex+0x334>
 8006236:	4639      	mov	r1, r7
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fe4d 	bl	8006ed8 <__any_on>
 800623e:	4682      	mov	sl, r0
 8006240:	117b      	asrs	r3, r7, #5
 8006242:	2101      	movs	r1, #1
 8006244:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006248:	f007 071f 	and.w	r7, r7, #31
 800624c:	fa01 f707 	lsl.w	r7, r1, r7
 8006250:	421f      	tst	r7, r3
 8006252:	4629      	mov	r1, r5
 8006254:	4620      	mov	r0, r4
 8006256:	bf18      	it	ne
 8006258:	f04a 0a02 	orrne.w	sl, sl, #2
 800625c:	1b76      	subs	r6, r6, r5
 800625e:	f7ff fded 	bl	8005e3c <rshift>
 8006262:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006266:	2702      	movs	r7, #2
 8006268:	f1ba 0f00 	cmp.w	sl, #0
 800626c:	d048      	beq.n	8006300 <__gethex+0x3f4>
 800626e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d015      	beq.n	80062a2 <__gethex+0x396>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d017      	beq.n	80062aa <__gethex+0x39e>
 800627a:	2b01      	cmp	r3, #1
 800627c:	d109      	bne.n	8006292 <__gethex+0x386>
 800627e:	f01a 0f02 	tst.w	sl, #2
 8006282:	d006      	beq.n	8006292 <__gethex+0x386>
 8006284:	f8d9 0000 	ldr.w	r0, [r9]
 8006288:	ea4a 0a00 	orr.w	sl, sl, r0
 800628c:	f01a 0f01 	tst.w	sl, #1
 8006290:	d10e      	bne.n	80062b0 <__gethex+0x3a4>
 8006292:	f047 0710 	orr.w	r7, r7, #16
 8006296:	e033      	b.n	8006300 <__gethex+0x3f4>
 8006298:	f04f 0a01 	mov.w	sl, #1
 800629c:	e7d0      	b.n	8006240 <__gethex+0x334>
 800629e:	2701      	movs	r7, #1
 80062a0:	e7e2      	b.n	8006268 <__gethex+0x35c>
 80062a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a4:	f1c3 0301 	rsb	r3, r3, #1
 80062a8:	9315      	str	r3, [sp, #84]	; 0x54
 80062aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <__gethex+0x386>
 80062b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80062b4:	f104 0314 	add.w	r3, r4, #20
 80062b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80062bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80062c0:	f04f 0c00 	mov.w	ip, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 80062ce:	d01c      	beq.n	800630a <__gethex+0x3fe>
 80062d0:	3201      	adds	r2, #1
 80062d2:	6002      	str	r2, [r0, #0]
 80062d4:	2f02      	cmp	r7, #2
 80062d6:	f104 0314 	add.w	r3, r4, #20
 80062da:	d13f      	bne.n	800635c <__gethex+0x450>
 80062dc:	f8d8 2000 	ldr.w	r2, [r8]
 80062e0:	3a01      	subs	r2, #1
 80062e2:	42b2      	cmp	r2, r6
 80062e4:	d10a      	bne.n	80062fc <__gethex+0x3f0>
 80062e6:	1171      	asrs	r1, r6, #5
 80062e8:	2201      	movs	r2, #1
 80062ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062ee:	f006 061f 	and.w	r6, r6, #31
 80062f2:	fa02 f606 	lsl.w	r6, r2, r6
 80062f6:	421e      	tst	r6, r3
 80062f8:	bf18      	it	ne
 80062fa:	4617      	movne	r7, r2
 80062fc:	f047 0720 	orr.w	r7, r7, #32
 8006300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006302:	601c      	str	r4, [r3, #0]
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	601d      	str	r5, [r3, #0]
 8006308:	e695      	b.n	8006036 <__gethex+0x12a>
 800630a:	4299      	cmp	r1, r3
 800630c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006310:	d8d8      	bhi.n	80062c4 <__gethex+0x3b8>
 8006312:	68a3      	ldr	r3, [r4, #8]
 8006314:	459b      	cmp	fp, r3
 8006316:	db19      	blt.n	800634c <__gethex+0x440>
 8006318:	6861      	ldr	r1, [r4, #4]
 800631a:	ee18 0a10 	vmov	r0, s16
 800631e:	3101      	adds	r1, #1
 8006320:	f000 f93a 	bl	8006598 <_Balloc>
 8006324:	4681      	mov	r9, r0
 8006326:	b918      	cbnz	r0, 8006330 <__gethex+0x424>
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <__gethex+0x488>)
 800632a:	4602      	mov	r2, r0
 800632c:	2184      	movs	r1, #132	; 0x84
 800632e:	e6a8      	b.n	8006082 <__gethex+0x176>
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	3202      	adds	r2, #2
 8006334:	f104 010c 	add.w	r1, r4, #12
 8006338:	0092      	lsls	r2, r2, #2
 800633a:	300c      	adds	r0, #12
 800633c:	f000 f91e 	bl	800657c <memcpy>
 8006340:	4621      	mov	r1, r4
 8006342:	ee18 0a10 	vmov	r0, s16
 8006346:	f000 f967 	bl	8006618 <_Bfree>
 800634a:	464c      	mov	r4, r9
 800634c:	6923      	ldr	r3, [r4, #16]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006354:	6122      	str	r2, [r4, #16]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]
 800635a:	e7bb      	b.n	80062d4 <__gethex+0x3c8>
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	455a      	cmp	r2, fp
 8006360:	dd0b      	ble.n	800637a <__gethex+0x46e>
 8006362:	2101      	movs	r1, #1
 8006364:	4620      	mov	r0, r4
 8006366:	f7ff fd69 	bl	8005e3c <rshift>
 800636a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800636e:	3501      	adds	r5, #1
 8006370:	42ab      	cmp	r3, r5
 8006372:	f6ff aed0 	blt.w	8006116 <__gethex+0x20a>
 8006376:	2701      	movs	r7, #1
 8006378:	e7c0      	b.n	80062fc <__gethex+0x3f0>
 800637a:	f016 061f 	ands.w	r6, r6, #31
 800637e:	d0fa      	beq.n	8006376 <__gethex+0x46a>
 8006380:	4453      	add	r3, sl
 8006382:	f1c6 0620 	rsb	r6, r6, #32
 8006386:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800638a:	f000 f9f7 	bl	800677c <__hi0bits>
 800638e:	42b0      	cmp	r0, r6
 8006390:	dbe7      	blt.n	8006362 <__gethex+0x456>
 8006392:	e7f0      	b.n	8006376 <__gethex+0x46a>
 8006394:	08008f10 	.word	0x08008f10

08006398 <L_shift>:
 8006398:	f1c2 0208 	rsb	r2, r2, #8
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	b570      	push	{r4, r5, r6, lr}
 80063a0:	f1c2 0620 	rsb	r6, r2, #32
 80063a4:	6843      	ldr	r3, [r0, #4]
 80063a6:	6804      	ldr	r4, [r0, #0]
 80063a8:	fa03 f506 	lsl.w	r5, r3, r6
 80063ac:	432c      	orrs	r4, r5
 80063ae:	40d3      	lsrs	r3, r2
 80063b0:	6004      	str	r4, [r0, #0]
 80063b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80063b6:	4288      	cmp	r0, r1
 80063b8:	d3f4      	bcc.n	80063a4 <L_shift+0xc>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}

080063bc <__match>:
 80063bc:	b530      	push	{r4, r5, lr}
 80063be:	6803      	ldr	r3, [r0, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	b914      	cbnz	r4, 80063ce <__match+0x12>
 80063c8:	6003      	str	r3, [r0, #0]
 80063ca:	2001      	movs	r0, #1
 80063cc:	bd30      	pop	{r4, r5, pc}
 80063ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80063d6:	2d19      	cmp	r5, #25
 80063d8:	bf98      	it	ls
 80063da:	3220      	addls	r2, #32
 80063dc:	42a2      	cmp	r2, r4
 80063de:	d0f0      	beq.n	80063c2 <__match+0x6>
 80063e0:	2000      	movs	r0, #0
 80063e2:	e7f3      	b.n	80063cc <__match+0x10>

080063e4 <__hexnan>:
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	680b      	ldr	r3, [r1, #0]
 80063ea:	115e      	asrs	r6, r3, #5
 80063ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80063f0:	f013 031f 	ands.w	r3, r3, #31
 80063f4:	b087      	sub	sp, #28
 80063f6:	bf18      	it	ne
 80063f8:	3604      	addne	r6, #4
 80063fa:	2500      	movs	r5, #0
 80063fc:	1f37      	subs	r7, r6, #4
 80063fe:	4690      	mov	r8, r2
 8006400:	6802      	ldr	r2, [r0, #0]
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	4682      	mov	sl, r0
 8006406:	f846 5c04 	str.w	r5, [r6, #-4]
 800640a:	46b9      	mov	r9, r7
 800640c:	463c      	mov	r4, r7
 800640e:	9502      	str	r5, [sp, #8]
 8006410:	46ab      	mov	fp, r5
 8006412:	7851      	ldrb	r1, [r2, #1]
 8006414:	1c53      	adds	r3, r2, #1
 8006416:	9303      	str	r3, [sp, #12]
 8006418:	b341      	cbz	r1, 800646c <__hexnan+0x88>
 800641a:	4608      	mov	r0, r1
 800641c:	9205      	str	r2, [sp, #20]
 800641e:	9104      	str	r1, [sp, #16]
 8006420:	f7ff fd5e 	bl	8005ee0 <__hexdig_fun>
 8006424:	2800      	cmp	r0, #0
 8006426:	d14f      	bne.n	80064c8 <__hexnan+0xe4>
 8006428:	9904      	ldr	r1, [sp, #16]
 800642a:	9a05      	ldr	r2, [sp, #20]
 800642c:	2920      	cmp	r1, #32
 800642e:	d818      	bhi.n	8006462 <__hexnan+0x7e>
 8006430:	9b02      	ldr	r3, [sp, #8]
 8006432:	459b      	cmp	fp, r3
 8006434:	dd13      	ble.n	800645e <__hexnan+0x7a>
 8006436:	454c      	cmp	r4, r9
 8006438:	d206      	bcs.n	8006448 <__hexnan+0x64>
 800643a:	2d07      	cmp	r5, #7
 800643c:	dc04      	bgt.n	8006448 <__hexnan+0x64>
 800643e:	462a      	mov	r2, r5
 8006440:	4649      	mov	r1, r9
 8006442:	4620      	mov	r0, r4
 8006444:	f7ff ffa8 	bl	8006398 <L_shift>
 8006448:	4544      	cmp	r4, r8
 800644a:	d950      	bls.n	80064ee <__hexnan+0x10a>
 800644c:	2300      	movs	r3, #0
 800644e:	f1a4 0904 	sub.w	r9, r4, #4
 8006452:	f844 3c04 	str.w	r3, [r4, #-4]
 8006456:	f8cd b008 	str.w	fp, [sp, #8]
 800645a:	464c      	mov	r4, r9
 800645c:	461d      	mov	r5, r3
 800645e:	9a03      	ldr	r2, [sp, #12]
 8006460:	e7d7      	b.n	8006412 <__hexnan+0x2e>
 8006462:	2929      	cmp	r1, #41	; 0x29
 8006464:	d156      	bne.n	8006514 <__hexnan+0x130>
 8006466:	3202      	adds	r2, #2
 8006468:	f8ca 2000 	str.w	r2, [sl]
 800646c:	f1bb 0f00 	cmp.w	fp, #0
 8006470:	d050      	beq.n	8006514 <__hexnan+0x130>
 8006472:	454c      	cmp	r4, r9
 8006474:	d206      	bcs.n	8006484 <__hexnan+0xa0>
 8006476:	2d07      	cmp	r5, #7
 8006478:	dc04      	bgt.n	8006484 <__hexnan+0xa0>
 800647a:	462a      	mov	r2, r5
 800647c:	4649      	mov	r1, r9
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff ff8a 	bl	8006398 <L_shift>
 8006484:	4544      	cmp	r4, r8
 8006486:	d934      	bls.n	80064f2 <__hexnan+0x10e>
 8006488:	f1a8 0204 	sub.w	r2, r8, #4
 800648c:	4623      	mov	r3, r4
 800648e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006492:	f842 1f04 	str.w	r1, [r2, #4]!
 8006496:	429f      	cmp	r7, r3
 8006498:	d2f9      	bcs.n	800648e <__hexnan+0xaa>
 800649a:	1b3b      	subs	r3, r7, r4
 800649c:	f023 0303 	bic.w	r3, r3, #3
 80064a0:	3304      	adds	r3, #4
 80064a2:	3401      	adds	r4, #1
 80064a4:	3e03      	subs	r6, #3
 80064a6:	42b4      	cmp	r4, r6
 80064a8:	bf88      	it	hi
 80064aa:	2304      	movhi	r3, #4
 80064ac:	4443      	add	r3, r8
 80064ae:	2200      	movs	r2, #0
 80064b0:	f843 2b04 	str.w	r2, [r3], #4
 80064b4:	429f      	cmp	r7, r3
 80064b6:	d2fb      	bcs.n	80064b0 <__hexnan+0xcc>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	b91b      	cbnz	r3, 80064c4 <__hexnan+0xe0>
 80064bc:	4547      	cmp	r7, r8
 80064be:	d127      	bne.n	8006510 <__hexnan+0x12c>
 80064c0:	2301      	movs	r3, #1
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	2005      	movs	r0, #5
 80064c6:	e026      	b.n	8006516 <__hexnan+0x132>
 80064c8:	3501      	adds	r5, #1
 80064ca:	2d08      	cmp	r5, #8
 80064cc:	f10b 0b01 	add.w	fp, fp, #1
 80064d0:	dd06      	ble.n	80064e0 <__hexnan+0xfc>
 80064d2:	4544      	cmp	r4, r8
 80064d4:	d9c3      	bls.n	800645e <__hexnan+0x7a>
 80064d6:	2300      	movs	r3, #0
 80064d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80064dc:	2501      	movs	r5, #1
 80064de:	3c04      	subs	r4, #4
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	f000 000f 	and.w	r0, r0, #15
 80064e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	e7b7      	b.n	800645e <__hexnan+0x7a>
 80064ee:	2508      	movs	r5, #8
 80064f0:	e7b5      	b.n	800645e <__hexnan+0x7a>
 80064f2:	9b01      	ldr	r3, [sp, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0df      	beq.n	80064b8 <__hexnan+0xd4>
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	f1c3 0320 	rsb	r3, r3, #32
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
 8006504:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006508:	401a      	ands	r2, r3
 800650a:	f846 2c04 	str.w	r2, [r6, #-4]
 800650e:	e7d3      	b.n	80064b8 <__hexnan+0xd4>
 8006510:	3f04      	subs	r7, #4
 8006512:	e7d1      	b.n	80064b8 <__hexnan+0xd4>
 8006514:	2004      	movs	r0, #4
 8006516:	b007      	add	sp, #28
 8006518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800651c <_localeconv_r>:
 800651c:	4800      	ldr	r0, [pc, #0]	; (8006520 <_localeconv_r+0x4>)
 800651e:	4770      	bx	lr
 8006520:	2000015c 	.word	0x2000015c

08006524 <_lseek_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d07      	ldr	r5, [pc, #28]	; (8006544 <_lseek_r+0x20>)
 8006528:	4604      	mov	r4, r0
 800652a:	4608      	mov	r0, r1
 800652c:	4611      	mov	r1, r2
 800652e:	2200      	movs	r2, #0
 8006530:	602a      	str	r2, [r5, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	f7fb fb02 	bl	8001b3c <_lseek>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_lseek_r+0x1e>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_lseek_r+0x1e>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	200003fc 	.word	0x200003fc

08006548 <malloc>:
 8006548:	4b02      	ldr	r3, [pc, #8]	; (8006554 <malloc+0xc>)
 800654a:	4601      	mov	r1, r0
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	f000 bd67 	b.w	8007020 <_malloc_r>
 8006552:	bf00      	nop
 8006554:	20000004 	.word	0x20000004

08006558 <__ascii_mbtowc>:
 8006558:	b082      	sub	sp, #8
 800655a:	b901      	cbnz	r1, 800655e <__ascii_mbtowc+0x6>
 800655c:	a901      	add	r1, sp, #4
 800655e:	b142      	cbz	r2, 8006572 <__ascii_mbtowc+0x1a>
 8006560:	b14b      	cbz	r3, 8006576 <__ascii_mbtowc+0x1e>
 8006562:	7813      	ldrb	r3, [r2, #0]
 8006564:	600b      	str	r3, [r1, #0]
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	1e10      	subs	r0, r2, #0
 800656a:	bf18      	it	ne
 800656c:	2001      	movne	r0, #1
 800656e:	b002      	add	sp, #8
 8006570:	4770      	bx	lr
 8006572:	4610      	mov	r0, r2
 8006574:	e7fb      	b.n	800656e <__ascii_mbtowc+0x16>
 8006576:	f06f 0001 	mvn.w	r0, #1
 800657a:	e7f8      	b.n	800656e <__ascii_mbtowc+0x16>

0800657c <memcpy>:
 800657c:	440a      	add	r2, r1
 800657e:	4291      	cmp	r1, r2
 8006580:	f100 33ff 	add.w	r3, r0, #4294967295
 8006584:	d100      	bne.n	8006588 <memcpy+0xc>
 8006586:	4770      	bx	lr
 8006588:	b510      	push	{r4, lr}
 800658a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006592:	4291      	cmp	r1, r2
 8006594:	d1f9      	bne.n	800658a <memcpy+0xe>
 8006596:	bd10      	pop	{r4, pc}

08006598 <_Balloc>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800659c:	4604      	mov	r4, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	b976      	cbnz	r6, 80065c0 <_Balloc+0x28>
 80065a2:	2010      	movs	r0, #16
 80065a4:	f7ff ffd0 	bl	8006548 <malloc>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6260      	str	r0, [r4, #36]	; 0x24
 80065ac:	b920      	cbnz	r0, 80065b8 <_Balloc+0x20>
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <_Balloc+0x78>)
 80065b0:	4818      	ldr	r0, [pc, #96]	; (8006614 <_Balloc+0x7c>)
 80065b2:	2166      	movs	r1, #102	; 0x66
 80065b4:	f001 fb5c 	bl	8007c70 <__assert_func>
 80065b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065bc:	6006      	str	r6, [r0, #0]
 80065be:	60c6      	str	r6, [r0, #12]
 80065c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065c2:	68f3      	ldr	r3, [r6, #12]
 80065c4:	b183      	cbz	r3, 80065e8 <_Balloc+0x50>
 80065c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ce:	b9b8      	cbnz	r0, 8006600 <_Balloc+0x68>
 80065d0:	2101      	movs	r1, #1
 80065d2:	fa01 f605 	lsl.w	r6, r1, r5
 80065d6:	1d72      	adds	r2, r6, #5
 80065d8:	0092      	lsls	r2, r2, #2
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fc9d 	bl	8006f1a <_calloc_r>
 80065e0:	b160      	cbz	r0, 80065fc <_Balloc+0x64>
 80065e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065e6:	e00e      	b.n	8006606 <_Balloc+0x6e>
 80065e8:	2221      	movs	r2, #33	; 0x21
 80065ea:	2104      	movs	r1, #4
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fc94 	bl	8006f1a <_calloc_r>
 80065f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f4:	60f0      	str	r0, [r6, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e4      	bne.n	80065c6 <_Balloc+0x2e>
 80065fc:	2000      	movs	r0, #0
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	6802      	ldr	r2, [r0, #0]
 8006602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006606:	2300      	movs	r3, #0
 8006608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800660c:	e7f7      	b.n	80065fe <_Balloc+0x66>
 800660e:	bf00      	nop
 8006610:	08008e9e 	.word	0x08008e9e
 8006614:	08008f9c 	.word	0x08008f9c

08006618 <_Bfree>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	b976      	cbnz	r6, 8006640 <_Bfree+0x28>
 8006622:	2010      	movs	r0, #16
 8006624:	f7ff ff90 	bl	8006548 <malloc>
 8006628:	4602      	mov	r2, r0
 800662a:	6268      	str	r0, [r5, #36]	; 0x24
 800662c:	b920      	cbnz	r0, 8006638 <_Bfree+0x20>
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_Bfree+0x3c>)
 8006630:	4809      	ldr	r0, [pc, #36]	; (8006658 <_Bfree+0x40>)
 8006632:	218a      	movs	r1, #138	; 0x8a
 8006634:	f001 fb1c 	bl	8007c70 <__assert_func>
 8006638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800663c:	6006      	str	r6, [r0, #0]
 800663e:	60c6      	str	r6, [r0, #12]
 8006640:	b13c      	cbz	r4, 8006652 <_Bfree+0x3a>
 8006642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006644:	6862      	ldr	r2, [r4, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800664c:	6021      	str	r1, [r4, #0]
 800664e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	08008e9e 	.word	0x08008e9e
 8006658:	08008f9c 	.word	0x08008f9c

0800665c <__multadd>:
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	690d      	ldr	r5, [r1, #16]
 8006662:	4607      	mov	r7, r0
 8006664:	460c      	mov	r4, r1
 8006666:	461e      	mov	r6, r3
 8006668:	f101 0c14 	add.w	ip, r1, #20
 800666c:	2000      	movs	r0, #0
 800666e:	f8dc 3000 	ldr.w	r3, [ip]
 8006672:	b299      	uxth	r1, r3
 8006674:	fb02 6101 	mla	r1, r2, r1, r6
 8006678:	0c1e      	lsrs	r6, r3, #16
 800667a:	0c0b      	lsrs	r3, r1, #16
 800667c:	fb02 3306 	mla	r3, r2, r6, r3
 8006680:	b289      	uxth	r1, r1
 8006682:	3001      	adds	r0, #1
 8006684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006688:	4285      	cmp	r5, r0
 800668a:	f84c 1b04 	str.w	r1, [ip], #4
 800668e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006692:	dcec      	bgt.n	800666e <__multadd+0x12>
 8006694:	b30e      	cbz	r6, 80066da <__multadd+0x7e>
 8006696:	68a3      	ldr	r3, [r4, #8]
 8006698:	42ab      	cmp	r3, r5
 800669a:	dc19      	bgt.n	80066d0 <__multadd+0x74>
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4638      	mov	r0, r7
 80066a0:	3101      	adds	r1, #1
 80066a2:	f7ff ff79 	bl	8006598 <_Balloc>
 80066a6:	4680      	mov	r8, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <__multadd+0x5a>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <__multadd+0x84>)
 80066ae:	480d      	ldr	r0, [pc, #52]	; (80066e4 <__multadd+0x88>)
 80066b0:	21b5      	movs	r1, #181	; 0xb5
 80066b2:	f001 fadd 	bl	8007c70 <__assert_func>
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	3202      	adds	r2, #2
 80066ba:	f104 010c 	add.w	r1, r4, #12
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	300c      	adds	r0, #12
 80066c2:	f7ff ff5b 	bl	800657c <memcpy>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7ff ffa5 	bl	8006618 <_Bfree>
 80066ce:	4644      	mov	r4, r8
 80066d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066d4:	3501      	adds	r5, #1
 80066d6:	615e      	str	r6, [r3, #20]
 80066d8:	6125      	str	r5, [r4, #16]
 80066da:	4620      	mov	r0, r4
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e0:	08008f10 	.word	0x08008f10
 80066e4:	08008f9c 	.word	0x08008f9c

080066e8 <__s2b>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	460c      	mov	r4, r1
 80066ee:	4615      	mov	r5, r2
 80066f0:	461f      	mov	r7, r3
 80066f2:	2209      	movs	r2, #9
 80066f4:	3308      	adds	r3, #8
 80066f6:	4606      	mov	r6, r0
 80066f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066fc:	2100      	movs	r1, #0
 80066fe:	2201      	movs	r2, #1
 8006700:	429a      	cmp	r2, r3
 8006702:	db09      	blt.n	8006718 <__s2b+0x30>
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff ff47 	bl	8006598 <_Balloc>
 800670a:	b940      	cbnz	r0, 800671e <__s2b+0x36>
 800670c:	4602      	mov	r2, r0
 800670e:	4b19      	ldr	r3, [pc, #100]	; (8006774 <__s2b+0x8c>)
 8006710:	4819      	ldr	r0, [pc, #100]	; (8006778 <__s2b+0x90>)
 8006712:	21ce      	movs	r1, #206	; 0xce
 8006714:	f001 faac 	bl	8007c70 <__assert_func>
 8006718:	0052      	lsls	r2, r2, #1
 800671a:	3101      	adds	r1, #1
 800671c:	e7f0      	b.n	8006700 <__s2b+0x18>
 800671e:	9b08      	ldr	r3, [sp, #32]
 8006720:	6143      	str	r3, [r0, #20]
 8006722:	2d09      	cmp	r5, #9
 8006724:	f04f 0301 	mov.w	r3, #1
 8006728:	6103      	str	r3, [r0, #16]
 800672a:	dd16      	ble.n	800675a <__s2b+0x72>
 800672c:	f104 0909 	add.w	r9, r4, #9
 8006730:	46c8      	mov	r8, r9
 8006732:	442c      	add	r4, r5
 8006734:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006738:	4601      	mov	r1, r0
 800673a:	3b30      	subs	r3, #48	; 0x30
 800673c:	220a      	movs	r2, #10
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ff8c 	bl	800665c <__multadd>
 8006744:	45a0      	cmp	r8, r4
 8006746:	d1f5      	bne.n	8006734 <__s2b+0x4c>
 8006748:	f1a5 0408 	sub.w	r4, r5, #8
 800674c:	444c      	add	r4, r9
 800674e:	1b2d      	subs	r5, r5, r4
 8006750:	1963      	adds	r3, r4, r5
 8006752:	42bb      	cmp	r3, r7
 8006754:	db04      	blt.n	8006760 <__s2b+0x78>
 8006756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675a:	340a      	adds	r4, #10
 800675c:	2509      	movs	r5, #9
 800675e:	e7f6      	b.n	800674e <__s2b+0x66>
 8006760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006764:	4601      	mov	r1, r0
 8006766:	3b30      	subs	r3, #48	; 0x30
 8006768:	220a      	movs	r2, #10
 800676a:	4630      	mov	r0, r6
 800676c:	f7ff ff76 	bl	800665c <__multadd>
 8006770:	e7ee      	b.n	8006750 <__s2b+0x68>
 8006772:	bf00      	nop
 8006774:	08008f10 	.word	0x08008f10
 8006778:	08008f9c 	.word	0x08008f9c

0800677c <__hi0bits>:
 800677c:	0c03      	lsrs	r3, r0, #16
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	b9d3      	cbnz	r3, 80067b8 <__hi0bits+0x3c>
 8006782:	0400      	lsls	r0, r0, #16
 8006784:	2310      	movs	r3, #16
 8006786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800678a:	bf04      	itt	eq
 800678c:	0200      	lsleq	r0, r0, #8
 800678e:	3308      	addeq	r3, #8
 8006790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006794:	bf04      	itt	eq
 8006796:	0100      	lsleq	r0, r0, #4
 8006798:	3304      	addeq	r3, #4
 800679a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800679e:	bf04      	itt	eq
 80067a0:	0080      	lsleq	r0, r0, #2
 80067a2:	3302      	addeq	r3, #2
 80067a4:	2800      	cmp	r0, #0
 80067a6:	db05      	blt.n	80067b4 <__hi0bits+0x38>
 80067a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067ac:	f103 0301 	add.w	r3, r3, #1
 80067b0:	bf08      	it	eq
 80067b2:	2320      	moveq	r3, #32
 80067b4:	4618      	mov	r0, r3
 80067b6:	4770      	bx	lr
 80067b8:	2300      	movs	r3, #0
 80067ba:	e7e4      	b.n	8006786 <__hi0bits+0xa>

080067bc <__lo0bits>:
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	f013 0207 	ands.w	r2, r3, #7
 80067c2:	4601      	mov	r1, r0
 80067c4:	d00b      	beq.n	80067de <__lo0bits+0x22>
 80067c6:	07da      	lsls	r2, r3, #31
 80067c8:	d423      	bmi.n	8006812 <__lo0bits+0x56>
 80067ca:	0798      	lsls	r0, r3, #30
 80067cc:	bf49      	itett	mi
 80067ce:	085b      	lsrmi	r3, r3, #1
 80067d0:	089b      	lsrpl	r3, r3, #2
 80067d2:	2001      	movmi	r0, #1
 80067d4:	600b      	strmi	r3, [r1, #0]
 80067d6:	bf5c      	itt	pl
 80067d8:	600b      	strpl	r3, [r1, #0]
 80067da:	2002      	movpl	r0, #2
 80067dc:	4770      	bx	lr
 80067de:	b298      	uxth	r0, r3
 80067e0:	b9a8      	cbnz	r0, 800680e <__lo0bits+0x52>
 80067e2:	0c1b      	lsrs	r3, r3, #16
 80067e4:	2010      	movs	r0, #16
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	b90a      	cbnz	r2, 80067ee <__lo0bits+0x32>
 80067ea:	3008      	adds	r0, #8
 80067ec:	0a1b      	lsrs	r3, r3, #8
 80067ee:	071a      	lsls	r2, r3, #28
 80067f0:	bf04      	itt	eq
 80067f2:	091b      	lsreq	r3, r3, #4
 80067f4:	3004      	addeq	r0, #4
 80067f6:	079a      	lsls	r2, r3, #30
 80067f8:	bf04      	itt	eq
 80067fa:	089b      	lsreq	r3, r3, #2
 80067fc:	3002      	addeq	r0, #2
 80067fe:	07da      	lsls	r2, r3, #31
 8006800:	d403      	bmi.n	800680a <__lo0bits+0x4e>
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	f100 0001 	add.w	r0, r0, #1
 8006808:	d005      	beq.n	8006816 <__lo0bits+0x5a>
 800680a:	600b      	str	r3, [r1, #0]
 800680c:	4770      	bx	lr
 800680e:	4610      	mov	r0, r2
 8006810:	e7e9      	b.n	80067e6 <__lo0bits+0x2a>
 8006812:	2000      	movs	r0, #0
 8006814:	4770      	bx	lr
 8006816:	2020      	movs	r0, #32
 8006818:	4770      	bx	lr
	...

0800681c <__i2b>:
 800681c:	b510      	push	{r4, lr}
 800681e:	460c      	mov	r4, r1
 8006820:	2101      	movs	r1, #1
 8006822:	f7ff feb9 	bl	8006598 <_Balloc>
 8006826:	4602      	mov	r2, r0
 8006828:	b928      	cbnz	r0, 8006836 <__i2b+0x1a>
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <__i2b+0x24>)
 800682c:	4805      	ldr	r0, [pc, #20]	; (8006844 <__i2b+0x28>)
 800682e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006832:	f001 fa1d 	bl	8007c70 <__assert_func>
 8006836:	2301      	movs	r3, #1
 8006838:	6144      	str	r4, [r0, #20]
 800683a:	6103      	str	r3, [r0, #16]
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	08008f10 	.word	0x08008f10
 8006844:	08008f9c 	.word	0x08008f9c

08006848 <__multiply>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4691      	mov	r9, r2
 800684e:	690a      	ldr	r2, [r1, #16]
 8006850:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	bfb8      	it	lt
 8006858:	460b      	movlt	r3, r1
 800685a:	460c      	mov	r4, r1
 800685c:	bfbc      	itt	lt
 800685e:	464c      	movlt	r4, r9
 8006860:	4699      	movlt	r9, r3
 8006862:	6927      	ldr	r7, [r4, #16]
 8006864:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	6861      	ldr	r1, [r4, #4]
 800686c:	eb07 060a 	add.w	r6, r7, sl
 8006870:	42b3      	cmp	r3, r6
 8006872:	b085      	sub	sp, #20
 8006874:	bfb8      	it	lt
 8006876:	3101      	addlt	r1, #1
 8006878:	f7ff fe8e 	bl	8006598 <_Balloc>
 800687c:	b930      	cbnz	r0, 800688c <__multiply+0x44>
 800687e:	4602      	mov	r2, r0
 8006880:	4b44      	ldr	r3, [pc, #272]	; (8006994 <__multiply+0x14c>)
 8006882:	4845      	ldr	r0, [pc, #276]	; (8006998 <__multiply+0x150>)
 8006884:	f240 115d 	movw	r1, #349	; 0x15d
 8006888:	f001 f9f2 	bl	8007c70 <__assert_func>
 800688c:	f100 0514 	add.w	r5, r0, #20
 8006890:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006894:	462b      	mov	r3, r5
 8006896:	2200      	movs	r2, #0
 8006898:	4543      	cmp	r3, r8
 800689a:	d321      	bcc.n	80068e0 <__multiply+0x98>
 800689c:	f104 0314 	add.w	r3, r4, #20
 80068a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068a4:	f109 0314 	add.w	r3, r9, #20
 80068a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068ac:	9202      	str	r2, [sp, #8]
 80068ae:	1b3a      	subs	r2, r7, r4
 80068b0:	3a15      	subs	r2, #21
 80068b2:	f022 0203 	bic.w	r2, r2, #3
 80068b6:	3204      	adds	r2, #4
 80068b8:	f104 0115 	add.w	r1, r4, #21
 80068bc:	428f      	cmp	r7, r1
 80068be:	bf38      	it	cc
 80068c0:	2204      	movcc	r2, #4
 80068c2:	9201      	str	r2, [sp, #4]
 80068c4:	9a02      	ldr	r2, [sp, #8]
 80068c6:	9303      	str	r3, [sp, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d80c      	bhi.n	80068e6 <__multiply+0x9e>
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	dd03      	ble.n	80068d8 <__multiply+0x90>
 80068d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d05a      	beq.n	800698e <__multiply+0x146>
 80068d8:	6106      	str	r6, [r0, #16]
 80068da:	b005      	add	sp, #20
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	f843 2b04 	str.w	r2, [r3], #4
 80068e4:	e7d8      	b.n	8006898 <__multiply+0x50>
 80068e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	d024      	beq.n	800693a <__multiply+0xf2>
 80068f0:	f104 0e14 	add.w	lr, r4, #20
 80068f4:	46a9      	mov	r9, r5
 80068f6:	f04f 0c00 	mov.w	ip, #0
 80068fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068fe:	f8d9 1000 	ldr.w	r1, [r9]
 8006902:	fa1f fb82 	uxth.w	fp, r2
 8006906:	b289      	uxth	r1, r1
 8006908:	fb0a 110b 	mla	r1, sl, fp, r1
 800690c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006910:	f8d9 2000 	ldr.w	r2, [r9]
 8006914:	4461      	add	r1, ip
 8006916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800691a:	fb0a c20b 	mla	r2, sl, fp, ip
 800691e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006922:	b289      	uxth	r1, r1
 8006924:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006928:	4577      	cmp	r7, lr
 800692a:	f849 1b04 	str.w	r1, [r9], #4
 800692e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006932:	d8e2      	bhi.n	80068fa <__multiply+0xb2>
 8006934:	9a01      	ldr	r2, [sp, #4]
 8006936:	f845 c002 	str.w	ip, [r5, r2]
 800693a:	9a03      	ldr	r2, [sp, #12]
 800693c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006940:	3304      	adds	r3, #4
 8006942:	f1b9 0f00 	cmp.w	r9, #0
 8006946:	d020      	beq.n	800698a <__multiply+0x142>
 8006948:	6829      	ldr	r1, [r5, #0]
 800694a:	f104 0c14 	add.w	ip, r4, #20
 800694e:	46ae      	mov	lr, r5
 8006950:	f04f 0a00 	mov.w	sl, #0
 8006954:	f8bc b000 	ldrh.w	fp, [ip]
 8006958:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800695c:	fb09 220b 	mla	r2, r9, fp, r2
 8006960:	4492      	add	sl, r2
 8006962:	b289      	uxth	r1, r1
 8006964:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006968:	f84e 1b04 	str.w	r1, [lr], #4
 800696c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006970:	f8be 1000 	ldrh.w	r1, [lr]
 8006974:	0c12      	lsrs	r2, r2, #16
 8006976:	fb09 1102 	mla	r1, r9, r2, r1
 800697a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800697e:	4567      	cmp	r7, ip
 8006980:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006984:	d8e6      	bhi.n	8006954 <__multiply+0x10c>
 8006986:	9a01      	ldr	r2, [sp, #4]
 8006988:	50a9      	str	r1, [r5, r2]
 800698a:	3504      	adds	r5, #4
 800698c:	e79a      	b.n	80068c4 <__multiply+0x7c>
 800698e:	3e01      	subs	r6, #1
 8006990:	e79c      	b.n	80068cc <__multiply+0x84>
 8006992:	bf00      	nop
 8006994:	08008f10 	.word	0x08008f10
 8006998:	08008f9c 	.word	0x08008f9c

0800699c <__pow5mult>:
 800699c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a0:	4615      	mov	r5, r2
 80069a2:	f012 0203 	ands.w	r2, r2, #3
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	d007      	beq.n	80069bc <__pow5mult+0x20>
 80069ac:	4c25      	ldr	r4, [pc, #148]	; (8006a44 <__pow5mult+0xa8>)
 80069ae:	3a01      	subs	r2, #1
 80069b0:	2300      	movs	r3, #0
 80069b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069b6:	f7ff fe51 	bl	800665c <__multadd>
 80069ba:	4607      	mov	r7, r0
 80069bc:	10ad      	asrs	r5, r5, #2
 80069be:	d03d      	beq.n	8006a3c <__pow5mult+0xa0>
 80069c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069c2:	b97c      	cbnz	r4, 80069e4 <__pow5mult+0x48>
 80069c4:	2010      	movs	r0, #16
 80069c6:	f7ff fdbf 	bl	8006548 <malloc>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6270      	str	r0, [r6, #36]	; 0x24
 80069ce:	b928      	cbnz	r0, 80069dc <__pow5mult+0x40>
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <__pow5mult+0xac>)
 80069d2:	481e      	ldr	r0, [pc, #120]	; (8006a4c <__pow5mult+0xb0>)
 80069d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069d8:	f001 f94a 	bl	8007c70 <__assert_func>
 80069dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069e0:	6004      	str	r4, [r0, #0]
 80069e2:	60c4      	str	r4, [r0, #12]
 80069e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069ec:	b94c      	cbnz	r4, 8006a02 <__pow5mult+0x66>
 80069ee:	f240 2171 	movw	r1, #625	; 0x271
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ff12 	bl	800681c <__i2b>
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80069fe:	4604      	mov	r4, r0
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	07eb      	lsls	r3, r5, #31
 8006a08:	d50a      	bpl.n	8006a20 <__pow5mult+0x84>
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ff1a 	bl	8006848 <__multiply>
 8006a14:	4639      	mov	r1, r7
 8006a16:	4680      	mov	r8, r0
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f7ff fdfd 	bl	8006618 <_Bfree>
 8006a1e:	4647      	mov	r7, r8
 8006a20:	106d      	asrs	r5, r5, #1
 8006a22:	d00b      	beq.n	8006a3c <__pow5mult+0xa0>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	b938      	cbnz	r0, 8006a38 <__pow5mult+0x9c>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff ff0b 	bl	8006848 <__multiply>
 8006a32:	6020      	str	r0, [r4, #0]
 8006a34:	f8c0 9000 	str.w	r9, [r0]
 8006a38:	4604      	mov	r4, r0
 8006a3a:	e7e4      	b.n	8006a06 <__pow5mult+0x6a>
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a42:	bf00      	nop
 8006a44:	080090e8 	.word	0x080090e8
 8006a48:	08008e9e 	.word	0x08008e9e
 8006a4c:	08008f9c 	.word	0x08008f9c

08006a50 <__lshift>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	460c      	mov	r4, r1
 8006a56:	6849      	ldr	r1, [r1, #4]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	4607      	mov	r7, r0
 8006a62:	4691      	mov	r9, r2
 8006a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a68:	f108 0601 	add.w	r6, r8, #1
 8006a6c:	42b3      	cmp	r3, r6
 8006a6e:	db0b      	blt.n	8006a88 <__lshift+0x38>
 8006a70:	4638      	mov	r0, r7
 8006a72:	f7ff fd91 	bl	8006598 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b948      	cbnz	r0, 8006a8e <__lshift+0x3e>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b2a      	ldr	r3, [pc, #168]	; (8006b28 <__lshift+0xd8>)
 8006a7e:	482b      	ldr	r0, [pc, #172]	; (8006b2c <__lshift+0xdc>)
 8006a80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a84:	f001 f8f4 	bl	8007c70 <__assert_func>
 8006a88:	3101      	adds	r1, #1
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	e7ee      	b.n	8006a6c <__lshift+0x1c>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f100 0114 	add.w	r1, r0, #20
 8006a94:	f100 0210 	add.w	r2, r0, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	4553      	cmp	r3, sl
 8006a9c:	db37      	blt.n	8006b0e <__lshift+0xbe>
 8006a9e:	6920      	ldr	r0, [r4, #16]
 8006aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006aa4:	f104 0314 	add.w	r3, r4, #20
 8006aa8:	f019 091f 	ands.w	r9, r9, #31
 8006aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ab0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ab4:	d02f      	beq.n	8006b16 <__lshift+0xc6>
 8006ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8006aba:	468a      	mov	sl, r1
 8006abc:	f04f 0c00 	mov.w	ip, #0
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	fa02 f209 	lsl.w	r2, r2, r9
 8006ac6:	ea42 020c 	orr.w	r2, r2, ip
 8006aca:	f84a 2b04 	str.w	r2, [sl], #4
 8006ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad2:	4298      	cmp	r0, r3
 8006ad4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ad8:	d8f2      	bhi.n	8006ac0 <__lshift+0x70>
 8006ada:	1b03      	subs	r3, r0, r4
 8006adc:	3b15      	subs	r3, #21
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	f104 0215 	add.w	r2, r4, #21
 8006ae8:	4290      	cmp	r0, r2
 8006aea:	bf38      	it	cc
 8006aec:	2304      	movcc	r3, #4
 8006aee:	f841 c003 	str.w	ip, [r1, r3]
 8006af2:	f1bc 0f00 	cmp.w	ip, #0
 8006af6:	d001      	beq.n	8006afc <__lshift+0xac>
 8006af8:	f108 0602 	add.w	r6, r8, #2
 8006afc:	3e01      	subs	r6, #1
 8006afe:	4638      	mov	r0, r7
 8006b00:	612e      	str	r6, [r5, #16]
 8006b02:	4621      	mov	r1, r4
 8006b04:	f7ff fd88 	bl	8006618 <_Bfree>
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b12:	3301      	adds	r3, #1
 8006b14:	e7c1      	b.n	8006a9a <__lshift+0x4a>
 8006b16:	3904      	subs	r1, #4
 8006b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b20:	4298      	cmp	r0, r3
 8006b22:	d8f9      	bhi.n	8006b18 <__lshift+0xc8>
 8006b24:	e7ea      	b.n	8006afc <__lshift+0xac>
 8006b26:	bf00      	nop
 8006b28:	08008f10 	.word	0x08008f10
 8006b2c:	08008f9c 	.word	0x08008f9c

08006b30 <__mcmp>:
 8006b30:	b530      	push	{r4, r5, lr}
 8006b32:	6902      	ldr	r2, [r0, #16]
 8006b34:	690c      	ldr	r4, [r1, #16]
 8006b36:	1b12      	subs	r2, r2, r4
 8006b38:	d10e      	bne.n	8006b58 <__mcmp+0x28>
 8006b3a:	f100 0314 	add.w	r3, r0, #20
 8006b3e:	3114      	adds	r1, #20
 8006b40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b50:	42a5      	cmp	r5, r4
 8006b52:	d003      	beq.n	8006b5c <__mcmp+0x2c>
 8006b54:	d305      	bcc.n	8006b62 <__mcmp+0x32>
 8006b56:	2201      	movs	r2, #1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	bd30      	pop	{r4, r5, pc}
 8006b5c:	4283      	cmp	r3, r0
 8006b5e:	d3f3      	bcc.n	8006b48 <__mcmp+0x18>
 8006b60:	e7fa      	b.n	8006b58 <__mcmp+0x28>
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	e7f7      	b.n	8006b58 <__mcmp+0x28>

08006b68 <__mdiff>:
 8006b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	4606      	mov	r6, r0
 8006b70:	4611      	mov	r1, r2
 8006b72:	4620      	mov	r0, r4
 8006b74:	4690      	mov	r8, r2
 8006b76:	f7ff ffdb 	bl	8006b30 <__mcmp>
 8006b7a:	1e05      	subs	r5, r0, #0
 8006b7c:	d110      	bne.n	8006ba0 <__mdiff+0x38>
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff fd09 	bl	8006598 <_Balloc>
 8006b86:	b930      	cbnz	r0, 8006b96 <__mdiff+0x2e>
 8006b88:	4b3a      	ldr	r3, [pc, #232]	; (8006c74 <__mdiff+0x10c>)
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	f240 2132 	movw	r1, #562	; 0x232
 8006b90:	4839      	ldr	r0, [pc, #228]	; (8006c78 <__mdiff+0x110>)
 8006b92:	f001 f86d 	bl	8007c70 <__assert_func>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	bfa4      	itt	ge
 8006ba2:	4643      	movge	r3, r8
 8006ba4:	46a0      	movge	r8, r4
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bac:	bfa6      	itte	ge
 8006bae:	461c      	movge	r4, r3
 8006bb0:	2500      	movge	r5, #0
 8006bb2:	2501      	movlt	r5, #1
 8006bb4:	f7ff fcf0 	bl	8006598 <_Balloc>
 8006bb8:	b920      	cbnz	r0, 8006bc4 <__mdiff+0x5c>
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <__mdiff+0x10c>)
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bc2:	e7e5      	b.n	8006b90 <__mdiff+0x28>
 8006bc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bc8:	6926      	ldr	r6, [r4, #16]
 8006bca:	60c5      	str	r5, [r0, #12]
 8006bcc:	f104 0914 	add.w	r9, r4, #20
 8006bd0:	f108 0514 	add.w	r5, r8, #20
 8006bd4:	f100 0e14 	add.w	lr, r0, #20
 8006bd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006bdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006be0:	f108 0210 	add.w	r2, r8, #16
 8006be4:	46f2      	mov	sl, lr
 8006be6:	2100      	movs	r1, #0
 8006be8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006bf0:	fa1f f883 	uxth.w	r8, r3
 8006bf4:	fa11 f18b 	uxtah	r1, r1, fp
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	eba1 0808 	sub.w	r8, r1, r8
 8006bfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c06:	fa1f f888 	uxth.w	r8, r8
 8006c0a:	1419      	asrs	r1, r3, #16
 8006c0c:	454e      	cmp	r6, r9
 8006c0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c12:	f84a 3b04 	str.w	r3, [sl], #4
 8006c16:	d8e7      	bhi.n	8006be8 <__mdiff+0x80>
 8006c18:	1b33      	subs	r3, r6, r4
 8006c1a:	3b15      	subs	r3, #21
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	3304      	adds	r3, #4
 8006c22:	3415      	adds	r4, #21
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	bf38      	it	cc
 8006c28:	2304      	movcc	r3, #4
 8006c2a:	441d      	add	r5, r3
 8006c2c:	4473      	add	r3, lr
 8006c2e:	469e      	mov	lr, r3
 8006c30:	462e      	mov	r6, r5
 8006c32:	4566      	cmp	r6, ip
 8006c34:	d30e      	bcc.n	8006c54 <__mdiff+0xec>
 8006c36:	f10c 0203 	add.w	r2, ip, #3
 8006c3a:	1b52      	subs	r2, r2, r5
 8006c3c:	f022 0203 	bic.w	r2, r2, #3
 8006c40:	3d03      	subs	r5, #3
 8006c42:	45ac      	cmp	ip, r5
 8006c44:	bf38      	it	cc
 8006c46:	2200      	movcc	r2, #0
 8006c48:	441a      	add	r2, r3
 8006c4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c4e:	b17b      	cbz	r3, 8006c70 <__mdiff+0x108>
 8006c50:	6107      	str	r7, [r0, #16]
 8006c52:	e7a3      	b.n	8006b9c <__mdiff+0x34>
 8006c54:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c58:	fa11 f288 	uxtah	r2, r1, r8
 8006c5c:	1414      	asrs	r4, r2, #16
 8006c5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c62:	b292      	uxth	r2, r2
 8006c64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c68:	f84e 2b04 	str.w	r2, [lr], #4
 8006c6c:	1421      	asrs	r1, r4, #16
 8006c6e:	e7e0      	b.n	8006c32 <__mdiff+0xca>
 8006c70:	3f01      	subs	r7, #1
 8006c72:	e7ea      	b.n	8006c4a <__mdiff+0xe2>
 8006c74:	08008f10 	.word	0x08008f10
 8006c78:	08008f9c 	.word	0x08008f9c

08006c7c <__ulp>:
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	ed8d 0b00 	vstr	d0, [sp]
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	4912      	ldr	r1, [pc, #72]	; (8006cd0 <__ulp+0x54>)
 8006c86:	4019      	ands	r1, r3
 8006c88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	dd05      	ble.n	8006c9c <__ulp+0x20>
 8006c90:	2200      	movs	r2, #0
 8006c92:	460b      	mov	r3, r1
 8006c94:	ec43 2b10 	vmov	d0, r2, r3
 8006c98:	b002      	add	sp, #8
 8006c9a:	4770      	bx	lr
 8006c9c:	4249      	negs	r1, r1
 8006c9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006ca2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	da04      	bge.n	8006cba <__ulp+0x3e>
 8006cb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006cb4:	fa41 f300 	asr.w	r3, r1, r0
 8006cb8:	e7ec      	b.n	8006c94 <__ulp+0x18>
 8006cba:	f1a0 0114 	sub.w	r1, r0, #20
 8006cbe:	291e      	cmp	r1, #30
 8006cc0:	bfda      	itte	le
 8006cc2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006cc6:	fa20 f101 	lsrle.w	r1, r0, r1
 8006cca:	2101      	movgt	r1, #1
 8006ccc:	460a      	mov	r2, r1
 8006cce:	e7e1      	b.n	8006c94 <__ulp+0x18>
 8006cd0:	7ff00000 	.word	0x7ff00000

08006cd4 <__b2d>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	6905      	ldr	r5, [r0, #16]
 8006cd8:	f100 0714 	add.w	r7, r0, #20
 8006cdc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006ce0:	1f2e      	subs	r6, r5, #4
 8006ce2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7ff fd48 	bl	800677c <__hi0bits>
 8006cec:	f1c0 0320 	rsb	r3, r0, #32
 8006cf0:	280a      	cmp	r0, #10
 8006cf2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006d70 <__b2d+0x9c>
 8006cf6:	600b      	str	r3, [r1, #0]
 8006cf8:	dc14      	bgt.n	8006d24 <__b2d+0x50>
 8006cfa:	f1c0 0e0b 	rsb	lr, r0, #11
 8006cfe:	fa24 f10e 	lsr.w	r1, r4, lr
 8006d02:	42b7      	cmp	r7, r6
 8006d04:	ea41 030c 	orr.w	r3, r1, ip
 8006d08:	bf34      	ite	cc
 8006d0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006d0e:	2100      	movcs	r1, #0
 8006d10:	3015      	adds	r0, #21
 8006d12:	fa04 f000 	lsl.w	r0, r4, r0
 8006d16:	fa21 f10e 	lsr.w	r1, r1, lr
 8006d1a:	ea40 0201 	orr.w	r2, r0, r1
 8006d1e:	ec43 2b10 	vmov	d0, r2, r3
 8006d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d24:	42b7      	cmp	r7, r6
 8006d26:	bf3a      	itte	cc
 8006d28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006d2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8006d30:	2100      	movcs	r1, #0
 8006d32:	380b      	subs	r0, #11
 8006d34:	d017      	beq.n	8006d66 <__b2d+0x92>
 8006d36:	f1c0 0c20 	rsb	ip, r0, #32
 8006d3a:	fa04 f500 	lsl.w	r5, r4, r0
 8006d3e:	42be      	cmp	r6, r7
 8006d40:	fa21 f40c 	lsr.w	r4, r1, ip
 8006d44:	ea45 0504 	orr.w	r5, r5, r4
 8006d48:	bf8c      	ite	hi
 8006d4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006d4e:	2400      	movls	r4, #0
 8006d50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006d54:	fa01 f000 	lsl.w	r0, r1, r0
 8006d58:	fa24 f40c 	lsr.w	r4, r4, ip
 8006d5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d60:	ea40 0204 	orr.w	r2, r0, r4
 8006d64:	e7db      	b.n	8006d1e <__b2d+0x4a>
 8006d66:	ea44 030c 	orr.w	r3, r4, ip
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	e7d7      	b.n	8006d1e <__b2d+0x4a>
 8006d6e:	bf00      	nop
 8006d70:	3ff00000 	.word	0x3ff00000

08006d74 <__d2b>:
 8006d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d78:	4689      	mov	r9, r1
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	ec57 6b10 	vmov	r6, r7, d0
 8006d80:	4690      	mov	r8, r2
 8006d82:	f7ff fc09 	bl	8006598 <_Balloc>
 8006d86:	4604      	mov	r4, r0
 8006d88:	b930      	cbnz	r0, 8006d98 <__d2b+0x24>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <__d2b+0xb0>)
 8006d8e:	4826      	ldr	r0, [pc, #152]	; (8006e28 <__d2b+0xb4>)
 8006d90:	f240 310a 	movw	r1, #778	; 0x30a
 8006d94:	f000 ff6c 	bl	8007c70 <__assert_func>
 8006d98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006da0:	bb35      	cbnz	r5, 8006df0 <__d2b+0x7c>
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	d028      	beq.n	8006dfa <__d2b+0x86>
 8006da8:	4668      	mov	r0, sp
 8006daa:	9600      	str	r6, [sp, #0]
 8006dac:	f7ff fd06 	bl	80067bc <__lo0bits>
 8006db0:	9900      	ldr	r1, [sp, #0]
 8006db2:	b300      	cbz	r0, 8006df6 <__d2b+0x82>
 8006db4:	9a01      	ldr	r2, [sp, #4]
 8006db6:	f1c0 0320 	rsb	r3, r0, #32
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	40c2      	lsrs	r2, r0
 8006dc2:	6163      	str	r3, [r4, #20]
 8006dc4:	9201      	str	r2, [sp, #4]
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	61a3      	str	r3, [r4, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2202      	movne	r2, #2
 8006dd0:	2201      	moveq	r2, #1
 8006dd2:	6122      	str	r2, [r4, #16]
 8006dd4:	b1d5      	cbz	r5, 8006e0c <__d2b+0x98>
 8006dd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dda:	4405      	add	r5, r0
 8006ddc:	f8c9 5000 	str.w	r5, [r9]
 8006de0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006de4:	f8c8 0000 	str.w	r0, [r8]
 8006de8:	4620      	mov	r0, r4
 8006dea:	b003      	add	sp, #12
 8006dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df4:	e7d5      	b.n	8006da2 <__d2b+0x2e>
 8006df6:	6161      	str	r1, [r4, #20]
 8006df8:	e7e5      	b.n	8006dc6 <__d2b+0x52>
 8006dfa:	a801      	add	r0, sp, #4
 8006dfc:	f7ff fcde 	bl	80067bc <__lo0bits>
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	6163      	str	r3, [r4, #20]
 8006e04:	2201      	movs	r2, #1
 8006e06:	6122      	str	r2, [r4, #16]
 8006e08:	3020      	adds	r0, #32
 8006e0a:	e7e3      	b.n	8006dd4 <__d2b+0x60>
 8006e0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e14:	f8c9 0000 	str.w	r0, [r9]
 8006e18:	6918      	ldr	r0, [r3, #16]
 8006e1a:	f7ff fcaf 	bl	800677c <__hi0bits>
 8006e1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e22:	e7df      	b.n	8006de4 <__d2b+0x70>
 8006e24:	08008f10 	.word	0x08008f10
 8006e28:	08008f9c 	.word	0x08008f9c

08006e2c <__ratio>:
 8006e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	4688      	mov	r8, r1
 8006e32:	4669      	mov	r1, sp
 8006e34:	4681      	mov	r9, r0
 8006e36:	f7ff ff4d 	bl	8006cd4 <__b2d>
 8006e3a:	a901      	add	r1, sp, #4
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	ec55 4b10 	vmov	r4, r5, d0
 8006e42:	f7ff ff47 	bl	8006cd4 <__b2d>
 8006e46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e4e:	eba3 0c02 	sub.w	ip, r3, r2
 8006e52:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e5c:	ec51 0b10 	vmov	r0, r1, d0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bfd6      	itet	le
 8006e64:	460a      	movle	r2, r1
 8006e66:	462a      	movgt	r2, r5
 8006e68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e6c:	468b      	mov	fp, r1
 8006e6e:	462f      	mov	r7, r5
 8006e70:	bfd4      	ite	le
 8006e72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	ee10 2a10 	vmov	r2, s0
 8006e80:	465b      	mov	r3, fp
 8006e82:	4639      	mov	r1, r7
 8006e84:	f7f9 fcfa 	bl	800087c <__aeabi_ddiv>
 8006e88:	ec41 0b10 	vmov	d0, r0, r1
 8006e8c:	b003      	add	sp, #12
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e92 <__copybits>:
 8006e92:	3901      	subs	r1, #1
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	1149      	asrs	r1, r1, #5
 8006e98:	6914      	ldr	r4, [r2, #16]
 8006e9a:	3101      	adds	r1, #1
 8006e9c:	f102 0314 	add.w	r3, r2, #20
 8006ea0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ea4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ea8:	1f05      	subs	r5, r0, #4
 8006eaa:	42a3      	cmp	r3, r4
 8006eac:	d30c      	bcc.n	8006ec8 <__copybits+0x36>
 8006eae:	1aa3      	subs	r3, r4, r2
 8006eb0:	3b11      	subs	r3, #17
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	3211      	adds	r2, #17
 8006eb8:	42a2      	cmp	r2, r4
 8006eba:	bf88      	it	hi
 8006ebc:	2300      	movhi	r3, #0
 8006ebe:	4418      	add	r0, r3
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4288      	cmp	r0, r1
 8006ec4:	d305      	bcc.n	8006ed2 <__copybits+0x40>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ecc:	f845 6f04 	str.w	r6, [r5, #4]!
 8006ed0:	e7eb      	b.n	8006eaa <__copybits+0x18>
 8006ed2:	f840 3b04 	str.w	r3, [r0], #4
 8006ed6:	e7f4      	b.n	8006ec2 <__copybits+0x30>

08006ed8 <__any_on>:
 8006ed8:	f100 0214 	add.w	r2, r0, #20
 8006edc:	6900      	ldr	r0, [r0, #16]
 8006ede:	114b      	asrs	r3, r1, #5
 8006ee0:	4298      	cmp	r0, r3
 8006ee2:	b510      	push	{r4, lr}
 8006ee4:	db11      	blt.n	8006f0a <__any_on+0x32>
 8006ee6:	dd0a      	ble.n	8006efe <__any_on+0x26>
 8006ee8:	f011 011f 	ands.w	r1, r1, #31
 8006eec:	d007      	beq.n	8006efe <__any_on+0x26>
 8006eee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ef2:	fa24 f001 	lsr.w	r0, r4, r1
 8006ef6:	fa00 f101 	lsl.w	r1, r0, r1
 8006efa:	428c      	cmp	r4, r1
 8006efc:	d10b      	bne.n	8006f16 <__any_on+0x3e>
 8006efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d803      	bhi.n	8006f0e <__any_on+0x36>
 8006f06:	2000      	movs	r0, #0
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	e7f7      	b.n	8006efe <__any_on+0x26>
 8006f0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d0f5      	beq.n	8006f02 <__any_on+0x2a>
 8006f16:	2001      	movs	r0, #1
 8006f18:	e7f6      	b.n	8006f08 <__any_on+0x30>

08006f1a <_calloc_r>:
 8006f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f1c:	fba1 2402 	umull	r2, r4, r1, r2
 8006f20:	b94c      	cbnz	r4, 8006f36 <_calloc_r+0x1c>
 8006f22:	4611      	mov	r1, r2
 8006f24:	9201      	str	r2, [sp, #4]
 8006f26:	f000 f87b 	bl	8007020 <_malloc_r>
 8006f2a:	9a01      	ldr	r2, [sp, #4]
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	b930      	cbnz	r0, 8006f3e <_calloc_r+0x24>
 8006f30:	4628      	mov	r0, r5
 8006f32:	b003      	add	sp, #12
 8006f34:	bd30      	pop	{r4, r5, pc}
 8006f36:	220c      	movs	r2, #12
 8006f38:	6002      	str	r2, [r0, #0]
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	e7f8      	b.n	8006f30 <_calloc_r+0x16>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7fc fb16 	bl	8003570 <memset>
 8006f44:	e7f4      	b.n	8006f30 <_calloc_r+0x16>
	...

08006f48 <_free_r>:
 8006f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f4a:	2900      	cmp	r1, #0
 8006f4c:	d044      	beq.n	8006fd8 <_free_r+0x90>
 8006f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f52:	9001      	str	r0, [sp, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f1a1 0404 	sub.w	r4, r1, #4
 8006f5a:	bfb8      	it	lt
 8006f5c:	18e4      	addlt	r4, r4, r3
 8006f5e:	f001 f88b 	bl	8008078 <__malloc_lock>
 8006f62:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <_free_r+0x94>)
 8006f64:	9801      	ldr	r0, [sp, #4]
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	b933      	cbnz	r3, 8006f78 <_free_r+0x30>
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	6014      	str	r4, [r2, #0]
 8006f6e:	b003      	add	sp, #12
 8006f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f74:	f001 b886 	b.w	8008084 <__malloc_unlock>
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	d908      	bls.n	8006f8e <_free_r+0x46>
 8006f7c:	6825      	ldr	r5, [r4, #0]
 8006f7e:	1961      	adds	r1, r4, r5
 8006f80:	428b      	cmp	r3, r1
 8006f82:	bf01      	itttt	eq
 8006f84:	6819      	ldreq	r1, [r3, #0]
 8006f86:	685b      	ldreq	r3, [r3, #4]
 8006f88:	1949      	addeq	r1, r1, r5
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	e7ed      	b.n	8006f6a <_free_r+0x22>
 8006f8e:	461a      	mov	r2, r3
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	b10b      	cbz	r3, 8006f98 <_free_r+0x50>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d9fa      	bls.n	8006f8e <_free_r+0x46>
 8006f98:	6811      	ldr	r1, [r2, #0]
 8006f9a:	1855      	adds	r5, r2, r1
 8006f9c:	42a5      	cmp	r5, r4
 8006f9e:	d10b      	bne.n	8006fb8 <_free_r+0x70>
 8006fa0:	6824      	ldr	r4, [r4, #0]
 8006fa2:	4421      	add	r1, r4
 8006fa4:	1854      	adds	r4, r2, r1
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	d1e0      	bne.n	8006f6e <_free_r+0x26>
 8006fac:	681c      	ldr	r4, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	6053      	str	r3, [r2, #4]
 8006fb2:	4421      	add	r1, r4
 8006fb4:	6011      	str	r1, [r2, #0]
 8006fb6:	e7da      	b.n	8006f6e <_free_r+0x26>
 8006fb8:	d902      	bls.n	8006fc0 <_free_r+0x78>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	e7d6      	b.n	8006f6e <_free_r+0x26>
 8006fc0:	6825      	ldr	r5, [r4, #0]
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	bf04      	itt	eq
 8006fc8:	6819      	ldreq	r1, [r3, #0]
 8006fca:	685b      	ldreq	r3, [r3, #4]
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	bf04      	itt	eq
 8006fd0:	1949      	addeq	r1, r1, r5
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	6054      	str	r4, [r2, #4]
 8006fd6:	e7ca      	b.n	8006f6e <_free_r+0x26>
 8006fd8:	b003      	add	sp, #12
 8006fda:	bd30      	pop	{r4, r5, pc}
 8006fdc:	200003f4 	.word	0x200003f4

08006fe0 <sbrk_aligned>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	4e0e      	ldr	r6, [pc, #56]	; (800701c <sbrk_aligned+0x3c>)
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	6831      	ldr	r1, [r6, #0]
 8006fe8:	4605      	mov	r5, r0
 8006fea:	b911      	cbnz	r1, 8006ff2 <sbrk_aligned+0x12>
 8006fec:	f000 fd28 	bl	8007a40 <_sbrk_r>
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 fd23 	bl	8007a40 <_sbrk_r>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d00a      	beq.n	8007014 <sbrk_aligned+0x34>
 8006ffe:	1cc4      	adds	r4, r0, #3
 8007000:	f024 0403 	bic.w	r4, r4, #3
 8007004:	42a0      	cmp	r0, r4
 8007006:	d007      	beq.n	8007018 <sbrk_aligned+0x38>
 8007008:	1a21      	subs	r1, r4, r0
 800700a:	4628      	mov	r0, r5
 800700c:	f000 fd18 	bl	8007a40 <_sbrk_r>
 8007010:	3001      	adds	r0, #1
 8007012:	d101      	bne.n	8007018 <sbrk_aligned+0x38>
 8007014:	f04f 34ff 	mov.w	r4, #4294967295
 8007018:	4620      	mov	r0, r4
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	200003f8 	.word	0x200003f8

08007020 <_malloc_r>:
 8007020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	1ccd      	adds	r5, r1, #3
 8007026:	f025 0503 	bic.w	r5, r5, #3
 800702a:	3508      	adds	r5, #8
 800702c:	2d0c      	cmp	r5, #12
 800702e:	bf38      	it	cc
 8007030:	250c      	movcc	r5, #12
 8007032:	2d00      	cmp	r5, #0
 8007034:	4607      	mov	r7, r0
 8007036:	db01      	blt.n	800703c <_malloc_r+0x1c>
 8007038:	42a9      	cmp	r1, r5
 800703a:	d905      	bls.n	8007048 <_malloc_r+0x28>
 800703c:	230c      	movs	r3, #12
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	2600      	movs	r6, #0
 8007042:	4630      	mov	r0, r6
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	4e2e      	ldr	r6, [pc, #184]	; (8007104 <_malloc_r+0xe4>)
 800704a:	f001 f815 	bl	8008078 <__malloc_lock>
 800704e:	6833      	ldr	r3, [r6, #0]
 8007050:	461c      	mov	r4, r3
 8007052:	bb34      	cbnz	r4, 80070a2 <_malloc_r+0x82>
 8007054:	4629      	mov	r1, r5
 8007056:	4638      	mov	r0, r7
 8007058:	f7ff ffc2 	bl	8006fe0 <sbrk_aligned>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	4604      	mov	r4, r0
 8007060:	d14d      	bne.n	80070fe <_malloc_r+0xde>
 8007062:	6834      	ldr	r4, [r6, #0]
 8007064:	4626      	mov	r6, r4
 8007066:	2e00      	cmp	r6, #0
 8007068:	d140      	bne.n	80070ec <_malloc_r+0xcc>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	4631      	mov	r1, r6
 800706e:	4638      	mov	r0, r7
 8007070:	eb04 0803 	add.w	r8, r4, r3
 8007074:	f000 fce4 	bl	8007a40 <_sbrk_r>
 8007078:	4580      	cmp	r8, r0
 800707a:	d13a      	bne.n	80070f2 <_malloc_r+0xd2>
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	3503      	adds	r5, #3
 8007080:	1a6d      	subs	r5, r5, r1
 8007082:	f025 0503 	bic.w	r5, r5, #3
 8007086:	3508      	adds	r5, #8
 8007088:	2d0c      	cmp	r5, #12
 800708a:	bf38      	it	cc
 800708c:	250c      	movcc	r5, #12
 800708e:	4629      	mov	r1, r5
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ffa5 	bl	8006fe0 <sbrk_aligned>
 8007096:	3001      	adds	r0, #1
 8007098:	d02b      	beq.n	80070f2 <_malloc_r+0xd2>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	442b      	add	r3, r5
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	e00e      	b.n	80070c0 <_malloc_r+0xa0>
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	1b52      	subs	r2, r2, r5
 80070a6:	d41e      	bmi.n	80070e6 <_malloc_r+0xc6>
 80070a8:	2a0b      	cmp	r2, #11
 80070aa:	d916      	bls.n	80070da <_malloc_r+0xba>
 80070ac:	1961      	adds	r1, r4, r5
 80070ae:	42a3      	cmp	r3, r4
 80070b0:	6025      	str	r5, [r4, #0]
 80070b2:	bf18      	it	ne
 80070b4:	6059      	strne	r1, [r3, #4]
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	bf08      	it	eq
 80070ba:	6031      	streq	r1, [r6, #0]
 80070bc:	5162      	str	r2, [r4, r5]
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	4638      	mov	r0, r7
 80070c2:	f104 060b 	add.w	r6, r4, #11
 80070c6:	f000 ffdd 	bl	8008084 <__malloc_unlock>
 80070ca:	f026 0607 	bic.w	r6, r6, #7
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	1af2      	subs	r2, r6, r3
 80070d2:	d0b6      	beq.n	8007042 <_malloc_r+0x22>
 80070d4:	1b9b      	subs	r3, r3, r6
 80070d6:	50a3      	str	r3, [r4, r2]
 80070d8:	e7b3      	b.n	8007042 <_malloc_r+0x22>
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	bf0c      	ite	eq
 80070e0:	6032      	streq	r2, [r6, #0]
 80070e2:	605a      	strne	r2, [r3, #4]
 80070e4:	e7ec      	b.n	80070c0 <_malloc_r+0xa0>
 80070e6:	4623      	mov	r3, r4
 80070e8:	6864      	ldr	r4, [r4, #4]
 80070ea:	e7b2      	b.n	8007052 <_malloc_r+0x32>
 80070ec:	4634      	mov	r4, r6
 80070ee:	6876      	ldr	r6, [r6, #4]
 80070f0:	e7b9      	b.n	8007066 <_malloc_r+0x46>
 80070f2:	230c      	movs	r3, #12
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f000 ffc4 	bl	8008084 <__malloc_unlock>
 80070fc:	e7a1      	b.n	8007042 <_malloc_r+0x22>
 80070fe:	6025      	str	r5, [r4, #0]
 8007100:	e7de      	b.n	80070c0 <_malloc_r+0xa0>
 8007102:	bf00      	nop
 8007104:	200003f4 	.word	0x200003f4

08007108 <__ssputs_r>:
 8007108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	688e      	ldr	r6, [r1, #8]
 800710e:	429e      	cmp	r6, r3
 8007110:	4682      	mov	sl, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4690      	mov	r8, r2
 8007116:	461f      	mov	r7, r3
 8007118:	d838      	bhi.n	800718c <__ssputs_r+0x84>
 800711a:	898a      	ldrh	r2, [r1, #12]
 800711c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007120:	d032      	beq.n	8007188 <__ssputs_r+0x80>
 8007122:	6825      	ldr	r5, [r4, #0]
 8007124:	6909      	ldr	r1, [r1, #16]
 8007126:	eba5 0901 	sub.w	r9, r5, r1
 800712a:	6965      	ldr	r5, [r4, #20]
 800712c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007134:	3301      	adds	r3, #1
 8007136:	444b      	add	r3, r9
 8007138:	106d      	asrs	r5, r5, #1
 800713a:	429d      	cmp	r5, r3
 800713c:	bf38      	it	cc
 800713e:	461d      	movcc	r5, r3
 8007140:	0553      	lsls	r3, r2, #21
 8007142:	d531      	bpl.n	80071a8 <__ssputs_r+0xa0>
 8007144:	4629      	mov	r1, r5
 8007146:	f7ff ff6b 	bl	8007020 <_malloc_r>
 800714a:	4606      	mov	r6, r0
 800714c:	b950      	cbnz	r0, 8007164 <__ssputs_r+0x5c>
 800714e:	230c      	movs	r3, #12
 8007150:	f8ca 3000 	str.w	r3, [sl]
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715a:	81a3      	strh	r3, [r4, #12]
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007164:	6921      	ldr	r1, [r4, #16]
 8007166:	464a      	mov	r2, r9
 8007168:	f7ff fa08 	bl	800657c <memcpy>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	6126      	str	r6, [r4, #16]
 800717a:	6165      	str	r5, [r4, #20]
 800717c:	444e      	add	r6, r9
 800717e:	eba5 0509 	sub.w	r5, r5, r9
 8007182:	6026      	str	r6, [r4, #0]
 8007184:	60a5      	str	r5, [r4, #8]
 8007186:	463e      	mov	r6, r7
 8007188:	42be      	cmp	r6, r7
 800718a:	d900      	bls.n	800718e <__ssputs_r+0x86>
 800718c:	463e      	mov	r6, r7
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	4632      	mov	r2, r6
 8007192:	4641      	mov	r1, r8
 8007194:	f000 ff56 	bl	8008044 <memmove>
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	1b9b      	subs	r3, r3, r6
 800719c:	60a3      	str	r3, [r4, #8]
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	4433      	add	r3, r6
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e7db      	b.n	8007160 <__ssputs_r+0x58>
 80071a8:	462a      	mov	r2, r5
 80071aa:	f000 ff71 	bl	8008090 <_realloc_r>
 80071ae:	4606      	mov	r6, r0
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1e1      	bne.n	8007178 <__ssputs_r+0x70>
 80071b4:	6921      	ldr	r1, [r4, #16]
 80071b6:	4650      	mov	r0, sl
 80071b8:	f7ff fec6 	bl	8006f48 <_free_r>
 80071bc:	e7c7      	b.n	800714e <__ssputs_r+0x46>
	...

080071c0 <_svfiprintf_r>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4698      	mov	r8, r3
 80071c6:	898b      	ldrh	r3, [r1, #12]
 80071c8:	061b      	lsls	r3, r3, #24
 80071ca:	b09d      	sub	sp, #116	; 0x74
 80071cc:	4607      	mov	r7, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	4614      	mov	r4, r2
 80071d2:	d50e      	bpl.n	80071f2 <_svfiprintf_r+0x32>
 80071d4:	690b      	ldr	r3, [r1, #16]
 80071d6:	b963      	cbnz	r3, 80071f2 <_svfiprintf_r+0x32>
 80071d8:	2140      	movs	r1, #64	; 0x40
 80071da:	f7ff ff21 	bl	8007020 <_malloc_r>
 80071de:	6028      	str	r0, [r5, #0]
 80071e0:	6128      	str	r0, [r5, #16]
 80071e2:	b920      	cbnz	r0, 80071ee <_svfiprintf_r+0x2e>
 80071e4:	230c      	movs	r3, #12
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	e0d1      	b.n	8007392 <_svfiprintf_r+0x1d2>
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	616b      	str	r3, [r5, #20]
 80071f2:	2300      	movs	r3, #0
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	2320      	movs	r3, #32
 80071f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007200:	2330      	movs	r3, #48	; 0x30
 8007202:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073ac <_svfiprintf_r+0x1ec>
 8007206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800720a:	f04f 0901 	mov.w	r9, #1
 800720e:	4623      	mov	r3, r4
 8007210:	469a      	mov	sl, r3
 8007212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007216:	b10a      	cbz	r2, 800721c <_svfiprintf_r+0x5c>
 8007218:	2a25      	cmp	r2, #37	; 0x25
 800721a:	d1f9      	bne.n	8007210 <_svfiprintf_r+0x50>
 800721c:	ebba 0b04 	subs.w	fp, sl, r4
 8007220:	d00b      	beq.n	800723a <_svfiprintf_r+0x7a>
 8007222:	465b      	mov	r3, fp
 8007224:	4622      	mov	r2, r4
 8007226:	4629      	mov	r1, r5
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff ff6d 	bl	8007108 <__ssputs_r>
 800722e:	3001      	adds	r0, #1
 8007230:	f000 80aa 	beq.w	8007388 <_svfiprintf_r+0x1c8>
 8007234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007236:	445a      	add	r2, fp
 8007238:	9209      	str	r2, [sp, #36]	; 0x24
 800723a:	f89a 3000 	ldrb.w	r3, [sl]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80a2 	beq.w	8007388 <_svfiprintf_r+0x1c8>
 8007244:	2300      	movs	r3, #0
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800724e:	f10a 0a01 	add.w	sl, sl, #1
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800725a:	931a      	str	r3, [sp, #104]	; 0x68
 800725c:	4654      	mov	r4, sl
 800725e:	2205      	movs	r2, #5
 8007260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007264:	4851      	ldr	r0, [pc, #324]	; (80073ac <_svfiprintf_r+0x1ec>)
 8007266:	f7f8 ffd3 	bl	8000210 <memchr>
 800726a:	9a04      	ldr	r2, [sp, #16]
 800726c:	b9d8      	cbnz	r0, 80072a6 <_svfiprintf_r+0xe6>
 800726e:	06d0      	lsls	r0, r2, #27
 8007270:	bf44      	itt	mi
 8007272:	2320      	movmi	r3, #32
 8007274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007278:	0711      	lsls	r1, r2, #28
 800727a:	bf44      	itt	mi
 800727c:	232b      	movmi	r3, #43	; 0x2b
 800727e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007282:	f89a 3000 	ldrb.w	r3, [sl]
 8007286:	2b2a      	cmp	r3, #42	; 0x2a
 8007288:	d015      	beq.n	80072b6 <_svfiprintf_r+0xf6>
 800728a:	9a07      	ldr	r2, [sp, #28]
 800728c:	4654      	mov	r4, sl
 800728e:	2000      	movs	r0, #0
 8007290:	f04f 0c0a 	mov.w	ip, #10
 8007294:	4621      	mov	r1, r4
 8007296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800729a:	3b30      	subs	r3, #48	; 0x30
 800729c:	2b09      	cmp	r3, #9
 800729e:	d94e      	bls.n	800733e <_svfiprintf_r+0x17e>
 80072a0:	b1b0      	cbz	r0, 80072d0 <_svfiprintf_r+0x110>
 80072a2:	9207      	str	r2, [sp, #28]
 80072a4:	e014      	b.n	80072d0 <_svfiprintf_r+0x110>
 80072a6:	eba0 0308 	sub.w	r3, r0, r8
 80072aa:	fa09 f303 	lsl.w	r3, r9, r3
 80072ae:	4313      	orrs	r3, r2
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	46a2      	mov	sl, r4
 80072b4:	e7d2      	b.n	800725c <_svfiprintf_r+0x9c>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	1d19      	adds	r1, r3, #4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	9103      	str	r1, [sp, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bfbb      	ittet	lt
 80072c2:	425b      	neglt	r3, r3
 80072c4:	f042 0202 	orrlt.w	r2, r2, #2
 80072c8:	9307      	strge	r3, [sp, #28]
 80072ca:	9307      	strlt	r3, [sp, #28]
 80072cc:	bfb8      	it	lt
 80072ce:	9204      	strlt	r2, [sp, #16]
 80072d0:	7823      	ldrb	r3, [r4, #0]
 80072d2:	2b2e      	cmp	r3, #46	; 0x2e
 80072d4:	d10c      	bne.n	80072f0 <_svfiprintf_r+0x130>
 80072d6:	7863      	ldrb	r3, [r4, #1]
 80072d8:	2b2a      	cmp	r3, #42	; 0x2a
 80072da:	d135      	bne.n	8007348 <_svfiprintf_r+0x188>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	1d1a      	adds	r2, r3, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	9203      	str	r2, [sp, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfb8      	it	lt
 80072e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072ec:	3402      	adds	r4, #2
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073bc <_svfiprintf_r+0x1fc>
 80072f4:	7821      	ldrb	r1, [r4, #0]
 80072f6:	2203      	movs	r2, #3
 80072f8:	4650      	mov	r0, sl
 80072fa:	f7f8 ff89 	bl	8000210 <memchr>
 80072fe:	b140      	cbz	r0, 8007312 <_svfiprintf_r+0x152>
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	eba0 000a 	sub.w	r0, r0, sl
 8007306:	fa03 f000 	lsl.w	r0, r3, r0
 800730a:	9b04      	ldr	r3, [sp, #16]
 800730c:	4303      	orrs	r3, r0
 800730e:	3401      	adds	r4, #1
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007316:	4826      	ldr	r0, [pc, #152]	; (80073b0 <_svfiprintf_r+0x1f0>)
 8007318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800731c:	2206      	movs	r2, #6
 800731e:	f7f8 ff77 	bl	8000210 <memchr>
 8007322:	2800      	cmp	r0, #0
 8007324:	d038      	beq.n	8007398 <_svfiprintf_r+0x1d8>
 8007326:	4b23      	ldr	r3, [pc, #140]	; (80073b4 <_svfiprintf_r+0x1f4>)
 8007328:	bb1b      	cbnz	r3, 8007372 <_svfiprintf_r+0x1b2>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	3307      	adds	r3, #7
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	3308      	adds	r3, #8
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007338:	4433      	add	r3, r6
 800733a:	9309      	str	r3, [sp, #36]	; 0x24
 800733c:	e767      	b.n	800720e <_svfiprintf_r+0x4e>
 800733e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007342:	460c      	mov	r4, r1
 8007344:	2001      	movs	r0, #1
 8007346:	e7a5      	b.n	8007294 <_svfiprintf_r+0xd4>
 8007348:	2300      	movs	r3, #0
 800734a:	3401      	adds	r4, #1
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	4619      	mov	r1, r3
 8007350:	f04f 0c0a 	mov.w	ip, #10
 8007354:	4620      	mov	r0, r4
 8007356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735a:	3a30      	subs	r2, #48	; 0x30
 800735c:	2a09      	cmp	r2, #9
 800735e:	d903      	bls.n	8007368 <_svfiprintf_r+0x1a8>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0c5      	beq.n	80072f0 <_svfiprintf_r+0x130>
 8007364:	9105      	str	r1, [sp, #20]
 8007366:	e7c3      	b.n	80072f0 <_svfiprintf_r+0x130>
 8007368:	fb0c 2101 	mla	r1, ip, r1, r2
 800736c:	4604      	mov	r4, r0
 800736e:	2301      	movs	r3, #1
 8007370:	e7f0      	b.n	8007354 <_svfiprintf_r+0x194>
 8007372:	ab03      	add	r3, sp, #12
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	462a      	mov	r2, r5
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <_svfiprintf_r+0x1f8>)
 800737a:	a904      	add	r1, sp, #16
 800737c:	4638      	mov	r0, r7
 800737e:	f7fc f99f 	bl	80036c0 <_printf_float>
 8007382:	1c42      	adds	r2, r0, #1
 8007384:	4606      	mov	r6, r0
 8007386:	d1d6      	bne.n	8007336 <_svfiprintf_r+0x176>
 8007388:	89ab      	ldrh	r3, [r5, #12]
 800738a:	065b      	lsls	r3, r3, #25
 800738c:	f53f af2c 	bmi.w	80071e8 <_svfiprintf_r+0x28>
 8007390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007392:	b01d      	add	sp, #116	; 0x74
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	ab03      	add	r3, sp, #12
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	462a      	mov	r2, r5
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <_svfiprintf_r+0x1f8>)
 80073a0:	a904      	add	r1, sp, #16
 80073a2:	4638      	mov	r0, r7
 80073a4:	f7fc fc30 	bl	8003c08 <_printf_i>
 80073a8:	e7eb      	b.n	8007382 <_svfiprintf_r+0x1c2>
 80073aa:	bf00      	nop
 80073ac:	080090f4 	.word	0x080090f4
 80073b0:	080090fe 	.word	0x080090fe
 80073b4:	080036c1 	.word	0x080036c1
 80073b8:	08007109 	.word	0x08007109
 80073bc:	080090fa 	.word	0x080090fa

080073c0 <_sungetc_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	1c4b      	adds	r3, r1, #1
 80073c4:	4614      	mov	r4, r2
 80073c6:	d103      	bne.n	80073d0 <_sungetc_r+0x10>
 80073c8:	f04f 35ff 	mov.w	r5, #4294967295
 80073cc:	4628      	mov	r0, r5
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	8993      	ldrh	r3, [r2, #12]
 80073d2:	f023 0320 	bic.w	r3, r3, #32
 80073d6:	8193      	strh	r3, [r2, #12]
 80073d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073da:	6852      	ldr	r2, [r2, #4]
 80073dc:	b2cd      	uxtb	r5, r1
 80073de:	b18b      	cbz	r3, 8007404 <_sungetc_r+0x44>
 80073e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073e2:	4293      	cmp	r3, r2
 80073e4:	dd08      	ble.n	80073f8 <_sungetc_r+0x38>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	1e5a      	subs	r2, r3, #1
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80073f0:	6863      	ldr	r3, [r4, #4]
 80073f2:	3301      	adds	r3, #1
 80073f4:	6063      	str	r3, [r4, #4]
 80073f6:	e7e9      	b.n	80073cc <_sungetc_r+0xc>
 80073f8:	4621      	mov	r1, r4
 80073fa:	f000 fbf1 	bl	8007be0 <__submore>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d0f1      	beq.n	80073e6 <_sungetc_r+0x26>
 8007402:	e7e1      	b.n	80073c8 <_sungetc_r+0x8>
 8007404:	6921      	ldr	r1, [r4, #16]
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	b151      	cbz	r1, 8007420 <_sungetc_r+0x60>
 800740a:	4299      	cmp	r1, r3
 800740c:	d208      	bcs.n	8007420 <_sungetc_r+0x60>
 800740e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007412:	42a9      	cmp	r1, r5
 8007414:	d104      	bne.n	8007420 <_sungetc_r+0x60>
 8007416:	3b01      	subs	r3, #1
 8007418:	3201      	adds	r2, #1
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	6062      	str	r2, [r4, #4]
 800741e:	e7d5      	b.n	80073cc <_sungetc_r+0xc>
 8007420:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007428:	6363      	str	r3, [r4, #52]	; 0x34
 800742a:	2303      	movs	r3, #3
 800742c:	63a3      	str	r3, [r4, #56]	; 0x38
 800742e:	4623      	mov	r3, r4
 8007430:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	2301      	movs	r3, #1
 8007438:	e7dc      	b.n	80073f4 <_sungetc_r+0x34>

0800743a <__ssrefill_r>:
 800743a:	b510      	push	{r4, lr}
 800743c:	460c      	mov	r4, r1
 800743e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007440:	b169      	cbz	r1, 800745e <__ssrefill_r+0x24>
 8007442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007446:	4299      	cmp	r1, r3
 8007448:	d001      	beq.n	800744e <__ssrefill_r+0x14>
 800744a:	f7ff fd7d 	bl	8006f48 <_free_r>
 800744e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	2000      	movs	r0, #0
 8007454:	6360      	str	r0, [r4, #52]	; 0x34
 8007456:	b113      	cbz	r3, 800745e <__ssrefill_r+0x24>
 8007458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	bd10      	pop	{r4, pc}
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f043 0320 	orr.w	r3, r3, #32
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	f04f 30ff 	mov.w	r0, #4294967295
 8007472:	e7f3      	b.n	800745c <__ssrefill_r+0x22>

08007474 <__ssvfiscanf_r>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	460c      	mov	r4, r1
 800747a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800747e:	2100      	movs	r1, #0
 8007480:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007484:	49a6      	ldr	r1, [pc, #664]	; (8007720 <__ssvfiscanf_r+0x2ac>)
 8007486:	91a0      	str	r1, [sp, #640]	; 0x280
 8007488:	f10d 0804 	add.w	r8, sp, #4
 800748c:	49a5      	ldr	r1, [pc, #660]	; (8007724 <__ssvfiscanf_r+0x2b0>)
 800748e:	4fa6      	ldr	r7, [pc, #664]	; (8007728 <__ssvfiscanf_r+0x2b4>)
 8007490:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800772c <__ssvfiscanf_r+0x2b8>
 8007494:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007498:	4606      	mov	r6, r0
 800749a:	91a1      	str	r1, [sp, #644]	; 0x284
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	7813      	ldrb	r3, [r2, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 815a 	beq.w	800775a <__ssvfiscanf_r+0x2e6>
 80074a6:	5dd9      	ldrb	r1, [r3, r7]
 80074a8:	f011 0108 	ands.w	r1, r1, #8
 80074ac:	f102 0501 	add.w	r5, r2, #1
 80074b0:	d019      	beq.n	80074e6 <__ssvfiscanf_r+0x72>
 80074b2:	6863      	ldr	r3, [r4, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd0f      	ble.n	80074d8 <__ssvfiscanf_r+0x64>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	5cba      	ldrb	r2, [r7, r2]
 80074be:	0712      	lsls	r2, r2, #28
 80074c0:	d401      	bmi.n	80074c6 <__ssvfiscanf_r+0x52>
 80074c2:	462a      	mov	r2, r5
 80074c4:	e7eb      	b.n	800749e <__ssvfiscanf_r+0x2a>
 80074c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074c8:	3201      	adds	r2, #1
 80074ca:	9245      	str	r2, [sp, #276]	; 0x114
 80074cc:	6862      	ldr	r2, [r4, #4]
 80074ce:	3301      	adds	r3, #1
 80074d0:	3a01      	subs	r2, #1
 80074d2:	6062      	str	r2, [r4, #4]
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	e7ec      	b.n	80074b2 <__ssvfiscanf_r+0x3e>
 80074d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074da:	4621      	mov	r1, r4
 80074dc:	4630      	mov	r0, r6
 80074de:	4798      	blx	r3
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d0e9      	beq.n	80074b8 <__ssvfiscanf_r+0x44>
 80074e4:	e7ed      	b.n	80074c2 <__ssvfiscanf_r+0x4e>
 80074e6:	2b25      	cmp	r3, #37	; 0x25
 80074e8:	d012      	beq.n	8007510 <__ssvfiscanf_r+0x9c>
 80074ea:	469a      	mov	sl, r3
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f340 8091 	ble.w	8007616 <__ssvfiscanf_r+0x1a2>
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	7813      	ldrb	r3, [r2, #0]
 80074f8:	4553      	cmp	r3, sl
 80074fa:	f040 812e 	bne.w	800775a <__ssvfiscanf_r+0x2e6>
 80074fe:	6863      	ldr	r3, [r4, #4]
 8007500:	3b01      	subs	r3, #1
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007506:	3201      	adds	r2, #1
 8007508:	3301      	adds	r3, #1
 800750a:	6022      	str	r2, [r4, #0]
 800750c:	9345      	str	r3, [sp, #276]	; 0x114
 800750e:	e7d8      	b.n	80074c2 <__ssvfiscanf_r+0x4e>
 8007510:	9141      	str	r1, [sp, #260]	; 0x104
 8007512:	9143      	str	r1, [sp, #268]	; 0x10c
 8007514:	7853      	ldrb	r3, [r2, #1]
 8007516:	2b2a      	cmp	r3, #42	; 0x2a
 8007518:	bf02      	ittt	eq
 800751a:	2310      	moveq	r3, #16
 800751c:	1c95      	addeq	r5, r2, #2
 800751e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007520:	220a      	movs	r2, #10
 8007522:	46aa      	mov	sl, r5
 8007524:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007528:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800752c:	2b09      	cmp	r3, #9
 800752e:	d91d      	bls.n	800756c <__ssvfiscanf_r+0xf8>
 8007530:	487e      	ldr	r0, [pc, #504]	; (800772c <__ssvfiscanf_r+0x2b8>)
 8007532:	2203      	movs	r2, #3
 8007534:	f7f8 fe6c 	bl	8000210 <memchr>
 8007538:	b140      	cbz	r0, 800754c <__ssvfiscanf_r+0xd8>
 800753a:	2301      	movs	r3, #1
 800753c:	eba0 0009 	sub.w	r0, r0, r9
 8007540:	fa03 f000 	lsl.w	r0, r3, r0
 8007544:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007546:	4318      	orrs	r0, r3
 8007548:	9041      	str	r0, [sp, #260]	; 0x104
 800754a:	4655      	mov	r5, sl
 800754c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007550:	2b78      	cmp	r3, #120	; 0x78
 8007552:	d806      	bhi.n	8007562 <__ssvfiscanf_r+0xee>
 8007554:	2b57      	cmp	r3, #87	; 0x57
 8007556:	d810      	bhi.n	800757a <__ssvfiscanf_r+0x106>
 8007558:	2b25      	cmp	r3, #37	; 0x25
 800755a:	d0c6      	beq.n	80074ea <__ssvfiscanf_r+0x76>
 800755c:	d856      	bhi.n	800760c <__ssvfiscanf_r+0x198>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d064      	beq.n	800762c <__ssvfiscanf_r+0x1b8>
 8007562:	2303      	movs	r3, #3
 8007564:	9347      	str	r3, [sp, #284]	; 0x11c
 8007566:	230a      	movs	r3, #10
 8007568:	9342      	str	r3, [sp, #264]	; 0x108
 800756a:	e071      	b.n	8007650 <__ssvfiscanf_r+0x1dc>
 800756c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800756e:	fb02 1103 	mla	r1, r2, r3, r1
 8007572:	3930      	subs	r1, #48	; 0x30
 8007574:	9143      	str	r1, [sp, #268]	; 0x10c
 8007576:	4655      	mov	r5, sl
 8007578:	e7d3      	b.n	8007522 <__ssvfiscanf_r+0xae>
 800757a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800757e:	2a20      	cmp	r2, #32
 8007580:	d8ef      	bhi.n	8007562 <__ssvfiscanf_r+0xee>
 8007582:	a101      	add	r1, pc, #4	; (adr r1, 8007588 <__ssvfiscanf_r+0x114>)
 8007584:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007588:	0800763b 	.word	0x0800763b
 800758c:	08007563 	.word	0x08007563
 8007590:	08007563 	.word	0x08007563
 8007594:	08007699 	.word	0x08007699
 8007598:	08007563 	.word	0x08007563
 800759c:	08007563 	.word	0x08007563
 80075a0:	08007563 	.word	0x08007563
 80075a4:	08007563 	.word	0x08007563
 80075a8:	08007563 	.word	0x08007563
 80075ac:	08007563 	.word	0x08007563
 80075b0:	08007563 	.word	0x08007563
 80075b4:	080076af 	.word	0x080076af
 80075b8:	08007685 	.word	0x08007685
 80075bc:	08007613 	.word	0x08007613
 80075c0:	08007613 	.word	0x08007613
 80075c4:	08007613 	.word	0x08007613
 80075c8:	08007563 	.word	0x08007563
 80075cc:	08007689 	.word	0x08007689
 80075d0:	08007563 	.word	0x08007563
 80075d4:	08007563 	.word	0x08007563
 80075d8:	08007563 	.word	0x08007563
 80075dc:	08007563 	.word	0x08007563
 80075e0:	080076bf 	.word	0x080076bf
 80075e4:	08007691 	.word	0x08007691
 80075e8:	08007633 	.word	0x08007633
 80075ec:	08007563 	.word	0x08007563
 80075f0:	08007563 	.word	0x08007563
 80075f4:	080076bb 	.word	0x080076bb
 80075f8:	08007563 	.word	0x08007563
 80075fc:	08007685 	.word	0x08007685
 8007600:	08007563 	.word	0x08007563
 8007604:	08007563 	.word	0x08007563
 8007608:	0800763b 	.word	0x0800763b
 800760c:	3b45      	subs	r3, #69	; 0x45
 800760e:	2b02      	cmp	r3, #2
 8007610:	d8a7      	bhi.n	8007562 <__ssvfiscanf_r+0xee>
 8007612:	2305      	movs	r3, #5
 8007614:	e01b      	b.n	800764e <__ssvfiscanf_r+0x1da>
 8007616:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007618:	4621      	mov	r1, r4
 800761a:	4630      	mov	r0, r6
 800761c:	4798      	blx	r3
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f af68 	beq.w	80074f4 <__ssvfiscanf_r+0x80>
 8007624:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007626:	2800      	cmp	r0, #0
 8007628:	f040 808d 	bne.w	8007746 <__ssvfiscanf_r+0x2d2>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	e08f      	b.n	8007752 <__ssvfiscanf_r+0x2de>
 8007632:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007634:	f042 0220 	orr.w	r2, r2, #32
 8007638:	9241      	str	r2, [sp, #260]	; 0x104
 800763a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800763c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007640:	9241      	str	r2, [sp, #260]	; 0x104
 8007642:	2210      	movs	r2, #16
 8007644:	2b6f      	cmp	r3, #111	; 0x6f
 8007646:	9242      	str	r2, [sp, #264]	; 0x108
 8007648:	bf34      	ite	cc
 800764a:	2303      	movcc	r3, #3
 800764c:	2304      	movcs	r3, #4
 800764e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	dd42      	ble.n	80076dc <__ssvfiscanf_r+0x268>
 8007656:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007658:	0659      	lsls	r1, r3, #25
 800765a:	d404      	bmi.n	8007666 <__ssvfiscanf_r+0x1f2>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	5cba      	ldrb	r2, [r7, r2]
 8007662:	0712      	lsls	r2, r2, #28
 8007664:	d441      	bmi.n	80076ea <__ssvfiscanf_r+0x276>
 8007666:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007668:	2b02      	cmp	r3, #2
 800766a:	dc50      	bgt.n	800770e <__ssvfiscanf_r+0x29a>
 800766c:	466b      	mov	r3, sp
 800766e:	4622      	mov	r2, r4
 8007670:	a941      	add	r1, sp, #260	; 0x104
 8007672:	4630      	mov	r0, r6
 8007674:	f000 f876 	bl	8007764 <_scanf_chars>
 8007678:	2801      	cmp	r0, #1
 800767a:	d06e      	beq.n	800775a <__ssvfiscanf_r+0x2e6>
 800767c:	2802      	cmp	r0, #2
 800767e:	f47f af20 	bne.w	80074c2 <__ssvfiscanf_r+0x4e>
 8007682:	e7cf      	b.n	8007624 <__ssvfiscanf_r+0x1b0>
 8007684:	220a      	movs	r2, #10
 8007686:	e7dd      	b.n	8007644 <__ssvfiscanf_r+0x1d0>
 8007688:	2300      	movs	r3, #0
 800768a:	9342      	str	r3, [sp, #264]	; 0x108
 800768c:	2303      	movs	r3, #3
 800768e:	e7de      	b.n	800764e <__ssvfiscanf_r+0x1da>
 8007690:	2308      	movs	r3, #8
 8007692:	9342      	str	r3, [sp, #264]	; 0x108
 8007694:	2304      	movs	r3, #4
 8007696:	e7da      	b.n	800764e <__ssvfiscanf_r+0x1da>
 8007698:	4629      	mov	r1, r5
 800769a:	4640      	mov	r0, r8
 800769c:	f000 f9e0 	bl	8007a60 <__sccl>
 80076a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a6:	9341      	str	r3, [sp, #260]	; 0x104
 80076a8:	4605      	mov	r5, r0
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7cf      	b.n	800764e <__ssvfiscanf_r+0x1da>
 80076ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b4:	9341      	str	r3, [sp, #260]	; 0x104
 80076b6:	2300      	movs	r3, #0
 80076b8:	e7c9      	b.n	800764e <__ssvfiscanf_r+0x1da>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e7c7      	b.n	800764e <__ssvfiscanf_r+0x1da>
 80076be:	9841      	ldr	r0, [sp, #260]	; 0x104
 80076c0:	06c3      	lsls	r3, r0, #27
 80076c2:	f53f aefe 	bmi.w	80074c2 <__ssvfiscanf_r+0x4e>
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076ca:	1d19      	adds	r1, r3, #4
 80076cc:	9100      	str	r1, [sp, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f010 0f01 	tst.w	r0, #1
 80076d4:	bf14      	ite	ne
 80076d6:	801a      	strhne	r2, [r3, #0]
 80076d8:	601a      	streq	r2, [r3, #0]
 80076da:	e6f2      	b.n	80074c2 <__ssvfiscanf_r+0x4e>
 80076dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076de:	4621      	mov	r1, r4
 80076e0:	4630      	mov	r0, r6
 80076e2:	4798      	blx	r3
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0b6      	beq.n	8007656 <__ssvfiscanf_r+0x1e2>
 80076e8:	e79c      	b.n	8007624 <__ssvfiscanf_r+0x1b0>
 80076ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076ec:	3201      	adds	r2, #1
 80076ee:	9245      	str	r2, [sp, #276]	; 0x114
 80076f0:	6862      	ldr	r2, [r4, #4]
 80076f2:	3a01      	subs	r2, #1
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	6062      	str	r2, [r4, #4]
 80076f8:	dd02      	ble.n	8007700 <__ssvfiscanf_r+0x28c>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	e7ad      	b.n	800765c <__ssvfiscanf_r+0x1e8>
 8007700:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007702:	4621      	mov	r1, r4
 8007704:	4630      	mov	r0, r6
 8007706:	4798      	blx	r3
 8007708:	2800      	cmp	r0, #0
 800770a:	d0a7      	beq.n	800765c <__ssvfiscanf_r+0x1e8>
 800770c:	e78a      	b.n	8007624 <__ssvfiscanf_r+0x1b0>
 800770e:	2b04      	cmp	r3, #4
 8007710:	dc0e      	bgt.n	8007730 <__ssvfiscanf_r+0x2bc>
 8007712:	466b      	mov	r3, sp
 8007714:	4622      	mov	r2, r4
 8007716:	a941      	add	r1, sp, #260	; 0x104
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f87d 	bl	8007818 <_scanf_i>
 800771e:	e7ab      	b.n	8007678 <__ssvfiscanf_r+0x204>
 8007720:	080073c1 	.word	0x080073c1
 8007724:	0800743b 	.word	0x0800743b
 8007728:	08008d91 	.word	0x08008d91
 800772c:	080090fa 	.word	0x080090fa
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <__ssvfiscanf_r+0x2ec>)
 8007732:	2b00      	cmp	r3, #0
 8007734:	f43f aec5 	beq.w	80074c2 <__ssvfiscanf_r+0x4e>
 8007738:	466b      	mov	r3, sp
 800773a:	4622      	mov	r2, r4
 800773c:	a941      	add	r1, sp, #260	; 0x104
 800773e:	4630      	mov	r0, r6
 8007740:	f7fc fb88 	bl	8003e54 <_scanf_float>
 8007744:	e798      	b.n	8007678 <__ssvfiscanf_r+0x204>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	f013 0f40 	tst.w	r3, #64	; 0x40
 800774c:	bf18      	it	ne
 800774e:	f04f 30ff 	movne.w	r0, #4294967295
 8007752:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800775c:	e7f9      	b.n	8007752 <__ssvfiscanf_r+0x2de>
 800775e:	bf00      	nop
 8007760:	08003e55 	.word	0x08003e55

08007764 <_scanf_chars>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	4615      	mov	r5, r2
 800776a:	688a      	ldr	r2, [r1, #8]
 800776c:	4680      	mov	r8, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b932      	cbnz	r2, 8007780 <_scanf_chars+0x1c>
 8007772:	698a      	ldr	r2, [r1, #24]
 8007774:	2a00      	cmp	r2, #0
 8007776:	bf0c      	ite	eq
 8007778:	2201      	moveq	r2, #1
 800777a:	f04f 32ff 	movne.w	r2, #4294967295
 800777e:	608a      	str	r2, [r1, #8]
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007814 <_scanf_chars+0xb0>
 8007786:	06d1      	lsls	r1, r2, #27
 8007788:	bf5f      	itttt	pl
 800778a:	681a      	ldrpl	r2, [r3, #0]
 800778c:	1d11      	addpl	r1, r2, #4
 800778e:	6019      	strpl	r1, [r3, #0]
 8007790:	6816      	ldrpl	r6, [r2, #0]
 8007792:	2700      	movs	r7, #0
 8007794:	69a0      	ldr	r0, [r4, #24]
 8007796:	b188      	cbz	r0, 80077bc <_scanf_chars+0x58>
 8007798:	2801      	cmp	r0, #1
 800779a:	d107      	bne.n	80077ac <_scanf_chars+0x48>
 800779c:	682a      	ldr	r2, [r5, #0]
 800779e:	7811      	ldrb	r1, [r2, #0]
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	5c52      	ldrb	r2, [r2, r1]
 80077a4:	b952      	cbnz	r2, 80077bc <_scanf_chars+0x58>
 80077a6:	2f00      	cmp	r7, #0
 80077a8:	d031      	beq.n	800780e <_scanf_chars+0xaa>
 80077aa:	e022      	b.n	80077f2 <_scanf_chars+0x8e>
 80077ac:	2802      	cmp	r0, #2
 80077ae:	d120      	bne.n	80077f2 <_scanf_chars+0x8e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80077b8:	071b      	lsls	r3, r3, #28
 80077ba:	d41a      	bmi.n	80077f2 <_scanf_chars+0x8e>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	06da      	lsls	r2, r3, #27
 80077c0:	bf5e      	ittt	pl
 80077c2:	682b      	ldrpl	r3, [r5, #0]
 80077c4:	781b      	ldrbpl	r3, [r3, #0]
 80077c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80077ca:	682a      	ldr	r2, [r5, #0]
 80077cc:	686b      	ldr	r3, [r5, #4]
 80077ce:	3201      	adds	r2, #1
 80077d0:	602a      	str	r2, [r5, #0]
 80077d2:	68a2      	ldr	r2, [r4, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	3a01      	subs	r2, #1
 80077d8:	606b      	str	r3, [r5, #4]
 80077da:	3701      	adds	r7, #1
 80077dc:	60a2      	str	r2, [r4, #8]
 80077de:	b142      	cbz	r2, 80077f2 <_scanf_chars+0x8e>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dcd7      	bgt.n	8007794 <_scanf_chars+0x30>
 80077e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077e8:	4629      	mov	r1, r5
 80077ea:	4640      	mov	r0, r8
 80077ec:	4798      	blx	r3
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0d0      	beq.n	8007794 <_scanf_chars+0x30>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	f013 0310 	ands.w	r3, r3, #16
 80077f8:	d105      	bne.n	8007806 <_scanf_chars+0xa2>
 80077fa:	68e2      	ldr	r2, [r4, #12]
 80077fc:	3201      	adds	r2, #1
 80077fe:	60e2      	str	r2, [r4, #12]
 8007800:	69a2      	ldr	r2, [r4, #24]
 8007802:	b102      	cbz	r2, 8007806 <_scanf_chars+0xa2>
 8007804:	7033      	strb	r3, [r6, #0]
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	443b      	add	r3, r7
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	2000      	movs	r0, #0
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	bf00      	nop
 8007814:	08008d91 	.word	0x08008d91

08007818 <_scanf_i>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	4698      	mov	r8, r3
 800781e:	4b76      	ldr	r3, [pc, #472]	; (80079f8 <_scanf_i+0x1e0>)
 8007820:	460c      	mov	r4, r1
 8007822:	4682      	mov	sl, r0
 8007824:	4616      	mov	r6, r2
 8007826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800782a:	b087      	sub	sp, #28
 800782c:	ab03      	add	r3, sp, #12
 800782e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007832:	4b72      	ldr	r3, [pc, #456]	; (80079fc <_scanf_i+0x1e4>)
 8007834:	69a1      	ldr	r1, [r4, #24]
 8007836:	4a72      	ldr	r2, [pc, #456]	; (8007a00 <_scanf_i+0x1e8>)
 8007838:	2903      	cmp	r1, #3
 800783a:	bf18      	it	ne
 800783c:	461a      	movne	r2, r3
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	9201      	str	r2, [sp, #4]
 8007842:	1e5a      	subs	r2, r3, #1
 8007844:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007848:	bf88      	it	hi
 800784a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800784e:	4627      	mov	r7, r4
 8007850:	bf82      	ittt	hi
 8007852:	eb03 0905 	addhi.w	r9, r3, r5
 8007856:	f240 135d 	movwhi	r3, #349	; 0x15d
 800785a:	60a3      	strhi	r3, [r4, #8]
 800785c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007860:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007864:	bf98      	it	ls
 8007866:	f04f 0900 	movls.w	r9, #0
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	463d      	mov	r5, r7
 800786e:	f04f 0b00 	mov.w	fp, #0
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	ab03      	add	r3, sp, #12
 8007876:	7809      	ldrb	r1, [r1, #0]
 8007878:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800787c:	2202      	movs	r2, #2
 800787e:	f7f8 fcc7 	bl	8000210 <memchr>
 8007882:	b328      	cbz	r0, 80078d0 <_scanf_i+0xb8>
 8007884:	f1bb 0f01 	cmp.w	fp, #1
 8007888:	d159      	bne.n	800793e <_scanf_i+0x126>
 800788a:	6862      	ldr	r2, [r4, #4]
 800788c:	b92a      	cbnz	r2, 800789a <_scanf_i+0x82>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	2308      	movs	r3, #8
 8007892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007896:	6063      	str	r3, [r4, #4]
 8007898:	6022      	str	r2, [r4, #0]
 800789a:	6822      	ldr	r2, [r4, #0]
 800789c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	68a2      	ldr	r2, [r4, #8]
 80078a4:	1e51      	subs	r1, r2, #1
 80078a6:	60a1      	str	r1, [r4, #8]
 80078a8:	b192      	cbz	r2, 80078d0 <_scanf_i+0xb8>
 80078aa:	6832      	ldr	r2, [r6, #0]
 80078ac:	1c51      	adds	r1, r2, #1
 80078ae:	6031      	str	r1, [r6, #0]
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	f805 2b01 	strb.w	r2, [r5], #1
 80078b6:	6872      	ldr	r2, [r6, #4]
 80078b8:	3a01      	subs	r2, #1
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	6072      	str	r2, [r6, #4]
 80078be:	dc07      	bgt.n	80078d0 <_scanf_i+0xb8>
 80078c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80078c4:	4631      	mov	r1, r6
 80078c6:	4650      	mov	r0, sl
 80078c8:	4790      	blx	r2
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f040 8085 	bne.w	80079da <_scanf_i+0x1c2>
 80078d0:	f10b 0b01 	add.w	fp, fp, #1
 80078d4:	f1bb 0f03 	cmp.w	fp, #3
 80078d8:	d1cb      	bne.n	8007872 <_scanf_i+0x5a>
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	b90b      	cbnz	r3, 80078e2 <_scanf_i+0xca>
 80078de:	230a      	movs	r3, #10
 80078e0:	6063      	str	r3, [r4, #4]
 80078e2:	6863      	ldr	r3, [r4, #4]
 80078e4:	4947      	ldr	r1, [pc, #284]	; (8007a04 <_scanf_i+0x1ec>)
 80078e6:	6960      	ldr	r0, [r4, #20]
 80078e8:	1ac9      	subs	r1, r1, r3
 80078ea:	f000 f8b9 	bl	8007a60 <__sccl>
 80078ee:	f04f 0b00 	mov.w	fp, #0
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d03d      	beq.n	8007976 <_scanf_i+0x15e>
 80078fa:	6831      	ldr	r1, [r6, #0]
 80078fc:	6960      	ldr	r0, [r4, #20]
 80078fe:	f891 c000 	ldrb.w	ip, [r1]
 8007902:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007906:	2800      	cmp	r0, #0
 8007908:	d035      	beq.n	8007976 <_scanf_i+0x15e>
 800790a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800790e:	d124      	bne.n	800795a <_scanf_i+0x142>
 8007910:	0510      	lsls	r0, r2, #20
 8007912:	d522      	bpl.n	800795a <_scanf_i+0x142>
 8007914:	f10b 0b01 	add.w	fp, fp, #1
 8007918:	f1b9 0f00 	cmp.w	r9, #0
 800791c:	d003      	beq.n	8007926 <_scanf_i+0x10e>
 800791e:	3301      	adds	r3, #1
 8007920:	f109 39ff 	add.w	r9, r9, #4294967295
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	6873      	ldr	r3, [r6, #4]
 8007928:	3b01      	subs	r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	6073      	str	r3, [r6, #4]
 800792e:	dd1b      	ble.n	8007968 <_scanf_i+0x150>
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	6033      	str	r3, [r6, #0]
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	3b01      	subs	r3, #1
 800793a:	60a3      	str	r3, [r4, #8]
 800793c:	e7d9      	b.n	80078f2 <_scanf_i+0xda>
 800793e:	f1bb 0f02 	cmp.w	fp, #2
 8007942:	d1ae      	bne.n	80078a2 <_scanf_i+0x8a>
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800794a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800794e:	d1bf      	bne.n	80078d0 <_scanf_i+0xb8>
 8007950:	2310      	movs	r3, #16
 8007952:	6063      	str	r3, [r4, #4]
 8007954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007958:	e7a2      	b.n	80078a0 <_scanf_i+0x88>
 800795a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800795e:	6022      	str	r2, [r4, #0]
 8007960:	780b      	ldrb	r3, [r1, #0]
 8007962:	f805 3b01 	strb.w	r3, [r5], #1
 8007966:	e7de      	b.n	8007926 <_scanf_i+0x10e>
 8007968:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800796c:	4631      	mov	r1, r6
 800796e:	4650      	mov	r0, sl
 8007970:	4798      	blx	r3
 8007972:	2800      	cmp	r0, #0
 8007974:	d0df      	beq.n	8007936 <_scanf_i+0x11e>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	05db      	lsls	r3, r3, #23
 800797a:	d50d      	bpl.n	8007998 <_scanf_i+0x180>
 800797c:	42bd      	cmp	r5, r7
 800797e:	d909      	bls.n	8007994 <_scanf_i+0x17c>
 8007980:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007988:	4632      	mov	r2, r6
 800798a:	4650      	mov	r0, sl
 800798c:	4798      	blx	r3
 800798e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007992:	464d      	mov	r5, r9
 8007994:	42bd      	cmp	r5, r7
 8007996:	d02d      	beq.n	80079f4 <_scanf_i+0x1dc>
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	f012 0210 	ands.w	r2, r2, #16
 800799e:	d113      	bne.n	80079c8 <_scanf_i+0x1b0>
 80079a0:	702a      	strb	r2, [r5, #0]
 80079a2:	6863      	ldr	r3, [r4, #4]
 80079a4:	9e01      	ldr	r6, [sp, #4]
 80079a6:	4639      	mov	r1, r7
 80079a8:	4650      	mov	r0, sl
 80079aa:	47b0      	blx	r6
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	f8d8 3000 	ldr.w	r3, [r8]
 80079b2:	f011 0f20 	tst.w	r1, #32
 80079b6:	d013      	beq.n	80079e0 <_scanf_i+0x1c8>
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	f8c8 2000 	str.w	r2, [r8]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6018      	str	r0, [r3, #0]
 80079c2:	68e3      	ldr	r3, [r4, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60e3      	str	r3, [r4, #12]
 80079c8:	1bed      	subs	r5, r5, r7
 80079ca:	44ab      	add	fp, r5
 80079cc:	6925      	ldr	r5, [r4, #16]
 80079ce:	445d      	add	r5, fp
 80079d0:	6125      	str	r5, [r4, #16]
 80079d2:	2000      	movs	r0, #0
 80079d4:	b007      	add	sp, #28
 80079d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079da:	f04f 0b00 	mov.w	fp, #0
 80079de:	e7ca      	b.n	8007976 <_scanf_i+0x15e>
 80079e0:	1d1a      	adds	r2, r3, #4
 80079e2:	f8c8 2000 	str.w	r2, [r8]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f011 0f01 	tst.w	r1, #1
 80079ec:	bf14      	ite	ne
 80079ee:	8018      	strhne	r0, [r3, #0]
 80079f0:	6018      	streq	r0, [r3, #0]
 80079f2:	e7e6      	b.n	80079c2 <_scanf_i+0x1aa>
 80079f4:	2001      	movs	r0, #1
 80079f6:	e7ed      	b.n	80079d4 <_scanf_i+0x1bc>
 80079f8:	08008cf8 	.word	0x08008cf8
 80079fc:	08007bdd 	.word	0x08007bdd
 8007a00:	080050fd 	.word	0x080050fd
 8007a04:	0800911e 	.word	0x0800911e

08007a08 <_read_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4d07      	ldr	r5, [pc, #28]	; (8007a28 <_read_r+0x20>)
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	4608      	mov	r0, r1
 8007a10:	4611      	mov	r1, r2
 8007a12:	2200      	movs	r2, #0
 8007a14:	602a      	str	r2, [r5, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f7fa f830 	bl	8001a7c <_read>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_read_r+0x1e>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_read_r+0x1e>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	200003fc 	.word	0x200003fc
 8007a2c:	00000000 	.word	0x00000000

08007a30 <nan>:
 8007a30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007a38 <nan+0x8>
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	00000000 	.word	0x00000000
 8007a3c:	7ff80000 	.word	0x7ff80000

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	; (8007a5c <_sbrk_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fa f884 	bl	8001b58 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200003fc 	.word	0x200003fc

08007a60 <__sccl>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	780b      	ldrb	r3, [r1, #0]
 8007a64:	4604      	mov	r4, r0
 8007a66:	2b5e      	cmp	r3, #94	; 0x5e
 8007a68:	bf0b      	itete	eq
 8007a6a:	784b      	ldrbeq	r3, [r1, #1]
 8007a6c:	1c48      	addne	r0, r1, #1
 8007a6e:	1c88      	addeq	r0, r1, #2
 8007a70:	2200      	movne	r2, #0
 8007a72:	bf08      	it	eq
 8007a74:	2201      	moveq	r2, #1
 8007a76:	1e61      	subs	r1, r4, #1
 8007a78:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007a7c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007a80:	42a9      	cmp	r1, r5
 8007a82:	d1fb      	bne.n	8007a7c <__sccl+0x1c>
 8007a84:	b90b      	cbnz	r3, 8007a8a <__sccl+0x2a>
 8007a86:	3801      	subs	r0, #1
 8007a88:	bd70      	pop	{r4, r5, r6, pc}
 8007a8a:	f082 0201 	eor.w	r2, r2, #1
 8007a8e:	54e2      	strb	r2, [r4, r3]
 8007a90:	4605      	mov	r5, r0
 8007a92:	4628      	mov	r0, r5
 8007a94:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007a98:	292d      	cmp	r1, #45	; 0x2d
 8007a9a:	d006      	beq.n	8007aaa <__sccl+0x4a>
 8007a9c:	295d      	cmp	r1, #93	; 0x5d
 8007a9e:	d0f3      	beq.n	8007a88 <__sccl+0x28>
 8007aa0:	b909      	cbnz	r1, 8007aa6 <__sccl+0x46>
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	e7f0      	b.n	8007a88 <__sccl+0x28>
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	e7f1      	b.n	8007a8e <__sccl+0x2e>
 8007aaa:	786e      	ldrb	r6, [r5, #1]
 8007aac:	2e5d      	cmp	r6, #93	; 0x5d
 8007aae:	d0fa      	beq.n	8007aa6 <__sccl+0x46>
 8007ab0:	42b3      	cmp	r3, r6
 8007ab2:	dcf8      	bgt.n	8007aa6 <__sccl+0x46>
 8007ab4:	3502      	adds	r5, #2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	3101      	adds	r1, #1
 8007aba:	428e      	cmp	r6, r1
 8007abc:	5462      	strb	r2, [r4, r1]
 8007abe:	dcfb      	bgt.n	8007ab8 <__sccl+0x58>
 8007ac0:	1af1      	subs	r1, r6, r3
 8007ac2:	3901      	subs	r1, #1
 8007ac4:	1c58      	adds	r0, r3, #1
 8007ac6:	42b3      	cmp	r3, r6
 8007ac8:	bfa8      	it	ge
 8007aca:	2100      	movge	r1, #0
 8007acc:	1843      	adds	r3, r0, r1
 8007ace:	e7e0      	b.n	8007a92 <__sccl+0x32>

08007ad0 <strncmp>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	b17a      	cbz	r2, 8007af4 <strncmp+0x24>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	3901      	subs	r1, #1
 8007ad8:	1884      	adds	r4, r0, r2
 8007ada:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ade:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ae2:	4290      	cmp	r0, r2
 8007ae4:	d101      	bne.n	8007aea <strncmp+0x1a>
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	d101      	bne.n	8007aee <strncmp+0x1e>
 8007aea:	1a80      	subs	r0, r0, r2
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d1f3      	bne.n	8007ada <strncmp+0xa>
 8007af2:	e7fa      	b.n	8007aea <strncmp+0x1a>
 8007af4:	4610      	mov	r0, r2
 8007af6:	e7f9      	b.n	8007aec <strncmp+0x1c>

08007af8 <_strtoul_l.constprop.0>:
 8007af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007afc:	4f36      	ldr	r7, [pc, #216]	; (8007bd8 <_strtoul_l.constprop.0+0xe0>)
 8007afe:	4686      	mov	lr, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	4628      	mov	r0, r5
 8007b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b08:	5de6      	ldrb	r6, [r4, r7]
 8007b0a:	f016 0608 	ands.w	r6, r6, #8
 8007b0e:	d1f8      	bne.n	8007b02 <_strtoul_l.constprop.0+0xa>
 8007b10:	2c2d      	cmp	r4, #45	; 0x2d
 8007b12:	d12f      	bne.n	8007b74 <_strtoul_l.constprop.0+0x7c>
 8007b14:	782c      	ldrb	r4, [r5, #0]
 8007b16:	2601      	movs	r6, #1
 8007b18:	1c85      	adds	r5, r0, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d057      	beq.n	8007bce <_strtoul_l.constprop.0+0xd6>
 8007b1e:	2b10      	cmp	r3, #16
 8007b20:	d109      	bne.n	8007b36 <_strtoul_l.constprop.0+0x3e>
 8007b22:	2c30      	cmp	r4, #48	; 0x30
 8007b24:	d107      	bne.n	8007b36 <_strtoul_l.constprop.0+0x3e>
 8007b26:	7828      	ldrb	r0, [r5, #0]
 8007b28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007b2c:	2858      	cmp	r0, #88	; 0x58
 8007b2e:	d149      	bne.n	8007bc4 <_strtoul_l.constprop.0+0xcc>
 8007b30:	786c      	ldrb	r4, [r5, #1]
 8007b32:	2310      	movs	r3, #16
 8007b34:	3502      	adds	r5, #2
 8007b36:	f04f 38ff 	mov.w	r8, #4294967295
 8007b3a:	2700      	movs	r7, #0
 8007b3c:	fbb8 f8f3 	udiv	r8, r8, r3
 8007b40:	fb03 f908 	mul.w	r9, r3, r8
 8007b44:	ea6f 0909 	mvn.w	r9, r9
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007b4e:	f1bc 0f09 	cmp.w	ip, #9
 8007b52:	d814      	bhi.n	8007b7e <_strtoul_l.constprop.0+0x86>
 8007b54:	4664      	mov	r4, ip
 8007b56:	42a3      	cmp	r3, r4
 8007b58:	dd22      	ble.n	8007ba0 <_strtoul_l.constprop.0+0xa8>
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	db1d      	blt.n	8007b9a <_strtoul_l.constprop.0+0xa2>
 8007b5e:	4580      	cmp	r8, r0
 8007b60:	d31b      	bcc.n	8007b9a <_strtoul_l.constprop.0+0xa2>
 8007b62:	d101      	bne.n	8007b68 <_strtoul_l.constprop.0+0x70>
 8007b64:	45a1      	cmp	r9, r4
 8007b66:	db18      	blt.n	8007b9a <_strtoul_l.constprop.0+0xa2>
 8007b68:	fb00 4003 	mla	r0, r0, r3, r4
 8007b6c:	2701      	movs	r7, #1
 8007b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b72:	e7ea      	b.n	8007b4a <_strtoul_l.constprop.0+0x52>
 8007b74:	2c2b      	cmp	r4, #43	; 0x2b
 8007b76:	bf04      	itt	eq
 8007b78:	782c      	ldrbeq	r4, [r5, #0]
 8007b7a:	1c85      	addeq	r5, r0, #2
 8007b7c:	e7cd      	b.n	8007b1a <_strtoul_l.constprop.0+0x22>
 8007b7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007b82:	f1bc 0f19 	cmp.w	ip, #25
 8007b86:	d801      	bhi.n	8007b8c <_strtoul_l.constprop.0+0x94>
 8007b88:	3c37      	subs	r4, #55	; 0x37
 8007b8a:	e7e4      	b.n	8007b56 <_strtoul_l.constprop.0+0x5e>
 8007b8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007b90:	f1bc 0f19 	cmp.w	ip, #25
 8007b94:	d804      	bhi.n	8007ba0 <_strtoul_l.constprop.0+0xa8>
 8007b96:	3c57      	subs	r4, #87	; 0x57
 8007b98:	e7dd      	b.n	8007b56 <_strtoul_l.constprop.0+0x5e>
 8007b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8007b9e:	e7e6      	b.n	8007b6e <_strtoul_l.constprop.0+0x76>
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	da07      	bge.n	8007bb4 <_strtoul_l.constprop.0+0xbc>
 8007ba4:	2322      	movs	r3, #34	; 0x22
 8007ba6:	f8ce 3000 	str.w	r3, [lr]
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	b932      	cbnz	r2, 8007bbe <_strtoul_l.constprop.0+0xc6>
 8007bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bb4:	b106      	cbz	r6, 8007bb8 <_strtoul_l.constprop.0+0xc0>
 8007bb6:	4240      	negs	r0, r0
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	d0f9      	beq.n	8007bb0 <_strtoul_l.constprop.0+0xb8>
 8007bbc:	b107      	cbz	r7, 8007bc0 <_strtoul_l.constprop.0+0xc8>
 8007bbe:	1e69      	subs	r1, r5, #1
 8007bc0:	6011      	str	r1, [r2, #0]
 8007bc2:	e7f5      	b.n	8007bb0 <_strtoul_l.constprop.0+0xb8>
 8007bc4:	2430      	movs	r4, #48	; 0x30
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1b5      	bne.n	8007b36 <_strtoul_l.constprop.0+0x3e>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	e7b3      	b.n	8007b36 <_strtoul_l.constprop.0+0x3e>
 8007bce:	2c30      	cmp	r4, #48	; 0x30
 8007bd0:	d0a9      	beq.n	8007b26 <_strtoul_l.constprop.0+0x2e>
 8007bd2:	230a      	movs	r3, #10
 8007bd4:	e7af      	b.n	8007b36 <_strtoul_l.constprop.0+0x3e>
 8007bd6:	bf00      	nop
 8007bd8:	08008d91 	.word	0x08008d91

08007bdc <_strtoul_r>:
 8007bdc:	f7ff bf8c 	b.w	8007af8 <_strtoul_l.constprop.0>

08007be0 <__submore>:
 8007be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be4:	460c      	mov	r4, r1
 8007be6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bec:	4299      	cmp	r1, r3
 8007bee:	d11d      	bne.n	8007c2c <__submore+0x4c>
 8007bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bf4:	f7ff fa14 	bl	8007020 <_malloc_r>
 8007bf8:	b918      	cbnz	r0, 8007c02 <__submore+0x22>
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c06:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007c12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007c16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007c1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007c22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007c26:	6020      	str	r0, [r4, #0]
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e7e8      	b.n	8007bfe <__submore+0x1e>
 8007c2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007c2e:	0077      	lsls	r7, r6, #1
 8007c30:	463a      	mov	r2, r7
 8007c32:	f000 fa2d 	bl	8008090 <_realloc_r>
 8007c36:	4605      	mov	r5, r0
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d0de      	beq.n	8007bfa <__submore+0x1a>
 8007c3c:	eb00 0806 	add.w	r8, r0, r6
 8007c40:	4601      	mov	r1, r0
 8007c42:	4632      	mov	r2, r6
 8007c44:	4640      	mov	r0, r8
 8007c46:	f7fe fc99 	bl	800657c <memcpy>
 8007c4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007c4e:	f8c4 8000 	str.w	r8, [r4]
 8007c52:	e7e9      	b.n	8007c28 <__submore+0x48>

08007c54 <__ascii_wctomb>:
 8007c54:	b149      	cbz	r1, 8007c6a <__ascii_wctomb+0x16>
 8007c56:	2aff      	cmp	r2, #255	; 0xff
 8007c58:	bf85      	ittet	hi
 8007c5a:	238a      	movhi	r3, #138	; 0x8a
 8007c5c:	6003      	strhi	r3, [r0, #0]
 8007c5e:	700a      	strbls	r2, [r1, #0]
 8007c60:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c64:	bf98      	it	ls
 8007c66:	2001      	movls	r0, #1
 8007c68:	4770      	bx	lr
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4770      	bx	lr
	...

08007c70 <__assert_func>:
 8007c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c72:	4614      	mov	r4, r2
 8007c74:	461a      	mov	r2, r3
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <__assert_func+0x2c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	68d8      	ldr	r0, [r3, #12]
 8007c7e:	b14c      	cbz	r4, 8007c94 <__assert_func+0x24>
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <__assert_func+0x30>)
 8007c82:	9100      	str	r1, [sp, #0]
 8007c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c88:	4906      	ldr	r1, [pc, #24]	; (8007ca4 <__assert_func+0x34>)
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	f000 f9a6 	bl	8007fdc <fiprintf>
 8007c90:	f000 fc46 	bl	8008520 <abort>
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <__assert_func+0x38>)
 8007c96:	461c      	mov	r4, r3
 8007c98:	e7f3      	b.n	8007c82 <__assert_func+0x12>
 8007c9a:	bf00      	nop
 8007c9c:	20000004 	.word	0x20000004
 8007ca0:	08009120 	.word	0x08009120
 8007ca4:	0800912d 	.word	0x0800912d
 8007ca8:	0800915b 	.word	0x0800915b

08007cac <__sflush_r>:
 8007cac:	898a      	ldrh	r2, [r1, #12]
 8007cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	0710      	lsls	r0, r2, #28
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	d458      	bmi.n	8007d6c <__sflush_r+0xc0>
 8007cba:	684b      	ldr	r3, [r1, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dc05      	bgt.n	8007ccc <__sflush_r+0x20>
 8007cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dc02      	bgt.n	8007ccc <__sflush_r+0x20>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d0f9      	beq.n	8007cc6 <__sflush_r+0x1a>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cd8:	682f      	ldr	r7, [r5, #0]
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	d032      	beq.n	8007d44 <__sflush_r+0x98>
 8007cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	075a      	lsls	r2, r3, #29
 8007ce4:	d505      	bpl.n	8007cf2 <__sflush_r+0x46>
 8007ce6:	6863      	ldr	r3, [r4, #4]
 8007ce8:	1ac0      	subs	r0, r0, r3
 8007cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cec:	b10b      	cbz	r3, 8007cf2 <__sflush_r+0x46>
 8007cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cf0:	1ac0      	subs	r0, r0, r3
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf8:	6a21      	ldr	r1, [r4, #32]
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b0      	blx	r6
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	d106      	bne.n	8007d12 <__sflush_r+0x66>
 8007d04:	6829      	ldr	r1, [r5, #0]
 8007d06:	291d      	cmp	r1, #29
 8007d08:	d82c      	bhi.n	8007d64 <__sflush_r+0xb8>
 8007d0a:	4a2a      	ldr	r2, [pc, #168]	; (8007db4 <__sflush_r+0x108>)
 8007d0c:	40ca      	lsrs	r2, r1
 8007d0e:	07d6      	lsls	r6, r2, #31
 8007d10:	d528      	bpl.n	8007d64 <__sflush_r+0xb8>
 8007d12:	2200      	movs	r2, #0
 8007d14:	6062      	str	r2, [r4, #4]
 8007d16:	04d9      	lsls	r1, r3, #19
 8007d18:	6922      	ldr	r2, [r4, #16]
 8007d1a:	6022      	str	r2, [r4, #0]
 8007d1c:	d504      	bpl.n	8007d28 <__sflush_r+0x7c>
 8007d1e:	1c42      	adds	r2, r0, #1
 8007d20:	d101      	bne.n	8007d26 <__sflush_r+0x7a>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b903      	cbnz	r3, 8007d28 <__sflush_r+0x7c>
 8007d26:	6560      	str	r0, [r4, #84]	; 0x54
 8007d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d2a:	602f      	str	r7, [r5, #0]
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d0ca      	beq.n	8007cc6 <__sflush_r+0x1a>
 8007d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d34:	4299      	cmp	r1, r3
 8007d36:	d002      	beq.n	8007d3e <__sflush_r+0x92>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7ff f905 	bl	8006f48 <_free_r>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	6360      	str	r0, [r4, #52]	; 0x34
 8007d42:	e7c1      	b.n	8007cc8 <__sflush_r+0x1c>
 8007d44:	6a21      	ldr	r1, [r4, #32]
 8007d46:	2301      	movs	r3, #1
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b0      	blx	r6
 8007d4c:	1c41      	adds	r1, r0, #1
 8007d4e:	d1c7      	bne.n	8007ce0 <__sflush_r+0x34>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0c4      	beq.n	8007ce0 <__sflush_r+0x34>
 8007d56:	2b1d      	cmp	r3, #29
 8007d58:	d001      	beq.n	8007d5e <__sflush_r+0xb2>
 8007d5a:	2b16      	cmp	r3, #22
 8007d5c:	d101      	bne.n	8007d62 <__sflush_r+0xb6>
 8007d5e:	602f      	str	r7, [r5, #0]
 8007d60:	e7b1      	b.n	8007cc6 <__sflush_r+0x1a>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	e7ad      	b.n	8007cc8 <__sflush_r+0x1c>
 8007d6c:	690f      	ldr	r7, [r1, #16]
 8007d6e:	2f00      	cmp	r7, #0
 8007d70:	d0a9      	beq.n	8007cc6 <__sflush_r+0x1a>
 8007d72:	0793      	lsls	r3, r2, #30
 8007d74:	680e      	ldr	r6, [r1, #0]
 8007d76:	bf08      	it	eq
 8007d78:	694b      	ldreq	r3, [r1, #20]
 8007d7a:	600f      	str	r7, [r1, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	2300      	movne	r3, #0
 8007d80:	eba6 0807 	sub.w	r8, r6, r7
 8007d84:	608b      	str	r3, [r1, #8]
 8007d86:	f1b8 0f00 	cmp.w	r8, #0
 8007d8a:	dd9c      	ble.n	8007cc6 <__sflush_r+0x1a>
 8007d8c:	6a21      	ldr	r1, [r4, #32]
 8007d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d90:	4643      	mov	r3, r8
 8007d92:	463a      	mov	r2, r7
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b0      	blx	r6
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dc06      	bgt.n	8007daa <__sflush_r+0xfe>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	e78e      	b.n	8007cc8 <__sflush_r+0x1c>
 8007daa:	4407      	add	r7, r0
 8007dac:	eba8 0800 	sub.w	r8, r8, r0
 8007db0:	e7e9      	b.n	8007d86 <__sflush_r+0xda>
 8007db2:	bf00      	nop
 8007db4:	20400001 	.word	0x20400001

08007db8 <_fflush_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	690b      	ldr	r3, [r1, #16]
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	b913      	cbnz	r3, 8007dc8 <_fflush_r+0x10>
 8007dc2:	2500      	movs	r5, #0
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	b118      	cbz	r0, 8007dd2 <_fflush_r+0x1a>
 8007dca:	6983      	ldr	r3, [r0, #24]
 8007dcc:	b90b      	cbnz	r3, 8007dd2 <_fflush_r+0x1a>
 8007dce:	f000 f887 	bl	8007ee0 <__sinit>
 8007dd2:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <_fflush_r+0x6c>)
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	d11b      	bne.n	8007e10 <_fflush_r+0x58>
 8007dd8:	686c      	ldr	r4, [r5, #4]
 8007dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0ef      	beq.n	8007dc2 <_fflush_r+0xa>
 8007de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007de4:	07d0      	lsls	r0, r2, #31
 8007de6:	d404      	bmi.n	8007df2 <_fflush_r+0x3a>
 8007de8:	0599      	lsls	r1, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_fflush_r+0x3a>
 8007dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dee:	f000 f927 	bl	8008040 <__retarget_lock_acquire_recursive>
 8007df2:	4628      	mov	r0, r5
 8007df4:	4621      	mov	r1, r4
 8007df6:	f7ff ff59 	bl	8007cac <__sflush_r>
 8007dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dfc:	07da      	lsls	r2, r3, #31
 8007dfe:	4605      	mov	r5, r0
 8007e00:	d4e0      	bmi.n	8007dc4 <_fflush_r+0xc>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	059b      	lsls	r3, r3, #22
 8007e06:	d4dd      	bmi.n	8007dc4 <_fflush_r+0xc>
 8007e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0a:	f000 f91a 	bl	8008042 <__retarget_lock_release_recursive>
 8007e0e:	e7d9      	b.n	8007dc4 <_fflush_r+0xc>
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <_fflush_r+0x70>)
 8007e12:	429c      	cmp	r4, r3
 8007e14:	d101      	bne.n	8007e1a <_fflush_r+0x62>
 8007e16:	68ac      	ldr	r4, [r5, #8]
 8007e18:	e7df      	b.n	8007dda <_fflush_r+0x22>
 8007e1a:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <_fflush_r+0x74>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	bf08      	it	eq
 8007e20:	68ec      	ldreq	r4, [r5, #12]
 8007e22:	e7da      	b.n	8007dda <_fflush_r+0x22>
 8007e24:	0800917c 	.word	0x0800917c
 8007e28:	0800919c 	.word	0x0800919c
 8007e2c:	0800915c 	.word	0x0800915c

08007e30 <std>:
 8007e30:	2300      	movs	r3, #0
 8007e32:	b510      	push	{r4, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	e9c0 3300 	strd	r3, r3, [r0]
 8007e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e3e:	6083      	str	r3, [r0, #8]
 8007e40:	8181      	strh	r1, [r0, #12]
 8007e42:	6643      	str	r3, [r0, #100]	; 0x64
 8007e44:	81c2      	strh	r2, [r0, #14]
 8007e46:	6183      	str	r3, [r0, #24]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	305c      	adds	r0, #92	; 0x5c
 8007e4e:	f7fb fb8f 	bl	8003570 <memset>
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <std+0x38>)
 8007e54:	6263      	str	r3, [r4, #36]	; 0x24
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <std+0x3c>)
 8007e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <std+0x40>)
 8007e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <std+0x44>)
 8007e60:	6224      	str	r4, [r4, #32]
 8007e62:	6323      	str	r3, [r4, #48]	; 0x30
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	08004319 	.word	0x08004319
 8007e6c:	0800433f 	.word	0x0800433f
 8007e70:	08004377 	.word	0x08004377
 8007e74:	0800439b 	.word	0x0800439b

08007e78 <_cleanup_r>:
 8007e78:	4901      	ldr	r1, [pc, #4]	; (8007e80 <_cleanup_r+0x8>)
 8007e7a:	f000 b8c1 	b.w	8008000 <_fwalk_reent>
 8007e7e:	bf00      	nop
 8007e80:	08007db9 	.word	0x08007db9

08007e84 <__sfmoreglue>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	2268      	movs	r2, #104	; 0x68
 8007e88:	1e4d      	subs	r5, r1, #1
 8007e8a:	4355      	muls	r5, r2
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e92:	f7ff f8c5 	bl	8007020 <_malloc_r>
 8007e96:	4604      	mov	r4, r0
 8007e98:	b140      	cbz	r0, 8007eac <__sfmoreglue+0x28>
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8007ea0:	300c      	adds	r0, #12
 8007ea2:	60a0      	str	r0, [r4, #8]
 8007ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ea8:	f7fb fb62 	bl	8003570 <memset>
 8007eac:	4620      	mov	r0, r4
 8007eae:	bd70      	pop	{r4, r5, r6, pc}

08007eb0 <__sfp_lock_acquire>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__sfp_lock_acquire+0x8>)
 8007eb2:	f000 b8c5 	b.w	8008040 <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20000401 	.word	0x20000401

08007ebc <__sfp_lock_release>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__sfp_lock_release+0x8>)
 8007ebe:	f000 b8c0 	b.w	8008042 <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	20000401 	.word	0x20000401

08007ec8 <__sinit_lock_acquire>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__sinit_lock_acquire+0x8>)
 8007eca:	f000 b8b9 	b.w	8008040 <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	20000402 	.word	0x20000402

08007ed4 <__sinit_lock_release>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__sinit_lock_release+0x8>)
 8007ed6:	f000 b8b4 	b.w	8008042 <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000402 	.word	0x20000402

08007ee0 <__sinit>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	f7ff fff0 	bl	8007ec8 <__sinit_lock_acquire>
 8007ee8:	69a3      	ldr	r3, [r4, #24]
 8007eea:	b11b      	cbz	r3, 8007ef4 <__sinit+0x14>
 8007eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef0:	f7ff bff0 	b.w	8007ed4 <__sinit_lock_release>
 8007ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8007efa:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <__sinit+0x68>)
 8007efc:	4a13      	ldr	r2, [pc, #76]	; (8007f4c <__sinit+0x6c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	bf04      	itt	eq
 8007f06:	2301      	moveq	r3, #1
 8007f08:	61a3      	streq	r3, [r4, #24]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f820 	bl	8007f50 <__sfp>
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f81c 	bl	8007f50 <__sfp>
 8007f18:	60a0      	str	r0, [r4, #8]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 f818 	bl	8007f50 <__sfp>
 8007f20:	2200      	movs	r2, #0
 8007f22:	60e0      	str	r0, [r4, #12]
 8007f24:	2104      	movs	r1, #4
 8007f26:	6860      	ldr	r0, [r4, #4]
 8007f28:	f7ff ff82 	bl	8007e30 <std>
 8007f2c:	68a0      	ldr	r0, [r4, #8]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	2109      	movs	r1, #9
 8007f32:	f7ff ff7d 	bl	8007e30 <std>
 8007f36:	68e0      	ldr	r0, [r4, #12]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	2112      	movs	r1, #18
 8007f3c:	f7ff ff78 	bl	8007e30 <std>
 8007f40:	2301      	movs	r3, #1
 8007f42:	61a3      	str	r3, [r4, #24]
 8007f44:	e7d2      	b.n	8007eec <__sinit+0xc>
 8007f46:	bf00      	nop
 8007f48:	08008d04 	.word	0x08008d04
 8007f4c:	08007e79 	.word	0x08007e79

08007f50 <__sfp>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	4607      	mov	r7, r0
 8007f54:	f7ff ffac 	bl	8007eb0 <__sfp_lock_acquire>
 8007f58:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <__sfp+0x84>)
 8007f5a:	681e      	ldr	r6, [r3, #0]
 8007f5c:	69b3      	ldr	r3, [r6, #24]
 8007f5e:	b913      	cbnz	r3, 8007f66 <__sfp+0x16>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff ffbd 	bl	8007ee0 <__sinit>
 8007f66:	3648      	adds	r6, #72	; 0x48
 8007f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	d503      	bpl.n	8007f78 <__sfp+0x28>
 8007f70:	6833      	ldr	r3, [r6, #0]
 8007f72:	b30b      	cbz	r3, 8007fb8 <__sfp+0x68>
 8007f74:	6836      	ldr	r6, [r6, #0]
 8007f76:	e7f7      	b.n	8007f68 <__sfp+0x18>
 8007f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f7c:	b9d5      	cbnz	r5, 8007fb4 <__sfp+0x64>
 8007f7e:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <__sfp+0x88>)
 8007f80:	60e3      	str	r3, [r4, #12]
 8007f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f86:	6665      	str	r5, [r4, #100]	; 0x64
 8007f88:	f000 f859 	bl	800803e <__retarget_lock_init_recursive>
 8007f8c:	f7ff ff96 	bl	8007ebc <__sfp_lock_release>
 8007f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f98:	6025      	str	r5, [r4, #0]
 8007f9a:	61a5      	str	r5, [r4, #24]
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fa4:	f7fb fae4 	bl	8003570 <memset>
 8007fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb4:	3468      	adds	r4, #104	; 0x68
 8007fb6:	e7d9      	b.n	8007f6c <__sfp+0x1c>
 8007fb8:	2104      	movs	r1, #4
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ff62 	bl	8007e84 <__sfmoreglue>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	6030      	str	r0, [r6, #0]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1d5      	bne.n	8007f74 <__sfp+0x24>
 8007fc8:	f7ff ff78 	bl	8007ebc <__sfp_lock_release>
 8007fcc:	230c      	movs	r3, #12
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	e7ee      	b.n	8007fb0 <__sfp+0x60>
 8007fd2:	bf00      	nop
 8007fd4:	08008d04 	.word	0x08008d04
 8007fd8:	ffff0001 	.word	0xffff0001

08007fdc <fiprintf>:
 8007fdc:	b40e      	push	{r1, r2, r3}
 8007fde:	b503      	push	{r0, r1, lr}
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	ab03      	add	r3, sp, #12
 8007fe4:	4805      	ldr	r0, [pc, #20]	; (8007ffc <fiprintf+0x20>)
 8007fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	f000 f8a7 	bl	8008140 <_vfiprintf_r>
 8007ff2:	b002      	add	sp, #8
 8007ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff8:	b003      	add	sp, #12
 8007ffa:	4770      	bx	lr
 8007ffc:	20000004 	.word	0x20000004

08008000 <_fwalk_reent>:
 8008000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008004:	4606      	mov	r6, r0
 8008006:	4688      	mov	r8, r1
 8008008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800800c:	2700      	movs	r7, #0
 800800e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008012:	f1b9 0901 	subs.w	r9, r9, #1
 8008016:	d505      	bpl.n	8008024 <_fwalk_reent+0x24>
 8008018:	6824      	ldr	r4, [r4, #0]
 800801a:	2c00      	cmp	r4, #0
 800801c:	d1f7      	bne.n	800800e <_fwalk_reent+0xe>
 800801e:	4638      	mov	r0, r7
 8008020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008024:	89ab      	ldrh	r3, [r5, #12]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d907      	bls.n	800803a <_fwalk_reent+0x3a>
 800802a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800802e:	3301      	adds	r3, #1
 8008030:	d003      	beq.n	800803a <_fwalk_reent+0x3a>
 8008032:	4629      	mov	r1, r5
 8008034:	4630      	mov	r0, r6
 8008036:	47c0      	blx	r8
 8008038:	4307      	orrs	r7, r0
 800803a:	3568      	adds	r5, #104	; 0x68
 800803c:	e7e9      	b.n	8008012 <_fwalk_reent+0x12>

0800803e <__retarget_lock_init_recursive>:
 800803e:	4770      	bx	lr

08008040 <__retarget_lock_acquire_recursive>:
 8008040:	4770      	bx	lr

08008042 <__retarget_lock_release_recursive>:
 8008042:	4770      	bx	lr

08008044 <memmove>:
 8008044:	4288      	cmp	r0, r1
 8008046:	b510      	push	{r4, lr}
 8008048:	eb01 0402 	add.w	r4, r1, r2
 800804c:	d902      	bls.n	8008054 <memmove+0x10>
 800804e:	4284      	cmp	r4, r0
 8008050:	4623      	mov	r3, r4
 8008052:	d807      	bhi.n	8008064 <memmove+0x20>
 8008054:	1e43      	subs	r3, r0, #1
 8008056:	42a1      	cmp	r1, r4
 8008058:	d008      	beq.n	800806c <memmove+0x28>
 800805a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008062:	e7f8      	b.n	8008056 <memmove+0x12>
 8008064:	4402      	add	r2, r0
 8008066:	4601      	mov	r1, r0
 8008068:	428a      	cmp	r2, r1
 800806a:	d100      	bne.n	800806e <memmove+0x2a>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008076:	e7f7      	b.n	8008068 <memmove+0x24>

08008078 <__malloc_lock>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__malloc_lock+0x8>)
 800807a:	f7ff bfe1 	b.w	8008040 <__retarget_lock_acquire_recursive>
 800807e:	bf00      	nop
 8008080:	20000400 	.word	0x20000400

08008084 <__malloc_unlock>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__malloc_unlock+0x8>)
 8008086:	f7ff bfdc 	b.w	8008042 <__retarget_lock_release_recursive>
 800808a:	bf00      	nop
 800808c:	20000400 	.word	0x20000400

08008090 <_realloc_r>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4680      	mov	r8, r0
 8008096:	4614      	mov	r4, r2
 8008098:	460e      	mov	r6, r1
 800809a:	b921      	cbnz	r1, 80080a6 <_realloc_r+0x16>
 800809c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4611      	mov	r1, r2
 80080a2:	f7fe bfbd 	b.w	8007020 <_malloc_r>
 80080a6:	b92a      	cbnz	r2, 80080b4 <_realloc_r+0x24>
 80080a8:	f7fe ff4e 	bl	8006f48 <_free_r>
 80080ac:	4625      	mov	r5, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	f000 faa0 	bl	80085f8 <_malloc_usable_size_r>
 80080b8:	4284      	cmp	r4, r0
 80080ba:	4607      	mov	r7, r0
 80080bc:	d802      	bhi.n	80080c4 <_realloc_r+0x34>
 80080be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080c2:	d812      	bhi.n	80080ea <_realloc_r+0x5a>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4640      	mov	r0, r8
 80080c8:	f7fe ffaa 	bl	8007020 <_malloc_r>
 80080cc:	4605      	mov	r5, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0ed      	beq.n	80080ae <_realloc_r+0x1e>
 80080d2:	42bc      	cmp	r4, r7
 80080d4:	4622      	mov	r2, r4
 80080d6:	4631      	mov	r1, r6
 80080d8:	bf28      	it	cs
 80080da:	463a      	movcs	r2, r7
 80080dc:	f7fe fa4e 	bl	800657c <memcpy>
 80080e0:	4631      	mov	r1, r6
 80080e2:	4640      	mov	r0, r8
 80080e4:	f7fe ff30 	bl	8006f48 <_free_r>
 80080e8:	e7e1      	b.n	80080ae <_realloc_r+0x1e>
 80080ea:	4635      	mov	r5, r6
 80080ec:	e7df      	b.n	80080ae <_realloc_r+0x1e>

080080ee <__sfputc_r>:
 80080ee:	6893      	ldr	r3, [r2, #8]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	b410      	push	{r4}
 80080f6:	6093      	str	r3, [r2, #8]
 80080f8:	da08      	bge.n	800810c <__sfputc_r+0x1e>
 80080fa:	6994      	ldr	r4, [r2, #24]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	db01      	blt.n	8008104 <__sfputc_r+0x16>
 8008100:	290a      	cmp	r1, #10
 8008102:	d103      	bne.n	800810c <__sfputc_r+0x1e>
 8008104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008108:	f000 b94a 	b.w	80083a0 <__swbuf_r>
 800810c:	6813      	ldr	r3, [r2, #0]
 800810e:	1c58      	adds	r0, r3, #1
 8008110:	6010      	str	r0, [r2, #0]
 8008112:	7019      	strb	r1, [r3, #0]
 8008114:	4608      	mov	r0, r1
 8008116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811a:	4770      	bx	lr

0800811c <__sfputs_r>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	4614      	mov	r4, r2
 8008124:	18d5      	adds	r5, r2, r3
 8008126:	42ac      	cmp	r4, r5
 8008128:	d101      	bne.n	800812e <__sfputs_r+0x12>
 800812a:	2000      	movs	r0, #0
 800812c:	e007      	b.n	800813e <__sfputs_r+0x22>
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	463a      	mov	r2, r7
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ffda 	bl	80080ee <__sfputc_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	d1f3      	bne.n	8008126 <__sfputs_r+0xa>
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008140 <_vfiprintf_r>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	460d      	mov	r5, r1
 8008146:	b09d      	sub	sp, #116	; 0x74
 8008148:	4614      	mov	r4, r2
 800814a:	4698      	mov	r8, r3
 800814c:	4606      	mov	r6, r0
 800814e:	b118      	cbz	r0, 8008158 <_vfiprintf_r+0x18>
 8008150:	6983      	ldr	r3, [r0, #24]
 8008152:	b90b      	cbnz	r3, 8008158 <_vfiprintf_r+0x18>
 8008154:	f7ff fec4 	bl	8007ee0 <__sinit>
 8008158:	4b89      	ldr	r3, [pc, #548]	; (8008380 <_vfiprintf_r+0x240>)
 800815a:	429d      	cmp	r5, r3
 800815c:	d11b      	bne.n	8008196 <_vfiprintf_r+0x56>
 800815e:	6875      	ldr	r5, [r6, #4]
 8008160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008162:	07d9      	lsls	r1, r3, #31
 8008164:	d405      	bmi.n	8008172 <_vfiprintf_r+0x32>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	059a      	lsls	r2, r3, #22
 800816a:	d402      	bmi.n	8008172 <_vfiprintf_r+0x32>
 800816c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800816e:	f7ff ff67 	bl	8008040 <__retarget_lock_acquire_recursive>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	071b      	lsls	r3, r3, #28
 8008176:	d501      	bpl.n	800817c <_vfiprintf_r+0x3c>
 8008178:	692b      	ldr	r3, [r5, #16]
 800817a:	b9eb      	cbnz	r3, 80081b8 <_vfiprintf_r+0x78>
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f000 f960 	bl	8008444 <__swsetup_r>
 8008184:	b1c0      	cbz	r0, 80081b8 <_vfiprintf_r+0x78>
 8008186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008188:	07dc      	lsls	r4, r3, #31
 800818a:	d50e      	bpl.n	80081aa <_vfiprintf_r+0x6a>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	b01d      	add	sp, #116	; 0x74
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	4b7b      	ldr	r3, [pc, #492]	; (8008384 <_vfiprintf_r+0x244>)
 8008198:	429d      	cmp	r5, r3
 800819a:	d101      	bne.n	80081a0 <_vfiprintf_r+0x60>
 800819c:	68b5      	ldr	r5, [r6, #8]
 800819e:	e7df      	b.n	8008160 <_vfiprintf_r+0x20>
 80081a0:	4b79      	ldr	r3, [pc, #484]	; (8008388 <_vfiprintf_r+0x248>)
 80081a2:	429d      	cmp	r5, r3
 80081a4:	bf08      	it	eq
 80081a6:	68f5      	ldreq	r5, [r6, #12]
 80081a8:	e7da      	b.n	8008160 <_vfiprintf_r+0x20>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	0598      	lsls	r0, r3, #22
 80081ae:	d4ed      	bmi.n	800818c <_vfiprintf_r+0x4c>
 80081b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b2:	f7ff ff46 	bl	8008042 <__retarget_lock_release_recursive>
 80081b6:	e7e9      	b.n	800818c <_vfiprintf_r+0x4c>
 80081b8:	2300      	movs	r3, #0
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	2320      	movs	r3, #32
 80081be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c6:	2330      	movs	r3, #48	; 0x30
 80081c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800838c <_vfiprintf_r+0x24c>
 80081cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d0:	f04f 0901 	mov.w	r9, #1
 80081d4:	4623      	mov	r3, r4
 80081d6:	469a      	mov	sl, r3
 80081d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081dc:	b10a      	cbz	r2, 80081e2 <_vfiprintf_r+0xa2>
 80081de:	2a25      	cmp	r2, #37	; 0x25
 80081e0:	d1f9      	bne.n	80081d6 <_vfiprintf_r+0x96>
 80081e2:	ebba 0b04 	subs.w	fp, sl, r4
 80081e6:	d00b      	beq.n	8008200 <_vfiprintf_r+0xc0>
 80081e8:	465b      	mov	r3, fp
 80081ea:	4622      	mov	r2, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ff94 	bl	800811c <__sfputs_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	f000 80aa 	beq.w	800834e <_vfiprintf_r+0x20e>
 80081fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081fc:	445a      	add	r2, fp
 80081fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008200:	f89a 3000 	ldrb.w	r3, [sl]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80a2 	beq.w	800834e <_vfiprintf_r+0x20e>
 800820a:	2300      	movs	r3, #0
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008214:	f10a 0a01 	add.w	sl, sl, #1
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	9307      	str	r3, [sp, #28]
 800821c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008220:	931a      	str	r3, [sp, #104]	; 0x68
 8008222:	4654      	mov	r4, sl
 8008224:	2205      	movs	r2, #5
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	4858      	ldr	r0, [pc, #352]	; (800838c <_vfiprintf_r+0x24c>)
 800822c:	f7f7 fff0 	bl	8000210 <memchr>
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	b9d8      	cbnz	r0, 800826c <_vfiprintf_r+0x12c>
 8008234:	06d1      	lsls	r1, r2, #27
 8008236:	bf44      	itt	mi
 8008238:	2320      	movmi	r3, #32
 800823a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823e:	0713      	lsls	r3, r2, #28
 8008240:	bf44      	itt	mi
 8008242:	232b      	movmi	r3, #43	; 0x2b
 8008244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008248:	f89a 3000 	ldrb.w	r3, [sl]
 800824c:	2b2a      	cmp	r3, #42	; 0x2a
 800824e:	d015      	beq.n	800827c <_vfiprintf_r+0x13c>
 8008250:	9a07      	ldr	r2, [sp, #28]
 8008252:	4654      	mov	r4, sl
 8008254:	2000      	movs	r0, #0
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4621      	mov	r1, r4
 800825c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008260:	3b30      	subs	r3, #48	; 0x30
 8008262:	2b09      	cmp	r3, #9
 8008264:	d94e      	bls.n	8008304 <_vfiprintf_r+0x1c4>
 8008266:	b1b0      	cbz	r0, 8008296 <_vfiprintf_r+0x156>
 8008268:	9207      	str	r2, [sp, #28]
 800826a:	e014      	b.n	8008296 <_vfiprintf_r+0x156>
 800826c:	eba0 0308 	sub.w	r3, r0, r8
 8008270:	fa09 f303 	lsl.w	r3, r9, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	9304      	str	r3, [sp, #16]
 8008278:	46a2      	mov	sl, r4
 800827a:	e7d2      	b.n	8008222 <_vfiprintf_r+0xe2>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1d19      	adds	r1, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	9103      	str	r1, [sp, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfbb      	ittet	lt
 8008288:	425b      	neglt	r3, r3
 800828a:	f042 0202 	orrlt.w	r2, r2, #2
 800828e:	9307      	strge	r3, [sp, #28]
 8008290:	9307      	strlt	r3, [sp, #28]
 8008292:	bfb8      	it	lt
 8008294:	9204      	strlt	r2, [sp, #16]
 8008296:	7823      	ldrb	r3, [r4, #0]
 8008298:	2b2e      	cmp	r3, #46	; 0x2e
 800829a:	d10c      	bne.n	80082b6 <_vfiprintf_r+0x176>
 800829c:	7863      	ldrb	r3, [r4, #1]
 800829e:	2b2a      	cmp	r3, #42	; 0x2a
 80082a0:	d135      	bne.n	800830e <_vfiprintf_r+0x1ce>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	1d1a      	adds	r2, r3, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	9203      	str	r2, [sp, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfb8      	it	lt
 80082ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b2:	3402      	adds	r4, #2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800839c <_vfiprintf_r+0x25c>
 80082ba:	7821      	ldrb	r1, [r4, #0]
 80082bc:	2203      	movs	r2, #3
 80082be:	4650      	mov	r0, sl
 80082c0:	f7f7 ffa6 	bl	8000210 <memchr>
 80082c4:	b140      	cbz	r0, 80082d8 <_vfiprintf_r+0x198>
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	eba0 000a 	sub.w	r0, r0, sl
 80082cc:	fa03 f000 	lsl.w	r0, r3, r0
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	4303      	orrs	r3, r0
 80082d4:	3401      	adds	r4, #1
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	482c      	ldr	r0, [pc, #176]	; (8008390 <_vfiprintf_r+0x250>)
 80082de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e2:	2206      	movs	r2, #6
 80082e4:	f7f7 ff94 	bl	8000210 <memchr>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d03f      	beq.n	800836c <_vfiprintf_r+0x22c>
 80082ec:	4b29      	ldr	r3, [pc, #164]	; (8008394 <_vfiprintf_r+0x254>)
 80082ee:	bb1b      	cbnz	r3, 8008338 <_vfiprintf_r+0x1f8>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	3307      	adds	r3, #7
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	3308      	adds	r3, #8
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	443b      	add	r3, r7
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	e767      	b.n	80081d4 <_vfiprintf_r+0x94>
 8008304:	fb0c 3202 	mla	r2, ip, r2, r3
 8008308:	460c      	mov	r4, r1
 800830a:	2001      	movs	r0, #1
 800830c:	e7a5      	b.n	800825a <_vfiprintf_r+0x11a>
 800830e:	2300      	movs	r3, #0
 8008310:	3401      	adds	r4, #1
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	4619      	mov	r1, r3
 8008316:	f04f 0c0a 	mov.w	ip, #10
 800831a:	4620      	mov	r0, r4
 800831c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008320:	3a30      	subs	r2, #48	; 0x30
 8008322:	2a09      	cmp	r2, #9
 8008324:	d903      	bls.n	800832e <_vfiprintf_r+0x1ee>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0c5      	beq.n	80082b6 <_vfiprintf_r+0x176>
 800832a:	9105      	str	r1, [sp, #20]
 800832c:	e7c3      	b.n	80082b6 <_vfiprintf_r+0x176>
 800832e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008332:	4604      	mov	r4, r0
 8008334:	2301      	movs	r3, #1
 8008336:	e7f0      	b.n	800831a <_vfiprintf_r+0x1da>
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	462a      	mov	r2, r5
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <_vfiprintf_r+0x258>)
 8008340:	a904      	add	r1, sp, #16
 8008342:	4630      	mov	r0, r6
 8008344:	f7fb f9bc 	bl	80036c0 <_printf_float>
 8008348:	4607      	mov	r7, r0
 800834a:	1c78      	adds	r0, r7, #1
 800834c:	d1d6      	bne.n	80082fc <_vfiprintf_r+0x1bc>
 800834e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008350:	07d9      	lsls	r1, r3, #31
 8008352:	d405      	bmi.n	8008360 <_vfiprintf_r+0x220>
 8008354:	89ab      	ldrh	r3, [r5, #12]
 8008356:	059a      	lsls	r2, r3, #22
 8008358:	d402      	bmi.n	8008360 <_vfiprintf_r+0x220>
 800835a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835c:	f7ff fe71 	bl	8008042 <__retarget_lock_release_recursive>
 8008360:	89ab      	ldrh	r3, [r5, #12]
 8008362:	065b      	lsls	r3, r3, #25
 8008364:	f53f af12 	bmi.w	800818c <_vfiprintf_r+0x4c>
 8008368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836a:	e711      	b.n	8008190 <_vfiprintf_r+0x50>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <_vfiprintf_r+0x258>)
 8008374:	a904      	add	r1, sp, #16
 8008376:	4630      	mov	r0, r6
 8008378:	f7fb fc46 	bl	8003c08 <_printf_i>
 800837c:	e7e4      	b.n	8008348 <_vfiprintf_r+0x208>
 800837e:	bf00      	nop
 8008380:	0800917c 	.word	0x0800917c
 8008384:	0800919c 	.word	0x0800919c
 8008388:	0800915c 	.word	0x0800915c
 800838c:	080090f4 	.word	0x080090f4
 8008390:	080090fe 	.word	0x080090fe
 8008394:	080036c1 	.word	0x080036c1
 8008398:	0800811d 	.word	0x0800811d
 800839c:	080090fa 	.word	0x080090fa

080083a0 <__swbuf_r>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	460e      	mov	r6, r1
 80083a4:	4614      	mov	r4, r2
 80083a6:	4605      	mov	r5, r0
 80083a8:	b118      	cbz	r0, 80083b2 <__swbuf_r+0x12>
 80083aa:	6983      	ldr	r3, [r0, #24]
 80083ac:	b90b      	cbnz	r3, 80083b2 <__swbuf_r+0x12>
 80083ae:	f7ff fd97 	bl	8007ee0 <__sinit>
 80083b2:	4b21      	ldr	r3, [pc, #132]	; (8008438 <__swbuf_r+0x98>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d12b      	bne.n	8008410 <__swbuf_r+0x70>
 80083b8:	686c      	ldr	r4, [r5, #4]
 80083ba:	69a3      	ldr	r3, [r4, #24]
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	071a      	lsls	r2, r3, #28
 80083c2:	d52f      	bpl.n	8008424 <__swbuf_r+0x84>
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	b36b      	cbz	r3, 8008424 <__swbuf_r+0x84>
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	6820      	ldr	r0, [r4, #0]
 80083cc:	1ac0      	subs	r0, r0, r3
 80083ce:	6963      	ldr	r3, [r4, #20]
 80083d0:	b2f6      	uxtb	r6, r6
 80083d2:	4283      	cmp	r3, r0
 80083d4:	4637      	mov	r7, r6
 80083d6:	dc04      	bgt.n	80083e2 <__swbuf_r+0x42>
 80083d8:	4621      	mov	r1, r4
 80083da:	4628      	mov	r0, r5
 80083dc:	f7ff fcec 	bl	8007db8 <_fflush_r>
 80083e0:	bb30      	cbnz	r0, 8008430 <__swbuf_r+0x90>
 80083e2:	68a3      	ldr	r3, [r4, #8]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	60a3      	str	r3, [r4, #8]
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	6022      	str	r2, [r4, #0]
 80083ee:	701e      	strb	r6, [r3, #0]
 80083f0:	6963      	ldr	r3, [r4, #20]
 80083f2:	3001      	adds	r0, #1
 80083f4:	4283      	cmp	r3, r0
 80083f6:	d004      	beq.n	8008402 <__swbuf_r+0x62>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	07db      	lsls	r3, r3, #31
 80083fc:	d506      	bpl.n	800840c <__swbuf_r+0x6c>
 80083fe:	2e0a      	cmp	r6, #10
 8008400:	d104      	bne.n	800840c <__swbuf_r+0x6c>
 8008402:	4621      	mov	r1, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f7ff fcd7 	bl	8007db8 <_fflush_r>
 800840a:	b988      	cbnz	r0, 8008430 <__swbuf_r+0x90>
 800840c:	4638      	mov	r0, r7
 800840e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <__swbuf_r+0x9c>)
 8008412:	429c      	cmp	r4, r3
 8008414:	d101      	bne.n	800841a <__swbuf_r+0x7a>
 8008416:	68ac      	ldr	r4, [r5, #8]
 8008418:	e7cf      	b.n	80083ba <__swbuf_r+0x1a>
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <__swbuf_r+0xa0>)
 800841c:	429c      	cmp	r4, r3
 800841e:	bf08      	it	eq
 8008420:	68ec      	ldreq	r4, [r5, #12]
 8008422:	e7ca      	b.n	80083ba <__swbuf_r+0x1a>
 8008424:	4621      	mov	r1, r4
 8008426:	4628      	mov	r0, r5
 8008428:	f000 f80c 	bl	8008444 <__swsetup_r>
 800842c:	2800      	cmp	r0, #0
 800842e:	d0cb      	beq.n	80083c8 <__swbuf_r+0x28>
 8008430:	f04f 37ff 	mov.w	r7, #4294967295
 8008434:	e7ea      	b.n	800840c <__swbuf_r+0x6c>
 8008436:	bf00      	nop
 8008438:	0800917c 	.word	0x0800917c
 800843c:	0800919c 	.word	0x0800919c
 8008440:	0800915c 	.word	0x0800915c

08008444 <__swsetup_r>:
 8008444:	4b32      	ldr	r3, [pc, #200]	; (8008510 <__swsetup_r+0xcc>)
 8008446:	b570      	push	{r4, r5, r6, lr}
 8008448:	681d      	ldr	r5, [r3, #0]
 800844a:	4606      	mov	r6, r0
 800844c:	460c      	mov	r4, r1
 800844e:	b125      	cbz	r5, 800845a <__swsetup_r+0x16>
 8008450:	69ab      	ldr	r3, [r5, #24]
 8008452:	b913      	cbnz	r3, 800845a <__swsetup_r+0x16>
 8008454:	4628      	mov	r0, r5
 8008456:	f7ff fd43 	bl	8007ee0 <__sinit>
 800845a:	4b2e      	ldr	r3, [pc, #184]	; (8008514 <__swsetup_r+0xd0>)
 800845c:	429c      	cmp	r4, r3
 800845e:	d10f      	bne.n	8008480 <__swsetup_r+0x3c>
 8008460:	686c      	ldr	r4, [r5, #4]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008468:	0719      	lsls	r1, r3, #28
 800846a:	d42c      	bmi.n	80084c6 <__swsetup_r+0x82>
 800846c:	06dd      	lsls	r5, r3, #27
 800846e:	d411      	bmi.n	8008494 <__swsetup_r+0x50>
 8008470:	2309      	movs	r3, #9
 8008472:	6033      	str	r3, [r6, #0]
 8008474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	e03e      	b.n	80084fe <__swsetup_r+0xba>
 8008480:	4b25      	ldr	r3, [pc, #148]	; (8008518 <__swsetup_r+0xd4>)
 8008482:	429c      	cmp	r4, r3
 8008484:	d101      	bne.n	800848a <__swsetup_r+0x46>
 8008486:	68ac      	ldr	r4, [r5, #8]
 8008488:	e7eb      	b.n	8008462 <__swsetup_r+0x1e>
 800848a:	4b24      	ldr	r3, [pc, #144]	; (800851c <__swsetup_r+0xd8>)
 800848c:	429c      	cmp	r4, r3
 800848e:	bf08      	it	eq
 8008490:	68ec      	ldreq	r4, [r5, #12]
 8008492:	e7e6      	b.n	8008462 <__swsetup_r+0x1e>
 8008494:	0758      	lsls	r0, r3, #29
 8008496:	d512      	bpl.n	80084be <__swsetup_r+0x7a>
 8008498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800849a:	b141      	cbz	r1, 80084ae <__swsetup_r+0x6a>
 800849c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084a0:	4299      	cmp	r1, r3
 80084a2:	d002      	beq.n	80084aa <__swsetup_r+0x66>
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7fe fd4f 	bl	8006f48 <_free_r>
 80084aa:	2300      	movs	r3, #0
 80084ac:	6363      	str	r3, [r4, #52]	; 0x34
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084b4:	81a3      	strh	r3, [r4, #12]
 80084b6:	2300      	movs	r3, #0
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f043 0308 	orr.w	r3, r3, #8
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	b94b      	cbnz	r3, 80084de <__swsetup_r+0x9a>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d4:	d003      	beq.n	80084de <__swsetup_r+0x9a>
 80084d6:	4621      	mov	r1, r4
 80084d8:	4630      	mov	r0, r6
 80084da:	f000 f84d 	bl	8008578 <__smakebuf_r>
 80084de:	89a0      	ldrh	r0, [r4, #12]
 80084e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084e4:	f010 0301 	ands.w	r3, r0, #1
 80084e8:	d00a      	beq.n	8008500 <__swsetup_r+0xbc>
 80084ea:	2300      	movs	r3, #0
 80084ec:	60a3      	str	r3, [r4, #8]
 80084ee:	6963      	ldr	r3, [r4, #20]
 80084f0:	425b      	negs	r3, r3
 80084f2:	61a3      	str	r3, [r4, #24]
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	b943      	cbnz	r3, 800850a <__swsetup_r+0xc6>
 80084f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084fc:	d1ba      	bne.n	8008474 <__swsetup_r+0x30>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	0781      	lsls	r1, r0, #30
 8008502:	bf58      	it	pl
 8008504:	6963      	ldrpl	r3, [r4, #20]
 8008506:	60a3      	str	r3, [r4, #8]
 8008508:	e7f4      	b.n	80084f4 <__swsetup_r+0xb0>
 800850a:	2000      	movs	r0, #0
 800850c:	e7f7      	b.n	80084fe <__swsetup_r+0xba>
 800850e:	bf00      	nop
 8008510:	20000004 	.word	0x20000004
 8008514:	0800917c 	.word	0x0800917c
 8008518:	0800919c 	.word	0x0800919c
 800851c:	0800915c 	.word	0x0800915c

08008520 <abort>:
 8008520:	b508      	push	{r3, lr}
 8008522:	2006      	movs	r0, #6
 8008524:	f000 f898 	bl	8008658 <raise>
 8008528:	2001      	movs	r0, #1
 800852a:	f7f9 fa9d 	bl	8001a68 <_exit>

0800852e <__swhatbuf_r>:
 800852e:	b570      	push	{r4, r5, r6, lr}
 8008530:	460e      	mov	r6, r1
 8008532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008536:	2900      	cmp	r1, #0
 8008538:	b096      	sub	sp, #88	; 0x58
 800853a:	4614      	mov	r4, r2
 800853c:	461d      	mov	r5, r3
 800853e:	da08      	bge.n	8008552 <__swhatbuf_r+0x24>
 8008540:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	602a      	str	r2, [r5, #0]
 8008548:	061a      	lsls	r2, r3, #24
 800854a:	d410      	bmi.n	800856e <__swhatbuf_r+0x40>
 800854c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008550:	e00e      	b.n	8008570 <__swhatbuf_r+0x42>
 8008552:	466a      	mov	r2, sp
 8008554:	f000 f89c 	bl	8008690 <_fstat_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	dbf1      	blt.n	8008540 <__swhatbuf_r+0x12>
 800855c:	9a01      	ldr	r2, [sp, #4]
 800855e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008566:	425a      	negs	r2, r3
 8008568:	415a      	adcs	r2, r3
 800856a:	602a      	str	r2, [r5, #0]
 800856c:	e7ee      	b.n	800854c <__swhatbuf_r+0x1e>
 800856e:	2340      	movs	r3, #64	; 0x40
 8008570:	2000      	movs	r0, #0
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	b016      	add	sp, #88	; 0x58
 8008576:	bd70      	pop	{r4, r5, r6, pc}

08008578 <__smakebuf_r>:
 8008578:	898b      	ldrh	r3, [r1, #12]
 800857a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800857c:	079d      	lsls	r5, r3, #30
 800857e:	4606      	mov	r6, r0
 8008580:	460c      	mov	r4, r1
 8008582:	d507      	bpl.n	8008594 <__smakebuf_r+0x1c>
 8008584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	6123      	str	r3, [r4, #16]
 800858c:	2301      	movs	r3, #1
 800858e:	6163      	str	r3, [r4, #20]
 8008590:	b002      	add	sp, #8
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	ab01      	add	r3, sp, #4
 8008596:	466a      	mov	r2, sp
 8008598:	f7ff ffc9 	bl	800852e <__swhatbuf_r>
 800859c:	9900      	ldr	r1, [sp, #0]
 800859e:	4605      	mov	r5, r0
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7fe fd3d 	bl	8007020 <_malloc_r>
 80085a6:	b948      	cbnz	r0, 80085bc <__smakebuf_r+0x44>
 80085a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ac:	059a      	lsls	r2, r3, #22
 80085ae:	d4ef      	bmi.n	8008590 <__smakebuf_r+0x18>
 80085b0:	f023 0303 	bic.w	r3, r3, #3
 80085b4:	f043 0302 	orr.w	r3, r3, #2
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	e7e3      	b.n	8008584 <__smakebuf_r+0xc>
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <__smakebuf_r+0x7c>)
 80085be:	62b3      	str	r3, [r6, #40]	; 0x28
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	9b00      	ldr	r3, [sp, #0]
 80085cc:	6163      	str	r3, [r4, #20]
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	6120      	str	r0, [r4, #16]
 80085d2:	b15b      	cbz	r3, 80085ec <__smakebuf_r+0x74>
 80085d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d8:	4630      	mov	r0, r6
 80085da:	f000 f86b 	bl	80086b4 <_isatty_r>
 80085de:	b128      	cbz	r0, 80085ec <__smakebuf_r+0x74>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	89a0      	ldrh	r0, [r4, #12]
 80085ee:	4305      	orrs	r5, r0
 80085f0:	81a5      	strh	r5, [r4, #12]
 80085f2:	e7cd      	b.n	8008590 <__smakebuf_r+0x18>
 80085f4:	08007e79 	.word	0x08007e79

080085f8 <_malloc_usable_size_r>:
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f18      	subs	r0, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbc      	itt	lt
 8008602:	580b      	ldrlt	r3, [r1, r0]
 8008604:	18c0      	addlt	r0, r0, r3
 8008606:	4770      	bx	lr

08008608 <_raise_r>:
 8008608:	291f      	cmp	r1, #31
 800860a:	b538      	push	{r3, r4, r5, lr}
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	d904      	bls.n	800861c <_raise_r+0x14>
 8008612:	2316      	movs	r3, #22
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	f04f 30ff 	mov.w	r0, #4294967295
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800861e:	b112      	cbz	r2, 8008626 <_raise_r+0x1e>
 8008620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008624:	b94b      	cbnz	r3, 800863a <_raise_r+0x32>
 8008626:	4620      	mov	r0, r4
 8008628:	f000 f830 	bl	800868c <_getpid_r>
 800862c:	462a      	mov	r2, r5
 800862e:	4601      	mov	r1, r0
 8008630:	4620      	mov	r0, r4
 8008632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008636:	f000 b817 	b.w	8008668 <_kill_r>
 800863a:	2b01      	cmp	r3, #1
 800863c:	d00a      	beq.n	8008654 <_raise_r+0x4c>
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	d103      	bne.n	800864a <_raise_r+0x42>
 8008642:	2316      	movs	r3, #22
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	2001      	movs	r0, #1
 8008648:	e7e7      	b.n	800861a <_raise_r+0x12>
 800864a:	2400      	movs	r4, #0
 800864c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008650:	4628      	mov	r0, r5
 8008652:	4798      	blx	r3
 8008654:	2000      	movs	r0, #0
 8008656:	e7e0      	b.n	800861a <_raise_r+0x12>

08008658 <raise>:
 8008658:	4b02      	ldr	r3, [pc, #8]	; (8008664 <raise+0xc>)
 800865a:	4601      	mov	r1, r0
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	f7ff bfd3 	b.w	8008608 <_raise_r>
 8008662:	bf00      	nop
 8008664:	20000004 	.word	0x20000004

08008668 <_kill_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d07      	ldr	r5, [pc, #28]	; (8008688 <_kill_r+0x20>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	f7f9 f9e7 	bl	8001a48 <_kill>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d102      	bne.n	8008684 <_kill_r+0x1c>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	b103      	cbz	r3, 8008684 <_kill_r+0x1c>
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	bd38      	pop	{r3, r4, r5, pc}
 8008686:	bf00      	nop
 8008688:	200003fc 	.word	0x200003fc

0800868c <_getpid_r>:
 800868c:	f7f9 b9d4 	b.w	8001a38 <_getpid>

08008690 <_fstat_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_fstat_r+0x20>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	4611      	mov	r1, r2
 800869c:	602b      	str	r3, [r5, #0]
 800869e:	f7f9 fa32 	bl	8001b06 <_fstat>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d102      	bne.n	80086ac <_fstat_r+0x1c>
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	b103      	cbz	r3, 80086ac <_fstat_r+0x1c>
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	bf00      	nop
 80086b0:	200003fc 	.word	0x200003fc

080086b4 <_isatty_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	; (80086d0 <_isatty_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7f9 fa31 	bl	8001b26 <_isatty>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_isatty_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_isatty_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	200003fc 	.word	0x200003fc

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
