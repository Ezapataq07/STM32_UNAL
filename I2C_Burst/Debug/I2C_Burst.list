
I2C_Burst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001ebc  08001ebc  00011ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f24  08001f24  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001f24  08001f24  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f24  08001f24  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f24  08001f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200000a8  08001fd0  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08001fd0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e4c  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b9d  00000000  00000000  00022f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00023ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f8  00000000  00000000  00023d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f95a  00000000  00000000  00023f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000033f2  00000000  00000000  0003387a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000552a2  00000000  00000000  00036c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008bf0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be0  00000000  00000000  0008bf60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ea4 	.word	0x08001ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08001ea4 	.word	0x08001ea4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
void initSystem(void);

/**
 * Función principal del programa
 */
int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	// Se inicializa la configuración
	initSystem();
 8000286:	f000 f8b5 	bl	80003f4 <initSystem>
	writeMsg(&handlerCommTerminal, bufferData);
 800028a:	4951      	ldr	r1, [pc, #324]	; (80003d0 <main+0x150>)
 800028c:	4851      	ldr	r0, [pc, #324]	; (80003d4 <main+0x154>)
 800028e:	f001 f8af 	bl	80013f0 <writeMsg>

	/* Ciclo principal del programa */
	while(1){
		// Hacemos un "eco" con el valor que nos llega por el serial
		if (rxData != '\0'){
 8000292:	4b51      	ldr	r3, [pc, #324]	; (80003d8 <main+0x158>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x12>
			writeChar(&handlerCommTerminal, rxData);
 800029a:	4b4f      	ldr	r3, [pc, #316]	; (80003d8 <main+0x158>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	484c      	ldr	r0, [pc, #304]	; (80003d4 <main+0x154>)
 80002a2:	f001 f877 	bl	8001394 <writeChar>

			if (rxData == 'd'){
 80002a6:	4b4c      	ldr	r3, [pc, #304]	; (80003d8 <main+0x158>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b64      	cmp	r3, #100	; 0x64
 80002ac:	d116      	bne.n	80002dc <main+0x5c>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, WHO_AM_I);
 80002ae:	2175      	movs	r1, #117	; 0x75
 80002b0:	484a      	ldr	r0, [pc, #296]	; (80003dc <main+0x15c>)
 80002b2:	f000 fda5 	bl	8000e00 <I2C_readByte>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b49      	ldr	r3, [pc, #292]	; (80003e0 <main+0x160>)
 80002bc:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002be:	4b48      	ldr	r3, [pc, #288]	; (80003e0 <main+0x160>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4947      	ldr	r1, [pc, #284]	; (80003e4 <main+0x164>)
 80002c6:	4842      	ldr	r0, [pc, #264]	; (80003d0 <main+0x150>)
 80002c8:	f001 f980 	bl	80015cc <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80002cc:	4940      	ldr	r1, [pc, #256]	; (80003d0 <main+0x150>)
 80002ce:	4841      	ldr	r0, [pc, #260]	; (80003d4 <main+0x154>)
 80002d0:	f001 f88e 	bl	80013f0 <writeMsg>
				rxData = '\0';
 80002d4:	4b40      	ldr	r3, [pc, #256]	; (80003d8 <main+0x158>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e7da      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'p'){
 80002dc:	4b3e      	ldr	r3, [pc, #248]	; (80003d8 <main+0x158>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b70      	cmp	r3, #112	; 0x70
 80002e2:	d116      	bne.n	8000312 <main+0x92>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, PWR_CTL);
 80002e4:	216b      	movs	r1, #107	; 0x6b
 80002e6:	483d      	ldr	r0, [pc, #244]	; (80003dc <main+0x15c>)
 80002e8:	f000 fd8a 	bl	8000e00 <I2C_readByte>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b3b      	ldr	r3, [pc, #236]	; (80003e0 <main+0x160>)
 80002f2:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002f4:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <main+0x160>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	493a      	ldr	r1, [pc, #232]	; (80003e4 <main+0x164>)
 80002fc:	4834      	ldr	r0, [pc, #208]	; (80003d0 <main+0x150>)
 80002fe:	f001 f965 	bl	80015cc <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000302:	4933      	ldr	r1, [pc, #204]	; (80003d0 <main+0x150>)
 8000304:	4833      	ldr	r0, [pc, #204]	; (80003d4 <main+0x154>)
 8000306:	f001 f873 	bl	80013f0 <writeMsg>
				rxData = '\0';
 800030a:	4b33      	ldr	r3, [pc, #204]	; (80003d8 <main+0x158>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e7bf      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'r'){
 8000312:	4b31      	ldr	r3, [pc, #196]	; (80003d8 <main+0x158>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b72      	cmp	r3, #114	; 0x72
 8000318:	d108      	bne.n	800032c <main+0xac>
				I2C_writeByte(&handlerAccelerometer, PWR_CTL, 0x00);
 800031a:	2200      	movs	r2, #0
 800031c:	216b      	movs	r1, #107	; 0x6b
 800031e:	482f      	ldr	r0, [pc, #188]	; (80003dc <main+0x15c>)
 8000320:	f000 fdd8 	bl	8000ed4 <I2C_writeByte>
				rxData = '\0';
 8000324:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <main+0x158>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e7b2      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'x'){
 800032c:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <main+0x158>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b78      	cmp	r3, #120	; 0x78
 8000332:	d122      	bne.n	800037a <main+0xfa>
				bufferBurstData = I2C_readBurstBytes(&handlerAccelerometer, ACCEL_XOUT_H, 2);
 8000334:	2202      	movs	r2, #2
 8000336:	213b      	movs	r1, #59	; 0x3b
 8000338:	4828      	ldr	r0, [pc, #160]	; (80003dc <main+0x15c>)
 800033a:	f000 fd8d 	bl	8000e58 <I2C_readBurstBytes>
 800033e:	4603      	mov	r3, r0
 8000340:	4a29      	ldr	r2, [pc, #164]	; (80003e8 <main+0x168>)
 8000342:	6013      	str	r3, [r2, #0]
				int16_t AccelX = bufferBurstData[0] << 8 | bufferBurstData[1];
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <main+0x168>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	021b      	lsls	r3, r3, #8
 800034c:	b21a      	sxth	r2, r3
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <main+0x168>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b21b      	sxth	r3, r3
 8000358:	4313      	orrs	r3, r2
 800035a:	80bb      	strh	r3, [r7, #4]
				sprintf(bufferData,"AccelX = %d \n", (int) AccelX);
 800035c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000360:	461a      	mov	r2, r3
 8000362:	4922      	ldr	r1, [pc, #136]	; (80003ec <main+0x16c>)
 8000364:	481a      	ldr	r0, [pc, #104]	; (80003d0 <main+0x150>)
 8000366:	f001 f931 	bl	80015cc <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 800036a:	4919      	ldr	r1, [pc, #100]	; (80003d0 <main+0x150>)
 800036c:	4819      	ldr	r0, [pc, #100]	; (80003d4 <main+0x154>)
 800036e:	f001 f83f 	bl	80013f0 <writeMsg>
				rxData = '\0';
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <main+0x158>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	e78b      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'y'){
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <main+0x158>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b79      	cmp	r3, #121	; 0x79
 8000380:	d122      	bne.n	80003c8 <main+0x148>
				bufferBurstData = I2C_readBurstBytes(&handlerAccelerometer, ACCEL_YOUT_H, 2);
 8000382:	2202      	movs	r2, #2
 8000384:	213d      	movs	r1, #61	; 0x3d
 8000386:	4815      	ldr	r0, [pc, #84]	; (80003dc <main+0x15c>)
 8000388:	f000 fd66 	bl	8000e58 <I2C_readBurstBytes>
 800038c:	4603      	mov	r3, r0
 800038e:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <main+0x168>)
 8000390:	6013      	str	r3, [r2, #0]
				int16_t AccelY = bufferBurstData[0] << 8 | bufferBurstData[1];
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <main+0x168>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	021b      	lsls	r3, r3, #8
 800039a:	b21a      	sxth	r2, r3
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <main+0x168>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	3301      	adds	r3, #1
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b21b      	sxth	r3, r3
 80003a6:	4313      	orrs	r3, r2
 80003a8:	80fb      	strh	r3, [r7, #6]
				sprintf(bufferData,"AccelY = %d \n", (int) AccelY);
 80003aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ae:	461a      	mov	r2, r3
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <main+0x170>)
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <main+0x150>)
 80003b4:	f001 f90a 	bl	80015cc <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80003b8:	4905      	ldr	r1, [pc, #20]	; (80003d0 <main+0x150>)
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <main+0x154>)
 80003bc:	f001 f818 	bl	80013f0 <writeMsg>
				rxData = '\0';
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <main+0x158>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	e764      	b.n	8000292 <main+0x12>
			}
			else {
				rxData = '\0';
 80003c8:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <main+0x158>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 80003ce:	e760      	b.n	8000292 <main+0x12>
 80003d0:	20000000 	.word	0x20000000
 80003d4:	200000f8 	.word	0x200000f8
 80003d8:	20000184 	.word	0x20000184
 80003dc:	200001a0 	.word	0x200001a0
 80003e0:	200001a8 	.word	0x200001a8
 80003e4:	08001ebc 	.word	0x08001ebc
 80003e8:	200001ac 	.word	0x200001ac
 80003ec:	08001ed0 	.word	0x08001ed0
 80003f0:	08001ee0 	.word	0x08001ee0

080003f4 <initSystem>:
		}
	}
	return 0;
}

void initSystem(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 80003f8:	4b55      	ldr	r3, [pc, #340]	; (8000550 <initSystem+0x15c>)
 80003fa:	4a56      	ldr	r2, [pc, #344]	; (8000554 <initSystem+0x160>)
 80003fc:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80003fe:	4b54      	ldr	r3, [pc, #336]	; (8000550 <initSystem+0x15c>)
 8000400:	2205      	movs	r2, #5
 8000402:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000404:	4b52      	ldr	r3, [pc, #328]	; (8000550 <initSystem+0x15c>)
 8000406:	2201      	movs	r2, #1
 8000408:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800040a:	4b51      	ldr	r3, [pc, #324]	; (8000550 <initSystem+0x15c>)
 800040c:	2200      	movs	r2, #0
 800040e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000410:	4b4f      	ldr	r3, [pc, #316]	; (8000550 <initSystem+0x15c>)
 8000412:	2201      	movs	r2, #1
 8000414:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8000416:	484e      	ldr	r0, [pc, #312]	; (8000550 <initSystem+0x15c>)
 8000418:	f000 fa48 	bl	80008ac <GPIO_Config>

	/* Configurando los pines sobre los que funciona el USART */
	handlerPinTX.pGPIOx								= GPIOA;
 800041c:	4b4e      	ldr	r3, [pc, #312]	; (8000558 <initSystem+0x164>)
 800041e:	4a4d      	ldr	r2, [pc, #308]	; (8000554 <initSystem+0x160>)
 8000420:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 8000422:	4b4d      	ldr	r3, [pc, #308]	; (8000558 <initSystem+0x164>)
 8000424:	2202      	movs	r2, #2
 8000426:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000428:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <initSystem+0x164>)
 800042a:	2202      	movs	r2, #2
 800042c:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800042e:	4b4a      	ldr	r3, [pc, #296]	; (8000558 <initSystem+0x164>)
 8000430:	2200      	movs	r2, #0
 8000432:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000434:	4b48      	ldr	r3, [pc, #288]	; (8000558 <initSystem+0x164>)
 8000436:	2200      	movs	r2, #0
 8000438:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 800043a:	4b47      	ldr	r3, [pc, #284]	; (8000558 <initSystem+0x164>)
 800043c:	2202      	movs	r2, #2
 800043e:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000440:	4b45      	ldr	r3, [pc, #276]	; (8000558 <initSystem+0x164>)
 8000442:	2207      	movs	r2, #7
 8000444:	725a      	strb	r2, [r3, #9]

	// Llamamos a la función config, para que se encargue de cargar las configuración en los registros adecuados
	GPIO_Config(&handlerPinTX);
 8000446:	4844      	ldr	r0, [pc, #272]	; (8000558 <initSystem+0x164>)
 8000448:	f000 fa30 	bl	80008ac <GPIO_Config>


	/* Configurando los pines sobre los que funciona el USART */
	handlerPinRX.pGPIOx								= GPIOA;
 800044c:	4b43      	ldr	r3, [pc, #268]	; (800055c <initSystem+0x168>)
 800044e:	4a41      	ldr	r2, [pc, #260]	; (8000554 <initSystem+0x160>)
 8000450:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000452:	4b42      	ldr	r3, [pc, #264]	; (800055c <initSystem+0x168>)
 8000454:	2203      	movs	r2, #3
 8000456:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000458:	4b40      	ldr	r3, [pc, #256]	; (800055c <initSystem+0x168>)
 800045a:	2202      	movs	r2, #2
 800045c:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800045e:	4b3f      	ldr	r3, [pc, #252]	; (800055c <initSystem+0x168>)
 8000460:	2200      	movs	r2, #0
 8000462:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000464:	4b3d      	ldr	r3, [pc, #244]	; (800055c <initSystem+0x168>)
 8000466:	2200      	movs	r2, #0
 8000468:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 800046a:	4b3c      	ldr	r3, [pc, #240]	; (800055c <initSystem+0x168>)
 800046c:	2202      	movs	r2, #2
 800046e:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000470:	4b3a      	ldr	r3, [pc, #232]	; (800055c <initSystem+0x168>)
 8000472:	2207      	movs	r2, #7
 8000474:	725a      	strb	r2, [r3, #9]

	// Llamamos a la función config, para que se encargue de cargar las configuración en los registros adecuados
	GPIO_Config(&handlerPinRX);
 8000476:	4839      	ldr	r0, [pc, #228]	; (800055c <initSystem+0x168>)
 8000478:	f000 fa18 	bl	80008ac <GPIO_Config>

	/* Configuramos la comunicación serial */
	handlerCommTerminal.ptrUSARTx						= USART2;
 800047c:	4b38      	ldr	r3, [pc, #224]	; (8000560 <initSystem+0x16c>)
 800047e:	4a39      	ldr	r2, [pc, #228]	; (8000564 <initSystem+0x170>)
 8000480:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 8000482:	4b37      	ldr	r3, [pc, #220]	; (8000560 <initSystem+0x16c>)
 8000484:	2200      	movs	r2, #0
 8000486:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity		= USART_PARITY_NONE;
 8000488:	4b35      	ldr	r3, [pc, #212]	; (8000560 <initSystem+0x16c>)
 800048a:	2200      	movs	r2, #0
 800048c:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 800048e:	4b34      	ldr	r3, [pc, #208]	; (8000560 <initSystem+0x16c>)
 8000490:	2200      	movs	r2, #0
 8000492:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8000494:	4b32      	ldr	r3, [pc, #200]	; (8000560 <initSystem+0x16c>)
 8000496:	2202      	movs	r2, #2
 8000498:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_mode			= USART_MODE_RXTX;
 800049a:	4b31      	ldr	r3, [pc, #196]	; (8000560 <initSystem+0x16c>)
 800049c:	2202      	movs	r2, #2
 800049e:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_interrupt	= USART_INTERRUPT_RX;
 80004a0:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <initSystem+0x16c>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerCommTerminal);
 80004a6:	482e      	ldr	r0, [pc, #184]	; (8000560 <initSystem+0x16c>)
 80004a8:	f000 fde0 	bl	800106c <USART_Config>

	/* Configuramos el Timer */
	handlerStateLEDTimer.ptrTIMx					= TIM2;
 80004ac:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <initSystem+0x174>)
 80004ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b2:	601a      	str	r2, [r3, #0]
	handlerStateLEDTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 80004b4:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <initSystem+0x174>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	711a      	strb	r2, [r3, #4]
	handlerStateLEDTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_100us;
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <initSystem+0x174>)
 80004bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80004c0:	80da      	strh	r2, [r3, #6]
	handlerStateLEDTimer.timerConfig.Timer_period	= 2500;
 80004c2:	4b29      	ldr	r3, [pc, #164]	; (8000568 <initSystem+0x174>)
 80004c4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80004c8:	609a      	str	r2, [r3, #8]

	BTimer_Config(&handlerStateLEDTimer);
 80004ca:	4827      	ldr	r0, [pc, #156]	; (8000568 <initSystem+0x174>)
 80004cc:	f000 f91a 	bl	8000704 <BTimer_Config>

	/* Llamamos a la función para configurar y activar el SysTick */
	config_SysTickMs();
 80004d0:	f000 fd3c 	bl	8000f4c <config_SysTickMs>

	/* Configurando los pines sobre los que funciona el I2C1 */
	handlerI2CSCL.pGPIOx								= GPIOB;
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <initSystem+0x178>)
 80004d6:	4a26      	ldr	r2, [pc, #152]	; (8000570 <initSystem+0x17c>)
 80004d8:	601a      	str	r2, [r3, #0]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <initSystem+0x178>)
 80004dc:	2206      	movs	r2, #6
 80004de:	711a      	strb	r2, [r3, #4]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80004e0:	4b22      	ldr	r3, [pc, #136]	; (800056c <initSystem+0x178>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	715a      	strb	r2, [r3, #5]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <initSystem+0x178>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	721a      	strb	r2, [r3, #8]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <initSystem+0x178>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	71da      	strb	r2, [r3, #7]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <initSystem+0x178>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	719a      	strb	r2, [r3, #6]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <initSystem+0x178>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSCL);
 80004fe:	481b      	ldr	r0, [pc, #108]	; (800056c <initSystem+0x178>)
 8000500:	f000 f9d4 	bl	80008ac <GPIO_Config>

	/* Configurando los pines sobre los que funciona el I2C1 */
	handlerI2CSDA.pGPIOx								= GPIOB;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <initSystem+0x180>)
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <initSystem+0x17c>)
 8000508:	601a      	str	r2, [r3, #0]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <initSystem+0x180>)
 800050c:	2207      	movs	r2, #7
 800050e:	711a      	strb	r2, [r3, #4]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <initSystem+0x180>)
 8000512:	2202      	movs	r2, #2
 8000514:	715a      	strb	r2, [r3, #5]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <initSystem+0x180>)
 8000518:	2201      	movs	r2, #1
 800051a:	721a      	strb	r2, [r3, #8]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <initSystem+0x180>)
 800051e:	2201      	movs	r2, #1
 8000520:	71da      	strb	r2, [r3, #7]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <initSystem+0x180>)
 8000524:	2202      	movs	r2, #2
 8000526:	719a      	strb	r2, [r3, #6]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <initSystem+0x180>)
 800052a:	2204      	movs	r2, #4
 800052c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSDA);
 800052e:	4811      	ldr	r0, [pc, #68]	; (8000574 <initSystem+0x180>)
 8000530:	f000 f9bc 	bl	80008ac <GPIO_Config>

	handlerAccelerometer.ptrI2Cx		= I2C1;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <initSystem+0x184>)
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <initSystem+0x188>)
 8000538:	601a      	str	r2, [r3, #0]
	handlerAccelerometer.modeI2C		= I2C_MODE_FM;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <initSystem+0x184>)
 800053c:	2201      	movs	r2, #1
 800053e:	715a      	strb	r2, [r3, #5]
	handlerAccelerometer.slaveAddress	= 0b1101001;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <initSystem+0x184>)
 8000542:	2269      	movs	r2, #105	; 0x69
 8000544:	711a      	strb	r2, [r3, #4]
	I2C_Config(&handlerAccelerometer);
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <initSystem+0x184>)
 8000548:	f000 fad8 	bl	8000afc <I2C_Config>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000c4 	.word	0x200000c4
 8000554:	40020000 	.word	0x40020000
 8000558:	200000d0 	.word	0x200000d0
 800055c:	200000dc 	.word	0x200000dc
 8000560:	200000f8 	.word	0x200000f8
 8000564:	40004400 	.word	0x40004400
 8000568:	200000e8 	.word	0x200000e8
 800056c:	20000194 	.word	0x20000194
 8000570:	40020400 	.word	0x40020400
 8000574:	20000188 	.word	0x20000188
 8000578:	200001a0 	.word	0x200001a0
 800057c:	40005400 	.word	0x40005400

08000580 <Usart2_RX_Callback>:

/* Callback para la recepción del USART2 */

void Usart2_RX_Callback(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000584:	f000 ff4c 	bl	8001420 <getRxData>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <Usart2_RX_Callback+0x14>)
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000184 	.word	0x20000184

08000598 <BTimer2_Callback>:

/**/
void BTimer2_Callback(void){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <BTimer2_Callback+0x1c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <BTimer2_Callback+0x1c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f082 0220 	eor.w	r2, r2, #32
 80005aa:	615a      	str	r2, [r3, #20]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f000 ffc6 	bl	8001578 <__errno>
 80005ec:	4603      	mov	r3, r0
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20020000 	.word	0x20020000
 8000618:	00000400 	.word	0x00000400
 800061c:	200001b0 	.word	0x200001b0
 8000620:	20000220 	.word	0x20000220

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f000 ff97 	bl	8001584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fe13 	bl	8000280 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000668:	08001f2c 	.word	0x08001f2c
  ldr r2, =_sbss
 800066c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000670:	2000021c 	.word	0x2000021c

08000674 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_IRQHandler>
	...

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4906      	ldr	r1, [pc, #24]	; (80006ac <__NVIC_EnableIRQ+0x34>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	3b04      	subs	r3, #4
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a46      	ldr	r2, [pc, #280]	; (800082c <BTimer_Config+0x128>)
 8000712:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000720:	d106      	bne.n	8000730 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <BTimer_Config+0x12c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a42      	ldr	r2, [pc, #264]	; (8000830 <BTimer_Config+0x12c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	e016      	b.n	800075e <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a3f      	ldr	r2, [pc, #252]	; (8000834 <BTimer_Config+0x130>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <BTimer_Config+0x12c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a3c      	ldr	r2, [pc, #240]	; (8000830 <BTimer_Config+0x12c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	e00a      	b.n	800075e <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a3a      	ldr	r2, [pc, #232]	; (8000838 <BTimer_Config+0x134>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d105      	bne.n	800075e <BTimer_Config+0x5a>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <BTimer_Config+0x12c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a36      	ldr	r2, [pc, #216]	; (8000830 <BTimer_Config+0x12c>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d10c      	bne.n	8000780 <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0210 	bic.w	r2, r2, #16
 8000774:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
 800077e:	e00d      	b.n	800079c <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0210 	orr.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3a01      	subs	r2, #1
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	88db      	ldrh	r3, [r3, #6]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3a01      	subs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0201 	orr.w	r2, r2, #1
 80007c2:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68da      	ldr	r2, [r3, #12]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0201 	orr.w	r2, r2, #1
 80007d2:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007dc:	d107      	bne.n	80007ee <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 80007de:	201c      	movs	r0, #28
 80007e0:	f7ff ff4a 	bl	8000678 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 80007e4:	2103      	movs	r1, #3
 80007e6:	201c      	movs	r0, #28
 80007e8:	f7ff ff62 	bl	80006b0 <__NVIC_SetPriority>
 80007ec:	e018      	b.n	8000820 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <BTimer_Config+0x130>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d107      	bne.n	8000808 <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 80007f8:	201d      	movs	r0, #29
 80007fa:	f7ff ff3d 	bl	8000678 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 80007fe:	2103      	movs	r1, #3
 8000800:	201d      	movs	r0, #29
 8000802:	f7ff ff55 	bl	80006b0 <__NVIC_SetPriority>
 8000806:	e00b      	b.n	8000820 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <BTimer_Config+0x134>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000812:	201e      	movs	r0, #30
 8000814:	f7ff ff30 	bl	8000678 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 8000818:	2103      	movs	r1, #3
 800081a:	201e      	movs	r0, #30
 800081c:	f7ff ff48 	bl	80006b0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000820:	b662      	cpsie	i
}
 8000822:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200001b4 	.word	0x200001b4
 8000830:	40023800 	.word	0x40023800
 8000834:	40000400 	.word	0x40000400
 8000838:	40000800 	.word	0x40000800

0800083c <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	 __NOP();
 8000840:	bf00      	nop
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
	 __NOP();
 800084e:	bf00      	nop
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 800085c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 800086c:	f7ff fe94 	bl	8000598 <BTimer2_Callback>

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <TIM3_IRQHandler+0x18>)
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <TIM3_IRQHandler+0x18>)
 800087e:	f023 0301 	bic.w	r3, r3, #1
 8000882:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000884:	f7ff ffda 	bl	800083c <BTimer3_Callback>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40000400 	.word	0x40000400

08000890 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <TIM4_IRQHandler+0x18>)
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <TIM4_IRQHandler+0x18>)
 800089a:	f023 0301 	bic.w	r3, r3, #1
 800089e:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 80008a0:	f7ff ffd3 	bl	800084a <BTimer4_Callback>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40000800 	.word	0x40000800

080008ac <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a87      	ldr	r2, [pc, #540]	; (8000ae0 <GPIO_Config+0x234>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80008c6:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <GPIO_Config+0x238>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a86      	ldr	r2, [pc, #536]	; (8000ae4 <GPIO_Config+0x238>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	e03a      	b.n	800094a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a83      	ldr	r2, [pc, #524]	; (8000ae8 <GPIO_Config+0x23c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d106      	bne.n	80008ec <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80008de:	4b81      	ldr	r3, [pc, #516]	; (8000ae4 <GPIO_Config+0x238>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a80      	ldr	r2, [pc, #512]	; (8000ae4 <GPIO_Config+0x238>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	e02e      	b.n	800094a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a7e      	ldr	r2, [pc, #504]	; (8000aec <GPIO_Config+0x240>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80008f6:	4b7b      	ldr	r3, [pc, #492]	; (8000ae4 <GPIO_Config+0x238>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a7a      	ldr	r2, [pc, #488]	; (8000ae4 <GPIO_Config+0x238>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	e022      	b.n	800094a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a79      	ldr	r2, [pc, #484]	; (8000af0 <GPIO_Config+0x244>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800090e:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <GPIO_Config+0x238>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <GPIO_Config+0x238>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	e016      	b.n	800094a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a74      	ldr	r2, [pc, #464]	; (8000af4 <GPIO_Config+0x248>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d106      	bne.n	8000934 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <GPIO_Config+0x238>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a6e      	ldr	r2, [pc, #440]	; (8000ae4 <GPIO_Config+0x238>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	e00a      	b.n	800094a <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a6f      	ldr	r2, [pc, #444]	; (8000af8 <GPIO_Config+0x24c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d105      	bne.n	800094a <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800093e:	4b69      	ldr	r3, [pc, #420]	; (8000ae4 <GPIO_Config+0x238>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a68      	ldr	r2, [pc, #416]	; (8000ae4 <GPIO_Config+0x238>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	461a      	mov	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2103      	movs	r1, #3
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	400a      	ands	r2, r1
 8000978:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	430a      	orrs	r2, r1
 8000988:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	461a      	mov	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	4619      	mov	r1, r3
 80009a6:	2301      	movs	r3, #1
 80009a8:	408b      	lsls	r3, r1
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4619      	mov	r1, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	400a      	ands	r2, r1
 80009b4:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6859      	ldr	r1, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	430a      	orrs	r2, r1
 80009c4:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	799b      	ldrb	r3, [r3, #6]
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	2103      	movs	r1, #3
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	400a      	ands	r2, r1
 80009f4:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6899      	ldr	r1, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	79db      	ldrb	r3, [r3, #7]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2103      	movs	r1, #3
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	400a      	ands	r2, r1
 8000a34:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68d9      	ldr	r1, [r3, #12]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	795b      	ldrb	r3, [r3, #5]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d143      	bne.n	8000ad6 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d81f      	bhi.n	8000a96 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6a1a      	ldr	r2, [r3, #32]
 8000a64:	210f      	movs	r1, #15
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	400a      	ands	r2, r1
 8000a76:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6a1a      	ldr	r2, [r3, #32]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7a5b      	ldrb	r3, [r3, #9]
 8000a82:	4619      	mov	r1, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000a94:	e01f      	b.n	8000ad6 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	791b      	ldrb	r3, [r3, #4]
 8000a9a:	3b08      	subs	r3, #8
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7a5b      	ldrb	r3, [r3, #9]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4619      	mov	r1, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40021c00 	.word	0x40021c00

08000afc <I2C_Config>:
 * Además, estos pines deben ser configurados como salidas open-drain y con las resistencias en modo pull-up
 */

uint8_t auxByte = 0;

void I2C_Config(I2C_Handler_t	*ptrHandlerI2C){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	/* 1. Activamos la señal de reloj para el módulo I2C seleccionado */
	if (ptrHandlerI2C->ptrI2Cx == I2C1){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a45      	ldr	r2, [pc, #276]	; (8000c20 <I2C_Config+0x124>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <I2C_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000b0e:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <I2C_Config+0x128>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <I2C_Config+0x128>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	e016      	b.n	8000b4a <I2C_Config+0x4e>
	}
	else if (ptrHandlerI2C->ptrI2Cx == I2C2){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <I2C_Config+0x12c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d106      	bne.n	8000b34 <I2C_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000b26:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <I2C_Config+0x128>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <I2C_Config+0x128>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	e00a      	b.n	8000b4a <I2C_Config+0x4e>
	}
	else if (ptrHandlerI2C->ptrI2Cx == I2C3){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <I2C_Config+0x130>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d105      	bne.n	8000b4a <I2C_Config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <I2C_Config+0x128>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a38      	ldr	r2, [pc, #224]	; (8000c24 <I2C_Config+0x128>)
 8000b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periférico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b58:	601a      	str	r2, [r3, #0]
	__NOP();
 8000b5a:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b6a:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada por el periférico para generar la señal de reloj para el bus I2C */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración anterior
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000b7a:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0210 	orr.w	r2, r2, #16
 8000b8a:	605a      	str	r2, [r3, #4]

	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la velocidad del reloj y el tiempo máximo para el cambio de la señal (T-Rise)
	 * To.do comienza con los dos registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	795b      	ldrb	r3, [r3, #5]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d118      	bne.n	8000bd6 <I2C_Config+0xda>
		// Estamos en el modo "standar"
		// Seleccionamos el modo estándar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	69da      	ldr	r2, [r3, #28]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bb2:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000bc2:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6a1a      	ldr	r2, [r3, #32]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0211 	orr.w	r2, r2, #17
 8000bd2:	621a      	str	r2, [r3, #32]
 8000bd4:	e017      	b.n	8000c06 <I2C_Config+0x10a>
	}
	else {
		// Estamos en el modo "fast"
		// Seleccionamos el modo rápido
		ptrHandlerI2C->ptrI2Cx->CCR |= I2C_CCR_FS;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	69da      	ldr	r2, [r3, #28]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000be4:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	69da      	ldr	r2, [r3, #28]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 020e 	orr.w	r2, r2, #14
 8000bf4:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6a1a      	ldr	r2, [r3, #32]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0206 	orr.w	r2, r2, #6
 8000c04:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el módulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0201 	orr.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40005800 	.word	0x40005800
 8000c2c:	40005c00 	.word	0x40005c00

08000c30 <I2C_startTransaction>:


void I2C_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	/* Verificamos que la línea no está ocupada - bit "busy" en I2C_CR2 */
	while (ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8000c38:	e000      	b.n	8000c3c <I2C_startTransaction+0xc>
		__NOP();
 8000c3a:	bf00      	nop
	while (ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f7      	bne.n	8000c3a <I2C_startTransaction+0xa>
	}
	/* Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c58:	601a      	str	r2, [r3, #0]

	/* Esperamos a que la bander del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1 */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000c5a:	e000      	b.n	8000c5e <I2C_startTransaction+0x2e>
		__NOP();
 8000c5c:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f7      	beq.n	8000c5c <I2C_startTransaction+0x2c>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <I2C_sendSlaveAddressRW>:

void I2C_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t readOrWrite){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	/* Enviamos la dirección del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente pase se envia la direccion de memoria que se desea leer */
	ptrHandlerI2C->ptrI2Cx->DR = (ptrHandlerI2C->slaveAddress << 1) | readOrWrite;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	005a      	lsls	r2, r3, #1
 8000c8a:	78fb      	ldrb	r3, [r7, #3]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que la bandera del evento "addr" se levante (esto nos indica que la dirección fue enviada satisfactoriamente) */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8000c94:	e000      	b.n	8000c98 <I2C_sendSlaveAddressRW+0x20>
		__NOP();
 8000c96:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f7      	beq.n	8000c96 <I2C_sendSlaveAddressRW+0x1e>
	}

	/* Debemos limpiar la bandera de la recepción de ACK de la "addr", para lo cual debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <I2C_sendSlaveAddressRW+0x50>)
 8000cb0:	701a      	strb	r2, [r3, #0]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <I2C_sendSlaveAddressRW+0x50>)
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	200001b8 	.word	0x200001b8

08000ccc <I2C_sendMemoryAddress>:

void I2C_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	/* Enviaamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	78fa      	ldrb	r2, [r7, #3]
 8000cde:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que el byte sea transmitido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8000ce0:	e000      	b.n	8000ce4 <I2C_sendMemoryAddress+0x18>
		__NOP();
 8000ce2:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f7      	beq.n	8000ce2 <I2C_sendMemoryAddress+0x16>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <I2C_reStartTransaction>:

void I2C_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	/* Debemos generar una señal de RESTART, o sea, enviar un nuevo START */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d14:	601a      	str	r2, [r3, #0]

	/* Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entoncs la negación (!) es 1 */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000d16:	e000      	b.n	8000d1a <I2C_reStartTransaction+0x1c>
		__NOP();
 8000d18:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f7      	beq.n	8000d18 <I2C_reStartTransaction+0x1a>
	}
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <I2C_sendNoAck>:

void I2C_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	/* Activamos la indicación para la no-ACK (indicación para el Slave de terminar)
	 * (Debemos escribir cero en la posición ACK del CR1 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <I2C_sendAck>:

void I2C_sendAck(I2C_Handler_t *ptrHandlerI2C){
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	/* Activamos la indicación para la ACK (indicación para el Slave de seguir enviando datos)
	 * (Debemos escribir 1 en la posición ACK del CR1) */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <I2C_stopTransaction>:

void I2C_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	/* Generamos la condición de STOP */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <I2C_readDataByte>:

uint8_t I2C_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	/* Esperamos hasta que el byte entrante sea recibido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8000da2:	e000      	b.n	8000da6 <I2C_readDataByte+0xc>
		__NOP();
 8000da4:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f7      	beq.n	8000da4 <I2C_readDataByte+0xa>
	}

	/* Leemos el byte recibido */
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	799b      	ldrb	r3, [r3, #6]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <I2C_sendDataByte>:

void I2C_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
	/* Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR =  dataToWrite;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que el byte sea transmitido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8000de2:	e000      	b.n	8000de6 <I2C_sendDataByte+0x18>
		__NOP();
 8000de4:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <I2C_sendDataByte+0x16>
	}
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <I2C_readByte>:

/**/
uint8_t I2C_readByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	uint8_t readData = '\0';
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	/* 1 */
	I2C_startTransaction(ptrHandlerI2C);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff0d 	bl	8000c30 <I2C_startTransaction>

	/* 2 */
	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 8000e16:	2100      	movs	r1, #0
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff2d 	bl	8000c78 <I2C_sendSlaveAddressRW>

	/* 3 */
	I2C_sendMemoryAddress(ptrHandlerI2C, memAddr);
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	4619      	mov	r1, r3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff52 	bl	8000ccc <I2C_sendMemoryAddress>

	/* 4 */
	I2C_reStartTransaction(ptrHandlerI2C);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff68 	bl	8000cfe <I2C_reStartTransaction>

	/* 5 */
	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_READ_DATA);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff21 	bl	8000c78 <I2C_sendSlaveAddressRW>

	/* 6 */
	I2C_sendNoAck(ptrHandlerI2C);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff7c 	bl	8000d34 <I2C_sendNoAck>

	/* 7 */
	I2C_stopTransaction(ptrHandlerI2C);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff9b 	bl	8000d78 <I2C_stopTransaction>

	/* 8 */
	readData=I2C_readDataByte(ptrHandlerI2C);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa9 	bl	8000d9a <I2C_readDataByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	73fb      	strb	r3, [r7, #15]

	return readData;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <I2C_readBurstBytes>:


uint8_t readBytes[64] = {0};

uint8_t* I2C_readBurstBytes(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr, uint8_t numBytesToRead){
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
 8000e64:	4613      	mov	r3, r2
 8000e66:	70bb      	strb	r3, [r7, #2]

	I2C_startTransaction(ptrHandlerI2C);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fee1 	bl	8000c30 <I2C_startTransaction>

	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff01 	bl	8000c78 <I2C_sendSlaveAddressRW>

	I2C_sendMemoryAddress(ptrHandlerI2C, memAddr);
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff26 	bl	8000ccc <I2C_sendMemoryAddress>

	I2C_reStartTransaction(ptrHandlerI2C);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff3c 	bl	8000cfe <I2C_reStartTransaction>

	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_READ_DATA);
 8000e86:	2101      	movs	r1, #1
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fef5 	bl	8000c78 <I2C_sendSlaveAddressRW>

	for (uint8_t i = 0; i < numBytesToRead; i++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e00d      	b.n	8000eb0 <I2C_readBurstBytes+0x58>
		I2C_sendAck(ptrHandlerI2C);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff5e 	bl	8000d56 <I2C_sendAck>
		readBytes[i] = I2C_readDataByte(ptrHandlerI2C);
 8000e9a:	7bfc      	ldrb	r4, [r7, #15]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff7c 	bl	8000d9a <I2C_readDataByte>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <I2C_readBurstBytes+0x78>)
 8000ea8:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < numBytesToRead; i++){
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	3301      	adds	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d3ed      	bcc.n	8000e94 <I2C_readBurstBytes+0x3c>
	}

	I2C_sendNoAck(ptrHandlerI2C);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff3b 	bl	8000d34 <I2C_sendNoAck>

	I2C_stopTransaction(ptrHandlerI2C);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff5a 	bl	8000d78 <I2C_stopTransaction>

	return readBytes;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <I2C_readBurstBytes+0x78>)
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001bc 	.word	0x200001bc

08000ed4 <I2C_writeByte>:

/**/
void I2C_writeByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr, uint8_t dataToWrite){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	70bb      	strb	r3, [r7, #2]

	I2C_startTransaction(ptrHandlerI2C);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fea3 	bl	8000c30 <I2C_startTransaction>

	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fec3 	bl	8000c78 <I2C_sendSlaveAddressRW>

	I2C_sendMemoryAddress(ptrHandlerI2C, memAddr);
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fee8 	bl	8000ccc <I2C_sendMemoryAddress>

	I2C_sendDataByte(ptrHandlerI2C, dataToWrite);
 8000efc:	78bb      	ldrb	r3, [r7, #2]
 8000efe:	4619      	mov	r1, r3
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff64 	bl	8000dce <I2C_sendDataByte>

	I2C_stopTransaction(ptrHandlerI2C);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff36 	bl	8000d78 <I2C_stopTransaction>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <__NVIC_EnableIRQ>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <__NVIC_EnableIRQ+0x34>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <config_SysTickMs>:
#define SYSTICK_LOAD_VALUE		16000  // Número de ciclos en 1ms

uint64_t ticks;

/**/
void config_SysTickMs(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8000f50:	4914      	ldr	r1, [pc, #80]	; (8000fa4 <config_SysTickMs+0x58>)
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	e9c1 2300 	strd	r2, r3, [r1]

	// Cargando el valor del limite de icrementos que representan 1ms
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f60:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f64:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop

	// Desactivamos la interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	6013      	str	r3, [r2, #0]

	// Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ffc2 	bl	8000f14 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <config_SysTickMs+0x5c>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9c:	b662      	cpsie	i
}
 8000f9e:	bf00      	nop

	// Activamos las interrupciones globales
	__enable_irq();
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000200 	.word	0x20000200
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <SysTick_Handler>:
uint64_t getTicksMs(void){
	return ticks;
}

/**/
void SysTick_Handler(void){
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	//Verificamos que la interrupción se lanzó
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <SysTick_Handler+0x38>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00e      	beq.n	8000fda <SysTick_Handler+0x2e>
		//Limpiamos la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <SysTick_Handler+0x38>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <SysTick_Handler+0x38>)
 8000fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <SysTick_Handler+0x3c>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	1c50      	adds	r0, r2, #1
 8000fd0:	f143 0100 	adc.w	r1, r3, #0
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Handler+0x3c>)
 8000fd6:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010
 8000fe8:	20000200 	.word	0x20000200

08000fec <__NVIC_EnableIRQ>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4906      	ldr	r1, [pc, #24]	; (8001020 <__NVIC_EnableIRQ+0x34>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_DisableIRQ>:
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db12      	blt.n	800105c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	490a      	ldr	r1, [pc, #40]	; (8001068 <__NVIC_DisableIRQ+0x44>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	3320      	adds	r3, #32
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
}
 8001054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001056:	f3bf 8f6f 	isb	sy
}
 800105a:	bf00      	nop
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a88      	ldr	r2, [pc, #544]	; (800129c <USART_Config+0x230>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d106      	bne.n	800108c <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <USART_Config+0x234>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <USART_Config+0x234>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	e016      	b.n	80010ba <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a84      	ldr	r2, [pc, #528]	; (80012a4 <USART_Config+0x238>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d106      	bne.n	80010a4 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8001096:	4b82      	ldr	r3, [pc, #520]	; (80012a0 <USART_Config+0x234>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a81      	ldr	r2, [pc, #516]	; (80012a0 <USART_Config+0x234>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	e00a      	b.n	80010ba <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a7f      	ldr	r2, [pc, #508]	; (80012a8 <USART_Config+0x23c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d105      	bne.n	80010ba <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 80010ae:	4b7c      	ldr	r3, [pc, #496]	; (80012a0 <USART_Config+0x234>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a7b      	ldr	r2, [pc, #492]	; (80012a0 <USART_Config+0x234>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	79db      	ldrb	r3, [r3, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d023      	beq.n	800111a <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010e0:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	79db      	ldrb	r3, [r3, #7]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d10b      	bne.n	8001102 <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010f8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	719a      	strb	r2, [r3, #6]
 8001100:	e013      	b.n	800112a <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001110:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	719a      	strb	r2, [r3, #6]
 8001118:	e007      	b.n	800112a <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001128:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	799b      	ldrb	r3, [r3, #6]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	e007      	b.n	8001154 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001152:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7a1b      	ldrb	r3, [r3, #8]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d82f      	bhi.n	80011bc <USART_Config+0x150>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <USART_Config+0xf8>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	08001175 	.word	0x08001175
 8001168:	08001187 	.word	0x08001187
 800116c:	08001199 	.word	0x08001199
 8001170:	080011ab 	.word	0x080011ab
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001182:	611a      	str	r2, [r3, #16]
		break;
 8001184:	e01a      	b.n	80011bc <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001194:	611a      	str	r2, [r3, #16]
		break;
 8001196:	e011      	b.n	80011bc <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011a6:	611a      	str	r2, [r3, #16]
		break;
 80011a8:	e008      	b.n	80011bc <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011b8:	611a      	str	r2, [r3, #16]
		break;
 80011ba:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	795b      	ldrb	r3, [r3, #5]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f240 6283 	movw	r2, #1667	; 0x683
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	e01a      	b.n	8001206 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	795b      	ldrb	r3, [r3, #5]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f240 3241 	movw	r2, #833	; 0x341
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	e010      	b.n	8001206 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d104      	bne.n	80011f6 <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	228b      	movs	r2, #139	; 0x8b
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	e007      	b.n	8001206 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	795b      	ldrb	r3, [r3, #5]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d103      	bne.n	8001206 <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2211      	movs	r2, #17
 8001204:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d84e      	bhi.n	80012ac <USART_Config+0x240>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <USART_Config+0x1a8>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001225 	.word	0x08001225
 8001218:	08001237 	.word	0x08001237
 800121c:	08001249 	.word	0x08001249
 8001220:	0800126b 	.word	0x0800126b
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0208 	orr.w	r2, r2, #8
 8001232:	60da      	str	r2, [r3, #12]
		break;
 8001234:	e053      	b.n	80012de <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0204 	orr.w	r2, r2, #4
 8001244:	60da      	str	r2, [r3, #12]
		break;
 8001246:	e04a      	b.n	80012de <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0204 	orr.w	r2, r2, #4
 8001266:	60da      	str	r2, [r3, #12]
		break;
 8001268:	e039      	b.n	80012de <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0208 	bic.w	r2, r2, #8
 8001278:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0204 	bic.w	r2, r2, #4
 8001288:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001298:	60da      	str	r2, [r3, #12]
		break;
 800129a:	e020      	b.n	80012de <USART_Config+0x272>
 800129c:	40011000 	.word	0x40011000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40004400 	.word	0x40004400
 80012a8:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0204 	bic.w	r2, r2, #4
 80012ca:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012da:	60da      	str	r2, [r3, #12]
		break;
 80012dc:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d007      	beq.n	80012f6 <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012f4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f6:	b672      	cpsid	i
}
 80012f8:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001308:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7a5b      	ldrb	r3, [r3, #9]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d01a      	beq.n	8001348 <USART_Config+0x2dc>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <USART_Config+0x31c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d103      	bne.n	8001324 <USART_Config+0x2b8>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 800131c:	2025      	movs	r0, #37	; 0x25
 800131e:	f7ff fe65 	bl	8000fec <__NVIC_EnableIRQ>
 8001322:	e01a      	b.n	800135a <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a18      	ldr	r2, [pc, #96]	; (800138c <USART_Config+0x320>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d103      	bne.n	8001336 <USART_Config+0x2ca>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 800132e:	2026      	movs	r0, #38	; 0x26
 8001330:	f7ff fe5c 	bl	8000fec <__NVIC_EnableIRQ>
 8001334:	e011      	b.n	800135a <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <USART_Config+0x324>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10c      	bne.n	800135a <USART_Config+0x2ee>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001340:	2047      	movs	r0, #71	; 0x47
 8001342:	f7ff fe53 	bl	8000fec <__NVIC_EnableIRQ>
 8001346:	e008      	b.n	800135a <USART_Config+0x2ee>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 8001348:	2025      	movs	r0, #37	; 0x25
 800134a:	f7ff fe6b 	bl	8001024 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 800134e:	2026      	movs	r0, #38	; 0x26
 8001350:	f7ff fe68 	bl	8001024 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 8001354:	2047      	movs	r0, #71	; 0x47
 8001356:	f7ff fe65 	bl	8001024 <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7a5b      	ldrb	r3, [r3, #9]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d003      	beq.n	800136a <USART_Config+0x2fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d107      	bne.n	800137a <USART_Config+0x30e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800137a:	b662      	cpsie	i
}
 800137c:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40011000 	.word	0x40011000
 800138c:	40004400 	.word	0x40004400
 8001390:	40011400 	.word	0x40011400

08001394 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a5b      	ldrb	r3, [r3, #9]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <writeChar+0x1c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7a5b      	ldrb	r3, [r3, #9]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d10c      	bne.n	80013ca <writeChar+0x36>
		auxDataToSend = dataToSend;
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <writeChar+0x58>)
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	e00c      	b.n	80013e2 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 80013c8:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f7      	beq.n	80013c8 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	78fa      	ldrb	r2, [r7, #3]
 80013de:	605a      	str	r2, [r3, #4]
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000209 	.word	0x20000209

080013f0 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80013fa:	e008      	b.n	800140e <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffc6 	bl	8001394 <writeChar>
		msgToSend++;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f2      	bne.n	80013fc <writeMsg+0xc>
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	return auxRxData;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <getRxData+0x10>)
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000208 	.word	0x20000208

08001434 <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	 __NOP();
 8001438:	bf00      	nop
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <Usart2_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
	 __NOP();
 8001446:	bf00      	nop
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	 __NOP();
 8001454:	bf00      	nop
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
	 __NOP();
 8001462:	bf00      	nop
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	 __NOP();
 8001470:	bf00      	nop
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <USART1_IRQHandler+0x48>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <USART1_IRQHandler+0x48>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <USART1_IRQHandler+0x4c>)
 8001494:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 8001496:	f7ff ffe2 	bl	800145e <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 800149a:	e011      	b.n	80014c0 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <USART1_IRQHandler+0x48>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <USART1_IRQHandler+0x50>)
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <USART1_IRQHandler+0x48>)
 80014ae:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <USART1_IRQHandler+0x48>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <USART1_IRQHandler+0x48>)
 80014b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ba:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 80014bc:	f7ff ffba 	bl	8001434 <Usart1_TX_Callback>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40011000 	.word	0x40011000
 80014c8:	20000208 	.word	0x20000208
 80014cc:	20000209 	.word	0x20000209

080014d0 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <USART2_IRQHandler+0x48>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <USART2_IRQHandler+0x48>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <USART2_IRQHandler+0x4c>)
 80014e8:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 80014ea:	f7ff f849 	bl	8000580 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 80014ee:	e011      	b.n	8001514 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <USART2_IRQHandler+0x48>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <USART2_IRQHandler+0x50>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <USART2_IRQHandler+0x48>)
 8001502:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <USART2_IRQHandler+0x48>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <USART2_IRQHandler+0x48>)
 800150a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800150e:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 8001510:	f7ff ff97 	bl	8001442 <Usart2_TX_Callback>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40004400 	.word	0x40004400
 800151c:	20000208 	.word	0x20000208
 8001520:	20000209 	.word	0x20000209

08001524 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <USART6_IRQHandler+0x48>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <USART6_IRQHandler+0x48>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <USART6_IRQHandler+0x4c>)
 800153c:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 800153e:	f7ff ff95 	bl	800146c <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 8001542:	e011      	b.n	8001568 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <USART6_IRQHandler+0x48>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00b      	beq.n	8001568 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <USART6_IRQHandler+0x50>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <USART6_IRQHandler+0x48>)
 8001556:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <USART6_IRQHandler+0x48>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <USART6_IRQHandler+0x48>)
 800155e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001562:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8001564:	f7ff ff74 	bl	8001450 <Usart6_TX_Callback>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40011400 	.word	0x40011400
 8001570:	20000208 	.word	0x20000208
 8001574:	20000209 	.word	0x20000209

08001578 <__errno>:
 8001578:	4b01      	ldr	r3, [pc, #4]	; (8001580 <__errno+0x8>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000040 	.word	0x20000040

08001584 <__libc_init_array>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4d0d      	ldr	r5, [pc, #52]	; (80015bc <__libc_init_array+0x38>)
 8001588:	4c0d      	ldr	r4, [pc, #52]	; (80015c0 <__libc_init_array+0x3c>)
 800158a:	1b64      	subs	r4, r4, r5
 800158c:	10a4      	asrs	r4, r4, #2
 800158e:	2600      	movs	r6, #0
 8001590:	42a6      	cmp	r6, r4
 8001592:	d109      	bne.n	80015a8 <__libc_init_array+0x24>
 8001594:	4d0b      	ldr	r5, [pc, #44]	; (80015c4 <__libc_init_array+0x40>)
 8001596:	4c0c      	ldr	r4, [pc, #48]	; (80015c8 <__libc_init_array+0x44>)
 8001598:	f000 fc84 	bl	8001ea4 <_init>
 800159c:	1b64      	subs	r4, r4, r5
 800159e:	10a4      	asrs	r4, r4, #2
 80015a0:	2600      	movs	r6, #0
 80015a2:	42a6      	cmp	r6, r4
 80015a4:	d105      	bne.n	80015b2 <__libc_init_array+0x2e>
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
 80015a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ac:	4798      	blx	r3
 80015ae:	3601      	adds	r6, #1
 80015b0:	e7ee      	b.n	8001590 <__libc_init_array+0xc>
 80015b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b6:	4798      	blx	r3
 80015b8:	3601      	adds	r6, #1
 80015ba:	e7f2      	b.n	80015a2 <__libc_init_array+0x1e>
 80015bc:	08001f24 	.word	0x08001f24
 80015c0:	08001f24 	.word	0x08001f24
 80015c4:	08001f24 	.word	0x08001f24
 80015c8:	08001f28 	.word	0x08001f28

080015cc <siprintf>:
 80015cc:	b40e      	push	{r1, r2, r3}
 80015ce:	b500      	push	{lr}
 80015d0:	b09c      	sub	sp, #112	; 0x70
 80015d2:	ab1d      	add	r3, sp, #116	; 0x74
 80015d4:	9002      	str	r0, [sp, #8]
 80015d6:	9006      	str	r0, [sp, #24]
 80015d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <siprintf+0x38>)
 80015de:	9107      	str	r1, [sp, #28]
 80015e0:	9104      	str	r1, [sp, #16]
 80015e2:	4909      	ldr	r1, [pc, #36]	; (8001608 <siprintf+0x3c>)
 80015e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80015e8:	9105      	str	r1, [sp, #20]
 80015ea:	6800      	ldr	r0, [r0, #0]
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	a902      	add	r1, sp, #8
 80015f0:	f000 f868 	bl	80016c4 <_svfiprintf_r>
 80015f4:	9b02      	ldr	r3, [sp, #8]
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	b01c      	add	sp, #112	; 0x70
 80015fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001600:	b003      	add	sp, #12
 8001602:	4770      	bx	lr
 8001604:	20000040 	.word	0x20000040
 8001608:	ffff0208 	.word	0xffff0208

0800160c <__ssputs_r>:
 800160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001610:	688e      	ldr	r6, [r1, #8]
 8001612:	429e      	cmp	r6, r3
 8001614:	4682      	mov	sl, r0
 8001616:	460c      	mov	r4, r1
 8001618:	4690      	mov	r8, r2
 800161a:	461f      	mov	r7, r3
 800161c:	d838      	bhi.n	8001690 <__ssputs_r+0x84>
 800161e:	898a      	ldrh	r2, [r1, #12]
 8001620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001624:	d032      	beq.n	800168c <__ssputs_r+0x80>
 8001626:	6825      	ldr	r5, [r4, #0]
 8001628:	6909      	ldr	r1, [r1, #16]
 800162a:	eba5 0901 	sub.w	r9, r5, r1
 800162e:	6965      	ldr	r5, [r4, #20]
 8001630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001638:	3301      	adds	r3, #1
 800163a:	444b      	add	r3, r9
 800163c:	106d      	asrs	r5, r5, #1
 800163e:	429d      	cmp	r5, r3
 8001640:	bf38      	it	cc
 8001642:	461d      	movcc	r5, r3
 8001644:	0553      	lsls	r3, r2, #21
 8001646:	d531      	bpl.n	80016ac <__ssputs_r+0xa0>
 8001648:	4629      	mov	r1, r5
 800164a:	f000 fb61 	bl	8001d10 <_malloc_r>
 800164e:	4606      	mov	r6, r0
 8001650:	b950      	cbnz	r0, 8001668 <__ssputs_r+0x5c>
 8001652:	230c      	movs	r3, #12
 8001654:	f8ca 3000 	str.w	r3, [sl]
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001668:	6921      	ldr	r1, [r4, #16]
 800166a:	464a      	mov	r2, r9
 800166c:	f000 fabe 	bl	8001bec <memcpy>
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	6126      	str	r6, [r4, #16]
 800167e:	6165      	str	r5, [r4, #20]
 8001680:	444e      	add	r6, r9
 8001682:	eba5 0509 	sub.w	r5, r5, r9
 8001686:	6026      	str	r6, [r4, #0]
 8001688:	60a5      	str	r5, [r4, #8]
 800168a:	463e      	mov	r6, r7
 800168c:	42be      	cmp	r6, r7
 800168e:	d900      	bls.n	8001692 <__ssputs_r+0x86>
 8001690:	463e      	mov	r6, r7
 8001692:	6820      	ldr	r0, [r4, #0]
 8001694:	4632      	mov	r2, r6
 8001696:	4641      	mov	r1, r8
 8001698:	f000 fab6 	bl	8001c08 <memmove>
 800169c:	68a3      	ldr	r3, [r4, #8]
 800169e:	1b9b      	subs	r3, r3, r6
 80016a0:	60a3      	str	r3, [r4, #8]
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	4433      	add	r3, r6
 80016a6:	6023      	str	r3, [r4, #0]
 80016a8:	2000      	movs	r0, #0
 80016aa:	e7db      	b.n	8001664 <__ssputs_r+0x58>
 80016ac:	462a      	mov	r2, r5
 80016ae:	f000 fba3 	bl	8001df8 <_realloc_r>
 80016b2:	4606      	mov	r6, r0
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d1e1      	bne.n	800167c <__ssputs_r+0x70>
 80016b8:	6921      	ldr	r1, [r4, #16]
 80016ba:	4650      	mov	r0, sl
 80016bc:	f000 fabe 	bl	8001c3c <_free_r>
 80016c0:	e7c7      	b.n	8001652 <__ssputs_r+0x46>
	...

080016c4 <_svfiprintf_r>:
 80016c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c8:	4698      	mov	r8, r3
 80016ca:	898b      	ldrh	r3, [r1, #12]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	b09d      	sub	sp, #116	; 0x74
 80016d0:	4607      	mov	r7, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	d50e      	bpl.n	80016f6 <_svfiprintf_r+0x32>
 80016d8:	690b      	ldr	r3, [r1, #16]
 80016da:	b963      	cbnz	r3, 80016f6 <_svfiprintf_r+0x32>
 80016dc:	2140      	movs	r1, #64	; 0x40
 80016de:	f000 fb17 	bl	8001d10 <_malloc_r>
 80016e2:	6028      	str	r0, [r5, #0]
 80016e4:	6128      	str	r0, [r5, #16]
 80016e6:	b920      	cbnz	r0, 80016f2 <_svfiprintf_r+0x2e>
 80016e8:	230c      	movs	r3, #12
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	e0d1      	b.n	8001896 <_svfiprintf_r+0x1d2>
 80016f2:	2340      	movs	r3, #64	; 0x40
 80016f4:	616b      	str	r3, [r5, #20]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9309      	str	r3, [sp, #36]	; 0x24
 80016fa:	2320      	movs	r3, #32
 80016fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001700:	f8cd 800c 	str.w	r8, [sp, #12]
 8001704:	2330      	movs	r3, #48	; 0x30
 8001706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80018b0 <_svfiprintf_r+0x1ec>
 800170a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800170e:	f04f 0901 	mov.w	r9, #1
 8001712:	4623      	mov	r3, r4
 8001714:	469a      	mov	sl, r3
 8001716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800171a:	b10a      	cbz	r2, 8001720 <_svfiprintf_r+0x5c>
 800171c:	2a25      	cmp	r2, #37	; 0x25
 800171e:	d1f9      	bne.n	8001714 <_svfiprintf_r+0x50>
 8001720:	ebba 0b04 	subs.w	fp, sl, r4
 8001724:	d00b      	beq.n	800173e <_svfiprintf_r+0x7a>
 8001726:	465b      	mov	r3, fp
 8001728:	4622      	mov	r2, r4
 800172a:	4629      	mov	r1, r5
 800172c:	4638      	mov	r0, r7
 800172e:	f7ff ff6d 	bl	800160c <__ssputs_r>
 8001732:	3001      	adds	r0, #1
 8001734:	f000 80aa 	beq.w	800188c <_svfiprintf_r+0x1c8>
 8001738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800173a:	445a      	add	r2, fp
 800173c:	9209      	str	r2, [sp, #36]	; 0x24
 800173e:	f89a 3000 	ldrb.w	r3, [sl]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a2 	beq.w	800188c <_svfiprintf_r+0x1c8>
 8001748:	2300      	movs	r3, #0
 800174a:	f04f 32ff 	mov.w	r2, #4294967295
 800174e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001752:	f10a 0a01 	add.w	sl, sl, #1
 8001756:	9304      	str	r3, [sp, #16]
 8001758:	9307      	str	r3, [sp, #28]
 800175a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800175e:	931a      	str	r3, [sp, #104]	; 0x68
 8001760:	4654      	mov	r4, sl
 8001762:	2205      	movs	r2, #5
 8001764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001768:	4851      	ldr	r0, [pc, #324]	; (80018b0 <_svfiprintf_r+0x1ec>)
 800176a:	f7fe fd39 	bl	80001e0 <memchr>
 800176e:	9a04      	ldr	r2, [sp, #16]
 8001770:	b9d8      	cbnz	r0, 80017aa <_svfiprintf_r+0xe6>
 8001772:	06d0      	lsls	r0, r2, #27
 8001774:	bf44      	itt	mi
 8001776:	2320      	movmi	r3, #32
 8001778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800177c:	0711      	lsls	r1, r2, #28
 800177e:	bf44      	itt	mi
 8001780:	232b      	movmi	r3, #43	; 0x2b
 8001782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001786:	f89a 3000 	ldrb.w	r3, [sl]
 800178a:	2b2a      	cmp	r3, #42	; 0x2a
 800178c:	d015      	beq.n	80017ba <_svfiprintf_r+0xf6>
 800178e:	9a07      	ldr	r2, [sp, #28]
 8001790:	4654      	mov	r4, sl
 8001792:	2000      	movs	r0, #0
 8001794:	f04f 0c0a 	mov.w	ip, #10
 8001798:	4621      	mov	r1, r4
 800179a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800179e:	3b30      	subs	r3, #48	; 0x30
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d94e      	bls.n	8001842 <_svfiprintf_r+0x17e>
 80017a4:	b1b0      	cbz	r0, 80017d4 <_svfiprintf_r+0x110>
 80017a6:	9207      	str	r2, [sp, #28]
 80017a8:	e014      	b.n	80017d4 <_svfiprintf_r+0x110>
 80017aa:	eba0 0308 	sub.w	r3, r0, r8
 80017ae:	fa09 f303 	lsl.w	r3, r9, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	9304      	str	r3, [sp, #16]
 80017b6:	46a2      	mov	sl, r4
 80017b8:	e7d2      	b.n	8001760 <_svfiprintf_r+0x9c>
 80017ba:	9b03      	ldr	r3, [sp, #12]
 80017bc:	1d19      	adds	r1, r3, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	9103      	str	r1, [sp, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bfbb      	ittet	lt
 80017c6:	425b      	neglt	r3, r3
 80017c8:	f042 0202 	orrlt.w	r2, r2, #2
 80017cc:	9307      	strge	r3, [sp, #28]
 80017ce:	9307      	strlt	r3, [sp, #28]
 80017d0:	bfb8      	it	lt
 80017d2:	9204      	strlt	r2, [sp, #16]
 80017d4:	7823      	ldrb	r3, [r4, #0]
 80017d6:	2b2e      	cmp	r3, #46	; 0x2e
 80017d8:	d10c      	bne.n	80017f4 <_svfiprintf_r+0x130>
 80017da:	7863      	ldrb	r3, [r4, #1]
 80017dc:	2b2a      	cmp	r3, #42	; 0x2a
 80017de:	d135      	bne.n	800184c <_svfiprintf_r+0x188>
 80017e0:	9b03      	ldr	r3, [sp, #12]
 80017e2:	1d1a      	adds	r2, r3, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	9203      	str	r2, [sp, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bfb8      	it	lt
 80017ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80017f0:	3402      	adds	r4, #2
 80017f2:	9305      	str	r3, [sp, #20]
 80017f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80018b4 <_svfiprintf_r+0x1f0>
 80017f8:	7821      	ldrb	r1, [r4, #0]
 80017fa:	2203      	movs	r2, #3
 80017fc:	4650      	mov	r0, sl
 80017fe:	f7fe fcef 	bl	80001e0 <memchr>
 8001802:	b140      	cbz	r0, 8001816 <_svfiprintf_r+0x152>
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	eba0 000a 	sub.w	r0, r0, sl
 800180a:	fa03 f000 	lsl.w	r0, r3, r0
 800180e:	9b04      	ldr	r3, [sp, #16]
 8001810:	4303      	orrs	r3, r0
 8001812:	3401      	adds	r4, #1
 8001814:	9304      	str	r3, [sp, #16]
 8001816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800181a:	4827      	ldr	r0, [pc, #156]	; (80018b8 <_svfiprintf_r+0x1f4>)
 800181c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001820:	2206      	movs	r2, #6
 8001822:	f7fe fcdd 	bl	80001e0 <memchr>
 8001826:	2800      	cmp	r0, #0
 8001828:	d038      	beq.n	800189c <_svfiprintf_r+0x1d8>
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <_svfiprintf_r+0x1f8>)
 800182c:	bb1b      	cbnz	r3, 8001876 <_svfiprintf_r+0x1b2>
 800182e:	9b03      	ldr	r3, [sp, #12]
 8001830:	3307      	adds	r3, #7
 8001832:	f023 0307 	bic.w	r3, r3, #7
 8001836:	3308      	adds	r3, #8
 8001838:	9303      	str	r3, [sp, #12]
 800183a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800183c:	4433      	add	r3, r6
 800183e:	9309      	str	r3, [sp, #36]	; 0x24
 8001840:	e767      	b.n	8001712 <_svfiprintf_r+0x4e>
 8001842:	fb0c 3202 	mla	r2, ip, r2, r3
 8001846:	460c      	mov	r4, r1
 8001848:	2001      	movs	r0, #1
 800184a:	e7a5      	b.n	8001798 <_svfiprintf_r+0xd4>
 800184c:	2300      	movs	r3, #0
 800184e:	3401      	adds	r4, #1
 8001850:	9305      	str	r3, [sp, #20]
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 0c0a 	mov.w	ip, #10
 8001858:	4620      	mov	r0, r4
 800185a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800185e:	3a30      	subs	r2, #48	; 0x30
 8001860:	2a09      	cmp	r2, #9
 8001862:	d903      	bls.n	800186c <_svfiprintf_r+0x1a8>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0c5      	beq.n	80017f4 <_svfiprintf_r+0x130>
 8001868:	9105      	str	r1, [sp, #20]
 800186a:	e7c3      	b.n	80017f4 <_svfiprintf_r+0x130>
 800186c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001870:	4604      	mov	r4, r0
 8001872:	2301      	movs	r3, #1
 8001874:	e7f0      	b.n	8001858 <_svfiprintf_r+0x194>
 8001876:	ab03      	add	r3, sp, #12
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	462a      	mov	r2, r5
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_svfiprintf_r+0x1fc>)
 800187e:	a904      	add	r1, sp, #16
 8001880:	4638      	mov	r0, r7
 8001882:	f3af 8000 	nop.w
 8001886:	1c42      	adds	r2, r0, #1
 8001888:	4606      	mov	r6, r0
 800188a:	d1d6      	bne.n	800183a <_svfiprintf_r+0x176>
 800188c:	89ab      	ldrh	r3, [r5, #12]
 800188e:	065b      	lsls	r3, r3, #25
 8001890:	f53f af2c 	bmi.w	80016ec <_svfiprintf_r+0x28>
 8001894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001896:	b01d      	add	sp, #116	; 0x74
 8001898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800189c:	ab03      	add	r3, sp, #12
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	462a      	mov	r2, r5
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_svfiprintf_r+0x1fc>)
 80018a4:	a904      	add	r1, sp, #16
 80018a6:	4638      	mov	r0, r7
 80018a8:	f000 f87a 	bl	80019a0 <_printf_i>
 80018ac:	e7eb      	b.n	8001886 <_svfiprintf_r+0x1c2>
 80018ae:	bf00      	nop
 80018b0:	08001eee 	.word	0x08001eee
 80018b4:	08001ef4 	.word	0x08001ef4
 80018b8:	08001ef8 	.word	0x08001ef8
 80018bc:	00000000 	.word	0x00000000
 80018c0:	0800160d 	.word	0x0800160d

080018c4 <_printf_common>:
 80018c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c8:	4616      	mov	r6, r2
 80018ca:	4699      	mov	r9, r3
 80018cc:	688a      	ldr	r2, [r1, #8]
 80018ce:	690b      	ldr	r3, [r1, #16]
 80018d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bfb8      	it	lt
 80018d8:	4613      	movlt	r3, r2
 80018da:	6033      	str	r3, [r6, #0]
 80018dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018e0:	4607      	mov	r7, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	b10a      	cbz	r2, 80018ea <_printf_common+0x26>
 80018e6:	3301      	adds	r3, #1
 80018e8:	6033      	str	r3, [r6, #0]
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	0699      	lsls	r1, r3, #26
 80018ee:	bf42      	ittt	mi
 80018f0:	6833      	ldrmi	r3, [r6, #0]
 80018f2:	3302      	addmi	r3, #2
 80018f4:	6033      	strmi	r3, [r6, #0]
 80018f6:	6825      	ldr	r5, [r4, #0]
 80018f8:	f015 0506 	ands.w	r5, r5, #6
 80018fc:	d106      	bne.n	800190c <_printf_common+0x48>
 80018fe:	f104 0a19 	add.w	sl, r4, #25
 8001902:	68e3      	ldr	r3, [r4, #12]
 8001904:	6832      	ldr	r2, [r6, #0]
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	42ab      	cmp	r3, r5
 800190a:	dc26      	bgt.n	800195a <_printf_common+0x96>
 800190c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001910:	1e13      	subs	r3, r2, #0
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	bf18      	it	ne
 8001916:	2301      	movne	r3, #1
 8001918:	0692      	lsls	r2, r2, #26
 800191a:	d42b      	bmi.n	8001974 <_printf_common+0xb0>
 800191c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001920:	4649      	mov	r1, r9
 8001922:	4638      	mov	r0, r7
 8001924:	47c0      	blx	r8
 8001926:	3001      	adds	r0, #1
 8001928:	d01e      	beq.n	8001968 <_printf_common+0xa4>
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	68e5      	ldr	r5, [r4, #12]
 800192e:	6832      	ldr	r2, [r6, #0]
 8001930:	f003 0306 	and.w	r3, r3, #6
 8001934:	2b04      	cmp	r3, #4
 8001936:	bf08      	it	eq
 8001938:	1aad      	subeq	r5, r5, r2
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	6922      	ldr	r2, [r4, #16]
 800193e:	bf0c      	ite	eq
 8001940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001944:	2500      	movne	r5, #0
 8001946:	4293      	cmp	r3, r2
 8001948:	bfc4      	itt	gt
 800194a:	1a9b      	subgt	r3, r3, r2
 800194c:	18ed      	addgt	r5, r5, r3
 800194e:	2600      	movs	r6, #0
 8001950:	341a      	adds	r4, #26
 8001952:	42b5      	cmp	r5, r6
 8001954:	d11a      	bne.n	800198c <_printf_common+0xc8>
 8001956:	2000      	movs	r0, #0
 8001958:	e008      	b.n	800196c <_printf_common+0xa8>
 800195a:	2301      	movs	r3, #1
 800195c:	4652      	mov	r2, sl
 800195e:	4649      	mov	r1, r9
 8001960:	4638      	mov	r0, r7
 8001962:	47c0      	blx	r8
 8001964:	3001      	adds	r0, #1
 8001966:	d103      	bne.n	8001970 <_printf_common+0xac>
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001970:	3501      	adds	r5, #1
 8001972:	e7c6      	b.n	8001902 <_printf_common+0x3e>
 8001974:	18e1      	adds	r1, r4, r3
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	2030      	movs	r0, #48	; 0x30
 800197a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800197e:	4422      	add	r2, r4
 8001980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001988:	3302      	adds	r3, #2
 800198a:	e7c7      	b.n	800191c <_printf_common+0x58>
 800198c:	2301      	movs	r3, #1
 800198e:	4622      	mov	r2, r4
 8001990:	4649      	mov	r1, r9
 8001992:	4638      	mov	r0, r7
 8001994:	47c0      	blx	r8
 8001996:	3001      	adds	r0, #1
 8001998:	d0e6      	beq.n	8001968 <_printf_common+0xa4>
 800199a:	3601      	adds	r6, #1
 800199c:	e7d9      	b.n	8001952 <_printf_common+0x8e>
	...

080019a0 <_printf_i>:
 80019a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019a4:	7e0f      	ldrb	r7, [r1, #24]
 80019a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019a8:	2f78      	cmp	r7, #120	; 0x78
 80019aa:	4691      	mov	r9, r2
 80019ac:	4680      	mov	r8, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	469a      	mov	sl, r3
 80019b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019b6:	d807      	bhi.n	80019c8 <_printf_i+0x28>
 80019b8:	2f62      	cmp	r7, #98	; 0x62
 80019ba:	d80a      	bhi.n	80019d2 <_printf_i+0x32>
 80019bc:	2f00      	cmp	r7, #0
 80019be:	f000 80d8 	beq.w	8001b72 <_printf_i+0x1d2>
 80019c2:	2f58      	cmp	r7, #88	; 0x58
 80019c4:	f000 80a3 	beq.w	8001b0e <_printf_i+0x16e>
 80019c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019d0:	e03a      	b.n	8001a48 <_printf_i+0xa8>
 80019d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019d6:	2b15      	cmp	r3, #21
 80019d8:	d8f6      	bhi.n	80019c8 <_printf_i+0x28>
 80019da:	a101      	add	r1, pc, #4	; (adr r1, 80019e0 <_printf_i+0x40>)
 80019dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019e0:	08001a39 	.word	0x08001a39
 80019e4:	08001a4d 	.word	0x08001a4d
 80019e8:	080019c9 	.word	0x080019c9
 80019ec:	080019c9 	.word	0x080019c9
 80019f0:	080019c9 	.word	0x080019c9
 80019f4:	080019c9 	.word	0x080019c9
 80019f8:	08001a4d 	.word	0x08001a4d
 80019fc:	080019c9 	.word	0x080019c9
 8001a00:	080019c9 	.word	0x080019c9
 8001a04:	080019c9 	.word	0x080019c9
 8001a08:	080019c9 	.word	0x080019c9
 8001a0c:	08001b59 	.word	0x08001b59
 8001a10:	08001a7d 	.word	0x08001a7d
 8001a14:	08001b3b 	.word	0x08001b3b
 8001a18:	080019c9 	.word	0x080019c9
 8001a1c:	080019c9 	.word	0x080019c9
 8001a20:	08001b7b 	.word	0x08001b7b
 8001a24:	080019c9 	.word	0x080019c9
 8001a28:	08001a7d 	.word	0x08001a7d
 8001a2c:	080019c9 	.word	0x080019c9
 8001a30:	080019c9 	.word	0x080019c9
 8001a34:	08001b43 	.word	0x08001b43
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	1d1a      	adds	r2, r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	602a      	str	r2, [r5, #0]
 8001a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0a3      	b.n	8001b94 <_printf_i+0x1f4>
 8001a4c:	6820      	ldr	r0, [r4, #0]
 8001a4e:	6829      	ldr	r1, [r5, #0]
 8001a50:	0606      	lsls	r6, r0, #24
 8001a52:	f101 0304 	add.w	r3, r1, #4
 8001a56:	d50a      	bpl.n	8001a6e <_printf_i+0xce>
 8001a58:	680e      	ldr	r6, [r1, #0]
 8001a5a:	602b      	str	r3, [r5, #0]
 8001a5c:	2e00      	cmp	r6, #0
 8001a5e:	da03      	bge.n	8001a68 <_printf_i+0xc8>
 8001a60:	232d      	movs	r3, #45	; 0x2d
 8001a62:	4276      	negs	r6, r6
 8001a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a68:	485e      	ldr	r0, [pc, #376]	; (8001be4 <_printf_i+0x244>)
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	e019      	b.n	8001aa2 <_printf_i+0x102>
 8001a6e:	680e      	ldr	r6, [r1, #0]
 8001a70:	602b      	str	r3, [r5, #0]
 8001a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a76:	bf18      	it	ne
 8001a78:	b236      	sxthne	r6, r6
 8001a7a:	e7ef      	b.n	8001a5c <_printf_i+0xbc>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	6820      	ldr	r0, [r4, #0]
 8001a80:	1d19      	adds	r1, r3, #4
 8001a82:	6029      	str	r1, [r5, #0]
 8001a84:	0601      	lsls	r1, r0, #24
 8001a86:	d501      	bpl.n	8001a8c <_printf_i+0xec>
 8001a88:	681e      	ldr	r6, [r3, #0]
 8001a8a:	e002      	b.n	8001a92 <_printf_i+0xf2>
 8001a8c:	0646      	lsls	r6, r0, #25
 8001a8e:	d5fb      	bpl.n	8001a88 <_printf_i+0xe8>
 8001a90:	881e      	ldrh	r6, [r3, #0]
 8001a92:	4854      	ldr	r0, [pc, #336]	; (8001be4 <_printf_i+0x244>)
 8001a94:	2f6f      	cmp	r7, #111	; 0x6f
 8001a96:	bf0c      	ite	eq
 8001a98:	2308      	moveq	r3, #8
 8001a9a:	230a      	movne	r3, #10
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001aa2:	6865      	ldr	r5, [r4, #4]
 8001aa4:	60a5      	str	r5, [r4, #8]
 8001aa6:	2d00      	cmp	r5, #0
 8001aa8:	bfa2      	ittt	ge
 8001aaa:	6821      	ldrge	r1, [r4, #0]
 8001aac:	f021 0104 	bicge.w	r1, r1, #4
 8001ab0:	6021      	strge	r1, [r4, #0]
 8001ab2:	b90e      	cbnz	r6, 8001ab8 <_printf_i+0x118>
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	d04d      	beq.n	8001b54 <_printf_i+0x1b4>
 8001ab8:	4615      	mov	r5, r2
 8001aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8001abe:	fb03 6711 	mls	r7, r3, r1, r6
 8001ac2:	5dc7      	ldrb	r7, [r0, r7]
 8001ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ac8:	4637      	mov	r7, r6
 8001aca:	42bb      	cmp	r3, r7
 8001acc:	460e      	mov	r6, r1
 8001ace:	d9f4      	bls.n	8001aba <_printf_i+0x11a>
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d10b      	bne.n	8001aec <_printf_i+0x14c>
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	07de      	lsls	r6, r3, #31
 8001ad8:	d508      	bpl.n	8001aec <_printf_i+0x14c>
 8001ada:	6923      	ldr	r3, [r4, #16]
 8001adc:	6861      	ldr	r1, [r4, #4]
 8001ade:	4299      	cmp	r1, r3
 8001ae0:	bfde      	ittt	le
 8001ae2:	2330      	movle	r3, #48	; 0x30
 8001ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001aec:	1b52      	subs	r2, r2, r5
 8001aee:	6122      	str	r2, [r4, #16]
 8001af0:	f8cd a000 	str.w	sl, [sp]
 8001af4:	464b      	mov	r3, r9
 8001af6:	aa03      	add	r2, sp, #12
 8001af8:	4621      	mov	r1, r4
 8001afa:	4640      	mov	r0, r8
 8001afc:	f7ff fee2 	bl	80018c4 <_printf_common>
 8001b00:	3001      	adds	r0, #1
 8001b02:	d14c      	bne.n	8001b9e <_printf_i+0x1fe>
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	b004      	add	sp, #16
 8001b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b0e:	4835      	ldr	r0, [pc, #212]	; (8001be4 <_printf_i+0x244>)
 8001b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b14:	6829      	ldr	r1, [r5, #0]
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b1c:	6029      	str	r1, [r5, #0]
 8001b1e:	061d      	lsls	r5, r3, #24
 8001b20:	d514      	bpl.n	8001b4c <_printf_i+0x1ac>
 8001b22:	07df      	lsls	r7, r3, #31
 8001b24:	bf44      	itt	mi
 8001b26:	f043 0320 	orrmi.w	r3, r3, #32
 8001b2a:	6023      	strmi	r3, [r4, #0]
 8001b2c:	b91e      	cbnz	r6, 8001b36 <_printf_i+0x196>
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	f023 0320 	bic.w	r3, r3, #32
 8001b34:	6023      	str	r3, [r4, #0]
 8001b36:	2310      	movs	r3, #16
 8001b38:	e7b0      	b.n	8001a9c <_printf_i+0xfc>
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	2378      	movs	r3, #120	; 0x78
 8001b44:	4828      	ldr	r0, [pc, #160]	; (8001be8 <_printf_i+0x248>)
 8001b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b4a:	e7e3      	b.n	8001b14 <_printf_i+0x174>
 8001b4c:	0659      	lsls	r1, r3, #25
 8001b4e:	bf48      	it	mi
 8001b50:	b2b6      	uxthmi	r6, r6
 8001b52:	e7e6      	b.n	8001b22 <_printf_i+0x182>
 8001b54:	4615      	mov	r5, r2
 8001b56:	e7bb      	b.n	8001ad0 <_printf_i+0x130>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	6826      	ldr	r6, [r4, #0]
 8001b5c:	6961      	ldr	r1, [r4, #20]
 8001b5e:	1d18      	adds	r0, r3, #4
 8001b60:	6028      	str	r0, [r5, #0]
 8001b62:	0635      	lsls	r5, r6, #24
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	d501      	bpl.n	8001b6c <_printf_i+0x1cc>
 8001b68:	6019      	str	r1, [r3, #0]
 8001b6a:	e002      	b.n	8001b72 <_printf_i+0x1d2>
 8001b6c:	0670      	lsls	r0, r6, #25
 8001b6e:	d5fb      	bpl.n	8001b68 <_printf_i+0x1c8>
 8001b70:	8019      	strh	r1, [r3, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	6123      	str	r3, [r4, #16]
 8001b76:	4615      	mov	r5, r2
 8001b78:	e7ba      	b.n	8001af0 <_printf_i+0x150>
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	602a      	str	r2, [r5, #0]
 8001b80:	681d      	ldr	r5, [r3, #0]
 8001b82:	6862      	ldr	r2, [r4, #4]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4628      	mov	r0, r5
 8001b88:	f7fe fb2a 	bl	80001e0 <memchr>
 8001b8c:	b108      	cbz	r0, 8001b92 <_printf_i+0x1f2>
 8001b8e:	1b40      	subs	r0, r0, r5
 8001b90:	6060      	str	r0, [r4, #4]
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	6123      	str	r3, [r4, #16]
 8001b96:	2300      	movs	r3, #0
 8001b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b9c:	e7a8      	b.n	8001af0 <_printf_i+0x150>
 8001b9e:	6923      	ldr	r3, [r4, #16]
 8001ba0:	462a      	mov	r2, r5
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	47d0      	blx	sl
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d0ab      	beq.n	8001b04 <_printf_i+0x164>
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	079b      	lsls	r3, r3, #30
 8001bb0:	d413      	bmi.n	8001bda <_printf_i+0x23a>
 8001bb2:	68e0      	ldr	r0, [r4, #12]
 8001bb4:	9b03      	ldr	r3, [sp, #12]
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	bfb8      	it	lt
 8001bba:	4618      	movlt	r0, r3
 8001bbc:	e7a4      	b.n	8001b08 <_printf_i+0x168>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4632      	mov	r2, r6
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	47d0      	blx	sl
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d09b      	beq.n	8001b04 <_printf_i+0x164>
 8001bcc:	3501      	adds	r5, #1
 8001bce:	68e3      	ldr	r3, [r4, #12]
 8001bd0:	9903      	ldr	r1, [sp, #12]
 8001bd2:	1a5b      	subs	r3, r3, r1
 8001bd4:	42ab      	cmp	r3, r5
 8001bd6:	dcf2      	bgt.n	8001bbe <_printf_i+0x21e>
 8001bd8:	e7eb      	b.n	8001bb2 <_printf_i+0x212>
 8001bda:	2500      	movs	r5, #0
 8001bdc:	f104 0619 	add.w	r6, r4, #25
 8001be0:	e7f5      	b.n	8001bce <_printf_i+0x22e>
 8001be2:	bf00      	nop
 8001be4:	08001eff 	.word	0x08001eff
 8001be8:	08001f10 	.word	0x08001f10

08001bec <memcpy>:
 8001bec:	440a      	add	r2, r1
 8001bee:	4291      	cmp	r1, r2
 8001bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001bf4:	d100      	bne.n	8001bf8 <memcpy+0xc>
 8001bf6:	4770      	bx	lr
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c02:	4291      	cmp	r1, r2
 8001c04:	d1f9      	bne.n	8001bfa <memcpy+0xe>
 8001c06:	bd10      	pop	{r4, pc}

08001c08 <memmove>:
 8001c08:	4288      	cmp	r0, r1
 8001c0a:	b510      	push	{r4, lr}
 8001c0c:	eb01 0402 	add.w	r4, r1, r2
 8001c10:	d902      	bls.n	8001c18 <memmove+0x10>
 8001c12:	4284      	cmp	r4, r0
 8001c14:	4623      	mov	r3, r4
 8001c16:	d807      	bhi.n	8001c28 <memmove+0x20>
 8001c18:	1e43      	subs	r3, r0, #1
 8001c1a:	42a1      	cmp	r1, r4
 8001c1c:	d008      	beq.n	8001c30 <memmove+0x28>
 8001c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c26:	e7f8      	b.n	8001c1a <memmove+0x12>
 8001c28:	4402      	add	r2, r0
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	428a      	cmp	r2, r1
 8001c2e:	d100      	bne.n	8001c32 <memmove+0x2a>
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c3a:	e7f7      	b.n	8001c2c <memmove+0x24>

08001c3c <_free_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	4605      	mov	r5, r0
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d041      	beq.n	8001cc8 <_free_r+0x8c>
 8001c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c48:	1f0c      	subs	r4, r1, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bfb8      	it	lt
 8001c4e:	18e4      	addlt	r4, r4, r3
 8001c50:	f000 f912 	bl	8001e78 <__malloc_lock>
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <_free_r+0x90>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	b933      	cbnz	r3, 8001c68 <_free_r+0x2c>
 8001c5a:	6063      	str	r3, [r4, #4]
 8001c5c:	6014      	str	r4, [r2, #0]
 8001c5e:	4628      	mov	r0, r5
 8001c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c64:	f000 b90e 	b.w	8001e84 <__malloc_unlock>
 8001c68:	42a3      	cmp	r3, r4
 8001c6a:	d908      	bls.n	8001c7e <_free_r+0x42>
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	1821      	adds	r1, r4, r0
 8001c70:	428b      	cmp	r3, r1
 8001c72:	bf01      	itttt	eq
 8001c74:	6819      	ldreq	r1, [r3, #0]
 8001c76:	685b      	ldreq	r3, [r3, #4]
 8001c78:	1809      	addeq	r1, r1, r0
 8001c7a:	6021      	streq	r1, [r4, #0]
 8001c7c:	e7ed      	b.n	8001c5a <_free_r+0x1e>
 8001c7e:	461a      	mov	r2, r3
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b10b      	cbz	r3, 8001c88 <_free_r+0x4c>
 8001c84:	42a3      	cmp	r3, r4
 8001c86:	d9fa      	bls.n	8001c7e <_free_r+0x42>
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	1850      	adds	r0, r2, r1
 8001c8c:	42a0      	cmp	r0, r4
 8001c8e:	d10b      	bne.n	8001ca8 <_free_r+0x6c>
 8001c90:	6820      	ldr	r0, [r4, #0]
 8001c92:	4401      	add	r1, r0
 8001c94:	1850      	adds	r0, r2, r1
 8001c96:	4283      	cmp	r3, r0
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	d1e0      	bne.n	8001c5e <_free_r+0x22>
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	6053      	str	r3, [r2, #4]
 8001ca2:	4401      	add	r1, r0
 8001ca4:	6011      	str	r1, [r2, #0]
 8001ca6:	e7da      	b.n	8001c5e <_free_r+0x22>
 8001ca8:	d902      	bls.n	8001cb0 <_free_r+0x74>
 8001caa:	230c      	movs	r3, #12
 8001cac:	602b      	str	r3, [r5, #0]
 8001cae:	e7d6      	b.n	8001c5e <_free_r+0x22>
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	1821      	adds	r1, r4, r0
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	bf04      	itt	eq
 8001cb8:	6819      	ldreq	r1, [r3, #0]
 8001cba:	685b      	ldreq	r3, [r3, #4]
 8001cbc:	6063      	str	r3, [r4, #4]
 8001cbe:	bf04      	itt	eq
 8001cc0:	1809      	addeq	r1, r1, r0
 8001cc2:	6021      	streq	r1, [r4, #0]
 8001cc4:	6054      	str	r4, [r2, #4]
 8001cc6:	e7ca      	b.n	8001c5e <_free_r+0x22>
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000020c 	.word	0x2000020c

08001cd0 <sbrk_aligned>:
 8001cd0:	b570      	push	{r4, r5, r6, lr}
 8001cd2:	4e0e      	ldr	r6, [pc, #56]	; (8001d0c <sbrk_aligned+0x3c>)
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	6831      	ldr	r1, [r6, #0]
 8001cd8:	4605      	mov	r5, r0
 8001cda:	b911      	cbnz	r1, 8001ce2 <sbrk_aligned+0x12>
 8001cdc:	f000 f8bc 	bl	8001e58 <_sbrk_r>
 8001ce0:	6030      	str	r0, [r6, #0]
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f000 f8b7 	bl	8001e58 <_sbrk_r>
 8001cea:	1c43      	adds	r3, r0, #1
 8001cec:	d00a      	beq.n	8001d04 <sbrk_aligned+0x34>
 8001cee:	1cc4      	adds	r4, r0, #3
 8001cf0:	f024 0403 	bic.w	r4, r4, #3
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	d007      	beq.n	8001d08 <sbrk_aligned+0x38>
 8001cf8:	1a21      	subs	r1, r4, r0
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 f8ac 	bl	8001e58 <_sbrk_r>
 8001d00:	3001      	adds	r0, #1
 8001d02:	d101      	bne.n	8001d08 <sbrk_aligned+0x38>
 8001d04:	f04f 34ff 	mov.w	r4, #4294967295
 8001d08:	4620      	mov	r0, r4
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	20000210 	.word	0x20000210

08001d10 <_malloc_r>:
 8001d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d14:	1ccd      	adds	r5, r1, #3
 8001d16:	f025 0503 	bic.w	r5, r5, #3
 8001d1a:	3508      	adds	r5, #8
 8001d1c:	2d0c      	cmp	r5, #12
 8001d1e:	bf38      	it	cc
 8001d20:	250c      	movcc	r5, #12
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	4607      	mov	r7, r0
 8001d26:	db01      	blt.n	8001d2c <_malloc_r+0x1c>
 8001d28:	42a9      	cmp	r1, r5
 8001d2a:	d905      	bls.n	8001d38 <_malloc_r+0x28>
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	2600      	movs	r6, #0
 8001d32:	4630      	mov	r0, r6
 8001d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d38:	4e2e      	ldr	r6, [pc, #184]	; (8001df4 <_malloc_r+0xe4>)
 8001d3a:	f000 f89d 	bl	8001e78 <__malloc_lock>
 8001d3e:	6833      	ldr	r3, [r6, #0]
 8001d40:	461c      	mov	r4, r3
 8001d42:	bb34      	cbnz	r4, 8001d92 <_malloc_r+0x82>
 8001d44:	4629      	mov	r1, r5
 8001d46:	4638      	mov	r0, r7
 8001d48:	f7ff ffc2 	bl	8001cd0 <sbrk_aligned>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	4604      	mov	r4, r0
 8001d50:	d14d      	bne.n	8001dee <_malloc_r+0xde>
 8001d52:	6834      	ldr	r4, [r6, #0]
 8001d54:	4626      	mov	r6, r4
 8001d56:	2e00      	cmp	r6, #0
 8001d58:	d140      	bne.n	8001ddc <_malloc_r+0xcc>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	4631      	mov	r1, r6
 8001d5e:	4638      	mov	r0, r7
 8001d60:	eb04 0803 	add.w	r8, r4, r3
 8001d64:	f000 f878 	bl	8001e58 <_sbrk_r>
 8001d68:	4580      	cmp	r8, r0
 8001d6a:	d13a      	bne.n	8001de2 <_malloc_r+0xd2>
 8001d6c:	6821      	ldr	r1, [r4, #0]
 8001d6e:	3503      	adds	r5, #3
 8001d70:	1a6d      	subs	r5, r5, r1
 8001d72:	f025 0503 	bic.w	r5, r5, #3
 8001d76:	3508      	adds	r5, #8
 8001d78:	2d0c      	cmp	r5, #12
 8001d7a:	bf38      	it	cc
 8001d7c:	250c      	movcc	r5, #12
 8001d7e:	4629      	mov	r1, r5
 8001d80:	4638      	mov	r0, r7
 8001d82:	f7ff ffa5 	bl	8001cd0 <sbrk_aligned>
 8001d86:	3001      	adds	r0, #1
 8001d88:	d02b      	beq.n	8001de2 <_malloc_r+0xd2>
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	442b      	add	r3, r5
 8001d8e:	6023      	str	r3, [r4, #0]
 8001d90:	e00e      	b.n	8001db0 <_malloc_r+0xa0>
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	1b52      	subs	r2, r2, r5
 8001d96:	d41e      	bmi.n	8001dd6 <_malloc_r+0xc6>
 8001d98:	2a0b      	cmp	r2, #11
 8001d9a:	d916      	bls.n	8001dca <_malloc_r+0xba>
 8001d9c:	1961      	adds	r1, r4, r5
 8001d9e:	42a3      	cmp	r3, r4
 8001da0:	6025      	str	r5, [r4, #0]
 8001da2:	bf18      	it	ne
 8001da4:	6059      	strne	r1, [r3, #4]
 8001da6:	6863      	ldr	r3, [r4, #4]
 8001da8:	bf08      	it	eq
 8001daa:	6031      	streq	r1, [r6, #0]
 8001dac:	5162      	str	r2, [r4, r5]
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	4638      	mov	r0, r7
 8001db2:	f104 060b 	add.w	r6, r4, #11
 8001db6:	f000 f865 	bl	8001e84 <__malloc_unlock>
 8001dba:	f026 0607 	bic.w	r6, r6, #7
 8001dbe:	1d23      	adds	r3, r4, #4
 8001dc0:	1af2      	subs	r2, r6, r3
 8001dc2:	d0b6      	beq.n	8001d32 <_malloc_r+0x22>
 8001dc4:	1b9b      	subs	r3, r3, r6
 8001dc6:	50a3      	str	r3, [r4, r2]
 8001dc8:	e7b3      	b.n	8001d32 <_malloc_r+0x22>
 8001dca:	6862      	ldr	r2, [r4, #4]
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	bf0c      	ite	eq
 8001dd0:	6032      	streq	r2, [r6, #0]
 8001dd2:	605a      	strne	r2, [r3, #4]
 8001dd4:	e7ec      	b.n	8001db0 <_malloc_r+0xa0>
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	6864      	ldr	r4, [r4, #4]
 8001dda:	e7b2      	b.n	8001d42 <_malloc_r+0x32>
 8001ddc:	4634      	mov	r4, r6
 8001dde:	6876      	ldr	r6, [r6, #4]
 8001de0:	e7b9      	b.n	8001d56 <_malloc_r+0x46>
 8001de2:	230c      	movs	r3, #12
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4638      	mov	r0, r7
 8001de8:	f000 f84c 	bl	8001e84 <__malloc_unlock>
 8001dec:	e7a1      	b.n	8001d32 <_malloc_r+0x22>
 8001dee:	6025      	str	r5, [r4, #0]
 8001df0:	e7de      	b.n	8001db0 <_malloc_r+0xa0>
 8001df2:	bf00      	nop
 8001df4:	2000020c 	.word	0x2000020c

08001df8 <_realloc_r>:
 8001df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4614      	mov	r4, r2
 8001e00:	460e      	mov	r6, r1
 8001e02:	b921      	cbnz	r1, 8001e0e <_realloc_r+0x16>
 8001e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e08:	4611      	mov	r1, r2
 8001e0a:	f7ff bf81 	b.w	8001d10 <_malloc_r>
 8001e0e:	b92a      	cbnz	r2, 8001e1c <_realloc_r+0x24>
 8001e10:	f7ff ff14 	bl	8001c3c <_free_r>
 8001e14:	4625      	mov	r5, r4
 8001e16:	4628      	mov	r0, r5
 8001e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e1c:	f000 f838 	bl	8001e90 <_malloc_usable_size_r>
 8001e20:	4284      	cmp	r4, r0
 8001e22:	4607      	mov	r7, r0
 8001e24:	d802      	bhi.n	8001e2c <_realloc_r+0x34>
 8001e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e2a:	d812      	bhi.n	8001e52 <_realloc_r+0x5a>
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	4640      	mov	r0, r8
 8001e30:	f7ff ff6e 	bl	8001d10 <_malloc_r>
 8001e34:	4605      	mov	r5, r0
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d0ed      	beq.n	8001e16 <_realloc_r+0x1e>
 8001e3a:	42bc      	cmp	r4, r7
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	4631      	mov	r1, r6
 8001e40:	bf28      	it	cs
 8001e42:	463a      	movcs	r2, r7
 8001e44:	f7ff fed2 	bl	8001bec <memcpy>
 8001e48:	4631      	mov	r1, r6
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	f7ff fef6 	bl	8001c3c <_free_r>
 8001e50:	e7e1      	b.n	8001e16 <_realloc_r+0x1e>
 8001e52:	4635      	mov	r5, r6
 8001e54:	e7df      	b.n	8001e16 <_realloc_r+0x1e>
	...

08001e58 <_sbrk_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4d06      	ldr	r5, [pc, #24]	; (8001e74 <_sbrk_r+0x1c>)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4608      	mov	r0, r1
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	f7fe fba8 	bl	80005b8 <_sbrk>
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	d102      	bne.n	8001e72 <_sbrk_r+0x1a>
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	b103      	cbz	r3, 8001e72 <_sbrk_r+0x1a>
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	20000214 	.word	0x20000214

08001e78 <__malloc_lock>:
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <__malloc_lock+0x8>)
 8001e7a:	f000 b811 	b.w	8001ea0 <__retarget_lock_acquire_recursive>
 8001e7e:	bf00      	nop
 8001e80:	20000218 	.word	0x20000218

08001e84 <__malloc_unlock>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__malloc_unlock+0x8>)
 8001e86:	f000 b80c 	b.w	8001ea2 <__retarget_lock_release_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	20000218 	.word	0x20000218

08001e90 <_malloc_usable_size_r>:
 8001e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e94:	1f18      	subs	r0, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bfbc      	itt	lt
 8001e9a:	580b      	ldrlt	r3, [r1, r0]
 8001e9c:	18c0      	addlt	r0, r0, r3
 8001e9e:	4770      	bx	lr

08001ea0 <__retarget_lock_acquire_recursive>:
 8001ea0:	4770      	bx	lr

08001ea2 <__retarget_lock_release_recursive>:
 8001ea2:	4770      	bx	lr

08001ea4 <_init>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr

08001eb0 <_fini>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr
