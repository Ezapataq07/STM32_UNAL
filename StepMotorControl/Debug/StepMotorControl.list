
StepMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b88  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d28  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000008  08000d2c  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000d2c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cff  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007ee  00000000  00000000  00021d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00022520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00022688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f0a1  00000000  00000000  00022798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002143  00000000  00000000  00031839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054693  00000000  00000000  0003397c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008800f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d0  00000000  00000000  00088060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d08 	.word	0x08000d08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08000d08 	.word	0x08000d08

080001d8 <main>:

/* Definición de los prototipos de las funciones */
void initSystem(void);


int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Se inicializa la configuración
	initSystem();
 80001dc:	f000 f810 	bl	8000200 <initSystem>
//	moveStepMotor(&StepMotor, 1024, CLOCKWISE);
//	moveStepMotor(&StepMotor, 2048, COUNTERCLOCKWISE);
//	moveStepMotor(&StepMotor, 512, CLOCKWISE);
	/* Ciclo principal del programa */
	while(1){
		moveStepMotor(&StepMotor, 512, CLOCKWISE);
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <main+0x24>)
 80001e8:	f000 fb72 	bl	80008d0 <moveStepMotor>
		moveStepMotor(&StepMotor, 512, COUNTERCLOCKWISE);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f2:	4802      	ldr	r0, [pc, #8]	; (80001fc <main+0x24>)
 80001f4:	f000 fb6c 	bl	80008d0 <moveStepMotor>
		moveStepMotor(&StepMotor, 512, CLOCKWISE);
 80001f8:	e7f2      	b.n	80001e0 <main+0x8>
 80001fa:	bf00      	nop
 80001fc:	20000070 	.word	0x20000070

08000200 <initSystem>:


	return 0;
}

void initSystem(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	config_SysTickMs();
 8000204:	f000 fcd8 	bl	8000bb8 <config_SysTickMs>
	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 8000208:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <initSystem+0xfc>)
 800020a:	4a3d      	ldr	r2, [pc, #244]	; (8000300 <initSystem+0x100>)
 800020c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800020e:	4b3b      	ldr	r3, [pc, #236]	; (80002fc <initSystem+0xfc>)
 8000210:	2205      	movs	r2, #5
 8000212:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000214:	4b39      	ldr	r3, [pc, #228]	; (80002fc <initSystem+0xfc>)
 8000216:	2201      	movs	r2, #1
 8000218:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800021a:	4b38      	ldr	r3, [pc, #224]	; (80002fc <initSystem+0xfc>)
 800021c:	2200      	movs	r2, #0
 800021e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000220:	4b36      	ldr	r3, [pc, #216]	; (80002fc <initSystem+0xfc>)
 8000222:	2201      	movs	r2, #1
 8000224:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8000226:	4835      	ldr	r0, [pc, #212]	; (80002fc <initSystem+0xfc>)
 8000228:	f000 fa00 	bl	800062c <GPIO_Config>


	/* Configuración del LED correspondiente a la segmento A */
	IN1.pGPIOx 										= GPIOB;
 800022c:	4b35      	ldr	r3, [pc, #212]	; (8000304 <initSystem+0x104>)
 800022e:	4a36      	ldr	r2, [pc, #216]	; (8000308 <initSystem+0x108>)
 8000230:	601a      	str	r2, [r3, #0]
	IN1.GPIO_PinConfig.GPIO_PinNumber				= PIN_4;
 8000232:	4b34      	ldr	r3, [pc, #208]	; (8000304 <initSystem+0x104>)
 8000234:	2204      	movs	r2, #4
 8000236:	711a      	strb	r2, [r3, #4]
	IN1.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8000238:	4b32      	ldr	r3, [pc, #200]	; (8000304 <initSystem+0x104>)
 800023a:	2201      	movs	r2, #1
 800023c:	715a      	strb	r2, [r3, #5]
	IN1.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 800023e:	4b31      	ldr	r3, [pc, #196]	; (8000304 <initSystem+0x104>)
 8000240:	2200      	movs	r2, #0
 8000242:	721a      	strb	r2, [r3, #8]
	IN1.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000244:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <initSystem+0x104>)
 8000246:	2203      	movs	r2, #3
 8000248:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento
	GPIO_Config(&IN1);
 800024a:	482e      	ldr	r0, [pc, #184]	; (8000304 <initSystem+0x104>)
 800024c:	f000 f9ee 	bl	800062c <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento B */
	IN2.pGPIOx 										= GPIOB;
 8000250:	4b2e      	ldr	r3, [pc, #184]	; (800030c <initSystem+0x10c>)
 8000252:	4a2d      	ldr	r2, [pc, #180]	; (8000308 <initSystem+0x108>)
 8000254:	601a      	str	r2, [r3, #0]
	IN2.GPIO_PinConfig.GPIO_PinNumber				= PIN_10;
 8000256:	4b2d      	ldr	r3, [pc, #180]	; (800030c <initSystem+0x10c>)
 8000258:	220a      	movs	r2, #10
 800025a:	711a      	strb	r2, [r3, #4]
	IN2.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 800025c:	4b2b      	ldr	r3, [pc, #172]	; (800030c <initSystem+0x10c>)
 800025e:	2201      	movs	r2, #1
 8000260:	715a      	strb	r2, [r3, #5]
	IN2.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000262:	4b2a      	ldr	r3, [pc, #168]	; (800030c <initSystem+0x10c>)
 8000264:	2200      	movs	r2, #0
 8000266:	721a      	strb	r2, [r3, #8]
	IN2.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000268:	4b28      	ldr	r3, [pc, #160]	; (800030c <initSystem+0x10c>)
 800026a:	2203      	movs	r2, #3
 800026c:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&IN2);
 800026e:	4827      	ldr	r0, [pc, #156]	; (800030c <initSystem+0x10c>)
 8000270:	f000 f9dc 	bl	800062c <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento C */
	IN3.pGPIOx 										= GPIOA;
 8000274:	4b26      	ldr	r3, [pc, #152]	; (8000310 <initSystem+0x110>)
 8000276:	4a22      	ldr	r2, [pc, #136]	; (8000300 <initSystem+0x100>)
 8000278:	601a      	str	r2, [r3, #0]
	IN3.GPIO_PinConfig.GPIO_PinNumber				= PIN_8;
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <initSystem+0x110>)
 800027c:	2208      	movs	r2, #8
 800027e:	711a      	strb	r2, [r3, #4]
	IN3.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8000280:	4b23      	ldr	r3, [pc, #140]	; (8000310 <initSystem+0x110>)
 8000282:	2201      	movs	r2, #1
 8000284:	715a      	strb	r2, [r3, #5]
	IN3.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <initSystem+0x110>)
 8000288:	2200      	movs	r2, #0
 800028a:	721a      	strb	r2, [r3, #8]
	IN3.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 800028c:	4b20      	ldr	r3, [pc, #128]	; (8000310 <initSystem+0x110>)
 800028e:	2203      	movs	r2, #3
 8000290:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&IN3);
 8000292:	481f      	ldr	r0, [pc, #124]	; (8000310 <initSystem+0x110>)
 8000294:	f000 f9ca 	bl	800062c <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento D */
	IN4.pGPIOx 										= GPIOA;
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <initSystem+0x114>)
 800029a:	4a19      	ldr	r2, [pc, #100]	; (8000300 <initSystem+0x100>)
 800029c:	601a      	str	r2, [r3, #0]
	IN4.GPIO_PinConfig.GPIO_PinNumber				= PIN_9;
 800029e:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <initSystem+0x114>)
 80002a0:	2209      	movs	r2, #9
 80002a2:	711a      	strb	r2, [r3, #4]
	IN4.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <initSystem+0x114>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	715a      	strb	r2, [r3, #5]
	IN4.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <initSystem+0x114>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	721a      	strb	r2, [r3, #8]
	IN4.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <initSystem+0x114>)
 80002b2:	2203      	movs	r2, #3
 80002b4:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&IN4);
 80002b6:	4817      	ldr	r0, [pc, #92]	; (8000314 <initSystem+0x114>)
 80002b8:	f000 f9b8 	bl	800062c <GPIO_Config>

	StepMotor.IN1 = &IN1;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <initSystem+0x118>)
 80002be:	4a11      	ldr	r2, [pc, #68]	; (8000304 <initSystem+0x104>)
 80002c0:	601a      	str	r2, [r3, #0]
	StepMotor.IN2 = &IN2;
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <initSystem+0x118>)
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <initSystem+0x10c>)
 80002c6:	605a      	str	r2, [r3, #4]
	StepMotor.IN3 = &IN3;
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <initSystem+0x118>)
 80002ca:	4a11      	ldr	r2, [pc, #68]	; (8000310 <initSystem+0x110>)
 80002cc:	609a      	str	r2, [r3, #8]
	StepMotor.IN4 = &IN4;
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <initSystem+0x118>)
 80002d0:	4a10      	ldr	r2, [pc, #64]	; (8000314 <initSystem+0x114>)
 80002d2:	60da      	str	r2, [r3, #12]

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <initSystem+0x11c>)
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002da:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <initSystem+0x11c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_1ms;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <initSystem+0x11c>)
 80002e4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002e8:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <initSystem+0x11c>)
 80002ec:	22fa      	movs	r2, #250	; 0xfa
 80002ee:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <initSystem+0x11c>)
 80002f2:	f000 f895 	bl	8000420 <BTimer_Config>

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000024 	.word	0x20000024
 8000300:	40020000 	.word	0x40020000
 8000304:	20000040 	.word	0x20000040
 8000308:	40020400 	.word	0x40020400
 800030c:	2000004c 	.word	0x2000004c
 8000310:	20000058 	.word	0x20000058
 8000314:	20000064 	.word	0x20000064
 8000318:	20000070 	.word	0x20000070
 800031c:	20000030 	.word	0x20000030

08000320 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <BTimer2_Callback+0x1c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	695a      	ldr	r2, [r3, #20]
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <BTimer2_Callback+0x1c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f082 0220 	eor.w	r2, r2, #32
 8000332:	615a      	str	r2, [r3, #20]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20000024 	.word	0x20000024

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	; (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	; (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	; (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 fca7 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ff31 	bl	80001d8 <main>

08000376 <LoopForever>:

LoopForever:
    b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000384:	08000d28 	.word	0x08000d28
  ldr r2, =_sbss
 8000388:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800038c:	20000098 	.word	0x20000098

08000390 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	db0b      	blt.n	80003be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 021f 	and.w	r2, r3, #31
 80003ac:	4906      	ldr	r1, [pc, #24]	; (80003c8 <__NVIC_EnableIRQ+0x34>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	095b      	lsrs	r3, r3, #5
 80003b4:	2001      	movs	r0, #1
 80003b6:	fa00 f202 	lsl.w	r2, r0, r2
 80003ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	e000e100 	.word	0xe000e100

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	; (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a53      	ldr	r2, [pc, #332]	; (800057c <BTimer_Config+0x15c>)
 800042e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800043c:	d106      	bne.n	800044c <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800043e:	4b50      	ldr	r3, [pc, #320]	; (8000580 <BTimer_Config+0x160>)
 8000440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000442:	4a4f      	ldr	r2, [pc, #316]	; (8000580 <BTimer_Config+0x160>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6413      	str	r3, [r2, #64]	; 0x40
 800044a:	e022      	b.n	8000492 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a4c      	ldr	r2, [pc, #304]	; (8000584 <BTimer_Config+0x164>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000456:	4b4a      	ldr	r3, [pc, #296]	; (8000580 <BTimer_Config+0x160>)
 8000458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045a:	4a49      	ldr	r2, [pc, #292]	; (8000580 <BTimer_Config+0x160>)
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	6413      	str	r3, [r2, #64]	; 0x40
 8000462:	e016      	b.n	8000492 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a47      	ldr	r2, [pc, #284]	; (8000588 <BTimer_Config+0x168>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800046e:	4b44      	ldr	r3, [pc, #272]	; (8000580 <BTimer_Config+0x160>)
 8000470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000472:	4a43      	ldr	r2, [pc, #268]	; (8000580 <BTimer_Config+0x160>)
 8000474:	f043 0304 	orr.w	r3, r3, #4
 8000478:	6413      	str	r3, [r2, #64]	; 0x40
 800047a:	e00a      	b.n	8000492 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a42      	ldr	r2, [pc, #264]	; (800058c <BTimer_Config+0x16c>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d105      	bne.n	8000492 <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000486:	4b3e      	ldr	r3, [pc, #248]	; (8000580 <BTimer_Config+0x160>)
 8000488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048a:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <BTimer_Config+0x160>)
 800048c:	f043 0308 	orr.w	r3, r3, #8
 8000490:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d10c      	bne.n	80004b4 <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f022 0210 	bic.w	r2, r2, #16
 80004a8:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
 80004b2:	e00d      	b.n	80004d0 <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f042 0210 	orr.w	r2, r2, #16
 80004c2:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689a      	ldr	r2, [r3, #8]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3a01      	subs	r2, #1
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	88db      	ldrh	r3, [r3, #6]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3a01      	subs	r2, #1
 80004e6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f042 0201 	orr.w	r2, r2, #1
 80004f6:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68da      	ldr	r2, [r3, #12]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f042 0201 	orr.w	r2, r2, #1
 8000506:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000510:	d107      	bne.n	8000522 <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000512:	201c      	movs	r0, #28
 8000514:	f7ff ff3e 	bl	8000394 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000518:	2103      	movs	r1, #3
 800051a:	201c      	movs	r0, #28
 800051c:	f7ff ff56 	bl	80003cc <__NVIC_SetPriority>
 8000520:	e025      	b.n	800056e <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <BTimer_Config+0x164>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d107      	bne.n	800053c <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 800052c:	201d      	movs	r0, #29
 800052e:	f7ff ff31 	bl	8000394 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8000532:	2103      	movs	r1, #3
 8000534:	201d      	movs	r0, #29
 8000536:	f7ff ff49 	bl	80003cc <__NVIC_SetPriority>
 800053a:	e018      	b.n	800056e <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <BTimer_Config+0x168>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d107      	bne.n	8000556 <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000546:	201e      	movs	r0, #30
 8000548:	f7ff ff24 	bl	8000394 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 1);
 800054c:	2101      	movs	r1, #1
 800054e:	201e      	movs	r0, #30
 8000550:	f7ff ff3c 	bl	80003cc <__NVIC_SetPriority>
 8000554:	e00b      	b.n	800056e <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0c      	ldr	r2, [pc, #48]	; (800058c <BTimer_Config+0x16c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000560:	2032      	movs	r0, #50	; 0x32
 8000562:	f7ff ff17 	bl	8000394 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 8000566:	2104      	movs	r1, #4
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f7ff ff2f 	bl	80003cc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800056e:	b662      	cpsie	i
}
 8000570:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000080 	.word	0x20000080
 8000580:	40023800 	.word	0x40023800
 8000584:	40000400 	.word	0x40000400
 8000588:	40000800 	.word	0x40000800
 800058c:	40000c00 	.word	0x40000c00

08000590 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	 __NOP();
 8000594:	bf00      	nop
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
	 __NOP();
 80005a2:	bf00      	nop
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <BTimer5_Callback>:

__attribute__((weak)) void BTimer5_Callback(void){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	 __NOP();
 80005b0:	bf00      	nop
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80005be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c8:	f023 0301 	bic.w	r3, r3, #1
 80005cc:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 80005ce:	f7ff fea7 	bl	8000320 <BTimer2_Callback>

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <TIM3_IRQHandler+0x18>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <TIM3_IRQHandler+0x18>)
 80005e2:	f023 0301 	bic.w	r3, r3, #1
 80005e6:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 80005e8:	f7ff ffd2 	bl	8000590 <BTimer3_Callback>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40000400 	.word	0x40000400

080005f4 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <TIM4_IRQHandler+0x18>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <TIM4_IRQHandler+0x18>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000604:	f7ff ffcb 	bl	800059e <BTimer4_Callback>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40000800 	.word	0x40000800

08000610 <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <TIM5_IRQHandler+0x18>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <TIM5_IRQHandler+0x18>)
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 8000620:	f7ff ffc4 	bl	80005ac <BTimer5_Callback>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40000c00 	.word	0x40000c00

0800062c <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a87      	ldr	r2, [pc, #540]	; (8000860 <GPIO_Config+0x234>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000646:	4b87      	ldr	r3, [pc, #540]	; (8000864 <GPIO_Config+0x238>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a86      	ldr	r2, [pc, #536]	; (8000864 <GPIO_Config+0x238>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	e03a      	b.n	80006ca <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a83      	ldr	r2, [pc, #524]	; (8000868 <GPIO_Config+0x23c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800065e:	4b81      	ldr	r3, [pc, #516]	; (8000864 <GPIO_Config+0x238>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a80      	ldr	r2, [pc, #512]	; (8000864 <GPIO_Config+0x238>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	e02e      	b.n	80006ca <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a7e      	ldr	r2, [pc, #504]	; (800086c <GPIO_Config+0x240>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000676:	4b7b      	ldr	r3, [pc, #492]	; (8000864 <GPIO_Config+0x238>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a7a      	ldr	r2, [pc, #488]	; (8000864 <GPIO_Config+0x238>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	e022      	b.n	80006ca <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a79      	ldr	r2, [pc, #484]	; (8000870 <GPIO_Config+0x244>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800068e:	4b75      	ldr	r3, [pc, #468]	; (8000864 <GPIO_Config+0x238>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a74      	ldr	r2, [pc, #464]	; (8000864 <GPIO_Config+0x238>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	e016      	b.n	80006ca <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a74      	ldr	r2, [pc, #464]	; (8000874 <GPIO_Config+0x248>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 80006a6:	4b6f      	ldr	r3, [pc, #444]	; (8000864 <GPIO_Config+0x238>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a6e      	ldr	r2, [pc, #440]	; (8000864 <GPIO_Config+0x238>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	e00a      	b.n	80006ca <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a6f      	ldr	r2, [pc, #444]	; (8000878 <GPIO_Config+0x24c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d105      	bne.n	80006ca <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 80006be:	4b69      	ldr	r3, [pc, #420]	; (8000864 <GPIO_Config+0x238>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a68      	ldr	r2, [pc, #416]	; (8000864 <GPIO_Config+0x238>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	795b      	ldrb	r3, [r3, #5]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	400a      	ands	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7a1b      	ldrb	r3, [r3, #8]
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	4619      	mov	r1, r3
 8000726:	2301      	movs	r3, #1
 8000728:	408b      	lsls	r3, r1
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6859      	ldr	r1, [r3, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	430a      	orrs	r2, r1
 8000744:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	799b      	ldrb	r3, [r3, #6]
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	689a      	ldr	r2, [r3, #8]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	2103      	movs	r1, #3
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	400a      	ands	r2, r1
 8000774:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6899      	ldr	r1, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	430a      	orrs	r2, r1
 8000784:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	2103      	movs	r1, #3
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	400a      	ands	r2, r1
 80007b4:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68d9      	ldr	r1, [r3, #12]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d143      	bne.n	8000856 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	d81f      	bhi.n	8000816 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6a1a      	ldr	r2, [r3, #32]
 80007e4:	210f      	movs	r1, #15
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	43db      	mvns	r3, r3
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	400a      	ands	r2, r1
 80007f6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a1a      	ldr	r2, [r3, #32]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7a5b      	ldrb	r3, [r3, #9]
 8000802:	4619      	mov	r1, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	4619      	mov	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	430a      	orrs	r2, r1
 8000812:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000814:	e01f      	b.n	8000856 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	3b08      	subs	r3, #8
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000826:	210f      	movs	r1, #15
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	4619      	mov	r1, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	400a      	ands	r2, r1
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7a5b      	ldrb	r3, [r3, #9]
 8000844:	4619      	mov	r1, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	fa01 f303 	lsl.w	r3, r1, r3
 800084c:	4619      	mov	r1, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	430a      	orrs	r2, r1
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40020000 	.word	0x40020000
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40020800 	.word	0x40020800
 8000870:	40020c00 	.word	0x40020c00
 8000874:	40021000 	.word	0x40021000
 8000878:	40021c00 	.word	0x40021c00

0800087c <GPIO_WritePin>:
/**
 * Función utilizada para cambiar de estado el pin entregado en el handler, asignando el valor
 * entregado en la variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d10d      	bne.n	80008aa <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	4619      	mov	r1, r3
 800089a:	2301      	movs	r3, #1
 800089c:	408b      	lsls	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80008a8:	e00d      	b.n	80008c6 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	699a      	ldr	r2, [r3, #24]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	3310      	adds	r3, #16
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	619a      	str	r2, [r3, #24]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <moveStepMotor>:
#include "SysTickDriver.h"

uint8_t				step					= 1;
uint16_t			numStepsLeft			= 0;

void moveStepMotor(StepMotor_Handler_t *pStepMotorHandler, uint16_t numSteps, uint8_t direction){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	807b      	strh	r3, [r7, #2]
 80008dc:	4613      	mov	r3, r2
 80008de:	707b      	strb	r3, [r7, #1]
	numStepsLeft = numSteps;
 80008e0:	4aa5      	ldr	r2, [pc, #660]	; (8000b78 <moveStepMotor+0x2a8>)
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	8013      	strh	r3, [r2, #0]
	while(numStepsLeft > 0){
 80008e6:	e13d      	b.n	8000b64 <moveStepMotor+0x294>
		switch (step){
 80008e8:	4ba4      	ldr	r3, [pc, #656]	; (8000b7c <moveStepMotor+0x2ac>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	f200 80dc 	bhi.w	8000aac <moveStepMotor+0x1dc>
 80008f4:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <moveStepMotor+0x2c>)
 80008f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fa:	bf00      	nop
 80008fc:	0800091d 	.word	0x0800091d
 8000900:	0800094f 	.word	0x0800094f
 8000904:	08000981 	.word	0x08000981
 8000908:	080009b3 	.word	0x080009b3
 800090c:	080009e5 	.word	0x080009e5
 8000910:	08000a17 	.word	0x08000a17
 8000914:	08000a49 	.word	0x08000a49
 8000918:	08000a7b 	.word	0x08000a7b
		case 1:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, SET);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffaa 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffa4 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff9e 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff98 	bl	800087c <GPIO_WritePin>
			break;
 800094c:	e0af      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 2:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, SET);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff91 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, SET);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2101      	movs	r1, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff8b 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff85 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff7f 	bl	800087c <GPIO_WritePin>
			break;
 800097e:	e096      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 3:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff78 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, SET);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2101      	movs	r1, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff72 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff6c 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff66 	bl	800087c <GPIO_WritePin>
			break;
 80009b0:	e07d      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 4:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff5f 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, SET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2101      	movs	r1, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff59 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, SET);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2101      	movs	r1, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff53 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff4d 	bl	800087c <GPIO_WritePin>
			break;
 80009e2:	e064      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 5:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff46 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff40 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, SET);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff3a 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff34 	bl	800087c <GPIO_WritePin>
			break;
 8000a14:	e04b      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 6:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff2d 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff27 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, SET);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2101      	movs	r1, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff21 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, SET);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff1b 	bl	800087c <GPIO_WritePin>
			break;
 8000a46:	e032      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 7:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff14 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff0e 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff08 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, SET);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff02 	bl	800087c <GPIO_WritePin>
			break;
 8000a78:	e019      	b.n	8000aae <moveStepMotor+0x1de>
		}
		case 8:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, SET);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fefb 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fef5 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff feef 	bl	800087c <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, SET);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fee9 	bl	800087c <GPIO_WritePin>
			break;
 8000aaa:	e000      	b.n	8000aae <moveStepMotor+0x1de>
		}
		default:
		{
			break;
 8000aac:	bf00      	nop
		}
		}
		switch (direction){
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <moveStepMotor+0x1ea>
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d029      	beq.n	8000b0c <moveStepMotor+0x23c>
			}
			break;
		}
		default:
		{
			break;
 8000ab8:	e051      	b.n	8000b5e <moveStepMotor+0x28e>
			if (step == 8){
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <moveStepMotor+0x2ac>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d109      	bne.n	8000ad6 <moveStepMotor+0x206>
				step = 1;
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <moveStepMotor+0x2ac>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
				numStepsLeft--;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <moveStepMotor+0x2a8>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <moveStepMotor+0x2a8>)
 8000ad2:	801a      	strh	r2, [r3, #0]
			break;
 8000ad4:	e043      	b.n	8000b5e <moveStepMotor+0x28e>
			}else if ((step % 2) == 0){
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <moveStepMotor+0x2ac>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d10c      	bne.n	8000afe <moveStepMotor+0x22e>
				numStepsLeft--;
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <moveStepMotor+0x2a8>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <moveStepMotor+0x2a8>)
 8000aee:	801a      	strh	r2, [r3, #0]
				step++;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <moveStepMotor+0x2ac>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <moveStepMotor+0x2ac>)
 8000afa:	701a      	strb	r2, [r3, #0]
			break;
 8000afc:	e02f      	b.n	8000b5e <moveStepMotor+0x28e>
				step++;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b08:	701a      	strb	r2, [r3, #0]
			break;
 8000b0a:	e028      	b.n	8000b5e <moveStepMotor+0x28e>
			if (step == 1){
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d109      	bne.n	8000b28 <moveStepMotor+0x258>
				step = 8;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b16:	2208      	movs	r2, #8
 8000b18:	701a      	strb	r2, [r3, #0]
				numStepsLeft--;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <moveStepMotor+0x2a8>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <moveStepMotor+0x2a8>)
 8000b24:	801a      	strh	r2, [r3, #0]
			break;
 8000b26:	e019      	b.n	8000b5c <moveStepMotor+0x28c>
			}else if ((step % 2) == 0){
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10c      	bne.n	8000b50 <moveStepMotor+0x280>
				numStepsLeft--;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <moveStepMotor+0x2a8>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <moveStepMotor+0x2a8>)
 8000b40:	801a      	strh	r2, [r3, #0]
				step--;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b4c:	701a      	strb	r2, [r3, #0]
			break;
 8000b4e:	e005      	b.n	8000b5c <moveStepMotor+0x28c>
				step--;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <moveStepMotor+0x2ac>)
 8000b5a:	701a      	strb	r2, [r3, #0]
			break;
 8000b5c:	bf00      	nop
		}
		}
		delay_ms(10);
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f000 f886 	bl	8000c70 <delay_ms>
	while(numStepsLeft > 0){
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <moveStepMotor+0x2a8>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f47f aebd 	bne.w	80008e8 <moveStepMotor+0x18>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	20000000 	.word	0x20000000

08000b80 <__NVIC_EnableIRQ>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <__NVIC_EnableIRQ+0x34>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <config_SysTickMs>:
uint64_t ticks;
uint32_t sysTicksStart = 0;
uint32_t sysTicksEnd   = 0;

/**/
void config_SysTickMs(void){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8000bbc:	4914      	ldr	r1, [pc, #80]	; (8000c10 <config_SysTickMs+0x58>)
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	e9c1 2300 	strd	r2, r3, [r1]

	// Cargando el valor del limite de icrementos que representan 1ms
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bcc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000bd0:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop

	// Desactivamos la interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	6013      	str	r3, [r2, #0]

	// Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ffc2 	bl	8000b80 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <config_SysTickMs+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <config_SysTickMs+0x5c>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c08:	b662      	cpsie	i
}
 8000c0a:	bf00      	nop

	// Activamos las interrupciones globales
	__enable_irq();
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000088 	.word	0x20000088
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <getTicksMs>:

uint64_t getTicksMs(void){
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	return ticks;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <getTicksMs+0x14>)
 8000c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c22:	4610      	mov	r0, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000088 	.word	0x20000088

08000c30 <SysTick_Handler>:

/**/
void SysTick_Handler(void){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	//Verificamos que la interrupción se lanzó
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <SysTick_Handler+0x38>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00e      	beq.n	8000c5e <SysTick_Handler+0x2e>
		//Limpiamos la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <SysTick_Handler+0x38>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <SysTick_Handler+0x38>)
 8000c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
		//Incrementamos en 1 el contador
		ticks++;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SysTick_Handler+0x3c>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	1c50      	adds	r0, r2, #1
 8000c54:	f143 0100 	adc.w	r1, r3, #0
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Handler+0x3c>)
 8000c5a:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010
 8000c6c:	20000088 	.word	0x20000088

08000c70 <delay_ms>:

void delay_ms(uint32_t time){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	sysTicksStart = getTicksMs();
 8000c78:	f7ff ffce 	bl	8000c18 <getTicksMs>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <delay_ms+0x48>)
 8000c82:	601a      	str	r2, [r3, #0]
	sysTicksEnd = getTicksMs();
 8000c84:	f7ff ffc8 	bl	8000c18 <getTicksMs>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <delay_ms+0x4c>)
 8000c8e:	601a      	str	r2, [r3, #0]
	while ((sysTicksEnd - sysTicksStart) < time){
 8000c90:	e005      	b.n	8000c9e <delay_ms+0x2e>
		sysTicksEnd = getTicksMs();
 8000c92:	f7ff ffc1 	bl	8000c18 <getTicksMs>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <delay_ms+0x4c>)
 8000c9c:	601a      	str	r2, [r3, #0]
	while ((sysTicksEnd - sysTicksStart) < time){
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <delay_ms+0x4c>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <delay_ms+0x48>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d8f1      	bhi.n	8000c92 <delay_ms+0x22>
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000090 	.word	0x20000090
 8000cbc:	20000094 	.word	0x20000094

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4d0d      	ldr	r5, [pc, #52]	; (8000cf8 <__libc_init_array+0x38>)
 8000cc4:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <__libc_init_array+0x3c>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	2600      	movs	r6, #0
 8000ccc:	42a6      	cmp	r6, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	4d0b      	ldr	r5, [pc, #44]	; (8000d00 <__libc_init_array+0x40>)
 8000cd2:	4c0c      	ldr	r4, [pc, #48]	; (8000d04 <__libc_init_array+0x44>)
 8000cd4:	f000 f818 	bl	8000d08 <_init>
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	10a4      	asrs	r4, r4, #2
 8000cdc:	2600      	movs	r6, #0
 8000cde:	42a6      	cmp	r6, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce8:	4798      	blx	r3
 8000cea:	3601      	adds	r6, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	08000d20 	.word	0x08000d20
 8000cfc:	08000d20 	.word	0x08000d20
 8000d00:	08000d20 	.word	0x08000d20
 8000d04:	08000d24 	.word	0x08000d24

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
