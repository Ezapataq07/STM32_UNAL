
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001238  08001238  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001238  08001238  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001238  08001238  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001238  08001238  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001238  08001238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  0800124c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800124c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000209d  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000748  00000000  00000000  000220d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00022820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00022a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f0b7  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002190  00000000  00000000  00031c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548a3  00000000  00000000  00033e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000886c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000066c  00000000  00000000  00088714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001220 	.word	0x08001220

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001220 	.word	0x08001220

080001d8 <main>:

/* Definición de los prototipos de las funciones */
void initSystem(void);
void Display_WriteNumber(uint8_t number);

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Se inicializa la configuración
	initSystem();
 80001dc:	f000 f834 	bl	8000248 <initSystem>

	/* Ciclo principal del programa */
	while(1){
		// Se verifica si el display (cualquiera que sea) está configurado o no
		if (displaySet == false){
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <main+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1fb      	bne.n	80001e0 <main+0x8>
			// Como no está configurado, se verifica el estado de uno de los Displays, en este caso el de las unidades
			display2State = GPIO_ReadPin(&handlerDisplay2);
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <main+0x5c>)
 80001ea:	f000 ffdd 	bl	80011a8 <GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b11      	ldr	r3, [pc, #68]	; (8000238 <main+0x60>)
 80001f4:	701a      	strb	r2, [r3, #0]
			if(display2State == SET){
 80001f6:	4b10      	ldr	r3, [pc, #64]	; (8000238 <main+0x60>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d10b      	bne.n	8000216 <main+0x3e>
				// Como el display2 es el que está encendido, entonces se pone la configuración del número de las unidades
				Display_WriteNumber(numbers[units]);
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <main+0x64>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	461a      	mov	r2, r3
 8000204:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <main+0x68>)
 8000206:	5c9b      	ldrb	r3, [r3, r2]
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f9e1 	bl	80005d0 <Display_WriteNumber>
				// La configuración del Display está lista, de manera que no es necesario configurarlo de nuevo hasta una nueva interrupción del Timer
				displaySet = true;
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <main+0x58>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
 8000214:	e7e4      	b.n	80001e0 <main+0x8>
			}
			else{
				// En este caso el Display1 está encendido, entonces se pone la configuración del número de las decenas
				Display_WriteNumber(numbers[tens]);
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <main+0x6c>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	461a      	mov	r2, r3
 800021c:	4b08      	ldr	r3, [pc, #32]	; (8000240 <main+0x68>)
 800021e:	5c9b      	ldrb	r3, [r3, r2]
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9d5 	bl	80005d0 <Display_WriteNumber>
				// La configuración del Display está lista, de manera que no es necesario configurarlo de nuevo hasta una nueva interrupción del Timer
				displaySet = true;
 8000226:	4b02      	ldr	r3, [pc, #8]	; (8000230 <main+0x58>)
 8000228:	2201      	movs	r2, #1
 800022a:	701a      	strb	r2, [r3, #0]
		if (displaySet == false){
 800022c:	e7d8      	b.n	80001e0 <main+0x8>
 800022e:	bf00      	nop
 8000230:	200000d7 	.word	0x200000d7
 8000234:	20000060 	.word	0x20000060
 8000238:	200000d4 	.word	0x200000d4
 800023c:	200000d5 	.word	0x200000d5
 8000240:	20000000 	.word	0x20000000
 8000244:	200000d6 	.word	0x200000d6

08000248 <initSystem>:


	return 0;
}

void initSystem(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 800024c:	4b87      	ldr	r3, [pc, #540]	; (800046c <initSystem+0x224>)
 800024e:	4a88      	ldr	r2, [pc, #544]	; (8000470 <initSystem+0x228>)
 8000250:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000252:	4b86      	ldr	r3, [pc, #536]	; (800046c <initSystem+0x224>)
 8000254:	2205      	movs	r2, #5
 8000256:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000258:	4b84      	ldr	r3, [pc, #528]	; (800046c <initSystem+0x224>)
 800025a:	2201      	movs	r2, #1
 800025c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800025e:	4b83      	ldr	r3, [pc, #524]	; (800046c <initSystem+0x224>)
 8000260:	2200      	movs	r2, #0
 8000262:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000264:	4b81      	ldr	r3, [pc, #516]	; (800046c <initSystem+0x224>)
 8000266:	2201      	movs	r2, #1
 8000268:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 800026a:	4880      	ldr	r0, [pc, #512]	; (800046c <initSystem+0x224>)
 800026c:	f000 fe4a 	bl	8000f04 <GPIO_Config>

	/* Configuración del Display1 */
	handlerDisplay1.pGPIOx 									= GPIOB;
 8000270:	4b80      	ldr	r3, [pc, #512]	; (8000474 <initSystem+0x22c>)
 8000272:	4a81      	ldr	r2, [pc, #516]	; (8000478 <initSystem+0x230>)
 8000274:	601a      	str	r2, [r3, #0]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinNumber			= PIN_8;
 8000276:	4b7f      	ldr	r3, [pc, #508]	; (8000474 <initSystem+0x22c>)
 8000278:	2208      	movs	r2, #8
 800027a:	711a      	strb	r2, [r3, #4]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 800027c:	4b7d      	ldr	r3, [pc, #500]	; (8000474 <initSystem+0x22c>)
 800027e:	2201      	movs	r2, #1
 8000280:	715a      	strb	r2, [r3, #5]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000282:	4b7c      	ldr	r3, [pc, #496]	; (8000474 <initSystem+0x22c>)
 8000284:	2200      	movs	r2, #0
 8000286:	721a      	strb	r2, [r3, #8]
	handlerDisplay1.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 8000288:	4b7a      	ldr	r3, [pc, #488]	; (8000474 <initSystem+0x22c>)
 800028a:	2203      	movs	r2, #3
 800028c:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del Display1
	GPIO_Config(&handlerDisplay1);
 800028e:	4879      	ldr	r0, [pc, #484]	; (8000474 <initSystem+0x22c>)
 8000290:	f000 fe38 	bl	8000f04 <GPIO_Config>

	/* Configuración del Display2 */
	handlerDisplay2.pGPIOx 									= GPIOB;
 8000294:	4b79      	ldr	r3, [pc, #484]	; (800047c <initSystem+0x234>)
 8000296:	4a78      	ldr	r2, [pc, #480]	; (8000478 <initSystem+0x230>)
 8000298:	601a      	str	r2, [r3, #0]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinNumber			= PIN_9;
 800029a:	4b78      	ldr	r3, [pc, #480]	; (800047c <initSystem+0x234>)
 800029c:	2209      	movs	r2, #9
 800029e:	711a      	strb	r2, [r3, #4]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80002a0:	4b76      	ldr	r3, [pc, #472]	; (800047c <initSystem+0x234>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	715a      	strb	r2, [r3, #5]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80002a6:	4b75      	ldr	r3, [pc, #468]	; (800047c <initSystem+0x234>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	721a      	strb	r2, [r3, #8]
	handlerDisplay2.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 80002ac:	4b73      	ldr	r3, [pc, #460]	; (800047c <initSystem+0x234>)
 80002ae:	2203      	movs	r2, #3
 80002b0:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del Display2
	GPIO_Config(&handlerDisplay2);
 80002b2:	4872      	ldr	r0, [pc, #456]	; (800047c <initSystem+0x234>)
 80002b4:	f000 fe26 	bl	8000f04 <GPIO_Config>

	// Se inicializan los valores de los transistores que controlan los Displays, con el fin que siempre estén intercalados, pues más adelante
	// su suicheo será con un XOR
	GPIO_WritePin(&handlerDisplay1, RESET);
 80002b8:	2100      	movs	r1, #0
 80002ba:	486e      	ldr	r0, [pc, #440]	; (8000474 <initSystem+0x22c>)
 80002bc:	f000 ff4a 	bl	8001154 <GPIO_WritePin>
	GPIO_WritePin(&handlerDisplay2, SET);
 80002c0:	2101      	movs	r1, #1
 80002c2:	486e      	ldr	r0, [pc, #440]	; (800047c <initSystem+0x234>)
 80002c4:	f000 ff46 	bl	8001154 <GPIO_WritePin>

	/* Configuración del LED correspondiente a la segmento A */
	LedA.pGPIOx 									= GPIOB;
 80002c8:	4b6d      	ldr	r3, [pc, #436]	; (8000480 <initSystem+0x238>)
 80002ca:	4a6b      	ldr	r2, [pc, #428]	; (8000478 <initSystem+0x230>)
 80002cc:	601a      	str	r2, [r3, #0]
	LedA.GPIO_PinConfig.GPIO_PinNumber				= PIN_4;
 80002ce:	4b6c      	ldr	r3, [pc, #432]	; (8000480 <initSystem+0x238>)
 80002d0:	2204      	movs	r2, #4
 80002d2:	711a      	strb	r2, [r3, #4]
	LedA.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80002d4:	4b6a      	ldr	r3, [pc, #424]	; (8000480 <initSystem+0x238>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	715a      	strb	r2, [r3, #5]
	LedA.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80002da:	4b69      	ldr	r3, [pc, #420]	; (8000480 <initSystem+0x238>)
 80002dc:	2200      	movs	r2, #0
 80002de:	721a      	strb	r2, [r3, #8]
	LedA.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80002e0:	4b67      	ldr	r3, [pc, #412]	; (8000480 <initSystem+0x238>)
 80002e2:	2203      	movs	r2, #3
 80002e4:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento
	GPIO_Config(&LedA);
 80002e6:	4866      	ldr	r0, [pc, #408]	; (8000480 <initSystem+0x238>)
 80002e8:	f000 fe0c 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento B */
	LedB.pGPIOx 									= GPIOB;
 80002ec:	4b65      	ldr	r3, [pc, #404]	; (8000484 <initSystem+0x23c>)
 80002ee:	4a62      	ldr	r2, [pc, #392]	; (8000478 <initSystem+0x230>)
 80002f0:	601a      	str	r2, [r3, #0]
	LedB.GPIO_PinConfig.GPIO_PinNumber				= PIN_5;
 80002f2:	4b64      	ldr	r3, [pc, #400]	; (8000484 <initSystem+0x23c>)
 80002f4:	2205      	movs	r2, #5
 80002f6:	711a      	strb	r2, [r3, #4]
	LedB.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80002f8:	4b62      	ldr	r3, [pc, #392]	; (8000484 <initSystem+0x23c>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	715a      	strb	r2, [r3, #5]
	LedB.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80002fe:	4b61      	ldr	r3, [pc, #388]	; (8000484 <initSystem+0x23c>)
 8000300:	2200      	movs	r2, #0
 8000302:	721a      	strb	r2, [r3, #8]
	LedB.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000304:	4b5f      	ldr	r3, [pc, #380]	; (8000484 <initSystem+0x23c>)
 8000306:	2203      	movs	r2, #3
 8000308:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&LedB);
 800030a:	485e      	ldr	r0, [pc, #376]	; (8000484 <initSystem+0x23c>)
 800030c:	f000 fdfa 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento C */
	LedC.pGPIOx 									= GPIOA;
 8000310:	4b5d      	ldr	r3, [pc, #372]	; (8000488 <initSystem+0x240>)
 8000312:	4a57      	ldr	r2, [pc, #348]	; (8000470 <initSystem+0x228>)
 8000314:	601a      	str	r2, [r3, #0]
	LedC.GPIO_PinConfig.GPIO_PinNumber				= PIN_8;
 8000316:	4b5c      	ldr	r3, [pc, #368]	; (8000488 <initSystem+0x240>)
 8000318:	2208      	movs	r2, #8
 800031a:	711a      	strb	r2, [r3, #4]
	LedC.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 800031c:	4b5a      	ldr	r3, [pc, #360]	; (8000488 <initSystem+0x240>)
 800031e:	2201      	movs	r2, #1
 8000320:	715a      	strb	r2, [r3, #5]
	LedC.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000322:	4b59      	ldr	r3, [pc, #356]	; (8000488 <initSystem+0x240>)
 8000324:	2200      	movs	r2, #0
 8000326:	721a      	strb	r2, [r3, #8]
	LedC.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000328:	4b57      	ldr	r3, [pc, #348]	; (8000488 <initSystem+0x240>)
 800032a:	2203      	movs	r2, #3
 800032c:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&LedC);
 800032e:	4856      	ldr	r0, [pc, #344]	; (8000488 <initSystem+0x240>)
 8000330:	f000 fde8 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento D */
	LedD.pGPIOx 									= GPIOC;
 8000334:	4b55      	ldr	r3, [pc, #340]	; (800048c <initSystem+0x244>)
 8000336:	4a56      	ldr	r2, [pc, #344]	; (8000490 <initSystem+0x248>)
 8000338:	601a      	str	r2, [r3, #0]
	LedD.GPIO_PinConfig.GPIO_PinNumber				= PIN_7;
 800033a:	4b54      	ldr	r3, [pc, #336]	; (800048c <initSystem+0x244>)
 800033c:	2207      	movs	r2, #7
 800033e:	711a      	strb	r2, [r3, #4]
	LedD.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000340:	4b52      	ldr	r3, [pc, #328]	; (800048c <initSystem+0x244>)
 8000342:	2201      	movs	r2, #1
 8000344:	715a      	strb	r2, [r3, #5]
	LedD.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000346:	4b51      	ldr	r3, [pc, #324]	; (800048c <initSystem+0x244>)
 8000348:	2200      	movs	r2, #0
 800034a:	721a      	strb	r2, [r3, #8]
	LedD.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 800034c:	4b4f      	ldr	r3, [pc, #316]	; (800048c <initSystem+0x244>)
 800034e:	2203      	movs	r2, #3
 8000350:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&LedD);
 8000352:	484e      	ldr	r0, [pc, #312]	; (800048c <initSystem+0x244>)
 8000354:	f000 fdd6 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento E */
	LedE.pGPIOx 									= GPIOA;
 8000358:	4b4e      	ldr	r3, [pc, #312]	; (8000494 <initSystem+0x24c>)
 800035a:	4a45      	ldr	r2, [pc, #276]	; (8000470 <initSystem+0x228>)
 800035c:	601a      	str	r2, [r3, #0]
	LedE.GPIO_PinConfig.GPIO_PinNumber				= PIN_9;
 800035e:	4b4d      	ldr	r3, [pc, #308]	; (8000494 <initSystem+0x24c>)
 8000360:	2209      	movs	r2, #9
 8000362:	711a      	strb	r2, [r3, #4]
	LedE.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000364:	4b4b      	ldr	r3, [pc, #300]	; (8000494 <initSystem+0x24c>)
 8000366:	2201      	movs	r2, #1
 8000368:	715a      	strb	r2, [r3, #5]
	LedE.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 800036a:	4b4a      	ldr	r3, [pc, #296]	; (8000494 <initSystem+0x24c>)
 800036c:	2200      	movs	r2, #0
 800036e:	721a      	strb	r2, [r3, #8]
	LedE.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000370:	4b48      	ldr	r3, [pc, #288]	; (8000494 <initSystem+0x24c>)
 8000372:	2203      	movs	r2, #3
 8000374:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&LedE);
 8000376:	4847      	ldr	r0, [pc, #284]	; (8000494 <initSystem+0x24c>)
 8000378:	f000 fdc4 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento F */
	LedF.pGPIOx 									= GPIOA;
 800037c:	4b46      	ldr	r3, [pc, #280]	; (8000498 <initSystem+0x250>)
 800037e:	4a3c      	ldr	r2, [pc, #240]	; (8000470 <initSystem+0x228>)
 8000380:	601a      	str	r2, [r3, #0]
	LedF.GPIO_PinConfig.GPIO_PinNumber				= PIN_7;
 8000382:	4b45      	ldr	r3, [pc, #276]	; (8000498 <initSystem+0x250>)
 8000384:	2207      	movs	r2, #7
 8000386:	711a      	strb	r2, [r3, #4]
	LedF.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000388:	4b43      	ldr	r3, [pc, #268]	; (8000498 <initSystem+0x250>)
 800038a:	2201      	movs	r2, #1
 800038c:	715a      	strb	r2, [r3, #5]
	LedF.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 800038e:	4b42      	ldr	r3, [pc, #264]	; (8000498 <initSystem+0x250>)
 8000390:	2200      	movs	r2, #0
 8000392:	721a      	strb	r2, [r3, #8]
	LedF.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8000394:	4b40      	ldr	r3, [pc, #256]	; (8000498 <initSystem+0x250>)
 8000396:	2203      	movs	r2, #3
 8000398:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&LedF);
 800039a:	483f      	ldr	r0, [pc, #252]	; (8000498 <initSystem+0x250>)
 800039c:	f000 fdb2 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento G */
	LedG.pGPIOx 									= GPIOB;
 80003a0:	4b3e      	ldr	r3, [pc, #248]	; (800049c <initSystem+0x254>)
 80003a2:	4a35      	ldr	r2, [pc, #212]	; (8000478 <initSystem+0x230>)
 80003a4:	601a      	str	r2, [r3, #0]
	LedG.GPIO_PinConfig.GPIO_PinNumber				= PIN_6;
 80003a6:	4b3d      	ldr	r3, [pc, #244]	; (800049c <initSystem+0x254>)
 80003a8:	2206      	movs	r2, #6
 80003aa:	711a      	strb	r2, [r3, #4]
	LedG.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80003ac:	4b3b      	ldr	r3, [pc, #236]	; (800049c <initSystem+0x254>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	715a      	strb	r2, [r3, #5]
	LedG.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80003b2:	4b3a      	ldr	r3, [pc, #232]	; (800049c <initSystem+0x254>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	721a      	strb	r2, [r3, #8]
	LedG.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80003b8:	4b38      	ldr	r3, [pc, #224]	; (800049c <initSystem+0x254>)
 80003ba:	2203      	movs	r2, #3
 80003bc:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento

	GPIO_Config(&LedG);
 80003be:	4837      	ldr	r0, [pc, #220]	; (800049c <initSystem+0x254>)
 80003c0:	f000 fda0 	bl	8000f04 <GPIO_Config>

	/* Configuración del LED correspondiente a la segmento DP */
	LedDP.pGPIOx 									= GPIOB;
 80003c4:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <initSystem+0x258>)
 80003c6:	4a2c      	ldr	r2, [pc, #176]	; (8000478 <initSystem+0x230>)
 80003c8:	601a      	str	r2, [r3, #0]
	LedDP.GPIO_PinConfig.GPIO_PinNumber				= PIN_10;
 80003ca:	4b35      	ldr	r3, [pc, #212]	; (80004a0 <initSystem+0x258>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	711a      	strb	r2, [r3, #4]
	LedDP.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <initSystem+0x258>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	715a      	strb	r2, [r3, #5]
	LedDP.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80003d6:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <initSystem+0x258>)
 80003d8:	2200      	movs	r2, #0
 80003da:	721a      	strb	r2, [r3, #8]
	LedDP.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 80003dc:	4b30      	ldr	r3, [pc, #192]	; (80004a0 <initSystem+0x258>)
 80003de:	2203      	movs	r2, #3
 80003e0:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración de dicho segmento
	GPIO_Config(&LedDP);
 80003e2:	482f      	ldr	r0, [pc, #188]	; (80004a0 <initSystem+0x258>)
 80003e4:	f000 fd8e 	bl	8000f04 <GPIO_Config>

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 80003e8:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <initSystem+0x25c>)
 80003ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ee:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 80003f0:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <initSystem+0x25c>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_1ms;
 80003f6:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <initSystem+0x25c>)
 80003f8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003fc:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <initSystem+0x25c>)
 8000400:	22fa      	movs	r2, #250	; 0xfa
 8000402:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 8000404:	4827      	ldr	r0, [pc, #156]	; (80004a4 <initSystem+0x25c>)
 8000406:	f000 f9cd 	bl	80007a4 <BTimer_Config>

	/* configuración del Timer4, que controla el suicheo entre los Displays */
	handlerDisplayTimer.ptrTIMx						= TIM4;
 800040a:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <initSystem+0x260>)
 800040c:	4a27      	ldr	r2, [pc, #156]	; (80004ac <initSystem+0x264>)
 800040e:	601a      	str	r2, [r3, #0]
	handlerDisplayTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <initSystem+0x260>)
 8000412:	2201      	movs	r2, #1
 8000414:	711a      	strb	r2, [r3, #4]
	handlerDisplayTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1ms;
 8000416:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <initSystem+0x260>)
 8000418:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800041c:	80da      	strh	r2, [r3, #6]
	handlerDisplayTimer.timerConfig.Timer_period	= 7;
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <initSystem+0x260>)
 8000420:	2207      	movs	r2, #7
 8000422:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer4
	BTimer_Config(&handlerDisplayTimer);
 8000424:	4820      	ldr	r0, [pc, #128]	; (80004a8 <initSystem+0x260>)
 8000426:	f000 f9bd 	bl	80007a4 <BTimer_Config>

	/* Configuración del EXTI10 */
	extiConfig.EXTIx			= EXTI10;
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <initSystem+0x268>)
 800042c:	220a      	movs	r2, #10
 800042e:	701a      	strb	r2, [r3, #0]
	extiConfig.pinPort			= PC;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <initSystem+0x268>)
 8000432:	2202      	movs	r2, #2
 8000434:	705a      	strb	r2, [r3, #1]
	extiConfig.pinPUPD_Mode     = GPIO_PUPDR_PULLDOWN;
 8000436:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <initSystem+0x268>)
 8000438:	2202      	movs	r2, #2
 800043a:	709a      	strb	r2, [r3, #2]
	extiConfig.triggerMode		= RISING_TRIGGER;
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <initSystem+0x268>)
 800043e:	2200      	movs	r2, #0
 8000440:	70da      	strb	r2, [r3, #3]
	// Se carga la configuración del EXTI
	exti_Config(&extiConfig);
 8000442:	481b      	ldr	r0, [pc, #108]	; (80004b0 <initSystem+0x268>)
 8000444:	f000 fa98 	bl	8000978 <exti_Config>

	/* Configuración del EXTI10 */
	fotoCompConfig.EXTIx			= EXTI12;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <initSystem+0x26c>)
 800044a:	220c      	movs	r2, #12
 800044c:	701a      	strb	r2, [r3, #0]
	fotoCompConfig.pinPort			= PC;
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <initSystem+0x26c>)
 8000450:	2202      	movs	r2, #2
 8000452:	705a      	strb	r2, [r3, #1]
	fotoCompConfig.pinPUPD_Mode     = GPIO_PUPDR_PULLDOWN;
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <initSystem+0x26c>)
 8000456:	2202      	movs	r2, #2
 8000458:	709a      	strb	r2, [r3, #2]
	fotoCompConfig.triggerMode		= FALLING_TRIGGER;
 800045a:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <initSystem+0x26c>)
 800045c:	2201      	movs	r2, #1
 800045e:	70da      	strb	r2, [r3, #3]
	// Se carga la configuración del EXTI
	exti_Config(&fotoCompConfig);
 8000460:	4814      	ldr	r0, [pc, #80]	; (80004b4 <initSystem+0x26c>)
 8000462:	f000 fa89 	bl	8000978 <exti_Config>


}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000028 	.word	0x20000028
 8000470:	40020000 	.word	0x40020000
 8000474:	20000054 	.word	0x20000054
 8000478:	40020400 	.word	0x40020400
 800047c:	20000060 	.word	0x20000060
 8000480:	2000006c 	.word	0x2000006c
 8000484:	20000078 	.word	0x20000078
 8000488:	20000084 	.word	0x20000084
 800048c:	20000090 	.word	0x20000090
 8000490:	40020800 	.word	0x40020800
 8000494:	2000009c 	.word	0x2000009c
 8000498:	200000a8 	.word	0x200000a8
 800049c:	200000b4 	.word	0x200000b4
 80004a0:	200000c0 	.word	0x200000c0
 80004a4:	20000034 	.word	0x20000034
 80004a8:	20000044 	.word	0x20000044
 80004ac:	40000800 	.word	0x40000800
 80004b0:	200000cc 	.word	0x200000cc
 80004b4:	200000d0 	.word	0x200000d0

080004b8 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <BTimer2_Callback+0x1c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <BTimer2_Callback+0x1c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f082 0220 	eor.w	r2, r2, #32
 80004ca:	615a      	str	r2, [r3, #20]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20000028 	.word	0x20000028

080004d8 <BTimer4_Callback>:

/* Implementación del Callback para el timer4 */
void BTimer4_Callback(void){
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	// Se lleva la variable displaySet a false, indicando que debe cargarse una nueva configuración el respectivo display
	displaySet = false;
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <BTimer4_Callback+0x34>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
	// Se hace un XOR para cambiar el estado de ambos transistores, como están intercalados uno se desactiva y el otro se avtiva, o viceversa
	handlerDisplay1.pGPIOx->ODR ^= GPIO_ODR_OD8;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <BTimer4_Callback+0x38>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <BTimer4_Callback+0x38>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80004f0:	615a      	str	r2, [r3, #20]
	handlerDisplay2.pGPIOx->ODR ^= GPIO_ODR_OD9;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <BTimer4_Callback+0x3c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <BTimer4_Callback+0x3c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8000500:	615a      	str	r2, [r3, #20]
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200000d7 	.word	0x200000d7
 8000510:	20000054 	.word	0x20000054
 8000514:	20000060 	.word	0x20000060

08000518 <Exti10_Callback>:

/* Implementación del Callback para el EXTI10 */
void Exti10_Callback(void){
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	if (units == 9 && tens == 9){ // Si se llegó al número 99, se reinician a cero las unidades y las decenas
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <Exti10_Callback+0x54>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b09      	cmp	r3, #9
 8000522:	d10a      	bne.n	800053a <Exti10_Callback+0x22>
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <Exti10_Callback+0x58>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b09      	cmp	r3, #9
 800052a:	d106      	bne.n	800053a <Exti10_Callback+0x22>
		units 	= 0;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <Exti10_Callback+0x54>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		tens 	= 0;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <Exti10_Callback+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		tens++;
	}
	else{ // En cualquier otro caso se aumenta en una unidad las unidades
		units++;
	}
}
 8000538:	e013      	b.n	8000562 <Exti10_Callback+0x4a>
	else if (units == 9){	// Cuando las unidades llegaron a 9, se hacen cero y se aumenta en una unidad las decenas
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <Exti10_Callback+0x54>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b09      	cmp	r3, #9
 8000540:	d109      	bne.n	8000556 <Exti10_Callback+0x3e>
		units = 0;
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <Exti10_Callback+0x54>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
		tens++;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <Exti10_Callback+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <Exti10_Callback+0x58>)
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	e005      	b.n	8000562 <Exti10_Callback+0x4a>
		units++;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <Exti10_Callback+0x54>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b03      	ldr	r3, [pc, #12]	; (800056c <Exti10_Callback+0x54>)
 8000560:	701a      	strb	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	200000d5 	.word	0x200000d5
 8000570:	200000d6 	.word	0x200000d6

08000574 <Exti12_Callback>:

/* Implementación del Callback para el EXTI10 */
void Exti12_Callback(void){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	if (units == 9 && tens == 9){ // Si se llegó al número 99, se reinician a cero las unidades y las decenas
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <Exti12_Callback+0x54>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b09      	cmp	r3, #9
 800057e:	d10a      	bne.n	8000596 <Exti12_Callback+0x22>
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <Exti12_Callback+0x58>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d106      	bne.n	8000596 <Exti12_Callback+0x22>
		units 	= 0;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <Exti12_Callback+0x54>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
		tens 	= 0;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <Exti12_Callback+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
		tens++;
	}
	else{ // En cualquier otro caso se aumenta en una unidad las unidades
		units++;
	}
}
 8000594:	e013      	b.n	80005be <Exti12_Callback+0x4a>
	else if (units == 9){	// Cuando las unidades llegaron a 9, se hacen cero y se aumenta en una unidad las decenas
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <Exti12_Callback+0x54>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b09      	cmp	r3, #9
 800059c:	d109      	bne.n	80005b2 <Exti12_Callback+0x3e>
		units = 0;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <Exti12_Callback+0x54>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		tens++;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <Exti12_Callback+0x58>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <Exti12_Callback+0x58>)
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	e005      	b.n	80005be <Exti12_Callback+0x4a>
		units++;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <Exti12_Callback+0x54>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <Exti12_Callback+0x54>)
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200000d5 	.word	0x200000d5
 80005cc:	200000d6 	.word	0x200000d6

080005d0 <Display_WriteNumber>:

/* Función para Configurar un número en el Display */
void Display_WriteNumber(uint8_t number){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	/**
	 * La función Display_WriteNumber toma un número del 0 al 9 y configura cada segmento del display que enciende dicho número
	 */

	// Como los Displays configurados son de ánodo común, debe cargarse un cero en los segmentos que se desean encender
	number = ~number;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	43db      	mvns	r3, r3
 80005de:	71fb      	strb	r3, [r7, #7]
	// Se define la variable state, que contendrá el estado de cada uno de los segmentos a configurar (tomando desde el bit menos significativo (DP) al
	// más significativo (A)
	uint8_t state = 0b1 & number;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
	// Se escribe el estado correspondiente al segmento DP
	GPIO_WritePin(&LedDP, state);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4619      	mov	r1, r3
 80005ec:	482d      	ldr	r0, [pc, #180]	; (80006a4 <Display_WriteNumber+0xd4>)
 80005ee:	f000 fdb1 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento G
	number >>= 1;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	085b      	lsrs	r3, r3, #1
 80005f6:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento G
	state = 0b1 & number;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento G
	GPIO_WritePin(&LedG, state);
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	4619      	mov	r1, r3
 8000604:	4828      	ldr	r0, [pc, #160]	; (80006a8 <Display_WriteNumber+0xd8>)
 8000606:	f000 fda5 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento F
	number >>= 1;
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	085b      	lsrs	r3, r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento F
	state = 0b1 & number;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento F
	GPIO_WritePin(&LedF, state);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4619      	mov	r1, r3
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <Display_WriteNumber+0xdc>)
 800061e:	f000 fd99 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento E
	number >>= 1;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento E
	state = 0b1 & number;
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento E
	GPIO_WritePin(&LedE, state);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	4619      	mov	r1, r3
 8000634:	481e      	ldr	r0, [pc, #120]	; (80006b0 <Display_WriteNumber+0xe0>)
 8000636:	f000 fd8d 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento D
	number >>= 1;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento D
	state = 0b1 & number;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento D
	GPIO_WritePin(&LedD, state);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4619      	mov	r1, r3
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <Display_WriteNumber+0xe4>)
 800064e:	f000 fd81 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento C
	number >>= 1;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	085b      	lsrs	r3, r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento C
	state = 0b1 & number;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento C
	GPIO_WritePin(&LedC, state);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4619      	mov	r1, r3
 8000664:	4814      	ldr	r0, [pc, #80]	; (80006b8 <Display_WriteNumber+0xe8>)
 8000666:	f000 fd75 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento B
	number >>= 1;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento B
	state = 0b1 & number;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento B
	GPIO_WritePin(&LedB, state);
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4619      	mov	r1, r3
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <Display_WriteNumber+0xec>)
 800067e:	f000 fd69 	bl	8001154 <GPIO_WritePin>

	// Se hace un shift de number una vez a la derecha, para que en el bit menos significativo quede el estado del segmento A
	number >>= 1;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	085b      	lsrs	r3, r3, #1
 8000686:	71fb      	strb	r3, [r7, #7]
	// Se lee el estado del segmento A
	state = 0b1 & number;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
	// Se carga el estado del segmento A
	GPIO_WritePin(&LedA, state);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4619      	mov	r1, r3
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <Display_WriteNumber+0xf0>)
 8000696:	f000 fd5d 	bl	8001154 <GPIO_WritePin>
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000c0 	.word	0x200000c0
 80006a8:	200000b4 	.word	0x200000b4
 80006ac:	200000a8 	.word	0x200000a8
 80006b0:	2000009c 	.word	0x2000009c
 80006b4:	20000090 	.word	0x20000090
 80006b8:	20000084 	.word	0x20000084
 80006bc:	20000078 	.word	0x20000078
 80006c0:	2000006c 	.word	0x2000006c

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f000 fd71 	bl	80011d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd6f 	bl	80001d8 <main>

080006fa <LoopForever>:

LoopForever:
    b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000708:	08001240 	.word	0x08001240
  ldr r2, =_sbss
 800070c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000710:	200000e8 	.word	0x200000e8

08000714 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC_IRQHandler>
	...

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <__NVIC_EnableIRQ+0x34>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a46      	ldr	r2, [pc, #280]	; (80008cc <BTimer_Config+0x128>)
 80007b2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c0:	d106      	bne.n	80007d0 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <BTimer_Config+0x12c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <BTimer_Config+0x12c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	e016      	b.n	80007fe <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a3f      	ldr	r2, [pc, #252]	; (80008d4 <BTimer_Config+0x130>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <BTimer_Config+0x12c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a3c      	ldr	r2, [pc, #240]	; (80008d0 <BTimer_Config+0x12c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	e00a      	b.n	80007fe <BTimer_Config+0x5a>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <BTimer_Config+0x134>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d105      	bne.n	80007fe <BTimer_Config+0x5a>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <BTimer_Config+0x12c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <BTimer_Config+0x12c>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10c      	bne.n	8000820 <BTimer_Config+0x7c>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f022 0210 	bic.w	r2, r2, #16
 8000814:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
 800081e:	e00d      	b.n	800083c <BTimer_Config+0x98>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0210 	orr.w	r2, r2, #16
 800082e:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3a01      	subs	r2, #1
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	88db      	ldrh	r3, [r3, #6]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3a01      	subs	r2, #1
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0201 	orr.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f042 0201 	orr.w	r2, r2, #1
 8000872:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087c:	d107      	bne.n	800088e <BTimer_Config+0xea>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 800087e:	201c      	movs	r0, #28
 8000880:	f7ff ff4a 	bl	8000718 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000884:	2103      	movs	r1, #3
 8000886:	201c      	movs	r0, #28
 8000888:	f7ff ff62 	bl	8000750 <__NVIC_SetPriority>
 800088c:	e018      	b.n	80008c0 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <BTimer_Config+0x130>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d107      	bne.n	80008a8 <BTimer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000898:	201d      	movs	r0, #29
 800089a:	f7ff ff3d 	bl	8000718 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 800089e:	2103      	movs	r1, #3
 80008a0:	201d      	movs	r0, #29
 80008a2:	f7ff ff55 	bl	8000750 <__NVIC_SetPriority>
 80008a6:	e00b      	b.n	80008c0 <BTimer_Config+0x11c>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <BTimer_Config+0x134>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d106      	bne.n	80008c0 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 80008b2:	201e      	movs	r0, #30
 80008b4:	f7ff ff30 	bl	8000718 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 3);
 80008b8:	2103      	movs	r1, #3
 80008ba:	201e      	movs	r0, #30
 80008bc:	f7ff ff48 	bl	8000750 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80008c0:	b662      	cpsie	i
}
 80008c2:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000d8 	.word	0x200000d8
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40000400 	.word	0x40000400
 80008d8:	40000800 	.word	0x40000800

080008dc <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	 __NOP();
 80008e0:	bf00      	nop
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <TIM2_IRQHandler>:
__attribute__((weak)) void BTimer4_Callback(void){
	 __NOP();
}

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80008ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 80008fe:	f7ff fddb 	bl	80004b8 <BTimer2_Callback>

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <TIM3_IRQHandler+0x18>)
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <TIM3_IRQHandler+0x18>)
 8000912:	f023 0301 	bic.w	r3, r3, #1
 8000916:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000918:	f7ff ffe0 	bl	80008dc <BTimer3_Callback>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40000400 	.word	0x40000400

08000924 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <TIM4_IRQHandler+0x18>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <TIM4_IRQHandler+0x18>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000934:	f7ff fdd0 	bl	80004d8 <BTimer4_Callback>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40000800 	.word	0x40000800

08000940 <__NVIC_EnableIRQ>:
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4906      	ldr	r1, [pc, #24]	; (8000974 <__NVIC_EnableIRQ+0x34>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100

08000978 <exti_Config>:
#include "GPIOxDriver.h"


GPIO_Handler_t 	handlerExtiPIN = {0};

void exti_Config(EXTI_Config_t	*extiConfig){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

	/* Se activa la señal de reloj para SYSCFG*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000980:	4b77      	ldr	r3, [pc, #476]	; (8000b60 <exti_Config+0x1e8>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	4a76      	ldr	r2, [pc, #472]	; (8000b60 <exti_Config+0x1e8>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Configuramos el PINX como entrada digital */
	configExtiPin(extiConfig);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 fa63 	bl	8000e58 <configExtiPin>


	/* Se conecta la entrada del PIN configurado al EXTI correspondiente */
	if (extiConfig->EXTIx <= EXTI3){
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d80e      	bhi.n	80009b8 <exti_Config+0x40>
		SYSCFG->EXTICR[0] |= (extiConfig->pinPort << (extiConfig->EXTIx)*4);
 800099a:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <exti_Config+0x1ec>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	7852      	ldrb	r2, [r2, #1]
 80009a2:	4611      	mov	r1, r2
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	fa01 f202 	lsl.w	r2, r1, r2
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a6c      	ldr	r2, [pc, #432]	; (8000b64 <exti_Config+0x1ec>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6093      	str	r3, [r2, #8]
 80009b6:	e046      	b.n	8000a46 <exti_Config+0xce>
	}
	else if ((extiConfig->EXTIx >= EXTI4 && extiConfig->EXTIx <= EXTI7)){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d913      	bls.n	80009e8 <exti_Config+0x70>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d80f      	bhi.n	80009e8 <exti_Config+0x70>
		SYSCFG->EXTICR[1] |= (extiConfig->pinPort << (extiConfig->EXTIx-4)*4);
 80009c8:	4b66      	ldr	r3, [pc, #408]	; (8000b64 <exti_Config+0x1ec>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	7852      	ldrb	r2, [r2, #1]
 80009d0:	4611      	mov	r1, r2
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	3a04      	subs	r2, #4
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	4611      	mov	r1, r2
 80009e0:	4a60      	ldr	r2, [pc, #384]	; (8000b64 <exti_Config+0x1ec>)
 80009e2:	430b      	orrs	r3, r1
 80009e4:	60d3      	str	r3, [r2, #12]
 80009e6:	e02e      	b.n	8000a46 <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI8 && extiConfig->EXTIx <= EXTI11){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d913      	bls.n	8000a18 <exti_Config+0xa0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b0b      	cmp	r3, #11
 80009f6:	d80f      	bhi.n	8000a18 <exti_Config+0xa0>
		SYSCFG->EXTICR[2] |= (extiConfig->pinPort << (extiConfig->EXTIx-8)*4);
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <exti_Config+0x1ec>)
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	7852      	ldrb	r2, [r2, #1]
 8000a00:	4611      	mov	r1, r2
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	3a08      	subs	r2, #8
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4a54      	ldr	r2, [pc, #336]	; (8000b64 <exti_Config+0x1ec>)
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6113      	str	r3, [r2, #16]
 8000a16:	e016      	b.n	8000a46 <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI12 && extiConfig->EXTIx <= EXTI15){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b0b      	cmp	r3, #11
 8000a1e:	d912      	bls.n	8000a46 <exti_Config+0xce>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80e      	bhi.n	8000a46 <exti_Config+0xce>
		SYSCFG->EXTICR[3] |= (extiConfig->pinPort << (extiConfig->EXTIx-12)*4);
 8000a28:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <exti_Config+0x1ec>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	7852      	ldrb	r2, [r2, #1]
 8000a30:	4611      	mov	r1, r2
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	3a0c      	subs	r2, #12
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a48      	ldr	r2, [pc, #288]	; (8000b64 <exti_Config+0x1ec>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6153      	str	r3, [r2, #20]
	}

	/* Configurar el tipo de flanco según el PIN utilizado*/
	switch(extiConfig->triggerMode){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	78db      	ldrb	r3, [r3, #3]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d01e      	beq.n	8000a8c <exti_Config+0x114>
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	dc33      	bgt.n	8000aba <exti_Config+0x142>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <exti_Config+0xe4>
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d00c      	beq.n	8000a74 <exti_Config+0xfc>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
		break;
	}
	default:
	{
		break;
 8000a5a:	e02e      	b.n	8000aba <exti_Config+0x142>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <exti_Config+0x1f0>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	4611      	mov	r1, r2
 8000a66:	2201      	movs	r2, #1
 8000a68:	408a      	lsls	r2, r1
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <exti_Config+0x1f0>)
 8000a6e:	430b      	orrs	r3, r1
 8000a70:	6093      	str	r3, [r2, #8]
		break;
 8000a72:	e023      	b.n	8000abc <exti_Config+0x144>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 8000a74:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <exti_Config+0x1f0>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	408a      	lsls	r2, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	4a38      	ldr	r2, [pc, #224]	; (8000b68 <exti_Config+0x1f0>)
 8000a86:	430b      	orrs	r3, r1
 8000a88:	60d3      	str	r3, [r2, #12]
		break;
 8000a8a:	e017      	b.n	8000abc <exti_Config+0x144>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8000a8c:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <exti_Config+0x1f0>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	4611      	mov	r1, r2
 8000a96:	2201      	movs	r2, #1
 8000a98:	408a      	lsls	r2, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a32      	ldr	r2, [pc, #200]	; (8000b68 <exti_Config+0x1f0>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <exti_Config+0x1f0>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	2201      	movs	r2, #1
 8000aae:	408a      	lsls	r2, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <exti_Config+0x1f0>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	60d3      	str	r3, [r2, #12]
		break;
 8000ab8:	e000      	b.n	8000abc <exti_Config+0x144>
		break;
 8000aba:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
	}
	}

	__disable_irq();
	/* Se activa la interrupción para el EXTI configurado */
	EXTI->IMR |= (0b1 << extiConfig->EXTIx);
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <exti_Config+0x1f0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	2201      	movs	r2, #1
 8000acc:	408a      	lsls	r2, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <exti_Config+0x1f0>)
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	6013      	str	r3, [r2, #0]

	/* Se matricula la interrupción correspondiente en el NVIC */

	if (extiConfig->EXTIx == EXTI0){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <exti_Config+0x16e>
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f7ff ff2e 	bl	8000940 <__NVIC_EnableIRQ>
 8000ae4:	e036      	b.n	8000b54 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI1){
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d103      	bne.n	8000af6 <exti_Config+0x17e>
		__NVIC_EnableIRQ(EXTI1_IRQn);
 8000aee:	2007      	movs	r0, #7
 8000af0:	f7ff ff26 	bl	8000940 <__NVIC_EnableIRQ>
 8000af4:	e02e      	b.n	8000b54 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI2){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d103      	bne.n	8000b06 <exti_Config+0x18e>
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8000afe:	2008      	movs	r0, #8
 8000b00:	f7ff ff1e 	bl	8000940 <__NVIC_EnableIRQ>
 8000b04:	e026      	b.n	8000b54 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI3){
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d103      	bne.n	8000b16 <exti_Config+0x19e>
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f7ff ff16 	bl	8000940 <__NVIC_EnableIRQ>
 8000b14:	e01e      	b.n	8000b54 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI4){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d103      	bne.n	8000b26 <exti_Config+0x1ae>
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f7ff ff0e 	bl	8000940 <__NVIC_EnableIRQ>
 8000b24:	e016      	b.n	8000b54 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI5 && extiConfig->EXTIx <= EXTI9){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d907      	bls.n	8000b3e <exti_Config+0x1c6>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b09      	cmp	r3, #9
 8000b34:	d803      	bhi.n	8000b3e <exti_Config+0x1c6>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b36:	2017      	movs	r0, #23
 8000b38:	f7ff ff02 	bl	8000940 <__NVIC_EnableIRQ>
 8000b3c:	e00a      	b.n	8000b54 <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI10 && extiConfig->EXTIx <= EXTI15){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b09      	cmp	r3, #9
 8000b44:	d906      	bls.n	8000b54 <exti_Config+0x1dc>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d802      	bhi.n	8000b54 <exti_Config+0x1dc>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4e:	2028      	movs	r0, #40	; 0x28
 8000b50:	f7ff fef6 	bl	8000940 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b54:	b662      	cpsie	i
}
 8000b56:	bf00      	nop

	/* Se reactican las interrupciones globales */
	__enable_irq();


}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0){
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <EXTI0_IRQHandler+0x24>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d007      	beq.n	8000b8c <EXTI0_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR0;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <EXTI0_IRQHandler+0x24>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <EXTI0_IRQHandler+0x24>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6153      	str	r3, [r2, #20]
		Exti0_Callback();
 8000b88:	f000 f904 	bl	8000d94 <Exti0_Callback>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40013c00 	.word	0x40013c00

08000b94 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1){
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <EXTI1_IRQHandler+0x24>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d007      	beq.n	8000bb4 <EXTI1_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR1;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <EXTI1_IRQHandler+0x24>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <EXTI1_IRQHandler+0x24>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6153      	str	r3, [r2, #20]
		Exti1_Callback();
 8000bb0:	f000 f8f7 	bl	8000da2 <Exti1_Callback>
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40013c00 	.word	0x40013c00

08000bbc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2){
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <EXTI2_IRQHandler+0x24>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d007      	beq.n	8000bdc <EXTI2_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR2;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <EXTI2_IRQHandler+0x24>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <EXTI2_IRQHandler+0x24>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6153      	str	r3, [r2, #20]
		Exti2_Callback();
 8000bd8:	f000 f8ea 	bl	8000db0 <Exti2_Callback>
	}
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40013c00 	.word	0x40013c00

08000be4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR3){
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <EXTI3_IRQHandler+0x24>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <EXTI3_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR3;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <EXTI3_IRQHandler+0x24>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <EXTI3_IRQHandler+0x24>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6153      	str	r3, [r2, #20]
		Exti3_Callback();
 8000c00:	f000 f8dd 	bl	8000dbe <Exti3_Callback>
	}
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013c00 	.word	0x40013c00

08000c0c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR4){
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <EXTI4_IRQHandler+0x24>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d007      	beq.n	8000c2c <EXTI4_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR4;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <EXTI4_IRQHandler+0x24>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <EXTI4_IRQHandler+0x24>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6153      	str	r3, [r2, #20]
		Exti4_Callback();
 8000c28:	f000 f8d0 	bl	8000dcc <Exti4_Callback>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013c00 	.word	0x40013c00

08000c34 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5){
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d008      	beq.n	8000c56 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR5;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6153      	str	r3, [r2, #20]
		Exti5_Callback();
 8000c50:	f000 f8c3 	bl	8000dda <Exti5_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR9){
		EXTI->PR |= EXTI_PR_PR9;
		Exti9_Callback();
	}
}
 8000c54:	e03a      	b.n	8000ccc <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR6){
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6c:	6153      	str	r3, [r2, #20]
		Exti6_Callback();
 8000c6e:	f000 f8bb 	bl	8000de8 <Exti6_Callback>
}
 8000c72:	e02b      	b.n	8000ccc <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR7){
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d008      	beq.n	8000c92 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	6153      	str	r3, [r2, #20]
		Exti7_Callback();
 8000c8c:	f000 f8b3 	bl	8000df6 <Exti7_Callback>
}
 8000c90:	e01c      	b.n	8000ccc <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR8){
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6153      	str	r3, [r2, #20]
		Exti8_Callback();
 8000caa:	f000 f8ab 	bl	8000e04 <Exti8_Callback>
}
 8000cae:	e00d      	b.n	8000ccc <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR9){
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d007      	beq.n	8000ccc <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <EXTI9_5_IRQHandler+0x9c>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6153      	str	r3, [r2, #20]
		Exti9_Callback();
 8000cc8:	f000 f8a3 	bl	8000e12 <Exti9_Callback>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013c00 	.word	0x40013c00

08000cd4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR10){
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d008      	beq.n	8000cf6 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR10;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6153      	str	r3, [r2, #20]
		Exti10_Callback();
 8000cf0:	f7ff fc12 	bl	8000518 <Exti10_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR15){
		EXTI->PR |= EXTI_PR_PR15;
		Exti15_Callback();
	}
}
 8000cf4:	e049      	b.n	8000d8a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR11){
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d008      	beq.n	8000d14 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0c:	6153      	str	r3, [r2, #20]
		Exti11_Callback();
 8000d0e:	f000 f887 	bl	8000e20 <Exti11_Callback>
}
 8000d12:	e03a      	b.n	8000d8a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR12){
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2a:	6153      	str	r3, [r2, #20]
		Exti12_Callback();
 8000d2c:	f7ff fc22 	bl	8000574 <Exti12_Callback>
}
 8000d30:	e02b      	b.n	8000d8a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR13){
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d008      	beq.n	8000d50 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d48:	6153      	str	r3, [r2, #20]
		Exti13_Callback();
 8000d4a:	f000 f870 	bl	8000e2e <Exti13_Callback>
}
 8000d4e:	e01c      	b.n	8000d8a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR14){
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6153      	str	r3, [r2, #20]
		Exti14_Callback();
 8000d68:	f000 f868 	bl	8000e3c <Exti14_Callback>
}
 8000d6c:	e00d      	b.n	8000d8a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR15){
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <EXTI15_10_IRQHandler+0xbc>)
 8000d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d84:	6153      	str	r3, [r2, #20]
		Exti15_Callback();
 8000d86:	f000 f860 	bl	8000e4a <Exti15_Callback>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013c00 	.word	0x40013c00

08000d94 <Exti0_Callback>:


__attribute__ ((weak)) void Exti0_Callback(void){
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
	__NOP();
 8000d98:	bf00      	nop
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <Exti1_Callback>:
__attribute__ ((weak)) void Exti1_Callback(void){
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
	__NOP();
 8000da6:	bf00      	nop
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <Exti2_Callback>:
__attribute__ ((weak)) void Exti2_Callback(void){
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	__NOP();
 8000db4:	bf00      	nop
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <Exti3_Callback>:
__attribute__ ((weak)) void Exti3_Callback(void){
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
	__NOP();
 8000dc2:	bf00      	nop
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <Exti4_Callback>:
__attribute__ ((weak)) void Exti4_Callback(void){
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	__NOP();
 8000dd0:	bf00      	nop
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <Exti5_Callback>:
__attribute__ ((weak)) void Exti5_Callback(void){
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
	__NOP();
 8000dde:	bf00      	nop
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <Exti6_Callback>:
__attribute__ ((weak)) void Exti6_Callback(void){
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	__NOP();
 8000dec:	bf00      	nop
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <Exti7_Callback>:
__attribute__ ((weak)) void Exti7_Callback(void){
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
	__NOP();
 8000dfa:	bf00      	nop
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <Exti8_Callback>:
__attribute__ ((weak)) void Exti8_Callback(void){
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	__NOP();
 8000e08:	bf00      	nop
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <Exti9_Callback>:
__attribute__ ((weak)) void Exti9_Callback(void){
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
	__NOP();
 8000e16:	bf00      	nop
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Exti11_Callback>:
__attribute__ ((weak)) void Exti10_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti11_Callback(void){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	__NOP();
 8000e24:	bf00      	nop
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <Exti13_Callback>:
__attribute__ ((weak)) void Exti12_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti13_Callback(void){
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
	__NOP();
 8000e32:	bf00      	nop
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <Exti14_Callback>:
__attribute__ ((weak)) void Exti14_Callback(void){
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	__NOP();
 8000e40:	bf00      	nop
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <Exti15_Callback>:
__attribute__ ((weak)) void Exti15_Callback(void){
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
	__NOP();
 8000e4e:	bf00      	nop
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <configExtiPin>:

void configExtiPin(EXTI_Config_t *extiConfig){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	switch (extiConfig->pinPort){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	d82b      	bhi.n	8000ec0 <configExtiPin+0x68>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <configExtiPin+0x18>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e91 	.word	0x08000e91
 8000e74:	08000e99 	.word	0x08000e99
 8000e78:	08000ea1 	.word	0x08000ea1
 8000e7c:	08000ea9 	.word	0x08000ea9
 8000e80:	08000eb1 	.word	0x08000eb1
 8000e84:	08000ec1 	.word	0x08000ec1
 8000e88:	08000ec1 	.word	0x08000ec1
 8000e8c:	08000eb9 	.word	0x08000eb9
	case PA:
	{
		handlerExtiPIN.pGPIOx = GPIOA;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <configExtiPin+0x90>)
 8000e92:	4a16      	ldr	r2, [pc, #88]	; (8000eec <configExtiPin+0x94>)
 8000e94:	601a      	str	r2, [r3, #0]
		break;
 8000e96:	e014      	b.n	8000ec2 <configExtiPin+0x6a>
	}
	case PB:
	{
		handlerExtiPIN.pGPIOx = GPIOB;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <configExtiPin+0x90>)
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <configExtiPin+0x98>)
 8000e9c:	601a      	str	r2, [r3, #0]
		break;
 8000e9e:	e010      	b.n	8000ec2 <configExtiPin+0x6a>
	}
	case PC:
	{
		handlerExtiPIN.pGPIOx = GPIOC;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <configExtiPin+0x90>)
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <configExtiPin+0x9c>)
 8000ea4:	601a      	str	r2, [r3, #0]
		break;
 8000ea6:	e00c      	b.n	8000ec2 <configExtiPin+0x6a>
	}
	case PD:
	{
		handlerExtiPIN.pGPIOx = GPIOD;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <configExtiPin+0x90>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <configExtiPin+0xa0>)
 8000eac:	601a      	str	r2, [r3, #0]
		break;
 8000eae:	e008      	b.n	8000ec2 <configExtiPin+0x6a>
	}
	case PE:
	{
		handlerExtiPIN.pGPIOx = GPIOE;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <configExtiPin+0x90>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <configExtiPin+0xa4>)
 8000eb4:	601a      	str	r2, [r3, #0]
		break;
 8000eb6:	e004      	b.n	8000ec2 <configExtiPin+0x6a>
	}
	case PH:
	{
		handlerExtiPIN.pGPIOx = GPIOH;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <configExtiPin+0x90>)
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <configExtiPin+0xa8>)
 8000ebc:	601a      	str	r2, [r3, #0]
		break;
 8000ebe:	e000      	b.n	8000ec2 <configExtiPin+0x6a>
	}
	default:
	{
		break;
 8000ec0:	bf00      	nop
	}
	}

	handlerExtiPIN.GPIO_PinConfig.GPIO_PinNumber 		= extiConfig->EXTIx;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <configExtiPin+0x90>)
 8000ec8:	711a      	strb	r2, [r3, #4]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <configExtiPin+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	715a      	strb	r2, [r3, #5]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= extiConfig->pinPUPD_Mode;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	789a      	ldrb	r2, [r3, #2]
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <configExtiPin+0x90>)
 8000ed6:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerExtiPIN);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <configExtiPin+0x90>)
 8000eda:	f000 f813 	bl	8000f04 <GPIO_Config>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000dc 	.word	0x200000dc
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40021c00 	.word	0x40021c00

08000f04 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a87      	ldr	r2, [pc, #540]	; (8001138 <GPIO_Config+0x234>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d106      	bne.n	8000f2c <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000f1e:	4b87      	ldr	r3, [pc, #540]	; (800113c <GPIO_Config+0x238>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a86      	ldr	r2, [pc, #536]	; (800113c <GPIO_Config+0x238>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	e03a      	b.n	8000fa2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a83      	ldr	r2, [pc, #524]	; (8001140 <GPIO_Config+0x23c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d106      	bne.n	8000f44 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000f36:	4b81      	ldr	r3, [pc, #516]	; (800113c <GPIO_Config+0x238>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a80      	ldr	r2, [pc, #512]	; (800113c <GPIO_Config+0x238>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	e02e      	b.n	8000fa2 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a7e      	ldr	r2, [pc, #504]	; (8001144 <GPIO_Config+0x240>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d106      	bne.n	8000f5c <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000f4e:	4b7b      	ldr	r3, [pc, #492]	; (800113c <GPIO_Config+0x238>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a7a      	ldr	r2, [pc, #488]	; (800113c <GPIO_Config+0x238>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	e022      	b.n	8000fa2 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a79      	ldr	r2, [pc, #484]	; (8001148 <GPIO_Config+0x244>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000f66:	4b75      	ldr	r3, [pc, #468]	; (800113c <GPIO_Config+0x238>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a74      	ldr	r2, [pc, #464]	; (800113c <GPIO_Config+0x238>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	e016      	b.n	8000fa2 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a74      	ldr	r2, [pc, #464]	; (800114c <GPIO_Config+0x248>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d106      	bne.n	8000f8c <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	; (800113c <GPIO_Config+0x238>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a6e      	ldr	r2, [pc, #440]	; (800113c <GPIO_Config+0x238>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	e00a      	b.n	8000fa2 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6f      	ldr	r2, [pc, #444]	; (8001150 <GPIO_Config+0x24c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d105      	bne.n	8000fa2 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000f96:	4b69      	ldr	r3, [pc, #420]	; (800113c <GPIO_Config+0x238>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a68      	ldr	r2, [pc, #416]	; (800113c <GPIO_Config+0x238>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	400a      	ands	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7a1b      	ldrb	r3, [r3, #8]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	791b      	ldrb	r3, [r3, #4]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2301      	movs	r3, #1
 8001000:	408b      	lsls	r3, r1
 8001002:	43db      	mvns	r3, r3
 8001004:	4619      	mov	r1, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	400a      	ands	r2, r1
 800100c:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6859      	ldr	r1, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	430a      	orrs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	799b      	ldrb	r3, [r3, #6]
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2103      	movs	r1, #3
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	400a      	ands	r2, r1
 800104c:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6899      	ldr	r1, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	430a      	orrs	r2, r1
 800105c:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	79db      	ldrb	r3, [r3, #7]
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2103      	movs	r1, #3
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	400a      	ands	r2, r1
 800108c:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68d9      	ldr	r1, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	430a      	orrs	r2, r1
 800109c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	795b      	ldrb	r3, [r3, #5]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d143      	bne.n	800112e <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	791b      	ldrb	r3, [r3, #4]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d81f      	bhi.n	80010ee <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	210f      	movs	r1, #15
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	400a      	ands	r2, r1
 80010ce:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a1a      	ldr	r2, [r3, #32]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7a5b      	ldrb	r3, [r3, #9]
 80010da:	4619      	mov	r1, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 80010ec:	e01f      	b.n	800112e <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	3b08      	subs	r3, #8
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fe:	210f      	movs	r1, #15
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	400a      	ands	r2, r1
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7a5b      	ldrb	r3, [r3, #9]
 800111c:	4619      	mov	r1, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	4619      	mov	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40020000 	.word	0x40020000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021c00 	.word	0x40021c00

08001154 <GPIO_WritePin>:
/**
 * Función utilizada para cambiar de estado el pin entregado en el handler, asignando el valor
 * entregado en la variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10d      	bne.n	8001182 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	791b      	ldrb	r3, [r3, #4]
 8001170:	4619      	mov	r1, r3
 8001172:	2301      	movs	r3, #1
 8001174:	408b      	lsls	r3, r1
 8001176:	4619      	mov	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001180:	e00d      	b.n	800119e <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	3310      	adds	r3, #16
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	4619      	mov	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <GPIO_ReadPin>:

/**
 * Función para leer el estado de un PIN especifico
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cuel luego retornaremos
	uint32_t pinValue = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]

	//Cargamos el valor del registro IDR, desplazando a la derecha tantas veces como la ubicación del PIN específico
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7912      	ldrb	r2, [r2, #4]
 80011be:	40d3      	lsrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
	pinValue &= 0b1;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
	return pinValue;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
	...

080011d8 <__libc_init_array>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	4d0d      	ldr	r5, [pc, #52]	; (8001210 <__libc_init_array+0x38>)
 80011dc:	4c0d      	ldr	r4, [pc, #52]	; (8001214 <__libc_init_array+0x3c>)
 80011de:	1b64      	subs	r4, r4, r5
 80011e0:	10a4      	asrs	r4, r4, #2
 80011e2:	2600      	movs	r6, #0
 80011e4:	42a6      	cmp	r6, r4
 80011e6:	d109      	bne.n	80011fc <__libc_init_array+0x24>
 80011e8:	4d0b      	ldr	r5, [pc, #44]	; (8001218 <__libc_init_array+0x40>)
 80011ea:	4c0c      	ldr	r4, [pc, #48]	; (800121c <__libc_init_array+0x44>)
 80011ec:	f000 f818 	bl	8001220 <_init>
 80011f0:	1b64      	subs	r4, r4, r5
 80011f2:	10a4      	asrs	r4, r4, #2
 80011f4:	2600      	movs	r6, #0
 80011f6:	42a6      	cmp	r6, r4
 80011f8:	d105      	bne.n	8001206 <__libc_init_array+0x2e>
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001200:	4798      	blx	r3
 8001202:	3601      	adds	r6, #1
 8001204:	e7ee      	b.n	80011e4 <__libc_init_array+0xc>
 8001206:	f855 3b04 	ldr.w	r3, [r5], #4
 800120a:	4798      	blx	r3
 800120c:	3601      	adds	r6, #1
 800120e:	e7f2      	b.n	80011f6 <__libc_init_array+0x1e>
 8001210:	08001238 	.word	0x08001238
 8001214:	08001238 	.word	0x08001238
 8001218:	08001238 	.word	0x08001238
 800121c:	0800123c 	.word	0x0800123c

08001220 <_init>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	bf00      	nop
 8001224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001226:	bc08      	pop	{r3}
 8001228:	469e      	mov	lr, r3
 800122a:	4770      	bx	lr

0800122c <_fini>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr
