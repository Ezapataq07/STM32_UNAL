
Tarea5_ezapataq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f5c  08001f5c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08001f5c  08001f5c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f5c  08001f5c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08001f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000084  08001fe8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08001fe8  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030a7  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ab5  00000000  00000000  00023155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00023c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00023e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f733  00000000  00000000  00024048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f19  00000000  00000000  0003377b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055322  00000000  00000000  00036694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b9b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b6c  00000000  00000000  0008ba08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ee8 	.word	0x08001ee8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001ee8 	.word	0x08001ee8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
uint32_t			samplingTime				= 0;

/* Se definen los prototipos de las funciones */
void initSystem(void);

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	// Se inicializan los periféricos a utilizar
	initSystem();
 8000286:	f000 f855 	bl	8000334 <initSystem>
	while(1){
		// Se revisa qué caracter ingresa por consola
		if (rxData != '\0'){
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <main+0x90>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d02b      	beq.n	80002ea <main+0x6a>
			// Si se ingresa "c" se comienza una conversión continua, la cual hará 128 conversiones y guarda los valores en un arreglo
			// También se inicializa un contador, con el fin de medir cuánto tiempo tardan en realizarse las 128 conversiones
			if (rxData == 'c'){
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <main+0x90>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b63      	cmp	r3, #99	; 0x63
 8000298:	d104      	bne.n	80002a4 <main+0x24>
				counter10us = 0;
 800029a:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <main+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
				startContinuousConversion();
 80002a0:	f000 fb36 	bl	8000910 <startContinuousConversion>
			}
			// Si se ingresa "p" se detiene la conversión continua, sin embargo, la conversión continua termina si se llena el arreglo con 64 valores
			if (rxData == 'p'){
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <main+0x90>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b70      	cmp	r3, #112	; 0x70
 80002aa:	d101      	bne.n	80002b0 <main+0x30>
				stopContinuousConversion();
 80002ac:	f000 fb44 	bl	8000938 <stopContinuousConversion>
			}
			// Si se ingresa "s" se imprimen por consola las 128 conversiones realizadas
			if (rxData == 's'){
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <main+0x90>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b73      	cmp	r3, #115	; 0x73
 80002b6:	d115      	bne.n	80002e4 <main+0x64>
				for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 80002b8:	2300      	movs	r3, #0
 80002ba:	80fb      	strh	r3, [r7, #6]
 80002bc:	e00f      	b.n	80002de <main+0x5e>
					sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
 80002be:	88fb      	ldrh	r3, [r7, #6]
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <main+0x98>)
 80002c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c6:	461a      	mov	r2, r3
 80002c8:	4914      	ldr	r1, [pc, #80]	; (800031c <main+0x9c>)
 80002ca:	4815      	ldr	r0, [pc, #84]	; (8000320 <main+0xa0>)
 80002cc:	f001 f9a0 	bl	8001610 <siprintf>
					writeMsg(&handlerUSART2, bufferData);
 80002d0:	4913      	ldr	r1, [pc, #76]	; (8000320 <main+0xa0>)
 80002d2:	4814      	ldr	r0, [pc, #80]	; (8000324 <main+0xa4>)
 80002d4:	f001 f8ae 	bl	8001434 <writeMsg>
				for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 80002d8:	88fb      	ldrh	r3, [r7, #6]
 80002da:	3301      	adds	r3, #1
 80002dc:	80fb      	strh	r3, [r7, #6]
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	2b7f      	cmp	r3, #127	; 0x7f
 80002e2:	d9ec      	bls.n	80002be <main+0x3e>
				}
			}

			rxData = '\0';
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <main+0x90>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
		}
		// Cuando se terminan las 128 conversiones, se imprime el tiempo de muestreo calculado
		if (adcIsComplete){
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <main+0xa8>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0cb      	beq.n	800028a <main+0xa>
			sprintf(bufferData, "The sampling time was %u us\n\r",(unsigned int) samplingTime);
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <main+0xac>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	461a      	mov	r2, r3
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <main+0xb0>)
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <main+0xa0>)
 80002fc:	f001 f988 	bl	8001610 <siprintf>
			writeMsg(&handlerUSART2, bufferData);
 8000300:	4907      	ldr	r1, [pc, #28]	; (8000320 <main+0xa0>)
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <main+0xa4>)
 8000304:	f001 f896 	bl	8001434 <writeMsg>
			adcIsComplete = false;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <main+0xa8>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 800030e:	e7bc      	b.n	800028a <main+0xa>
 8000310:	2000017e 	.word	0x2000017e
 8000314:	20000284 	.word	0x20000284
 8000318:	20000180 	.word	0x20000180
 800031c:	08001f00 	.word	0x08001f00
 8000320:	20000000 	.word	0x20000000
 8000324:	200000e4 	.word	0x200000e4
 8000328:	2000017f 	.word	0x2000017f
 800032c:	20000288 	.word	0x20000288
 8000330:	08001f08 	.word	0x08001f08

08000334 <initSystem>:


	return 0;
}

void initSystem(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 8000338:	4b4d      	ldr	r3, [pc, #308]	; (8000470 <initSystem+0x13c>)
 800033a:	4a4e      	ldr	r2, [pc, #312]	; (8000474 <initSystem+0x140>)
 800033c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800033e:	4b4c      	ldr	r3, [pc, #304]	; (8000470 <initSystem+0x13c>)
 8000340:	2205      	movs	r2, #5
 8000342:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8000344:	4b4a      	ldr	r3, [pc, #296]	; (8000470 <initSystem+0x13c>)
 8000346:	2201      	movs	r2, #1
 8000348:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 800034a:	4b49      	ldr	r3, [pc, #292]	; (8000470 <initSystem+0x13c>)
 800034c:	2200      	movs	r2, #0
 800034e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 8000350:	4b47      	ldr	r3, [pc, #284]	; (8000470 <initSystem+0x13c>)
 8000352:	2200      	movs	r2, #0
 8000354:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000356:	4b46      	ldr	r3, [pc, #280]	; (8000470 <initSystem+0x13c>)
 8000358:	2201      	movs	r2, #1
 800035a:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Está configuración no es relevante para el PIN en este caso
 800035c:	4b44      	ldr	r3, [pc, #272]	; (8000470 <initSystem+0x13c>)
 800035e:	2200      	movs	r2, #0
 8000360:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8000362:	4843      	ldr	r0, [pc, #268]	; (8000470 <initSystem+0x13c>)
 8000364:	f000 fd0a 	bl	8000d7c <GPIO_Config>

	/* Configuración del PIN que recibe la información por la USB */
	handlerRxPIN.pGPIOx								= GPIOA;
 8000368:	4b43      	ldr	r3, [pc, #268]	; (8000478 <initSystem+0x144>)
 800036a:	4a42      	ldr	r2, [pc, #264]	; (8000474 <initSystem+0x140>)
 800036c:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 800036e:	4b42      	ldr	r3, [pc, #264]	; (8000478 <initSystem+0x144>)
 8000370:	2203      	movs	r2, #3
 8000372:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000374:	4b40      	ldr	r3, [pc, #256]	; (8000478 <initSystem+0x144>)
 8000376:	2202      	movs	r2, #2
 8000378:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800037a:	4b3f      	ldr	r3, [pc, #252]	; (8000478 <initSystem+0x144>)
 800037c:	2200      	movs	r2, #0
 800037e:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <initSystem+0x144>)
 8000382:	2200      	movs	r2, #0
 8000384:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000386:	4b3c      	ldr	r3, [pc, #240]	; (8000478 <initSystem+0x144>)
 8000388:	2201      	movs	r2, #1
 800038a:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 800038c:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <initSystem+0x144>)
 800038e:	2207      	movs	r2, #7
 8000390:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 8000392:	4839      	ldr	r0, [pc, #228]	; (8000478 <initSystem+0x144>)
 8000394:	f000 fcf2 	bl	8000d7c <GPIO_Config>

	/* Configuración del PIN que envía la información por la USB (TX) */
	handlerTxPIN.pGPIOx								= GPIOA;
 8000398:	4b38      	ldr	r3, [pc, #224]	; (800047c <initSystem+0x148>)
 800039a:	4a36      	ldr	r2, [pc, #216]	; (8000474 <initSystem+0x140>)
 800039c:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 800039e:	4b37      	ldr	r3, [pc, #220]	; (800047c <initSystem+0x148>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80003a4:	4b35      	ldr	r3, [pc, #212]	; (800047c <initSystem+0x148>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003aa:	4b34      	ldr	r3, [pc, #208]	; (800047c <initSystem+0x148>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80003b0:	4b32      	ldr	r3, [pc, #200]	; (800047c <initSystem+0x148>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80003b6:	4b31      	ldr	r3, [pc, #196]	; (800047c <initSystem+0x148>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 80003bc:	4b2f      	ldr	r3, [pc, #188]	; (800047c <initSystem+0x148>)
 80003be:	2207      	movs	r2, #7
 80003c0:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 80003c2:	482e      	ldr	r0, [pc, #184]	; (800047c <initSystem+0x148>)
 80003c4:	f000 fcda 	bl	8000d7c <GPIO_Config>

	/* Configuración del USART2 */
	handlerUSART2.ptrUSARTx							= USART2;
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <initSystem+0x14c>)
 80003ca:	4a2e      	ldr	r2, [pc, #184]	; (8000484 <initSystem+0x150>)
 80003cc:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_mode			= USART_MODE_RXTX;
 80003ce:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <initSystem+0x14c>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 80003d4:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <initSystem+0x14c>)
 80003d6:	2202      	movs	r2, #2
 80003d8:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <initSystem+0x14c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity			= USART_PARITY_NONE;
 80003e0:	4b27      	ldr	r3, [pc, #156]	; (8000480 <initSystem+0x14c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <initSystem+0x14c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	721a      	strb	r2, [r3, #8]
	handlerUSART2.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 80003ec:	4b24      	ldr	r3, [pc, #144]	; (8000480 <initSystem+0x14c>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del USART
	USART_Config(&handlerUSART2);
 80003f2:	4823      	ldr	r0, [pc, #140]	; (8000480 <initSystem+0x14c>)
 80003f4:	f000 fe54 	bl	80010a0 <USART_Config>

	/* Configuración del Timer 2 */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <initSystem+0x154>)
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <initSystem+0x154>)
 8000402:	2201      	movs	r2, #1
 8000404:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_1ms;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <initSystem+0x154>)
 8000408:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800040c:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 250;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <initSystem+0x154>)
 8000410:	22fa      	movs	r2, #250	; 0xfa
 8000412:	609a      	str	r2, [r3, #8]
	//Cargamos la configuración TIM2
	BTimer_Config(&handlerStateLedTimer);
 8000414:	481c      	ldr	r0, [pc, #112]	; (8000488 <initSystem+0x154>)
 8000416:	f000 fbb3 	bl	8000b80 <BTimer_Config>

	/* Configuración del Timer para calcular el tiempo de muestreo */
	handlerAdcSamplingTimer.ptrTIMx						= TIM4;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <initSystem+0x158>)
 800041c:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <initSystem+0x15c>)
 800041e:	601a      	str	r2, [r3, #0]
	handlerAdcSamplingTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <initSystem+0x158>)
 8000422:	2201      	movs	r2, #1
 8000424:	711a      	strb	r2, [r3, #4]
	handlerAdcSamplingTimer.timerConfig.Timer_speed		= TIMER_INCR_SPEED_1us;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <initSystem+0x158>)
 8000428:	2210      	movs	r2, #16
 800042a:	80da      	strh	r2, [r3, #6]
	handlerAdcSamplingTimer.timerConfig.Timer_period	= 10;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <initSystem+0x158>)
 800042e:	220a      	movs	r2, #10
 8000430:	609a      	str	r2, [r3, #8]
	//Cargamos la configuración TIM2
	BTimer_Config(&handlerAdcSamplingTimer);
 8000432:	4816      	ldr	r0, [pc, #88]	; (800048c <initSystem+0x158>)
 8000434:	f000 fba4 	bl	8000b80 <BTimer_Config>

	/* Configuracion del ADC */
	adcSignalGenerator.channel			= ADC_CHANNEL_0;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <initSystem+0x160>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	adcSignalGenerator.dataAlignment	= ADC_ALIGNMENT_RIGHT;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <initSystem+0x160>)
 8000440:	2200      	movs	r2, #0
 8000442:	711a      	strb	r2, [r3, #4]
	adcSignalGenerator.resolution		= ADC_RESOLUTION_12_BIT;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <initSystem+0x160>)
 8000446:	2200      	movs	r2, #0
 8000448:	705a      	strb	r2, [r3, #1]
	adcSignalGenerator.samplingPeriod	= ADC_SAMPLING_PERIOD_3_CYCLES;
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <initSystem+0x160>)
 800044c:	2200      	movs	r2, #0
 800044e:	805a      	strh	r2, [r3, #2]
	sensores[0] = adcSignalGenerator;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <initSystem+0x164>)
 8000452:	4a10      	ldr	r2, [pc, #64]	; (8000494 <initSystem+0x160>)
 8000454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000458:	6018      	str	r0, [r3, #0]
 800045a:	3304      	adds	r3, #4
 800045c:	8019      	strh	r1, [r3, #0]
	// Se carga la configuración del ADC
	adcSingle_Config(&adcSignalGenerator);
 800045e:	480d      	ldr	r0, [pc, #52]	; (8000494 <initSystem+0x160>)
 8000460:	f000 f920 	bl	80006a4 <adcSingle_Config>
	adcSQRx_Config(sensores, NUM_SESNSORS);
 8000464:	2101      	movs	r1, #1
 8000466:	480c      	ldr	r0, [pc, #48]	; (8000498 <initSystem+0x164>)
 8000468:	f000 f9de 	bl	8000828 <adcSQRx_Config>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000a0 	.word	0x200000a0
 8000474:	40020000 	.word	0x40020000
 8000478:	200000ac 	.word	0x200000ac
 800047c:	200000b8 	.word	0x200000b8
 8000480:	200000e4 	.word	0x200000e4
 8000484:	40004400 	.word	0x40004400
 8000488:	200000c4 	.word	0x200000c4
 800048c:	200000d4 	.word	0x200000d4
 8000490:	40000800 	.word	0x40000800
 8000494:	20000170 	.word	0x20000170
 8000498:	20000178 	.word	0x20000178

0800049c <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <BTimer2_Callback+0x1c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <BTimer2_Callback+0x1c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f082 0220 	eor.w	r2, r2, #32
 80004ae:	615a      	str	r2, [r3, #20]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	200000a0 	.word	0x200000a0

080004bc <BTimer4_Callback>:

/* Implementacion del Callback para el timer4 */
void BTimer4_Callback(void){
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	counter10us++;
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <BTimer4_Callback+0x18>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a03      	ldr	r2, [pc, #12]	; (80004d4 <BTimer4_Callback+0x18>)
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000284 	.word	0x20000284

080004d8 <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80004dc:	f000 ffc2 	bl	8001464 <getRxData>
 80004e0:	4603      	mov	r3, r0
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <Usart2_RX_Callback+0x14>)
 80004e6:	701a      	strb	r2, [r3, #0]
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000017e 	.word	0x2000017e

080004f0 <adcComplete_Callback>:


void adcComplete_Callback(void){
 80004f0:	b598      	push	{r3, r4, r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	// Se añade a adcSignal el valor ADC
	adcSignal[dataPosition] = getADC();
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <adcComplete_Callback+0x54>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	461c      	mov	r4, r3
 80004fa:	f000 fa2b 	bl	8000954 <getADC>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <adcComplete_Callback+0x58>)
 8000504:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <adcComplete_Callback+0x54>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <adcComplete_Callback+0x54>)
 8000512:	801a      	strh	r2, [r3, #0]
	// Lo siguiente se ejecuta cuando se llena el arreglo adcSignal
	if (dataPosition >= ADC_SIGNAL_SIZE){
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <adcComplete_Callback+0x54>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	2b7f      	cmp	r3, #127	; 0x7f
 800051a:	d910      	bls.n	800053e <adcComplete_Callback+0x4e>
		// Se detienen las conversiones
		stopContinuousConversion();
 800051c:	f000 fa0c 	bl	8000938 <stopContinuousConversion>
		// Se calcula el tiempo de muestreo, teniendo en cuenta que counter10us se incrementa cada 10us y que en total se hicieron 128 conversiones
		samplingTime = (counter10us*10)/ADC_SIGNAL_SIZE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <adcComplete_Callback+0x5c>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4613      	mov	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	09db      	lsrs	r3, r3, #7
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <adcComplete_Callback+0x60>)
 8000530:	6013      	str	r3, [r2, #0]
		dataPosition = 0;
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <adcComplete_Callback+0x54>)
 8000534:	2200      	movs	r2, #0
 8000536:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <adcComplete_Callback+0x64>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
	}
}
 800053e:	bf00      	nop
 8000540:	bd98      	pop	{r3, r4, r7, pc}
 8000542:	bf00      	nop
 8000544:	20000280 	.word	0x20000280
 8000548:	20000180 	.word	0x20000180
 800054c:	20000284 	.word	0x20000284
 8000550:	20000288 	.word	0x20000288
 8000554:	2000017f 	.word	0x2000017f

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f001 f818 	bl	80015bc <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20020000 	.word	0x20020000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	2000028c 	.word	0x2000028c
 80005c0:	200002b8 	.word	0x200002b8

080005c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	; (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f2:	f000 ffe9 	bl	80015c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fe43 	bl	8000280 <main>

080005fa <LoopForever>:

LoopForever:
    b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000608:	08001f64 	.word	0x08001f64
  ldr r2, =_sbss
 800060c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000610:	200002b8 	.word	0x200002b8

08000614 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <BusFault_Handler>
	...

08000618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	2b00      	cmp	r3, #0
 8000628:	db0b      	blt.n	8000642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 021f 	and.w	r2, r3, #31
 8000630:	4906      	ldr	r1, [pc, #24]	; (800064c <__NVIC_EnableIRQ+0x34>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	2001      	movs	r0, #1
 800063a:	fa00 f202 	lsl.w	r2, r0, r2
 800063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <adcSingle_Config>:

GPIO_Handler_t 	handlerAdcPin 	= {0};
uint16_t		adcRawData 		= 0;
uint8_t			scanSequencePos = 1;

void adcSingle_Config(ADC_Config_t *adcConfig){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado */
	configAnalogPin(adcConfig->channel);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f96f 	bl	8000994 <configAnalogPin>

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2) */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006b6:	4b59      	ldr	r3, [pc, #356]	; (800081c <adcSingle_Config+0x178>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a58      	ldr	r2, [pc, #352]	; (800081c <adcSingle_Config+0x178>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurarlos
	ADC1->CR1 = 0;
 80006c2:	4b57      	ldr	r3, [pc, #348]	; (8000820 <adcSingle_Config+0x17c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 80006c8:	4b55      	ldr	r3, [pc, #340]	; (8000820 <adcSingle_Config+0x17c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig->resolution){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d83e      	bhi.n	8000754 <adcSingle_Config+0xb0>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <adcSingle_Config+0x38>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	08000707 	.word	0x08000707
 80006e4:	08000721 	.word	0x08000721
 80006e8:	0800073b 	.word	0x0800073b
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 80006ec:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <adcSingle_Config+0x17c>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <adcSingle_Config+0x17c>)
 80006f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80006f6:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 80006f8:	4b49      	ldr	r3, [pc, #292]	; (8000820 <adcSingle_Config+0x17c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a48      	ldr	r2, [pc, #288]	; (8000820 <adcSingle_Config+0x17c>)
 80006fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000702:	6053      	str	r3, [r2, #4]
		break;
 8000704:	e027      	b.n	8000756 <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_10_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 8000706:	4b46      	ldr	r3, [pc, #280]	; (8000820 <adcSingle_Config+0x17c>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	4a45      	ldr	r2, [pc, #276]	; (8000820 <adcSingle_Config+0x17c>)
 800070c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000710:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <adcSingle_Config+0x17c>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <adcSingle_Config+0x17c>)
 8000718:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800071c:	6053      	str	r3, [r2, #4]
		break;
 800071e:	e01a      	b.n	8000756 <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_8_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000720:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <adcSingle_Config+0x17c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a3e      	ldr	r2, [pc, #248]	; (8000820 <adcSingle_Config+0x17c>)
 8000726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800072a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 800072c:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <adcSingle_Config+0x17c>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <adcSingle_Config+0x17c>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000736:	6053      	str	r3, [r2, #4]
		break;
 8000738:	e00d      	b.n	8000756 <adcSingle_Config+0xb2>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <adcSingle_Config+0x17c>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a38      	ldr	r2, [pc, #224]	; (8000820 <adcSingle_Config+0x17c>)
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <adcSingle_Config+0x17c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a35      	ldr	r2, [pc, #212]	; (8000820 <adcSingle_Config+0x17c>)
 800074c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000750:	6053      	str	r3, [r2, #4]
		break;
 8000752:	e000      	b.n	8000756 <adcSingle_Config+0xb2>
	}
	default:
	{
		break;
 8000754:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1->CR1 &= ~ADC_CR1_SCAN;
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <adcSingle_Config+0x17c>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a31      	ldr	r2, [pc, #196]	; (8000820 <adcSingle_Config+0x17c>)
 800075c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000760:	6053      	str	r3, [r2, #4]


	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d106      	bne.n	8000778 <adcSingle_Config+0xd4>
		//Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <adcSingle_Config+0x17c>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <adcSingle_Config+0x17c>)
 8000770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000774:	6093      	str	r3, [r2, #8]
 8000776:	e005      	b.n	8000784 <adcSingle_Config+0xe0>
	}
	else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <adcSingle_Config+0x17c>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <adcSingle_Config+0x17c>)
 800077e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000782:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <adcSingle_Config+0x17c>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	4a25      	ldr	r2, [pc, #148]	; (8000820 <adcSingle_Config+0x17c>)
 800078a:	f023 0302 	bic.w	r3, r3, #2
 800078e:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling */
	if (adcConfig->channel < ADC_CHANNEL_10){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b09      	cmp	r3, #9
 8000796:	d810      	bhi.n	80007ba <adcSingle_Config+0x116>
		ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel)));
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <adcSingle_Config+0x17c>)
 800079a:	691a      	ldr	r2, [r3, #16]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	885b      	ldrh	r3, [r3, #2]
 80007a0:	4618      	mov	r0, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	460b      	mov	r3, r1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	440b      	add	r3, r1
 80007ae:	fa00 f303 	lsl.w	r3, r0, r3
 80007b2:	491b      	ldr	r1, [pc, #108]	; (8000820 <adcSingle_Config+0x17c>)
 80007b4:	4313      	orrs	r3, r2
 80007b6:	610b      	str	r3, [r1, #16]
 80007b8:	e010      	b.n	80007dc <adcSingle_Config+0x138>
	}
	else{
		ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel - 9)));
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <adcSingle_Config+0x17c>)
 80007bc:	68d9      	ldr	r1, [r3, #12]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	885b      	ldrh	r3, [r3, #2]
 80007c2:	4618      	mov	r0, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f1a3 0209 	sub.w	r2, r3, #9
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	fa00 f303 	lsl.w	r3, r0, r3
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <adcSingle_Config+0x17c>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	60d3      	str	r3, [r2, #12]
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el más rápido que se puede tener) */
	ADC->CCR = ADC_CCR_ADCPRE_0;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <adcSingle_Config+0x180>)
 80007de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e2:	605a      	str	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC */
	ADC1->CR1 |= ADC_CR1_EOCIE;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <adcSingle_Config+0x17c>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <adcSingle_Config+0x17c>)
 80007ee:	f043 0320 	orr.w	r3, r3, #32
 80007f2:	6053      	str	r3, [r2, #4]

	/* 11.a. Matriculamos la interrupción en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 80007f4:	2012      	movs	r0, #18
 80007f6:	f7ff ff0f 	bl	8000618 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(ADC_IRQn, 2);
 80007fa:	2102      	movs	r1, #2
 80007fc:	2012      	movs	r0, #18
 80007fe:	f7ff ff27 	bl	8000650 <__NVIC_SetPriority>

	/* 12. Activamos el módulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <adcSingle_Config+0x17c>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <adcSingle_Config+0x17c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800080e:	b662      	cpsie	i
}
 8000810:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40012000 	.word	0x40012000
 8000824:	40012300 	.word	0x40012300

08000828 <adcSQRx_Config>:

void adcSQRx_Config(ADC_Config_t *adcChannels, uint8_t numChannels){
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 1; i <= numChannels; i++){
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	e047      	b.n	80008ca <adcSQRx_Config+0xa2>
		/* 8. Configuramos la secuencia y cuantos elemenos hay en la secuencia */
		// Al hacerlo to.do 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
		if ((i >= 1) && (i <= 6)){
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d012      	beq.n	8000866 <adcSQRx_Config+0x3e>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b06      	cmp	r3, #6
 8000844:	d80f      	bhi.n	8000866 <adcSQRx_Config+0x3e>
			ADC1->SQR3 |= (adcChannels->channel << ((i-1) * 5));
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <adcSQRx_Config+0xe4>)
 8000848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	1e5a      	subs	r2, r3, #1
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	fa00 f303 	lsl.w	r3, r0, r3
 800085e:	4a2b      	ldr	r2, [pc, #172]	; (800090c <adcSQRx_Config+0xe4>)
 8000860:	430b      	orrs	r3, r1
 8000862:	6353      	str	r3, [r2, #52]	; 0x34
 8000864:	e02b      	b.n	80008be <adcSQRx_Config+0x96>
		}
		else if ((i >= 7) && (i <= 12)){
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	2b06      	cmp	r3, #6
 800086a:	d912      	bls.n	8000892 <adcSQRx_Config+0x6a>
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2b0c      	cmp	r3, #12
 8000870:	d80f      	bhi.n	8000892 <adcSQRx_Config+0x6a>
			ADC1->SQR2 |= (adcChannels->channel << ((i-7) * 5));
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <adcSQRx_Config+0xe4>)
 8000874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	1fda      	subs	r2, r3, #7
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	fa00 f303 	lsl.w	r3, r0, r3
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <adcSQRx_Config+0xe4>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	e015      	b.n	80008be <adcSQRx_Config+0x96>
		}
		else if ((i >= 13) && (i <= 16)){
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	2b0c      	cmp	r3, #12
 8000896:	d912      	bls.n	80008be <adcSQRx_Config+0x96>
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b10      	cmp	r3, #16
 800089c:	d80f      	bhi.n	80008be <adcSQRx_Config+0x96>
			ADC1->SQR1 |= (adcChannels->channel << ((i-13) * 5));
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <adcSQRx_Config+0xe4>)
 80008a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f1a3 020d 	sub.w	r2, r3, #13
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	fa00 f303 	lsl.w	r3, r0, r3
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <adcSQRx_Config+0xe4>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		adcChannels++;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3306      	adds	r3, #6
 80008c2:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 1; i <= numChannels; i++){
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	3301      	adds	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d9b3      	bls.n	800083a <adcSQRx_Config+0x12>
	}
	if (numChannels > 1){
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d914      	bls.n	8000902 <adcSQRx_Config+0xda>
		ADC1->CR2 |= ADC_CR2_EOCS;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <adcSQRx_Config+0xe4>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <adcSQRx_Config+0xe4>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e2:	6093      	str	r3, [r2, #8]
		ADC1->SQR1 |= ((numChannels-1) << ADC_SQR1_L_Pos);
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <adcSQRx_Config+0xe4>)
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	78fa      	ldrb	r2, [r7, #3]
 80008ea:	3a01      	subs	r2, #1
 80008ec:	0512      	lsls	r2, r2, #20
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <adcSQRx_Config+0xe4>)
 80008f2:	430b      	orrs	r3, r1
 80008f4:	62d3      	str	r3, [r2, #44]	; 0x2c
		ADC1->CR1 |= ADC_CR1_SCAN;
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <adcSQRx_Config+0xe4>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <adcSQRx_Config+0xe4>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	6053      	str	r3, [r2, #4]
	}
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	40012000 	.word	0x40012000

08000910 <startContinuousConversion>:
void startSingleConversion(void){
	/* Iniciamos un ciclo de conversión ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
}

void startContinuousConversion(void){
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_CONT;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <startContinuousConversion+0x24>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <startContinuousConversion+0x24>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	6093      	str	r3, [r2, #8]
	/* Iniciamos un ciclo de conversión ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <startContinuousConversion+0x24>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <startContinuousConversion+0x24>)
 8000926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800092a:	6093      	str	r3, [r2, #8]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40012000 	.word	0x40012000

08000938 <stopContinuousConversion>:

void stopContinuousConversion(void){
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~ADC_CR2_CONT;
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <stopContinuousConversion+0x18>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <stopContinuousConversion+0x18>)
 8000942:	f023 0302 	bic.w	r3, r3, #2
 8000946:	6093      	str	r3, [r2, #8]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40012000 	.word	0x40012000

08000954 <getADC>:

/* Función que me retorna el último dato adquirido por la ADC */
uint16_t getADC(void){
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	return adcRawData;
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <getADC+0x10>)
 800095a:	881b      	ldrh	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	2000029c 	.word	0x2000029c

08000968 <ADC_IRQHandler>:

/* Esta es la ISR de la interrupción por conversión ADC */
void ADC_IRQHandler(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interupción por conversión ADC
	if (ADC1->SR & ADC_SR_EOC){
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <ADC_IRQHandler+0x24>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1->DR;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <ADC_IRQHandler+0x24>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <ADC_IRQHandler+0x28>)
 8000980:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 8000982:	f7ff fdb5 	bl	80004f0 <adcComplete_Callback>
	}
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40012000 	.word	0x40012000
 8000990:	2000029c 	.word	0x2000029c

08000994 <configAnalogPin>:
__attribute__ ((weak)) void adcComplete_Callback(void){
	__NOP();
}

/* con esta función configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo
	switch (adcChannel){
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	f200 8093 	bhi.w	8000acc <configAnalogPin+0x138>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <configAnalogPin+0x18>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	080009ed 	.word	0x080009ed
 80009b0:	080009fb 	.word	0x080009fb
 80009b4:	08000a09 	.word	0x08000a09
 80009b8:	08000a17 	.word	0x08000a17
 80009bc:	08000a25 	.word	0x08000a25
 80009c0:	08000a33 	.word	0x08000a33
 80009c4:	08000a41 	.word	0x08000a41
 80009c8:	08000a4f 	.word	0x08000a4f
 80009cc:	08000a5d 	.word	0x08000a5d
 80009d0:	08000a6b 	.word	0x08000a6b
 80009d4:	08000a79 	.word	0x08000a79
 80009d8:	08000a87 	.word	0x08000a87
 80009dc:	08000a95 	.word	0x08000a95
 80009e0:	08000aa3 	.word	0x08000aa3
 80009e4:	08000ab1 	.word	0x08000ab1
 80009e8:	08000abf 	.word	0x08000abf

	case ADC_CHANNEL_0:
	{
		// Es el Pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 80009ec:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <configAnalogPin+0x150>)
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <configAnalogPin+0x154>)
 80009f0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80009f2:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <configAnalogPin+0x150>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	711a      	strb	r2, [r3, #4]
		break;
 80009f8:	e069      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1:
	{
		//Es el pin PA1
		handlerAdcPin.pGPIOx						= GPIOA;
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <configAnalogPin+0x150>)
 80009fc:	4a3a      	ldr	r2, [pc, #232]	; (8000ae8 <configAnalogPin+0x154>)
 80009fe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000a00:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <configAnalogPin+0x150>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	711a      	strb	r2, [r3, #4]
		break;
 8000a06:	e062      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_2:
	{
		//Es el pin PA2
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <configAnalogPin+0x150>)
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <configAnalogPin+0x154>)
 8000a0c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <configAnalogPin+0x150>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	711a      	strb	r2, [r3, #4]
		break;
 8000a14:	e05b      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_3:
	{
		//Es el pin PA3
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <configAnalogPin+0x150>)
 8000a18:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <configAnalogPin+0x154>)
 8000a1a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <configAnalogPin+0x150>)
 8000a1e:	2203      	movs	r2, #3
 8000a20:	711a      	strb	r2, [r3, #4]
		break;
 8000a22:	e054      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_4:
	{
		//Es el pin PA4
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <configAnalogPin+0x150>)
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <configAnalogPin+0x154>)
 8000a28:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <configAnalogPin+0x150>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	711a      	strb	r2, [r3, #4]
		break;
 8000a30:	e04d      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_5:
	{
		//Es el pin PA5
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <configAnalogPin+0x150>)
 8000a34:	4a2c      	ldr	r2, [pc, #176]	; (8000ae8 <configAnalogPin+0x154>)
 8000a36:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <configAnalogPin+0x150>)
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	711a      	strb	r2, [r3, #4]
		break;
 8000a3e:	e046      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6:
	{
		//Es el pin PA6
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <configAnalogPin+0x150>)
 8000a42:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <configAnalogPin+0x154>)
 8000a44:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <configAnalogPin+0x150>)
 8000a48:	2206      	movs	r2, #6
 8000a4a:	711a      	strb	r2, [r3, #4]
		break;
 8000a4c:	e03f      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7:
	{
		//Es el pin PA7
		handlerAdcPin.pGPIOx						= GPIOA;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <configAnalogPin+0x150>)
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <configAnalogPin+0x154>)
 8000a52:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <configAnalogPin+0x150>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	711a      	strb	r2, [r3, #4]
		break;
 8000a5a:	e038      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8:
	{
		//Es el pin PB0
		handlerAdcPin.pGPIOx						= GPIOB;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <configAnalogPin+0x150>)
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <configAnalogPin+0x158>)
 8000a60:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <configAnalogPin+0x150>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	711a      	strb	r2, [r3, #4]
		break;
 8000a68:	e031      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9:
	{
		//Es el pin PB1
		handlerAdcPin.pGPIOx						= GPIOB;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <configAnalogPin+0x150>)
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <configAnalogPin+0x158>)
 8000a6e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <configAnalogPin+0x150>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	711a      	strb	r2, [r3, #4]
		break;
 8000a76:	e02a      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10:
	{
		//Es el pin PC0
		handlerAdcPin.pGPIOx						= GPIOC;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <configAnalogPin+0x150>)
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <configAnalogPin+0x15c>)
 8000a7c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <configAnalogPin+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	711a      	strb	r2, [r3, #4]
		break;
 8000a84:	e023      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11:
	{
		//Es el pin PC1
		handlerAdcPin.pGPIOx						= GPIOC;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <configAnalogPin+0x150>)
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <configAnalogPin+0x15c>)
 8000a8a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <configAnalogPin+0x150>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	711a      	strb	r2, [r3, #4]
		break;
 8000a92:	e01c      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12:
	{
		//Es el pin PC2
		handlerAdcPin.pGPIOx						= GPIOC;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <configAnalogPin+0x150>)
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <configAnalogPin+0x15c>)
 8000a98:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <configAnalogPin+0x150>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	711a      	strb	r2, [r3, #4]
		break;
 8000aa0:	e015      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13:
	{
		//Es el pin PC3
		handlerAdcPin.pGPIOx						= GPIOC;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <configAnalogPin+0x150>)
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <configAnalogPin+0x15c>)
 8000aa6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <configAnalogPin+0x150>)
 8000aaa:	2203      	movs	r2, #3
 8000aac:	711a      	strb	r2, [r3, #4]
		break;
 8000aae:	e00e      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14:
	{
		//Es el pin PC4
		handlerAdcPin.pGPIOx						= GPIOC;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <configAnalogPin+0x150>)
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <configAnalogPin+0x15c>)
 8000ab4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <configAnalogPin+0x150>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	711a      	strb	r2, [r3, #4]
		break;
 8000abc:	e007      	b.n	8000ace <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15:
	{
		//Es el pin PC5
		handlerAdcPin.pGPIOx						= GPIOC;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <configAnalogPin+0x150>)
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <configAnalogPin+0x15c>)
 8000ac2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <configAnalogPin+0x150>)
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	711a      	strb	r2, [r3, #4]
		break;
 8000aca:	e000      	b.n	8000ace <configAnalogPin+0x13a>
	}
	default:
	{
		break;
 8000acc:	bf00      	nop
	}
	}

	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <configAnalogPin+0x150>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <configAnalogPin+0x150>)
 8000ad6:	f000 f951 	bl	8000d7c <GPIO_Config>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000290 	.word	0x20000290
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800

08000af4 <__NVIC_EnableIRQ>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4906      	ldr	r1, [pc, #24]	; (8000b28 <__NVIC_EnableIRQ+0x34>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <BTimer_Config+0x15c>)
 8000b8e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d106      	bne.n	8000bac <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <BTimer_Config+0x160>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a4f      	ldr	r2, [pc, #316]	; (8000ce0 <BTimer_Config+0x160>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	e022      	b.n	8000bf2 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	; (8000ce4 <BTimer_Config+0x164>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d106      	bne.n	8000bc4 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000bb6:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <BTimer_Config+0x160>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a49      	ldr	r2, [pc, #292]	; (8000ce0 <BTimer_Config+0x160>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	e016      	b.n	8000bf2 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a47      	ldr	r2, [pc, #284]	; (8000ce8 <BTimer_Config+0x168>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000bce:	4b44      	ldr	r3, [pc, #272]	; (8000ce0 <BTimer_Config+0x160>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a43      	ldr	r2, [pc, #268]	; (8000ce0 <BTimer_Config+0x160>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	e00a      	b.n	8000bf2 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a42      	ldr	r2, [pc, #264]	; (8000cec <BTimer_Config+0x16c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d105      	bne.n	8000bf2 <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000be6:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <BTimer_Config+0x160>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <BTimer_Config+0x160>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10c      	bne.n	8000c14 <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0210 	bic.w	r2, r2, #16
 8000c08:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
 8000c12:	e00d      	b.n	8000c30 <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0210 	orr.w	r2, r2, #16
 8000c22:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	88db      	ldrh	r3, [r3, #6]
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3a01      	subs	r2, #1
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f042 0201 	orr.w	r2, r2, #1
 8000c66:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c70:	d107      	bne.n	8000c82 <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000c72:	201c      	movs	r0, #28
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 8000c78:	2103      	movs	r1, #3
 8000c7a:	201c      	movs	r0, #28
 8000c7c:	f7ff ff56 	bl	8000b2c <__NVIC_SetPriority>
 8000c80:	e025      	b.n	8000cce <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <BTimer_Config+0x164>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d107      	bne.n	8000c9c <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000c8c:	201d      	movs	r0, #29
 8000c8e:	f7ff ff31 	bl	8000af4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8000c92:	2103      	movs	r1, #3
 8000c94:	201d      	movs	r0, #29
 8000c96:	f7ff ff49 	bl	8000b2c <__NVIC_SetPriority>
 8000c9a:	e018      	b.n	8000cce <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <BTimer_Config+0x168>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d107      	bne.n	8000cb6 <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000ca6:	201e      	movs	r0, #30
 8000ca8:	f7ff ff24 	bl	8000af4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 1);
 8000cac:	2101      	movs	r1, #1
 8000cae:	201e      	movs	r0, #30
 8000cb0:	f7ff ff3c 	bl	8000b2c <__NVIC_SetPriority>
 8000cb4:	e00b      	b.n	8000cce <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <BTimer_Config+0x16c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d106      	bne.n	8000cce <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000cc0:	2032      	movs	r0, #50	; 0x32
 8000cc2:	f7ff ff17 	bl	8000af4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	2032      	movs	r0, #50	; 0x32
 8000cca:	f7ff ff2f 	bl	8000b2c <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cce:	b662      	cpsie	i
}
 8000cd0:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200002a0 	.word	0x200002a0
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40000400 	.word	0x40000400
 8000ce8:	40000800 	.word	0x40000800
 8000cec:	40000c00 	.word	0x40000c00

08000cf0 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	 __NOP();
 8000cf4:	bf00      	nop
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <BTimer5_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer5_Callback(void){
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
	 __NOP();
 8000d02:	bf00      	nop
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1a:	f023 0301 	bic.w	r3, r3, #1
 8000d1e:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8000d20:	f7ff fbbc 	bl	800049c <BTimer2_Callback>

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <TIM3_IRQHandler+0x18>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <TIM3_IRQHandler+0x18>)
 8000d32:	f023 0301 	bic.w	r3, r3, #1
 8000d36:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000d38:	f7ff ffda 	bl	8000cf0 <BTimer3_Callback>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40000400 	.word	0x40000400

08000d44 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <TIM4_IRQHandler+0x18>)
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <TIM4_IRQHandler+0x18>)
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000d54:	f7ff fbb2 	bl	80004bc <BTimer4_Callback>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40000800 	.word	0x40000800

08000d60 <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <TIM5_IRQHandler+0x18>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <TIM5_IRQHandler+0x18>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 8000d70:	f7ff ffc5 	bl	8000cfe <BTimer5_Callback>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40000c00 	.word	0x40000c00

08000d7c <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a87      	ldr	r2, [pc, #540]	; (8000fb0 <GPIO_Config+0x234>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d106      	bne.n	8000da4 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000d96:	4b87      	ldr	r3, [pc, #540]	; (8000fb4 <GPIO_Config+0x238>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a86      	ldr	r2, [pc, #536]	; (8000fb4 <GPIO_Config+0x238>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	e03a      	b.n	8000e1a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a83      	ldr	r2, [pc, #524]	; (8000fb8 <GPIO_Config+0x23c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d106      	bne.n	8000dbc <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000dae:	4b81      	ldr	r3, [pc, #516]	; (8000fb4 <GPIO_Config+0x238>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a80      	ldr	r2, [pc, #512]	; (8000fb4 <GPIO_Config+0x238>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	e02e      	b.n	8000e1a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7e      	ldr	r2, [pc, #504]	; (8000fbc <GPIO_Config+0x240>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d106      	bne.n	8000dd4 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000dc6:	4b7b      	ldr	r3, [pc, #492]	; (8000fb4 <GPIO_Config+0x238>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a7a      	ldr	r2, [pc, #488]	; (8000fb4 <GPIO_Config+0x238>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	e022      	b.n	8000e1a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a79      	ldr	r2, [pc, #484]	; (8000fc0 <GPIO_Config+0x244>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d106      	bne.n	8000dec <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000dde:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <GPIO_Config+0x238>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a74      	ldr	r2, [pc, #464]	; (8000fb4 <GPIO_Config+0x238>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	e016      	b.n	8000e1a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a74      	ldr	r2, [pc, #464]	; (8000fc4 <GPIO_Config+0x248>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d106      	bne.n	8000e04 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000df6:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <GPIO_Config+0x238>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a6e      	ldr	r2, [pc, #440]	; (8000fb4 <GPIO_Config+0x238>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	e00a      	b.n	8000e1a <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a6f      	ldr	r2, [pc, #444]	; (8000fc8 <GPIO_Config+0x24c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d105      	bne.n	8000e1a <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000e0e:	4b69      	ldr	r3, [pc, #420]	; (8000fb4 <GPIO_Config+0x238>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a68      	ldr	r2, [pc, #416]	; (8000fb4 <GPIO_Config+0x238>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2103      	movs	r1, #3
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	400a      	ands	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7a1b      	ldrb	r3, [r3, #8]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	4619      	mov	r1, r3
 8000e76:	2301      	movs	r3, #1
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	400a      	ands	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	799b      	ldrb	r3, [r3, #6]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6899      	ldr	r1, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	79db      	ldrb	r3, [r3, #7]
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	791b      	ldrb	r3, [r3, #4]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4619      	mov	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	400a      	ands	r2, r1
 8000f04:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68d9      	ldr	r1, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	795b      	ldrb	r3, [r3, #5]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d143      	bne.n	8000fa6 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	d81f      	bhi.n	8000f66 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a1a      	ldr	r2, [r3, #32]
 8000f34:	210f      	movs	r1, #15
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	400a      	ands	r2, r1
 8000f46:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6a1a      	ldr	r2, [r3, #32]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7a5b      	ldrb	r3, [r3, #9]
 8000f52:	4619      	mov	r1, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000f64:	e01f      	b.n	8000fa6 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	3b08      	subs	r3, #8
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f76:	210f      	movs	r1, #15
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	400a      	ands	r2, r1
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a5b      	ldrb	r3, [r3, #9]
 8000f94:	4619      	mov	r1, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021c00 	.word	0x40021c00

08000fcc <__NVIC_EnableIRQ>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4906      	ldr	r1, [pc, #24]	; (8001000 <__NVIC_EnableIRQ+0x34>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_DisableIRQ>:
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db12      	blt.n	800103c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	490a      	ldr	r1, [pc, #40]	; (8001048 <__NVIC_DisableIRQ+0x44>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	3320      	adds	r3, #32
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001030:	f3bf 8f4f 	dsb	sy
}
 8001034:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001036:	f3bf 8f6f 	isb	sy
}
 800103a:	bf00      	nop
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a88      	ldr	r2, [pc, #544]	; (80012d0 <USART_Config+0x230>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d106      	bne.n	80010c0 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 80010b2:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <USART_Config+0x234>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <USART_Config+0x234>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	e016      	b.n	80010ee <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a84      	ldr	r2, [pc, #528]	; (80012d8 <USART_Config+0x238>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d106      	bne.n	80010d8 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 80010ca:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <USART_Config+0x234>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a81      	ldr	r2, [pc, #516]	; (80012d4 <USART_Config+0x234>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	e00a      	b.n	80010ee <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a7f      	ldr	r2, [pc, #508]	; (80012dc <USART_Config+0x23c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d105      	bne.n	80010ee <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 80010e2:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <USART_Config+0x234>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a7b      	ldr	r2, [pc, #492]	; (80012d4 <USART_Config+0x234>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	79db      	ldrb	r3, [r3, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d023      	beq.n	800114e <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001114:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	79db      	ldrb	r3, [r3, #7]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d10b      	bne.n	8001136 <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800112c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	719a      	strb	r2, [r3, #6]
 8001134:	e013      	b.n	800115e <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001144:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	719a      	strb	r2, [r3, #6]
 800114c:	e007      	b.n	800115e <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800115c:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d108      	bne.n	8001178 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	e007      	b.n	8001188 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001186:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7a1b      	ldrb	r3, [r3, #8]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d82f      	bhi.n	80011f0 <USART_Config+0x150>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <USART_Config+0xf8>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011bb 	.word	0x080011bb
 80011a0:	080011cd 	.word	0x080011cd
 80011a4:	080011df 	.word	0x080011df
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011b6:	611a      	str	r2, [r3, #16]
		break;
 80011b8:	e01a      	b.n	80011f0 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011c8:	611a      	str	r2, [r3, #16]
		break;
 80011ca:	e011      	b.n	80011f0 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011da:	611a      	str	r2, [r3, #16]
		break;
 80011dc:	e008      	b.n	80011f0 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011ec:	611a      	str	r2, [r3, #16]
		break;
 80011ee:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	795b      	ldrb	r3, [r3, #5]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f240 6283 	movw	r2, #1667	; 0x683
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	e01a      	b.n	800123a <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	795b      	ldrb	r3, [r3, #5]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f240 3241 	movw	r2, #833	; 0x341
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e010      	b.n	800123a <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	795b      	ldrb	r3, [r3, #5]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d104      	bne.n	800122a <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	228b      	movs	r2, #139	; 0x8b
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e007      	b.n	800123a <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d103      	bne.n	800123a <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2211      	movs	r2, #17
 8001238:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d84e      	bhi.n	80012e0 <USART_Config+0x240>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <USART_Config+0x1a8>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001259 	.word	0x08001259
 800124c:	0800126b 	.word	0x0800126b
 8001250:	0800127d 	.word	0x0800127d
 8001254:	0800129f 	.word	0x0800129f
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0208 	orr.w	r2, r2, #8
 8001266:	60da      	str	r2, [r3, #12]
		break;
 8001268:	e053      	b.n	8001312 <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	60da      	str	r2, [r3, #12]
		break;
 800127a:	e04a      	b.n	8001312 <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0208 	orr.w	r2, r2, #8
 800128a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0204 	orr.w	r2, r2, #4
 800129a:	60da      	str	r2, [r3, #12]
		break;
 800129c:	e039      	b.n	8001312 <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0208 	bic.w	r2, r2, #8
 80012ac:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0204 	bic.w	r2, r2, #4
 80012bc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012cc:	60da      	str	r2, [r3, #12]
		break;
 80012ce:	e020      	b.n	8001312 <USART_Config+0x272>
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40004400 	.word	0x40004400
 80012dc:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0208 	bic.w	r2, r2, #8
 80012ee:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800130e:	60da      	str	r2, [r3, #12]
		break;
 8001310:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d007      	beq.n	800132a <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001328:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800132a:	b672      	cpsid	i
}
 800132c:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800133c:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7a5b      	ldrb	r3, [r3, #9]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d022      	beq.n	800138c <USART_Config+0x2ec>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a20      	ldr	r2, [pc, #128]	; (80013cc <USART_Config+0x32c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d107      	bne.n	8001360 <USART_Config+0x2c0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001350:	2025      	movs	r0, #37	; 0x25
 8001352:	f7ff fe3b 	bl	8000fcc <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART1_IRQn, 1);
 8001356:	2101      	movs	r1, #1
 8001358:	2025      	movs	r0, #37	; 0x25
 800135a:	f7ff fe77 	bl	800104c <__NVIC_SetPriority>
 800135e:	e01e      	b.n	800139e <USART_Config+0x2fe>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <USART_Config+0x330>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d107      	bne.n	800137a <USART_Config+0x2da>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 800136a:	2026      	movs	r0, #38	; 0x26
 800136c:	f7ff fe2e 	bl	8000fcc <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART2_IRQn, 2);
 8001370:	2102      	movs	r1, #2
 8001372:	2026      	movs	r0, #38	; 0x26
 8001374:	f7ff fe6a 	bl	800104c <__NVIC_SetPriority>
 8001378:	e011      	b.n	800139e <USART_Config+0x2fe>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <USART_Config+0x334>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d10c      	bne.n	800139e <USART_Config+0x2fe>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001384:	2047      	movs	r0, #71	; 0x47
 8001386:	f7ff fe21 	bl	8000fcc <__NVIC_EnableIRQ>
 800138a:	e008      	b.n	800139e <USART_Config+0x2fe>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 800138c:	2025      	movs	r0, #37	; 0x25
 800138e:	f7ff fe39 	bl	8001004 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 8001392:	2026      	movs	r0, #38	; 0x26
 8001394:	f7ff fe36 	bl	8001004 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 8001398:	2047      	movs	r0, #71	; 0x47
 800139a:	f7ff fe33 	bl	8001004 <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7a5b      	ldrb	r3, [r3, #9]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d003      	beq.n	80013ae <USART_Config+0x30e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7a5b      	ldrb	r3, [r3, #9]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d107      	bne.n	80013be <USART_Config+0x31e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0220 	orr.w	r2, r2, #32
 80013bc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80013be:	b662      	cpsie	i
}
 80013c0:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40004400 	.word	0x40004400
 80013d4:	40011400 	.word	0x40011400

080013d8 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7a5b      	ldrb	r3, [r3, #9]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <writeChar+0x1c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a5b      	ldrb	r3, [r3, #9]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d10c      	bne.n	800140e <writeChar+0x36>
		auxDataToSend = dataToSend;
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <writeChar+0x58>)
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	e00c      	b.n	8001426 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 800140c:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f7      	beq.n	800140c <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	605a      	str	r2, [r3, #4]
	}
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200002a5 	.word	0x200002a5

08001434 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 800143e:	e008      	b.n	8001452 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffc6 	bl	80013d8 <writeChar>
		msgToSend++;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <writeMsg+0xc>
	}
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return auxRxData;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <getRxData+0x10>)
 800146a:	781b      	ldrb	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	200002a4 	.word	0x200002a4

08001478 <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	 __NOP();
 800147c:	bf00      	nop
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <Usart2_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
	 __NOP();
 800148a:	bf00      	nop
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	 __NOP();
 8001498:	bf00      	nop
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
	 __NOP();
 80014a6:	bf00      	nop
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	 __NOP();
 80014b4:	bf00      	nop
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
	...

080014c0 <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <USART1_IRQHandler+0x48>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <USART1_IRQHandler+0x48>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <USART1_IRQHandler+0x4c>)
 80014d8:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 80014da:	f7ff ffe2 	bl	80014a2 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 80014de:	e011      	b.n	8001504 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <USART1_IRQHandler+0x48>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <USART1_IRQHandler+0x50>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <USART1_IRQHandler+0x48>)
 80014f2:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <USART1_IRQHandler+0x48>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <USART1_IRQHandler+0x48>)
 80014fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014fe:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 8001500:	f7ff ffba 	bl	8001478 <Usart1_TX_Callback>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40011000 	.word	0x40011000
 800150c:	200002a4 	.word	0x200002a4
 8001510:	200002a5 	.word	0x200002a5

08001514 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <USART2_IRQHandler+0x48>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <USART2_IRQHandler+0x48>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <USART2_IRQHandler+0x4c>)
 800152c:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 800152e:	f7fe ffd3 	bl	80004d8 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 8001532:	e011      	b.n	8001558 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <USART2_IRQHandler+0x48>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <USART2_IRQHandler+0x50>)
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <USART2_IRQHandler+0x48>)
 8001546:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <USART2_IRQHandler+0x48>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <USART2_IRQHandler+0x48>)
 800154e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001552:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 8001554:	f7ff ff97 	bl	8001486 <Usart2_TX_Callback>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40004400 	.word	0x40004400
 8001560:	200002a4 	.word	0x200002a4
 8001564:	200002a5 	.word	0x200002a5

08001568 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <USART6_IRQHandler+0x48>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <USART6_IRQHandler+0x48>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <USART6_IRQHandler+0x4c>)
 8001580:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 8001582:	f7ff ff95 	bl	80014b0 <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 8001586:	e011      	b.n	80015ac <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <USART6_IRQHandler+0x48>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00b      	beq.n	80015ac <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <USART6_IRQHandler+0x50>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <USART6_IRQHandler+0x48>)
 800159a:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <USART6_IRQHandler+0x48>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <USART6_IRQHandler+0x48>)
 80015a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a6:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 80015a8:	f7ff ff74 	bl	8001494 <Usart6_TX_Callback>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40011400 	.word	0x40011400
 80015b4:	200002a4 	.word	0x200002a4
 80015b8:	200002a5 	.word	0x200002a5

080015bc <__errno>:
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <__errno+0x8>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000020 	.word	0x20000020

080015c8 <__libc_init_array>:
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	4d0d      	ldr	r5, [pc, #52]	; (8001600 <__libc_init_array+0x38>)
 80015cc:	4c0d      	ldr	r4, [pc, #52]	; (8001604 <__libc_init_array+0x3c>)
 80015ce:	1b64      	subs	r4, r4, r5
 80015d0:	10a4      	asrs	r4, r4, #2
 80015d2:	2600      	movs	r6, #0
 80015d4:	42a6      	cmp	r6, r4
 80015d6:	d109      	bne.n	80015ec <__libc_init_array+0x24>
 80015d8:	4d0b      	ldr	r5, [pc, #44]	; (8001608 <__libc_init_array+0x40>)
 80015da:	4c0c      	ldr	r4, [pc, #48]	; (800160c <__libc_init_array+0x44>)
 80015dc:	f000 fc84 	bl	8001ee8 <_init>
 80015e0:	1b64      	subs	r4, r4, r5
 80015e2:	10a4      	asrs	r4, r4, #2
 80015e4:	2600      	movs	r6, #0
 80015e6:	42a6      	cmp	r6, r4
 80015e8:	d105      	bne.n	80015f6 <__libc_init_array+0x2e>
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
 80015ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f0:	4798      	blx	r3
 80015f2:	3601      	adds	r6, #1
 80015f4:	e7ee      	b.n	80015d4 <__libc_init_array+0xc>
 80015f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015fa:	4798      	blx	r3
 80015fc:	3601      	adds	r6, #1
 80015fe:	e7f2      	b.n	80015e6 <__libc_init_array+0x1e>
 8001600:	08001f5c 	.word	0x08001f5c
 8001604:	08001f5c 	.word	0x08001f5c
 8001608:	08001f5c 	.word	0x08001f5c
 800160c:	08001f60 	.word	0x08001f60

08001610 <siprintf>:
 8001610:	b40e      	push	{r1, r2, r3}
 8001612:	b500      	push	{lr}
 8001614:	b09c      	sub	sp, #112	; 0x70
 8001616:	ab1d      	add	r3, sp, #116	; 0x74
 8001618:	9002      	str	r0, [sp, #8]
 800161a:	9006      	str	r0, [sp, #24]
 800161c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <siprintf+0x38>)
 8001622:	9107      	str	r1, [sp, #28]
 8001624:	9104      	str	r1, [sp, #16]
 8001626:	4909      	ldr	r1, [pc, #36]	; (800164c <siprintf+0x3c>)
 8001628:	f853 2b04 	ldr.w	r2, [r3], #4
 800162c:	9105      	str	r1, [sp, #20]
 800162e:	6800      	ldr	r0, [r0, #0]
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	a902      	add	r1, sp, #8
 8001634:	f000 f868 	bl	8001708 <_svfiprintf_r>
 8001638:	9b02      	ldr	r3, [sp, #8]
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	b01c      	add	sp, #112	; 0x70
 8001640:	f85d eb04 	ldr.w	lr, [sp], #4
 8001644:	b003      	add	sp, #12
 8001646:	4770      	bx	lr
 8001648:	20000020 	.word	0x20000020
 800164c:	ffff0208 	.word	0xffff0208

08001650 <__ssputs_r>:
 8001650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001654:	688e      	ldr	r6, [r1, #8]
 8001656:	429e      	cmp	r6, r3
 8001658:	4682      	mov	sl, r0
 800165a:	460c      	mov	r4, r1
 800165c:	4690      	mov	r8, r2
 800165e:	461f      	mov	r7, r3
 8001660:	d838      	bhi.n	80016d4 <__ssputs_r+0x84>
 8001662:	898a      	ldrh	r2, [r1, #12]
 8001664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001668:	d032      	beq.n	80016d0 <__ssputs_r+0x80>
 800166a:	6825      	ldr	r5, [r4, #0]
 800166c:	6909      	ldr	r1, [r1, #16]
 800166e:	eba5 0901 	sub.w	r9, r5, r1
 8001672:	6965      	ldr	r5, [r4, #20]
 8001674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800167c:	3301      	adds	r3, #1
 800167e:	444b      	add	r3, r9
 8001680:	106d      	asrs	r5, r5, #1
 8001682:	429d      	cmp	r5, r3
 8001684:	bf38      	it	cc
 8001686:	461d      	movcc	r5, r3
 8001688:	0553      	lsls	r3, r2, #21
 800168a:	d531      	bpl.n	80016f0 <__ssputs_r+0xa0>
 800168c:	4629      	mov	r1, r5
 800168e:	f000 fb61 	bl	8001d54 <_malloc_r>
 8001692:	4606      	mov	r6, r0
 8001694:	b950      	cbnz	r0, 80016ac <__ssputs_r+0x5c>
 8001696:	230c      	movs	r3, #12
 8001698:	f8ca 3000 	str.w	r3, [sl]
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016ac:	6921      	ldr	r1, [r4, #16]
 80016ae:	464a      	mov	r2, r9
 80016b0:	f000 fabe 	bl	8001c30 <memcpy>
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	6126      	str	r6, [r4, #16]
 80016c2:	6165      	str	r5, [r4, #20]
 80016c4:	444e      	add	r6, r9
 80016c6:	eba5 0509 	sub.w	r5, r5, r9
 80016ca:	6026      	str	r6, [r4, #0]
 80016cc:	60a5      	str	r5, [r4, #8]
 80016ce:	463e      	mov	r6, r7
 80016d0:	42be      	cmp	r6, r7
 80016d2:	d900      	bls.n	80016d6 <__ssputs_r+0x86>
 80016d4:	463e      	mov	r6, r7
 80016d6:	6820      	ldr	r0, [r4, #0]
 80016d8:	4632      	mov	r2, r6
 80016da:	4641      	mov	r1, r8
 80016dc:	f000 fab6 	bl	8001c4c <memmove>
 80016e0:	68a3      	ldr	r3, [r4, #8]
 80016e2:	1b9b      	subs	r3, r3, r6
 80016e4:	60a3      	str	r3, [r4, #8]
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	4433      	add	r3, r6
 80016ea:	6023      	str	r3, [r4, #0]
 80016ec:	2000      	movs	r0, #0
 80016ee:	e7db      	b.n	80016a8 <__ssputs_r+0x58>
 80016f0:	462a      	mov	r2, r5
 80016f2:	f000 fba3 	bl	8001e3c <_realloc_r>
 80016f6:	4606      	mov	r6, r0
 80016f8:	2800      	cmp	r0, #0
 80016fa:	d1e1      	bne.n	80016c0 <__ssputs_r+0x70>
 80016fc:	6921      	ldr	r1, [r4, #16]
 80016fe:	4650      	mov	r0, sl
 8001700:	f000 fabe 	bl	8001c80 <_free_r>
 8001704:	e7c7      	b.n	8001696 <__ssputs_r+0x46>
	...

08001708 <_svfiprintf_r>:
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	4698      	mov	r8, r3
 800170e:	898b      	ldrh	r3, [r1, #12]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	b09d      	sub	sp, #116	; 0x74
 8001714:	4607      	mov	r7, r0
 8001716:	460d      	mov	r5, r1
 8001718:	4614      	mov	r4, r2
 800171a:	d50e      	bpl.n	800173a <_svfiprintf_r+0x32>
 800171c:	690b      	ldr	r3, [r1, #16]
 800171e:	b963      	cbnz	r3, 800173a <_svfiprintf_r+0x32>
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	f000 fb17 	bl	8001d54 <_malloc_r>
 8001726:	6028      	str	r0, [r5, #0]
 8001728:	6128      	str	r0, [r5, #16]
 800172a:	b920      	cbnz	r0, 8001736 <_svfiprintf_r+0x2e>
 800172c:	230c      	movs	r3, #12
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	e0d1      	b.n	80018da <_svfiprintf_r+0x1d2>
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	616b      	str	r3, [r5, #20]
 800173a:	2300      	movs	r3, #0
 800173c:	9309      	str	r3, [sp, #36]	; 0x24
 800173e:	2320      	movs	r3, #32
 8001740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001744:	f8cd 800c 	str.w	r8, [sp, #12]
 8001748:	2330      	movs	r3, #48	; 0x30
 800174a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80018f4 <_svfiprintf_r+0x1ec>
 800174e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001752:	f04f 0901 	mov.w	r9, #1
 8001756:	4623      	mov	r3, r4
 8001758:	469a      	mov	sl, r3
 800175a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800175e:	b10a      	cbz	r2, 8001764 <_svfiprintf_r+0x5c>
 8001760:	2a25      	cmp	r2, #37	; 0x25
 8001762:	d1f9      	bne.n	8001758 <_svfiprintf_r+0x50>
 8001764:	ebba 0b04 	subs.w	fp, sl, r4
 8001768:	d00b      	beq.n	8001782 <_svfiprintf_r+0x7a>
 800176a:	465b      	mov	r3, fp
 800176c:	4622      	mov	r2, r4
 800176e:	4629      	mov	r1, r5
 8001770:	4638      	mov	r0, r7
 8001772:	f7ff ff6d 	bl	8001650 <__ssputs_r>
 8001776:	3001      	adds	r0, #1
 8001778:	f000 80aa 	beq.w	80018d0 <_svfiprintf_r+0x1c8>
 800177c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800177e:	445a      	add	r2, fp
 8001780:	9209      	str	r2, [sp, #36]	; 0x24
 8001782:	f89a 3000 	ldrb.w	r3, [sl]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80a2 	beq.w	80018d0 <_svfiprintf_r+0x1c8>
 800178c:	2300      	movs	r3, #0
 800178e:	f04f 32ff 	mov.w	r2, #4294967295
 8001792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001796:	f10a 0a01 	add.w	sl, sl, #1
 800179a:	9304      	str	r3, [sp, #16]
 800179c:	9307      	str	r3, [sp, #28]
 800179e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017a2:	931a      	str	r3, [sp, #104]	; 0x68
 80017a4:	4654      	mov	r4, sl
 80017a6:	2205      	movs	r2, #5
 80017a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ac:	4851      	ldr	r0, [pc, #324]	; (80018f4 <_svfiprintf_r+0x1ec>)
 80017ae:	f7fe fd17 	bl	80001e0 <memchr>
 80017b2:	9a04      	ldr	r2, [sp, #16]
 80017b4:	b9d8      	cbnz	r0, 80017ee <_svfiprintf_r+0xe6>
 80017b6:	06d0      	lsls	r0, r2, #27
 80017b8:	bf44      	itt	mi
 80017ba:	2320      	movmi	r3, #32
 80017bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017c0:	0711      	lsls	r1, r2, #28
 80017c2:	bf44      	itt	mi
 80017c4:	232b      	movmi	r3, #43	; 0x2b
 80017c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017ca:	f89a 3000 	ldrb.w	r3, [sl]
 80017ce:	2b2a      	cmp	r3, #42	; 0x2a
 80017d0:	d015      	beq.n	80017fe <_svfiprintf_r+0xf6>
 80017d2:	9a07      	ldr	r2, [sp, #28]
 80017d4:	4654      	mov	r4, sl
 80017d6:	2000      	movs	r0, #0
 80017d8:	f04f 0c0a 	mov.w	ip, #10
 80017dc:	4621      	mov	r1, r4
 80017de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017e2:	3b30      	subs	r3, #48	; 0x30
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d94e      	bls.n	8001886 <_svfiprintf_r+0x17e>
 80017e8:	b1b0      	cbz	r0, 8001818 <_svfiprintf_r+0x110>
 80017ea:	9207      	str	r2, [sp, #28]
 80017ec:	e014      	b.n	8001818 <_svfiprintf_r+0x110>
 80017ee:	eba0 0308 	sub.w	r3, r0, r8
 80017f2:	fa09 f303 	lsl.w	r3, r9, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	9304      	str	r3, [sp, #16]
 80017fa:	46a2      	mov	sl, r4
 80017fc:	e7d2      	b.n	80017a4 <_svfiprintf_r+0x9c>
 80017fe:	9b03      	ldr	r3, [sp, #12]
 8001800:	1d19      	adds	r1, r3, #4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	9103      	str	r1, [sp, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfbb      	ittet	lt
 800180a:	425b      	neglt	r3, r3
 800180c:	f042 0202 	orrlt.w	r2, r2, #2
 8001810:	9307      	strge	r3, [sp, #28]
 8001812:	9307      	strlt	r3, [sp, #28]
 8001814:	bfb8      	it	lt
 8001816:	9204      	strlt	r2, [sp, #16]
 8001818:	7823      	ldrb	r3, [r4, #0]
 800181a:	2b2e      	cmp	r3, #46	; 0x2e
 800181c:	d10c      	bne.n	8001838 <_svfiprintf_r+0x130>
 800181e:	7863      	ldrb	r3, [r4, #1]
 8001820:	2b2a      	cmp	r3, #42	; 0x2a
 8001822:	d135      	bne.n	8001890 <_svfiprintf_r+0x188>
 8001824:	9b03      	ldr	r3, [sp, #12]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	9203      	str	r2, [sp, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bfb8      	it	lt
 8001830:	f04f 33ff 	movlt.w	r3, #4294967295
 8001834:	3402      	adds	r4, #2
 8001836:	9305      	str	r3, [sp, #20]
 8001838:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80018f8 <_svfiprintf_r+0x1f0>
 800183c:	7821      	ldrb	r1, [r4, #0]
 800183e:	2203      	movs	r2, #3
 8001840:	4650      	mov	r0, sl
 8001842:	f7fe fccd 	bl	80001e0 <memchr>
 8001846:	b140      	cbz	r0, 800185a <_svfiprintf_r+0x152>
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	eba0 000a 	sub.w	r0, r0, sl
 800184e:	fa03 f000 	lsl.w	r0, r3, r0
 8001852:	9b04      	ldr	r3, [sp, #16]
 8001854:	4303      	orrs	r3, r0
 8001856:	3401      	adds	r4, #1
 8001858:	9304      	str	r3, [sp, #16]
 800185a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800185e:	4827      	ldr	r0, [pc, #156]	; (80018fc <_svfiprintf_r+0x1f4>)
 8001860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001864:	2206      	movs	r2, #6
 8001866:	f7fe fcbb 	bl	80001e0 <memchr>
 800186a:	2800      	cmp	r0, #0
 800186c:	d038      	beq.n	80018e0 <_svfiprintf_r+0x1d8>
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <_svfiprintf_r+0x1f8>)
 8001870:	bb1b      	cbnz	r3, 80018ba <_svfiprintf_r+0x1b2>
 8001872:	9b03      	ldr	r3, [sp, #12]
 8001874:	3307      	adds	r3, #7
 8001876:	f023 0307 	bic.w	r3, r3, #7
 800187a:	3308      	adds	r3, #8
 800187c:	9303      	str	r3, [sp, #12]
 800187e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001880:	4433      	add	r3, r6
 8001882:	9309      	str	r3, [sp, #36]	; 0x24
 8001884:	e767      	b.n	8001756 <_svfiprintf_r+0x4e>
 8001886:	fb0c 3202 	mla	r2, ip, r2, r3
 800188a:	460c      	mov	r4, r1
 800188c:	2001      	movs	r0, #1
 800188e:	e7a5      	b.n	80017dc <_svfiprintf_r+0xd4>
 8001890:	2300      	movs	r3, #0
 8001892:	3401      	adds	r4, #1
 8001894:	9305      	str	r3, [sp, #20]
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 0c0a 	mov.w	ip, #10
 800189c:	4620      	mov	r0, r4
 800189e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018a2:	3a30      	subs	r2, #48	; 0x30
 80018a4:	2a09      	cmp	r2, #9
 80018a6:	d903      	bls.n	80018b0 <_svfiprintf_r+0x1a8>
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0c5      	beq.n	8001838 <_svfiprintf_r+0x130>
 80018ac:	9105      	str	r1, [sp, #20]
 80018ae:	e7c3      	b.n	8001838 <_svfiprintf_r+0x130>
 80018b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80018b4:	4604      	mov	r4, r0
 80018b6:	2301      	movs	r3, #1
 80018b8:	e7f0      	b.n	800189c <_svfiprintf_r+0x194>
 80018ba:	ab03      	add	r3, sp, #12
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	462a      	mov	r2, r5
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_svfiprintf_r+0x1fc>)
 80018c2:	a904      	add	r1, sp, #16
 80018c4:	4638      	mov	r0, r7
 80018c6:	f3af 8000 	nop.w
 80018ca:	1c42      	adds	r2, r0, #1
 80018cc:	4606      	mov	r6, r0
 80018ce:	d1d6      	bne.n	800187e <_svfiprintf_r+0x176>
 80018d0:	89ab      	ldrh	r3, [r5, #12]
 80018d2:	065b      	lsls	r3, r3, #25
 80018d4:	f53f af2c 	bmi.w	8001730 <_svfiprintf_r+0x28>
 80018d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018da:	b01d      	add	sp, #116	; 0x74
 80018dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e0:	ab03      	add	r3, sp, #12
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	462a      	mov	r2, r5
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_svfiprintf_r+0x1fc>)
 80018e8:	a904      	add	r1, sp, #16
 80018ea:	4638      	mov	r0, r7
 80018ec:	f000 f87a 	bl	80019e4 <_printf_i>
 80018f0:	e7eb      	b.n	80018ca <_svfiprintf_r+0x1c2>
 80018f2:	bf00      	nop
 80018f4:	08001f26 	.word	0x08001f26
 80018f8:	08001f2c 	.word	0x08001f2c
 80018fc:	08001f30 	.word	0x08001f30
 8001900:	00000000 	.word	0x00000000
 8001904:	08001651 	.word	0x08001651

08001908 <_printf_common>:
 8001908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800190c:	4616      	mov	r6, r2
 800190e:	4699      	mov	r9, r3
 8001910:	688a      	ldr	r2, [r1, #8]
 8001912:	690b      	ldr	r3, [r1, #16]
 8001914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001918:	4293      	cmp	r3, r2
 800191a:	bfb8      	it	lt
 800191c:	4613      	movlt	r3, r2
 800191e:	6033      	str	r3, [r6, #0]
 8001920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001924:	4607      	mov	r7, r0
 8001926:	460c      	mov	r4, r1
 8001928:	b10a      	cbz	r2, 800192e <_printf_common+0x26>
 800192a:	3301      	adds	r3, #1
 800192c:	6033      	str	r3, [r6, #0]
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	0699      	lsls	r1, r3, #26
 8001932:	bf42      	ittt	mi
 8001934:	6833      	ldrmi	r3, [r6, #0]
 8001936:	3302      	addmi	r3, #2
 8001938:	6033      	strmi	r3, [r6, #0]
 800193a:	6825      	ldr	r5, [r4, #0]
 800193c:	f015 0506 	ands.w	r5, r5, #6
 8001940:	d106      	bne.n	8001950 <_printf_common+0x48>
 8001942:	f104 0a19 	add.w	sl, r4, #25
 8001946:	68e3      	ldr	r3, [r4, #12]
 8001948:	6832      	ldr	r2, [r6, #0]
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	42ab      	cmp	r3, r5
 800194e:	dc26      	bgt.n	800199e <_printf_common+0x96>
 8001950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001954:	1e13      	subs	r3, r2, #0
 8001956:	6822      	ldr	r2, [r4, #0]
 8001958:	bf18      	it	ne
 800195a:	2301      	movne	r3, #1
 800195c:	0692      	lsls	r2, r2, #26
 800195e:	d42b      	bmi.n	80019b8 <_printf_common+0xb0>
 8001960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001964:	4649      	mov	r1, r9
 8001966:	4638      	mov	r0, r7
 8001968:	47c0      	blx	r8
 800196a:	3001      	adds	r0, #1
 800196c:	d01e      	beq.n	80019ac <_printf_common+0xa4>
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	68e5      	ldr	r5, [r4, #12]
 8001972:	6832      	ldr	r2, [r6, #0]
 8001974:	f003 0306 	and.w	r3, r3, #6
 8001978:	2b04      	cmp	r3, #4
 800197a:	bf08      	it	eq
 800197c:	1aad      	subeq	r5, r5, r2
 800197e:	68a3      	ldr	r3, [r4, #8]
 8001980:	6922      	ldr	r2, [r4, #16]
 8001982:	bf0c      	ite	eq
 8001984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001988:	2500      	movne	r5, #0
 800198a:	4293      	cmp	r3, r2
 800198c:	bfc4      	itt	gt
 800198e:	1a9b      	subgt	r3, r3, r2
 8001990:	18ed      	addgt	r5, r5, r3
 8001992:	2600      	movs	r6, #0
 8001994:	341a      	adds	r4, #26
 8001996:	42b5      	cmp	r5, r6
 8001998:	d11a      	bne.n	80019d0 <_printf_common+0xc8>
 800199a:	2000      	movs	r0, #0
 800199c:	e008      	b.n	80019b0 <_printf_common+0xa8>
 800199e:	2301      	movs	r3, #1
 80019a0:	4652      	mov	r2, sl
 80019a2:	4649      	mov	r1, r9
 80019a4:	4638      	mov	r0, r7
 80019a6:	47c0      	blx	r8
 80019a8:	3001      	adds	r0, #1
 80019aa:	d103      	bne.n	80019b4 <_printf_common+0xac>
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019b4:	3501      	adds	r5, #1
 80019b6:	e7c6      	b.n	8001946 <_printf_common+0x3e>
 80019b8:	18e1      	adds	r1, r4, r3
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	2030      	movs	r0, #48	; 0x30
 80019be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019c2:	4422      	add	r2, r4
 80019c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019cc:	3302      	adds	r3, #2
 80019ce:	e7c7      	b.n	8001960 <_printf_common+0x58>
 80019d0:	2301      	movs	r3, #1
 80019d2:	4622      	mov	r2, r4
 80019d4:	4649      	mov	r1, r9
 80019d6:	4638      	mov	r0, r7
 80019d8:	47c0      	blx	r8
 80019da:	3001      	adds	r0, #1
 80019dc:	d0e6      	beq.n	80019ac <_printf_common+0xa4>
 80019de:	3601      	adds	r6, #1
 80019e0:	e7d9      	b.n	8001996 <_printf_common+0x8e>
	...

080019e4 <_printf_i>:
 80019e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019e8:	7e0f      	ldrb	r7, [r1, #24]
 80019ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019ec:	2f78      	cmp	r7, #120	; 0x78
 80019ee:	4691      	mov	r9, r2
 80019f0:	4680      	mov	r8, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	469a      	mov	sl, r3
 80019f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019fa:	d807      	bhi.n	8001a0c <_printf_i+0x28>
 80019fc:	2f62      	cmp	r7, #98	; 0x62
 80019fe:	d80a      	bhi.n	8001a16 <_printf_i+0x32>
 8001a00:	2f00      	cmp	r7, #0
 8001a02:	f000 80d8 	beq.w	8001bb6 <_printf_i+0x1d2>
 8001a06:	2f58      	cmp	r7, #88	; 0x58
 8001a08:	f000 80a3 	beq.w	8001b52 <_printf_i+0x16e>
 8001a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a14:	e03a      	b.n	8001a8c <_printf_i+0xa8>
 8001a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a1a:	2b15      	cmp	r3, #21
 8001a1c:	d8f6      	bhi.n	8001a0c <_printf_i+0x28>
 8001a1e:	a101      	add	r1, pc, #4	; (adr r1, 8001a24 <_printf_i+0x40>)
 8001a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a24:	08001a7d 	.word	0x08001a7d
 8001a28:	08001a91 	.word	0x08001a91
 8001a2c:	08001a0d 	.word	0x08001a0d
 8001a30:	08001a0d 	.word	0x08001a0d
 8001a34:	08001a0d 	.word	0x08001a0d
 8001a38:	08001a0d 	.word	0x08001a0d
 8001a3c:	08001a91 	.word	0x08001a91
 8001a40:	08001a0d 	.word	0x08001a0d
 8001a44:	08001a0d 	.word	0x08001a0d
 8001a48:	08001a0d 	.word	0x08001a0d
 8001a4c:	08001a0d 	.word	0x08001a0d
 8001a50:	08001b9d 	.word	0x08001b9d
 8001a54:	08001ac1 	.word	0x08001ac1
 8001a58:	08001b7f 	.word	0x08001b7f
 8001a5c:	08001a0d 	.word	0x08001a0d
 8001a60:	08001a0d 	.word	0x08001a0d
 8001a64:	08001bbf 	.word	0x08001bbf
 8001a68:	08001a0d 	.word	0x08001a0d
 8001a6c:	08001ac1 	.word	0x08001ac1
 8001a70:	08001a0d 	.word	0x08001a0d
 8001a74:	08001a0d 	.word	0x08001a0d
 8001a78:	08001b87 	.word	0x08001b87
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	602a      	str	r2, [r5, #0]
 8001a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0a3      	b.n	8001bd8 <_printf_i+0x1f4>
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	6829      	ldr	r1, [r5, #0]
 8001a94:	0606      	lsls	r6, r0, #24
 8001a96:	f101 0304 	add.w	r3, r1, #4
 8001a9a:	d50a      	bpl.n	8001ab2 <_printf_i+0xce>
 8001a9c:	680e      	ldr	r6, [r1, #0]
 8001a9e:	602b      	str	r3, [r5, #0]
 8001aa0:	2e00      	cmp	r6, #0
 8001aa2:	da03      	bge.n	8001aac <_printf_i+0xc8>
 8001aa4:	232d      	movs	r3, #45	; 0x2d
 8001aa6:	4276      	negs	r6, r6
 8001aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001aac:	485e      	ldr	r0, [pc, #376]	; (8001c28 <_printf_i+0x244>)
 8001aae:	230a      	movs	r3, #10
 8001ab0:	e019      	b.n	8001ae6 <_printf_i+0x102>
 8001ab2:	680e      	ldr	r6, [r1, #0]
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001aba:	bf18      	it	ne
 8001abc:	b236      	sxthne	r6, r6
 8001abe:	e7ef      	b.n	8001aa0 <_printf_i+0xbc>
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	6820      	ldr	r0, [r4, #0]
 8001ac4:	1d19      	adds	r1, r3, #4
 8001ac6:	6029      	str	r1, [r5, #0]
 8001ac8:	0601      	lsls	r1, r0, #24
 8001aca:	d501      	bpl.n	8001ad0 <_printf_i+0xec>
 8001acc:	681e      	ldr	r6, [r3, #0]
 8001ace:	e002      	b.n	8001ad6 <_printf_i+0xf2>
 8001ad0:	0646      	lsls	r6, r0, #25
 8001ad2:	d5fb      	bpl.n	8001acc <_printf_i+0xe8>
 8001ad4:	881e      	ldrh	r6, [r3, #0]
 8001ad6:	4854      	ldr	r0, [pc, #336]	; (8001c28 <_printf_i+0x244>)
 8001ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8001ada:	bf0c      	ite	eq
 8001adc:	2308      	moveq	r3, #8
 8001ade:	230a      	movne	r3, #10
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ae6:	6865      	ldr	r5, [r4, #4]
 8001ae8:	60a5      	str	r5, [r4, #8]
 8001aea:	2d00      	cmp	r5, #0
 8001aec:	bfa2      	ittt	ge
 8001aee:	6821      	ldrge	r1, [r4, #0]
 8001af0:	f021 0104 	bicge.w	r1, r1, #4
 8001af4:	6021      	strge	r1, [r4, #0]
 8001af6:	b90e      	cbnz	r6, 8001afc <_printf_i+0x118>
 8001af8:	2d00      	cmp	r5, #0
 8001afa:	d04d      	beq.n	8001b98 <_printf_i+0x1b4>
 8001afc:	4615      	mov	r5, r2
 8001afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b02:	fb03 6711 	mls	r7, r3, r1, r6
 8001b06:	5dc7      	ldrb	r7, [r0, r7]
 8001b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b0c:	4637      	mov	r7, r6
 8001b0e:	42bb      	cmp	r3, r7
 8001b10:	460e      	mov	r6, r1
 8001b12:	d9f4      	bls.n	8001afe <_printf_i+0x11a>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d10b      	bne.n	8001b30 <_printf_i+0x14c>
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	07de      	lsls	r6, r3, #31
 8001b1c:	d508      	bpl.n	8001b30 <_printf_i+0x14c>
 8001b1e:	6923      	ldr	r3, [r4, #16]
 8001b20:	6861      	ldr	r1, [r4, #4]
 8001b22:	4299      	cmp	r1, r3
 8001b24:	bfde      	ittt	le
 8001b26:	2330      	movle	r3, #48	; 0x30
 8001b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b30:	1b52      	subs	r2, r2, r5
 8001b32:	6122      	str	r2, [r4, #16]
 8001b34:	f8cd a000 	str.w	sl, [sp]
 8001b38:	464b      	mov	r3, r9
 8001b3a:	aa03      	add	r2, sp, #12
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4640      	mov	r0, r8
 8001b40:	f7ff fee2 	bl	8001908 <_printf_common>
 8001b44:	3001      	adds	r0, #1
 8001b46:	d14c      	bne.n	8001be2 <_printf_i+0x1fe>
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	b004      	add	sp, #16
 8001b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b52:	4835      	ldr	r0, [pc, #212]	; (8001c28 <_printf_i+0x244>)
 8001b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b58:	6829      	ldr	r1, [r5, #0]
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b60:	6029      	str	r1, [r5, #0]
 8001b62:	061d      	lsls	r5, r3, #24
 8001b64:	d514      	bpl.n	8001b90 <_printf_i+0x1ac>
 8001b66:	07df      	lsls	r7, r3, #31
 8001b68:	bf44      	itt	mi
 8001b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8001b6e:	6023      	strmi	r3, [r4, #0]
 8001b70:	b91e      	cbnz	r6, 8001b7a <_printf_i+0x196>
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	f023 0320 	bic.w	r3, r3, #32
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	e7b0      	b.n	8001ae0 <_printf_i+0xfc>
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	2378      	movs	r3, #120	; 0x78
 8001b88:	4828      	ldr	r0, [pc, #160]	; (8001c2c <_printf_i+0x248>)
 8001b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b8e:	e7e3      	b.n	8001b58 <_printf_i+0x174>
 8001b90:	0659      	lsls	r1, r3, #25
 8001b92:	bf48      	it	mi
 8001b94:	b2b6      	uxthmi	r6, r6
 8001b96:	e7e6      	b.n	8001b66 <_printf_i+0x182>
 8001b98:	4615      	mov	r5, r2
 8001b9a:	e7bb      	b.n	8001b14 <_printf_i+0x130>
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	6826      	ldr	r6, [r4, #0]
 8001ba0:	6961      	ldr	r1, [r4, #20]
 8001ba2:	1d18      	adds	r0, r3, #4
 8001ba4:	6028      	str	r0, [r5, #0]
 8001ba6:	0635      	lsls	r5, r6, #24
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	d501      	bpl.n	8001bb0 <_printf_i+0x1cc>
 8001bac:	6019      	str	r1, [r3, #0]
 8001bae:	e002      	b.n	8001bb6 <_printf_i+0x1d2>
 8001bb0:	0670      	lsls	r0, r6, #25
 8001bb2:	d5fb      	bpl.n	8001bac <_printf_i+0x1c8>
 8001bb4:	8019      	strh	r1, [r3, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6123      	str	r3, [r4, #16]
 8001bba:	4615      	mov	r5, r2
 8001bbc:	e7ba      	b.n	8001b34 <_printf_i+0x150>
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	602a      	str	r2, [r5, #0]
 8001bc4:	681d      	ldr	r5, [r3, #0]
 8001bc6:	6862      	ldr	r2, [r4, #4]
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f7fe fb08 	bl	80001e0 <memchr>
 8001bd0:	b108      	cbz	r0, 8001bd6 <_printf_i+0x1f2>
 8001bd2:	1b40      	subs	r0, r0, r5
 8001bd4:	6060      	str	r0, [r4, #4]
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	6123      	str	r3, [r4, #16]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001be0:	e7a8      	b.n	8001b34 <_printf_i+0x150>
 8001be2:	6923      	ldr	r3, [r4, #16]
 8001be4:	462a      	mov	r2, r5
 8001be6:	4649      	mov	r1, r9
 8001be8:	4640      	mov	r0, r8
 8001bea:	47d0      	blx	sl
 8001bec:	3001      	adds	r0, #1
 8001bee:	d0ab      	beq.n	8001b48 <_printf_i+0x164>
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	079b      	lsls	r3, r3, #30
 8001bf4:	d413      	bmi.n	8001c1e <_printf_i+0x23a>
 8001bf6:	68e0      	ldr	r0, [r4, #12]
 8001bf8:	9b03      	ldr	r3, [sp, #12]
 8001bfa:	4298      	cmp	r0, r3
 8001bfc:	bfb8      	it	lt
 8001bfe:	4618      	movlt	r0, r3
 8001c00:	e7a4      	b.n	8001b4c <_printf_i+0x168>
 8001c02:	2301      	movs	r3, #1
 8001c04:	4632      	mov	r2, r6
 8001c06:	4649      	mov	r1, r9
 8001c08:	4640      	mov	r0, r8
 8001c0a:	47d0      	blx	sl
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	d09b      	beq.n	8001b48 <_printf_i+0x164>
 8001c10:	3501      	adds	r5, #1
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	9903      	ldr	r1, [sp, #12]
 8001c16:	1a5b      	subs	r3, r3, r1
 8001c18:	42ab      	cmp	r3, r5
 8001c1a:	dcf2      	bgt.n	8001c02 <_printf_i+0x21e>
 8001c1c:	e7eb      	b.n	8001bf6 <_printf_i+0x212>
 8001c1e:	2500      	movs	r5, #0
 8001c20:	f104 0619 	add.w	r6, r4, #25
 8001c24:	e7f5      	b.n	8001c12 <_printf_i+0x22e>
 8001c26:	bf00      	nop
 8001c28:	08001f37 	.word	0x08001f37
 8001c2c:	08001f48 	.word	0x08001f48

08001c30 <memcpy>:
 8001c30:	440a      	add	r2, r1
 8001c32:	4291      	cmp	r1, r2
 8001c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c38:	d100      	bne.n	8001c3c <memcpy+0xc>
 8001c3a:	4770      	bx	lr
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c46:	4291      	cmp	r1, r2
 8001c48:	d1f9      	bne.n	8001c3e <memcpy+0xe>
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <memmove>:
 8001c4c:	4288      	cmp	r0, r1
 8001c4e:	b510      	push	{r4, lr}
 8001c50:	eb01 0402 	add.w	r4, r1, r2
 8001c54:	d902      	bls.n	8001c5c <memmove+0x10>
 8001c56:	4284      	cmp	r4, r0
 8001c58:	4623      	mov	r3, r4
 8001c5a:	d807      	bhi.n	8001c6c <memmove+0x20>
 8001c5c:	1e43      	subs	r3, r0, #1
 8001c5e:	42a1      	cmp	r1, r4
 8001c60:	d008      	beq.n	8001c74 <memmove+0x28>
 8001c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c6a:	e7f8      	b.n	8001c5e <memmove+0x12>
 8001c6c:	4402      	add	r2, r0
 8001c6e:	4601      	mov	r1, r0
 8001c70:	428a      	cmp	r2, r1
 8001c72:	d100      	bne.n	8001c76 <memmove+0x2a>
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c7e:	e7f7      	b.n	8001c70 <memmove+0x24>

08001c80 <_free_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4605      	mov	r5, r0
 8001c84:	2900      	cmp	r1, #0
 8001c86:	d041      	beq.n	8001d0c <_free_r+0x8c>
 8001c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c8c:	1f0c      	subs	r4, r1, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bfb8      	it	lt
 8001c92:	18e4      	addlt	r4, r4, r3
 8001c94:	f000 f912 	bl	8001ebc <__malloc_lock>
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <_free_r+0x90>)
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	b933      	cbnz	r3, 8001cac <_free_r+0x2c>
 8001c9e:	6063      	str	r3, [r4, #4]
 8001ca0:	6014      	str	r4, [r2, #0]
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca8:	f000 b90e 	b.w	8001ec8 <__malloc_unlock>
 8001cac:	42a3      	cmp	r3, r4
 8001cae:	d908      	bls.n	8001cc2 <_free_r+0x42>
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	1821      	adds	r1, r4, r0
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	bf01      	itttt	eq
 8001cb8:	6819      	ldreq	r1, [r3, #0]
 8001cba:	685b      	ldreq	r3, [r3, #4]
 8001cbc:	1809      	addeq	r1, r1, r0
 8001cbe:	6021      	streq	r1, [r4, #0]
 8001cc0:	e7ed      	b.n	8001c9e <_free_r+0x1e>
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	b10b      	cbz	r3, 8001ccc <_free_r+0x4c>
 8001cc8:	42a3      	cmp	r3, r4
 8001cca:	d9fa      	bls.n	8001cc2 <_free_r+0x42>
 8001ccc:	6811      	ldr	r1, [r2, #0]
 8001cce:	1850      	adds	r0, r2, r1
 8001cd0:	42a0      	cmp	r0, r4
 8001cd2:	d10b      	bne.n	8001cec <_free_r+0x6c>
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	4401      	add	r1, r0
 8001cd8:	1850      	adds	r0, r2, r1
 8001cda:	4283      	cmp	r3, r0
 8001cdc:	6011      	str	r1, [r2, #0]
 8001cde:	d1e0      	bne.n	8001ca2 <_free_r+0x22>
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	6053      	str	r3, [r2, #4]
 8001ce6:	4401      	add	r1, r0
 8001ce8:	6011      	str	r1, [r2, #0]
 8001cea:	e7da      	b.n	8001ca2 <_free_r+0x22>
 8001cec:	d902      	bls.n	8001cf4 <_free_r+0x74>
 8001cee:	230c      	movs	r3, #12
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	e7d6      	b.n	8001ca2 <_free_r+0x22>
 8001cf4:	6820      	ldr	r0, [r4, #0]
 8001cf6:	1821      	adds	r1, r4, r0
 8001cf8:	428b      	cmp	r3, r1
 8001cfa:	bf04      	itt	eq
 8001cfc:	6819      	ldreq	r1, [r3, #0]
 8001cfe:	685b      	ldreq	r3, [r3, #4]
 8001d00:	6063      	str	r3, [r4, #4]
 8001d02:	bf04      	itt	eq
 8001d04:	1809      	addeq	r1, r1, r0
 8001d06:	6021      	streq	r1, [r4, #0]
 8001d08:	6054      	str	r4, [r2, #4]
 8001d0a:	e7ca      	b.n	8001ca2 <_free_r+0x22>
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
 8001d0e:	bf00      	nop
 8001d10:	200002a8 	.word	0x200002a8

08001d14 <sbrk_aligned>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4e0e      	ldr	r6, [pc, #56]	; (8001d50 <sbrk_aligned+0x3c>)
 8001d18:	460c      	mov	r4, r1
 8001d1a:	6831      	ldr	r1, [r6, #0]
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	b911      	cbnz	r1, 8001d26 <sbrk_aligned+0x12>
 8001d20:	f000 f8bc 	bl	8001e9c <_sbrk_r>
 8001d24:	6030      	str	r0, [r6, #0]
 8001d26:	4621      	mov	r1, r4
 8001d28:	4628      	mov	r0, r5
 8001d2a:	f000 f8b7 	bl	8001e9c <_sbrk_r>
 8001d2e:	1c43      	adds	r3, r0, #1
 8001d30:	d00a      	beq.n	8001d48 <sbrk_aligned+0x34>
 8001d32:	1cc4      	adds	r4, r0, #3
 8001d34:	f024 0403 	bic.w	r4, r4, #3
 8001d38:	42a0      	cmp	r0, r4
 8001d3a:	d007      	beq.n	8001d4c <sbrk_aligned+0x38>
 8001d3c:	1a21      	subs	r1, r4, r0
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f000 f8ac 	bl	8001e9c <_sbrk_r>
 8001d44:	3001      	adds	r0, #1
 8001d46:	d101      	bne.n	8001d4c <sbrk_aligned+0x38>
 8001d48:	f04f 34ff 	mov.w	r4, #4294967295
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	200002ac 	.word	0x200002ac

08001d54 <_malloc_r>:
 8001d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d58:	1ccd      	adds	r5, r1, #3
 8001d5a:	f025 0503 	bic.w	r5, r5, #3
 8001d5e:	3508      	adds	r5, #8
 8001d60:	2d0c      	cmp	r5, #12
 8001d62:	bf38      	it	cc
 8001d64:	250c      	movcc	r5, #12
 8001d66:	2d00      	cmp	r5, #0
 8001d68:	4607      	mov	r7, r0
 8001d6a:	db01      	blt.n	8001d70 <_malloc_r+0x1c>
 8001d6c:	42a9      	cmp	r1, r5
 8001d6e:	d905      	bls.n	8001d7c <_malloc_r+0x28>
 8001d70:	230c      	movs	r3, #12
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	2600      	movs	r6, #0
 8001d76:	4630      	mov	r0, r6
 8001d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7c:	4e2e      	ldr	r6, [pc, #184]	; (8001e38 <_malloc_r+0xe4>)
 8001d7e:	f000 f89d 	bl	8001ebc <__malloc_lock>
 8001d82:	6833      	ldr	r3, [r6, #0]
 8001d84:	461c      	mov	r4, r3
 8001d86:	bb34      	cbnz	r4, 8001dd6 <_malloc_r+0x82>
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	f7ff ffc2 	bl	8001d14 <sbrk_aligned>
 8001d90:	1c43      	adds	r3, r0, #1
 8001d92:	4604      	mov	r4, r0
 8001d94:	d14d      	bne.n	8001e32 <_malloc_r+0xde>
 8001d96:	6834      	ldr	r4, [r6, #0]
 8001d98:	4626      	mov	r6, r4
 8001d9a:	2e00      	cmp	r6, #0
 8001d9c:	d140      	bne.n	8001e20 <_malloc_r+0xcc>
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	4631      	mov	r1, r6
 8001da2:	4638      	mov	r0, r7
 8001da4:	eb04 0803 	add.w	r8, r4, r3
 8001da8:	f000 f878 	bl	8001e9c <_sbrk_r>
 8001dac:	4580      	cmp	r8, r0
 8001dae:	d13a      	bne.n	8001e26 <_malloc_r+0xd2>
 8001db0:	6821      	ldr	r1, [r4, #0]
 8001db2:	3503      	adds	r5, #3
 8001db4:	1a6d      	subs	r5, r5, r1
 8001db6:	f025 0503 	bic.w	r5, r5, #3
 8001dba:	3508      	adds	r5, #8
 8001dbc:	2d0c      	cmp	r5, #12
 8001dbe:	bf38      	it	cc
 8001dc0:	250c      	movcc	r5, #12
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	4638      	mov	r0, r7
 8001dc6:	f7ff ffa5 	bl	8001d14 <sbrk_aligned>
 8001dca:	3001      	adds	r0, #1
 8001dcc:	d02b      	beq.n	8001e26 <_malloc_r+0xd2>
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	442b      	add	r3, r5
 8001dd2:	6023      	str	r3, [r4, #0]
 8001dd4:	e00e      	b.n	8001df4 <_malloc_r+0xa0>
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	1b52      	subs	r2, r2, r5
 8001dda:	d41e      	bmi.n	8001e1a <_malloc_r+0xc6>
 8001ddc:	2a0b      	cmp	r2, #11
 8001dde:	d916      	bls.n	8001e0e <_malloc_r+0xba>
 8001de0:	1961      	adds	r1, r4, r5
 8001de2:	42a3      	cmp	r3, r4
 8001de4:	6025      	str	r5, [r4, #0]
 8001de6:	bf18      	it	ne
 8001de8:	6059      	strne	r1, [r3, #4]
 8001dea:	6863      	ldr	r3, [r4, #4]
 8001dec:	bf08      	it	eq
 8001dee:	6031      	streq	r1, [r6, #0]
 8001df0:	5162      	str	r2, [r4, r5]
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	4638      	mov	r0, r7
 8001df6:	f104 060b 	add.w	r6, r4, #11
 8001dfa:	f000 f865 	bl	8001ec8 <__malloc_unlock>
 8001dfe:	f026 0607 	bic.w	r6, r6, #7
 8001e02:	1d23      	adds	r3, r4, #4
 8001e04:	1af2      	subs	r2, r6, r3
 8001e06:	d0b6      	beq.n	8001d76 <_malloc_r+0x22>
 8001e08:	1b9b      	subs	r3, r3, r6
 8001e0a:	50a3      	str	r3, [r4, r2]
 8001e0c:	e7b3      	b.n	8001d76 <_malloc_r+0x22>
 8001e0e:	6862      	ldr	r2, [r4, #4]
 8001e10:	42a3      	cmp	r3, r4
 8001e12:	bf0c      	ite	eq
 8001e14:	6032      	streq	r2, [r6, #0]
 8001e16:	605a      	strne	r2, [r3, #4]
 8001e18:	e7ec      	b.n	8001df4 <_malloc_r+0xa0>
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	6864      	ldr	r4, [r4, #4]
 8001e1e:	e7b2      	b.n	8001d86 <_malloc_r+0x32>
 8001e20:	4634      	mov	r4, r6
 8001e22:	6876      	ldr	r6, [r6, #4]
 8001e24:	e7b9      	b.n	8001d9a <_malloc_r+0x46>
 8001e26:	230c      	movs	r3, #12
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4638      	mov	r0, r7
 8001e2c:	f000 f84c 	bl	8001ec8 <__malloc_unlock>
 8001e30:	e7a1      	b.n	8001d76 <_malloc_r+0x22>
 8001e32:	6025      	str	r5, [r4, #0]
 8001e34:	e7de      	b.n	8001df4 <_malloc_r+0xa0>
 8001e36:	bf00      	nop
 8001e38:	200002a8 	.word	0x200002a8

08001e3c <_realloc_r>:
 8001e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e40:	4680      	mov	r8, r0
 8001e42:	4614      	mov	r4, r2
 8001e44:	460e      	mov	r6, r1
 8001e46:	b921      	cbnz	r1, 8001e52 <_realloc_r+0x16>
 8001e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	f7ff bf81 	b.w	8001d54 <_malloc_r>
 8001e52:	b92a      	cbnz	r2, 8001e60 <_realloc_r+0x24>
 8001e54:	f7ff ff14 	bl	8001c80 <_free_r>
 8001e58:	4625      	mov	r5, r4
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e60:	f000 f838 	bl	8001ed4 <_malloc_usable_size_r>
 8001e64:	4284      	cmp	r4, r0
 8001e66:	4607      	mov	r7, r0
 8001e68:	d802      	bhi.n	8001e70 <_realloc_r+0x34>
 8001e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e6e:	d812      	bhi.n	8001e96 <_realloc_r+0x5a>
 8001e70:	4621      	mov	r1, r4
 8001e72:	4640      	mov	r0, r8
 8001e74:	f7ff ff6e 	bl	8001d54 <_malloc_r>
 8001e78:	4605      	mov	r5, r0
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d0ed      	beq.n	8001e5a <_realloc_r+0x1e>
 8001e7e:	42bc      	cmp	r4, r7
 8001e80:	4622      	mov	r2, r4
 8001e82:	4631      	mov	r1, r6
 8001e84:	bf28      	it	cs
 8001e86:	463a      	movcs	r2, r7
 8001e88:	f7ff fed2 	bl	8001c30 <memcpy>
 8001e8c:	4631      	mov	r1, r6
 8001e8e:	4640      	mov	r0, r8
 8001e90:	f7ff fef6 	bl	8001c80 <_free_r>
 8001e94:	e7e1      	b.n	8001e5a <_realloc_r+0x1e>
 8001e96:	4635      	mov	r5, r6
 8001e98:	e7df      	b.n	8001e5a <_realloc_r+0x1e>
	...

08001e9c <_sbrk_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4d06      	ldr	r5, [pc, #24]	; (8001eb8 <_sbrk_r+0x1c>)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	602b      	str	r3, [r5, #0]
 8001ea8:	f7fe fb56 	bl	8000558 <_sbrk>
 8001eac:	1c43      	adds	r3, r0, #1
 8001eae:	d102      	bne.n	8001eb6 <_sbrk_r+0x1a>
 8001eb0:	682b      	ldr	r3, [r5, #0]
 8001eb2:	b103      	cbz	r3, 8001eb6 <_sbrk_r+0x1a>
 8001eb4:	6023      	str	r3, [r4, #0]
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
 8001eb8:	200002b0 	.word	0x200002b0

08001ebc <__malloc_lock>:
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <__malloc_lock+0x8>)
 8001ebe:	f000 b811 	b.w	8001ee4 <__retarget_lock_acquire_recursive>
 8001ec2:	bf00      	nop
 8001ec4:	200002b4 	.word	0x200002b4

08001ec8 <__malloc_unlock>:
 8001ec8:	4801      	ldr	r0, [pc, #4]	; (8001ed0 <__malloc_unlock+0x8>)
 8001eca:	f000 b80c 	b.w	8001ee6 <__retarget_lock_release_recursive>
 8001ece:	bf00      	nop
 8001ed0:	200002b4 	.word	0x200002b4

08001ed4 <_malloc_usable_size_r>:
 8001ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ed8:	1f18      	subs	r0, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bfbc      	itt	lt
 8001ede:	580b      	ldrlt	r3, [r1, r0]
 8001ee0:	18c0      	addlt	r0, r0, r3
 8001ee2:	4770      	bx	lr

08001ee4 <__retarget_lock_acquire_recursive>:
 8001ee4:	4770      	bx	lr

08001ee6 <__retarget_lock_release_recursive>:
 8001ee6:	4770      	bx	lr

08001ee8 <_init>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr

08001ef4 <_fini>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr
