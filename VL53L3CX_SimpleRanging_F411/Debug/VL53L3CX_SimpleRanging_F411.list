
VL53L3CX_SimpleRanging_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ecc  0801b020  0801b020  0002b020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801beec  0801beec  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  0801beec  0801beec  0002beec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bef4  0801bef4  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bef4  0801bef4  0002bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bef8  0801bef8  0002bef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0801befc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f20  20000218  0801c110  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004138  0801c110  00034138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004603e  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c28  00000000  00000000  00076282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  0007aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  0007c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f8d  00000000  00000000  0007e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028448  00000000  00000000  0009f1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8645  00000000  00000000  000c7635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fc7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088a8  00000000  00000000  0017fccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b004 	.word	0x0801b004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0801b004 	.word	0x0801b004

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010d0:	1d39      	adds	r1, r7, #4
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2201      	movs	r2, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <__io_putchar+0x20>)
 80010da:	f014 fb32 	bl	8015742 <HAL_UART_Transmit>
  return ch;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20002d0c 	.word	0x20002d0c

080010ec <HAL_GPIO_EXTI_Callback>:

/* Implementación del Callback para mediciones por interrupciones */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin==VL53L1X_INT_Pin)
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d104      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    IntCount++;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_GPIO_EXTI_Callback+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_GPIO_EXTI_Callback+0x28>)
 8001104:	6013      	str	r3, [r2, #0]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20002cb4 	.word	0x20002cb4

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f012 fb04 	bl	8013728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f86a 	bl	80011f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initSystem();
 8001124:	f000 fcf6 	bl	8001b14 <initSystem>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f000 f92a 	bl	8001380 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112c:	f000 f8fe 	bl	800132c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001130:	f000 f8ce 	bl	80012d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /**Configure the Systick interrupt time
  */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001134:	f014 fa84 	bl	8015640 <HAL_RCC_GetHCLKFreq>
 8001138:	4603      	mov	r3, r0
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <main+0xc4>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	099b      	lsrs	r3, r3, #6
 8001142:	4618      	mov	r0, r3
 8001144:	f012 fc8b 	bl	8013a5e <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001148:	2004      	movs	r0, #4
 800114a:	f012 fc95 	bl	8013a78 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	f04f 30ff 	mov.w	r0, #4294967295
 8001156:	f012 fc58 	bl	8013a0a <HAL_NVIC_SetPriority>

  // Mensaje de bienvenida
  WelcomeMsg();
 800115a:	f000 ff99 	bl	8002090 <WelcomeMsg>


  Dev->I2cHandle = &hi2c1;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <main+0xc8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001166:	461a      	mov	r2, r3
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <main+0xcc>)
 800116a:	f8c2 3a4c 	str.w	r3, [r2, #2636]	; 0xa4c
  Dev->I2cDevAddr = 0x52;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <main+0xc8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001176:	2252      	movs	r2, #82	; 0x52
 8001178:	f883 2a50 	strb.w	r2, [r3, #2640]	; 0xa50
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Las siguientes operaciones se ejecutan cuando el USART utilizado reciba información
	if (rxData != '\0'){
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <main+0xd0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01f      	beq.n	80011c4 <main+0xac>
		// Se comienzan a acumular los caracteres recibidos en un buffer
		bufferReception[counterReception] = rxData;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <main+0xd4>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0xd0>)
 800118c:	7819      	ldrb	r1, [r3, #0]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <main+0xd8>)
 8001190:	5499      	strb	r1, [r3, r2]
		counterReception++;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <main+0xd4>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <main+0xd4>)
 800119c:	801a      	strh	r2, [r3, #0]
		// Si se recibe el caracter @ se activa la variable de estado que indica que se recibió la información necesaria
		if (rxData == '@'){
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <main+0xd0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b40      	cmp	r3, #64	; 0x40
 80011a4:	d10b      	bne.n	80011be <main+0xa6>
			stringComplete = true;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <main+0xdc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
			bufferReception[counterReception] = '\0';  // Se hace nulo la posición del caracter @
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <main+0xd4>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <main+0xd8>)
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
			counterReception = 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <main+0xd4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	801a      	strh	r2, [r3, #0]
		}
		rxData = '\0'; // Se hace nulo la variable rxData con el fin de que sólo se entre a la condición cuando el Usart recibe datos
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <main+0xd0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
	}
	// Las siguientes operaciones se ejecutan cuando el buffer de recepción tiene la información completa
	if (stringComplete){
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <main+0xdc>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0d7      	beq.n	800117c <main+0x64>
		// Se llama a la función parseCommands, la cual ejecuta el código correspondiente al comando enviado vía USART
		stringComplete = false;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <main+0xdc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
		parseCommands(bufferReception);
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <main+0xd8>)
 80011d4:	f000 f958 	bl	8001488 <parseCommands>
	if (rxData != '\0'){
 80011d8:	e7d0      	b.n	800117c <main+0x64>
 80011da:	bf00      	nop
 80011dc:	10624dd3 	.word	0x10624dd3
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20002cb8 	.word	0x20002cb8
 80011e8:	20002f04 	.word	0x20002f04
 80011ec:	20002f06 	.word	0x20002f06
 80011f0:	20002e80 	.word	0x20002e80
 80011f4:	20002f50 	.word	0x20002f50

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f014 fe48 	bl	8015e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <SystemClock_Config+0xd0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <SystemClock_Config+0xd0>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <SystemClock_Config+0xd0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <SystemClock_Config+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <SystemClock_Config+0xd4>)
 8001246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <SystemClock_Config+0xd4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800126c:	2310      	movs	r3, #16
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001270:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001276:	2304      	movs	r3, #4
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800127a:	2304      	movs	r3, #4
 800127c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	4618      	mov	r0, r3
 8001284:	f013 fd78 	bl	8014d78 <HAL_RCC_OscConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800128e:	f000 ff2f 	bl	80020f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	230f      	movs	r3, #15
 8001294:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001296:	2302      	movs	r3, #2
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2102      	movs	r1, #2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f013 ffda 	bl	8015268 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ba:	f000 ff19 	bl	80020f0 <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	; 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_I2C1_Init+0x50>)
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <MX_I2C1_Init+0x54>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_I2C1_Init+0x50>)
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_I2C1_Init+0x58>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_I2C1_Init+0x50>)
 80012ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_I2C1_Init+0x50>)
 800130e:	f012 fd9d 	bl	8013e4c <HAL_I2C_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001318:	f000 feea 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20002cb8 	.word	0x20002cb8
 8001324:	40005400 	.word	0x40005400
 8001328:	000186a0 	.word	0x000186a0

0800132c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART2_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001364:	f014 f9a0 	bl	80156a8 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f000 febf 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20002d0c 	.word	0x20002d0c
 800137c:	40004400 	.word	0x40004400

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <MX_GPIO_Init+0xfc>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a37      	ldr	r2, [pc, #220]	; (800147c <MX_GPIO_Init+0xfc>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b35      	ldr	r3, [pc, #212]	; (800147c <MX_GPIO_Init+0xfc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b31      	ldr	r3, [pc, #196]	; (800147c <MX_GPIO_Init+0xfc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a30      	ldr	r2, [pc, #192]	; (800147c <MX_GPIO_Init+0xfc>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <MX_GPIO_Init+0xfc>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <MX_GPIO_Init+0xfc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a29      	ldr	r2, [pc, #164]	; (800147c <MX_GPIO_Init+0xfc>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <MX_GPIO_Init+0xfc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_GPIO_Init+0xfc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <MX_GPIO_Init+0xfc>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_GPIO_Init+0xfc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	481d      	ldr	r0, [pc, #116]	; (8001480 <MX_GPIO_Init+0x100>)
 800140c:	f012 fcec 	bl	8013de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <MX_GPIO_Init+0x104>)
 8001428:	f012 fb42 	bl	8013ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L1X_INT_Pin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 800142c:	2310      	movs	r3, #16
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001430:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001436:	2301      	movs	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <MX_GPIO_Init+0x100>)
 8001442:	f012 fb35 	bl	8013ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001446:	2320      	movs	r3, #32
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <MX_GPIO_Init+0x100>)
 800145e:	f012 fb27 	bl	8013ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200a      	movs	r0, #10
 8001468:	f012 facf 	bl	8013a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800146c:	200a      	movs	r0, #10
 800146e:	f012 fae8 	bl	8013a42 <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020800 	.word	0x40020800

08001488 <parseCommands>:

/* USER CODE BEGIN 4 */

void parseCommands(char *ptrBufferReception){
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af02      	add	r7, sp, #8
 800148e:	6078      	str	r0, [r7, #4]
	/**
	 * La función parseCommands se encarga del control del programa por medio de comandos mediante el USART
	 */
	// Se toma la información del buffer recibido, leyendo el comando y el parámetro ingresado
	sscanf(ptrBufferReception, "%s %u %u %s",  cmd, &firstParameter, &secondParameter, userMsg);
 8001490:	4b74      	ldr	r3, [pc, #464]	; (8001664 <parseCommands+0x1dc>)
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	4b74      	ldr	r3, [pc, #464]	; (8001668 <parseCommands+0x1e0>)
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4b74      	ldr	r3, [pc, #464]	; (800166c <parseCommands+0x1e4>)
 800149a:	4a75      	ldr	r2, [pc, #468]	; (8001670 <parseCommands+0x1e8>)
 800149c:	4975      	ldr	r1, [pc, #468]	; (8001674 <parseCommands+0x1ec>)
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f015 fba4 	bl	8016bec <siscanf>
	// Se ejecuta si el comando es "Menu"
	if (strcmp(cmd, "Menu") == 0){
 80014a4:	4974      	ldr	r1, [pc, #464]	; (8001678 <parseCommands+0x1f0>)
 80014a6:	4872      	ldr	r0, [pc, #456]	; (8001670 <parseCommands+0x1e8>)
 80014a8:	f7fe fe9a 	bl	80001e0 <strcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d124      	bne.n	80014fc <parseCommands+0x74>
		// Se imprime el Menu de comandos
		writeMsg(&handlerUSART1, "\nHelp Menu CMDS:\n");
 80014b2:	4972      	ldr	r1, [pc, #456]	; (800167c <parseCommands+0x1f4>)
 80014b4:	4872      	ldr	r0, [pc, #456]	; (8001680 <parseCommands+0x1f8>)
 80014b6:	f012 f86d 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "1)  Menu              -- Print this menu\n");
 80014ba:	4972      	ldr	r1, [pc, #456]	; (8001684 <parseCommands+0x1fc>)
 80014bc:	4870      	ldr	r0, [pc, #448]	; (8001680 <parseCommands+0x1f8>)
 80014be:	f012 f869 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "8)  initToF           -- Initialize ToF Sensor\n");
 80014c2:	4971      	ldr	r1, [pc, #452]	; (8001688 <parseCommands+0x200>)
 80014c4:	486e      	ldr	r0, [pc, #440]	; (8001680 <parseCommands+0x1f8>)
 80014c6:	f012 f865 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "2)  Start             -- Start LiDAR Ranging\n");
 80014ca:	4970      	ldr	r1, [pc, #448]	; (800168c <parseCommands+0x204>)
 80014cc:	486c      	ldr	r0, [pc, #432]	; (8001680 <parseCommands+0x1f8>)
 80014ce:	f012 f861 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "3)  getData           -- Returns the ranging measurment\n");
 80014d2:	496f      	ldr	r1, [pc, #444]	; (8001690 <parseCommands+0x208>)
 80014d4:	486a      	ldr	r0, [pc, #424]	; (8001680 <parseCommands+0x1f8>)
 80014d6:	f012 f85d 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "4)  readEncoder       -- Step motor moves 180° and Encoder output is shown\n");
 80014da:	496e      	ldr	r1, [pc, #440]	; (8001694 <parseCommands+0x20c>)
 80014dc:	4868      	ldr	r0, [pc, #416]	; (8001680 <parseCommands+0x1f8>)
 80014de:	f012 f859 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "5)  moveStep # #      -- Step motor moves #1 of steps in #2 direction (#2: 0->CW; 1->CCW)\n");
 80014e2:	496d      	ldr	r1, [pc, #436]	; (8001698 <parseCommands+0x210>)
 80014e4:	4866      	ldr	r0, [pc, #408]	; (8001680 <parseCommands+0x1f8>)
 80014e6:	f012 f855 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "6)  moveDegree # #    -- Step motor moves #1 degrees in #2 direction (#2: 0->CW; 1->CCW)\n");
 80014ea:	496c      	ldr	r1, [pc, #432]	; (800169c <parseCommands+0x214>)
 80014ec:	4864      	ldr	r0, [pc, #400]	; (8001680 <parseCommands+0x1f8>)
 80014ee:	f012 f851 	bl	8013594 <writeMsg>
		writeMsg(&handlerUSART1, "7)  staticRanging #   -- Perform # ranging measurments with the motor static\n");
 80014f2:	496b      	ldr	r1, [pc, #428]	; (80016a0 <parseCommands+0x218>)
 80014f4:	4862      	ldr	r0, [pc, #392]	; (8001680 <parseCommands+0x1f8>)
 80014f6:	f012 f84d 	bl	8013594 <writeMsg>
	}
	else {
		// En caso de que el comando no sea ninguno de los anteriores, se indica por consola que es incorrecto
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
	}
}
 80014fa:	e0af      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "initToF") == 0){
 80014fc:	4969      	ldr	r1, [pc, #420]	; (80016a4 <parseCommands+0x21c>)
 80014fe:	485c      	ldr	r0, [pc, #368]	; (8001670 <parseCommands+0x1e8>)
 8001500:	f7fe fe6e 	bl	80001e0 <strcmp>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <parseCommands+0x90>
		writeMsg(&handlerUSART1, "CMD: initToF\n");
 800150a:	4967      	ldr	r1, [pc, #412]	; (80016a8 <parseCommands+0x220>)
 800150c:	485c      	ldr	r0, [pc, #368]	; (8001680 <parseCommands+0x1f8>)
 800150e:	f012 f841 	bl	8013594 <writeMsg>
		Initial_Boot_VL53L3CX();
 8001512:	f000 fc27 	bl	8001d64 <Initial_Boot_VL53L3CX>
}
 8001516:	e0a1      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "Start") == 0){
 8001518:	4964      	ldr	r1, [pc, #400]	; (80016ac <parseCommands+0x224>)
 800151a:	4855      	ldr	r0, [pc, #340]	; (8001670 <parseCommands+0x1e8>)
 800151c:	f7fe fe60 	bl	80001e0 <strcmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <parseCommands+0xac>
		writeMsg(&handlerUSART1, "CMD: Start\n");
 8001526:	4962      	ldr	r1, [pc, #392]	; (80016b0 <parseCommands+0x228>)
 8001528:	4855      	ldr	r0, [pc, #340]	; (8001680 <parseCommands+0x1f8>)
 800152a:	f012 f833 	bl	8013594 <writeMsg>
		LiDAR_Start();
 800152e:	f000 f915 	bl	800175c <LiDAR_Start>
}
 8001532:	e093      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "getData") == 0){
 8001534:	495f      	ldr	r1, [pc, #380]	; (80016b4 <parseCommands+0x22c>)
 8001536:	484e      	ldr	r0, [pc, #312]	; (8001670 <parseCommands+0x1e8>)
 8001538:	f7fe fe52 	bl	80001e0 <strcmp>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <parseCommands+0xc8>
		writeMsg(&handlerUSART1, "CMD: getData\n");
 8001542:	495d      	ldr	r1, [pc, #372]	; (80016b8 <parseCommands+0x230>)
 8001544:	484e      	ldr	r0, [pc, #312]	; (8001680 <parseCommands+0x1f8>)
 8001546:	f012 f825 	bl	8013594 <writeMsg>
		getRangingData();
 800154a:	f000 f995 	bl	8001878 <getRangingData>
}
 800154e:	e085      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "readEncoder") == 0){
 8001550:	495a      	ldr	r1, [pc, #360]	; (80016bc <parseCommands+0x234>)
 8001552:	4847      	ldr	r0, [pc, #284]	; (8001670 <parseCommands+0x1e8>)
 8001554:	f7fe fe44 	bl	80001e0 <strcmp>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d12c      	bne.n	80015b8 <parseCommands+0x130>
		writeMsg(&handlerUSART1, "CMD: readEncoder\n");
 800155e:	4958      	ldr	r1, [pc, #352]	; (80016c0 <parseCommands+0x238>)
 8001560:	4847      	ldr	r0, [pc, #284]	; (8001680 <parseCommands+0x1f8>)
 8001562:	f012 f817 	bl	8013594 <writeMsg>
		for (uint16_t i = 0; i < 512; i++){
 8001566:	2300      	movs	r3, #0
 8001568:	81fb      	strh	r3, [r7, #14]
 800156a:	e01a      	b.n	80015a2 <parseCommands+0x11a>
			stepMotorMove(&StepMotor, 2, CLOCKWISE);
 800156c:	2200      	movs	r2, #0
 800156e:	2102      	movs	r1, #2
 8001570:	4854      	ldr	r0, [pc, #336]	; (80016c4 <parseCommands+0x23c>)
 8001572:	f000 f8c1 	bl	80016f8 <stepMotorMove>
			readEncoder(encoderChannels);
 8001576:	4854      	ldr	r0, [pc, #336]	; (80016c8 <parseCommands+0x240>)
 8001578:	f011 fd1e 	bl	8012fb8 <readEncoder>
			sprintf(bufferData, "Out A = %u   Out B = %u\n", (unsigned int) encoderChannels[0], (unsigned int) encoderChannels[1]);
 800157c:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <parseCommands+0x240>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <parseCommands+0x240>)
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	4951      	ldr	r1, [pc, #324]	; (80016cc <parseCommands+0x244>)
 8001588:	4851      	ldr	r0, [pc, #324]	; (80016d0 <parseCommands+0x248>)
 800158a:	f015 fb0f 	bl	8016bac <siprintf>
			writeMsg(&handlerUSART1, bufferData);
 800158e:	4950      	ldr	r1, [pc, #320]	; (80016d0 <parseCommands+0x248>)
 8001590:	483b      	ldr	r0, [pc, #236]	; (8001680 <parseCommands+0x1f8>)
 8001592:	f011 ffff 	bl	8013594 <writeMsg>
			HAL_Delay(10);
 8001596:	200a      	movs	r0, #10
 8001598:	f012 f938 	bl	801380c <HAL_Delay>
		for (uint16_t i = 0; i < 512; i++){
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	3301      	adds	r3, #1
 80015a0:	81fb      	strh	r3, [r7, #14]
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a8:	d3e0      	bcc.n	800156c <parseCommands+0xe4>
		stepMotorMove(&StepMotor, 1024, COUNTERCLOCKWISE);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	4844      	ldr	r0, [pc, #272]	; (80016c4 <parseCommands+0x23c>)
 80015b2:	f000 f8a1 	bl	80016f8 <stepMotorMove>
}
 80015b6:	e051      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "moveStep") == 0){
 80015b8:	4946      	ldr	r1, [pc, #280]	; (80016d4 <parseCommands+0x24c>)
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <parseCommands+0x1e8>)
 80015bc:	f7fe fe10 	bl	80001e0 <strcmp>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10e      	bne.n	80015e4 <parseCommands+0x15c>
		writeMsg(&handlerUSART1, "CMD: moveStep\n");
 80015c6:	4944      	ldr	r1, [pc, #272]	; (80016d8 <parseCommands+0x250>)
 80015c8:	482d      	ldr	r0, [pc, #180]	; (8001680 <parseCommands+0x1f8>)
 80015ca:	f011 ffe3 	bl	8013594 <writeMsg>
		stepMotorMove(&StepMotor, (uint16_t) firstParameter, (uint8_t) secondParameter);
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <parseCommands+0x1e4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4a24      	ldr	r2, [pc, #144]	; (8001668 <parseCommands+0x1e0>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	4839      	ldr	r0, [pc, #228]	; (80016c4 <parseCommands+0x23c>)
 80015de:	f000 f88b 	bl	80016f8 <stepMotorMove>
}
 80015e2:	e03b      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "moveDegree") == 0){
 80015e4:	493d      	ldr	r1, [pc, #244]	; (80016dc <parseCommands+0x254>)
 80015e6:	4822      	ldr	r0, [pc, #136]	; (8001670 <parseCommands+0x1e8>)
 80015e8:	f7fe fdfa 	bl	80001e0 <strcmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11f      	bne.n	8001632 <parseCommands+0x1aa>
		writeMsg(&handlerUSART1, "CMD: moveDegree\n");
 80015f2:	493b      	ldr	r1, [pc, #236]	; (80016e0 <parseCommands+0x258>)
 80015f4:	4822      	ldr	r0, [pc, #136]	; (8001680 <parseCommands+0x1f8>)
 80015f6:	f011 ffcd 	bl	8013594 <writeMsg>
		motorDegree = (uint16_t)	firstParameter;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <parseCommands+0x1e4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <parseCommands+0x25c>)
 8001602:	801a      	strh	r2, [r3, #0]
		motorDegree = (motorDegree*2048)/360;
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <parseCommands+0x25c>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	02db      	lsls	r3, r3, #11
 800160a:	4a37      	ldr	r2, [pc, #220]	; (80016e8 <parseCommands+0x260>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	441a      	add	r2, r3
 8001612:	1212      	asrs	r2, r2, #8
 8001614:	17db      	asrs	r3, r3, #31
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <parseCommands+0x25c>)
 800161c:	801a      	strh	r2, [r3, #0]
		stepMotorMove(&StepMotor, motorDegree, (uint8_t) secondParameter);
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <parseCommands+0x25c>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <parseCommands+0x1e0>)
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	4619      	mov	r1, r3
 800162a:	4826      	ldr	r0, [pc, #152]	; (80016c4 <parseCommands+0x23c>)
 800162c:	f000 f864 	bl	80016f8 <stepMotorMove>
}
 8001630:	e014      	b.n	800165c <parseCommands+0x1d4>
	else if (strcmp(cmd, "staticRanging") == 0){
 8001632:	492e      	ldr	r1, [pc, #184]	; (80016ec <parseCommands+0x264>)
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <parseCommands+0x1e8>)
 8001636:	f7fe fdd3 	bl	80001e0 <strcmp>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <parseCommands+0x1cc>
		writeMsg(&handlerUSART1, "CMD: staticRanging\n");
 8001640:	492b      	ldr	r1, [pc, #172]	; (80016f0 <parseCommands+0x268>)
 8001642:	480f      	ldr	r0, [pc, #60]	; (8001680 <parseCommands+0x1f8>)
 8001644:	f011 ffa6 	bl	8013594 <writeMsg>
		StaticRanging(firstParameter);
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <parseCommands+0x1e4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f955 	bl	80018fc <StaticRanging>
}
 8001652:	e003      	b.n	800165c <parseCommands+0x1d4>
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
 8001654:	4927      	ldr	r1, [pc, #156]	; (80016f4 <parseCommands+0x26c>)
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <parseCommands+0x1f8>)
 8001658:	f011 ff9c 	bl	8013594 <writeMsg>
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20002f30 	.word	0x20002f30
 8001668:	20002f0c 	.word	0x20002f0c
 800166c:	20002f08 	.word	0x20002f08
 8001670:	20002f10 	.word	0x20002f10
 8001674:	0801b020 	.word	0x0801b020
 8001678:	0801b02c 	.word	0x0801b02c
 800167c:	0801b034 	.word	0x0801b034
 8001680:	20002d84 	.word	0x20002d84
 8001684:	0801b048 	.word	0x0801b048
 8001688:	0801b074 	.word	0x0801b074
 800168c:	0801b0a4 	.word	0x0801b0a4
 8001690:	0801b0d4 	.word	0x0801b0d4
 8001694:	0801b110 	.word	0x0801b110
 8001698:	0801b160 	.word	0x0801b160
 800169c:	0801b1bc 	.word	0x0801b1bc
 80016a0:	0801b218 	.word	0x0801b218
 80016a4:	0801b268 	.word	0x0801b268
 80016a8:	0801b270 	.word	0x0801b270
 80016ac:	0801b280 	.word	0x0801b280
 80016b0:	0801b288 	.word	0x0801b288
 80016b4:	0801b294 	.word	0x0801b294
 80016b8:	0801b29c 	.word	0x0801b29c
 80016bc:	0801b2ac 	.word	0x0801b2ac
 80016c0:	0801b2b8 	.word	0x0801b2b8
 80016c4:	20002e70 	.word	0x20002e70
 80016c8:	20002e28 	.word	0x20002e28
 80016cc:	0801b2cc 	.word	0x0801b2cc
 80016d0:	20002ea0 	.word	0x20002ea0
 80016d4:	0801b2e8 	.word	0x0801b2e8
 80016d8:	0801b2f4 	.word	0x0801b2f4
 80016dc:	0801b304 	.word	0x0801b304
 80016e0:	0801b310 	.word	0x0801b310
 80016e4:	20002e6e 	.word	0x20002e6e
 80016e8:	b60b60b7 	.word	0xb60b60b7
 80016ec:	0801b324 	.word	0x0801b324
 80016f0:	0801b334 	.word	0x0801b334
 80016f4:	0801b348 	.word	0x0801b348

080016f8 <stepMotorMove>:

void stepMotorMove(StepMotor_Handler_t *pStepMotor, uint16_t numSteps, uint8_t direction){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
	for (uint16_t k = 0; k < numSteps; k++){
 8001708:	2300      	movs	r3, #0
 800170a:	81fb      	strh	r3, [r7, #14]
 800170c:	e014      	b.n	8001738 <stepMotorMove+0x40>
		motorStatus = moveStepMotor(&StepMotor, 1, direction);
 800170e:	787b      	ldrb	r3, [r7, #1]
 8001710:	461a      	mov	r2, r3
 8001712:	2101      	movs	r1, #1
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <stepMotorMove+0x54>)
 8001716:	f011 fa5f 	bl	8012bd8 <moveStepMotor>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <stepMotorMove+0x58>)
 8001720:	801a      	strh	r2, [r3, #0]
		if (motorStatus == WARNING_WRONG_DIRECTION){
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <stepMotorMove+0x58>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <stepMotorMove+0x3a>
			writeMsg(&handlerUSART1, "The motor moved in the incorrect direction\n");
 800172a:	490a      	ldr	r1, [pc, #40]	; (8001754 <stepMotorMove+0x5c>)
 800172c:	480a      	ldr	r0, [pc, #40]	; (8001758 <stepMotorMove+0x60>)
 800172e:	f011 ff31 	bl	8013594 <writeMsg>
	for (uint16_t k = 0; k < numSteps; k++){
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	3301      	adds	r3, #1
 8001736:	81fb      	strh	r3, [r7, #14]
 8001738:	89fa      	ldrh	r2, [r7, #14]
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	429a      	cmp	r2, r3
 800173e:	d3e6      	bcc.n	800170e <stepMotorMove+0x16>
		}
	}
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20002e70 	.word	0x20002e70
 8001750:	20002e6c 	.word	0x20002e6c
 8001754:	0801b360 	.word	0x0801b360
 8001758:	20002d84 	.word	0x20002d84

0800175c <LiDAR_Start>:

void LiDAR_Start(void){
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	/**
	 * LiDAR_Start es la funcionalidad principal del proyecto, toma mediciones de distancia en 360° y guarda la información de posición y
	 * distancia en arreglos
	 */
	writeMsg(&handlerUSART1, "LiDAR Ranging starts\n");
 8001762:	493c      	ldr	r1, [pc, #240]	; (8001854 <LiDAR_Start+0xf8>)
 8001764:	483c      	ldr	r0, [pc, #240]	; (8001858 <LiDAR_Start+0xfc>)
 8001766:	f011 ff15 	bl	8013594 <writeMsg>
	// Se reinician las variables necesarias
	float conversion = 0;
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
	counterRangigData = 0;
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <LiDAR_Start+0x100>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]
	restartPulses();
 8001776:	f011 fc3b 	bl	8012ff0 <restartPulses>
	// Se mueve de a 4 pasos el motor y cada 4 pasos se hace una medición, midiendo los angulos con los pulsos
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
 800177a:	2300      	movs	r3, #0
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	e017      	b.n	80017b0 <LiDAR_Start+0x54>
		RangingMeasurment();
 8001780:	f000 f8f2 	bl	8001968 <RangingMeasurment>
		Pulses = getPulses();
 8001784:	f011 fc40 	bl	8013008 <getPulses>
 8001788:	eef0 7a40 	vmov.f32	s15, s0
 800178c:	4b34      	ldr	r3, [pc, #208]	; (8001860 <LiDAR_Start+0x104>)
 800178e:	edc3 7a00 	vstr	s15, [r3]
		angleData[k] = Pulses;
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4a32      	ldr	r2, [pc, #200]	; (8001860 <LiDAR_Start+0x104>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4932      	ldr	r1, [pc, #200]	; (8001864 <LiDAR_Start+0x108>)
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	601a      	str	r2, [r3, #0]
		stepMotorMove(&StepMotor, 4, CLOCKWISE);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2104      	movs	r1, #4
 80017a4:	4830      	ldr	r0, [pc, #192]	; (8001868 <LiDAR_Start+0x10c>)
 80017a6:	f7ff ffa7 	bl	80016f8 <stepMotorMove>
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	3301      	adds	r3, #1
 80017ae:	80fb      	strh	r3, [r7, #6]
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b6:	d3e3      	bcc.n	8001780 <LiDAR_Start+0x24>
	}
	writeMsg(&handlerUSART1, "LiDAR Measurment finished. Wait the motor return to its original position to get the data\n");
 80017b8:	492c      	ldr	r1, [pc, #176]	; (800186c <LiDAR_Start+0x110>)
 80017ba:	4827      	ldr	r0, [pc, #156]	; (8001858 <LiDAR_Start+0xfc>)
 80017bc:	f011 feea 	bl	8013594 <writeMsg>
	conversion = (float) SIZE_RANGING_DATA;
 80017c0:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80017c4:	603b      	str	r3, [r7, #0]
//	conversion = (conversion*1.40625)/Pulses; 			// Conversion para pasos de a 8
	conversion = (conversion*0.703125)/Pulses;			// Conversión para pasos de a 4
 80017c6:	6838      	ldr	r0, [r7, #0]
 80017c8:	f7fe fed6 	bl	8000578 <__aeabi_f2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <LiDAR_Start+0x114>)
 80017d2:	f7fe ff29 	bl	8000628 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4614      	mov	r4, r2
 80017dc:	461d      	mov	r5, r3
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <LiDAR_Start+0x104>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fec8 	bl	8000578 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7ff f844 	bl	800087c <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff fa0c 	bl	8000c18 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	603b      	str	r3, [r7, #0]
//	conversion = (conversion*0.17578125)/Pulses;		// Conversion para pasos de a 1
	// Se convierte la información de pulsos en ángulos
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
 8001804:	2300      	movs	r3, #0
 8001806:	80bb      	strh	r3, [r7, #4]
 8001808:	e012      	b.n	8001830 <LiDAR_Start+0xd4>
		angleData[k] = angleData[k]*conversion;
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	4a15      	ldr	r2, [pc, #84]	; (8001864 <LiDAR_Start+0x108>)
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	edd7 7a00 	vldr	s15, [r7]
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	4a10      	ldr	r2, [pc, #64]	; (8001864 <LiDAR_Start+0x108>)
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	80bb      	strh	r3, [r7, #4]
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001836:	d3e8      	bcc.n	800180a <LiDAR_Start+0xae>
	}
	// Se retorna el motor a su posición inicial
	stepMotorMove(&StepMotor, 2048, COUNTERCLOCKWISE);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <LiDAR_Start+0x10c>)
 8001840:	f7ff ff5a 	bl	80016f8 <stepMotorMove>
	writeMsg(&handlerUSART1, "Now you can get the data\n");
 8001844:	490b      	ldr	r1, [pc, #44]	; (8001874 <LiDAR_Start+0x118>)
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <LiDAR_Start+0xfc>)
 8001848:	f011 fea4 	bl	8013594 <writeMsg>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bdb0      	pop	{r4, r5, r7, pc}
 8001854:	0801b38c 	.word	0x0801b38c
 8001858:	20002d84 	.word	0x20002d84
 800185c:	20003f58 	.word	0x20003f58
 8001860:	20003f5c 	.word	0x20003f5c
 8001864:	20003758 	.word	0x20003758
 8001868:	20002e70 	.word	0x20002e70
 800186c:	0801b3a4 	.word	0x0801b3a4
 8001870:	3fe68000 	.word	0x3fe68000
 8001874:	0801b400 	.word	0x0801b400

08001878 <getRangingData>:

void getRangingData(void){
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af02      	add	r7, sp, #8
	/**
	 * getRangingData se encarga de mostrar los datos de la medición por consola
	 */
	writeMsg(&handlerUSART1, "Angle(degrees)       Distance(mm)\n");
 800187e:	4919      	ldr	r1, [pc, #100]	; (80018e4 <getRangingData+0x6c>)
 8001880:	4819      	ldr	r0, [pc, #100]	; (80018e8 <getRangingData+0x70>)
 8001882:	f011 fe87 	bl	8013594 <writeMsg>
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
 8001886:	2300      	movs	r3, #0
 8001888:	80fb      	strh	r3, [r7, #6]
 800188a:	e022      	b.n	80018d2 <getRangingData+0x5a>
		sprintf(bufferData, "%5f       %5f\n", angleData[k], rangingData[k]);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <getRangingData+0x74>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe6e 	bl	8000578 <__aeabi_f2d>
 800189c:	4604      	mov	r4, r0
 800189e:	460d      	mov	r5, r1
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <getRangingData+0x78>)
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe64 	bl	8000578 <__aeabi_f2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9cd 2300 	strd	r2, r3, [sp]
 80018b8:	4622      	mov	r2, r4
 80018ba:	462b      	mov	r3, r5
 80018bc:	490d      	ldr	r1, [pc, #52]	; (80018f4 <getRangingData+0x7c>)
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <getRangingData+0x80>)
 80018c0:	f015 f974 	bl	8016bac <siprintf>
		writeMsg(&handlerUSART1, bufferData);
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <getRangingData+0x80>)
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <getRangingData+0x70>)
 80018c8:	f011 fe64 	bl	8013594 <writeMsg>
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	3301      	adds	r3, #1
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d8:	d3d8      	bcc.n	800188c <getRangingData+0x14>
	}
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdb0      	pop	{r4, r5, r7, pc}
 80018e4:	0801b41c 	.word	0x0801b41c
 80018e8:	20002d84 	.word	0x20002d84
 80018ec:	20003758 	.word	0x20003758
 80018f0:	20002f54 	.word	0x20002f54
 80018f4:	0801b440 	.word	0x0801b440
 80018f8:	20002ea0 	.word	0x20002ea0

080018fc <StaticRanging>:

void StaticRanging(unsigned int numData){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	/**
	 * StaticRanging hace numData mediciones con el sensor ToF
	 */
	while (numData > 0){
 8001904:	e019      	b.n	800193a <StaticRanging+0x3e>
		counterRangigData = 0;
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <StaticRanging+0x54>)
 8001908:	2200      	movs	r2, #0
 800190a:	801a      	strh	r2, [r3, #0]
		RangingMeasurment();
 800190c:	f000 f82c 	bl	8001968 <RangingMeasurment>
		sprintf(bufferData, "Distance = %f mm\n",rangingData[0]);
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <StaticRanging+0x58>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe2f 	bl	8000578 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <StaticRanging+0x5c>)
 8001920:	480e      	ldr	r0, [pc, #56]	; (800195c <StaticRanging+0x60>)
 8001922:	f015 f943 	bl	8016bac <siprintf>
		writeMsg(&handlerUSART1, bufferData);
 8001926:	490d      	ldr	r1, [pc, #52]	; (800195c <StaticRanging+0x60>)
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <StaticRanging+0x64>)
 800192a:	f011 fe33 	bl	8013594 <writeMsg>
		numData--;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3b01      	subs	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
		HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f011 ff69 	bl	801380c <HAL_Delay>
	while (numData > 0){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e2      	bne.n	8001906 <StaticRanging+0xa>
	}
	writeMsg(&handlerUSART1, "The Static Ranging has finished");
 8001940:	4908      	ldr	r1, [pc, #32]	; (8001964 <StaticRanging+0x68>)
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <StaticRanging+0x64>)
 8001944:	f011 fe26 	bl	8013594 <writeMsg>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20003f58 	.word	0x20003f58
 8001954:	20002f54 	.word	0x20002f54
 8001958:	0801b450 	.word	0x0801b450
 800195c:	20002ea0 	.word	0x20002ea0
 8001960:	20002d84 	.word	0x20002d84
 8001964:	0801b464 	.word	0x0801b464

08001968 <RangingMeasurment>:

void RangingMeasurment(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	b09c      	sub	sp, #112	; 0x70
 800196c:	af00      	add	r7, sp, #0
	/**
	 * RangingMeasurment se encarga de hacer una medición con el sensor ToF y guardarla en un arreglo, realmente hace 5 mediciones y toma el
	 * promedio. Está configurada para que no guarde medidas en caso de que sean erróneas, y que tome medidas solo cuando detecte un objeto
	 */
	int numObjects = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53LX_MultiRangingData_t MultiRangingData;
	VL53LX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t NewDataReady=0;
 8001978:	2300      	movs	r3, #0
 800197a:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	HAL_Delay(2);
 8001982:	2002      	movs	r0, #2
 8001984:	f011 ff42 	bl	801380c <HAL_Delay>
	if(status){
 8001988:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <RangingMeasurment+0x178>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <RangingMeasurment+0x32>
		writeMsg(&handlerUSART1, "VL53LX_StartMeasurement failed\n");
 8001990:	4954      	ldr	r1, [pc, #336]	; (8001ae4 <RangingMeasurment+0x17c>)
 8001992:	4855      	ldr	r0, [pc, #340]	; (8001ae8 <RangingMeasurment+0x180>)
 8001994:	f011 fdfe 	bl	8013594 <writeMsg>
		while(1);
 8001998:	e7fe      	b.n	8001998 <RangingMeasurment+0x30>
	}
	if (isInterrupt){
	do // HW interrupt mode
	{
	  __WFI();
 800199a:	bf30      	wfi
	  if(IntCount !=0 ){
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <RangingMeasurment+0x184>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d076      	beq.n	8001a92 <RangingMeasurment+0x12a>
		IntCount=0;
 80019a4:	4b51      	ldr	r3, [pc, #324]	; (8001aec <RangingMeasurment+0x184>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
		status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80019aa:	4b51      	ldr	r3, [pc, #324]	; (8001af0 <RangingMeasurment+0x188>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 f8ad 	bl	8003b10 <VL53LX_GetMultiRangingData>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <RangingMeasurment+0x178>)
 80019bc:	601a      	str	r2, [r3, #0]
		numObjects = pMultiRangingData->NumberOfObjectsFound;
 80019be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c0:	795b      	ldrb	r3, [r3, #5]
 80019c2:	66bb      	str	r3, [r7, #104]	; 0x68
		RangeStatus = pMultiRangingData->RangeData->RangeStatus;
 80019c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c6:	7e9a      	ldrb	r2, [r3, #26]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <RangingMeasurment+0x18c>)
 80019ca:	701a      	strb	r2, [r3, #0]
		// Control de errores, si se detecta un error se muestra por consola cúal es y se reinicia la medición
		// En caso de que hayan muchos errores se manda por consola un mensaje de error general
		if (RangeStatus){
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <RangingMeasurment+0x18c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01f      	beq.n	8001a14 <RangingMeasurment+0xac>
			if (numMeasurmentErrors >= 3){
 80019d4:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <RangingMeasurment+0x190>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d903      	bls.n	80019e4 <RangingMeasurment+0x7c>
				writeMsg(&handlerUSART1, "The Tof Sensor is Failing, probably for the above reasons.\n");
 80019dc:	4947      	ldr	r1, [pc, #284]	; (8001afc <RangingMeasurment+0x194>)
 80019de:	4842      	ldr	r0, [pc, #264]	; (8001ae8 <RangingMeasurment+0x180>)
 80019e0:	f011 fdd8 	bl	8013594 <writeMsg>
			}
			RangeErrorsMsg(RangeStatus);
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <RangingMeasurment+0x18c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 faa9 	bl	8001f40 <RangeErrorsMsg>
			numMeasurmentErrors++;
 80019ee:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <RangingMeasurment+0x190>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <RangingMeasurment+0x190>)
 80019f8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(250);
 80019fa:	20fa      	movs	r0, #250	; 0xfa
 80019fc:	f011 ff06 	bl	801380c <HAL_Delay>
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <RangingMeasurment+0x188>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 fcc0 	bl	800338a <VL53LX_ClearInterruptAndStartMeasurement>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <RangingMeasurment+0x178>)
 8001a10:	601a      	str	r2, [r3, #0]
			continue;
 8001a12:	e03e      	b.n	8001a92 <RangingMeasurment+0x12a>
		}
		// Control de múltiples objetos, si se detecta más de un objeto se reinicia la medición
		// En caso de que se detecte varias veces la presencia de más de un objeto se manda el mensaje por consola
		if (numObjects > 1){
 8001a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	dd1a      	ble.n	8001a50 <RangingMeasurment+0xe8>
			if (errorMultipleObjects >= 3){
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <RangingMeasurment+0x198>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d903      	bls.n	8001a2a <RangingMeasurment+0xc2>
				writeMsg(&handlerUSART1, "There are multiple objects to range. There must only be one.\n");
 8001a22:	4938      	ldr	r1, [pc, #224]	; (8001b04 <RangingMeasurment+0x19c>)
 8001a24:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <RangingMeasurment+0x180>)
 8001a26:	f011 fdb5 	bl	8013594 <writeMsg>
			}
			errorMultipleObjects++;
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <RangingMeasurment+0x198>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <RangingMeasurment+0x198>)
 8001a34:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250);
 8001a36:	20fa      	movs	r0, #250	; 0xfa
 8001a38:	f011 fee8 	bl	801380c <HAL_Delay>
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <RangingMeasurment+0x188>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fca2 	bl	800338a <VL53LX_ClearInterruptAndStartMeasurement>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <RangingMeasurment+0x178>)
 8001a4c:	601a      	str	r2, [r3, #0]
			continue;
 8001a4e:	e020      	b.n	8001a92 <RangingMeasurment+0x12a>
		}
		meanRangingData += (float) pMultiRangingData->RangeData[0].RangeMilliMeter;
 8001a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a52:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <RangingMeasurment+0x1a0>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <RangingMeasurment+0x1a0>)
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
		i++;
 8001a6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a72:	3301      	adds	r3, #1
 8001a74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (status==0){
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <RangingMeasurment+0x178>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <RangingMeasurment+0x12a>
		  status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <RangingMeasurment+0x188>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fc80 	bl	800338a <VL53LX_ClearInterruptAndStartMeasurement>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <RangingMeasurment+0x178>)
 8001a90:	601a      	str	r2, [r3, #0]
		}

	  }
	}
	while(i < 5);
 8001a92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	f67f af7f 	bls.w	800199a <RangingMeasurment+0x32>
		}
	  }
	}
	while (i < 1);
	}
	rangingData[counterRangigData] = meanRangingData/5.0;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <RangingMeasurment+0x1a0>)
 8001a9e:	ed93 7a00 	vldr	s14, [r3]
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <RangingMeasurment+0x1a4>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <RangingMeasurment+0x1a8>)
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	edc3 7a00 	vstr	s15, [r3]
	counterRangigData++;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <RangingMeasurment+0x1a4>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <RangingMeasurment+0x1a4>)
 8001ac2:	801a      	strh	r2, [r3, #0]
	numMeasurmentErrors = 0;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <RangingMeasurment+0x190>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
	errorMultipleObjects = 0;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <RangingMeasurment+0x198>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	meanRangingData = 0;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <RangingMeasurment+0x1a0>)
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	3770      	adds	r7, #112	; 0x70
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20002cb0 	.word	0x20002cb0
 8001ae4:	0801b484 	.word	0x0801b484
 8001ae8:	20002d84 	.word	0x20002d84
 8001aec:	20002cb4 	.word	0x20002cb4
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20002e6b 	.word	0x20002e6b
 8001af8:	20002e68 	.word	0x20002e68
 8001afc:	0801b4a4 	.word	0x0801b4a4
 8001b00:	20002e6a 	.word	0x20002e6a
 8001b04:	0801b4e0 	.word	0x0801b4e0
 8001b08:	20003754 	.word	0x20003754
 8001b0c:	20003f58 	.word	0x20003f58
 8001b10:	20002f54 	.word	0x20002f54

08001b14 <initSystem>:

void initSystem(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	// Se configura el SysTick
	config_SysTickMs();
 8001b18:	f011 fad2 	bl	80130c0 <config_SysTickMs>

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOC;
 8001b1c:	4b80      	ldr	r3, [pc, #512]	; (8001d20 <initSystem+0x20c>)
 8001b1e:	4a81      	ldr	r2, [pc, #516]	; (8001d24 <initSystem+0x210>)
 8001b20:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_6;
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <initSystem+0x20c>)
 8001b24:	2206      	movs	r2, #6
 8001b26:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 8001b28:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <initSystem+0x20c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8001b2e:	4b7c      	ldr	r3, [pc, #496]	; (8001d20 <initSystem+0x20c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8001b34:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <initSystem+0x20c>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 8001b3a:	4879      	ldr	r0, [pc, #484]	; (8001d20 <initSystem+0x20c>)
 8001b3c:	f010 fede 	bl	80128fc <GPIO_Config>


	/* Configuración de las entradas para el Driver del motor */
	IN1.pGPIOx 										= GPIOC;
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <initSystem+0x214>)
 8001b42:	4a78      	ldr	r2, [pc, #480]	; (8001d24 <initSystem+0x210>)
 8001b44:	601a      	str	r2, [r3, #0]
	IN1.GPIO_PinConfig.GPIO_PinNumber				= PIN_0;
 8001b46:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <initSystem+0x214>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	711a      	strb	r2, [r3, #4]
	IN1.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8001b4c:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <initSystem+0x214>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	715a      	strb	r2, [r3, #5]
	IN1.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001b52:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <initSystem+0x214>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	721a      	strb	r2, [r3, #8]
	IN1.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8001b58:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <initSystem+0x214>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&IN1);
 8001b5e:	4872      	ldr	r0, [pc, #456]	; (8001d28 <initSystem+0x214>)
 8001b60:	f010 fecc 	bl	80128fc <GPIO_Config>


	IN2.pGPIOx 										= GPIOC;
 8001b64:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <initSystem+0x218>)
 8001b66:	4a6f      	ldr	r2, [pc, #444]	; (8001d24 <initSystem+0x210>)
 8001b68:	601a      	str	r2, [r3, #0]
	IN2.GPIO_PinConfig.GPIO_PinNumber				= PIN_1;
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <initSystem+0x218>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	711a      	strb	r2, [r3, #4]
	IN2.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8001b70:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <initSystem+0x218>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	715a      	strb	r2, [r3, #5]
	IN2.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <initSystem+0x218>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	721a      	strb	r2, [r3, #8]
	IN2.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <initSystem+0x218>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&IN2);
 8001b82:	486a      	ldr	r0, [pc, #424]	; (8001d2c <initSystem+0x218>)
 8001b84:	f010 feba 	bl	80128fc <GPIO_Config>

	IN3.pGPIOx 										= GPIOC;
 8001b88:	4b69      	ldr	r3, [pc, #420]	; (8001d30 <initSystem+0x21c>)
 8001b8a:	4a66      	ldr	r2, [pc, #408]	; (8001d24 <initSystem+0x210>)
 8001b8c:	601a      	str	r2, [r3, #0]
	IN3.GPIO_PinConfig.GPIO_PinNumber				= PIN_2;
 8001b8e:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <initSystem+0x21c>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	711a      	strb	r2, [r3, #4]
	IN3.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8001b94:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <initSystem+0x21c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	715a      	strb	r2, [r3, #5]
	IN3.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001b9a:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <initSystem+0x21c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	721a      	strb	r2, [r3, #8]
	IN3.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8001ba0:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <initSystem+0x21c>)
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&IN3);
 8001ba6:	4862      	ldr	r0, [pc, #392]	; (8001d30 <initSystem+0x21c>)
 8001ba8:	f010 fea8 	bl	80128fc <GPIO_Config>

	IN4.pGPIOx 										= GPIOC;
 8001bac:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <initSystem+0x220>)
 8001bae:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <initSystem+0x210>)
 8001bb0:	601a      	str	r2, [r3, #0]
	IN4.GPIO_PinConfig.GPIO_PinNumber				= PIN_3;
 8001bb2:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <initSystem+0x220>)
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	711a      	strb	r2, [r3, #4]
	IN4.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <initSystem+0x220>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]
	IN4.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <initSystem+0x220>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	721a      	strb	r2, [r3, #8]
	IN4.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <initSystem+0x220>)
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&IN4);
 8001bca:	485a      	ldr	r0, [pc, #360]	; (8001d34 <initSystem+0x220>)
 8001bcc:	f010 fe96 	bl	80128fc <GPIO_Config>

	StepMotor.IN1 = &IN1;
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <initSystem+0x224>)
 8001bd2:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <initSystem+0x214>)
 8001bd4:	601a      	str	r2, [r3, #0]
	StepMotor.IN2 = &IN2;
 8001bd6:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <initSystem+0x224>)
 8001bd8:	4a54      	ldr	r2, [pc, #336]	; (8001d2c <initSystem+0x218>)
 8001bda:	605a      	str	r2, [r3, #4]
	StepMotor.IN3 = &IN3;
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <initSystem+0x224>)
 8001bde:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <initSystem+0x21c>)
 8001be0:	609a      	str	r2, [r3, #8]
	StepMotor.IN4 = &IN4;
 8001be2:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <initSystem+0x224>)
 8001be4:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <initSystem+0x220>)
 8001be6:	60da      	str	r2, [r3, #12]

	/* Configuración para el suicheo del Sensor */
	VL53L3CX_VDD.pGPIOx = GPIOB;
 8001be8:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <initSystem+0x228>)
 8001bea:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <initSystem+0x22c>)
 8001bec:	601a      	str	r2, [r3, #0]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <initSystem+0x228>)
 8001bf0:	220d      	movs	r2, #13
 8001bf2:	711a      	strb	r2, [r3, #4]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001bf4:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <initSystem+0x228>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	715a      	strb	r2, [r3, #5]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001bfa:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <initSystem+0x228>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	721a      	strb	r2, [r3, #8]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001c00:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <initSystem+0x228>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	71da      	strb	r2, [r3, #7]
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;
 8001c06:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <initSystem+0x228>)
 8001c08:	2203      	movs	r2, #3
 8001c0a:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración y se inicia con el sensor apagado
	GPIO_Config(&VL53L3CX_VDD);
 8001c0c:	484b      	ldr	r0, [pc, #300]	; (8001d3c <initSystem+0x228>)
 8001c0e:	f010 fe75 	bl	80128fc <GPIO_Config>
	GPIO_WritePin(&VL53L3CX_VDD, 0);
 8001c12:	2100      	movs	r1, #0
 8001c14:	4849      	ldr	r0, [pc, #292]	; (8001d3c <initSystem+0x228>)
 8001c16:	f010 ff9b 	bl	8012b50 <GPIO_WritePin>

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	; (8001d44 <initSystem+0x230>)
 8001c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c20:	601a      	str	r2, [r3, #0]
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 8001c22:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <initSystem+0x230>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	711a      	strb	r2, [r3, #4]
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_100us;
 8001c28:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <initSystem+0x230>)
 8001c2a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001c2e:	80da      	strh	r2, [r3, #6]
	handlerStateLedTimer.timerConfig.Timer_period	= 2500;
 8001c30:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <initSystem+0x230>)
 8001c32:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c36:	609a      	str	r2, [r3, #8]
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);
 8001c38:	4842      	ldr	r0, [pc, #264]	; (8001d44 <initSystem+0x230>)
 8001c3a:	f010 fa7b 	bl	8012134 <BTimer_Config>

	// Configuración del PIN que recibe la información por la USB (RX) */
	handlerRxPIN.pGPIOx								= GPIOA;
 8001c3e:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <initSystem+0x234>)
 8001c40:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <initSystem+0x238>)
 8001c42:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_10;
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <initSystem+0x234>)
 8001c46:	220a      	movs	r2, #10
 8001c48:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <initSystem+0x234>)
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8001c50:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <initSystem+0x234>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001c56:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <initSystem+0x234>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <initSystem+0x234>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <initSystem+0x234>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 8001c68:	4837      	ldr	r0, [pc, #220]	; (8001d48 <initSystem+0x234>)
 8001c6a:	f010 fe47 	bl	80128fc <GPIO_Config>

	/* Configuración del PIN que envía la información por la USB (TX) */
	handlerTxPIN.pGPIOx								= GPIOA;
 8001c6e:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <initSystem+0x23c>)
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <initSystem+0x238>)
 8001c72:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <initSystem+0x23c>)
 8001c76:	2209      	movs	r2, #9
 8001c78:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <initSystem+0x23c>)
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <initSystem+0x23c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <initSystem+0x23c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <initSystem+0x23c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <initSystem+0x23c>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 8001c98:	482d      	ldr	r0, [pc, #180]	; (8001d50 <initSystem+0x23c>)
 8001c9a:	f010 fe2f 	bl	80128fc <GPIO_Config>

	/* Configuración del USART1 */
	handlerUSART1.ptrUSARTx							= USART2;
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <initSystem+0x240>)
 8001ca0:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <initSystem+0x244>)
 8001ca2:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_mode			= USART_MODE_RXTX;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <initSystem+0x240>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <initSystem+0x240>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <initSystem+0x240>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity			= USART_PARITY_NONE;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <initSystem+0x240>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <initSystem+0x240>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	721a      	strb	r2, [r3, #8]
	handlerUSART1.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <initSystem+0x240>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	725a      	strb	r2, [r3, #9]
	// Se carga la configuración del USART
	USART_Config(&handlerUSART1);
 8001cc8:	4822      	ldr	r0, [pc, #136]	; (8001d54 <initSystem+0x240>)
 8001cca:	f011 fa95 	bl	80131f8 <USART_Config>

	/* Configuración para el output A del encoder */
	encoderOutA.pGPIOx 								= GPIOC;
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <initSystem+0x248>)
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <initSystem+0x210>)
 8001cd2:	601a      	str	r2, [r3, #0]
	encoderOutA.GPIO_PinConfig.GPIO_PinNumber 		= PIN_15;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <initSystem+0x248>)
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	711a      	strb	r2, [r3, #4]
	encoderOutA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_INPUT;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <initSystem+0x248>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	715a      	strb	r2, [r3, #5]
	encoderOutA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <initSystem+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	71da      	strb	r2, [r3, #7]
	encoderOutA.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <initSystem+0x248>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración
	GPIO_Config(&encoderOutA);
 8001cec:	481b      	ldr	r0, [pc, #108]	; (8001d5c <initSystem+0x248>)
 8001cee:	f010 fe05 	bl	80128fc <GPIO_Config>

	/* Configuració para el output B del encoder */
	encoderOutB.pGPIOx 								= GPIOC;
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <initSystem+0x24c>)
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <initSystem+0x210>)
 8001cf6:	601a      	str	r2, [r3, #0]
	encoderOutB.GPIO_PinConfig.GPIO_PinNumber 		= PIN_14;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <initSystem+0x24c>)
 8001cfa:	220e      	movs	r2, #14
 8001cfc:	711a      	strb	r2, [r3, #4]
	encoderOutB.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_INPUT;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <initSystem+0x24c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	715a      	strb	r2, [r3, #5]
	encoderOutB.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <initSystem+0x24c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	71da      	strb	r2, [r3, #7]
	encoderOutB.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <initSystem+0x24c>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración
	GPIO_Config(&encoderOutB);
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <initSystem+0x24c>)
 8001d12:	f010 fdf3 	bl	80128fc <GPIO_Config>

	// Inicialización del EXTI en el driver del motor
	initStepMotor();
 8001d16:	f011 f915 	bl	8012f44 <initStepMotor>


}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20002d50 	.word	0x20002d50
 8001d24:	40020800 	.word	0x40020800
 8001d28:	20002e2c 	.word	0x20002e2c
 8001d2c:	20002e38 	.word	0x20002e38
 8001d30:	20002e44 	.word	0x20002e44
 8001d34:	20002e50 	.word	0x20002e50
 8001d38:	20002e70 	.word	0x20002e70
 8001d3c:	20002e5c 	.word	0x20002e5c
 8001d40:	40020400 	.word	0x40020400
 8001d44:	20002d5c 	.word	0x20002d5c
 8001d48:	20002d6c 	.word	0x20002d6c
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	20002d78 	.word	0x20002d78
 8001d54:	20002d84 	.word	0x20002d84
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	20002e10 	.word	0x20002e10
 8001d60:	20002e1c 	.word	0x20002e1c

08001d64 <Initial_Boot_VL53L3CX>:

void Initial_Boot_VL53L3CX(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
	/**
	 * Esta función se encarga de inicializar correctamente el Sensor ToF, en caso de no logralo se informará por consola
	 */
	uint8_t byteData;
	uint16_t wordData;
	uint8_t ToFSensor = 1; // 0=Left, 1=Center(default), 2=Right
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&VL53L3CX_VDD, 0);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4865      	ldr	r0, [pc, #404]	; (8001f08 <Initial_Boot_VL53L3CX+0x1a4>)
 8001d72:	f010 feed 	bl	8012b50 <GPIO_WritePin>
	HAL_Delay(2000);
 8001d76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d7a:	f011 fd47 	bl	801380c <HAL_Delay>
	GPIO_WritePin(&VL53L3CX_VDD, 1);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4861      	ldr	r0, [pc, #388]	; (8001f08 <Initial_Boot_VL53L3CX+0x1a4>)
 8001d82:	f010 fee5 	bl	8012b50 <GPIO_WritePin>
	HAL_Delay(2);
 8001d86:	2002      	movs	r0, #2
 8001d88:	f011 fd40 	bl	801380c <HAL_Delay>
	XNUCLEO53L3A2_Init();
 8001d8c:	f000 ff70 	bl	8002c70 <XNUCLEO53L3A2_Init>
	ToFSensor = 'c'; // Select ToFSensor: 0=Left, 1=Center, 2=Right
 8001d90:	2363      	movs	r3, #99	; 0x63
 8001d92:	71fb      	strb	r3, [r7, #7]
	status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 ffc3 	bl	8002d24 <XNUCLEO53L3A2_ResetId>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a5a      	ldr	r2, [pc, #360]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001da2:	6013      	str	r3, [r2, #0]
	HAL_Delay(2);
 8001da4:	2002      	movs	r0, #2
 8001da6:	f011 fd31 	bl	801380c <HAL_Delay>
	status = XNUCLEO53L3A2_ResetId(ToFSensor, 1); // Reset ToF sensor
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2101      	movs	r1, #1
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 ffb8 	bl	8002d24 <XNUCLEO53L3A2_ResetId>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a55      	ldr	r2, [pc, #340]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001db8:	6013      	str	r3, [r2, #0]
	HAL_Delay(2);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f011 fd26 	bl	801380c <HAL_Delay>
	VL53LX_RdByte(Dev, 0x010F, &byteData);
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	1dba      	adds	r2, r7, #6
 8001dc6:	f240 110f 	movw	r1, #271	; 0x10f
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fca2 	bl	8002714 <VL53LX_RdByte>
	sprintf(bufferData, "VL53LX Model_ID: %02X\n\r", byteData);
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	494f      	ldr	r1, [pc, #316]	; (8001f14 <Initial_Boot_VL53L3CX+0x1b0>)
 8001dd6:	4850      	ldr	r0, [pc, #320]	; (8001f18 <Initial_Boot_VL53L3CX+0x1b4>)
 8001dd8:	f014 fee8 	bl	8016bac <siprintf>
	writeMsg(&handlerUSART1, bufferData);
 8001ddc:	494e      	ldr	r1, [pc, #312]	; (8001f18 <Initial_Boot_VL53L3CX+0x1b4>)
 8001dde:	484f      	ldr	r0, [pc, #316]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001de0:	f011 fbd8 	bl	8013594 <writeMsg>
	VL53LX_RdByte(Dev, 0x0110, &byteData);
 8001de4:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1dba      	adds	r2, r7, #6
 8001dea:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fc90 	bl	8002714 <VL53LX_RdByte>
	sprintf(bufferData, "VL53LX Module_Type: %02X\n\r", byteData);
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4949      	ldr	r1, [pc, #292]	; (8001f20 <Initial_Boot_VL53L3CX+0x1bc>)
 8001dfa:	4847      	ldr	r0, [pc, #284]	; (8001f18 <Initial_Boot_VL53L3CX+0x1b4>)
 8001dfc:	f014 fed6 	bl	8016bac <siprintf>
	writeMsg(&handlerUSART1, bufferData);
 8001e00:	4945      	ldr	r1, [pc, #276]	; (8001f18 <Initial_Boot_VL53L3CX+0x1b4>)
 8001e02:	4846      	ldr	r0, [pc, #280]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001e04:	f011 fbc6 	bl	8013594 <writeMsg>
	VL53LX_RdWord(Dev, 0x010F, &wordData);
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1d3a      	adds	r2, r7, #4
 8001e0e:	f240 110f 	movw	r1, #271	; 0x10f
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fcb2 	bl	800277c <VL53LX_RdWord>
	sprintf(bufferData, "VL53LX: %02X\n\r", wordData);
 8001e18:	88bb      	ldrh	r3, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4941      	ldr	r1, [pc, #260]	; (8001f24 <Initial_Boot_VL53L3CX+0x1c0>)
 8001e1e:	483e      	ldr	r0, [pc, #248]	; (8001f18 <Initial_Boot_VL53L3CX+0x1b4>)
 8001e20:	f014 fec4 	bl	8016bac <siprintf>
	writeMsg(&handlerUSART1, bufferData);
 8001e24:	493c      	ldr	r1, [pc, #240]	; (8001f18 <Initial_Boot_VL53L3CX+0x1b4>)
 8001e26:	483d      	ldr	r0, [pc, #244]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001e28:	f011 fbb4 	bl	8013594 <writeMsg>
	  //////////////////////////////////////////////////////////////////////////////////////////////////
	status = VL53LX_WaitDeviceBooted(Dev);
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 f8ca 	bl	8002fca <VL53LX_WaitDeviceBooted>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001e3c:	601a      	str	r2, [r3, #0]
	while(status != VL53LX_ERROR_NONE){
 8001e3e:	e00f      	b.n	8001e60 <Initial_Boot_VL53L3CX+0xfc>
		writeMsg(&handlerUSART1, "Not Booted\n");
 8001e40:	4939      	ldr	r1, [pc, #228]	; (8001f28 <Initial_Boot_VL53L3CX+0x1c4>)
 8001e42:	4836      	ldr	r0, [pc, #216]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001e44:	f011 fba6 	bl	8013594 <writeMsg>
		status = VL53LX_WaitDeviceBooted(Dev);
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 f8bc 	bl	8002fca <VL53LX_WaitDeviceBooted>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001e58:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001e5a:	200a      	movs	r0, #10
 8001e5c:	f011 fcd6 	bl	801380c <HAL_Delay>
	while(status != VL53LX_ERROR_NONE){
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1eb      	bne.n	8001e40 <Initial_Boot_VL53L3CX+0xdc>
	}
	writeMsg(&handlerUSART1, "Device Booted\n");
 8001e68:	4930      	ldr	r1, [pc, #192]	; (8001f2c <Initial_Boot_VL53L3CX+0x1c8>)
 8001e6a:	482c      	ldr	r0, [pc, #176]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001e6c:	f011 fb92 	bl	8013594 <writeMsg>
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	status = VL53LX_DataInit(Dev);
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 f84d 	bl	8002f14 <VL53LX_DataInit>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001e80:	601a      	str	r2, [r3, #0]
	while(status != VL53LX_ERROR_NONE){
 8001e82:	e00f      	b.n	8001ea4 <Initial_Boot_VL53L3CX+0x140>
		status = VL53LX_DataInit(Dev);
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f843 	bl	8002f14 <VL53LX_DataInit>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001e94:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001e96:	200a      	movs	r0, #10
 8001e98:	f011 fcb8 	bl	801380c <HAL_Delay>
		writeMsg(&handlerUSART1, "Not Initialized\n");
 8001e9c:	4924      	ldr	r1, [pc, #144]	; (8001f30 <Initial_Boot_VL53L3CX+0x1cc>)
 8001e9e:	481f      	ldr	r0, [pc, #124]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001ea0:	f011 fb78 	bl	8013594 <writeMsg>
	while(status != VL53LX_ERROR_NONE){
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1eb      	bne.n	8001e84 <Initial_Boot_VL53L3CX+0x120>
	}
	writeMsg(&handlerUSART1, "Device Initialized\n");
 8001eac:	4921      	ldr	r1, [pc, #132]	; (8001f34 <Initial_Boot_VL53L3CX+0x1d0>)
 8001eae:	481b      	ldr	r0, [pc, #108]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001eb0:	f011 fb70 	bl	8013594 <writeMsg>
	status = VL53LX_SetDistanceMode(Dev, VL53LX_DISTANCEMODE_MEDIUM);
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f93e 	bl	800313c <VL53LX_SetDistanceMode>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001ec6:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////////////////////////////
	status = 1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
	while(status != VL53LX_ERROR_NONE){
 8001ece:	e00f      	b.n	8001ef0 <Initial_Boot_VL53L3CX+0x18c>
		status = VL53LX_StartMeasurement(Dev);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <Initial_Boot_VL53L3CX+0x1ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fa11 	bl	80032fc <VL53LX_StartMeasurement>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001ee0:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001ee2:	200a      	movs	r0, #10
 8001ee4:	f011 fc92 	bl	801380c <HAL_Delay>
		writeMsg(&handlerUSART1, "Not Measuring\n");
 8001ee8:	4913      	ldr	r1, [pc, #76]	; (8001f38 <Initial_Boot_VL53L3CX+0x1d4>)
 8001eea:	480c      	ldr	r0, [pc, #48]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001eec:	f011 fb52 	bl	8013594 <writeMsg>
	while(status != VL53LX_ERROR_NONE){
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <Initial_Boot_VL53L3CX+0x1a8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1eb      	bne.n	8001ed0 <Initial_Boot_VL53L3CX+0x16c>
	}
	writeMsg(&handlerUSART1, "Device ready to measure\n");
 8001ef8:	4910      	ldr	r1, [pc, #64]	; (8001f3c <Initial_Boot_VL53L3CX+0x1d8>)
 8001efa:	4808      	ldr	r0, [pc, #32]	; (8001f1c <Initial_Boot_VL53L3CX+0x1b8>)
 8001efc:	f011 fb4a 	bl	8013594 <writeMsg>
//	status = VL53LX_SmudgeCorrectionEnable(Dev, VL53LX_SMUDGE_CORRECTION_CONTINUOUS);
//	status = VL53LX_SetXTalkCompensationEnable(Dev, 1);
//	status = VL53LX_SetOffsetCorrectionMode(Dev, VL53LX_OFFSETCORRECTIONMODE_STANDARD);
//	status = VL53LX_PerformOffsetZeroDistanceCalibration(Dev);
//	status = VL53LX_PerformXTalkCalibration(Dev);
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20002e5c 	.word	0x20002e5c
 8001f0c:	20002cb0 	.word	0x20002cb0
 8001f10:	20000000 	.word	0x20000000
 8001f14:	0801b520 	.word	0x0801b520
 8001f18:	20002ea0 	.word	0x20002ea0
 8001f1c:	20002d84 	.word	0x20002d84
 8001f20:	0801b538 	.word	0x0801b538
 8001f24:	0801b554 	.word	0x0801b554
 8001f28:	0801b564 	.word	0x0801b564
 8001f2c:	0801b570 	.word	0x0801b570
 8001f30:	0801b580 	.word	0x0801b580
 8001f34:	0801b594 	.word	0x0801b594
 8001f38:	0801b5a8 	.word	0x0801b5a8
 8001f3c:	0801b5b8 	.word	0x0801b5b8

08001f40 <RangeErrorsMsg>:

void RangeErrorsMsg(uint8_t status){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
	/**
	 * Esta función contiene los posibles errores que pueden darse durante la etapa de medición, con su respectivo mensaje de error por consola
	 */
	switch(status){
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b0e      	cmp	r3, #14
 8001f4e:	dc23      	bgt.n	8001f98 <RangeErrorsMsg+0x58>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dd60      	ble.n	8002016 <RangeErrorsMsg+0xd6>
 8001f54:	3b01      	subs	r3, #1
 8001f56:	2b0d      	cmp	r3, #13
 8001f58:	d85d      	bhi.n	8002016 <RangeErrorsMsg+0xd6>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <RangeErrorsMsg+0x20>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f9f 	.word	0x08001f9f
 8001f64:	08001fa9 	.word	0x08001fa9
 8001f68:	08002017 	.word	0x08002017
 8001f6c:	08001fb3 	.word	0x08001fb3
 8001f70:	08001fbd 	.word	0x08001fbd
 8001f74:	08001fc7 	.word	0x08001fc7
 8001f78:	08001fd1 	.word	0x08001fd1
 8001f7c:	08001fdb 	.word	0x08001fdb
 8001f80:	08002017 	.word	0x08002017
 8001f84:	08001fe5 	.word	0x08001fe5
 8001f88:	08001fef 	.word	0x08001fef
 8001f8c:	08001ff9 	.word	0x08001ff9
 8001f90:	08002017 	.word	0x08002017
 8001f94:	08002003 	.word	0x08002003
 8001f98:	2bff      	cmp	r3, #255	; 0xff
 8001f9a:	d037      	beq.n	800200c <RangeErrorsMsg+0xcc>
		writeMsg(&handlerUSART1, "Target not detected, without no warning or errors raised\n");
		break;
	}
	default:
	{
		break;
 8001f9c:	e03b      	b.n	8002016 <RangeErrorsMsg+0xd6>
		writeMsg(&handlerUSART1, "Sigma estimator outofbounds\n");
 8001f9e:	4920      	ldr	r1, [pc, #128]	; (8002020 <RangeErrorsMsg+0xe0>)
 8001fa0:	4820      	ldr	r0, [pc, #128]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fa2:	f011 faf7 	bl	8013594 <writeMsg>
		break;
 8001fa6:	e037      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Signal too low to detect target\n");
 8001fa8:	491f      	ldr	r1, [pc, #124]	; (8002028 <RangeErrorsMsg+0xe8>)
 8001faa:	481e      	ldr	r0, [pc, #120]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fac:	f011 faf2 	bl	8013594 <writeMsg>
		break;
 8001fb0:	e032      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Target out of bounds\n");
 8001fb2:	491e      	ldr	r1, [pc, #120]	; (800202c <RangeErrorsMsg+0xec>)
 8001fb4:	481b      	ldr	r0, [pc, #108]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fb6:	f011 faed 	bl	8013594 <writeMsg>
		break;
 8001fba:	e02d      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Hardware or Tof sensor failure\n");
 8001fbc:	491c      	ldr	r1, [pc, #112]	; (8002030 <RangeErrorsMsg+0xf0>)
 8001fbe:	4819      	ldr	r0, [pc, #100]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fc0:	f011 fae8 	bl	8013594 <writeMsg>
		break;
 8001fc4:	e028      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "No wraparound check has been done (this is the very first range)\n");
 8001fc6:	491b      	ldr	r1, [pc, #108]	; (8002034 <RangeErrorsMsg+0xf4>)
 8001fc8:	4816      	ldr	r0, [pc, #88]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fca:	f011 fae3 	bl	8013594 <writeMsg>
		break;
 8001fce:	e023      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Wraparound occurred\n");
 8001fd0:	4919      	ldr	r1, [pc, #100]	; (8002038 <RangeErrorsMsg+0xf8>)
 8001fd2:	4814      	ldr	r0, [pc, #80]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fd4:	f011 fade 	bl	8013594 <writeMsg>
		break;
 8001fd8:	e01e      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Internal processing error\n");
 8001fda:	4918      	ldr	r1, [pc, #96]	; (800203c <RangeErrorsMsg+0xfc>)
 8001fdc:	4811      	ldr	r0, [pc, #68]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fde:	f011 fad9 	bl	8013594 <writeMsg>
		break;
 8001fe2:	e019      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Raised one time after init, ranging value has to be ignored\n");
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <RangeErrorsMsg+0x100>)
 8001fe6:	480f      	ldr	r0, [pc, #60]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001fe8:	f011 fad4 	bl	8013594 <writeMsg>
		break;
 8001fec:	e014      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Ranging is OK, but distance reported is the result of multiple targets merged together.\n");
 8001fee:	4915      	ldr	r1, [pc, #84]	; (8002044 <RangeErrorsMsg+0x104>)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001ff2:	f011 facf 	bl	8013594 <writeMsg>
		break;
 8001ff6:	e00f      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "There is a target, but signal is too low to report ranging\n");
 8001ff8:	4913      	ldr	r1, [pc, #76]	; (8002048 <RangeErrorsMsg+0x108>)
 8001ffa:	480a      	ldr	r0, [pc, #40]	; (8002024 <RangeErrorsMsg+0xe4>)
 8001ffc:	f011 faca 	bl	8013594 <writeMsg>
		break;
 8002000:	e00a      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Ranging data is negative and has to be ignored\n");
 8002002:	4912      	ldr	r1, [pc, #72]	; (800204c <RangeErrorsMsg+0x10c>)
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <RangeErrorsMsg+0xe4>)
 8002006:	f011 fac5 	bl	8013594 <writeMsg>
		break;
 800200a:	e005      	b.n	8002018 <RangeErrorsMsg+0xd8>
		writeMsg(&handlerUSART1, "Target not detected, without no warning or errors raised\n");
 800200c:	4910      	ldr	r1, [pc, #64]	; (8002050 <RangeErrorsMsg+0x110>)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <RangeErrorsMsg+0xe4>)
 8002010:	f011 fac0 	bl	8013594 <writeMsg>
		break;
 8002014:	e000      	b.n	8002018 <RangeErrorsMsg+0xd8>
		break;
 8002016:	bf00      	nop
	}
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	0801b5d4 	.word	0x0801b5d4
 8002024:	20002d84 	.word	0x20002d84
 8002028:	0801b5f4 	.word	0x0801b5f4
 800202c:	0801b618 	.word	0x0801b618
 8002030:	0801b630 	.word	0x0801b630
 8002034:	0801b650 	.word	0x0801b650
 8002038:	0801b694 	.word	0x0801b694
 800203c:	0801b6ac 	.word	0x0801b6ac
 8002040:	0801b6c8 	.word	0x0801b6c8
 8002044:	0801b708 	.word	0x0801b708
 8002048:	0801b764 	.word	0x0801b764
 800204c:	0801b7a0 	.word	0x0801b7a0
 8002050:	0801b7d0 	.word	0x0801b7d0

08002054 <BTimer2_Callback>:

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD6;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <BTimer2_Callback+0x20>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <BTimer2_Callback+0x20>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8002066:	615a      	str	r2, [r3, #20]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20002d50 	.word	0x20002d50

08002078 <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	rxData = getRxData();
 800207c:	f011 faa2 	bl	80135c4 <getRxData>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <Usart2_RX_Callback+0x14>)
 8002086:	701a      	strb	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20002f04 	.word	0x20002f04

08002090 <WelcomeMsg>:

void WelcomeMsg(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	writeMsg(&handlerUSART1, "\n");
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <WelcomeMsg+0x40>)
 8002096:	480f      	ldr	r0, [pc, #60]	; (80020d4 <WelcomeMsg+0x44>)
 8002098:	f011 fa7c 	bl	8013594 <writeMsg>
	writeMsg(&handlerUSART1, " @@@@  @@@@@     @@    @@ @@@@@   @@@@  @@@@@      @@@@  @@@@ @@  @@  @@@@   @@@@  @@@@@ \n");
 800209c:	490e      	ldr	r1, [pc, #56]	; (80020d8 <WelcomeMsg+0x48>)
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <WelcomeMsg+0x44>)
 80020a0:	f011 fa78 	bl	8013594 <writeMsg>
	writeMsg(&handlerUSART1, "@@  @@ @@  @@    @@       @@  @@ @@  @@ @@  @@    @@     @@   @@@ @@ @@     @@  @@ @@  @@\n");
 80020a4:	490d      	ldr	r1, [pc, #52]	; (80020dc <WelcomeMsg+0x4c>)
 80020a6:	480b      	ldr	r0, [pc, #44]	; (80020d4 <WelcomeMsg+0x44>)
 80020a8:	f011 fa74 	bl	8013594 <writeMsg>
	writeMsg(&handlerUSART1, "   @@  @@  @@    @@    @@ @@  @@ @@@@@@ @@@@@      @@@@  @@@@ @@ @@@  @@@@  @@  @@ @@@@@_\n");
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <WelcomeMsg+0x50>)
 80020ae:	4809      	ldr	r0, [pc, #36]	; (80020d4 <WelcomeMsg+0x44>)
 80020b0:	f011 fa70 	bl	8013594 <writeMsg>
	writeMsg(&handlerUSART1, " @@    @@  @@    @@    @@ @@  @@ @@  @@ @@  @@        @@ @@   @@  @@     @@ @@  @@ @@  @@\n");
 80020b4:	490b      	ldr	r1, [pc, #44]	; (80020e4 <WelcomeMsg+0x54>)
 80020b6:	4807      	ldr	r0, [pc, #28]	; (80020d4 <WelcomeMsg+0x44>)
 80020b8:	f011 fa6c 	bl	8013594 <writeMsg>
	writeMsg(&handlerUSART1, "@@@@@  @@@@@     @@@@@ @@ @@@@@  @@  @@ @@  @@     @@@@  @@@@ @@  @@  @@@@   @@@@  @@  @@\n\n");
 80020bc:	490a      	ldr	r1, [pc, #40]	; (80020e8 <WelcomeMsg+0x58>)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <WelcomeMsg+0x44>)
 80020c0:	f011 fa68 	bl	8013594 <writeMsg>
	writeMsg(&handlerUSART1, "Write 'Menu @' to see the options\n");
 80020c4:	4909      	ldr	r1, [pc, #36]	; (80020ec <WelcomeMsg+0x5c>)
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <WelcomeMsg+0x44>)
 80020c8:	f011 fa64 	bl	8013594 <writeMsg>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	0801b80c 	.word	0x0801b80c
 80020d4:	20002d84 	.word	0x20002d84
 80020d8:	0801b810 	.word	0x0801b810
 80020dc:	0801b86c 	.word	0x0801b86c
 80020e0:	0801b8c8 	.word	0x0801b8c8
 80020e4:	0801b924 	.word	0x0801b924
 80020e8:	0801b980 	.word	0x0801b980
 80020ec:	0801b9dc 	.word	0x0801b9dc

080020f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <Error_Handler+0x8>
	...

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_MspInit+0xa0>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a24      	ldr	r2, [pc, #144]	; (800219c <HAL_MspInit+0xa0>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_MspInit+0xa0>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_MspInit+0xa0>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_MspInit+0xa0>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_MspInit+0xa0>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213a:	2007      	movs	r0, #7
 800213c:	f011 fc5a 	bl	80139f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	f06f 000b 	mvn.w	r0, #11
 8002148:	f011 fc5f 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	f06f 000a 	mvn.w	r0, #10
 8002154:	f011 fc59 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	f06f 0009 	mvn.w	r0, #9
 8002160:	f011 fc53 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	f06f 0004 	mvn.w	r0, #4
 800216c:	f011 fc4d 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	f06f 0003 	mvn.w	r0, #3
 8002178:	f011 fc47 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	f06f 0001 	mvn.w	r0, #1
 8002184:	f011 fc41 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f011 fc3b 	bl	8013a0a <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_I2C_MspInit+0x84>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d12c      	bne.n	800221c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_I2C_MspInit+0x88>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_I2C_MspInit+0x88>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_I2C_MspInit+0x88>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e4:	2312      	movs	r3, #18
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f0:	2304      	movs	r3, #4
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	480c      	ldr	r0, [pc, #48]	; (800222c <HAL_I2C_MspInit+0x8c>)
 80021fc:	f011 fc58 	bl	8013ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_I2C_MspInit+0x88>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_I2C_MspInit+0x88>)
 800220a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_I2C_MspInit+0x88>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40005400 	.word	0x40005400
 8002228:	40023800 	.word	0x40023800
 800222c:	40020400 	.word	0x40020400

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_UART_MspInit+0x84>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d12b      	bne.n	80022aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0x88>)
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800228a:	230c      	movs	r3, #12
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800229a:	2307      	movs	r3, #7
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_UART_MspInit+0x8c>)
 80022a6:	f011 fc03 	bl	8013ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40004400 	.word	0x40004400
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f011 fa5e 	bl	80137cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL53L1X_INT_Pin);
 8002318:	2010      	movs	r0, #16
 800231a:	f011 fd7f 	bl	8013e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}

08002322 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
	return 1;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_kill>:

int _kill(int pid, int sig)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800233c:	f013 fd76 	bl	8015e2c <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	2216      	movs	r2, #22
 8002344:	601a      	str	r2, [r3, #0]
	return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_exit>:

void _exit (int status)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800235a:	f04f 31ff 	mov.w	r1, #4294967295
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffe7 	bl	8002332 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002364:	e7fe      	b.n	8002364 <_exit+0x12>

08002366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e00a      	b.n	800238e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002378:	f3af 8000 	nop.w
 800237c:	4601      	mov	r1, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	dbf0      	blt.n	8002378 <_read+0x12>
	}

return len;
 8002396:	687b      	ldr	r3, [r7, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e009      	b.n	80023c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fe84 	bl	80010c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbf1      	blt.n	80023b2 <_write+0x12>
	}
	return len;
 80023ce:	687b      	ldr	r3, [r7, #4]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	return -1;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002400:	605a      	str	r2, [r3, #4]
	return 0;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_isatty>:

int _isatty(int file)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	return 1;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
	return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f013 fcdc 	bl	8015e2c <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	220c      	movs	r2, #12
 8002478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20020000 	.word	0x20020000
 80024a0:	00000400 	.word	0x00000400
 80024a4:	20003f60 	.word	0x20003f60
 80024a8:	20004138 	.word	0x20004138

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <SystemInit+0x20>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <SystemInit+0x20>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <_I2CWrite>:
#   define VL53LX_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	330a      	adds	r3, #10
 80024e0:	617b      	str	r3, [r7, #20]
//    int i;
    i2cwriteCount+=count;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <_I2CWrite+0x54>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <_I2CWrite+0x54>)
 80024ec:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024f4:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024fe:	f893 3a50 	ldrb.w	r3, [r3, #2640]	; 0xa50
 8002502:	b299      	uxth	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	b29a      	uxth	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f011 fde0 	bl	80140d4 <HAL_I2C_Master_Transmit>
 8002514:	4603      	mov	r3, r0
 8002516:	613b      	str	r3, [r7, #16]

    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002518:	693b      	ldr	r3, [r7, #16]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20003f68 	.word	0x20003f68

08002528 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	330a      	adds	r3, #10
 8002538:	617b      	str	r3, [r7, #20]

    i2creadCount+=count;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_I2CRead+0x58>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <_I2CRead+0x58>)
 8002544:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800254c:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002556:	f893 3a50 	ldrb.w	r3, [r3, #2640]	; 0xa50
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	b299      	uxth	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	b29a      	uxth	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	f011 feaf 	bl	80142d0 <HAL_I2C_Master_Receive>
 8002572:	4603      	mov	r3, r0
 8002574:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002576:	693b      	ldr	r3, [r7, #16]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20003f64 	.word	0x20003f64

08002584 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	460b      	mov	r3, r1
 8002592:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2bff      	cmp	r3, #255	; 0xff
 800259c:	d902      	bls.n	80025a4 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 800259e:	f06f 0303 	mvn.w	r3, #3
 80025a2:	e01d      	b.n	80025e0 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80025a4:	897b      	ldrh	r3, [r7, #10]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <VL53LX_WriteMulti+0x64>)
 80025ae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80025b0:	897b      	ldrh	r3, [r7, #10]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <VL53LX_WriteMulti+0x64>)
 80025b6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	480b      	ldr	r0, [pc, #44]	; (80025ec <VL53LX_WriteMulti+0x68>)
 80025be:	f013 fc5f 	bl	8015e80 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3302      	adds	r3, #2
 80025c6:	461a      	mov	r2, r3
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <VL53LX_WriteMulti+0x64>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff ff80 	bl	80024d0 <_I2CWrite>
 80025d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80025d8:	23f3      	movs	r3, #243	; 0xf3
 80025da:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80025dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20003f6c 	.word	0x20003f6c
 80025ec:	20003f6e 	.word	0x20003f6e

080025f0 <VL53LX_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002600:	2300      	movs	r3, #0
 8002602:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002604:	897b      	ldrh	r3, [r7, #10]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29b      	uxth	r3, r3
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <VL53LX_ReadMulti+0x68>)
 800260e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <VL53LX_ReadMulti+0x68>)
 8002616:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002618:	2202      	movs	r2, #2
 800261a:	490f      	ldr	r1, [pc, #60]	; (8002658 <VL53LX_ReadMulti+0x68>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff ff57 	bl	80024d0 <_I2CWrite>
 8002622:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800262a:	23f3      	movs	r3, #243	; 0xf3
 800262c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800262e:	e00c      	b.n	800264a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff ff77 	bl	8002528 <_I2CRead>
 800263a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8002642:	23f3      	movs	r3, #243	; 0xf3
 8002644:	75fb      	strb	r3, [r7, #23]
 8002646:	e000      	b.n	800264a <VL53LX_ReadMulti+0x5a>
    }
done:
 8002648:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 800264a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20003f6c 	.word	0x20003f6c

0800265c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
 8002668:	4613      	mov	r3, r2
 800266a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <VL53LX_WrByte+0x50>)
 800267a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <VL53LX_WrByte+0x50>)
 8002682:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <VL53LX_WrByte+0x50>)
 8002686:	787b      	ldrb	r3, [r7, #1]
 8002688:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800268a:	2203      	movs	r2, #3
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <VL53LX_WrByte+0x50>)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff1e 	bl	80024d0 <_I2CWrite>
 8002694:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800269c:	23f3      	movs	r3, #243	; 0xf3
 800269e:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80026a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20003f6c 	.word	0x20003f6c

080026b0 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <VL53LX_WrWord+0x60>)
 80026ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <VL53LX_WrWord+0x60>)
 80026d6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80026d8:	883b      	ldrh	r3, [r7, #0]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <VL53LX_WrWord+0x60>)
 80026e2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80026e4:	883b      	ldrh	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <VL53LX_WrWord+0x60>)
 80026ea:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80026ec:	2204      	movs	r2, #4
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <VL53LX_WrWord+0x60>)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff feed 	bl	80024d0 <_I2CWrite>
 80026f6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80026fe:	23f3      	movs	r3, #243	; 0xf3
 8002700:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20003f6c 	.word	0x20003f6c

08002714 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	460b      	mov	r3, r1
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	b29b      	uxth	r3, r3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <VL53LX_RdByte+0x64>)
 8002730:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <VL53LX_RdByte+0x64>)
 8002738:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800273a:	2202      	movs	r2, #2
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <VL53LX_RdByte+0x64>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff fec6 	bl	80024d0 <_I2CWrite>
 8002744:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800274c:	23f3      	movs	r3, #243	; 0xf3
 800274e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002750:	e00c      	b.n	800276c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8002752:	2201      	movs	r2, #1
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fee6 	bl	8002528 <_I2CRead>
 800275c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8002764:	23f3      	movs	r3, #243	; 0xf3
 8002766:	75fb      	strb	r3, [r7, #23]
 8002768:	e000      	b.n	800276c <VL53LX_RdByte+0x58>
    }
done:
 800276a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 800276c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20003f6c 	.word	0x20003f6c

0800277c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	460b      	mov	r3, r1
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	b29b      	uxth	r3, r3
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <VL53LX_RdWord+0x7c>)
 8002798:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800279a:	897b      	ldrh	r3, [r7, #10]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <VL53LX_RdWord+0x7c>)
 80027a0:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80027a2:	2202      	movs	r2, #2
 80027a4:	4914      	ldr	r1, [pc, #80]	; (80027f8 <VL53LX_RdWord+0x7c>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fe92 	bl	80024d0 <_I2CWrite>
 80027ac:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80027b4:	23f3      	movs	r3, #243	; 0xf3
 80027b6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80027b8:	e017      	b.n	80027ea <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80027ba:	2202      	movs	r2, #2
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <VL53LX_RdWord+0x7c>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff feb2 	bl	8002528 <_I2CRead>
 80027c4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80027cc:	23f3      	movs	r3, #243	; 0xf3
 80027ce:	75fb      	strb	r3, [r7, #23]
        goto done;
 80027d0:	e00b      	b.n	80027ea <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <VL53LX_RdWord+0x7c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <VL53LX_RdWord+0x7c>)
 80027de:	785b      	ldrb	r3, [r3, #1]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80027ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20003f6c 	.word	0x20003f6c

080027fc <VL53LX_GetTickCount>:
}

VL53LX_Error VL53LX_GetTickCount(
	VL53LX_DEV Dev,
	uint32_t *ptick_count_ms)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8002810:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <VL53LX_WaitMs>:
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}


VL53LX_Error VL53LX_WaitMs(VL53LX_Dev_t *pdev, int32_t wait_ms){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f010 ffed 	bl	801380c <HAL_Delay>
    return VL53LX_ERROR_NONE;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_Dev_t *pdev, int32_t wait_us){
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4a06      	ldr	r2, [pc, #24]	; (8002864 <VL53LX_WaitUs+0x28>)
 800284a:	fb82 1203 	smull	r1, r2, r2, r3
 800284e:	1192      	asrs	r2, r2, #6
 8002850:	17db      	asrs	r3, r3, #31
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	4618      	mov	r0, r3
 8002856:	f010 ffd9 	bl	801380c <HAL_Delay>
    return VL53LX_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800286e:	af00      	add	r7, sp, #0
 8002870:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8002874:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8002878:	6020      	str	r0, [r4, #0]
 800287a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800287e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8002882:	6001      	str	r1, [r0, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800288a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002894:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8002898:	460a      	mov	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028c8:	4940      	ldr	r1, [pc, #256]	; (80029cc <VL53LX_WaitValueMaskEx+0x164>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f014 f9ff 	bl	8016cce <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(pdev, &start_time_ms);
 80028d0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80028d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80028d8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80028dc:	4611      	mov	r1, r2
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	f7ff ff8c 	bl	80027fc <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 80028e4:	e04e      	b.n	8002984 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 80028e6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d110      	bne.n	8002910 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 80028ee:	f207 2213 	addw	r2, r7, #531	; 0x213
 80028f2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80028f6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80028fa:	8819      	ldrh	r1, [r3, #0]
 80028fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002900:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	f7ff ff05 	bl	8002714 <VL53LX_RdByte>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8002910:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8002914:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8002918:	4013      	ands	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002920:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d102      	bne.n	8002930 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8002930:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8002934:	2b00      	cmp	r3, #0
 8002936:	d114      	bne.n	8002962 <VL53LX_WaitValueMaskEx+0xfa>
 8002938:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800293c:	2b00      	cmp	r3, #0
 800293e:	d110      	bne.n	8002962 <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8002940:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8002948:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800294c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002950:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002954:	4611      	mov	r1, r2
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	f7ff ff62 	bl	8002820 <VL53LX_WaitMs>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(pdev, &current_time_ms);
 8002962:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8002966:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800296a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800296e:	4611      	mov	r1, r2
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	f7ff ff43 	bl	80027fc <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8002976:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800297a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8002984:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10c      	bne.n	80029a6 <VL53LX_WaitValueMaskEx+0x13e>
 800298c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002990:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002994:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d203      	bcs.n	80029a6 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 800299e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d09f      	beq.n	80028e6 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80029a6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <VL53LX_WaitValueMaskEx+0x154>
 80029ae:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80029b6:	23f9      	movs	r3, #249	; 0xf9
 80029b8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80029bc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	0801ba00 	.word	0x0801ba00

080029d0 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af06      	add	r7, sp, #24
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	9304      	str	r3, [sp, #16]
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	9303      	str	r3, [sp, #12]
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68b8      	ldr	r0, [r7, #8]
 80029fe:	f00c fe6d 	bl	800f6dc <VL53LX_hist_process_data>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8002a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480d      	ldr	r0, [pc, #52]	; (8002a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a1a:	490e      	ldr	r1, [pc, #56]	; (8002a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a30:	4c0b      	ldr	r4, [pc, #44]	; (8002a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a3e:	f7ff fd35 	bl	80024ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a42:	f013 f9f9 	bl	8015e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a46:	f7fe fb67 	bl	8001118 <main>
  bx  lr    
 8002a4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002a58:	0801befc 	.word	0x0801befc
  ldr r2, =_sbss
 8002a5c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002a60:	20004138 	.word	0x20004138

08002a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC_IRQHandler>
	...

08002a68 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <_I2cFailRecover+0x138>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <_I2cFailRecover+0x138>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <_I2cFailRecover+0x138>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a94:	4843      	ldr	r0, [pc, #268]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002a96:	f011 f9a7 	bl	8013de8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aa0:	4840      	ldr	r0, [pc, #256]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002aa2:	f011 f9a1 	bl	8013de8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 8002aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002aac:	2311      	movs	r3, #17
 8002aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	4619      	mov	r1, r3
 8002aba:	483a      	ldr	r0, [pc, #232]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002abc:	f010 fff8 	bl	8013ab0 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	e014      	b.n	8002af0 <_I2cFailRecover+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002acc:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002ace:	f011 f98b 	bl	8013de8 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f010 fe9a 	bl	801380c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ade:	4831      	ldr	r0, [pc, #196]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002ae0:	f011 f982 	bl	8013de8 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f010 fe91 	bl	801380c <HAL_Delay>
        for( i=0; i<10; i++){
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	dde7      	ble.n	8002ac6 <_I2cFailRecover+0x5e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8002af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002afa:	482a      	ldr	r0, [pc, #168]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002afc:	f011 f95c 	bl	8013db8 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <_I2cFailRecover+0xa8>
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	623a      	str	r2, [r7, #32]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	ddd7      	ble.n	8002ac0 <_I2cFailRecover+0x58>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8002b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b14:	4823      	ldr	r0, [pc, #140]	; (8002ba4 <_I2cFailRecover+0x13c>)
 8002b16:	f011 f94f 	bl	8013db8 <HAL_GPIO_ReadPin>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13b      	bne.n	8002b98 <_I2cFailRecover+0x130>
        __GPIOA_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <_I2cFailRecover+0x138>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <_I2cFailRecover+0x138>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <_I2cFailRecover+0x138>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b40:	2301      	movs	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <_I2cFailRecover+0x140>)
 8002b50:	f010 ffae 	bl	8013ab0 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	2120      	movs	r1, #32
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <_I2cFailRecover+0x140>)
 8002b5a:	f011 f945 	bl	8013de8 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8002b5e:	2021      	movs	r0, #33	; 0x21
 8002b60:	f010 fe54 	bl	801380c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2120      	movs	r1, #32
 8002b68:	480f      	ldr	r0, [pc, #60]	; (8002ba8 <_I2cFailRecover+0x140>)
 8002b6a:	f011 f93d 	bl	8013de8 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8002b6e:	2021      	movs	r0, #33	; 0x21
 8002b70:	f010 fe4c 	bl	801380c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2120      	movs	r1, #32
 8002b78:	480b      	ldr	r0, [pc, #44]	; (8002ba8 <_I2cFailRecover+0x140>)
 8002b7a:	f011 f935 	bl	8013de8 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8002b7e:	2021      	movs	r0, #33	; 0x21
 8002b80:	f010 fe44 	bl	801380c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2120      	movs	r1, #32
 8002b88:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <_I2cFailRecover+0x140>)
 8002b8a:	f011 f92d 	bl	8013de8 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8002b8e:	f44f 7025 	mov.w	r0, #660	; 0x294
 8002b92:	f010 fe3b 	bl	801380c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002b96:	e7dd      	b.n	8002b54 <_I2cFailRecover+0xec>
        }while(1);
    }
}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	; 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020000 	.word	0x40020000

08002bac <XNUCLEO53L3A2_I2C1Configure>:



int XNUCLEO53L3A2_I2C1Configure() {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 8002bb2:	f7ff ff59 	bl	8002a68 <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <XNUCLEO53L3A2_I2C1Configure+0xb0>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bf2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf4:	2312      	movs	r3, #18
 8002bf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c00:	2304      	movs	r3, #4
 8002c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4815      	ldr	r0, [pc, #84]	; (8002c60 <XNUCLEO53L3A2_I2C1Configure+0xb4>)
 8002c0c:	f010 ff50 	bl	8013ab0 <HAL_GPIO_Init>

    XNUCLEO53L3A2_hi2c.Instance = I2C1;
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <XNUCLEO53L3A2_I2C1Configure+0xbc>)
 8002c14:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L3A2_hi2c.Init.ClockSpeed = 400000;
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <XNUCLEO53L3A2_I2C1Configure+0xc0>)
 8002c1a:	605a      	str	r2, [r3, #4]
    XNUCLEO53L3A2_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L3A2_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
#endif
    XNUCLEO53L3A2_hi2c.Init.OwnAddress1 = 0;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
    XNUCLEO53L3A2_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c2e:	611a      	str	r2, [r3, #16]
    XNUCLEO53L3A2_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
    XNUCLEO53L3A2_hi2c.Init.OwnAddress2 = 0;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
    XNUCLEO53L3A2_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
    XNUCLEO53L3A2_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L3A2_hi2c);
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <XNUCLEO53L3A2_I2C1Configure+0xb8>)
 8002c4a:	f011 f8ff 	bl	8013e4c <HAL_I2C_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	61fb      	str	r3, [r7, #28]
    return status;
 8002c52:	69fb      	ldr	r3, [r7, #28]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020400 	.word	0x40020400
 8002c64:	2000406c 	.word	0x2000406c
 8002c68:	40005400 	.word	0x40005400
 8002c6c:	00061a80 	.word	0x00061a80

08002c70 <XNUCLEO53L3A2_Init>:
done:
    return status;
}


int XNUCLEO53L3A2_Init(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L3A2_USART2_UART_Init();
    XNUCLEO53L3A2_I2C1Configure();
 8002c76:	f7ff ff99 	bl	8002bac <XNUCLEO53L3A2_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8002c7a:	463a      	mov	r2, r7
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2086      	movs	r0, #134	; 0x86
 8002c82:	f000 f8ed 	bl	8002e60 <_ExpanderRd>
 8002c86:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d13c      	bne.n	8002d08 <XNUCLEO53L3A2_Init+0x98>
 8002c8e:	783b      	ldrb	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d139      	bne.n	8002d08 <XNUCLEO53L3A2_Init+0x98>
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b16      	cmp	r3, #22
 8002c98:	d136      	bne.n	8002d08 <XNUCLEO53L3A2_Init+0x98>
        XNUCLEO53L3A2_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
        goto done_err;

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	2084      	movs	r0, #132	; 0x84
 8002ca2:	f000 f8dd 	bl	8002e60 <_ExpanderRd>
 8002ca6:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12e      	bne.n	8002d0c <XNUCLEO53L3A2_Init+0x9c>
 8002cae:	783b      	ldrb	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d12b      	bne.n	8002d0c <XNUCLEO53L3A2_Init+0x9c>
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b16      	cmp	r3, #22
 8002cb8:	d128      	bne.n	8002d0c <XNUCLEO53L3A2_Init+0x9c>
        XNUCLEO53L3A2_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
        goto done_err;
    }

    CurIOVal.u32=0x0;
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <XNUCLEO53L3A2_Init+0xb0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 8002cc0:	23ff      	movs	r3, #255	; 0xff
 8002cc2:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 8002cc4:	23ff      	movs	r3, #255	; 0xff
 8002cc6:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8002cc8:	463a      	mov	r2, r7
 8002cca:	2302      	movs	r3, #2
 8002ccc:	2114      	movs	r1, #20
 8002cce:	2086      	movs	r0, #134	; 0x86
 8002cd0:	f000 f8f8 	bl	8002ec4 <_ExpanderWR>
 8002cd4:	6078      	str	r0, [r7, #4]
    if (status) {
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d119      	bne.n	8002d10 <XNUCLEO53L3A2_Init+0xa0>
        XNUCLEO53L3A2_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
        goto done_err;
    }
    ExpanderData[0] = 0xFF;
 8002cdc:	23ff      	movs	r3, #255	; 0xff
 8002cde:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8002ce0:	23bf      	movs	r3, #191	; 0xbf
 8002ce2:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8002ce4:	463a      	mov	r2, r7
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	2114      	movs	r1, #20
 8002cea:	2084      	movs	r0, #132	; 0x84
 8002cec:	f000 f8ea 	bl	8002ec4 <_ExpanderWR>
 8002cf0:	6078      	str	r0, [r7, #4]
    if (status) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <XNUCLEO53L3A2_Init+0xa4>
        XNUCLEO53L3A2_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
        goto done_err;
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <XNUCLEO53L3A2_Init+0xb0>)
 8002cfa:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8002cfe:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 8002d00:	f000 f88e 	bl	8002e20 <_ExpandersSetAllIO>
 8002d04:	6078      	str	r0, [r7, #4]
    if( status ){
        XNUCLEO53L3A2_ErrLog("Set initial i/o ");
    }

done_err:
 8002d06:	e006      	b.n	8002d16 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002d08:	bf00      	nop
 8002d0a:	e004      	b.n	8002d16 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002d0c:	bf00      	nop
 8002d0e:	e002      	b.n	8002d16 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <XNUCLEO53L3A2_Init+0xa6>
        goto done_err;
 8002d14:	bf00      	nop
    return status;
 8002d16:	687b      	ldr	r3, [r7, #4]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200040c0 	.word	0x200040c0

08002d24 <XNUCLEO53L3A2_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L3A2_ResetId(int DevNo, int state) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b72      	cmp	r3, #114	; 0x72
 8002d32:	d04c      	beq.n	8002dce <XNUCLEO53L3A2_ResetId+0xaa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b72      	cmp	r3, #114	; 0x72
 8002d38:	dc62      	bgt.n	8002e00 <XNUCLEO53L3A2_ResetId+0xdc>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b6c      	cmp	r3, #108	; 0x6c
 8002d3e:	d02d      	beq.n	8002d9c <XNUCLEO53L3A2_ResetId+0x78>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b6c      	cmp	r3, #108	; 0x6c
 8002d44:	dc5c      	bgt.n	8002e00 <XNUCLEO53L3A2_ResetId+0xdc>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b63      	cmp	r3, #99	; 0x63
 8002d4a:	d00e      	beq.n	8002d6a <XNUCLEO53L3A2_ResetId+0x46>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b63      	cmp	r3, #99	; 0x63
 8002d50:	dc56      	bgt.n	8002e00 <XNUCLEO53L3A2_ResetId+0xdc>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d03a      	beq.n	8002dce <XNUCLEO53L3A2_ResetId+0xaa>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	dc50      	bgt.n	8002e00 <XNUCLEO53L3A2_ResetId+0xdc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <XNUCLEO53L3A2_ResetId+0x78>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d14a      	bne.n	8002e00 <XNUCLEO53L3A2_ResetId+0xdc>
    case XNUCLEO53L3A2_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002d6c:	78db      	ldrb	r3, [r3, #3]
 8002d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002d76:	70da      	strb	r2, [r3, #3]
        if( state )
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <XNUCLEO53L3A2_ResetId+0x68>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002d80:	78db      	ldrb	r3, [r3, #3]
 8002d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002d8a:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <XNUCLEO53L3A2_ResetId+0xf4>)
 8002d90:	2113      	movs	r1, #19
 8002d92:	2084      	movs	r0, #132	; 0x84
 8002d94:	f000 f896 	bl	8002ec4 <_ExpanderWR>
 8002d98:	60f8      	str	r0, [r7, #12]
        break;
 8002d9a:	e035      	b.n	8002e08 <XNUCLEO53L3A2_ResetId+0xe4>
    case XNUCLEO53L3A2_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002da8:	705a      	strb	r2, [r3, #1]
        if( state )
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <XNUCLEO53L3A2_ResetId+0x9a>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 8002db0:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002dbc:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <XNUCLEO53L3A2_ResetId+0xf8>)
 8002dc2:	2113      	movs	r1, #19
 8002dc4:	2086      	movs	r0, #134	; 0x86
 8002dc6:	f000 f87d 	bl	8002ec4 <_ExpanderWR>
 8002dca:	60f8      	str	r0, [r7, #12]
        break;
 8002dcc:	e01c      	b.n	8002e08 <XNUCLEO53L3A2_ResetId+0xe4>
    case 'r' :
    case XNUCLEO53L3A2_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002dda:	705a      	strb	r2, [r3, #1]
        if( state )
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <XNUCLEO53L3A2_ResetId+0xcc>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <XNUCLEO53L3A2_ResetId+0xf0>)
 8002dee:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8002df0:	2301      	movs	r3, #1
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <XNUCLEO53L3A2_ResetId+0xf8>)
 8002df4:	2113      	movs	r1, #19
 8002df6:	2086      	movs	r0, #134	; 0x86
 8002df8:	f000 f864 	bl	8002ec4 <_ExpanderWR>
 8002dfc:	60f8      	str	r0, [r7, #12]
        break;
 8002dfe:	e003      	b.n	8002e08 <XNUCLEO53L3A2_ResetId+0xe4>
    default:
        XNUCLEO53L3A2_ErrLog("Invalid DevNo %d",DevNo);
        status = -1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	60fb      	str	r3, [r7, #12]
        goto done;
 8002e06:	e000      	b.n	8002e0a <XNUCLEO53L3A2_ResetId+0xe6>
    }
//error with valid id
    if( status ){
        XNUCLEO53L3A2_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
    }
done:
 8002e08:	bf00      	nop
    return status;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200040c0 	.word	0x200040c0
 8002e18:	200040c3 	.word	0x200040c3
 8002e1c:	200040c1 	.word	0x200040c1

08002e20 <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8002e26:	2302      	movs	r3, #2
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <_ExpandersSetAllIO+0x38>)
 8002e2a:	2112      	movs	r1, #18
 8002e2c:	2086      	movs	r0, #134	; 0x86
 8002e2e:	f000 f849 	bl	8002ec4 <_ExpanderWR>
 8002e32:	6078      	str	r0, [r7, #4]
    if( status ){
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <_ExpandersSetAllIO+0x3c>)
 8002e3e:	2112      	movs	r1, #18
 8002e40:	2084      	movs	r0, #132	; 0x84
 8002e42:	f000 f83f 	bl	8002ec4 <_ExpanderWR>
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	e000      	b.n	8002e4c <_ExpandersSetAllIO+0x2c>
        goto done_err;
 8002e4a:	bf00      	nop
done_err:
    return status;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200040c0 	.word	0x200040c0
 8002e5c:	200040c2 	.word	0x200040c2

08002e60 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L3A2_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	b299      	uxth	r1, r3
 8002e78:	f107 0213 	add.w	r2, r7, #19
 8002e7c:	2364      	movs	r3, #100	; 0x64
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2301      	movs	r3, #1
 8002e82:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <_ExpanderRd+0x60>)
 8002e84:	f011 f926 	bl	80140d4 <HAL_I2C_Master_Transmit>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	617b      	str	r3, [r7, #20]
        if (status)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d110      	bne.n	8002eb4 <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	b299      	uxth	r1, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2064      	movs	r0, #100	; 0x64
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <_ExpanderRd+0x60>)
 8002eaa:	f011 fa11 	bl	80142d0 <HAL_I2C_Master_Receive>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e000      	b.n	8002eb6 <_ExpanderRd+0x56>
            break;
 8002eb4:	bf00      	nop
    } while (0);
    XNUCLEO53L3A2_PutI2cBus();
    return status;
 8002eb6:	697b      	ldr	r3, [r7, #20]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000406c 	.word	0x2000406c

08002ec4 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	3301      	adds	r3, #1
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f012 ffcc 	bl	8015e80 <memcpy>
    XNUCLEO53L3A2_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	b299      	uxth	r1, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f107 0214 	add.w	r2, r7, #20
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	9000      	str	r0, [sp, #0]
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <_ExpanderWR+0x4c>)
 8002efe:	f011 f8e9 	bl	80140d4 <HAL_I2C_Master_Transmit>
 8002f02:	4603      	mov	r3, r0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L3A2_PutI2cBus();
    return status;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000406c 	.word	0x2000406c

08002f14 <VL53LX_DataInit>:
	return Status;
}


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8002f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f001 fa20 	bl	8004370 <VL53LX_data_init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8002f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8002f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f40:	2102      	movs	r1, #2
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f884 	bl	8003050 <SetPresetModeL3CX>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8002f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002f54:	f248 2135 	movw	r1, #33333	; 0x8235
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f957 	bl	800320c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8002f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f74:	3318      	adds	r3, #24
 8002f76:	220c      	movs	r2, #12
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f012 ff8e 	bl	8015e9c <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8002f88:	2102      	movs	r1, #2
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f003 fb5e 	bl	800664c <VL53LX_set_dmax_mode>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8002f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fdde 	bl	8003b60 <VL53LX_SmudgeCorrectionEnable>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	70da      	strb	r2, [r3, #3]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2a40 	strb.w	r2, [r3, #2624]	; 0xa40
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8002fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8002fd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f00e fcd9 	bl	8011992 <VL53LX_poll_for_boot_completion>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8002fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <ComputeDevicePresetMode+0x5c>)
 8003002:	f107 0308 	add.w	r3, r7, #8
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	4611      	mov	r1, r2
 800300a:	8019      	strh	r1, [r3, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	0c12      	lsrs	r2, r2, #16
 8003010:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d002      	beq.n	800301e <ComputeDevicePresetMode+0x2e>
 8003018:	2b02      	cmp	r3, #2
 800301a:	d003      	beq.n	8003024 <ComputeDevicePresetMode+0x34>
 800301c:	e005      	b.n	800302a <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
		break;
 8003022:	e004      	b.n	800302e <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
		break;
 8003028:	e001      	b.n	800302e <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800302a:	2302      	movs	r3, #2
 800302c:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3310      	adds	r3, #16
 8003032:	443b      	add	r3, r7
 8003034:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	701a      	strb	r2, [r3, #0]

	return Status;
 800303c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	0801ba04 	.word	0x0801ba04

08003050 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af04      	add	r7, sp, #16
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	460b      	mov	r3, r1
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003074:	2320      	movs	r3, #32
 8003076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 800307a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ffb4 	bl	8002ff0 <ComputeDevicePresetMode>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 800308e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003092:	2b00      	cmp	r3, #0
 8003094:	d112      	bne.n	80030bc <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8003096:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800309a:	f107 001c 	add.w	r0, r7, #28
 800309e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	f107 0318 	add.w	r3, r7, #24
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4603      	mov	r3, r0
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f001 fd5b 	bl	8004b6c <VL53LX_get_preset_mode_timing_cfg>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80030bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d112      	bne.n	80030ea <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80030c4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80030c8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80030ca:	69fd      	ldr	r5, [r7, #28]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	9102      	str	r1, [sp, #8]
 80030d4:	9201      	str	r2, [sp, #4]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	462b      	mov	r3, r5
 80030da:	4622      	mov	r2, r4
 80030dc:	4601      	mov	r1, r0
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f001 fda4 	bl	8004c2c <VL53LX_set_preset_mode>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80030ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030f8:	70da      	strb	r2, [r3, #3]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 80030fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3728      	adds	r7, #40	; 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bdb0      	pop	{r4, r5, r7, pc}

08003106 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 800311c:	2baa      	cmp	r3, #170	; 0xaa
 800311e:	d106      	bne.n	800312e <IsL4+0x28>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8003126:	2beb      	cmp	r3, #235	; 0xeb
 8003128:	d101      	bne.n	800312e <IsL4+0x28>
		devL4 = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
	return devL4;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <VL53LX_SetDistanceMode>:
}


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d008      	beq.n	8003170 <VL53LX_SetDistanceMode+0x34>
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d005      	beq.n	8003170 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d002      	beq.n	8003170 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 800316a:	f06f 0303 	mvn.w	r3, #3
 800316e:	e049      	b.n	8003204 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ffc8 	bl	8003106 <IsL4>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <VL53LX_SetDistanceMode+0x4c>
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d102      	bne.n	8003188 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8003182:	f06f 0303 	mvn.w	r3, #3
 8003186:	e03d      	b.n	8003204 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 800318e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	f107 0210 	add.w	r2, r7, #16
 800319e:	f107 010c 	add.w	r1, r7, #12
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 fc20 	bl	80049e8 <VL53LX_get_timeouts_us>
 80031a8:	4603      	mov	r3, r0
 80031aa:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 80031ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff48 	bl	8003050 <SetPresetModeL3CX>
 80031c0:	4603      	mov	r3, r0
 80031c2:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 80031c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031d2:	461a      	mov	r2, r3
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f882 3a40 	strb.w	r3, [r2, #2624]	; 0xa40
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80031da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10e      	bne.n	8003200 <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f001 fbc5 	bl	8004978 <VL53LX_set_timeouts_us>
 80031ee:	4603      	mov	r3, r0
 80031f0:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 80031f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003200:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800322a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4a31      	ldr	r2, [pc, #196]	; (80032f4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d902      	bls.n	800323a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003234:	23fc      	movs	r3, #252	; 0xfc
 8003236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 800323a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	f107 0210 	add.w	r2, r7, #16
 800324a:	f107 010c 	add.w	r1, r7, #12
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 fbca 	bl	80049e8 <VL53LX_get_timeouts_us>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 800325a:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800325e:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8003260:	2306      	movs	r3, #6
 8003262:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff4e 	bl	8003106 <IsL4>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8003272:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	429a      	cmp	r2, r3
 800327a:	d803      	bhi.n	8003284 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800327c:	23fc      	movs	r3, #252	; 0xfc
 800327e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003282:	e003      	b.n	800328c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800328a:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 800328c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003290:	2b00      	cmp	r3, #0
 8003292:	d11c      	bne.n	80032ce <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	429a      	cmp	r2, r3
 800329a:	d203      	bcs.n	80032a4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 800329c:	23fc      	movs	r3, #252	; 0xfc
 800329e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032a2:	e00d      	b.n	80032c0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f001 fb5f 	bl	8004978 <VL53LX_set_timeouts_us>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 80032c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	611a      	str	r2, [r3, #16]
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80032ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f8c2 3a44 	str.w	r3, [r2, #2628]	; 0xa44
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3728      	adds	r7, #40	; 0x28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	00086470 	.word	0x00086470
 80032f4:	00989680 	.word	0x00989680
 80032f8:	00030d40 	.word	0x00030d40

080032fc <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 ff01 	bl	8004114 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003312:	2300      	movs	r3, #0
 8003314:	75bb      	strb	r3, [r7, #22]
 8003316:	e01a      	b.n	800334e <VL53LX_StartMeasurement+0x52>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003318:	7dbb      	ldrb	r3, [r7, #22]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003320:	3304      	adds	r3, #4
 8003322:	2100      	movs	r1, #0
 8003324:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003328:	7dbb      	ldrb	r3, [r7, #22]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003332:	3310      	adds	r3, #16
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003338:	7dbb      	ldrb	r3, [r7, #22]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003342:	3314      	adds	r3, #20
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003348:	7dbb      	ldrb	r3, [r7, #22]
 800334a:	3301      	adds	r3, #1
 800334c:	75bb      	strb	r3, [r7, #22]
 800334e:	7dbb      	ldrb	r3, [r7, #22]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d9e1      	bls.n	8003318 <VL53LX_StartMeasurement+0x1c>
	}
	pdev->PreviousStreamCount = 0;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800335a:	2200      	movs	r2, #0
 800335c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	78db      	ldrb	r3, [r3, #3]
 8003364:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8003366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <VL53LX_StartMeasurement+0x82>
		Status = VL53LX_init_and_start_range(
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2206      	movs	r2, #6
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 fd1d 	bl	8004db4 <VL53LX_init_and_start_range>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 800337e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <VL53LX_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	78db      	ldrb	r3, [r3, #3]
 800339a:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 800339c:	7bbb      	ldrb	r3, [r7, #14]
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f002 fc97 	bl	8005cd4 <VL53LX_clear_interrupt_and_enable_next_range>
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	3b05      	subs	r3, #5
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d840      	bhi.n	800344c <ConvertStatusHisto+0x94>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <ConvertStatusHisto+0x18>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003423 	.word	0x08003423
 80033d8:	0800342f 	.word	0x0800342f
 80033dc:	0800344d 	.word	0x0800344d
 80033e0:	08003447 	.word	0x08003447
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	0800344d 	.word	0x0800344d
 80033ec:	0800344d 	.word	0x0800344d
 80033f0:	0800344d 	.word	0x0800344d
 80033f4:	0800344d 	.word	0x0800344d
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800344d 	.word	0x0800344d
 8003404:	0800344d 	.word	0x0800344d
 8003408:	08003429 	.word	0x08003429
 800340c:	0800343b 	.word	0x0800343b
 8003410:	0800344d 	.word	0x0800344d
 8003414:	08003441 	.word	0x08003441
 8003418:	08003435 	.word	0x08003435
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800341c:	2304      	movs	r3, #4
 800341e:	73fb      	strb	r3, [r7, #15]
		break;
 8003420:	e016      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
		break;
 8003426:	e013      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8003428:	2306      	movs	r3, #6
 800342a:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 800342c:	e010      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800342e:	2307      	movs	r3, #7
 8003430:	73fb      	strb	r3, [r7, #15]
		break;
 8003432:	e00d      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003434:	230c      	movs	r3, #12
 8003436:	73fb      	strb	r3, [r7, #15]
		break;
 8003438:	e00a      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800343a:	2307      	movs	r3, #7
 800343c:	73fb      	strb	r3, [r7, #15]
		break;
 800343e:	e007      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8003440:	230b      	movs	r3, #11
 8003442:	73fb      	strb	r3, [r7, #15]
		break;
 8003444:	e004      	b.n	8003450 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
		break;
 800344a:	e001      	b.n	8003450 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 800344c:	23ff      	movs	r3, #255	; 0xff
 800344e:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	70fb      	strb	r3, [r7, #3]
 8003472:	460b      	mov	r3, r1
 8003474:	70bb      	strb	r3, [r7, #2]
 8003476:	4613      	mov	r3, r2
 8003478:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8003490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003492:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034a2:	025b      	lsls	r3, r3, #9
 80034a4:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80034a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a8:	6a3a      	ldr	r2, [r7, #32]
 80034aa:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80034b0:	025b      	lsls	r3, r3, #9
 80034b2:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80034b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80034ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034be:	025b      	lsls	r3, r3, #9
 80034c0:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80034ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d0:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80034d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d4:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80034d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034da:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80034dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034de:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 80034e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80034ea:	2b11      	cmp	r3, #17
 80034ec:	d009      	beq.n	8003502 <SetTargetData+0xa2>
 80034ee:	2b11      	cmp	r3, #17
 80034f0:	dc0f      	bgt.n	8003512 <SetTargetData+0xb2>
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	dc02      	bgt.n	80034fc <SetTargetData+0x9c>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	dc03      	bgt.n	8003502 <SetTargetData+0xa2>
 80034fa:	e00a      	b.n	8003512 <SetTargetData+0xb2>
 80034fc:	2b0d      	cmp	r3, #13
 80034fe:	d004      	beq.n	800350a <SetTargetData+0xaa>
 8003500:	e007      	b.n	8003512 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8003502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003504:	2205      	movs	r2, #5
 8003506:	749a      	strb	r2, [r3, #18]
		break;
 8003508:	e006      	b.n	8003518 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	220d      	movs	r2, #13
 800350e:	749a      	strb	r2, [r3, #18]
		break;
 8003510:	e002      	b.n	8003518 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	2200      	movs	r2, #0
 8003516:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351a:	7c9b      	ldrb	r3, [r3, #18]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d117      	bne.n	8003550 <SetTargetData+0xf0>
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d114      	bne.n	8003550 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8003526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8003532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003534:	2200      	movs	r2, #0
 8003536:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800353e:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003546:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800354e:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8003550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003552:	7c9b      	ldrb	r3, [r3, #18]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff2b 	bl	80033b8 <ConvertStatusHisto>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	461a      	mov	r2, r3
 8003570:	f248 0191 	movw	r1, #32913	; 0x8091
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f003 f8a7 	bl	80066c8 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 800357a:	78bb      	ldrb	r3, [r7, #2]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8003588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358a:	8a1b      	ldrh	r3, [r3, #16]
 800358c:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003594:	2200      	movs	r2, #0
 8003596:	74da      	strb	r2, [r3, #19]

	if (ExtendedRangeEnabled &&
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 81dc 	beq.w	8003958 <SetTargetData+0x4f8>
		(pRangeData->RangeStatus ==
 80035a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a2:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d004      	beq.n	80035b2 <SetTargetData+0x152>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80035a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035aa:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	f040 81d3 	bne.w	8003958 <SetTargetData+0x4f8>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80035b2:	787b      	ldrb	r3, [r7, #1]
 80035b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80035bc:	3310      	adds	r3, #16
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b07      	cmp	r3, #7
 80035c2:	d01c      	beq.n	80035fe <SetTargetData+0x19e>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80035c4:	787b      	ldrb	r3, [r7, #1]
 80035c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80035ce:	3310      	adds	r3, #16
 80035d0:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d013      	beq.n	80035fe <SetTargetData+0x19e>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80035d6:	787b      	ldrb	r3, [r7, #1]
 80035d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035da:	4413      	add	r3, r2
 80035dc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80035e0:	3310      	adds	r3, #16
 80035e2:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 81b7 	bne.w	8003958 <SetTargetData+0x4f8>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80035ea:	787b      	ldrb	r3, [r7, #1]
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80035f4:	3314      	adds	r3, #20
 80035f6:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 81ad 	bne.w	8003958 <SetTargetData+0x4f8>
	{
		if (((pdev->PreviousStreamCount) ==
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003604:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8003608:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	f893 3477 	ldrb.w	r3, [r3, #1143]	; 0x477
 8003610:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003612:	429a      	cmp	r2, r3
 8003614:	d00c      	beq.n	8003630 <SetTargetData+0x1d0>
		|| ((pdev->PreviousStreamCount) ==
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800361c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8003620:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	f893 3477 	ldrb.w	r3, [r3, #1143]	; 0x477
 8003628:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800362a:	429a      	cmp	r2, r3
 800362c:	f040 816b 	bne.w	8003906 <SetTargetData+0x4a6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003636:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800363c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003640:	3304      	adds	r3, #4
 8003642:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003646:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	b29b      	uxth	r3, r3
 800364c:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b21      	cmp	r3, #33	; 0x21
 800365a:	d008      	beq.n	800366e <SetTargetData+0x20e>
 800365c:	2b21      	cmp	r3, #33	; 0x21
 800365e:	f300 814e 	bgt.w	80038fe <SetTargetData+0x49e>
 8003662:	2b1b      	cmp	r3, #27
 8003664:	f000 80d7 	beq.w	8003816 <SetTargetData+0x3b6>
 8003668:	2b1e      	cmp	r3, #30
 800366a:	d004      	beq.n	8003676 <SetTargetData+0x216>
 800366c:	e147      	b.n	80038fe <SetTargetData+0x49e>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003674:	e148      	b.n	8003908 <SetTargetData+0x4a8>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800367c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003680:	429a      	cmp	r2, r3
 8003682:	dd0e      	ble.n	80036a2 <SetTargetData+0x242>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800368a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800368e:	429a      	cmp	r2, r3
 8003690:	da07      	bge.n	80036a2 <SetTargetData+0x242>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d104      	bne.n	80036a2 <SetTargetData+0x242>
					sequency == 1) {
					AddOffset =
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800369e:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036a0:	e0b8      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80036a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80036ac:	425b      	negs	r3, r3
 80036ae:	429a      	cmp	r2, r3
 80036b0:	da0f      	bge.n	80036d2 <SetTargetData+0x272>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80036b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80036bc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80036be:	429a      	cmp	r2, r3
 80036c0:	dd07      	ble.n	80036d2 <SetTargetData+0x272>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <SetTargetData+0x272>
					sequency == 0) {
					AddOffset =
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80036ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036d0:	e0a0      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80036d8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80036dc:	429a      	cmp	r2, r3
 80036de:	dd0e      	ble.n	80036fe <SetTargetData+0x29e>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80036e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	da07      	bge.n	80036fe <SetTargetData+0x29e>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <SetTargetData+0x29e>
					sequency == 0) {
					AddOffset =
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80036fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036fc:	e08a      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80036fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8003708:	425b      	negs	r3, r3
 800370a:	429a      	cmp	r2, r3
 800370c:	da0f      	bge.n	800372e <SetTargetData+0x2ce>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800370e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8003718:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800371a:	429a      	cmp	r2, r3
 800371c:	dd07      	ble.n	800372e <SetTargetData+0x2ce>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d104      	bne.n	800372e <SetTargetData+0x2ce>
					sequency == 1) {
					AddOffset =
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800372a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800372c:	e072      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003734:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003738:	429a      	cmp	r2, r3
 800373a:	dd0e      	ble.n	800375a <SetTargetData+0x2fa>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003742:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003746:	429a      	cmp	r2, r3
 8003748:	da07      	bge.n	800375a <SetTargetData+0x2fa>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d104      	bne.n	800375a <SetTargetData+0x2fa>
					sequency == 1) {
					AddOffset =
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003756:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003758:	e05c      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800375a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003764:	425b      	negs	r3, r3
 8003766:	429a      	cmp	r2, r3
 8003768:	da0f      	bge.n	800378a <SetTargetData+0x32a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800376a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8003774:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003776:	429a      	cmp	r2, r3
 8003778:	dd07      	ble.n	800378a <SetTargetData+0x32a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <SetTargetData+0x32a>
					sequency == 0) {
					AddOffset =
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8003786:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003788:	e044      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8003790:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003794:	429a      	cmp	r2, r3
 8003796:	dd0e      	ble.n	80037b6 <SetTargetData+0x356>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800379e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	da07      	bge.n	80037b6 <SetTargetData+0x356>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <SetTargetData+0x356>
					sequency == 0) {
					AddOffset =
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80037b2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037b4:	e02e      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80037b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80037c0:	425b      	negs	r3, r3
 80037c2:	429a      	cmp	r2, r3
 80037c4:	da0f      	bge.n	80037e6 <SetTargetData+0x386>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80037c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80037d0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80037d2:	429a      	cmp	r2, r3
 80037d4:	dd07      	ble.n	80037e6 <SetTargetData+0x386>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d104      	bne.n	80037e6 <SetTargetData+0x386>
					sequency == 1) {
					AddOffset =
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80037e2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037e4:	e016      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80037ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	da0b      	bge.n	800380c <SetTargetData+0x3ac>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80037fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80037fe:	429a      	cmp	r2, r3
 8003800:	dd04      	ble.n	800380c <SetTargetData+0x3ac>
					AddOffset =
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8003808:	86bb      	strh	r3, [r7, #52]	; 0x34
 800380a:	e003      	b.n	8003814 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003812:	e079      	b.n	8003908 <SetTargetData+0x4a8>
 8003814:	e078      	b.n	8003908 <SetTargetData+0x4a8>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800381c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003820:	429a      	cmp	r2, r3
 8003822:	dd0e      	ble.n	8003842 <SetTargetData+0x3e2>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800382a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800382e:	429a      	cmp	r2, r3
 8003830:	da07      	bge.n	8003842 <SetTargetData+0x3e2>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <SetTargetData+0x3e2>
					sequency == 0) {
					AddOffset =
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800383e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003840:	e05c      	b.n	80038fc <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003842:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800384c:	425b      	negs	r3, r3
 800384e:	429a      	cmp	r2, r3
 8003850:	da0f      	bge.n	8003872 <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003852:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 800385c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800385e:	429a      	cmp	r2, r3
 8003860:	dd07      	ble.n	8003872 <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d104      	bne.n	8003872 <SetTargetData+0x412>
					sequency == 1) {
					AddOffset =
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800386e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003870:	e044      	b.n	80038fc <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8003878:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800387c:	429a      	cmp	r2, r3
 800387e:	dd0e      	ble.n	800389e <SetTargetData+0x43e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003886:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800388a:	429a      	cmp	r2, r3
 800388c:	da07      	bge.n	800389e <SetTargetData+0x43e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d104      	bne.n	800389e <SetTargetData+0x43e>
					sequency == 1) {
					AddOffset =
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800389a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800389c:	e02e      	b.n	80038fc <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800389e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 80038a8:	425b      	negs	r3, r3
 80038aa:	429a      	cmp	r2, r3
 80038ac:	da0f      	bge.n	80038ce <SetTargetData+0x46e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80038ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 80038b8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dd07      	ble.n	80038ce <SetTargetData+0x46e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <SetTargetData+0x46e>
					sequency == 0) {
					AddOffset =
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80038ca:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038cc:	e016      	b.n	80038fc <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80038d4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038d8:	429a      	cmp	r2, r3
 80038da:	da0b      	bge.n	80038f4 <SetTargetData+0x494>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80038e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	dd04      	ble.n	80038f4 <SetTargetData+0x494>
					AddOffset =
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80038f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038f2:	e003      	b.n	80038fc <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80038fa:	e005      	b.n	8003908 <SetTargetData+0x4a8>
 80038fc:	e004      	b.n	8003908 <SetTargetData+0x4a8>

			default:
				uwr_status = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8003904:	e000      	b.n	8003908 <SetTargetData+0x4a8>
			}
		}
 8003906:	bf00      	nop

		if (uwr_status) {
 8003908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800390c:	2b00      	cmp	r3, #0
 800390e:	d023      	beq.n	8003958 <SetTargetData+0x4f8>
			pRangeData->RangeMilliMeter += AddOffset;
 8003910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003912:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003916:	b29a      	uxth	r2, r3
 8003918:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800391a:	4413      	add	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	b21a      	sxth	r2, r3
 8003920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003922:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800392a:	b29a      	uxth	r2, r3
 800392c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800392e:	4413      	add	r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	b21a      	sxth	r2, r3
 8003934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003936:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393e:	b29a      	uxth	r2, r3
 8003940:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003942:	4413      	add	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	b21a      	sxth	r2, r3
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 800394c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394e:	2201      	movs	r2, #1
 8003950:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003954:	2200      	movs	r2, #0
 8003956:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003958:	787b      	ldrb	r3, [r7, #1]
 800395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003960:	3304      	adds	r3, #4
 8003962:	8ab9      	ldrh	r1, [r7, #20]
 8003964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003968:	787b      	ldrb	r3, [r7, #1]
 800396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396c:	7c91      	ldrb	r1, [r2, #18]
 800396e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003970:	4413      	add	r3, r2
 8003972:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003976:	3310      	adds	r3, #16
 8003978:	460a      	mov	r2, r1
 800397a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003980:	7cd1      	ldrb	r1, [r2, #19]
 8003982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003984:	4413      	add	r3, r2
 8003986:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800398a:	3314      	adds	r3, #20
 800398c:	460a      	mov	r2, r1
 800398e:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	8a1b      	ldrh	r3, [r3, #16]
 8003994:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003998:	7c9b      	ldrb	r3, [r3, #18]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d110      	bne.n	80039c0 <SetTargetData+0x560>
 800399e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da0c      	bge.n	80039c0 <SetTargetData+0x560>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 80039a6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <SetTargetData+0x56c>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	da03      	bge.n	80039ba <SetTargetData+0x55a>
			pRangeData->RangeStatus =
 80039b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b4:	220e      	movs	r2, #14
 80039b6:	749a      	strb	r2, [r3, #18]
 80039b8:	e002      	b.n	80039c0 <SetTargetData+0x560>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80039ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039bc:	2200      	movs	r2, #0
 80039be:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 80039c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3738      	adds	r7, #56	; 0x38
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000008 	.word	0x20000008

080039d0 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b08f      	sub	sp, #60	; 0x3c
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	7c9a      	ldrb	r2, [r3, #18]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	78da      	ldrb	r2, [r3, #3]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	7c9b      	ldrb	r3, [r3, #18]
 8003a0c:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8003a0e:	7ffb      	ldrb	r3, [r7, #31]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <SetMeasurementData+0x4c>

		iteration = 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a1a:	e002      	b.n	8003a22 <SetMeasurementData+0x52>
	else
		iteration = ActiveResults;
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a28:	e035      	b.n	8003a96 <SetMeasurementData+0xc6>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003a2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	3308      	adds	r3, #8
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8003a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a42:	224c      	movs	r2, #76	; 0x4c
 8003a44:	fb02 f303 	mul.w	r3, r2, r3
 8003a48:	3310      	adds	r3, #16
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8003a52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d113      	bne.n	8003a82 <SetMeasurementData+0xb2>
			Status = SetTargetData(Dev, ActiveResults,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7918      	ldrb	r0, [r3, #4]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	7c1b      	ldrb	r3, [r3, #16]
 8003a62:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003a66:	7ff9      	ldrb	r1, [r7, #31]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	9202      	str	r2, [sp, #8]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	9201      	str	r2, [sp, #4]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	4623      	mov	r3, r4
 8003a74:	4602      	mov	r2, r0
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff fcf2 	bl	8003460 <SetTargetData>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8003a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a90:	3301      	adds	r3, #1
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d3c3      	bcc.n	8003a2a <SetMeasurementData+0x5a>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f893 2477 	ldrb.w	r2, [r3, #1143]	; 0x477
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aae:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003aba:	e01f      	b.n	8003afc <SetMeasurementData+0x12c>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ada:	3310      	adds	r3, #16
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003aec:	3314      	adds	r3, #20
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af6:	3301      	adds	r3, #1
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d9db      	bls.n	8003abc <SetMeasurementData+0xec>
	}

	return Status;
 8003b04:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	372c      	adds	r7, #44	; 0x2c
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003b28:	3318      	adds	r3, #24
 8003b2a:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003b2c:	225c      	movs	r2, #92	; 0x5c
 8003b2e:	21ff      	movs	r1, #255	; 0xff
 8003b30:	6838      	ldr	r0, [r7, #0]
 8003b32:	f012 f9b3 	bl	8015e9c <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	2102      	movs	r1, #2
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 fcc6 	bl	80054cc <VL53LX_get_device_results>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff41 	bl	80039d0 <SetMeasurementData>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8003b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <VL53LX_SmudgeCorrectionEnable>:
}


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d84a      	bhi.n	8003c18 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bd9 	.word	0x08003bd9
 8003b94:	08003bf9 	.word	0x08003bf9
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f003 fc9d 	bl	80074d8 <VL53LX_dynamic_xtalk_correction_disable>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f003 fcae 	bl	8007504 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f003 fcd5 	bl	800755c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	733b      	strb	r3, [r7, #12]
		break;
 8003bb6:	e032      	b.n	8003c1e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f003 fc77 	bl	80074ac <VL53LX_dynamic_xtalk_correction_enable>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f003 fce0 	bl	8007588 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f003 fcc5 	bl	800755c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	733b      	strb	r3, [r7, #12]
		break;
 8003bd6:	e022      	b.n	8003c1e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f003 fc67 	bl	80074ac <VL53LX_dynamic_xtalk_correction_enable>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f003 fcd0 	bl	8007588 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8003be8:	4603      	mov	r3, r0
 8003bea:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f003 fc9f 	bl	8007530 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	733b      	strb	r3, [r7, #12]
		break;
 8003bf6:	e012      	b.n	8003c1e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f003 fc57 	bl	80074ac <VL53LX_dynamic_xtalk_correction_enable>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f003 fc7e 	bl	8007504 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f003 fca5 	bl	800755c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8003c12:	4603      	mov	r3, r0
 8003c14:	733b      	strb	r3, [r7, #12]
		break;
 8003c16:	e002      	b.n	8003c1e <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003c18:	23fc      	movs	r3, #252	; 0xfc
 8003c1a:	73fb      	strb	r3, [r7, #15]
		break;
 8003c1c:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8003c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003c32:	7b7b      	ldrb	r3, [r7, #13]
 8003c34:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003c3e:	7b3b      	ldrb	r3, [r7, #12]
 8003c40:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop

08003c50 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b21      	cmp	r3, #33	; 0x21
 8003c64:	d006      	beq.n	8003c74 <select_offset_per_vcsel+0x24>
 8003c66:	2b21      	cmp	r3, #33	; 0x21
 8003c68:	dc2b      	bgt.n	8003cc2 <select_offset_per_vcsel+0x72>
 8003c6a:	2b1b      	cmp	r3, #27
 8003c6c:	d01c      	beq.n	8003ca8 <select_offset_per_vcsel+0x58>
 8003c6e:	2b1e      	cmp	r3, #30
 8003c70:	d00d      	beq.n	8003c8e <select_offset_per_vcsel+0x3e>
 8003c72:	e026      	b.n	8003cc2 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7a:	f8b3 3c38 	ldrh.w	r3, [r3, #3128]	; 0xc38
 8003c7e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c86:	f8b3 3c3a 	ldrh.w	r3, [r3, #3130]	; 0xc3a
 8003c8a:	817b      	strh	r3, [r7, #10]
		break;
 8003c8c:	e02b      	b.n	8003ce6 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	f8b3 3c3c 	ldrh.w	r3, [r3, #3132]	; 0xc3c
 8003c98:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca0:	f8b3 3c3e 	ldrh.w	r3, [r3, #3134]	; 0xc3e
 8003ca4:	817b      	strh	r3, [r7, #10]
		break;
 8003ca6:	e01e      	b.n	8003ce6 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cae:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	; 0xc40
 8003cb2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	; 0xc42
 8003cbe:	817b      	strh	r3, [r7, #10]
		break;
 8003cc0:	e011      	b.n	8003ce6 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	; 0xc40
 8003ccc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	; 0xc42
 8003cd8:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003cda:	23fc      	movs	r3, #252	; 0xfc
 8003cdc:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	801a      	strh	r2, [r3, #0]
		break;
 8003ce4:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003cec:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8003cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003cf6:	7a7b      	ldrb	r3, [r7, #9]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <select_offset_per_vcsel+0xb6>
 8003d00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d04:	e001      	b.n	8003d0a <select_offset_per_vcsel+0xba>
 8003d06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	8013      	strh	r3, [r2, #0]

	return status;
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003d1e:	b490      	push	{r4, r7}
 8003d20:	b08a      	sub	sp, #40	; 0x28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d50:	e021      	b.n	8003d96 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003d52:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	0052      	lsls	r2, r2, #1
 8003d60:	441a      	add	r2, r3
 8003d62:	00d3      	lsls	r3, r2, #3
 8003d64:	461a      	mov	r2, r3
 8003d66:	460b      	mov	r3, r1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	440b      	add	r3, r1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	4423      	add	r3, r4
 8003d72:	f203 7312 	addw	r3, r3, #1810	; 0x712
 8003d76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003d80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3206      	adds	r2, #6
 8003d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d92:	3301      	adds	r3, #1
 8003d94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d96:	79bb      	ldrb	r3, [r7, #6]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3d8      	bcc.n	8003d52 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d047      	beq.n	8003e36 <vl53lx_diff_histo_stddev+0x118>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d044      	beq.n	8003e36 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003db4:	e03a      	b.n	8003e2c <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003db6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	0052      	lsls	r2, r2, #1
 8003dc4:	441a      	add	r2, r3
 8003dc6:	00d3      	lsls	r3, r2, #3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	460b      	mov	r3, r1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	440b      	add	r3, r1
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4423      	add	r3, r4
 8003dd6:	f203 7312 	addw	r3, r3, #1810	; 0x712
 8003dda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003dde:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	fb92 f3f3 	sdiv	r3, r2, r3
 8003df0:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003df2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3206      	adds	r2, #6
 8003df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e00:	fb03 f202 	mul.w	r2, r3, r2
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e0a:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	69b9      	ldr	r1, [r7, #24]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	6979      	ldr	r1, [r7, #20]
 8003e1a:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	441a      	add	r2, r3
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e28:	3301      	adds	r3, #1
 8003e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e2c:	79bb      	ldrb	r3, [r7, #6]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d3bf      	bcc.n	8003db6 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003e36:	bf00      	nop
 8003e38:	3728      	adds	r7, #40	; 0x28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc90      	pop	{r4, r7}
 8003e3e:	4770      	bx	lr

08003e40 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8003e6e:	2318      	movs	r3, #24
 8003e70:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	461a      	mov	r2, r3
 8003e78:	f248 018f 	movw	r1, #32911	; 0x808f
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f002 fc23 	bl	80066c8 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	461a      	mov	r2, r3
 8003e88:	f248 018e 	movw	r1, #32910	; 0x808e
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f002 fc1b 	bl	80066c8 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e98:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 811b 	bne.w	80040d8 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003ebc:	7efb      	ldrb	r3, [r7, #27]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	7eba      	ldrb	r2, [r7, #26]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <vl53lx_histo_merge+0xa8>
			prev_pos = pdev->bin_rec_pos - 1;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e004      	b.n	8003ef2 <vl53lx_histo_merge+0xb2>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003ef2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003ef6:	7efb      	ldrb	r3, [r7, #27]
 8003ef8:	69f8      	ldr	r0, [r7, #28]
 8003efa:	461a      	mov	r2, r3
 8003efc:	0052      	lsls	r2, r2, #1
 8003efe:	441a      	add	r2, r3
 8003f00:	0153      	lsls	r3, r2, #5
 8003f02:	461a      	mov	r2, r3
 8003f04:	460b      	mov	r3, r1
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	440b      	add	r3, r1
 8003f0a:	019b      	lsls	r3, r3, #6
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4403      	add	r3, r0
 8003f10:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8003f14:	3318      	adds	r3, #24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dd0c      	ble.n	8003f36 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8003f1c:	7e79      	ldrb	r1, [r7, #25]
 8003f1e:	7efa      	ldrb	r2, [r7, #27]
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	6839      	ldr	r1, [r7, #0]
 8003f30:	69f8      	ldr	r0, [r7, #28]
 8003f32:	f7ff fef4 	bl	8003d1e <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	db23      	blt.n	8003f86 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8003f44:	3308      	adds	r3, #8
 8003f46:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f011 ffa5 	bl	8015e9c <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

			recom_been_reset = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003f64:	7efb      	ldrb	r3, [r7, #27]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	2206      	movs	r2, #6
 8003f72:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
 8003f76:	e034      	b.n	8003fe2 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	2207      	movs	r2, #7
 8003f80:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
 8003f84:	e02d      	b.n	8003fe2 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8003f90:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003f98:	e01e      	b.n	8003fd8 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003f9a:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003f9e:	7e39      	ldrb	r1, [r7, #24]
 8003fa0:	7efb      	ldrb	r3, [r7, #27]
 8003fa2:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	3006      	adds	r0, #6
 8003faa:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003fae:	69f8      	ldr	r0, [r7, #28]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	0052      	lsls	r2, r2, #1
 8003fb4:	441a      	add	r2, r3
 8003fb6:	00d3      	lsls	r3, r2, #3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	460b      	mov	r3, r1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	440b      	add	r3, r1
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	4413      	add	r3, r2
 8003fc4:	442b      	add	r3, r5
 8003fc6:	f203 7312 	addw	r3, r3, #1810	; 0x712
 8003fca:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003fce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003fd8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003fdc:	7ebb      	ldrb	r3, [r7, #26]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3db      	bcc.n	8003f9a <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8003fec:	461a      	mov	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d109      	bne.n	800400a <vl53lx_histo_merge+0x1ca>
 8003ff6:	7efb      	ldrb	r3, [r7, #27]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
 8004008:	e00e      	b.n	8004028 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 800400a:	7efb      	ldrb	r3, [r7, #27]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10b      	bne.n	8004028 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 800401a:	3301      	adds	r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	d102      	bne.n	8004036 <vl53lx_histo_merge+0x1f6>
 8004030:	7efb      	ldrb	r3, [r7, #27]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d069      	beq.n	800410a <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d162      	bne.n	800410a <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8004044:	2300      	movs	r3, #0
 8004046:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004048:	e008      	b.n	800405c <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 800404a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3206      	adds	r2, #6
 8004050:	2100      	movs	r1, #0
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8004056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004058:	3301      	adds	r3, #1
 800405a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800405c:	7ebb      	ldrb	r3, [r7, #26]
 800405e:	b29b      	uxth	r3, r3
 8004060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004062:	429a      	cmp	r2, r3
 8004064:	d3f1      	bcc.n	800404a <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8004066:	2300      	movs	r3, #0
 8004068:	84fb      	strh	r3, [r7, #38]	; 0x26
 800406a:	e02f      	b.n	80040cc <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004072:	e023      	b.n	80040bc <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8004074:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3206      	adds	r2, #6
 800407a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800407e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004082:	7efb      	ldrb	r3, [r7, #27]
 8004084:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8004086:	69fc      	ldr	r4, [r7, #28]
 8004088:	461a      	mov	r2, r3
 800408a:	0052      	lsls	r2, r2, #1
 800408c:	441a      	add	r2, r3
 800408e:	00d3      	lsls	r3, r2, #3
 8004090:	461a      	mov	r2, r3
 8004092:	460b      	mov	r3, r1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	440b      	add	r3, r1
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	4413      	add	r3, r2
 800409c:	442b      	add	r3, r5
 800409e:	f203 7312 	addw	r3, r3, #1810	; 0x712
 80040a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80040a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040a8:	18c1      	adds	r1, r0, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	3206      	adds	r2, #6
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80040b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80040b6:	3301      	adds	r3, #1
 80040b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040bc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	dbd6      	blt.n	8004074 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 80040c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040c8:	3301      	adds	r3, #1
 80040ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040cc:	7ebb      	ldrb	r3, [r7, #26]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3ca      	bcc.n	800406c <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80040d6:	e018      	b.n	800410a <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040de:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
		if (pdev->pos_before_next_recom == 255)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f6:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 80040fa:	2bff      	cmp	r3, #255	; 0xff
 80040fc:	d105      	bne.n	800410a <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
}
 800410a:	bf00      	nop
 800410c:	3728      	adds	r7, #40	; 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004114 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0c6      	sub	sp, #280	; 0x118
 8004118:	af00      	add	r7, sp, #0
 800411a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800411e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004122:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004124:	2300      	movs	r3, #0
 8004126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004130:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8004138:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800413c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004140:	2200      	movs	r2, #0
 8004142:	2185      	movs	r1, #133	; 0x85
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	f7fe fa89 	bl	800265c <VL53LX_WrByte>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8004150:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8004158:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800415c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f005 f99d 	bl	80094a0 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8004166:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800416a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800416e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004172:	f248 018c 	movw	r1, #32908	; 0x808c
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	f002 faa6 	bl	80066c8 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 800417c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004180:	2b03      	cmp	r3, #3
 8004182:	d81b      	bhi.n	80041bc <VL53LX_load_patch+0xa8>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <VL53LX_load_patch+0x78>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041b5 	.word	0x080041b5
	case 0:
		patch_power = 0x00;
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041a2:	e00e      	b.n	80041c2 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80041a4:	2310      	movs	r3, #16
 80041a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041aa:	e00a      	b.n	80041c2 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80041ac:	2320      	movs	r3, #32
 80041ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041b2:	e006      	b.n	80041c2 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041ba:	e002      	b.n	80041c2 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80041c2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d134      	bne.n	8004234 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80041ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041d2:	2229      	movs	r2, #41	; 0x29
 80041d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80041d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041de:	22c9      	movs	r2, #201	; 0xc9
 80041e0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80041e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041ea:	220e      	movs	r2, #14
 80041ec:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80041ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80041fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004202:	2228      	movs	r2, #40	; 0x28
 8004204:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004206:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800420a:	b2da      	uxtb	r2, r3
 800420c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004210:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004214:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8004216:	f107 020c 	add.w	r2, r7, #12
 800421a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800421e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004222:	2306      	movs	r3, #6
 8004224:	f240 4176 	movw	r1, #1142	; 0x476
 8004228:	6800      	ldr	r0, [r0, #0]
 800422a:	f7fe f9ab 	bl	8002584 <VL53LX_WriteMulti>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004234:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004238:	2b00      	cmp	r3, #0
 800423a:	d132      	bne.n	80042a2 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 800423c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004244:	2203      	movs	r2, #3
 8004246:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004248:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800424c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004250:	226d      	movs	r2, #109	; 0x6d
 8004252:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004254:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004258:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800425c:	2203      	movs	r2, #3
 800425e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004260:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004264:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004268:	226f      	movs	r2, #111	; 0x6f
 800426a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800426c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004270:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004274:	2207      	movs	r2, #7
 8004276:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8004278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800427c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004280:	2229      	movs	r2, #41	; 0x29
 8004282:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8004284:	f107 020c 	add.w	r2, r7, #12
 8004288:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800428c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004290:	2306      	movs	r3, #6
 8004292:	f240 4196 	movw	r1, #1174	; 0x496
 8004296:	6800      	ldr	r0, [r0, #0]
 8004298:	f7fe f974 	bl	8002584 <VL53LX_WriteMulti>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80042a2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11a      	bne.n	80042e0 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80042aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80042b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042be:	2207      	movs	r2, #7
 80042c0:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80042c2:	f107 020c 	add.w	r2, r7, #12
 80042c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ca:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80042ce:	2302      	movs	r3, #2
 80042d0:	f240 4172 	movw	r1, #1138	; 0x472
 80042d4:	6800      	ldr	r0, [r0, #0]
 80042d6:	f7fe f955 	bl	8002584 <VL53LX_WriteMulti>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80042e0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11a      	bne.n	800431e <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80042e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80042f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042fc:	2207      	movs	r2, #7
 80042fe:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8004300:	f107 020c 	add.w	r2, r7, #12
 8004304:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004308:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800430c:	2302      	movs	r3, #2
 800430e:	f240 4174 	movw	r1, #1140	; 0x474
 8004312:	6800      	ldr	r0, [r0, #0]
 8004314:	f7fe f936 	bl	8002584 <VL53LX_WriteMulti>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 800431e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8004326:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800432a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800432e:	2201      	movs	r2, #1
 8004330:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	f7fe f991 	bl	800265c <VL53LX_WrByte>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8004340:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8004348:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800434c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004350:	2201      	movs	r2, #1
 8004352:	2185      	movs	r1, #133	; 0x85
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f7fe f981 	bl	800265c <VL53LX_WrByte>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004360:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004364:	4618      	mov	r0, r3
 8004366:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop

08004370 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af04      	add	r7, sp, #16
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800437c:	2300      	movs	r3, #0
 800437e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800438a:	3320      	adds	r3, #32
 800438c:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8004392:	2162      	movs	r1, #98	; 0x62
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f004 f95c 	bl	8008652 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2204      	movs	r2, #4
 800439e:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2210      	movs	r2, #16
 80043aa:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80043b6:	2300      	movs	r3, #0
 80043b8:	75bb      	strb	r3, [r7, #22]
 80043ba:	e01b      	b.n	80043f4 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80043bc:	7dba      	ldrb	r2, [r7, #22]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	3308      	adds	r3, #8
 80043d0:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80043ee:	7dbb      	ldrb	r3, [r7, #22]
 80043f0:	3301      	adds	r3, #1
 80043f2:	75bb      	strb	r3, [r7, #22]
 80043f4:	7dbb      	ldrb	r3, [r7, #22]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d9e0      	bls.n	80043bc <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2210      	movs	r2, #16
 80043fe:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2210      	movs	r2, #16
 800440e:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800441a:	2300      	movs	r3, #0
 800441c:	75bb      	strb	r3, [r7, #22]
 800441e:	e039      	b.n	8004494 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8004420:	7dba      	ldrb	r2, [r7, #22]
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8004436:	7dba      	ldrb	r2, [r7, #22]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 800444c:	7dba      	ldrb	r2, [r7, #22]
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8004462:	7dba      	ldrb	r2, [r7, #22]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8004478:	7dba      	ldrb	r2, [r7, #22]
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800448e:	7dbb      	ldrb	r3, [r7, #22]
 8004490:	3301      	adds	r3, #1
 8004492:	75bb      	strb	r3, [r7, #22]
 8004494:	7dbb      	ldrb	r3, [r7, #22]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d9c2      	bls.n	8004420 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	221e      	movs	r2, #30
 80044a4:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2200      	movs	r2, #0
 80044aa:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2200      	movs	r2, #0
 80044b0:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2201      	movs	r2, #1
 80044b6:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2201      	movs	r2, #1
 80044bc:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2201      	movs	r2, #1
 80044c2:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044ca:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044d2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80044da:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2264      	movs	r2, #100	; 0x64
 80044e0:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80044e8:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f8:	2203      	movs	r2, #3
 80044fa:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
	pdev->offset_results.active_results = 0;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004504:	2200      	movs	r2, #0
 8004506:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b



	pdev->gain_cal.standard_ranging_gain_factor =
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f240 72db 	movw	r2, #2011	; 0x7db
 8004510:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800451a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f004 f87c 	bl	800861c <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 800452a:	3308      	adds	r3, #8
 800452c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f011 fcb2 	bl	8015e9c <memset>
	pdev->bin_rec_pos = 0;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
	pdev->pos_before_next_recom = 0;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <VL53LX_data_init+0x1f8>
 8004556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8b8 	bl	80046d4 <VL53LX_read_p2p_data>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8004568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004576:	4618      	mov	r0, r3
 8004578:	f003 f81c 	bl	80075b4 <VL53LX_init_refspadchar_config_struct>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8004580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800458e:	4618      	mov	r0, r3
 8004590:	f003 f834 	bl	80075fc <VL53LX_init_ssc_config_struct>
 8004594:	4603      	mov	r3, r0
 8004596:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f003 f845 	bl	800763e <VL53LX_init_xtalk_config_struct>
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80045b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 f8ac 	bl	8007724 <VL53LX_init_xtalk_extract_config_struct>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80045d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80045de:	4618      	mov	r0, r3
 80045e0:	f003 f8cf 	bl	8007782 <VL53LX_init_offset_cal_config_struct>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80045e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80045f6:	4618      	mov	r0, r3
 80045f8:	f003 f8ea 	bl	80077d0 <VL53LX_init_zone_cal_config_struct>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f893 22d4 	ldrb.w	r2, [r3, #724]	; 0x2d4
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f003 f8fe 	bl	8007818 <VL53LX_init_hist_post_process_config_struct>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8004620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800462e:	4618      	mov	r0, r3
 8004630:	f003 fafd 	bl	8007c2e <VL53LX_init_hist_gen3_dmax_config_struct>
 8004634:	4603      	mov	r3, r0
 8004636:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <VL53LX_data_init+0x2e0>
		status = VL53LX_init_tuning_parm_storage_struct(
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004646:	4618      	mov	r0, r3
 8004648:	f003 f955 	bl	80078f6 <VL53LX_init_tuning_parm_storage_struct>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8004650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d116      	bne.n	8004686 <VL53LX_data_init+0x316>
		status = VL53LX_set_preset_mode(
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	7858      	ldrb	r0, [r3, #1]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	8b1c      	ldrh	r4, [r3, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	689d      	ldr	r5, [r3, #8]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	6912      	ldr	r2, [r2, #16]
 800466c:	6939      	ldr	r1, [r7, #16]
 800466e:	6949      	ldr	r1, [r1, #20]
 8004670:	9102      	str	r1, [sp, #8]
 8004672:	9201      	str	r2, [sp, #4]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	462b      	mov	r3, r5
 8004678:	4622      	mov	r2, r4
 800467a:	4601      	mov	r1, r0
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fad5 	bl	8004c2c <VL53LX_set_preset_mode>
 8004682:	4603      	mov	r3, r0
 8004684:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800468c:	461a      	mov	r2, r3
 800468e:	2118      	movs	r1, #24
 8004690:	2000      	movs	r0, #0
 8004692:	f008 fa50 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 800469c:	461a      	mov	r2, r3
 800469e:	2118      	movs	r1, #24
 80046a0:	2000      	movs	r0, #0
 80046a2:	f008 fa48 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f203 5354 	addw	r3, r3, #1364	; 0x554
 80046ac:	461a      	mov	r2, r3
 80046ae:	210c      	movs	r1, #12
 80046b0:	2000      	movs	r0, #0
 80046b2:	f004 fd36 	bl	8009122 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f007 fc73 	bl	800bfa2 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f007 fb79 	bl	800bdb4 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f007 fc97 	bl	800bff6 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80046c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}

080046d4 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b091      	sub	sp, #68	; 0x44
 80046d8:	af04      	add	r7, sp, #16
 80046da:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	3348      	adds	r3, #72	; 0x48
 80046f2:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	339c      	adds	r3, #156	; 0x9c
 80046f8:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80046fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <VL53LX_read_p2p_data+0x42>
		status = VL53LX_get_static_nvm_managed(
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f00b fd92 	bl	8010234 <VL53LX_get_static_nvm_managed>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8004716:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <VL53LX_read_p2p_data+0x5c>
		status = VL53LX_get_customer_nvm_managed(
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	3348      	adds	r3, #72	; 0x48
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f00b fec3 	bl	80104b0 <VL53LX_get_customer_nvm_managed>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8004730:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004734:	2b00      	cmp	r3, #0
 8004736:	d117      	bne.n	8004768 <VL53LX_read_p2p_data+0x94>

		status = VL53LX_get_nvm_copy_data(
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f00c fd98 	bl	8011276 <VL53LX_get_nvm_copy_data>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 800474c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <VL53LX_read_p2p_data+0x94>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	f203 32ca 	addw	r2, r3, #970	; 0x3ca
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f004 fa68 	bl	8008c38 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8004768:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10e      	bne.n	800478e <VL53LX_read_p2p_data+0xba>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	895b      	ldrh	r3, [r3, #10]
 8004774:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 800478e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <VL53LX_read_p2p_data+0xd4>
		status =
			VL53LX_read_nvm_optical_centre(
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	33c0      	adds	r3, #192	; 0xc0
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f00b fbfd 	bl	800ff9c <VL53LX_read_nvm_optical_centre>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80047a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <VL53LX_read_p2p_data+0xee>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	3360      	adds	r3, #96	; 0x60
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f00b fc13 	bl	800ffe2 <VL53LX_read_nvm_cal_peak_rate_map>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 80047c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d12d      	bne.n	8004826 <VL53LX_read_p2p_data+0x152>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	339c      	adds	r3, #156	; 0x9c
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f00b fc2c 	bl	801002e <VL53LX_read_nvm_additional_offset_cal_data>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	889b      	ldrh	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d120      	bne.n	8004826 <VL53LX_read_p2p_data+0x152>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11c      	bne.n	8004826 <VL53LX_read_p2p_data+0x152>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80047f8:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	f893 03fa 	ldrb.w	r0, [r3, #1018]	; 0x3fa
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f893 43fb 	ldrb.w	r4, [r3, #1019]	; 0x3fb
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	3102      	adds	r1, #2
 8004812:	9103      	str	r1, [sp, #12]
 8004814:	9202      	str	r2, [sp, #8]
 8004816:	2238      	movs	r2, #56	; 0x38
 8004818:	9201      	str	r2, [sp, #4]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	23ff      	movs	r3, #255	; 0xff
 800481e:	22c7      	movs	r2, #199	; 0xc7
 8004820:	4621      	mov	r1, r4
 8004822:	f006 fa0a 	bl	800ac3a <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8004826:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800482a:	2b00      	cmp	r3, #0
 800482c:	d12f      	bne.n	800488e <VL53LX_read_p2p_data+0x1ba>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 800482e:	f107 030c 	add.w	r3, r7, #12
 8004832:	461a      	mov	r2, r3
 8004834:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f00b fc1b 	bl	8010074 <VL53LX_read_nvm_fmt_range_results_data>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8004844:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004848:	2b00      	cmp	r3, #0
 800484a:	d120      	bne.n	800488e <VL53LX_read_p2p_data+0x1ba>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 800484c:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004854:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 800485c:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <VL53LX_read_p2p_data+0x1a8>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800487a:	e003      	b.n	8004884 <VL53LX_read_p2p_data+0x1b0>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	2214      	movs	r2, #20
 8004880:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800488a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 800488e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <VL53LX_read_p2p_data+0x1da>
		status =
			VL53LX_RdWord(
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800489c:	331c      	adds	r3, #28
 800489e:	461a      	mov	r2, r3
 80048a0:	21de      	movs	r1, #222	; 0xde
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd ff6a 	bl	800277c <VL53LX_RdWord>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b8:	d204      	bcs.n	80048c4 <VL53LX_read_p2p_data+0x1f0>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80048c0:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
	}



	if (status == VL53LX_ERROR_NONE)
 80048c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <VL53LX_read_p2p_data+0x20a>
		status =
			VL53LX_get_mode_mitigation_roi(
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	33bc      	adds	r3, #188	; 0xbc
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f916 	bl	8004b04 <VL53LX_get_mode_mitigation_roi>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d114      	bne.n	8004912 <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.y_centre == 0) {
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004912:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004916:	4618      	mov	r0, r3
 8004918:	3734      	adds	r7, #52	; 0x34
 800491a:	46bd      	mov	sp, r7
 800491c:	bd90      	pop	{r4, r7, pc}

0800491e <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004936:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <VL53LX_set_inter_measurement_period_ms+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800493e:	23f1      	movs	r3, #241	; 0xf1
 8004940:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8004942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10e      	bne.n	8004968 <VL53LX_set_inter_measurement_period_ms+0x4a>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 800495a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	}

	LOG_FUNCTION_END(status);

	return status;
 8004968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <VL53LX_set_timeouts_us+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004998:	23f1      	movs	r3, #241	; 0xf1
 800499a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 800499c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11b      	bne.n	80049dc <VL53LX_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f8b3 1316 	ldrh.w	r1, [r3, #790]	; 0x316
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	f502 725b 	add.w	r2, r2, #876	; 0x36c
 80049c8:	9201      	str	r2, [sp, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	460b      	mov	r3, r1
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	68b8      	ldr	r0, [r7, #8]
 80049d4:	f004 ff11 	bl	80097fa <VL53LX_calc_timeout_register_values>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80049dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <VL53LX_get_timeouts_us+0x2c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004a10:	23f1      	movs	r3, #241	; 0xf1
 8004a12:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8004a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d14a      	bne.n	8004ab2 <VL53LX_get_timeouts_us+0xca>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f8b3 2316 	ldrh.w	r2, [r3, #790]	; 0x316
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f893 3372 	ldrb.w	r3, [r3, #882]	; 0x372
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f004 fd5c 	bl	80094e8 <VL53LX_calc_macro_period_us>
 8004a30:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
			VL53LX_calc_timeout_us(
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f004 fe1b 	bl	8009676 <VL53LX_calc_timeout_us>
 8004a40:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f893 336c 	ldrb.w	r3, [r3, #876]	; 0x36c
		timeout_encoded =
 8004a4c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004a4e:	8a7b      	ldrh	r3, [r7, #18]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f893 336d 	ldrb.w	r3, [r3, #877]	; 0x36d
 8004a5a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004a5c:	4413      	add	r3, r2
 8004a5e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8004a60:	8a7b      	ldrh	r3, [r7, #18]
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f004 fe6d 	bl	8009744 <VL53LX_calc_decoded_timeout_us>
 8004a6a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
		timeout_encoded =
 8004a76:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004a78:	8a7b      	ldrh	r3, [r7, #18]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8004a84:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004a86:	4413      	add	r3, r2
 8004a88:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8004a8a:	8a7b      	ldrh	r3, [r7, #18]
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fe58 	bl	8009744 <VL53LX_calc_decoded_timeout_us>
 8004a94:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	7858      	ldrb	r0, [r3, #1]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	7819      	ldrb	r1, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f203 3393 	addw	r3, r3, #915	; 0x393
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f005 ff28 	bl	800a934 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	7898      	ldrb	r0, [r3, #2]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	78d9      	ldrb	r1, [r3, #3]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8004af2:	461a      	mov	r2, r3
 8004af4:	f005 ff5d 	bl	800a9b2 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 8004b28:	f107 020e 	add.w	r2, r7, #14
 8004b2c:	f107 010d 	add.w	r1, r7, #13
 8004b30:	4618      	mov	r0, r3
 8004b32:	f008 f8a9 	bl	800cc88 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004b36:	7bba      	ldrb	r2, [r7, #14]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004b3c:	7b7a      	ldrb	r2, [r7, #13]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f893 33fb 	ldrb.w	r3, [r3, #1019]	; 0x3fb
 8004b48:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004b84:	7afb      	ldrb	r3, [r7, #11]
 8004b86:	2b21      	cmp	r3, #33	; 0x21
 8004b88:	d030      	beq.n	8004bec <VL53LX_get_preset_mode_timing_cfg+0x80>
 8004b8a:	2b21      	cmp	r3, #33	; 0x21
 8004b8c:	dc43      	bgt.n	8004c16 <VL53LX_get_preset_mode_timing_cfg+0xaa>
 8004b8e:	2b1b      	cmp	r3, #27
 8004b90:	d002      	beq.n	8004b98 <VL53LX_get_preset_mode_timing_cfg+0x2c>
 8004b92:	2b1e      	cmp	r3, #30
 8004b94:	d015      	beq.n	8004bc2 <VL53LX_get_preset_mode_timing_cfg+0x56>
 8004b96:	e03e      	b.n	8004c16 <VL53LX_get_preset_mode_timing_cfg+0xaa>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	601a      	str	r2, [r3, #0]

	break;
 8004bc0:	e02c      	b.n	8004c1c <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	601a      	str	r2, [r3, #0]
	break;
 8004bea:	e017      	b.n	8004c1c <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	601a      	str	r2, [r3, #0]
	break;
 8004c14:	e002      	b.n	8004c1c <VL53LX_get_preset_mode_timing_cfg+0xb0>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004c16:	23fc      	movs	r3, #252	; 0xfc
 8004c18:	75fb      	strb	r3, [r7, #23]
		break;
 8004c1a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b096      	sub	sp, #88	; 0x58
 8004c30:	af06      	add	r7, sp, #24
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	72fb      	strb	r3, [r7, #11]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004c4e:	3320      	adds	r3, #32
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004c58:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8004c78:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8004c80:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004c88:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	33c2      	adds	r3, #194	; 0xc2
 8004c8e:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004c96:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	7afa      	ldrb	r2, [r7, #11]
 8004c9c:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ca8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cae:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8004cb0:	2103      	movs	r1, #3
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f003 fccd 	bl	8008652 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8004cb8:	7afb      	ldrb	r3, [r7, #11]
 8004cba:	2b21      	cmp	r3, #33	; 0x21
 8004cbc:	d02e      	beq.n	8004d1c <VL53LX_set_preset_mode+0xf0>
 8004cbe:	2b21      	cmp	r3, #33	; 0x21
 8004cc0:	dc40      	bgt.n	8004d44 <VL53LX_set_preset_mode+0x118>
 8004cc2:	2b1b      	cmp	r3, #27
 8004cc4:	d002      	beq.n	8004ccc <VL53LX_set_preset_mode+0xa0>
 8004cc6:	2b1e      	cmp	r3, #30
 8004cc8:	d014      	beq.n	8004cf4 <VL53LX_set_preset_mode+0xc8>
 8004cca:	e03b      	b.n	8004d44 <VL53LX_set_preset_mode+0x118>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ce8:	f003 f9e5 	bl	80080b6 <VL53LX_preset_mode_histogram_long_range>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004cf2:	e02b      	b.n	8004d4c <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	9303      	str	r3, [sp, #12]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d10:	f003 fa6f 	bl	80081f2 <VL53LX_preset_mode_histogram_medium_range>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004d1a:	e017      	b.n	8004d4c <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	9303      	str	r3, [sp, #12]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	9302      	str	r3, [sp, #8]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d38:	f003 faf9 	bl	800832e <VL53LX_preset_mode_histogram_short_range>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004d42:	e003      	b.n	8004d4c <VL53LX_set_preset_mode+0x120>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004d44:	23fc      	movs	r3, #252	; 0xfc
 8004d46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8004d4a:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8004d4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <VL53LX_set_preset_mode+0x134>

		pstatic->dss_config__target_total_rate_mcps =
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	893a      	ldrh	r2, [r7, #8]
 8004d58:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	893a      	ldrh	r2, [r7, #8]
 8004d5e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8004d60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d108      	bne.n	8004d7a <VL53LX_set_preset_mode+0x14e>
		status =
			VL53LX_set_timeouts_us(
 8004d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff fe02 	bl	8004978 <VL53LX_set_timeouts_us>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8004d7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <VL53LX_set_preset_mode+0x164>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8004d82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fdca 	bl	800491e <VL53LX_set_inter_measurement_period_ms>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004d96:	3301      	adds	r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f004 f868 	bl	8008e78 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8004da8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3740      	adds	r7, #64	; 0x40
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b0d2      	sub	sp, #328	; 0x148
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004dbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004dc2:	6018      	str	r0, [r3, #0]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004dcc:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004dd8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8004ddc:	460a      	mov	r2, r1
 8004dde:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004de6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004dea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 8004df4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004df8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004e02:	3320      	adds	r3, #32
 8004e04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8004e08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e0c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004e10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004e14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e18:	3348      	adds	r3, #72	; 0x48
 8004e1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004e1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e22:	f203 3336 	addw	r3, r3, #822	; 0x336
 8004e26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004e2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004e36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e3a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8004e3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004e42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e46:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8004e4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004e4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e52:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004e56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004e5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e5e:	332c      	adds	r3, #44	; 0x2c
 8004e60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004e64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e68:	3348      	adds	r3, #72	; 0x48
 8004e6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8004e8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e92:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004e96:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004e9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004eac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004eb0:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8004eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004ebe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ec2:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8004ec4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ec8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8004ecc:	3336      	adds	r3, #54	; 0x36
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004ed4:	4413      	add	r3, r2
 8004ed6:	1d9a      	adds	r2, r3, #6
 8004ed8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004edc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	f7ff fdeb 	bl	8004abe <VL53LX_set_user_zone>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8004eee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ef2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8004efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004efe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f02:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004f10:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004f14:	4413      	add	r3, r2
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f1c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004f20:	4611      	mov	r1, r2
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	f001 fb6c 	bl	8006600 <VL53LX_set_zone_dss_config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8004f2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f32:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8004f3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f42:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d107      	bne.n	8004f5a <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004f4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f4e:	f8b3 22dc 	ldrh.w	r2, [r3, #732]	; 0x2dc
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8004f52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f56:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8004f5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f62:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	d106      	bne.n	8004f78 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004f6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004f78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f80:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d139      	bne.n	8004ffc <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004f88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d131      	bne.n	8004ffc <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004f98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f9c:	f893 2358 	ldrb.w	r2, [r3, #856]	; 0x358
		pdev->low_power_auto_data.saved_interrupt_config =
 8004fa0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa8:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004fac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004fb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fba:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004fbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8004fc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004fce:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8004fd0:	b21a      	sxth	r2, r3
 8004fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fd6:	825a      	strh	r2, [r3, #18]
 8004fd8:	e003      	b.n	8004fe2 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fde:	2200      	movs	r2, #0
 8004fe0:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004fe2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004fe6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d805      	bhi.n	8004ffc <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004ff0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004ff4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004ffc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005004:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8005008:	2b01      	cmp	r3, #1
 800500a:	d117      	bne.n	800503c <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800500c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005018:	2b01      	cmp	r3, #1
 800501a:	d10f      	bne.n	800503c <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800501c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005024:	f893 242b 	ldrb.w	r2, [r3, #1067]	; 0x42b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005028:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800502c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8005030:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005034:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005038:	2206      	movs	r2, #6
 800503a:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 800503c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8005044:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005048:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f005 ff5e 	bl	800af0e <VL53LX_save_cfg_data>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005058:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800505c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	3b01      	subs	r3, #1
 8005064:	2b05      	cmp	r3, #5
 8005066:	d827      	bhi.n	80050b8 <VL53LX_init_and_start_range+0x304>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <VL53LX_init_and_start_range+0x2bc>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050a1 	.word	0x080050a1
 800507c:	08005099 	.word	0x08005099
 8005080:	08005091 	.word	0x08005091
 8005084:	08005089 	.word	0x08005089
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8005088:	2301      	movs	r3, #1
 800508a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800508e:	e017      	b.n	80050c0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005090:	230d      	movs	r3, #13
 8005092:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005096:	e013      	b.n	80050c0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8005098:	2324      	movs	r3, #36	; 0x24
 800509a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800509e:	e00f      	b.n	80050c0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 80050a0:	2344      	movs	r3, #68	; 0x44
 80050a2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80050a6:	e00b      	b.n	80050c0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 80050a8:	235a      	movs	r3, #90	; 0x5a
 80050aa:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80050ae:	e007      	b.n	80050c0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 80050b0:	2371      	movs	r3, #113	; 0x71
 80050b2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80050b6:	e003      	b.n	80050c0 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 80050b8:	2383      	movs	r3, #131	; 0x83
 80050ba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80050be:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80050c0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80050c4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 80050c8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80050da:	e00b      	b.n	80050f4 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 80050dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80050ea:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80050ee:	3301      	adds	r3, #1
 80050f0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80050f4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80050f8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d3ed      	bcc.n	80050dc <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8005100:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005104:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d917      	bls.n	800513e <VL53LX_init_and_start_range+0x38a>
 800510e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005112:	2b00      	cmp	r3, #0
 8005114:	d113      	bne.n	800513e <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005116:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800511a:	f1c3 0301 	rsb	r3, r3, #1
 800511e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005122:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8005126:	f107 020c 	add.w	r2, r7, #12
 800512a:	4413      	add	r3, r2
 800512c:	461a      	mov	r2, r3
 800512e:	210b      	movs	r1, #11
 8005130:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005134:	f00a ffc9 	bl	80100ca <VL53LX_i2c_encode_static_nvm_managed>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800513e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005142:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d917      	bls.n	800517c <VL53LX_init_and_start_range+0x3c8>
 800514c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005150:	2b00      	cmp	r3, #0
 8005152:	d113      	bne.n	800517c <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005154:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005158:	f1c3 030d 	rsb	r3, r3, #13
 800515c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005160:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8005164:	f107 020c 	add.w	r2, r7, #12
 8005168:	4413      	add	r3, r2
 800516a:	461a      	mov	r2, r3
 800516c:	2117      	movs	r1, #23
 800516e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005172:	f00b f886 	bl	8010282 <VL53LX_i2c_encode_customer_nvm_managed>
 8005176:	4603      	mov	r3, r0
 8005178:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800517c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005180:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b03      	cmp	r3, #3
 8005188:	d917      	bls.n	80051ba <VL53LX_init_and_start_range+0x406>
 800518a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800518e:	2b00      	cmp	r3, #0
 8005190:	d113      	bne.n	80051ba <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005192:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005196:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800519a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800519e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 80051a2:	f107 020c 	add.w	r2, r7, #12
 80051a6:	4413      	add	r3, r2
 80051a8:	461a      	mov	r2, r3
 80051aa:	2120      	movs	r1, #32
 80051ac:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80051b0:	f00b f9c9 	bl	8010546 <VL53LX_i2c_encode_static_config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80051ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051be:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d917      	bls.n	80051f8 <VL53LX_init_and_start_range+0x444>
 80051c8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d113      	bne.n	80051f8 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80051d0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80051d4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80051d8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80051dc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 80051e0:	f107 020c 	add.w	r2, r7, #12
 80051e4:	4413      	add	r3, r2
 80051e6:	461a      	mov	r2, r3
 80051e8:	2116      	movs	r1, #22
 80051ea:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80051ee:	f00b fa8d 	bl	801070c <VL53LX_i2c_encode_general_config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80051f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051fc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d917      	bls.n	8005236 <VL53LX_init_and_start_range+0x482>
 8005206:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800520a:	2b00      	cmp	r3, #0
 800520c:	d113      	bne.n	8005236 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800520e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005212:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005216:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800521a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 800521e:	f107 020c 	add.w	r2, r7, #12
 8005222:	4413      	add	r3, r2
 8005224:	461a      	mov	r2, r3
 8005226:	2117      	movs	r1, #23
 8005228:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800522c:	f00b faf2 	bl	8010814 <VL53LX_i2c_encode_timing_config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005236:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800523a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d036      	beq.n	80052b2 <VL53LX_init_and_start_range+0x4fe>
 8005244:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005248:	2b00      	cmp	r3, #0
 800524a:	d132      	bne.n	80052b2 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800524c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005250:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005254:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005258:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800525c:	791b      	ldrb	r3, [r3, #4]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	b2da      	uxtb	r2, r3
 8005272:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005276:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005288:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005294:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005296:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 800529a:	f107 020c 	add.w	r2, r7, #12
 800529e:	4413      	add	r3, r2
 80052a0:	461a      	mov	r2, r3
 80052a2:	2112      	movs	r1, #18
 80052a4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80052a8:	f00b fb36 	bl	8010918 <VL53LX_i2c_encode_dynamic_config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80052b2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d113      	bne.n	80052e2 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 80052ba:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80052be:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80052c2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80052c6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 80052ca:	f107 020c 	add.w	r2, r7, #12
 80052ce:	4413      	add	r3, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	2105      	movs	r1, #5
 80052d4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80052d8:	f00b fba3 	bl	8010a22 <VL53LX_i2c_encode_system_control>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 80052e2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 80052ea:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80052ee:	f107 020c 	add.w	r2, r7, #12
 80052f2:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 80052f6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80052fa:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 80052fe:	6800      	ldr	r0, [r0, #0]
 8005300:	f7fd f940 	bl	8002584 <VL53LX_WriteMulti>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 800530a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8005312:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005316:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	f003 f9c8 	bl	80086b0 <VL53LX_update_ll_driver_rd_state>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 8005326:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 800532e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005332:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	f003 fb58 	bl	80089ec <VL53LX_update_ll_driver_cfg_state>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005342:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005346:	4618      	mov	r0, r3
 8005348:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b0c8      	sub	sp, #288	; 0x120
 8005354:	af00      	add	r7, sp, #0
 8005356:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800535a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800535e:	6018      	str	r0, [r3, #0]
 8005360:	460a      	mov	r2, r1
 8005362:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005366:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800536a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005372:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005376:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8005380:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005384:	f203 339e 	addw	r3, r3, #926	; 0x39e
 8005388:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 800538c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005390:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005394:	3310      	adds	r3, #16
 8005396:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800539a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800539e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80053a2:	3314      	adds	r3, #20
 80053a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80053a8:	2388      	movs	r3, #136	; 0x88
 80053aa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80053ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80053be:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d008      	beq.n	80053da <VL53LX_get_measurement_results+0x8a>
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d10d      	bne.n	80053e8 <VL53LX_get_measurement_results+0x98>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80053cc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80053d0:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80053d4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80053d8:	e00a      	b.n	80053f0 <VL53LX_get_measurement_results+0xa0>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80053da:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80053de:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80053e2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80053e6:	e003      	b.n	80053f0 <VL53LX_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 80053e8:	232c      	movs	r3, #44	; 0x2c
 80053ea:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80053ee:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80053f0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10f      	bne.n	8005418 <VL53LX_get_measurement_results+0xc8>
		status =
			VL53LX_ReadMulti(
 80053f8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80053fc:	f107 0208 	add.w	r2, r7, #8
 8005400:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005404:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005408:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f7fd f8ef 	bl	80025f0 <VL53LX_ReadMulti>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8005418:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800541c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d917      	bls.n	8005456 <VL53LX_get_measurement_results+0x106>
 8005426:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800542a:	2b00      	cmp	r3, #0
 800542c:	d113      	bne.n	8005456 <VL53LX_get_measurement_results+0x106>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800542e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005432:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005436:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800543a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 800543e:	f107 0208 	add.w	r2, r7, #8
 8005442:	4413      	add	r3, r2
 8005444:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005448:	4619      	mov	r1, r3
 800544a:	2038      	movs	r0, #56	; 0x38
 800544c:	f00b fc7b 	bl	8010d46 <VL53LX_i2c_decode_debug_results>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800545a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <VL53LX_get_measurement_results+0x144>
 8005464:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005468:	2b00      	cmp	r3, #0
 800546a:	d113      	bne.n	8005494 <VL53LX_get_measurement_results+0x144>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800546c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005470:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005474:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005478:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 800547c:	f107 0208 	add.w	r2, r7, #8
 8005480:	4413      	add	r3, r2
 8005482:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005486:	4619      	mov	r1, r3
 8005488:	2021      	movs	r0, #33	; 0x21
 800548a:	f00b fbfb 	bl	8010c84 <VL53LX_i2c_decode_core_results>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8005494:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <VL53LX_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80054a2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	4413      	add	r3, r2
 80054ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80054b0:	4619      	mov	r1, r3
 80054b2:	202c      	movs	r0, #44	; 0x2c
 80054b4:	f00b faf0 	bl	8010a98 <VL53LX_i2c_decode_system_results>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80054be:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80054cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d0:	b0a0      	sub	sp, #128	; 0x80
 80054d2:	af06      	add	r7, sp, #24
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	460b      	mov	r3, r1
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80054ec:	3320      	adds	r3, #32
 80054ee:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80054f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f2:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80054f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80054fa:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80054fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054fe:	332c      	adds	r3, #44	; 0x2c
 8005500:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8005502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005504:	33c2      	adds	r3, #194	; 0xc2
 8005506:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8005508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550a:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800550e:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005518:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 800551e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005520:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8005526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005528:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800552c:	3308      	adds	r3, #8
 800552e:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005532:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8005538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800553a:	3348      	adds	r3, #72	; 0x48
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 800553e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005540:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8005546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005548:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800554c:	3314      	adds	r3, #20
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8005550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005552:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8292 	beq.w	8005a84 <VL53LX_get_device_results+0x5b8>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8005560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005562:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fbcd 	bl	8005d08 <VL53LX_get_histogram_bin_data>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8005574:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005578:	2b00      	cmp	r3, #0
 800557a:	d118      	bne.n	80055ae <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8005580:	2b00      	cmp	r3, #0
 8005582:	d114      	bne.n	80055ae <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8005584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005586:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800558a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 800558e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005596:	4413      	add	r3, r2
 8005598:	1d1a      	adds	r2, r3, #4
 800559a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800559c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f004 f9a2 	bl	80098ec <VL53LX_hist_copy_and_scale_ambient_info>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80055ae:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 8208 	bne.w	80059c8 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80055b8:	f107 0313 	add.w	r3, r7, #19
 80055bc:	4619      	mov	r1, r3
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f006 fe39 	bl	800c236 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80055d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d107      	bne.n	80055f0 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80055e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	3202      	adds	r2, #2
 80055e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80055ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ee:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80055f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f2:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80055fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f004 f876 	bl	80096f8 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 800560c:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 800560e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005610:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005614:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800562a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562c:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005632:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005636:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800563a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563c:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 800563e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005646:	f8b3 2336 	ldrh.w	r2, [r3, #822]	; 0x336
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800564a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800564c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005652:	f893 2369 	ldrb.w	r2, [r3, #873]	; 0x369
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8005656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005658:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005676:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8005678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567a:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8005680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005682:	f203 32ca 	addw	r2, r3, #970	; 0x3ca
 8005686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005688:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f003 fad2 	bl	8008c38 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8005694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005696:	795b      	ldrb	r3, [r3, #5]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d002      	beq.n	80056a2 <VL53LX_get_device_results+0x1d6>
 800569c:	2b03      	cmp	r3, #3
 800569e:	d02e      	beq.n	80056fe <VL53LX_get_device_results+0x232>
 80056a0:	e03d      	b.n	800571e <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80056a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a4:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 80056a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80056b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ba:	f893 e3fa 	ldrb.w	lr, [r3, #1018]	; 0x3fa
 80056be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c0:	f893 83fb 	ldrb.w	r8, [r3, #1019]	; 0x3fb
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80056ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056cc:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80056d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80056d2:	319c      	adds	r1, #156	; 0x9c
 80056d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80056d6:	f500 7004 	add.w	r0, r0, #528	; 0x210
 80056da:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80056de:	b2a4      	uxth	r4, r4
 80056e0:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80056e2:	351c      	adds	r5, #28
 80056e4:	9505      	str	r5, [sp, #20]
 80056e6:	9404      	str	r4, [sp, #16]
 80056e8:	9003      	str	r0, [sp, #12]
 80056ea:	9102      	str	r1, [sp, #8]
 80056ec:	9201      	str	r2, [sp, #4]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	4643      	mov	r3, r8
 80056f2:	4672      	mov	r2, lr
 80056f4:	4661      	mov	r1, ip
 80056f6:	4630      	mov	r0, r6
 80056f8:	f005 f86c 	bl	800a7d4 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80056fc:	e013      	b.n	8005726 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80056fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005700:	331c      	adds	r3, #28
 8005702:	4619      	mov	r1, r3
 8005704:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005706:	f7fe faa3 	bl	8003c50 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800570a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005710:	b29b      	uxth	r3, r3
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	b29b      	uxth	r3, r3
 8005716:	b21a      	sxth	r2, r3
 8005718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571a:	839a      	strh	r2, [r3, #28]
		break;
 800571c:	e003      	b.n	8005726 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 800571e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005720:	2200      	movs	r2, #0
 8005722:	839a      	strh	r2, [r3, #28]
		break;
 8005724:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8005726:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 814e 	bne.w	80059cc <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800573c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800573e:	f503 7204 	add.w	r2, r3, #528	; 0x210
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005744:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
		VL53LX_calc_max_effective_spads(
 8005748:	b29c      	uxth	r4, r3
 800574a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800574c:	f203 23a2 	addw	r3, r3, #674	; 0x2a2
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	4623      	mov	r3, r4
 8005754:	f005 f9e3 	bl	800ab1e <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8005758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575a:	799b      	ldrb	r3, [r3, #6]
 800575c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575e:	4619      	mov	r1, r3
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 ff88 	bl	8006676 <VL53LX_get_dmax_calibration_data>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 800576c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 812d 	bne.w	80059d0 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8005776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005778:	f503 7523 	add.w	r5, r3, #652	; 0x28c
 800577c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577e:	f503 7613 	add.w	r6, r3, #588	; 0x24c
 8005782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005784:	f503 717f 	add.w	r1, r3, #1020	; 0x3fc
 8005788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800578a:	f203 5054 	addw	r0, r3, #1364	; 0x554
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 800578e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005790:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8005794:	3318      	adds	r3, #24
				pdev->wArea2,
 8005796:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005798:	f502 52d1 	add.w	r2, r2, #6688	; 0x1a20
 800579c:	3218      	adds	r2, #24
		status = VL53LX_ipp_hist_process_data(
 800579e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80057a0:	9405      	str	r4, [sp, #20]
 80057a2:	f107 0413 	add.w	r4, r7, #19
 80057a6:	9404      	str	r4, [sp, #16]
 80057a8:	9203      	str	r2, [sp, #12]
 80057aa:	9302      	str	r3, [sp, #8]
 80057ac:	9001      	str	r0, [sp, #4]
 80057ae:	9100      	str	r1, [sp, #0]
 80057b0:	4633      	mov	r3, r6
 80057b2:	462a      	mov	r2, r5
 80057b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7fd f90a 	bl	80029d0 <VL53LX_ipp_hist_process_data>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80057c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057c4:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d150      	bne.n	800586e <VL53LX_get_device_results+0x3a2>
			(histo_merge_nb > 1))
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d94d      	bls.n	800586e <VL53LX_get_device_results+0x3a2>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80057d8:	e045      	b.n	8005866 <VL53LX_get_device_results+0x39a>
			pdata = &(presults->VL53LX_p_003[i]);
 80057da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80057de:	224c      	movs	r2, #76	; 0x4c
 80057e0:	fb02 f303 	mul.w	r3, r2, r3
 80057e4:	3310      	adds	r3, #16
 80057e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e8:	4413      	add	r3, r2
 80057ea:	3304      	adds	r3, #4
 80057ec:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	7cfa      	ldrb	r2, [r7, #19]
 80057f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	7cfa      	ldrb	r2, [r7, #19]
 8005802:	fbb3 f2f2 	udiv	r2, r3, r2
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	7cfa      	ldrb	r2, [r7, #19]
 8005810:	fb93 f2f2 	sdiv	r2, r3, r2
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800581c:	461a      	mov	r2, r3
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	fb92 f3f3 	sdiv	r3, r2, r3
 8005824:	b29a      	uxth	r2, r3
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800582e:	461a      	mov	r2, r3
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	fb92 f3f3 	sdiv	r3, r2, r3
 8005836:	b29a      	uxth	r2, r3
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005840:	461a      	mov	r2, r3
 8005842:	7cfb      	ldrb	r3, [r7, #19]
 8005844:	fb92 f3f3 	sdiv	r3, r2, r3
 8005848:	b29a      	uxth	r2, r3
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	7cfa      	ldrb	r2, [r7, #19]
 8005854:	fbb3 f2f2 	udiv	r2, r3, r2
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800585c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005860:	3301      	adds	r3, #1
 8005862:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005866:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800586a:	2b03      	cmp	r3, #3
 800586c:	d9b5      	bls.n	80057da <VL53LX_get_device_results+0x30e>
		}


		if (status != VL53LX_ERROR_NONE)
 800586e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 80ae 	bne.w	80059d4 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8005878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800587a:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 800587e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005880:	f503 717f 	add.w	r1, r3, #1020	; 0x3fc
 8005884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005886:	330e      	adds	r3, #14
 8005888:	461a      	mov	r2, r3
 800588a:	f004 ff6d 	bl	800a768 <VL53LX_hist_wrap_dmax>
 800588e:	4603      	mov	r3, r0
 8005890:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8005894:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005898:	2b00      	cmp	r3, #0
 800589a:	f040 809d 	bne.w	80059d8 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800589e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80058a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	4413      	add	r3, r2
 80058b2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80058b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80058b8:	4613      	mov	r3, r2
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80058c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058c6:	4413      	add	r3, r2
 80058c8:	f103 0208 	add.w	r2, r3, #8
 80058cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f004 fa6a 	bl	8009da8 <VL53LX_hist_phase_consistency_check>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80058da:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d17c      	bne.n	80059dc <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80058e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80058ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	4413      	add	r3, r2
 80058f6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80058f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80058fc:	4613      	mov	r3, r2
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800590a:	4413      	add	r3, r2
 800590c:	f103 0208 	add.w	r2, r3, #8
 8005910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005912:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f004 fecf 	bl	800a6ba <VL53LX_hist_xmonitor_consistency_check>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8005922:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005926:	2b00      	cmp	r3, #0
 8005928:	d15a      	bne.n	80059e0 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800592a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	2210      	movs	r2, #16
 8005938:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800593a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800593c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005940:	3301      	adds	r3, #1
 8005942:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800594e:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8005950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005952:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 8005956:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800595a:	429a      	cmp	r2, r3
 800595c:	d222      	bcs.n	80059a4 <VL53LX_get_device_results+0x4d8>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800595e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8005978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597a:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8005982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005984:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 800598c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598e:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8005996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005998:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80059a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a2:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 80059a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11b      	bne.n	80059e4 <VL53LX_get_device_results+0x518>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 80059ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ae:	f503 707f 	add.w	r0, r3, #1020	; 0x3fc
 80059b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059b4:	f203 329e 	addw	r2, r3, #926	; 0x39e
 80059b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ba:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80059be:	3310      	adds	r3, #16
 80059c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059c2:	f005 fa09 	bl	800add8 <VL53LX_hist_copy_results_to_sys_and_core>
 80059c6:	e00e      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059c8:	bf00      	nop
 80059ca:	e00c      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059cc:	bf00      	nop
 80059ce:	e00a      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059d0:	bf00      	nop
 80059d2:	e008      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059d4:	bf00      	nop
 80059d6:	e006      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059d8:	bf00      	nop
 80059da:	e004      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 80059e4:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d036      	beq.n	8005a5c <VL53LX_get_device_results+0x590>
			if (pstate->rd_device_state !=
 80059ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f0:	79db      	ldrb	r3, [r3, #7]
 80059f2:	2b06      	cmp	r3, #6
 80059f4:	d00a      	beq.n	8005a0c <VL53LX_get_device_results+0x540>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80059f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <VL53LX_get_device_results+0x540>
					status = VL53LX_dynamic_zone_update(
 80059fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f005 fabd 	bl	800af80 <VL53LX_dynamic_zone_update>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005a12:	e015      	b.n	8005a40 <VL53LX_get_device_results+0x574>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8005a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8005a1a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <VL53LX_get_device_results+0x55a>
 8005a22:	2103      	movs	r1, #3
 8005a24:	e000      	b.n	8005a28 <VL53LX_get_device_results+0x55c>
 8005a26:	2101      	movs	r1, #1
 8005a28:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a2e:	4413      	add	r3, r2
 8005a30:	460a      	mov	r2, r1
 8005a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005a36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005a40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005a44:	2b0f      	cmp	r3, #15
 8005a46:	d9e5      	bls.n	8005a14 <VL53LX_get_device_results+0x548>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8005a48:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <VL53LX_get_device_results+0x590>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f005 fb0f 	bl	800b074 <VL53LX_multizone_hist_bins_update>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8005a5c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <VL53LX_get_device_results+0x5a4>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f005 feff 	bl	800b868 <VL53LX_dynamic_xtalk_correction_corrector>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8005a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a72:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d151      	bne.n	8005b1e <VL53LX_get_device_results+0x652>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e04c      	b.n	8005b1e <VL53LX_get_device_results+0x652>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8005a84:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <VL53LX_get_device_results+0x5d0>
			status = VL53LX_get_measurement_results(
 8005a8c:	7afb      	ldrb	r3, [r7, #11]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff fc5d 	bl	8005350 <VL53LX_get_measurement_results>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8005a9c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <VL53LX_get_device_results+0x5f4>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8005aaa:	4618      	mov	r0, r3
 8005aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aae:	f203 319e 	addw	r1, r3, #926	; 0x39e
 8005ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab4:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8005ab8:	3210      	adds	r2, #16
 8005aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005abc:	f000 fc2c 	bl	8006318 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d12a      	bne.n	8005b1e <VL53LX_get_device_results+0x652>

			if ((status == VL53LX_ERROR_NONE) &&
 8005ac8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <VL53LX_get_device_results+0x620>
				(pL->low_power_auto_range_count == 0)) {
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <VL53LX_get_device_results+0x620>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f006 fad3 	bl	800c084 <VL53LX_low_power_auto_setup_manual_calibration>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	709a      	strb	r2, [r3, #2]
 8005aea:	e00a      	b.n	8005b02 <VL53LX_get_device_results+0x636>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8005aec:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <VL53LX_get_device_results+0x636>
				(pL->low_power_auto_range_count == 1)) {
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d102      	bne.n	8005b02 <VL53LX_get_device_results+0x636>
				pL->low_power_auto_range_count = 2;
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	2202      	movs	r2, #2
 8005b00:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	789b      	ldrb	r3, [r3, #2]
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d009      	beq.n	8005b1e <VL53LX_get_device_results+0x652>
 8005b0a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <VL53LX_get_device_results+0x652>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f006 fb07 	bl	800c126 <VL53LX_low_power_auto_update_DSS>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b20:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b26:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b2a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b30:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8005b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b34:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8005b3c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 80b0 	bne.w	8005ca6 <VL53LX_get_device_results+0x7da>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8005b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b48:	2210      	movs	r2, #16
 8005b4a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8005b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b50:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005b54:	3301      	adds	r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5a:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8005b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8005b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8005b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b72:	429a      	cmp	r2, r3
 8005b74:	f080 8097 	bcs.w	8005ca6 <VL53LX_get_device_results+0x7da>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8005b78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8005b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b92:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8005b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b96:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8005b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9a:	785a      	ldrb	r2, [r3, #1]
 8005b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9e:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8005ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba2:	789a      	ldrb	r2, [r3, #2]
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba6:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	78da      	ldrb	r2, [r3, #3]
 8005bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bae:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8005bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8005bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8005bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bbc:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8005bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8005bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc6:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8005bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8005bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd2:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8005bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8005bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bde:	7c5a      	ldrb	r2, [r3, #17]
 8005be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be2:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8005be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be6:	7c9a      	ldrb	r2, [r3, #18]
 8005be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bea:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005bf2:	e052      	b.n	8005c9a <VL53LX_get_device_results+0x7ce>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8005bf4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8005bf8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8005bfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bfe:	204c      	movs	r0, #76	; 0x4c
 8005c00:	fb00 f303 	mul.w	r3, r0, r3
 8005c04:	440b      	add	r3, r1
 8005c06:	3338      	adds	r3, #56	; 0x38
 8005c08:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8005c0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4403      	add	r3, r0
 8005c16:	3308      	adds	r3, #8
 8005c18:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005c1a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8005c1e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c24:	204c      	movs	r0, #76	; 0x4c
 8005c26:	fb00 f303 	mul.w	r3, r0, r3
 8005c2a:	440b      	add	r3, r1
 8005c2c:	333c      	adds	r3, #60	; 0x3c
 8005c2e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8005c30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4403      	add	r3, r0
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005c40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005c44:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c4a:	204c      	movs	r0, #76	; 0x4c
 8005c4c:	fb00 f303 	mul.w	r3, r0, r3
 8005c50:	440b      	add	r3, r1
 8005c52:	3354      	adds	r3, #84	; 0x54
 8005c54:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c58:	4613      	mov	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	3310      	adds	r3, #16
 8005c64:	4602      	mov	r2, r0
 8005c66:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8005c68:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8005c6c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8005c70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c72:	204c      	movs	r0, #76	; 0x4c
 8005c74:	fb00 f303 	mul.w	r3, r0, r3
 8005c78:	440b      	add	r3, r1
 8005c7a:	335e      	adds	r3, #94	; 0x5e
 8005c7c:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8005c7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	3312      	adds	r3, #18
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005c90:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005c94:	3301      	adds	r3, #1
 8005c96:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c9c:	7c9b      	ldrb	r3, [r3, #18]
 8005c9e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3a6      	bcc.n	8005bf4 <VL53LX_get_device_results+0x728>
		}
	}



	memcpy(
 8005ca6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8005caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f010 f8e7 	bl	8015e80 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8005cb2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <VL53LX_get_device_results+0x7fa>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f002 fde4 	bl	8008888 <VL53LX_check_ll_driver_rd_state>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005cc6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3768      	adds	r7, #104	; 0x68
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005cd4 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8005ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d107      	bne.n	8005cfc <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff f85e 	bl	8004db4 <VL53LX_init_and_start_range>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b0d2      	sub	sp, #328	; 0x148
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d16:	6018      	str	r0, [r3, #0]
 8005d18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d20:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8005d28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d2c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005d44:	3320      	adds	r3, #32
 8005d46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8005d4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d4e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8005d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d5a:	f203 3336 	addw	r3, r3, #822	; 0x336
 8005d5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8005d62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8005d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d72:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8005d76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8005d7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8005d82:	f107 030c 	add.w	r3, r7, #12
 8005d86:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8005db4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005db8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8005dc0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8005dc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dcc:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8005dd0:	2353      	movs	r3, #83	; 0x53
 8005dd2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005dd6:	2188      	movs	r1, #136	; 0x88
 8005dd8:	6800      	ldr	r0, [r0, #0]
 8005dda:	f7fc fc09 	bl	80025f0 <VL53LX_ReadMulti>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8005de4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8005df8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005dfc:	785a      	ldrb	r2, [r3, #1]
 8005dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8005e0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e10:	789a      	ldrb	r2, [r3, #2]
 8005e12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e16:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8005e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e24:	78da      	ldrb	r2, [r3, #3]
 8005e26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e2a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8005e34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	f003 f9ee 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8005e46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e4a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8005e54:	234e      	movs	r3, #78	; 0x4e
 8005e56:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005e5a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005e5e:	f107 020c 	add.w	r2, r7, #12
 8005e62:	4413      	add	r3, r2
 8005e64:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005e68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005e6c:	2002      	movs	r0, #2
 8005e6e:	f003 f9d6 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8005e72:	4603      	mov	r3, r0
 8005e74:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8005e76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e7a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8005e84:	2350      	movs	r3, #80	; 0x50
 8005e86:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8005e8a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005e8e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e92:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005e96:	5cd2      	ldrb	r2, [r2, r3]
 8005e98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8005ea6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eaa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8005eb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebc:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005ec0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ec4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8005ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed6:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396



	i2c_buffer_offset_bytes =
 8005eda:	2351      	movs	r3, #81	; 0x51
 8005edc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8005ee0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005ee4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005ee8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005eec:	5cd3      	ldrb	r3, [r2, r3]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005ef4:	2352      	movs	r3, #82	; 0x52
 8005ef6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8005efa:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005efe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005f02:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005f06:	5cd2      	ldrb	r2, [r2, r3]
 8005f08:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005f12:	234d      	movs	r3, #77	; 0x4d
 8005f14:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8005f18:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005f1c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005f20:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005f24:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8005f28:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8005f2a:	2306      	movs	r3, #6
 8005f2c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005f30:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005f34:	f107 020c 	add.w	r2, r7, #12
 8005f38:	4413      	add	r3, r2
 8005f3a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005f44:	e01a      	b.n	8005f7c <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005f46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	f003 fa06 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8005f50:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8005f52:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005f56:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005f58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3206      	adds	r2, #6
 8005f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8005f68:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f6c:	3303      	adds	r3, #3
 8005f6e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005f72:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005f76:	3301      	adds	r3, #1
 8005f78:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005f7c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005f80:	2b17      	cmp	r3, #23
 8005f82:	d9e0      	bls.n	8005f46 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005f84:	f107 0208 	add.w	r2, r7, #8
 8005f88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f8c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005f90:	f248 018d 	movw	r1, #32909	; 0x808d
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f000 fb97 	bl	80066c8 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005f9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f9e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d118      	bne.n	8005fde <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005fac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fb0:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005fba:	2100      	movs	r1, #0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f00f ff6d 	bl	8015e9c <memset>
		pdev->bin_rec_pos = 0;
 8005fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
		pdev->pos_before_next_recom = 0;
 8005fd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
	}

	if (hist_merge == 1)
 8005fde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fe2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10b      	bne.n	8006004 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 8005fec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ff0:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8005ff4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ff8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	f7fd ff1e 	bl	8003e40 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006004:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006008:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800600c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006010:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8006018:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800601c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8006026:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800602a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2218      	movs	r2, #24
 8006032:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8006034:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006038:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2218      	movs	r2, #24
 8006040:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006042:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006046:	78da      	ldrb	r2, [r3, #3]
 8006048:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800604c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006056:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800605a:	799b      	ldrb	r3, [r3, #6]
 800605c:	b29b      	uxth	r3, r3
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006062:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006066:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006070:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006074:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800607e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006082:	7c1b      	ldrb	r3, [r3, #16]
 8006084:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006086:	4413      	add	r3, r2
 8006088:	b29a      	uxth	r2, r3
 800608a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800608e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 800609e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80060ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060b0:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80060b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	f003 fd15 	bl	8009aee <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80060c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d117      	bne.n	8006100 <VL53LX_get_histogram_bin_data+0x3f8>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80060d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060d4:	791b      	ldrb	r3, [r3, #4]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80060dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060e0:	795b      	ldrb	r3, [r3, #5]
 80060e2:	b29b      	uxth	r3, r3
		encoded_timeout =
 80060e4:	4413      	add	r3, r2
 80060e6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80060ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060ee:	799a      	ldrb	r2, [r3, #6]
 80060f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80060fe:	e016      	b.n	800612e <VL53LX_get_histogram_bin_data+0x426>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006100:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006104:	79db      	ldrb	r3, [r3, #7]
 8006106:	b29b      	uxth	r3, r3
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800610c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006110:	7a1b      	ldrb	r3, [r3, #8]
 8006112:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006114:	4413      	add	r3, r2
 8006116:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 800611a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800611e:	7a5a      	ldrb	r2, [r3, #9]
 8006120:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800612e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006132:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2200      	movs	r2, #0
 800613a:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800613c:	2300      	movs	r3, #0
 800613e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006142:	e01f      	b.n	8006184 <VL53LX_get_histogram_bin_data+0x47c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006144:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006148:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800614c:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4413      	add	r3, r2
 8006154:	7b1b      	ldrb	r3, [r3, #12]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b07      	cmp	r3, #7
 800615c:	d10d      	bne.n	800617a <VL53LX_get_histogram_bin_data+0x472>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800615e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006162:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	7adb      	ldrb	r3, [r3, #11]
 800616a:	3304      	adds	r3, #4
 800616c:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800616e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006172:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800617a:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800617e:	3301      	adds	r3, #1
 8006180:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006184:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006188:	2b05      	cmp	r3, #5
 800618a:	d9db      	bls.n	8006144 <VL53LX_get_histogram_bin_data+0x43c>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 800618c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006190:	4618      	mov	r0, r3
 8006192:	f003 fb1c 	bl	80097ce <VL53LX_decode_timeout>
 8006196:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006198:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800619c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80061a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061aa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80061b4:	4618      	mov	r0, r3
 80061b6:	f006 f87d 	bl	800c2b4 <VL53LX_calc_pll_period_us>
 80061ba:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80061be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	3301      	adds	r3, #1
 80061ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80061d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061d6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 80061e0:	4619      	mov	r1, r3
 80061e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ea:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80061ee:	f006 f878 	bl	800c2e2 <VL53LX_duration_maths>
 80061f2:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80061f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80061f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006202:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006206:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8006212:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006216:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	f006 f987 	bl	800c52e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8006220:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006224:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f006 fd9e 	bl	800cd6a <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800622e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006232:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006236:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800623a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006242:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006246:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800624a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800624e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8006256:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800625a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	789b      	ldrb	r3, [r3, #2]
 8006262:	461a      	mov	r2, r3
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006270:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006274:	4413      	add	r3, r2
 8006276:	3302      	adds	r3, #2
 8006278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800627c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006280:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006282:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006286:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006294:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006296:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800629a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80062a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062a8:	2200      	movs	r2, #0
 80062aa:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80062ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b11      	cmp	r3, #17
 80062c0:	bf8c      	ite	hi
 80062c2:	2201      	movhi	r2, #1
 80062c4:	2200      	movls	r2, #0
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d11b      	bne.n	8006304 <VL53LX_get_histogram_bin_data+0x5fc>
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <VL53LX_get_histogram_bin_data+0x60c>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d010      	beq.n	8006304 <VL53LX_get_histogram_bin_data+0x5fc>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80062e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062e6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062fa:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80062fc:	23fa      	movs	r3, #250	; 0xfa
 80062fe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006302:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006304:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006308:	4618      	mov	r0, r3
 800630a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	0002200e 	.word	0x0002200e

08006318 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8006318:	b480      	push	{r7}
 800631a:	b08b      	sub	sp, #44	; 0x2c
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	78da      	ldrb	r2, [r3, #3]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2200      	movs	r2, #0
 8006346:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2204      	movs	r2, #4
 800634c:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	8a1b      	ldrh	r3, [r3, #16]
 8006358:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	8a9b      	ldrh	r3, [r3, #20]
 800635e:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	8a5b      	ldrh	r3, [r3, #18]
 8006364:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8006366:	2300      	movs	r3, #0
 8006368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800636c:	e00b      	b.n	8006386 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800636e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	2200      	movs	r2, #0
 800637a:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800637c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006380:	3301      	adds	r3, #1
 8006382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800638a:	2b04      	cmp	r3, #4
 800638c:	d9ef      	bls.n	800636e <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	3314      	adds	r3, #20
 8006392:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800639a:	e0fe      	b.n	800659a <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80063a2:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2200      	movs	r2, #0
 80063a8:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	78db      	ldrb	r3, [r3, #3]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80063ba:	2b09      	cmp	r3, #9
 80063bc:	d104      	bne.n	80063c8 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2213      	movs	r2, #19
 80063c2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80063c6:	e007      	b.n	80063d8 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2200      	movs	r2, #0
 80063dc:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2200      	movs	r2, #0
 80063e2:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2200      	movs	r2, #0
 80063e8:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2200      	movs	r2, #0
 80063ee:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	2200      	movs	r2, #0
 80063f4:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2200      	movs	r2, #0
 80063fa:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80063fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8006404:	2b01      	cmp	r3, #1
 8006406:	d05c      	beq.n	80064c2 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8006408:	e0a8      	b.n	800655c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	789b      	ldrb	r3, [r3, #2]
 800640e:	2b07      	cmp	r3, #7
 8006410:	d103      	bne.n	800641a <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	8a7a      	ldrh	r2, [r7, #18]
 8006416:	82da      	strh	r2, [r3, #22]
 8006418:	e00b      	b.n	8006432 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	789b      	ldrb	r3, [r3, #2]
 800641e:	2b08      	cmp	r3, #8
 8006420:	d103      	bne.n	800642a <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	8aba      	ldrh	r2, [r7, #20]
 8006426:	82da      	strh	r2, [r3, #22]
 8006428:	e003      	b.n	8006432 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	8afa      	ldrh	r2, [r7, #22]
 8006436:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	895b      	ldrh	r3, [r3, #10]
 800644c:	015b      	lsls	r3, r3, #5
 800644e:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006456:	d302      	bcc.n	800645e <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800645c:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	b29a      	uxth	r2, r3
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006474:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006486:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da01      	bge.n	8006492 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 800648e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006492:	12db      	asrs	r3, r3, #11
 8006494:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	b21a      	sxth	r2, r3
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80064c0:	e04c      	b.n	800655c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d8:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	8bdb      	ldrh	r3, [r3, #30]
 80064e6:	015b      	lsls	r3, r3, #5
 80064e8:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f0:	d302      	bcc.n	80064f8 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80064f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064f6:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800650e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	fb02 f303 	mul.w	r3, r2, r3
 8006518:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006520:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da01      	bge.n	800652c <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8006528:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800652c:	12db      	asrs	r3, r3, #11
 800652e:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	b21a      	sxth	r2, r3
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800655a:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	334c      	adds	r3, #76	; 0x4c
 800658e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8006590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006594:	3301      	adds	r3, #1
 8006596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800659a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800659e:	2b01      	cmp	r3, #1
 80065a0:	f67f aefc 	bls.w	800639c <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	2b11      	cmp	r3, #17
 80065b4:	bf8c      	ite	hi
 80065b6:	2201      	movhi	r2, #1
 80065b8:	2200      	movls	r2, #0
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d116      	bne.n	80065ee <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 80065c0:	2201      	movs	r2, #1
 80065c2:	409a      	lsls	r2, r3
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00b      	beq.n	80065ee <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80065ec:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80065ee:	bf00      	nop
 80065f0:	372c      	adds	r7, #44	; 0x2c
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	0002200e 	.word	0x0002200e

08006600 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800660a:	2300      	movs	r3, #0
 800660c:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	332c      	adds	r3, #44	; 0x2c
 8006616:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b05      	cmp	r3, #5
 800661e:	d109      	bne.n	8006634 <VL53LX_set_zone_dss_config+0x34>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
 8006632:	e003      	b.n	800663c <VL53LX_set_zone_dss_config+0x3c>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800663c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006640:	4618      	mov	r0, r3
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8006666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	460b      	mov	r3, r1
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006684:	2300      	movs	r3, #0
 8006686:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d009      	beq.n	80066a6 <VL53LX_get_dmax_calibration_data+0x30>
 8006692:	2b02      	cmp	r3, #2
 8006694:	d10f      	bne.n	80066b6 <VL53LX_get_dmax_calibration_data+0x40>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 800669a:	220a      	movs	r2, #10
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f00f fbee 	bl	8015e80 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80066a4:	e00a      	b.n	80066bc <VL53LX_get_dmax_calibration_data+0x46>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 80066aa:	220a      	movs	r2, #10
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f00f fbe6 	bl	8015e80 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80066b4:	e002      	b.n	80066bc <VL53LX_get_dmax_calibration_data+0x46>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80066b6:	23fc      	movs	r3, #252	; 0xfc
 80066b8:	75fb      	strb	r3, [r7, #23]
	break;
 80066ba:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80066bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	; 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	460b      	mov	r3, r1
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80066e4:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066ec:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80066ee:	897b      	ldrh	r3, [r7, #10]
 80066f0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80066f4:	2bb9      	cmp	r3, #185	; 0xb9
 80066f6:	f200 86c9 	bhi.w	800748c <VL53LX_get_tuning_parm+0xdc4>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <VL53LX_get_tuning_parm+0x38>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	080069e9 	.word	0x080069e9
 8006704:	080069f9 	.word	0x080069f9
 8006708:	08006a09 	.word	0x08006a09
 800670c:	08006a19 	.word	0x08006a19
 8006710:	08006a27 	.word	0x08006a27
 8006714:	08006a35 	.word	0x08006a35
 8006718:	08006a43 	.word	0x08006a43
 800671c:	08006a51 	.word	0x08006a51
 8006720:	08006a5f 	.word	0x08006a5f
 8006724:	08006a6d 	.word	0x08006a6d
 8006728:	08006a7b 	.word	0x08006a7b
 800672c:	08006a87 	.word	0x08006a87
 8006730:	08006a95 	.word	0x08006a95
 8006734:	08006aa3 	.word	0x08006aa3
 8006738:	08006aaf 	.word	0x08006aaf
 800673c:	08006abd 	.word	0x08006abd
 8006740:	08006acb 	.word	0x08006acb
 8006744:	08006adb 	.word	0x08006adb
 8006748:	08006aeb 	.word	0x08006aeb
 800674c:	08006af9 	.word	0x08006af9
 8006750:	08006b09 	.word	0x08006b09
 8006754:	08006b17 	.word	0x08006b17
 8006758:	08006b27 	.word	0x08006b27
 800675c:	08006b37 	.word	0x08006b37
 8006760:	08006b47 	.word	0x08006b47
 8006764:	08006b57 	.word	0x08006b57
 8006768:	08006b67 	.word	0x08006b67
 800676c:	08006b77 	.word	0x08006b77
 8006770:	08006b87 	.word	0x08006b87
 8006774:	08006b97 	.word	0x08006b97
 8006778:	08006ba7 	.word	0x08006ba7
 800677c:	08006bb5 	.word	0x08006bb5
 8006780:	08006bc5 	.word	0x08006bc5
 8006784:	08006bd5 	.word	0x08006bd5
 8006788:	08006be5 	.word	0x08006be5
 800678c:	08006bf5 	.word	0x08006bf5
 8006790:	08006c05 	.word	0x08006c05
 8006794:	08006c15 	.word	0x08006c15
 8006798:	08006c25 	.word	0x08006c25
 800679c:	08006c35 	.word	0x08006c35
 80067a0:	08006c45 	.word	0x08006c45
 80067a4:	08006c55 	.word	0x08006c55
 80067a8:	08006c65 	.word	0x08006c65
 80067ac:	08006c75 	.word	0x08006c75
 80067b0:	08006c85 	.word	0x08006c85
 80067b4:	08006c95 	.word	0x08006c95
 80067b8:	08006ca3 	.word	0x08006ca3
 80067bc:	08006cb1 	.word	0x08006cb1
 80067c0:	08006cbf 	.word	0x08006cbf
 80067c4:	08006ccd 	.word	0x08006ccd
 80067c8:	08006cdb 	.word	0x08006cdb
 80067cc:	08006ce9 	.word	0x08006ce9
 80067d0:	08006cf7 	.word	0x08006cf7
 80067d4:	08006d05 	.word	0x08006d05
 80067d8:	08006d13 	.word	0x08006d13
 80067dc:	08006d21 	.word	0x08006d21
 80067e0:	08006d2f 	.word	0x08006d2f
 80067e4:	08006d3d 	.word	0x08006d3d
 80067e8:	08006d4b 	.word	0x08006d4b
 80067ec:	08006d59 	.word	0x08006d59
 80067f0:	08006d67 	.word	0x08006d67
 80067f4:	08006d75 	.word	0x08006d75
 80067f8:	08006d83 	.word	0x08006d83
 80067fc:	08006d91 	.word	0x08006d91
 8006800:	08006d9f 	.word	0x08006d9f
 8006804:	08006dad 	.word	0x08006dad
 8006808:	08006dbb 	.word	0x08006dbb
 800680c:	08006dc9 	.word	0x08006dc9
 8006810:	08006dd7 	.word	0x08006dd7
 8006814:	08006de5 	.word	0x08006de5
 8006818:	08006df3 	.word	0x08006df3
 800681c:	08006e01 	.word	0x08006e01
 8006820:	08006e0f 	.word	0x08006e0f
 8006824:	08006e1d 	.word	0x08006e1d
 8006828:	08006e29 	.word	0x08006e29
 800682c:	08006e37 	.word	0x08006e37
 8006830:	08006e45 	.word	0x08006e45
 8006834:	08006e51 	.word	0x08006e51
 8006838:	08006e5d 	.word	0x08006e5d
 800683c:	08006e69 	.word	0x08006e69
 8006840:	08006e75 	.word	0x08006e75
 8006844:	08006e81 	.word	0x08006e81
 8006848:	08006e8d 	.word	0x08006e8d
 800684c:	08006e9b 	.word	0x08006e9b
 8006850:	08006ea9 	.word	0x08006ea9
 8006854:	08006eb7 	.word	0x08006eb7
 8006858:	08006ec5 	.word	0x08006ec5
 800685c:	08006ed3 	.word	0x08006ed3
 8006860:	08006ee1 	.word	0x08006ee1
 8006864:	08006eef 	.word	0x08006eef
 8006868:	08006efd 	.word	0x08006efd
 800686c:	08006f0b 	.word	0x08006f0b
 8006870:	08006f19 	.word	0x08006f19
 8006874:	08006f27 	.word	0x08006f27
 8006878:	08006f35 	.word	0x08006f35
 800687c:	08006f43 	.word	0x08006f43
 8006880:	08006f51 	.word	0x08006f51
 8006884:	08006f5f 	.word	0x08006f5f
 8006888:	08006f6d 	.word	0x08006f6d
 800688c:	08006f7b 	.word	0x08006f7b
 8006890:	08006f89 	.word	0x08006f89
 8006894:	08006f97 	.word	0x08006f97
 8006898:	08006fa5 	.word	0x08006fa5
 800689c:	08006fb3 	.word	0x08006fb3
 80068a0:	08006fc1 	.word	0x08006fc1
 80068a4:	08006fcf 	.word	0x08006fcf
 80068a8:	08006fdd 	.word	0x08006fdd
 80068ac:	08006feb 	.word	0x08006feb
 80068b0:	08006ff9 	.word	0x08006ff9
 80068b4:	08007007 	.word	0x08007007
 80068b8:	08007015 	.word	0x08007015
 80068bc:	08007023 	.word	0x08007023
 80068c0:	08007031 	.word	0x08007031
 80068c4:	0800703f 	.word	0x0800703f
 80068c8:	0800704d 	.word	0x0800704d
 80068cc:	0800705b 	.word	0x0800705b
 80068d0:	08007069 	.word	0x08007069
 80068d4:	08007077 	.word	0x08007077
 80068d8:	08007085 	.word	0x08007085
 80068dc:	08007097 	.word	0x08007097
 80068e0:	080070a9 	.word	0x080070a9
 80068e4:	080070bb 	.word	0x080070bb
 80068e8:	080070cd 	.word	0x080070cd
 80068ec:	080070df 	.word	0x080070df
 80068f0:	080070f1 	.word	0x080070f1
 80068f4:	08007103 	.word	0x08007103
 80068f8:	08007115 	.word	0x08007115
 80068fc:	08007127 	.word	0x08007127
 8006900:	08007139 	.word	0x08007139
 8006904:	0800714b 	.word	0x0800714b
 8006908:	0800715d 	.word	0x0800715d
 800690c:	0800716f 	.word	0x0800716f
 8006910:	08007181 	.word	0x08007181
 8006914:	08007193 	.word	0x08007193
 8006918:	080071a5 	.word	0x080071a5
 800691c:	080071b7 	.word	0x080071b7
 8006920:	080071c9 	.word	0x080071c9
 8006924:	080071db 	.word	0x080071db
 8006928:	080071e9 	.word	0x080071e9
 800692c:	080071f7 	.word	0x080071f7
 8006930:	08007205 	.word	0x08007205
 8006934:	08007213 	.word	0x08007213
 8006938:	08007221 	.word	0x08007221
 800693c:	0800722f 	.word	0x0800722f
 8006940:	0800723d 	.word	0x0800723d
 8006944:	0800724f 	.word	0x0800724f
 8006948:	0800725d 	.word	0x0800725d
 800694c:	0800726b 	.word	0x0800726b
 8006950:	08007279 	.word	0x08007279
 8006954:	08007287 	.word	0x08007287
 8006958:	08007295 	.word	0x08007295
 800695c:	080072a3 	.word	0x080072a3
 8006960:	080072b1 	.word	0x080072b1
 8006964:	080072bf 	.word	0x080072bf
 8006968:	080072cd 	.word	0x080072cd
 800696c:	080072db 	.word	0x080072db
 8006970:	080072e9 	.word	0x080072e9
 8006974:	080072f7 	.word	0x080072f7
 8006978:	08007305 	.word	0x08007305
 800697c:	08007313 	.word	0x08007313
 8006980:	08007321 	.word	0x08007321
 8006984:	0800732f 	.word	0x0800732f
 8006988:	0800733d 	.word	0x0800733d
 800698c:	0800734b 	.word	0x0800734b
 8006990:	08007359 	.word	0x08007359
 8006994:	08007367 	.word	0x08007367
 8006998:	08007375 	.word	0x08007375
 800699c:	08007383 	.word	0x08007383
 80069a0:	08007391 	.word	0x08007391
 80069a4:	0800739f 	.word	0x0800739f
 80069a8:	080073ad 	.word	0x080073ad
 80069ac:	080073bb 	.word	0x080073bb
 80069b0:	080073c9 	.word	0x080073c9
 80069b4:	080073d7 	.word	0x080073d7
 80069b8:	080073e5 	.word	0x080073e5
 80069bc:	080073f3 	.word	0x080073f3
 80069c0:	08007401 	.word	0x08007401
 80069c4:	0800740f 	.word	0x0800740f
 80069c8:	0800741d 	.word	0x0800741d
 80069cc:	0800742b 	.word	0x0800742b
 80069d0:	08007439 	.word	0x08007439
 80069d4:	08007447 	.word	0x08007447
 80069d8:	08007455 	.word	0x08007455
 80069dc:	08007463 	.word	0x08007463
 80069e0:	08007471 	.word	0x08007471
 80069e4:	0800747f 	.word	0x0800747f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80069ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
	break;
 80069f4:	f000 bd51 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 80069fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]
	break;
 8006a04:	f000 bd49 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8006a0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
	break;
 8006a14:	f000 bd41 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
	break;
 8006a22:	f000 bd3a 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
	break;
 8006a30:	f000 bd33 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	789b      	ldrb	r3, [r3, #2]
 8006a38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
	break;
 8006a3e:	f000 bd2c 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	78db      	ldrb	r3, [r3, #3]
 8006a46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
	break;
 8006a4c:	f000 bd25 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
	break;
 8006a5a:	f000 bd1e 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	795b      	ldrb	r3, [r3, #5]
 8006a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]
	break;
 8006a68:	f000 bd17 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	799b      	ldrb	r3, [r3, #6]
 8006a70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
	break;
 8006a76:	f000 bd10 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	601a      	str	r2, [r3, #0]
	break;
 8006a82:	f000 bd0a 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	891b      	ldrh	r3, [r3, #8]
 8006a8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]
	break;
 8006a90:	f000 bd03 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	8a1b      	ldrh	r3, [r3, #16]
 8006a98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	601a      	str	r2, [r3, #0]
	break;
 8006a9e:	f000 bcfc 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
	break;
 8006aaa:	f000 bcf6 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	7e1b      	ldrb	r3, [r3, #24]
 8006ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
	break;
 8006ab8:	f000 bcef 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	8b5b      	ldrh	r3, [r3, #26]
 8006ac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
	break;
 8006ac6:	f000 bce8 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8006ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
	break;
 8006ad6:	f000 bce0 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006ae0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	break;
 8006ae6:	f000 bcd8 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
	break;
 8006af4:	f000 bcd1 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006afe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
	break;
 8006b04:	f000 bcc9 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
	break;
 8006b12:	f000 bcc2 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006b1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
	break;
 8006b22:	f000 bcba 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8006b2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
	break;
 8006b32:	f000 bcb2 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8006b3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	break;
 8006b42:	f000 bcaa 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8006b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
	break;
 8006b52:	f000 bca2 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006b5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
	break;
 8006b62:	f000 bc9a 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8006b6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	601a      	str	r2, [r3, #0]
	break;
 8006b72:	f000 bc92 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f9b3 32de 	ldrsh.w	r3, [r3, #734]	; 0x2de
		*ptuning_parm_value = (int32_t)(
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
	break;
 8006b82:	f000 bc8a 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	f9b3 32e0 	ldrsh.w	r3, [r3, #736]	; 0x2e0
		*ptuning_parm_value = (int32_t)(
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	601a      	str	r2, [r3, #0]
	break;
 8006b92:	f000 bc82 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f8b3 32e4 	ldrh.w	r3, [r3, #740]	; 0x2e4
 8006b9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	break;
 8006ba2:	f000 bc7a 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006baa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
	break;
 8006bb0:	f000 bc73 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f8b3 32e2 	ldrh.w	r3, [r3, #738]	; 0x2e2
		*ptuning_parm_value = (int32_t)(
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
	break;
 8006bc0:	f000 bc6b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	601a      	str	r2, [r3, #0]
	break;
 8006bd0:	f000 bc63 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f9b3 32d6 	ldrsh.w	r3, [r3, #726]	; 0x2d6
 8006bda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]
	break;
 8006be0:	f000 bc5b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	601a      	str	r2, [r3, #0]
	break;
 8006bf0:	f000 bc53 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006bfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	601a      	str	r2, [r3, #0]
	break;
 8006c00:	f000 bc4b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8006c0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
	break;
 8006c10:	f000 bc43 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8006c1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
	break;
 8006c20:	f000 bc3b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8006c2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
	break;
 8006c30:	f000 bc33 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8006c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
	break;
 8006c40:	f000 bc2b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8006c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	601a      	str	r2, [r3, #0]
	break;
 8006c50:	f000 bc23 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8006c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
	break;
 8006c60:	f000 bc1b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	601a      	str	r2, [r3, #0]
	break;
 8006c70:	f000 bc13 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8006c7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	601a      	str	r2, [r3, #0]
	break;
 8006c80:	f000 bc0b 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	601a      	str	r2, [r3, #0]
	break;
 8006c90:	f000 bc03 	b.w	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8006c9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
	break;
 8006ca0:	e3fb      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8006ca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
	break;
 8006cae:	e3f4      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8006cb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
	break;
 8006cbc:	e3ed      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8006cc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	601a      	str	r2, [r3, #0]
	break;
 8006cca:	e3e6      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8006cd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	601a      	str	r2, [r3, #0]
	break;
 8006cd8:	e3df      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006ce0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
	break;
 8006ce6:	e3d8      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8006cee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
	break;
 8006cf4:	e3d1      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8006cfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
	break;
 8006d02:	e3ca      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8006d0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
	break;
 8006d10:	e3c3      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8006d18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
	break;
 8006d1e:	e3bc      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006d26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	601a      	str	r2, [r3, #0]
	break;
 8006d2c:	e3b5      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8006d34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
	break;
 8006d3a:	e3ae      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006d42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]
	break;
 8006d48:	e3a7      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8006d50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
	break;
 8006d56:	e3a0      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006d5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
	break;
 8006d64:	e399      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8006d6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	601a      	str	r2, [r3, #0]
	break;
 8006d72:	e392      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 8006d7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
	break;
 8006d80:	e38b      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 8006d88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
	break;
 8006d8e:	e384      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f8b3 329c 	ldrh.w	r3, [r3, #668]	; 0x29c
 8006d96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
	break;
 8006d9c:	e37d      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f8b3 329e 	ldrh.w	r3, [r3, #670]	; 0x29e
 8006da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
	break;
 8006daa:	e376      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 8006db2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
	break;
 8006db8:	e36f      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8006dc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	601a      	str	r2, [r3, #0]
	break;
 8006dc6:	e368      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8006dce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
	break;
 8006dd4:	e361      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8006ddc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	601a      	str	r2, [r3, #0]
	break;
 8006de2:	e35a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8006dea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
	break;
 8006df0:	e353      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8006df8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
	break;
 8006dfe:	e34c      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8006e06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
	break;
 8006e0c:	e345      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 8006e14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	601a      	str	r2, [r3, #0]
	break;
 8006e1a:	e33e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
	break;
 8006e26:	e338      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006e2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
	break;
 8006e34:	e331      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006e3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
	break;
 8006e42:	e32a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
	break;
 8006e4e:	e324      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
	break;
 8006e5a:	e31e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	8adb      	ldrh	r3, [r3, #22]
 8006e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
	break;
 8006e66:	e318      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	8b1b      	ldrh	r3, [r3, #24]
 8006e6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
	break;
 8006e72:	e312      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
	break;
 8006e7e:	e30c      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	601a      	str	r2, [r3, #0]
	break;
 8006e8a:	e306      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8006e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
	break;
 8006e98:	e2ff      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
	break;
 8006ea6:	e2f8      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8006eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
	break;
 8006eb4:	e2f1      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006ebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
	break;
 8006ec2:	e2ea      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006eca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
	break;
 8006ed0:	e2e3      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
	break;
 8006ede:	e2dc      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 8006ee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	601a      	str	r2, [r3, #0]
	break;
 8006eec:	e2d5      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8006ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
	break;
 8006efa:	e2ce      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]
	break;
 8006f08:	e2c7      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8006f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
	break;
 8006f16:	e2c0      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8006f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
	break;
 8006f24:	e2b9      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
	break;
 8006f32:	e2b2      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 8006f3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
	break;
 8006f40:	e2ab      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006f48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
	break;
 8006f4e:	e2a4      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
 8006f56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	601a      	str	r2, [r3, #0]
	break;
 8006f5c:	e29d      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8006f64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
	break;
 8006f6a:	e296      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8006f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
	break;
 8006f78:	e28f      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8006f80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
	break;
 8006f86:	e288      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8006f8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]
	break;
 8006f94:	e281      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8006f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
	break;
 8006fa2:	e27a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
	break;
 8006fb0:	e273      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8006fb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
	break;
 8006fbe:	e26c      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8006fc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
	break;
 8006fcc:	e265      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006fd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
	break;
 8006fda:	e25e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006fe2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
	break;
 8006fe8:	e257      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8006ff0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
	break;
 8006ff6:	e250      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006ffe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
	break;
 8007004:	e249      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800700c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]
	break;
 8007012:	e242      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800701a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
	break;
 8007020:	e23b      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
	break;
 800702e:	e234      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007036:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	601a      	str	r2, [r3, #0]
	break;
 800703c:	e22d      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007044:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	601a      	str	r2, [r3, #0]
	break;
 800704a:	e226      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007052:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]
	break;
 8007058:	e21f      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007060:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
	break;
 8007066:	e218      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800706e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
	break;
 8007074:	e211      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800707c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
	break;
 8007082:	e20a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708a:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	; 0x3d0
 800708e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
	break;
 8007094:	e201      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]
	break;
 80070a6:	e1f8      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ae:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80070b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
	break;
 80070b8:	e1ef      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c0:	f893 33dc 	ldrb.w	r3, [r3, #988]	; 0x3dc
 80070c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
	break;
 80070ca:	e1e6      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]
	break;
 80070dc:	e1dd      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 80070e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
	break;
 80070ee:	e1d4      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 80070fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
	break;
 8007100:	e1cb      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007108:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800710c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
	break;
 8007112:	e1c2      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800711e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
	break;
 8007124:	e1b9      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712c:	f9b3 33f6 	ldrsh.w	r3, [r3, #1014]	; 0x3f6
 8007130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	601a      	str	r2, [r3, #0]
	break;
 8007136:	e1b0      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713e:	f9b3 33f8 	ldrsh.w	r3, [r3, #1016]	; 0x3f8
 8007142:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]
	break;
 8007148:	e1a7      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007150:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 8007154:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
	break;
 800715a:	e19e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007162:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8007166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]
	break;
 800716c:	e195      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007174:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
		*ptuning_parm_value = (int32_t)(
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	601a      	str	r2, [r3, #0]
	break;
 800717e:	e18c      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007186:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800718a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	601a      	str	r2, [r3, #0]
	break;
 8007190:	e183      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007198:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800719c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
	break;
 80071a2:	e17a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
	break;
 80071b4:	e171      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071bc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80071c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	break;
 80071c6:	e168      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ce:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80071d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
	break;
 80071d8:	e15f      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80071e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	601a      	str	r2, [r3, #0]
	break;
 80071e6:	e158      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80071ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]
	break;
 80071f4:	e151      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80071fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
	break;
 8007202:	e14a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800720a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
	break;
 8007210:	e143      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007218:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
	break;
 800721e:	e13c      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007226:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	601a      	str	r2, [r3, #0]
	break;
 800722c:	e135      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007234:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
	break;
 800723a:	e12e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007242:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	601a      	str	r2, [r3, #0]
	break;
 800724c:	e125      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007254:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	601a      	str	r2, [r3, #0]
	break;
 800725a:	e11e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007262:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]
	break;
 8007268:	e117      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007270:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	break;
 8007276:	e110      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800727e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
	break;
 8007284:	e109      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800728c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]
	break;
 8007292:	e102      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800729a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
	break;
 80072a0:	e0fb      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80072a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
	break;
 80072ae:	e0f4      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80072b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
	break;
 80072bc:	e0ed      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80072c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
	break;
 80072ca:	e0e6      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80072d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	601a      	str	r2, [r3, #0]
	break;
 80072d8:	e0df      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 80072e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
	break;
 80072e6:	e0d8      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80072ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
	break;
 80072f4:	e0d1      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80072fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
	break;
 8007302:	e0ca      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800730a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
	break;
 8007310:	e0c3      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8007318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
	break;
 800731e:	e0bc      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8007326:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]
	break;
 800732c:	e0b5      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8007334:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	break;
 800733a:	e0ae      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8007342:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
	break;
 8007348:	e0a7      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8007350:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
	break;
 8007356:	e0a0      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800735e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	601a      	str	r2, [r3, #0]
	break;
 8007364:	e099      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800736c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]
	break;
 8007372:	e092      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800737a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
	break;
 8007380:	e08b      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8007388:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
	break;
 800738e:	e084      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8007396:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	601a      	str	r2, [r3, #0]
	break;
 800739c:	e07d      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 80073a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
	break;
 80073aa:	e076      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 80073b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
	break;
 80073b8:	e06f      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80073c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
	break;
 80073c6:	e068      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 80073ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
	break;
 80073d4:	e061      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 80073dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	601a      	str	r2, [r3, #0]
	break;
 80073e2:	e05a      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 80073ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
	break;
 80073f0:	e053      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 80073f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
	break;
 80073fe:	e04c      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8007406:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	601a      	str	r2, [r3, #0]
	break;
 800740c:	e045      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8007414:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
	break;
 800741a:	e03e      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8007422:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
	break;
 8007428:	e037      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8007430:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
	break;
 8007436:	e030      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800743e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	601a      	str	r2, [r3, #0]
	break;
 8007444:	e029      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800744c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
	break;
 8007452:	e022      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800745a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
	break;
 8007460:	e01b      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8007468:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	601a      	str	r2, [r3, #0]
	break;
 800746e:	e014      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8007476:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	601a      	str	r2, [r3, #0]
	break;
 800747c:	e00d      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8007484:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	601a      	str	r2, [r3, #0]
	break;
 800748a:	e006      	b.n	800749a <VL53LX_get_tuning_parm+0xdd2>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007492:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8007494:	23fc      	movs	r3, #252	; 0xfc
 8007496:	77fb      	strb	r3, [r7, #31]
	break;
 8007498:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800749a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3724      	adds	r7, #36	; 0x24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 80074c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 80074f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751a:	2200      	movs	r2, #0
 800751c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 8007520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007546:	2201      	movs	r2, #1
 8007548:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 800754c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007572:	2200      	movs	r2, #0
 8007574:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 8007578:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 80075a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2208      	movs	r2, #8
 80075c4:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	220b      	movs	r2, #11
 80075ca:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075d2:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80075da:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80075e2:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80075ea:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80075ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2212      	movs	r2, #18
 8007612:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	220f      	movs	r2, #15
 8007618:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8007626:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	220c      	movs	r2, #12
 800762c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800762e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	895b      	ldrh	r3, [r3, #10]
 8007650:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	895b      	ldrh	r3, [r3, #10]
 800766e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2240      	movs	r2, #64	; 0x40
 8007698:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10d      	bne.n	80076be <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d108      	bne.n	80076be <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2200      	movs	r2, #0
 80076ba:	741a      	strb	r2, [r3, #16]
 80076bc:	e002      	b.n	80076c4 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 80076c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d114      	bne.n	80076f6 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d110      	bne.n	80076f6 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	7d9b      	ldrb	r3, [r3, #22]
 80076e8:	f001 ff2e 	bl	8009548 <VL53LX_calc_range_ignore_threshold>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	831a      	strh	r2, [r3, #24]
 80076f4:	e002      	b.n	80076fc <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2200      	movs	r2, #0
 80076fa:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8007702:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2232      	movs	r2, #50	; 0x32
 8007708:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007710:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	228c      	movs	r2, #140	; 0x8c
 8007716:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007736:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800773e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2207      	movs	r2, #7
 8007744:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f643 2298 	movw	r2, #15000	; 0x3a98
 800774c:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f242 7210 	movw	r2, #10000	; 0x2710
 8007754:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800775c:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2246      	movs	r2, #70	; 0x46
 8007762:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f44f 7220 	mov.w	r2, #640	; 0x280
 800776a:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	228c      	movs	r2, #140	; 0x8c
 8007770:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8007772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007794:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f643 2298 	movw	r2, #15000	; 0x3a98
 800779c:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80077a4:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80077ac:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2208      	movs	r2, #8
 80077b2:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2228      	movs	r2, #40	; 0x28
 80077b8:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2209      	movs	r2, #9
 80077be:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80077c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80077e2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80077ea:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077f2:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80077fa:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2210      	movs	r2, #16
 8007800:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2208      	movs	r2, #8
 8007806:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2204      	movs	r2, #4
 800782c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2201      	movs	r2, #1
 8007832:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2201      	movs	r2, #1
 8007838:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2202      	movs	r2, #2
 800783e:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2201      	movs	r2, #1
 8007844:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2250      	movs	r2, #80	; 0x50
 800784a:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2264      	movs	r2, #100	; 0x64
 8007850:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	f241 023d 	movw	r2, #4157	; 0x103d
 8007858:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2210      	movs	r2, #16
 800785e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2232      	movs	r2, #50	; 0x32
 8007864:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2264      	movs	r2, #100	; 0x64
 800786a:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2201      	movs	r2, #1
 8007870:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	22b4      	movs	r2, #180	; 0xb4
 8007876:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8007884:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2208      	movs	r2, #8
 800788a:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2288      	movs	r2, #136	; 0x88
 8007892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2208      	movs	r2, #8
 800789a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ac:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2200      	movs	r2, #0
 80078b2:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	79fa      	ldrb	r2, [r7, #7]
 80078b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80078c2:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2232      	movs	r2, #50	; 0x32
 80078c8:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80078d0:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	228c      	movs	r2, #140	; 0x8c
 80078d6:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2250      	movs	r2, #80	; 0x50
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2232      	movs	r2, #50	; 0x32
 80078e4:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80078e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	221e      	movs	r2, #30
 8007906:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	220e      	movs	r2, #14
 800790c:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f642 7294 	movw	r2, #12180	; 0x2f94
 8007914:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	220e      	movs	r2, #14
 800791a:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220a      	movs	r2, #10
 8007920:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2206      	movs	r2, #6
 8007926:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	220e      	movs	r2, #14
 800792c:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	220a      	movs	r2, #10
 8007932:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2206      	movs	r2, #6
 8007938:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2209      	movs	r2, #9
 800793e:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2205      	movs	r2, #5
 8007944:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2203      	movs	r2, #3
 800794a:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2206      	movs	r2, #6
 8007950:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2206      	movs	r2, #6
 8007956:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2206      	movs	r2, #6
 800795c:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2221      	movs	r2, #33	; 0x21
 8007968:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	223c      	movs	r2, #60	; 0x3c
 800797a:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	223c      	movs	r2, #60	; 0x3c
 8007980:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	223c      	movs	r2, #60	; 0x3c
 8007986:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2280      	movs	r2, #128	; 0x80
 800798c:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2280      	movs	r2, #128	; 0x80
 8007992:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2208      	movs	r2, #8
 800799e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2210      	movs	r2, #16
 80079a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80079e0:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f640 22be 	movw	r2, #2750	; 0xabe
 80079ea:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	22fa      	movs	r2, #250	; 0xfa
 80079f2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079fc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007a06:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8007a10:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007a1a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8007a24:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f64f 7238 	movw	r2, #65336	; 0xff38
 8007a2e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	22c8      	movs	r2, #200	; 0xc8
 8007a36:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8007a40:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8007a52:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007a5c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007a66:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007a70:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007a7a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f641 0238 	movw	r2, #6200	; 0x1838
 8007a84:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	22fa      	movs	r2, #250	; 0xfa
 8007a9c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007aa6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8007ab0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f241 1294 	movw	r2, #4500	; 0x1194
 8007aba:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f64f 7238 	movw	r2, #65336	; 0xff38
 8007ac4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	22c8      	movs	r2, #200	; 0xc8
 8007acc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f640 720a 	movw	r2, #3850	; 0xf0a
 8007af6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007b00:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f640 720a 	movw	r2, #3850	; 0xf0a
 8007b0a:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007b4c:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007b54:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007b5c:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007b64:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007b74:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f242 3228 	movw	r2, #9000	; 0x2328
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f241 7270 	movw	r2, #6000	; 0x1770
 8007b84:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007b8c:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f242 3228 	movw	r2, #9000	; 0x2328
 8007b94:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f241 7270 	movw	r2, #6000	; 0x1770
 8007b9c:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ba4:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007bac:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007bb4:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007bbc:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007bc4:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f24f 6218 	movw	r2, #63000	; 0xf618
 8007bcc:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007bd4:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007bdc:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007be4:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007bf2:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007bfa:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2206      	movs	r2, #6
 8007c1a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007c40:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2238      	movs	r2, #56	; 0x38
 8007c46:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2270      	movs	r2, #112	; 0x70
 8007c52:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2210      	movs	r2, #16
 8007c58:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2264      	movs	r2, #100	; 0x64
 8007c5e:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c66:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	220f      	movs	r2, #15
 8007c6c:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2234      	movs	r2, #52	; 0x34
 8007c72:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	22c8      	movs	r2, #200	; 0xc8
 8007c78:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007c80:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007c88:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007cb2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2211      	movs	r2, #17
 8007cf4:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2202      	movs	r2, #2
 8007d06:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2208      	movs	r2, #8
 8007d0c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22ff      	movs	r2, #255	; 0xff
 8007d4e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	220b      	movs	r2, #11
 8007d88:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	220d      	movs	r2, #13
 8007d9c:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007dc4:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2238      	movs	r2, #56	; 0x38
 8007dd0:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	221a      	movs	r2, #26
 8007de8:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2200      	movs	r2, #0
 8007dee:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2220      	movs	r2, #32
 8007df4:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	22cc      	movs	r2, #204	; 0xcc
 8007e00:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	220b      	movs	r2, #11
 8007e06:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	22f5      	movs	r2, #245	; 0xf5
 8007e12:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2209      	movs	r2, #9
 8007e18:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2278      	movs	r2, #120	; 0x78
 8007e34:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2207      	movs	r2, #7
 8007e46:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2221      	movs	r2, #33	; 0x21
 8007e4c:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2243      	movs	r2, #67	; 0x43
 8007e52:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2210      	movs	r2, #16
 8007e58:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2232      	movs	r2, #50	; 0x32
 8007e5e:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2254      	movs	r2, #84	; 0x54
 8007e64:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2207      	movs	r2, #7
 8007e6a:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2221      	movs	r2, #33	; 0x21
 8007e70:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2243      	movs	r2, #67	; 0x43
 8007e76:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2202      	movs	r2, #2
 8007e82:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2243      	movs	r2, #67	; 0x43
 8007e88:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2205      	movs	r2, #5
 8007e8e:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2221      	movs	r2, #33	; 0x21
 8007ea0:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2243      	movs	r2, #67	; 0x43
 8007ea6:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2232      	movs	r2, #50	; 0x32
 8007eb2:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2254      	movs	r2, #84	; 0x54
 8007eb8:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec0:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec8:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	2200      	movs	r2, #0
 8007eda:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	220f      	movs	r2, #15
 8007ee0:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	220f      	movs	r2, #15
 8007ee6:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	2208      	movs	r2, #8
 8007eec:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	2200      	movs	r2, #0
 8007efe:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	2200      	movs	r2, #0
 8007f04:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	220b      	movs	r2, #11
 8007f1a:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2209      	movs	r2, #9
 8007f20:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	2201      	movs	r2, #1
 8007f36:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	22c7      	movs	r2, #199	; 0xc7
 8007f50:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	22ff      	movs	r2, #255	; 0xff
 8007f56:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	22db      	movs	r2, #219	; 0xdb
 8007f5c:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	2202      	movs	r2, #2
 8007f62:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	2200      	movs	r2, #0
 8007f68:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	2201      	movs	r2, #1
 8007f74:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	2221      	movs	r2, #33	; 0x21
 8007f7a:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b090      	sub	sp, #64	; 0x40
 8007f90:	af0a      	add	r7, sp, #40	; 0x28
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	9302      	str	r3, [sp, #8]
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	68b8      	ldr	r0, [r7, #8]
 8007fb6:	f7ff fe70 	bl	8007c9a <VL53LX_preset_mode_standard_ranging>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d171      	bne.n	80080aa <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007fcc:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	9308      	str	r3, [sp, #32]
 8007fd2:	2305      	movs	r3, #5
 8007fd4:	9307      	str	r3, [sp, #28]
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	9306      	str	r3, [sp, #24]
 8007fda:	2303      	movs	r3, #3
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	2302      	movs	r3, #2
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	9303      	str	r3, [sp, #12]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9302      	str	r3, [sp, #8]
 8007fea:	2304      	movs	r3, #4
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	2303      	movs	r3, #3
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2007      	movs	r0, #7
 8007ffa:	f000 ff72 	bl	8008ee2 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	3302      	adds	r3, #2
 8008002:	9308      	str	r3, [sp, #32]
 8008004:	2305      	movs	r3, #5
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	2304      	movs	r3, #4
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	2303      	movs	r3, #3
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	2302      	movs	r3, #2
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	2301      	movs	r3, #1
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	2300      	movs	r3, #0
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	2304      	movs	r3, #4
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	2303      	movs	r3, #3
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2302      	movs	r3, #2
 8008026:	2201      	movs	r2, #1
 8008028:	2100      	movs	r1, #0
 800802a:	2007      	movs	r0, #7
 800802c:	f000 ffe9 	bl	8009002 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	2209      	movs	r2, #9
 8008034:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	220b      	movs	r2, #11
 800803a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2209      	movs	r2, #9
 8008040:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	220b      	movs	r2, #11
 8008046:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	2220      	movs	r2, #32
 8008052:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	2200      	movs	r2, #0
 8008058:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	221a      	movs	r2, #26
 800805e:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	2200      	movs	r2, #0
 8008064:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	2228      	movs	r2, #40	; 0x28
 800806a:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	2200      	movs	r2, #0
 8008070:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	2221      	movs	r2, #33	; 0x21
 8008076:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	22f5      	movs	r2, #245	; 0xf5
 800807c:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2208      	movs	r2, #8
 8008082:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2288      	movs	r2, #136	; 0x88
 800808a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f9e6 	bl	800846a <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	229b      	movs	r2, #155	; 0x9b
 80080a2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2226      	movs	r2, #38	; 0x26
 80080a8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80080aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b090      	sub	sp, #64	; 0x40
 80080ba:	af0a      	add	r7, sp, #40	; 0x28
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff ff52 	bl	8007f8c <VL53LX_preset_mode_histogram_ranging>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80080ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d178      	bne.n	80081e6 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	9308      	str	r3, [sp, #32]
 80080f8:	2305      	movs	r3, #5
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	2304      	movs	r3, #4
 80080fe:	9306      	str	r3, [sp, #24]
 8008100:	2303      	movs	r3, #3
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	2302      	movs	r3, #2
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	2301      	movs	r3, #1
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	2300      	movs	r3, #0
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	2304      	movs	r3, #4
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	2303      	movs	r3, #3
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2302      	movs	r3, #2
 800811a:	2201      	movs	r2, #1
 800811c:	2100      	movs	r1, #0
 800811e:	2007      	movs	r0, #7
 8008120:	f000 fedf 	bl	8008ee2 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	3302      	adds	r3, #2
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	2305      	movs	r3, #5
 800812c:	9307      	str	r3, [sp, #28]
 800812e:	2304      	movs	r3, #4
 8008130:	9306      	str	r3, [sp, #24]
 8008132:	2303      	movs	r3, #3
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	2302      	movs	r3, #2
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	2301      	movs	r3, #1
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	2300      	movs	r3, #0
 8008140:	9302      	str	r3, [sp, #8]
 8008142:	2304      	movs	r3, #4
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	2303      	movs	r3, #3
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	2302      	movs	r3, #2
 800814c:	2201      	movs	r2, #1
 800814e:	2100      	movs	r1, #0
 8008150:	2007      	movs	r0, #7
 8008152:	f000 ff56 	bl	8009002 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	68b9      	ldr	r1, [r7, #8]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f982 	bl	800846a <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	2209      	movs	r2, #9
 800816a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	220b      	movs	r2, #11
 8008170:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	2221      	movs	r2, #33	; 0x21
 800817c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	2200      	movs	r2, #0
 8008182:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	221b      	movs	r2, #27
 8008188:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	2200      	movs	r2, #0
 800818e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	2229      	movs	r2, #41	; 0x29
 8008194:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	2200      	movs	r2, #0
 800819a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2222      	movs	r2, #34	; 0x22
 80081a0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2209      	movs	r2, #9
 80081a6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	22f5      	movs	r2, #245	; 0xf5
 80081ac:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	2209      	movs	r2, #9
 80081b2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	220b      	movs	r2, #11
 80081b8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2208      	movs	r2, #8
 80081ce:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2288      	movs	r2, #136	; 0x88
 80081d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	229b      	movs	r2, #155	; 0x9b
 80081de:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2226      	movs	r2, #38	; 0x26
 80081e4:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80081e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b090      	sub	sp, #64	; 0x40
 80081f6:	af0a      	add	r7, sp, #40	; 0x28
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008200:	2300      	movs	r3, #0
 8008202:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	9302      	str	r3, [sp, #8]
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff feb4 	bl	8007f8c <VL53LX_preset_mode_histogram_ranging>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d178      	bne.n	8008322 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	9308      	str	r3, [sp, #32]
 8008234:	2303      	movs	r3, #3
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	2302      	movs	r3, #2
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	2301      	movs	r3, #1
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	2302      	movs	r3, #2
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	2301      	movs	r3, #1
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	2300      	movs	r3, #0
 800824a:	9302      	str	r3, [sp, #8]
 800824c:	2302      	movs	r3, #2
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	2302      	movs	r3, #2
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2301      	movs	r3, #1
 8008256:	2201      	movs	r2, #1
 8008258:	2100      	movs	r1, #0
 800825a:	2007      	movs	r0, #7
 800825c:	f000 fe41 	bl	8008ee2 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	3302      	adds	r3, #2
 8008264:	9308      	str	r3, [sp, #32]
 8008266:	2303      	movs	r3, #3
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	2302      	movs	r3, #2
 800826c:	9306      	str	r3, [sp, #24]
 800826e:	2301      	movs	r3, #1
 8008270:	9305      	str	r3, [sp, #20]
 8008272:	2302      	movs	r3, #2
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	2301      	movs	r3, #1
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	2302      	movs	r3, #2
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	2302      	movs	r3, #2
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2301      	movs	r3, #1
 8008288:	2201      	movs	r2, #1
 800828a:	2100      	movs	r1, #0
 800828c:	2007      	movs	r0, #7
 800828e:	f000 feb8 	bl	8009002 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f8e4 	bl	800846a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	2205      	movs	r2, #5
 80082a6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	2207      	movs	r2, #7
 80082ac:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	2236      	movs	r2, #54	; 0x36
 80082b8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	2200      	movs	r2, #0
 80082be:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	2228      	movs	r2, #40	; 0x28
 80082c4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	2200      	movs	r2, #0
 80082ca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	2244      	movs	r2, #68	; 0x44
 80082d0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	2200      	movs	r2, #0
 80082d6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	2233      	movs	r2, #51	; 0x33
 80082dc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2205      	movs	r2, #5
 80082e2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	22f5      	movs	r2, #245	; 0xf5
 80082e8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	2205      	movs	r2, #5
 80082ee:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	2207      	movs	r2, #7
 80082f4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2208      	movs	r2, #8
 800830a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2248      	movs	r2, #72	; 0x48
 8008312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	229b      	movs	r2, #155	; 0x9b
 800831a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	2226      	movs	r2, #38	; 0x26
 8008320:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b090      	sub	sp, #64	; 0x40
 8008332:	af0a      	add	r7, sp, #40	; 0x28
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800833c:	2300      	movs	r3, #0
 800833e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fe16 	bl	8007f8c <VL53LX_preset_mode_histogram_ranging>
 8008360:	4603      	mov	r3, r0
 8008362:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d178      	bne.n	800845e <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	9308      	str	r3, [sp, #32]
 8008370:	2302      	movs	r3, #2
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	2302      	movs	r3, #2
 8008376:	9306      	str	r3, [sp, #24]
 8008378:	2301      	movs	r3, #1
 800837a:	9305      	str	r3, [sp, #20]
 800837c:	2301      	movs	r3, #1
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	2301      	movs	r3, #1
 8008382:	9303      	str	r3, [sp, #12]
 8008384:	2300      	movs	r3, #0
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	2301      	movs	r3, #1
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	2301      	movs	r3, #1
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2301      	movs	r3, #1
 8008392:	2200      	movs	r2, #0
 8008394:	2107      	movs	r1, #7
 8008396:	2007      	movs	r0, #7
 8008398:	f000 fda3 	bl	8008ee2 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	3302      	adds	r3, #2
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	2302      	movs	r3, #2
 80083a4:	9307      	str	r3, [sp, #28]
 80083a6:	2302      	movs	r3, #2
 80083a8:	9306      	str	r3, [sp, #24]
 80083aa:	2301      	movs	r3, #1
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	2301      	movs	r3, #1
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	2301      	movs	r3, #1
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	2300      	movs	r3, #0
 80083b8:	9302      	str	r3, [sp, #8]
 80083ba:	2301      	movs	r3, #1
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	2301      	movs	r3, #1
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	2301      	movs	r3, #1
 80083c4:	2200      	movs	r2, #0
 80083c6:	2107      	movs	r1, #7
 80083c8:	2007      	movs	r0, #7
 80083ca:	f000 fe1a 	bl	8009002 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f846 	bl	800846a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	2203      	movs	r2, #3
 80083e2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	2205      	movs	r2, #5
 80083e8:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2252      	movs	r2, #82	; 0x52
 80083f4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	2200      	movs	r2, #0
 80083fa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	2237      	movs	r2, #55	; 0x37
 8008400:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2200      	movs	r2, #0
 8008406:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2266      	movs	r2, #102	; 0x66
 800840c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	2200      	movs	r2, #0
 8008412:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	2244      	movs	r2, #68	; 0x44
 8008418:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2203      	movs	r2, #3
 800841e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	22f5      	movs	r2, #245	; 0xf5
 8008424:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	2203      	movs	r2, #3
 800842a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	2205      	movs	r2, #5
 8008430:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2208      	movs	r2, #8
 8008446:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2228      	movs	r2, #40	; 0x28
 800844e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	22bb      	movs	r2, #187	; 0xbb
 8008456:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	2226      	movs	r2, #38	; 0x26
 800845c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800845e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	79db      	ldrb	r3, [r3, #7]
 80084ac:	b29b      	uxth	r3, r3
				<< 8)
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	7a1b      	ldrb	r3, [r3, #8]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	b29b      	uxth	r3, r3
				<< 8)
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	789b      	ldrb	r3, [r3, #2]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	4413      	add	r3, r2
 8008502:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	78db      	ldrb	r3, [r3, #3]
 800850c:	b29b      	uxth	r3, r3
				<< 8)
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	791b      	ldrb	r3, [r3, #4]
 8008516:	b29b      	uxth	r3, r3
 8008518:	4413      	add	r3, r2
 800851a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	79db      	ldrb	r3, [r3, #7]
 8008594:	b29b      	uxth	r3, r3
				<< 8)
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	7a1b      	ldrb	r3, [r3, #8]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	b29b      	uxth	r3, r3
				<< 8)
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	789b      	ldrb	r3, [r3, #2]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	78db      	ldrb	r3, [r3, #3]
 80085ec:	b29b      	uxth	r3, r3
				<< 8)
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	791b      	ldrb	r3, [r3, #4]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	332c      	adds	r3, #44	; 0x2c
 8008666:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2202      	movs	r2, #2
 8008678:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2200      	movs	r2, #0
 800867e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2200      	movs	r2, #0
 8008690:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2202      	movs	r2, #2
 8008696:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	735a      	strb	r2, [r3, #13]

}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	332c      	adds	r3, #44	; 0x2c
 80086c4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 80086cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d115      	bne.n	8008700 <VL53LX_update_ll_driver_rd_state+0x50>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2203      	movs	r2, #3
 80086d8:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2202      	movs	r2, #2
 80086f0:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	735a      	strb	r2, [r3, #13]
 80086fe:	e0bd      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	7a1b      	ldrb	r3, [r3, #8]
 8008704:	2bff      	cmp	r3, #255	; 0xff
 8008706:	d103      	bne.n	8008710 <VL53LX_update_ll_driver_rd_state+0x60>
			pstate->rd_stream_count = 0x80;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2280      	movs	r2, #128	; 0x80
 800870c:	721a      	strb	r2, [r3, #8]
 800870e:	e005      	b.n	800871c <VL53LX_update_ll_driver_rd_state+0x6c>
		else
			pstate->rd_stream_count++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	7a1b      	ldrb	r3, [r3, #8]
 8008714:	3301      	adds	r3, #1
 8008716:	b2da      	uxtb	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	7a19      	ldrb	r1, [r3, #8]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f103 0209 	add.w	r2, r3, #9
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	330a      	adds	r3, #10
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f002 fd4b 	bl	800b1c6 <VL53LX_update_internal_stream_counters>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	7adb      	ldrb	r3, [r3, #11]
 8008738:	f083 0302 	eor.w	r3, r3, #2
 800873c:	b2da      	uxtb	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	79db      	ldrb	r3, [r3, #7]
 8008746:	3b03      	subs	r3, #3
 8008748:	2b05      	cmp	r3, #5
 800874a:	f200 8081 	bhi.w	8008850 <VL53LX_update_ll_driver_rd_state+0x1a0>
 800874e:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <VL53LX_update_ll_driver_rd_state+0xa4>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	0800876d 	.word	0x0800876d
 8008758:	08008851 	.word	0x08008851
 800875c:	08008851 	.word	0x08008851
 8008760:	080087bf 	.word	0x080087bf
 8008764:	080087f5 	.word	0x080087f5
 8008768:	0800881f 	.word	0x0800881f

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f893 3396 	ldrb.w	r3, [r3, #918]	; 0x396
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	dd03      	ble.n	8008782 <VL53LX_update_ll_driver_rd_state+0xd2>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2206      	movs	r2, #6
 800877e:	71da      	strb	r2, [r3, #7]
 8008780:	e00d      	b.n	800879e <VL53LX_update_ll_driver_rd_state+0xee>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800878c:	429a      	cmp	r2, r3
 800878e:	d303      	bcc.n	8008798 <VL53LX_update_ll_driver_rd_state+0xe8>
					pstate->rd_device_state =
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2208      	movs	r2, #8
 8008794:	71da      	strb	r2, [r3, #7]
 8008796:	e002      	b.n	800879e <VL53LX_update_ll_driver_rd_state+0xee>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2207      	movs	r2, #7
 800879c:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	735a      	strb	r2, [r3, #13]

			break;
 80087bc:	e05e      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d303      	bcc.n	80087ec <VL53LX_update_ll_driver_rd_state+0x13c>
				pstate->rd_device_state =
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2208      	movs	r2, #8
 80087e8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80087ea:	e047      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2207      	movs	r2, #7
 80087f0:	71da      	strb	r2, [r3, #7]
			break;
 80087f2:	e043      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	7b5b      	ldrb	r3, [r3, #13]
 80087f8:	3301      	adds	r3, #1
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800880a:	429a      	cmp	r2, r3
 800880c:	d303      	bcc.n	8008816 <VL53LX_update_ll_driver_rd_state+0x166>
				pstate->rd_device_state =
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2208      	movs	r2, #8
 8008812:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8008814:	e032      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2207      	movs	r2, #7
 800881a:	71da      	strb	r2, [r3, #7]
			break;
 800881c:	e02e      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	7b1b      	ldrb	r3, [r3, #12]
 8008828:	f083 0301 	eor.w	r3, r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800883c:	429a      	cmp	r2, r3
 800883e:	d303      	bcc.n	8008848 <VL53LX_update_ll_driver_rd_state+0x198>
				pstate->rd_device_state =
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2208      	movs	r2, #8
 8008844:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8008846:	e019      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2207      	movs	r2, #7
 800884c:	71da      	strb	r2, [r3, #7]
			break;
 800884e:	e015      	b.n	800887c <VL53LX_update_ll_driver_rd_state+0x1cc>

		default:
			pstate->rd_device_state  =
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2203      	movs	r2, #3
 8008854:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2202      	movs	r2, #2
 800886c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	735a      	strb	r2, [r3, #13]
			break;
 800887a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800887c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8008888:	b480      	push	{r7}
 800888a:	b08d      	sub	sp, #52	; 0x34
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8008890:	2300      	movs	r3, #0
 8008892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088a0:	3320      	adds	r3, #32
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	332c      	adds	r3, #44	; 0x2c
 80088a8:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 80088aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ac:	f203 339e 	addw	r3, r3, #926	; 0x39e
 80088b0:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80088b8:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80088c0:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80088e0:	f003 031f 	and.w	r3, r3, #31
 80088e4:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	78db      	ldrb	r3, [r3, #3]
 80088ea:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 80088f2:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bf14      	ite	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	2300      	moveq	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
	histogram_mode =
 8008900:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8008906:	111b      	asrs	r3, r3, #4
 8008908:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8008912:	7c7b      	ldrb	r3, [r7, #17]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d008      	beq.n	800892a <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800891e:	111b      	asrs	r3, r3, #4
 8008920:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d04e      	beq.n	80089d6 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	79db      	ldrb	r3, [r3, #7]
 800893c:	2b06      	cmp	r3, #6
 800893e:	d109      	bne.n	8008954 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8008940:	7c7b      	ldrb	r3, [r7, #17]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d14a      	bne.n	80089dc <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8008946:	7cfb      	ldrb	r3, [r7, #19]
 8008948:	2b12      	cmp	r3, #18
 800894a:	d047      	beq.n	80089dc <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800894c:	23ef      	movs	r3, #239	; 0xef
 800894e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008952:	e043      	b.n	80089dc <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	7a1b      	ldrb	r3, [r3, #8]
 8008958:	7cba      	ldrb	r2, [r7, #18]
 800895a:	429a      	cmp	r2, r3
 800895c:	d002      	beq.n	8008964 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 800895e:	23ee      	movs	r3, #238	; 0xee
 8008960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	7adb      	ldrb	r3, [r3, #11]
 8008968:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800896c:	429a      	cmp	r2, r3
 800896e:	d002      	beq.n	8008976 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8008970:	23ed      	movs	r3, #237	; 0xed
 8008972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	7b5b      	ldrb	r3, [r3, #13]
 800897a:	4619      	mov	r1, r3
		expected_stream_count =
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	460b      	mov	r3, r1
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	440b      	add	r3, r1
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	4413      	add	r3, r2
 8008988:	3302      	adds	r3, #2
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	7b5b      	ldrb	r3, [r3, #13]
 8008992:	4619      	mov	r1, r3
		expected_gph_id =
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	460b      	mov	r3, r1
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	440b      	add	r3, r1
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	4413      	add	r3, r2
 80089a0:	3303      	adds	r3, #3
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 80089a6:	7c3a      	ldrb	r2, [r7, #16]
 80089a8:	7cbb      	ldrb	r3, [r7, #18]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d00a      	beq.n	80089c4 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <VL53LX_check_ll_driver_rd_state+0x136>
 80089b8:	7cbb      	ldrb	r3, [r7, #18]
 80089ba:	2bff      	cmp	r3, #255	; 0xff
 80089bc:	d002      	beq.n	80089c4 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 80089be:	23ec      	movs	r3, #236	; 0xec
 80089c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 80089c4:	7bfa      	ldrb	r2, [r7, #15]
 80089c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d005      	beq.n	80089da <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80089ce:	23eb      	movs	r3, #235	; 0xeb
 80089d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089d4:	e002      	b.n	80089dc <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 80089d6:	bf00      	nop
 80089d8:	e000      	b.n	80089dc <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 80089da:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80089dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3734      	adds	r7, #52	; 0x34
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80089f4:	2300      	movs	r3, #0
 80089f6:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a02:	3320      	adds	r3, #32
 8008a04:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	332c      	adds	r3, #44	; 0x2c
 8008a0a:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008a12:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8008a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d11b      	bne.n	8008a5a <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2203      	movs	r2, #3
 8008a26:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2200      	movs	r2, #0
 8008a32:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2200      	movs	r2, #0
 8008a38:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2200      	movs	r2, #0
 8008a44:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	773b      	strb	r3, [r7, #28]
 8008a58:	e0b1      	b.n	8008bbe <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	791b      	ldrb	r3, [r3, #4]
 8008a5e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	799b      	ldrb	r3, [r3, #6]
 8008a64:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2bff      	cmp	r3, #255	; 0xff
 8008a72:	d103      	bne.n	8008a7c <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2280      	movs	r2, #128	; 0x80
 8008a78:	705a      	strb	r2, [r3, #1]
 8008a7a:	e005      	b.n	8008a88 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	3301      	adds	r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	7859      	ldrb	r1, [r3, #1]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	1c9a      	adds	r2, r3, #2
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	3303      	adds	r3, #3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f002 fb96 	bl	800b1c6 <VL53LX_update_internal_stream_counters>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	f083 0302 	eor.w	r3, r3, #2
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b05      	cmp	r3, #5
 8008ab2:	d053      	beq.n	8008b5c <VL53LX_update_ll_driver_cfg_state+0x170>
 8008ab4:	2b05      	cmp	r3, #5
 8008ab6:	dc69      	bgt.n	8008b8c <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d002      	beq.n	8008ac2 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d02d      	beq.n	8008b1c <VL53LX_update_ll_driver_cfg_state+0x130>
 8008ac0:	e064      	b.n	8008b8c <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d909      	bls.n	8008aea <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	795b      	ldrb	r3, [r3, #5]
 8008ae0:	f083 0301 	eor.w	r3, r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2201      	movs	r2, #1
 8008aee:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f893 3357 	ldrb.w	r3, [r3, #855]	; 0x357
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2201      	movs	r2, #1
 8008afe:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	2200      	movs	r2, #0
 8008b04:	70da      	strb	r2, [r3, #3]
 8008b06:	e005      	b.n	8008b14 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2201      	movs	r2, #1
 8008b12:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2204      	movs	r2, #4
 8008b18:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8008b1a:	e050      	b.n	8008bbe <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	799b      	ldrb	r3, [r3, #6]
 8008b20:	3301      	adds	r3, #1
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d940      	bls.n	8008bb8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	795b      	ldrb	r3, [r3, #5]
 8008b40:	f083 0301 	eor.w	r3, r3, #1
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d031      	beq.n	8008bb8 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2205      	movs	r2, #5
 8008b58:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8008b5a:	e02d      	b.n	8008bb8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	799b      	ldrb	r3, [r3, #6]
 8008b60:	3301      	adds	r3, #1
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d922      	bls.n	8008bbc <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	795b      	ldrb	r3, [r3, #5]
 8008b80:	f083 0301 	eor.w	r3, r3, #1
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	715a      	strb	r2, [r3, #5]
			}
			break;
 8008b8a:	e017      	b.n	8008bbc <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2200      	movs	r2, #0
 8008b96:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2200      	movs	r2, #0
 8008bae:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	719a      	strb	r2, [r3, #6]
			break;
 8008bb6:	e002      	b.n	8008bbe <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008bbc:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11d      	bne.n	8008c04 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8008bc8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8008bca:	7f3b      	ldrb	r3, [r7, #28]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b2d8      	uxtb	r0, r3
 8008bd0:	68f9      	ldr	r1, [r7, #12]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	440b      	add	r3, r1
 8008bdc:	3302      	adds	r3, #2
 8008bde:	4602      	mov	r2, r0
 8008be0:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	7b5b      	ldrb	r3, [r3, #13]
 8008be6:	4619      	mov	r1, r3
 8008be8:	7f7b      	ldrb	r3, [r7, #29]
 8008bea:	f083 0302 	eor.w	r3, r3, #2
 8008bee:	b2d8      	uxtb	r0, r3
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3303      	adds	r3, #3
 8008bfe:	4602      	mov	r2, r0
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	e013      	b.n	8008c2c <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8008c04:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8008c06:	68f9      	ldr	r1, [r7, #12]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	440b      	add	r3, r1
 8008c12:	3302      	adds	r3, #2
 8008c14:	7f3a      	ldrb	r2, [r7, #28]
 8008c16:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8008c18:	7fba      	ldrb	r2, [r7, #30]
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	440b      	add	r3, r1
 8008c26:	3303      	adds	r3, #3
 8008c28:	7f7a      	ldrb	r2, [r7, #29]
 8008c2a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8008c2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7c1a      	ldrb	r2, [r3, #16]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	7c52      	ldrb	r2, [r2, #17]
 8008c52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	3302      	adds	r3, #2
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7c92      	ldrb	r2, [r2, #18]
 8008c5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	3303      	adds	r3, #3
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	7cd2      	ldrb	r2, [r2, #19]
 8008c66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	7d12      	ldrb	r2, [r2, #20]
 8008c70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	3305      	adds	r3, #5
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	7d52      	ldrb	r2, [r2, #21]
 8008c7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	3306      	adds	r3, #6
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7d92      	ldrb	r2, [r2, #22]
 8008c84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	3307      	adds	r3, #7
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	7dd2      	ldrb	r2, [r2, #23]
 8008c8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7e12      	ldrb	r2, [r2, #24]
 8008c98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	3309      	adds	r3, #9
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	7e52      	ldrb	r2, [r2, #25]
 8008ca2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	330a      	adds	r3, #10
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7e92      	ldrb	r2, [r2, #26]
 8008cac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	330b      	adds	r3, #11
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	7ed2      	ldrb	r2, [r2, #27]
 8008cb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	330c      	adds	r3, #12
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7f12      	ldrb	r2, [r2, #28]
 8008cc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	330d      	adds	r3, #13
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	7f52      	ldrb	r2, [r2, #29]
 8008cca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	330e      	adds	r3, #14
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7f92      	ldrb	r2, [r2, #30]
 8008cd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	330f      	adds	r3, #15
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	7fd2      	ldrb	r2, [r2, #31]
 8008cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008cea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	3311      	adds	r3, #17
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008cf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	3312      	adds	r3, #18
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8008d02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	3313      	adds	r3, #19
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8008d0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	3314      	adds	r3, #20
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008d1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3315      	adds	r3, #21
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008d26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	3316      	adds	r3, #22
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008d32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	3317      	adds	r3, #23
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008d3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	3318      	adds	r3, #24
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8008d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	3319      	adds	r3, #25
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8008d56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	331a      	adds	r3, #26
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8008d62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	331b      	adds	r3, #27
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8008d6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	331c      	adds	r3, #28
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008d7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	331d      	adds	r3, #29
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008d86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	331e      	adds	r3, #30
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008d92:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	331f      	adds	r3, #31
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8008d9e:	701a      	strb	r2, [r3, #0]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	22ff      	movs	r2, #255	; 0xff
 8008db8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	22ff      	movs	r2, #255	; 0xff
 8008dbe:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	22ff      	movs	r2, #255	; 0xff
 8008dc4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	22ff      	movs	r2, #255	; 0xff
 8008dca:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dd2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dda:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008de2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dea:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008df2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dfa:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e02:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e0a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e12:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e1a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e22:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e2a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e32:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e3a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e42:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e4a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e52:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e5a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e62:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	22ff      	movs	r2, #255	; 0xff
 8008e68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2210      	movs	r2, #16
 8008e8c:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	79fa      	ldrb	r2, [r7, #7]
 8008e92:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
 8008e98:	e017      	b.n	8008eca <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8008e9a:	7bfa      	ldrb	r2, [r7, #15]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2203      	movs	r2, #3
 8008eb6:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2204      	movs	r2, #4
 8008ebc:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	73fb      	strb	r3, [r7, #15]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	7bfa      	ldrb	r2, [r7, #15]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d3e2      	bcc.n	8008e9a <V53L1_init_zone_results_structure+0x22>
	}
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008ee2:	b490      	push	{r4, r7}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	4604      	mov	r4, r0
 8008eea:	4608      	mov	r0, r1
 8008eec:	4611      	mov	r1, r2
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	71fb      	strb	r3, [r7, #7]
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	71bb      	strb	r3, [r7, #6]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	717b      	strb	r3, [r7, #5]
 8008efc:	4613      	mov	r3, r2
 8008efe:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008f00:	79bb      	ldrb	r3, [r7, #6]
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	4413      	add	r3, r2
 8008f0a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008f10:	793b      	ldrb	r3, [r7, #4]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	797b      	ldrb	r3, [r7, #5]
 8008f18:	4413      	add	r3, r2
 8008f1a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008f20:	7d3b      	ldrb	r3, [r7, #20]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	7c3b      	ldrb	r3, [r7, #16]
 8008f28:	4413      	add	r3, r2
 8008f2a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8008f30:	7f3b      	ldrb	r3, [r7, #28]
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	7e3b      	ldrb	r3, [r7, #24]
 8008f38:	4413      	add	r3, r2
 8008f3a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8008f40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8008f54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f60:	4413      	add	r3, r2
 8008f62:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008f8e:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008f90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f9c:	4413      	add	r3, r2
 8008f9e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008faa:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	2200      	movs	r2, #0
 8008fb0:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fe8:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ff0:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]

}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc90      	pop	{r4, r7}
 8009000:	4770      	bx	lr

08009002 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8009002:	b490      	push	{r4, r7}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	4604      	mov	r4, r0
 800900a:	4608      	mov	r0, r1
 800900c:	4611      	mov	r1, r2
 800900e:	461a      	mov	r2, r3
 8009010:	4623      	mov	r3, r4
 8009012:	71fb      	strb	r3, [r7, #7]
 8009014:	4603      	mov	r3, r0
 8009016:	71bb      	strb	r3, [r7, #6]
 8009018:	460b      	mov	r3, r1
 800901a:	717b      	strb	r3, [r7, #5]
 800901c:	4613      	mov	r3, r2
 800901e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8009020:	79bb      	ldrb	r3, [r7, #6]
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	b2da      	uxtb	r2, r3
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	4413      	add	r3, r2
 800902a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8009030:	793b      	ldrb	r3, [r7, #4]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	b2da      	uxtb	r2, r3
 8009036:	797b      	ldrb	r3, [r7, #5]
 8009038:	4413      	add	r3, r2
 800903a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8009040:	7d3b      	ldrb	r3, [r7, #20]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	b2da      	uxtb	r2, r3
 8009046:	7c3b      	ldrb	r3, [r7, #16]
 8009048:	4413      	add	r3, r2
 800904a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	789a      	ldrb	r2, [r3, #2]
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	78da      	ldrb	r2, [r3, #3]
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	789a      	ldrb	r2, [r3, #2]
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	78da      	ldrb	r2, [r3, #3]
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	791a      	ldrb	r2, [r3, #4]
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800908e:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8009090:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	b2da      	uxtb	r2, r3
 8009098:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800909c:	4413      	add	r3, r2
 800909e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80090aa:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	2200      	movs	r2, #0
 80090b0:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 80090b2:	7f3b      	ldrb	r3, [r7, #28]
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	7e3b      	ldrb	r3, [r7, #24]
 80090ba:	4413      	add	r3, r2
 80090bc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 80090c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ce:	4413      	add	r3, r2
 80090d0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 80090d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090e2:	4413      	add	r3, r2
 80090e4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	7bda      	ldrb	r2, [r3, #15]
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	7c1a      	ldrb	r2, [r3, #16]
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	7c5a      	ldrb	r2, [r3, #17]
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009108:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009110:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8009112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bc90      	pop	{r4, r7}
 8009120:	4770      	bx	lr

08009122 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8009122:	b480      	push	{r7}
 8009124:	b087      	sub	sp, #28
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	460b      	mov	r3, r1
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	220c      	movs	r2, #12
 800914a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800914c:	897b      	ldrh	r3, [r7, #10]
 800914e:	b2da      	uxtb	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8009182:	2300      	movs	r3, #0
 8009184:	82fb      	strh	r3, [r7, #22]
 8009186:	e015      	b.n	80091b4 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8009188:	8afa      	ldrh	r2, [r7, #22]
 800918a:	897b      	ldrh	r3, [r7, #10]
 800918c:	429a      	cmp	r2, r3
 800918e:	d207      	bcs.n	80091a0 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8009190:	8afb      	ldrh	r3, [r7, #22]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	3302      	adds	r3, #2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	e006      	b.n	80091ae <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80091a0:	8afb      	ldrh	r3, [r7, #22]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	3302      	adds	r3, #2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80091ae:	8afb      	ldrh	r3, [r7, #22]
 80091b0:	3301      	adds	r3, #1
 80091b2:	82fb      	strh	r3, [r7, #22]
 80091b4:	8afb      	ldrh	r3, [r7, #22]
 80091b6:	2b0b      	cmp	r3, #11
 80091b8:	d9e6      	bls.n	8009188 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 80091ba:	bf00      	nop
 80091bc:	bf00      	nop
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	603a      	str	r2, [r7, #0]
 80091d2:	80fb      	strh	r3, [r7, #6]
 80091d4:	460b      	mov	r3, r1
 80091d6:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80091e4:	2300      	movs	r3, #0
 80091e6:	81fb      	strh	r3, [r7, #14]
 80091e8:	e00e      	b.n	8009208 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80091ea:	88ba      	ldrh	r2, [r7, #4]
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4413      	add	r3, r2
 80091f6:	89ba      	ldrh	r2, [r7, #12]
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80091fc:	89bb      	ldrh	r3, [r7, #12]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8009202:	89fb      	ldrh	r3, [r7, #14]
 8009204:	3301      	adds	r3, #1
 8009206:	81fb      	strh	r3, [r7, #14]
 8009208:	89fa      	ldrh	r2, [r7, #14]
 800920a:	88bb      	ldrh	r3, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d3ec      	bcc.n	80091ea <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	4603      	mov	r3, r0
 8009226:	6039      	str	r1, [r7, #0]
 8009228:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800922a:	2300      	movs	r3, #0
 800922c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800922e:	e00a      	b.n	8009246 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	b21a      	sxth	r2, r3
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	1c59      	adds	r1, r3, #1
 800923a:	6039      	str	r1, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b21b      	sxth	r3, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	b21b      	sxth	r3, r3
 8009244:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8009246:	88fb      	ldrh	r3, [r7, #6]
 8009248:	1e5a      	subs	r2, r3, #1
 800924a:	80fa      	strh	r2, [r7, #6]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ef      	bne.n	8009230 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8009250:	89fb      	ldrh	r3, [r7, #14]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	4603      	mov	r3, r0
 8009266:	603a      	str	r2, [r7, #0]
 8009268:	80fb      	strh	r3, [r7, #6]
 800926a:	460b      	mov	r3, r1
 800926c:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8009276:	88fb      	ldrh	r3, [r7, #6]
 8009278:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800927a:	2300      	movs	r3, #0
 800927c:	81fb      	strh	r3, [r7, #14]
 800927e:	e00f      	b.n	80092a0 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009280:	88ba      	ldrh	r2, [r7, #4]
 8009282:	89fb      	ldrh	r3, [r7, #14]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	4413      	add	r3, r2
 800928c:	89ba      	ldrh	r2, [r7, #12]
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8009292:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009296:	121b      	asrs	r3, r3, #8
 8009298:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800929a:	89fb      	ldrh	r3, [r7, #14]
 800929c:	3301      	adds	r3, #1
 800929e:	81fb      	strh	r3, [r7, #14]
 80092a0:	89fa      	ldrh	r2, [r7, #14]
 80092a2:	88bb      	ldrh	r3, [r7, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d3eb      	bcc.n	8009280 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	4603      	mov	r3, r0
 80092be:	6039      	str	r1, [r7, #0]
 80092c0:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 80092c2:	2300      	movs	r3, #0
 80092c4:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	b25b      	sxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	da0e      	bge.n	80092ee <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80092d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092d4:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80092d6:	e00a      	b.n	80092ee <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80092d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80092dc:	021b      	lsls	r3, r3, #8
 80092de:	b21a      	sxth	r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	b21b      	sxth	r3, r3
 80092ea:	4313      	orrs	r3, r2
 80092ec:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	1e5a      	subs	r2, r3, #1
 80092f2:	80fa      	strh	r2, [r7, #6]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1ef      	bne.n	80092d8 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80092f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	460b      	mov	r3, r1
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8009322:	2300      	movs	r3, #0
 8009324:	82fb      	strh	r3, [r7, #22]
 8009326:	e00e      	b.n	8009346 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009328:	897a      	ldrh	r2, [r7, #10]
 800932a:	8afb      	ldrh	r3, [r7, #22]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	3b01      	subs	r3, #1
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	b2d2      	uxtb	r2, r2
 8009338:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	0a1b      	lsrs	r3, r3, #8
 800933e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8009340:	8afb      	ldrh	r3, [r7, #22]
 8009342:	3301      	adds	r3, #1
 8009344:	82fb      	strh	r3, [r7, #22]
 8009346:	8afa      	ldrh	r2, [r7, #22]
 8009348:	897b      	ldrh	r3, [r7, #10]
 800934a:	429a      	cmp	r2, r3
 800934c:	d3ec      	bcc.n	8009328 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800936c:	e007      	b.n	800937e <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	021a      	lsls	r2, r3, #8
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	1c59      	adds	r1, r3, #1
 8009376:	6039      	str	r1, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	1e5a      	subs	r2, r3, #1
 8009382:	80fa      	strh	r2, [r7, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1f2      	bne.n	800936e <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	4603      	mov	r3, r0
 800939e:	6039      	str	r1, [r7, #0]
 80093a0:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	da0b      	bge.n	80093c8 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80093b0:	f04f 33ff 	mov.w	r3, #4294967295
 80093b4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80093b6:	e007      	b.n	80093c8 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	021a      	lsls	r2, r3, #8
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	1c59      	adds	r1, r3, #1
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	1e5a      	subs	r2, r3, #1
 80093cc:	80fa      	strh	r2, [r7, #6]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1f2      	bne.n	80093b8 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 80093d2:	68fb      	ldr	r3, [r7, #12]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	78fa      	ldrb	r2, [r7, #3]
 80093f8:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a

	status = VL53LX_WrByte(
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f893 339a 	ldrb.w	r3, [r3, #922]	; 0x39a
 8009402:	461a      	mov	r2, r3
 8009404:	2185      	movs	r1, #133	; 0x85
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7f9 f928 	bl	800265c <VL53LX_WrByte>
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8009410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8009428:	2101      	movs	r1, #1
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff ffd8 	bl	80093e0 <VL53LX_set_firmware_enable_register>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800944c:	2100      	movs	r1, #0
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff ffc6 	bl	80093e0 <VL53LX_set_firmware_enable_register>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	78fa      	ldrb	r2, [r7, #3]
 800947c:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	status = VL53LX_WrByte(
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8009486:	461a      	mov	r2, r3
 8009488:	2183      	movs	r1, #131	; 0x83
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7f9 f8e6 	bl	800265c <VL53LX_WrByte>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8009494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 80094ac:	2101      	movs	r1, #1
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff ffd8 	bl	8009464 <VL53LX_set_powerforce_register>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80094b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80094d0:	2100      	movs	r1, #0
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff ffc6 	bl	8009464 <VL53LX_set_powerforce_register>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80094dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	460a      	mov	r2, r1
 80094f2:	80fb      	strh	r3, [r7, #6]
 80094f4:	4613      	mov	r3, r2
 80094f6:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8009504:	88fb      	ldrh	r3, [r7, #6]
 8009506:	4618      	mov	r0, r3
 8009508:	f002 fed4 	bl	800c2b4 <VL53LX_calc_pll_period_us>
 800950c:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 800950e:	797b      	ldrb	r3, [r7, #5]
 8009510:	4618      	mov	r0, r3
 8009512:	f003 fabf 	bl	800ca94 <VL53LX_decode_vcsel_period>
 8009516:	4603      	mov	r3, r0
 8009518:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	4613      	mov	r3, r2
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	4413      	add	r3, r2
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	099b      	lsrs	r3, r3, #6
 800952a:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 800952c:	7cfa      	ldrb	r2, [r7, #19]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	fb02 f303 	mul.w	r3, r2, r3
 8009534:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	099b      	lsrs	r3, r3, #6
 800953a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800953c:	68fb      	ldr	r3, [r7, #12]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	4608      	mov	r0, r1
 8009552:	4611      	mov	r1, r2
 8009554:	461a      	mov	r2, r3
 8009556:	4603      	mov	r3, r0
 8009558:	817b      	strh	r3, [r7, #10]
 800955a:	460b      	mov	r3, r1
 800955c:	813b      	strh	r3, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	4a23      	ldr	r2, [pc, #140]	; (8009608 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800957c:	fb82 1203 	smull	r1, r2, r2, r3
 8009580:	1192      	asrs	r2, r2, #6
 8009582:	17db      	asrs	r3, r3, #31
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8009588:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800958c:	2b00      	cmp	r3, #0
 800958e:	da03      	bge.n	8009598 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8009590:	897b      	ldrh	r3, [r7, #10]
 8009592:	425b      	negs	r3, r3
 8009594:	b29b      	uxth	r3, r3
 8009596:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8009598:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da03      	bge.n	80095a8 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80095a0:	893b      	ldrh	r3, [r7, #8]
 80095a2:	425b      	negs	r3, r3
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80095a8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80095ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80095b0:	4413      	add	r3, r2
 80095b2:	015b      	lsls	r3, r3, #5
 80095b4:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	4a13      	ldr	r2, [pc, #76]	; (8009608 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80095ba:	fb82 1203 	smull	r1, r2, r2, r3
 80095be:	1192      	asrs	r2, r2, #6
 80095c0:	17db      	asrs	r3, r3, #31
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	4413      	add	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80095ce:	79fa      	ldrb	r2, [r7, #7]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	fb02 f303 	mul.w	r3, r2, r3
 80095d6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	3310      	adds	r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da00      	bge.n	80095e2 <VL53LX_calc_range_ignore_threshold+0x9a>
 80095e0:	331f      	adds	r3, #31
 80095e2:	115b      	asrs	r3, r3, #5
 80095e4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	db03      	blt.n	80095f6 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80095ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095f2:	83fb      	strh	r3, [r7, #30]
 80095f4:	e001      	b.n	80095fa <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80095fa:	8bfb      	ldrh	r3, [r7, #30]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3724      	adds	r7, #36	; 0x24
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	10624dd3 	.word	0x10624dd3

0800960c <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	e008      	b.n	8009638 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	031a      	lsls	r2, r3, #12
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	441a      	add	r2, r3
		timeout_mclks   =
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	fbb2 f3f3 	udiv	r3, r2, r3
 8009636:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8009638:	68fb      	ldr	r3, [r7, #12]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff ffd6 	bl	800960c <VL53LX_calc_timeout_mclks>
 8009660:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 f887 	bl	8009776 <VL53LX_encode_timeout>
 8009668:	4603      	mov	r3, r0
 800966a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800966c:	897b      	ldrh	r3, [r7, #10]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8009676:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8009682:	2100      	movs	r1, #0
 8009684:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8009686:	f04f 0000 	mov.w	r0, #0
 800968a:	f04f 0100 	mov.w	r1, #0
 800968e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	2000      	movs	r0, #0
 8009696:	4688      	mov	r8, r1
 8009698:	4681      	mov	r9, r0
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	2000      	movs	r0, #0
 800969e:	460c      	mov	r4, r1
 80096a0:	4605      	mov	r5, r0
 80096a2:	fb04 f009 	mul.w	r0, r4, r9
 80096a6:	fb08 f105 	mul.w	r1, r8, r5
 80096aa:	4401      	add	r1, r0
 80096ac:	fba8 2304 	umull	r2, r3, r8, r4
 80096b0:	4419      	add	r1, r3
 80096b2:	460b      	mov	r3, r1
 80096b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80096b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80096bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096c0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 80096c4:	f143 0b00 	adc.w	fp, r3, #0
 80096c8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80096cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	0b02      	lsrs	r2, r0, #12
 80096da:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80096de:	0b0b      	lsrs	r3, r1, #12
 80096e0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 80096e8:	697b      	ldr	r3, [r7, #20]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80096f4:	4770      	bx	lr
	...

080096f8 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800970c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8009710:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8009712:	4413      	add	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	da02      	bge.n	8009722 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	e005      	b.n	800972e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009728:	db01      	blt.n	800972e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800972a:	4b05      	ldr	r3, [pc, #20]	; (8009740 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 800972c:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8009732:	68bb      	ldr	r3, [r7, #8]

}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	0003ffff 	.word	0x0003ffff

08009744 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8009758:	88fb      	ldrh	r3, [r7, #6]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 f837 	bl	80097ce <VL53LX_decode_timeout>
 8009760:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff ff86 	bl	8009676 <VL53LX_calc_timeout_us>
 800976a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800976c:	68bb      	ldr	r3, [r7, #8]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8009776:	b480      	push	{r7}
 8009778:	b087      	sub	sp, #28
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3b01      	subs	r3, #1
 8009794:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009796:	e005      	b.n	80097a4 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	085b      	lsrs	r3, r3, #1
 800979c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800979e:	89fb      	ldrh	r3, [r7, #14]
 80097a0:	3301      	adds	r3, #1
 80097a2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1f4      	bne.n	8009798 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80097ae:	89fb      	ldrh	r3, [r7, #14]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80097bc:	4413      	add	r3, r2
 80097be:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80097c0:	8afb      	ldrh	r3, [r7, #22]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	4603      	mov	r3, r0
 80097d6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80097dc:	88fb      	ldrh	r3, [r7, #6]
 80097de:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80097e0:	88fa      	ldrh	r2, [r7, #6]
 80097e2:	0a12      	lsrs	r2, r2, #8
 80097e4:	b292      	uxth	r2, r2
 80097e6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80097e8:	3301      	adds	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80097ec:	68fb      	ldr	r3, [r7, #12]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009808:	2300      	movs	r3, #0
 800980a:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8009818:	887b      	ldrh	r3, [r7, #2]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800981e:	23f1      	movs	r3, #241	; 0xf1
 8009820:	77fb      	strb	r3, [r7, #31]
 8009822:	e05d      	b.n	80098e0 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	799a      	ldrb	r2, [r3, #6]
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff fe5b 	bl	80094e8 <VL53LX_calc_macro_period_us>
 8009832:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8009834:	6979      	ldr	r1, [r7, #20]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff fee8 	bl	800960c <VL53LX_calc_timeout_mclks>
 800983c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2bff      	cmp	r3, #255	; 0xff
 8009842:	d901      	bls.n	8009848 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8009844:	23ff      	movs	r3, #255	; 0xff
 8009846:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8009850:	6979      	ldr	r1, [r7, #20]
 8009852:	68b8      	ldr	r0, [r7, #8]
 8009854:	f7ff fef7 	bl	8009646 <VL53LX_calc_encoded_timeout>
 8009858:	4603      	mov	r3, r0
 800985a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800985c:	8a7b      	ldrh	r3, [r7, #18]
 800985e:	0a1b      	lsrs	r3, r3, #8
 8009860:	b29b      	uxth	r3, r3
 8009862:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009868:	8a7b      	ldrh	r3, [r7, #18]
 800986a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8009870:	6979      	ldr	r1, [r7, #20]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fee7 	bl	8009646 <VL53LX_calc_encoded_timeout>
 8009878:	4603      	mov	r3, r0
 800987a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800987c:	8a7b      	ldrh	r3, [r7, #18]
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	b29b      	uxth	r3, r3
 8009882:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009888:	8a7b      	ldrh	r3, [r7, #18]
 800988a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	7a5a      	ldrb	r2, [r3, #9]
 8009894:	887b      	ldrh	r3, [r7, #2]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff fe25 	bl	80094e8 <VL53LX_calc_macro_period_us>
 800989e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 80098a0:	6979      	ldr	r1, [r7, #20]
 80098a2:	68b8      	ldr	r0, [r7, #8]
 80098a4:	f7ff fecf 	bl	8009646 <VL53LX_calc_encoded_timeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80098ac:	8a7b      	ldrh	r3, [r7, #18]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80098b8:	8a7b      	ldrh	r3, [r7, #18]
 80098ba:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff febf 	bl	8009646 <VL53LX_calc_encoded_timeout>
 80098c8:	4603      	mov	r3, r0
 80098ca:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80098cc:	8a7b      	ldrh	r3, [r7, #18]
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80098d8:	8a7b      	ldrh	r3, [r7, #18]
 80098da:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80098e0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 80098ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f0:	b09e      	sub	sp, #120	; 0x78
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6578      	str	r0, [r7, #84]	; 0x54
 80098f6:	6539      	str	r1, [r7, #80]	; 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80098f8:	2300      	movs	r3, #0
 80098fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	f04f 0300 	mov.w	r3, #0
 8009912:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 8009916:	f04f 0200 	mov.w	r2, #0
 800991a:	f04f 0300 	mov.w	r3, #0
 800991e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8009922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009924:	885b      	ldrh	r3, [r3, #2]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d103      	bne.n	8009932 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800992a:	23f1      	movs	r3, #241	; 0xf1
 800992c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009930:	e0d6      	b.n	8009ae0 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8009932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 80d2 	beq.w	8009ae0 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800993c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800993e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8009940:	2b00      	cmp	r3, #0
 8009942:	f040 80cd 	bne.w	8009ae0 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8009946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994c:	2200      	movs	r2, #0
 800994e:	643b      	str	r3, [r7, #64]	; 0x40
 8009950:	647a      	str	r2, [r7, #68]	; 0x44
 8009952:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009956:	460b      	mov	r3, r1
 8009958:	3301      	adds	r3, #1
 800995a:	623b      	str	r3, [r7, #32]
 800995c:	4613      	mov	r3, r2
 800995e:	f143 0300 	adc.w	r3, r3, #0
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
 8009964:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009968:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800996c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800996e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009972:	b29b      	uxth	r3, r3
 8009974:	2200      	movs	r2, #0
 8009976:	64bb      	str	r3, [r7, #72]	; 0x48
 8009978:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800997a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800997c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009980:	4602      	mov	r2, r0
 8009982:	fb02 f203 	mul.w	r2, r2, r3
 8009986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009988:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800998c:	fb01 f303 	mul.w	r3, r1, r3
 8009990:	441a      	add	r2, r3
 8009992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009994:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009996:	fba3 4501 	umull	r4, r5, r3, r1
 800999a:	1953      	adds	r3, r2, r5
 800999c:	461d      	mov	r5, r3
 800999e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 80099a2:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 80099a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80099ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80099b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80099b4:	460b      	mov	r3, r1
 80099b6:	3301      	adds	r3, #1
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	4613      	mov	r3, r2
 80099bc:	f143 0300 	adc.w	r3, r3, #0
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80099c6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 80099ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2200      	movs	r2, #0
 80099d2:	633b      	str	r3, [r7, #48]	; 0x30
 80099d4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 80099d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80099dc:	4622      	mov	r2, r4
 80099de:	fb02 f203 	mul.w	r2, r2, r3
 80099e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099e4:	4629      	mov	r1, r5
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	441a      	add	r2, r3
 80099ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099ee:	4621      	mov	r1, r4
 80099f0:	fba3 ab01 	umull	sl, fp, r3, r1
 80099f4:	eb02 030b 	add.w	r3, r2, fp
 80099f8:	469b      	mov	fp, r3
 80099fa:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80099fe:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8009a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	17da      	asrs	r2, r3, #31
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 8009a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a0e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8009a12:	4622      	mov	r2, r4
 8009a14:	fb02 f203 	mul.w	r2, r2, r3
 8009a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	fb01 f303 	mul.w	r3, r1, r3
 8009a20:	4413      	add	r3, r2
 8009a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a24:	4621      	mov	r1, r4
 8009a26:	fba2 8901 	umull	r8, r9, r2, r1
 8009a2a:	444b      	add	r3, r9
 8009a2c:	4699      	mov	r9, r3
 8009a2e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 8009a32:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 8009a36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009a3a:	0fd9      	lsrs	r1, r3, #31
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	6139      	str	r1, [r7, #16]
 8009a40:	6178      	str	r0, [r7, #20]
 8009a42:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009a46:	4621      	mov	r1, r4
 8009a48:	1889      	adds	r1, r1, r2
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	eb43 0101 	adc.w	r1, r3, r1
 8009a52:	60f9      	str	r1, [r7, #12]
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009a60:	4621      	mov	r1, r4
 8009a62:	084a      	lsrs	r2, r1, #1
 8009a64:	4629      	mov	r1, r5
 8009a66:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	104b      	asrs	r3, r1, #1
 8009a6e:	4610      	mov	r0, r2
 8009a70:	4619      	mov	r1, r3
 8009a72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009a76:	1814      	adds	r4, r2, r0
 8009a78:	603c      	str	r4, [r7, #0]
 8009a7a:	414b      	adcs	r3, r1
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009a82:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 8009a86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	d009      	beq.n	8009aa2 <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8009a8e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009a92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a96:	f7f7 f90f 	bl	8000cb8 <__aeabi_ldivmod>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8009aa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8009aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8009ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8009ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8009abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009abe:	7852      	ldrb	r2, [r2, #1]
 8009ac0:	0852      	lsrs	r2, r2, #1
 8009ac2:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8009ac4:	441a      	add	r2, r3
 8009ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8009acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8009ad2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ad4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8009ad6:	fb93 f2f2 	sdiv	r2, r3, r2
 8009ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009adc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8009ae0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3778      	adds	r7, #120	; 0x78
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009aee <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b087      	sub	sp, #28
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
	amb_thresh_low  = 1024 *
 8009b0e:	029b      	lsls	r3, r3, #10
 8009b10:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	amb_thresh_high = 1024 *
 8009b18:	029b      	lsls	r3, r3, #10
 8009b1a:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f040 8095 	bne.w	8009c56 <VL53LX_hist_get_bin_sequence_config+0x168>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
		pdata->bin_seq[5] =
 8009b32:	091b      	lsrs	r3, r3, #4
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		pdata->bin_seq[3] =
 8009b50:	091b      	lsrs	r3, r3, #4
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8009b5e:	f003 030f 	and.w	r3, r3, #15
 8009b62:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
		pdata->bin_seq[1] =
 8009b6e:	091b      	lsrs	r3, r3, #4
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	da2c      	bge.n	8009bec <VL53LX_hist_get_bin_sequence_config+0xfe>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[5] =
 8009b98:	091b      	lsrs	r3, r3, #4
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[3] =
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[1] =
 8009bd4:	091b      	lsrs	r3, r3, #4
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 8009be2:	f003 030f 	and.w	r3, r3, #15
 8009be6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	f340 80c2 	ble.w	8009d7e <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
			pdata->bin_seq[5] =
 8009c00:	091b      	lsrs	r3, r3, #4
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
			& 0x0F;
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
			pdata->bin_seq[3] =
 8009c1e:	091b      	lsrs	r3, r3, #4
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
			& 0x0F;
 8009c2c:	f003 030f 	and.w	r3, r3, #15
 8009c30:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
			pdata->bin_seq[1] =
 8009c3c:	091b      	lsrs	r3, r3, #4
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
			& 0x0F;
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	731a      	strb	r2, [r3, #12]
 8009c54:	e093      	b.n	8009d7e <VL53LX_hist_get_bin_sequence_config+0x290>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
			& 0x0F;
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
		pdata->bin_seq[3] =
 8009c7c:	091b      	lsrs	r3, r3, #4
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f893 3326 	ldrb.w	r3, [r3, #806]	; 0x326
		pdata->bin_seq[1] =
 8009c9a:	091b      	lsrs	r3, r3, #4
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f893 3326 	ldrb.w	r3, [r3, #806]	; 0x326
			& 0x0F;
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	da2c      	bge.n	8009d18 <VL53LX_hist_get_bin_sequence_config+0x22a>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
			pdata->bin_seq[5] =
 8009cc4:	091b      	lsrs	r3, r3, #4
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
			& 0x0F;
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
			pdata->bin_seq[3] =
 8009ce2:	091b      	lsrs	r3, r3, #4
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
			& 0x0F;
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[1] =
 8009d00:	091b      	lsrs	r3, r3, #4
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	dd2c      	ble.n	8009d7e <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
			pdata->bin_seq[5] =
 8009d2a:	091b      	lsrs	r3, r3, #4
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
			& 0x0F;
 8009d38:	f003 030f 	and.w	r3, r3, #15
 8009d3c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
			pdata->bin_seq[3] =
 8009d48:	091b      	lsrs	r3, r3, #4
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
			& 0x0F;
 8009d56:	f003 030f 	and.w	r3, r3, #15
 8009d5a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
			pdata->bin_seq[1] =
 8009d66:	091b      	lsrs	r3, r3, #4
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
			& 0x0F;
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009d7e:	2300      	movs	r3, #0
 8009d80:	75fb      	strb	r3, [r7, #23]
 8009d82:	e007      	b.n	8009d94 <VL53LX_hist_get_bin_sequence_config+0x2a6>
		pdata->bin_rep[i] = 1;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	4413      	add	r3, r2
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	3301      	adds	r3, #1
 8009d92:	75fb      	strb	r3, [r7, #23]
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	d9f4      	bls.n	8009d84 <VL53LX_hist_get_bin_sequence_config+0x296>

	LOG_FUNCTION_END(0);

}
 8009d9a:	bf00      	nop
 8009d9c:	bf00      	nop
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b093      	sub	sp, #76	; 0x4c
 8009dac:	af04      	add	r7, sp, #16
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009db6:	2300      	movs	r3, #0
 8009db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	f893 326f 	ldrb.w	r3, [r3, #623]	; 0x26f
 8009de6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8009df0:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	f8b3 3272 	ldrh.w	r3, [r3, #626]	; 0x272
 8009df8:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
 8009e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8009e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e08:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8009e0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b07      	cmp	r3, #7
 8009e16:	d006      	beq.n	8009e26 <VL53LX_hist_phase_consistency_check+0x7e>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d002      	beq.n	8009e26 <VL53LX_hist_phase_consistency_check+0x7e>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8009e20:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009e24:	e0ec      	b.n	800a000 <VL53LX_hist_phase_consistency_check+0x258>



	if (phase_tolerance == 0)
 8009e26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <VL53LX_hist_phase_consistency_check+0x8a>
		return status;
 8009e2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009e30:	e0e6      	b.n	800a000 <VL53LX_hist_phase_consistency_check+0x258>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009e38:	e0d9      	b.n	8009fee <VL53LX_hist_phase_consistency_check+0x246>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009e3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	214c      	movs	r1, #76	; 0x4c
 8009e42:	fb01 f303 	mul.w	r3, r1, r3
 8009e46:	4413      	add	r3, r2
 8009e48:	335e      	adds	r3, #94	; 0x5e
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b09      	cmp	r3, #9
 8009e4e:	d00b      	beq.n	8009e68 <VL53LX_hist_phase_consistency_check+0xc0>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8009e50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	214c      	movs	r1, #76	; 0x4c
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	335e      	adds	r3, #94	; 0x5e
 8009e60:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009e62:	2b13      	cmp	r3, #19
 8009e64:	f040 80bd 	bne.w	8009fe2 <VL53LX_hist_phase_consistency_check+0x23a>





		if (prange_prev->active_objects == 0)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	795b      	ldrb	r3, [r3, #5]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <VL53LX_hist_phase_consistency_check+0xde>
			prange_curr->VL53LX_p_003[lc].range_status =
 8009e70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	214c      	movs	r1, #76	; 0x4c
 8009e78:	fb01 f303 	mul.w	r3, r1, r3
 8009e7c:	4413      	add	r3, r2
 8009e7e:	335e      	adds	r3, #94	; 0x5e
 8009e80:	2217      	movs	r2, #23
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e009      	b.n	8009e9a <VL53LX_hist_phase_consistency_check+0xf2>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8009e86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	214c      	movs	r1, #76	; 0x4c
 8009e8e:	fb01 f303 	mul.w	r3, r1, r3
 8009e92:	4413      	add	r3, r2
 8009e94:	335e      	adds	r3, #94	; 0x5e
 8009e96:	2207      	movs	r2, #7
 8009e98:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009ea0:	e097      	b.n	8009fd2 <VL53LX_hist_phase_consistency_check+0x22a>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009ea2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	214c      	movs	r1, #76	; 0x4c
 8009eaa:	fb01 f303 	mul.w	r3, r1, r3
 8009eae:	4413      	add	r3, r2
 8009eb0:	3354      	adds	r3, #84	; 0x54
 8009eb2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8009eb4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4403      	add	r3, r0
 8009ec4:	3310      	adds	r3, #16
 8009ec6:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	d915      	bls.n	8009ef8 <VL53LX_hist_phase_consistency_check+0x150>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009ecc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	214c      	movs	r1, #76	; 0x4c
 8009ed4:	fb01 f303 	mul.w	r3, r1, r3
 8009ed8:	4413      	add	r3, r2
 8009eda:	3354      	adds	r3, #84	; 0x54
 8009edc:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8009ede:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4403      	add	r3, r0
 8009eee:	3310      	adds	r3, #16
 8009ef0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009ef2:	1acb      	subs	r3, r1, r3
 8009ef4:	867b      	strh	r3, [r7, #50]	; 0x32
 8009ef6:	e014      	b.n	8009f22 <VL53LX_hist_phase_consistency_check+0x17a>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8009ef8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	4613      	mov	r3, r2
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	440b      	add	r3, r1
 8009f08:	3310      	adds	r3, #16
 8009f0a:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009f0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	204c      	movs	r0, #76	; 0x4c
 8009f14:	fb00 f303 	mul.w	r3, r0, r3
 8009f18:	440b      	add	r3, r1
 8009f1a:	3354      	adds	r3, #84	; 0x54
 8009f1c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8009f22:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d24e      	bcs.n	8009fc8 <VL53LX_hist_phase_consistency_check+0x220>





				if (status == VL53LX_ERROR_NONE)
 8009f2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d125      	bne.n	8009f7e <VL53LX_hist_phase_consistency_check+0x1d6>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8009f32:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8009f36:	4613      	mov	r3, r2
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	3308      	adds	r3, #8
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8009f44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8009f48:	224c      	movs	r2, #76	; 0x4c
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	3310      	adds	r3, #16
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	4413      	add	r3, r2
 8009f54:	3304      	adds	r3, #4
 8009f56:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009f58:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8009f5c:	f107 0217 	add.w	r2, r7, #23
 8009f60:	9203      	str	r2, [sp, #12]
 8009f62:	f107 021c 	add.w	r2, r7, #28
 8009f66:	9202      	str	r2, [sp, #8]
 8009f68:	f107 0218 	add.w	r2, r7, #24
 8009f6c:	9201      	str	r2, [sp, #4]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4623      	mov	r3, r4
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	f000 f848 	bl	800a008 <VL53LX_hist_events_consistency_check>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8009f7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d115      	bne.n	8009fb2 <VL53LX_hist_phase_consistency_check+0x20a>
					range_status ==
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8009f88:	2b09      	cmp	r3, #9
 8009f8a:	d112      	bne.n	8009fb2 <VL53LX_hist_phase_consistency_check+0x20a>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009f8c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8009f90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8009f94:	224c      	movs	r2, #76	; 0x4c
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	3310      	adds	r3, #16
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	f107 0217 	add.w	r2, r7, #23
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	f000 fb44 	bl	800a634 <VL53LX_hist_merged_pulse_check>
 8009fac:	4603      	mov	r3, r0
 8009fae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8009fb2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009fb6:	7df8      	ldrb	r0, [r7, #23]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	214c      	movs	r1, #76	; 0x4c
 8009fbc:	fb01 f303 	mul.w	r3, r1, r3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	335e      	adds	r3, #94	; 0x5e
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009fc8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009fcc:	3301      	adds	r3, #1
 8009fce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	795b      	ldrb	r3, [r3, #5]
 8009fd6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	f4ff af61 	bcc.w	8009ea2 <VL53LX_hist_phase_consistency_check+0xfa>
 8009fe0:	e000      	b.n	8009fe4 <VL53LX_hist_phase_consistency_check+0x23c>
			continue;
 8009fe2:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009fe4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009fe8:	3301      	adds	r3, #1
 8009fea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	7c9b      	ldrb	r3, [r3, #18]
 8009ff2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	f4ff af1f 	bcc.w	8009e3a <VL53LX_hist_phase_consistency_check+0x92>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009ffc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a000:	4618      	mov	r0, r3
 800a002:	373c      	adds	r7, #60	; 0x3c
 800a004:	46bd      	mov	sp, r7
 800a006:	bd90      	pop	{r4, r7, pc}

0800a008 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800a008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a00c:	b0d4      	sub	sp, #336	; 0x150
 800a00e:	af00      	add	r7, sp, #0
 800a010:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800a014:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800a01e:	460b      	mov	r3, r1
 800a020:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a024:	2300      	movs	r3, #0
 800a026:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800a036:	f04f 0200 	mov.w	r2, #0
 800a03a:	f04f 0300 	mov.w	r3, #0
 800a03e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800a042:	f04f 0200 	mov.w	r2, #0
 800a046:	f04f 0300 	mov.w	r3, #0
 800a04a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800a05a:	f04f 0200 	mov.w	r2, #0
 800a05e:	f04f 0300 	mov.w	r3, #0
 800a062:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	f04f 0300 	mov.w	r3, #0
 800a07a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800a096:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a09e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a0a2:	2209      	movs	r2, #9
 800a0a4:	701a      	strb	r2, [r3, #0]
		return status;
 800a0a6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a0aa:	e2bd      	b.n	800a628 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800a0ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0b8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800a0bc:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	f143 0300 	adc.w	r3, r3, #0
 800a0ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0d2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800a0d6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800a0da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a0de:	885b      	ldrh	r3, [r3, #2]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	469a      	mov	sl, r3
 800a0e6:	4693      	mov	fp, r2
 800a0e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a0ec:	fb0a f203 	mul.w	r2, sl, r3
 800a0f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a0f4:	fb0b f303 	mul.w	r3, fp, r3
 800a0f8:	441a      	add	r2, r3
 800a0fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a0fe:	fba3 450a 	umull	r4, r5, r3, sl
 800a102:	1953      	adds	r3, r2, r5
 800a104:	461d      	mov	r5, r3
 800a106:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800a10a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800a10e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2200      	movs	r2, #0
 800a116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a11a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a11e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a122:	460b      	mov	r3, r1
 800a124:	3301      	adds	r3, #1
 800a126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a12a:	4613      	mov	r3, r2
 800a12c:	f143 0300 	adc.w	r3, r3, #0
 800a130:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a134:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800a138:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800a13c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a140:	8adb      	ldrh	r3, [r3, #22]
 800a142:	b29b      	uxth	r3, r3
 800a144:	2200      	movs	r2, #0
 800a146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a14a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a14e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a152:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800a156:	4622      	mov	r2, r4
 800a158:	fb02 f203 	mul.w	r2, r2, r3
 800a15c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a160:	4629      	mov	r1, r5
 800a162:	fb01 f303 	mul.w	r3, r1, r3
 800a166:	441a      	add	r2, r3
 800a168:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a16c:	4621      	mov	r1, r4
 800a16e:	fba3 8901 	umull	r8, r9, r3, r1
 800a172:	eb02 0309 	add.w	r3, r2, r9
 800a176:	4699      	mov	r9, r3
 800a178:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800a17c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800a180:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a184:	f04f 0000 	mov.w	r0, #0
 800a188:	f04f 0100 	mov.w	r1, #0
 800a18c:	0319      	lsls	r1, r3, #12
 800a18e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800a192:	0310      	lsls	r0, r2, #12
 800a194:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	if (tmpc != 0) {
 800a198:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a19c:	4313      	orrs	r3, r2
 800a19e:	d035      	beq.n	800a20c <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 800a1a0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a1a4:	0fd9      	lsrs	r1, r3, #31
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a1ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800a1b0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	1889      	adds	r1, r1, r2
 800a1b8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a1bc:	4629      	mov	r1, r5
 800a1be:	eb43 0101 	adc.w	r1, r3, r1
 800a1c2:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800a1c6:	f04f 0200 	mov.w	r2, #0
 800a1ca:	f04f 0300 	mov.w	r3, #0
 800a1ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	084a      	lsrs	r2, r1, #1
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a1dc:	4629      	mov	r1, r5
 800a1de:	104b      	asrs	r3, r1, #1
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a1e8:	1814      	adds	r4, r2, r0
 800a1ea:	67bc      	str	r4, [r7, #120]	; 0x78
 800a1ec:	414b      	adcs	r3, r1
 800a1ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1f0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800a1f4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 800a1f8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a1fc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a200:	f7f6 fd5a 	bl	8000cb8 <__aeabi_ldivmod>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800a20c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a210:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a214:	fb03 f102 	mul.w	r1, r3, r2
 800a218:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a21c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a220:	fb02 f303 	mul.w	r3, r2, r3
 800a224:	18ca      	adds	r2, r1, r3
 800a226:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a22a:	fba3 1303 	umull	r1, r3, r3, r3
 800a22e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a232:	460b      	mov	r3, r1
 800a234:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a238:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a23c:	18d3      	adds	r3, r2, r3
 800a23e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a242:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800a246:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800a24a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800a24e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a252:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a256:	6739      	str	r1, [r7, #112]	; 0x70
 800a258:	f143 0300 	adc.w	r3, r3, #0
 800a25c:	677b      	str	r3, [r7, #116]	; 0x74
 800a25e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800a262:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800a266:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da08      	bge.n	800a280 <VL53LX_hist_events_consistency_check+0x278>
 800a26e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a272:	1851      	adds	r1, r2, r1
 800a274:	66b9      	str	r1, [r7, #104]	; 0x68
 800a276:	f143 0300 	adc.w	r3, r3, #0
 800a27a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a27c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a280:	f04f 0000 	mov.w	r0, #0
 800a284:	f04f 0100 	mov.w	r1, #0
 800a288:	0b10      	lsrs	r0, r2, #12
 800a28a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a28e:	1319      	asrs	r1, r3, #12
 800a290:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 800a294:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	2200      	movs	r2, #0
 800a29c:	663b      	str	r3, [r7, #96]	; 0x60
 800a29e:	667a      	str	r2, [r7, #100]	; 0x64
 800a2a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800a2a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800a2a8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2b4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800a2b8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a2bc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	1a51      	subs	r1, r2, r1
 800a2c4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	eb63 0301 	sbc.w	r3, r3, r1
 800a2cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800a2d2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800a2d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a2da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2de:	fb03 f102 	mul.w	r1, r3, r2
 800a2e2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a2e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a2ea:	fb02 f303 	mul.w	r3, r2, r3
 800a2ee:	4419      	add	r1, r3
 800a2f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a2f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a300:	4613      	mov	r3, r2
 800a302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a30a:	18cb      	adds	r3, r1, r3
 800a30c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a310:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800a314:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800a318:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800a31c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a320:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a324:	6539      	str	r1, [r7, #80]	; 0x50
 800a326:	f143 0300 	adc.w	r3, r3, #0
 800a32a:	657b      	str	r3, [r7, #84]	; 0x54
 800a32c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800a330:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800a334:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a338:	2b00      	cmp	r3, #0
 800a33a:	da08      	bge.n	800a34e <VL53LX_hist_events_consistency_check+0x346>
 800a33c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a340:	1851      	adds	r1, r2, r1
 800a342:	64b9      	str	r1, [r7, #72]	; 0x48
 800a344:	f143 0300 	adc.w	r3, r3, #0
 800a348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a34a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a34e:	f04f 0000 	mov.w	r0, #0
 800a352:	f04f 0100 	mov.w	r1, #0
 800a356:	0b10      	lsrs	r0, r2, #12
 800a358:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a35c:	1319      	asrs	r1, r3, #12
 800a35e:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800a362:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a366:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800a36a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	2200      	movs	r2, #0
 800a372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a376:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a37a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a37e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800a382:	4622      	mov	r2, r4
 800a384:	fb02 f203 	mul.w	r2, r2, r3
 800a388:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a38c:	4629      	mov	r1, r5
 800a38e:	fb01 f303 	mul.w	r3, r1, r3
 800a392:	441a      	add	r2, r3
 800a394:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a398:	4621      	mov	r1, r4
 800a39a:	fba3 1301 	umull	r1, r3, r3, r1
 800a39e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3ac:	18d3      	adds	r3, r2, r3
 800a3ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3b2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800a3b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800a3ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800a3be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a3c2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a3c6:	6439      	str	r1, [r7, #64]	; 0x40
 800a3c8:	f143 0300 	adc.w	r3, r3, #0
 800a3cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800a3d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800a3d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da08      	bge.n	800a3f0 <VL53LX_hist_events_consistency_check+0x3e8>
 800a3de:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a3e2:	1851      	adds	r1, r2, r1
 800a3e4:	63b9      	str	r1, [r7, #56]	; 0x38
 800a3e6:	f143 0300 	adc.w	r3, r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3f0:	f04f 0000 	mov.w	r0, #0
 800a3f4:	f04f 0100 	mov.w	r1, #0
 800a3f8:	0b10      	lsrs	r0, r2, #12
 800a3fa:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800a3fe:	1319      	asrs	r1, r3, #12
 800a400:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800a404:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a408:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800a40c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	2200      	movs	r2, #0
 800a414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a418:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a420:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800a424:	4622      	mov	r2, r4
 800a426:	fb02 f203 	mul.w	r2, r2, r3
 800a42a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a42e:	4629      	mov	r1, r5
 800a430:	fb01 f303 	mul.w	r3, r1, r3
 800a434:	441a      	add	r2, r3
 800a436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a43a:	4621      	mov	r1, r4
 800a43c:	fba3 1301 	umull	r1, r3, r3, r1
 800a440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a444:	460b      	mov	r3, r1
 800a446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a44e:	18d3      	adds	r3, r2, r3
 800a450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a454:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800a458:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800a45c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800a460:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a464:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800a468:	6339      	str	r1, [r7, #48]	; 0x30
 800a46a:	f143 0300 	adc.w	r3, r3, #0
 800a46e:	637b      	str	r3, [r7, #52]	; 0x34
 800a470:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800a474:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800a478:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a47c:	4610      	mov	r0, r2
 800a47e:	4619      	mov	r1, r3
 800a480:	2900      	cmp	r1, #0
 800a482:	da08      	bge.n	800a496 <VL53LX_hist_events_consistency_check+0x48e>
 800a484:	f640 73ff 	movw	r3, #4095	; 0xfff
 800a488:	18c3      	adds	r3, r0, r3
 800a48a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a48c:	f141 0300 	adc.w	r3, r1, #0
 800a490:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a492:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a496:	f04f 0200 	mov.w	r2, #0
 800a49a:	f04f 0300 	mov.w	r3, #0
 800a49e:	0b02      	lsrs	r2, r0, #12
 800a4a0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a4a4:	130b      	asrs	r3, r1, #12
 800a4a6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800a4aa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a4ae:	1c91      	adds	r1, r2, #2
 800a4b0:	6239      	str	r1, [r7, #32]
 800a4b2:	f143 0300 	adc.w	r3, r3, #0
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a4bc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800a4c0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da06      	bge.n	800a4d6 <VL53LX_hist_events_consistency_check+0x4ce>
 800a4c8:	1cd1      	adds	r1, r2, #3
 800a4ca:	61b9      	str	r1, [r7, #24]
 800a4cc:	f143 0300 	adc.w	r3, r3, #0
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4d6:	f04f 0000 	mov.w	r0, #0
 800a4da:	f04f 0100 	mov.w	r1, #0
 800a4de:	0890      	lsrs	r0, r2, #2
 800a4e0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a4e4:	1099      	asrs	r1, r3, #2
 800a4e6:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800a4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ee:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	617a      	str	r2, [r7, #20]
 800a4f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a4fa:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800a4fe:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a502:	1c91      	adds	r1, r2, #2
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	f143 0300 	adc.w	r3, r3, #0
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a510:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800a514:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a518:	2b00      	cmp	r3, #0
 800a51a:	da06      	bge.n	800a52a <VL53LX_hist_events_consistency_check+0x522>
 800a51c:	1cd1      	adds	r1, r2, #3
 800a51e:	6039      	str	r1, [r7, #0]
 800a520:	f143 0300 	adc.w	r3, r3, #0
 800a524:	607b      	str	r3, [r7, #4]
 800a526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52a:	f04f 0000 	mov.w	r0, #0
 800a52e:	f04f 0100 	mov.w	r1, #0
 800a532:	0890      	lsrs	r0, r2, #2
 800a534:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a538:	1099      	asrs	r1, r3, #2
 800a53a:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800a53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a542:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800a544:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 800a548:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800a54a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800a54e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800a550:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800a554:	4413      	add	r3, r2
 800a556:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800a55a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a55e:	011b      	lsls	r3, r3, #4
 800a560:	4618      	mov	r0, r3
 800a562:	f001 ffb0 	bl	800c4c6 <VL53LX_isqrt>
 800a566:	4603      	mov	r3, r0
 800a568:	461a      	mov	r2, r3
	*pevents_tolerance =
 800a56a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a56e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800a570:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800a57a:	fb03 f202 	mul.w	r2, r3, r2
 800a57e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a582:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800a584:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f103 0220 	add.w	r2, r3, #32
 800a58e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a592:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800a594:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	da00      	bge.n	800a5a0 <VL53LX_hist_events_consistency_check+0x598>
 800a59e:	333f      	adds	r3, #63	; 0x3f
 800a5a0:	119b      	asrs	r3, r3, #6
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a5a8:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800a5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c0:	1a9b      	subs	r3, r3, r2
 800a5c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800a5c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	da08      	bge.n	800a5e4 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800a5d2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5da:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a5dc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e007      	b.n	800a5f4 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800a5e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5e8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a5ec:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a5ee:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a5f2:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800a5f4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	dd0b      	ble.n	800a61c <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800a604:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800a608:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800a60a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800a60e:	429a      	cmp	r2, r3
 800a610:	d204      	bcs.n	800a61c <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800a612:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a616:	2214      	movs	r2, #20
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	e003      	b.n	800a624 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a61c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a620:	2209      	movs	r2, #9
 800a622:	701a      	strb	r2, [r3, #0]





	return status;
 800a624:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800a628:	4618      	mov	r0, r3
 800a62a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800a62e:	46bd      	mov	sp, r7
 800a630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a634 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800a642:	2300      	movs	r3, #0
 800a644:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a656:	429a      	cmp	r2, r3
 800a658:	dd0b      	ble.n	800a672 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a660:	b29a      	uxth	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a668:	b29b      	uxth	r3, r3
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	b29b      	uxth	r3, r3
		delta_mm =
 800a66e:	82fb      	strh	r3, [r7, #22]
 800a670:	e00a      	b.n	800a688 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a678:	b29a      	uxth	r2, r3
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a680:	b29b      	uxth	r3, r3
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	b29b      	uxth	r3, r3
		delta_mm =
 800a686:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800a688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd09      	ble.n	800a6a4 <VL53LX_hist_merged_pulse_check+0x70>
 800a690:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a698:	429a      	cmp	r2, r3
 800a69a:	dd03      	ble.n	800a6a4 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2216      	movs	r2, #22
 800a6a0:	701a      	strb	r2, [r3, #0]
 800a6a2:	e002      	b.n	800a6aa <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2209      	movs	r2, #9
 800a6a8:	701a      	strb	r2, [r3, #0]

	return status;
 800a6aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	371c      	adds	r7, #28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b08e      	sub	sp, #56	; 0x38
 800a6be:	af04      	add	r7, sp, #16
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f893 3288 	ldrb.w	r3, [r3, #648]	; 0x288
 800a6e0:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800a6e8:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a6f0:	2b09      	cmp	r3, #9
 800a6f2:	d009      	beq.n	800a708 <VL53LX_hist_xmonitor_consistency_check+0x4e>
		prange_curr->range_status ==
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a6fa:	2b13      	cmp	r3, #19
 800a6fc:	d004      	beq.n	800a708 <VL53LX_hist_xmonitor_consistency_check+0x4e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a704:	2b14      	cmp	r3, #20
 800a706:	d129      	bne.n	800a75c <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a70e:	2b09      	cmp	r3, #9
 800a710:	d009      	beq.n	800a726 <VL53LX_hist_xmonitor_consistency_check+0x6c>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a718:	2b13      	cmp	r3, #19
 800a71a:	d004      	beq.n	800a726 <VL53LX_hist_xmonitor_consistency_check+0x6c>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a722:	2b14      	cmp	r3, #20
 800a724:	d11a      	bne.n	800a75c <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2209      	movs	r2, #9
 800a72a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800a738:	8bb9      	ldrh	r1, [r7, #28]
 800a73a:	7ff8      	ldrb	r0, [r7, #31]
 800a73c:	9303      	str	r3, [sp, #12]
 800a73e:	f107 0318 	add.w	r3, r7, #24
 800a742:	9302      	str	r3, [sp, #8]
 800a744:	f107 0314 	add.w	r3, r7, #20
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4613      	mov	r3, r2
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	f7ff fc59 	bl	800a008 <VL53LX_hist_events_consistency_check>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800a75c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a760:	4618      	mov	r0, r3
 800a762:	3728      	adds	r7, #40	; 0x28
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a774:	2300      	movs	r3, #0
 800a776:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a790:	2b00      	cmp	r3, #0
 800a792:	d019      	beq.n	800a7c8 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 fffa 	bl	800c794 <VL53LX_calc_pll_period_mm>
 800a7a0:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	fb02 f303 	mul.w	r3, r2, r3
 800a7b4:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a7bc:	0bdb      	lsrs	r3, r3, #15
 800a7be:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	b21a      	sxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a7c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b08d      	sub	sp, #52	; 0x34
 800a7d8:	af04      	add	r7, sp, #16
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	4611      	mov	r1, r2
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4623      	mov	r3, r4
 800a7e4:	80fb      	strh	r3, [r7, #6]
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	80bb      	strh	r3, [r7, #4]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	70fb      	strb	r3, [r7, #3]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800a812:	78b9      	ldrb	r1, [r7, #2]
 800a814:	78f8      	ldrb	r0, [r7, #3]
 800a816:	f107 030c 	add.w	r3, r7, #12
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	f107 030e 	add.w	r3, r7, #14
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	23ff      	movs	r3, #255	; 0xff
 800a82e:	22c7      	movs	r2, #199	; 0xc7
 800a830:	f000 fa03 	bl	800ac3a <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800a834:	89fb      	ldrh	r3, [r7, #14]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d050      	beq.n	800a8dc <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800a83a:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d04d      	beq.n	800a8dc <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800a840:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800a844:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a848:	78b9      	ldrb	r1, [r7, #2]
 800a84a:	78f8      	ldrb	r0, [r7, #3]
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	f107 030a 	add.w	r3, r7, #10
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	4623      	mov	r3, r4
 800a864:	f000 f9e9 	bl	800ac3a <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800a86c:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800a86e:	897b      	ldrh	r3, [r7, #10]
 800a870:	461a      	mov	r2, r3
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	fb02 f303 	mul.w	r3, r2, r3
 800a878:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800a87a:	89fb      	ldrh	r3, [r7, #14]
 800a87c:	461a      	mov	r2, r3
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	fbb3 f3f2 	udiv	r3, r3, r2
 800a884:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800a88a:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800a88c:	893b      	ldrh	r3, [r7, #8]
 800a88e:	461a      	mov	r2, r3
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	fb02 f303 	mul.w	r3, r2, r3
 800a896:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800a898:	89bb      	ldrh	r3, [r7, #12]
 800a89a:	461a      	mov	r2, r3
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800a8a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	fb02 f303 	mul.w	r3, r2, r3
 800a8ae:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800a8b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	4413      	add	r3, r2
 800a8be:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a8c0:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800a8c2:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a8c4:	4413      	add	r3, r2
 800a8c6:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d008      	beq.n	800a8e0 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	009a      	lsls	r2, r3, #2
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	e002      	b.n	800a8e2 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800a8dc:	bf00      	nop
 800a8de:	e000      	b.n	800a8e2 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800a8e0:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	b21a      	sxth	r2, r3
 800a8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e8:	801a      	strh	r2, [r3, #0]

}
 800a8ea:	bf00      	nop
 800a8ec:	3724      	adds	r7, #36	; 0x24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd90      	pop	{r4, r7, pc}

0800a8f2 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	08db      	lsrs	r3, r3, #3
 800a906:	b2da      	uxtb	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	b2da      	uxtb	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	461a      	mov	r2, r3
 800a91e:	2301      	movs	r3, #1
 800a920:	4093      	lsls	r3, r2
 800a922:	b2da      	uxtb	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	701a      	strb	r2, [r3, #0]

}
 800a928:	bf00      	nop
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	603a      	str	r2, [r7, #0]
 800a93e:	71fb      	strb	r3, [r7, #7]
 800a940:	460b      	mov	r3, r1
 800a942:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800a944:	79fb      	ldrb	r3, [r7, #7]
 800a946:	2b07      	cmp	r3, #7
 800a948:	d90a      	bls.n	800a960 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800a94a:	79bb      	ldrb	r3, [r7, #6]
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	b2db      	uxtb	r3, r3
 800a956:	3b71      	subs	r3, #113	; 0x71
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800a95e:	e00a      	b.n	800a976 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800a960:	79bb      	ldrb	r3, [r7, #6]
 800a962:	f1c3 030f 	rsb	r3, r3, #15
 800a966:	b2db      	uxtb	r3, r3
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	4413      	add	r3, r2
 800a970:	b2da      	uxtb	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	701a      	strb	r2, [r3, #0]
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800a982:	b480      	push	{r7}
 800a984:	b085      	sub	sp, #20
 800a986:	af00      	add	r7, sp, #0
 800a988:	4603      	mov	r3, r0
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
 800a98e:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	b2da      	uxtb	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	701a      	strb	r2, [r3, #0]

}
 800a9a6:	bf00      	nop
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	603a      	str	r2, [r7, #0]
 800a9bc:	71fb      	strb	r3, [r7, #7]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800a9c2:	79bb      	ldrb	r3, [r7, #6]
 800a9c4:	011b      	lsls	r3, r3, #4
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	701a      	strb	r2, [r3, #0]

}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60ba      	str	r2, [r7, #8]
 800a9e6:	607b      	str	r3, [r7, #4]
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800aa00:	f107 0217 	add.w	r2, r7, #23
 800aa04:	f107 0116 	add.w	r1, r7, #22
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f002 f93c 	bl	800cc88 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800aa10:	f107 0214 	add.w	r2, r7, #20
 800aa14:	f107 0115 	add.w	r1, r7, #21
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff ffb1 	bl	800a982 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800aa20:	7dfb      	ldrb	r3, [r7, #23]
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	7d7b      	ldrb	r3, [r7, #21]
 800aa26:	3301      	adds	r3, #1
 800aa28:	0fd9      	lsrs	r1, r3, #31
 800aa2a:	440b      	add	r3, r1
 800aa2c:	105b      	asrs	r3, r3, #1
 800aa2e:	425b      	negs	r3, r3
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	4413      	add	r3, r2
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	b21a      	sxth	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	da02      	bge.n	800aa4c <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	7d7b      	ldrb	r3, [r7, #21]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	4413      	add	r3, r2
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	b21a      	sxth	r2, r3
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa68:	2b0f      	cmp	r3, #15
 800aa6a:	dd02      	ble.n	800aa72 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	220f      	movs	r2, #15
 800aa70:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800aa72:	7dbb      	ldrb	r3, [r7, #22]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	7d3b      	ldrb	r3, [r7, #20]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	0fd9      	lsrs	r1, r3, #31
 800aa7c:	440b      	add	r3, r1
 800aa7e:	105b      	asrs	r3, r3, #1
 800aa80:	425b      	negs	r3, r3
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4413      	add	r3, r2
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	b21a      	sxth	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da02      	bge.n	800aa9e <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	7d3b      	ldrb	r3, [r7, #20]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	4413      	add	r3, r2
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	b21a      	sxth	r2, r3
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aaba:	2b0f      	cmp	r3, #15
 800aabc:	dd02      	ble.n	800aac4 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	220f      	movs	r2, #15
 800aac2:	801a      	strh	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	460a      	mov	r2, r1
 800aad6:	71fb      	strb	r3, [r7, #7]
 800aad8:	4613      	mov	r3, r2
 800aada:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800aae8:	79bb      	ldrb	r3, [r7, #6]
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <VL53LX_is_aperture_location+0x34>
 800aaf6:	7b7b      	ldrb	r3, [r7, #13]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d101      	bne.n	800ab00 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800aafc:	2301      	movs	r3, #1
 800aafe:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d104      	bne.n	800ab10 <VL53LX_is_aperture_location+0x44>
 800ab06:	7b7b      	ldrb	r3, [r7, #13]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800ab1e:	b590      	push	{r4, r7, lr}
 800ab20:	b08b      	sub	sp, #44	; 0x2c
 800ab22:	af02      	add	r7, sp, #8
 800ab24:	603a      	str	r2, [r7, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	4603      	mov	r3, r0
 800ab2a:	71fb      	strb	r3, [r7, #7]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	71bb      	strb	r3, [r7, #6]
 800ab30:	4613      	mov	r3, r2
 800ab32:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800ab60:	f107 0416 	add.w	r4, r7, #22
 800ab64:	f107 0218 	add.w	r2, r7, #24
 800ab68:	79b9      	ldrb	r1, [r7, #6]
 800ab6a:	79f8      	ldrb	r0, [r7, #7]
 800ab6c:	f107 0312 	add.w	r3, r7, #18
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	f107 0314 	add.w	r3, r7, #20
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	4623      	mov	r3, r4
 800ab7a:	f7ff ff30 	bl	800a9de <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	2200      	movs	r2, #0
 800ab82:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ab84:	8afb      	ldrh	r3, [r7, #22]
 800ab86:	83bb      	strh	r3, [r7, #28]
 800ab88:	e04c      	b.n	800ac24 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ab8a:	8b3b      	ldrh	r3, [r7, #24]
 800ab8c:	83fb      	strh	r3, [r7, #30]
 800ab8e:	e03d      	b.n	800ac0c <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800ab90:	8bbb      	ldrh	r3, [r7, #28]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	8bfa      	ldrh	r2, [r7, #30]
 800ab96:	b2d1      	uxtb	r1, r2
 800ab98:	f107 0211 	add.w	r2, r7, #17
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff fec9 	bl	800a934 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800aba2:	7c78      	ldrb	r0, [r7, #17]
 800aba4:	f107 030e 	add.w	r3, r7, #14
 800aba8:	f107 020f 	add.w	r2, r7, #15
 800abac:	f107 0110 	add.w	r1, r7, #16
 800abb0:	f7ff fe9f 	bl	800a8f2 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800abb4:	7c3b      	ldrb	r3, [r7, #16]
 800abb6:	461a      	mov	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	4413      	add	r3, r2
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	4013      	ands	r3, r2
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01b      	beq.n	800ac00 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800abc8:	8bbb      	ldrh	r3, [r7, #28]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	8bfa      	ldrh	r2, [r7, #30]
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	4611      	mov	r1, r2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff ff7a 	bl	800aacc <VL53LX_is_aperture_location>
 800abd8:	4603      	mov	r3, r0
 800abda:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800abdc:	7efb      	ldrb	r3, [r7, #27]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d007      	beq.n	800abf2 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	881a      	ldrh	r2, [r3, #0]
 800abe6:	88bb      	ldrh	r3, [r7, #4]
 800abe8:	4413      	add	r3, r2
 800abea:	b29a      	uxth	r2, r3
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	801a      	strh	r2, [r3, #0]
 800abf0:	e006      	b.n	800ac00 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ac00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3301      	adds	r3, #1
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	83fb      	strh	r3, [r7, #30]
 800ac0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac10:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	ddbb      	ble.n	800ab90 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ac18:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	3301      	adds	r3, #1
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	83bb      	strh	r3, [r7, #28]
 800ac24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac28:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	ddac      	ble.n	800ab8a <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800ac30:	bf00      	nop
 800ac32:	bf00      	nop
 800ac34:	3724      	adds	r7, #36	; 0x24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd90      	pop	{r4, r7, pc}

0800ac3a <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800ac3a:	b590      	push	{r4, r7, lr}
 800ac3c:	b08d      	sub	sp, #52	; 0x34
 800ac3e:	af02      	add	r7, sp, #8
 800ac40:	4604      	mov	r4, r0
 800ac42:	4608      	mov	r0, r1
 800ac44:	4611      	mov	r1, r2
 800ac46:	461a      	mov	r2, r3
 800ac48:	4623      	mov	r3, r4
 800ac4a:	71fb      	strb	r3, [r7, #7]
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	71bb      	strb	r3, [r7, #6]
 800ac50:	460b      	mov	r3, r1
 800ac52:	717b      	strb	r3, [r7, #5]
 800ac54:	4613      	mov	r3, r2
 800ac56:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800ac9a:	f107 041c 	add.w	r4, r7, #28
 800ac9e:	f107 021e 	add.w	r2, r7, #30
 800aca2:	79b9      	ldrb	r1, [r7, #6]
 800aca4:	79f8      	ldrb	r0, [r7, #7]
 800aca6:	f107 0318 	add.w	r3, r7, #24
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	f107 031a 	add.w	r3, r7, #26
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	4623      	mov	r3, r4
 800acb4:	f7ff fe93 	bl	800a9de <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800acb8:	f107 0414 	add.w	r4, r7, #20
 800acbc:	f107 0216 	add.w	r2, r7, #22
 800acc0:	7939      	ldrb	r1, [r7, #4]
 800acc2:	7978      	ldrb	r0, [r7, #5]
 800acc4:	f107 0310 	add.w	r3, r7, #16
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	f107 0312 	add.w	r3, r7, #18
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4623      	mov	r3, r4
 800acd2:	f7ff fe84 	bl	800a9de <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800acd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd8:	2200      	movs	r2, #0
 800acda:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800acdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acde:	2200      	movs	r2, #0
 800ace0:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ace2:	8abb      	ldrh	r3, [r7, #20]
 800ace4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ace6:	e06c      	b.n	800adc2 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ace8:	8afb      	ldrh	r3, [r7, #22]
 800acea:	84fb      	strh	r3, [r7, #38]	; 0x26
 800acec:	e05d      	b.n	800adaa <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800acee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800acf4:	b2d1      	uxtb	r1, r2
 800acf6:	f107 020f 	add.w	r2, r7, #15
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fe1a 	bl	800a934 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800ad00:	7bf8      	ldrb	r0, [r7, #15]
 800ad02:	f107 030c 	add.w	r3, r7, #12
 800ad06:	f107 020d 	add.w	r2, r7, #13
 800ad0a:	f107 010e 	add.w	r1, r7, #14
 800ad0e:	f7ff fdf0 	bl	800a8f2 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	461a      	mov	r2, r3
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	4413      	add	r3, r2
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	7b3b      	ldrb	r3, [r7, #12]
 800ad1e:	4013      	ands	r3, r2
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d03b      	beq.n	800ad9e <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800ad26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fecb 	bl	800aacc <VL53LX_is_aperture_location>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800ad3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800ad44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad46:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad48:	e002      	b.n	800ad50 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800ad4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad4e:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ad50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ad54:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	db19      	blt.n	800ad90 <VL53LX_calc_mm_effective_spads+0x156>
 800ad5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ad60:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ad64:	429a      	cmp	r2, r3
 800ad66:	dc13      	bgt.n	800ad90 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ad68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ad6c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ad70:	429a      	cmp	r2, r3
 800ad72:	db0d      	blt.n	800ad90 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ad74:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ad78:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	dc07      	bgt.n	800ad90 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800ad80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad82:	881a      	ldrh	r2, [r3, #0]
 800ad84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad86:	4413      	add	r3, r2
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8c:	801a      	strh	r2, [r3, #0]
 800ad8e:	e006      	b.n	800ad9e <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800ad90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad92:	881a      	ldrh	r2, [r3, #0]
 800ad94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad96:	4413      	add	r3, r2
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad9c:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ad9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	3301      	adds	r3, #1
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800adaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adae:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800adb2:	429a      	cmp	r2, r3
 800adb4:	dd9b      	ble.n	800acee <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800adb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3301      	adds	r3, #1
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800adc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800adc6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800adca:	429a      	cmp	r2, r3
 800adcc:	dd8c      	ble.n	800ace8 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800adce:	bf00      	nop
 800add0:	bf00      	nop
 800add2:	372c      	adds	r7, #44	; 0x2c
 800add4:	46bd      	mov	sp, r7
 800add6:	bd90      	pop	{r4, r7, pc}

0800add8 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7fd ffde 	bl	8008dac <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	7c9a      	ldrb	r2, [r3, #18]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	3314      	adds	r3, #20
 800ae1a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	75fb      	strb	r3, [r7, #23]
 800ae20:	e06b      	b.n	800aefa <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d034      	beq.n	800ae96 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800ae2c:	e05f      	b.n	800aeee <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ae66:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	8a9a      	ldrh	r2, [r3, #20]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	601a      	str	r2, [r3, #0]

			break;
 800ae94:	e02b      	b.n	800aeee <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800aec6:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	611a      	str	r2, [r3, #16]
			break;
 800aeec:	bf00      	nop
		}

		pdata++;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	334c      	adds	r3, #76	; 0x4c
 800aef2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	3301      	adds	r3, #1
 800aef8:	75fb      	strb	r3, [r7, #23]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	7c9b      	ldrb	r3, [r3, #18]
 800aefe:	7dfa      	ldrb	r2, [r7, #23]
 800af00:	429a      	cmp	r2, r3
 800af02:	d38e      	bcc.n	800ae22 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800af0e:	b480      	push	{r7}
 800af10:	b089      	sub	sp, #36	; 0x24
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800af16:	2300      	movs	r3, #0
 800af18:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800af24:	3320      	adds	r3, #32
 800af26:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800af2e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800af36:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	4413      	add	r3, r2
 800af48:	3302      	adds	r3, #2
 800af4a:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800af70:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3724      	adds	r7, #36	; 0x24
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800af80:	b480      	push	{r7}
 800af82:	b08b      	sub	sp, #44	; 0x2c
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800af98:	3320      	adds	r3, #32
 800af9a:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800afa2:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800afaa:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800afb2:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800afb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afb8:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800afba:	7bfa      	ldrb	r2, [r7, #15]
 800afbc:	6939      	ldr	r1, [r7, #16]
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	440b      	add	r3, r1
 800afc8:	3306      	adds	r3, #6
 800afca:	2200      	movs	r2, #0
 800afcc:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800afd4:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800afd6:	2301      	movs	r3, #1
 800afd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afdc:	e01a      	b.n	800b014 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800afde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	214c      	movs	r1, #76	; 0x4c
 800afe6:	fb01 f303 	mul.w	r3, r1, r3
 800afea:	4413      	add	r3, r2
 800afec:	334a      	adds	r3, #74	; 0x4a
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d209      	bcs.n	800b00a <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800aff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	214c      	movs	r1, #76	; 0x4c
 800affe:	fb01 f303 	mul.w	r3, r1, r3
 800b002:	4413      	add	r3, r2
 800b004:	334a      	adds	r3, #74	; 0x4a
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800b00a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b00e:	3301      	adds	r3, #1
 800b010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	7c9b      	ldrb	r3, [r3, #18]
 800b018:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d3de      	bcc.n	800afde <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800b020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	d103      	bne.n	800b02e <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800b026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b02a:	623b      	str	r3, [r7, #32]
 800b02c:	e00e      	b.n	800b04c <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800b02e:	89bb      	ldrh	r3, [r7, #12]
 800b030:	039b      	lsls	r3, r3, #14
 800b032:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800b034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b036:	6a3a      	ldr	r2, [r7, #32]
 800b038:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b044:	d302      	bcc.n	800b04c <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800b046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b04a:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800b04c:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800b052:	6939      	ldr	r1, [r7, #16]
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	440b      	add	r3, r1
 800b05e:	3306      	adds	r3, #6
 800b060:	4602      	mov	r2, r0
 800b062:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800b064:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	372c      	adds	r7, #44	; 0x2c
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	332c      	adds	r3, #44	; 0x2c
 800b08a:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	33c2      	adds	r3, #194	; 0xc2
 800b090:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800b098:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	3302      	adds	r3, #2
 800b09e:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	785b      	ldrb	r3, [r3, #1]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d11e      	bne.n	800b0fc <VL53LX_multizone_hist_bins_update+0x88>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10b      	bne.n	800b0dc <VL53LX_multizone_hist_bins_update+0x68>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d05d      	beq.n	800b19e <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	719a      	strb	r2, [r3, #6]
 800b0fa:	e050      	b.n	800b19e <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b102:	461a      	mov	r2, r3
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	4413      	add	r3, r2
 800b108:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d11e      	bne.n	800b14e <VL53LX_multizone_hist_bins_update+0xda>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <VL53LX_multizone_hist_bins_update+0xba>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d034      	beq.n	800b19e <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	719a      	strb	r2, [r3, #6]
 800b14c:	e027      	b.n	800b19e <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b154:	461a      	mov	r2, r3
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	4413      	add	r3, r2
 800b15a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d11d      	bne.n	800b19e <VL53LX_multizone_hist_bins_update+0x12a>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10b      	bne.n	800b180 <VL53LX_multizone_hist_bins_update+0x10c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00b      	beq.n	800b19e <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800b19e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <VL53LX_multizone_hist_bins_update+0x146>
		VL53LX_copy_hist_bins_to_static_cfg(
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	f203 3136 	addw	r1, r3, #822	; 0x336
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	6978      	ldr	r0, [r7, #20]
 800b1b6:	f7fd f9cd 	bl	8008554 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800b1ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3728      	adds	r7, #40	; 0x28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b089      	sub	sp, #36	; 0x24
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	603b      	str	r3, [r7, #0]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	f893 3357 	ldrb.w	r3, [r3, #855]	; 0x357
 800b1e4:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d103      	bne.n	800b1f4 <VL53LX_update_internal_stream_counters+0x2e>


		*pinternal_stream_count = external_stream_count;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	7afa      	ldrb	r2, [r7, #11]
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	e01e      	b.n	800b232 <VL53LX_update_internal_stream_counters+0x6c>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d111      	bne.n	800b226 <VL53LX_update_internal_stream_counters+0x60>


		if (*pinternal_stream_count == 0xFF)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2bff      	cmp	r3, #255	; 0xff
 800b208:	d103      	bne.n	800b212 <VL53LX_update_internal_stream_counters+0x4c>
			*pinternal_stream_count = 0x80;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2280      	movs	r2, #128	; 0x80
 800b20e:	701a      	strb	r2, [r3, #0]
 800b210:	e005      	b.n	800b21e <VL53LX_update_internal_stream_counters+0x58>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	e005      	b.n	800b232 <VL53LX_update_internal_stream_counters+0x6c>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800b232:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3724      	adds	r7, #36	; 0x24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800b242:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b246:	b0a2      	sub	sp, #136	; 0x88
 800b248:	af00      	add	r7, sp, #0
 800b24a:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b254:	673b      	str	r3, [r7, #112]	; 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b258:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b25c:	3320      	adds	r3, #32
 800b25e:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800b260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b262:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b266:	330c      	adds	r3, #12
 800b268:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b26a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b26c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800b270:	3310      	adds	r3, #16
 800b272:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800b274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b276:	663b      	str	r3, [r7, #96]	; 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800b278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b27a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b27e:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800b280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800b288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b28a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800b28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800b290:	4413      	add	r3, r2
 800b292:	2200      	movs	r2, #0
 800b294:	461c      	mov	r4, r3
 800b296:	4615      	mov	r5, r2
 800b298:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	if (peak_duration_us == 0)
 800b29c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d103      	bne.n	800b2ac <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800b2a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b2a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800b2ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	462b      	mov	r3, r5
 800b2b4:	f04f 0000 	mov.w	r0, #0
 800b2b8:	f04f 0100 	mov.w	r1, #0
 800b2bc:	0159      	lsls	r1, r3, #5
 800b2be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2c2:	0150      	lsls	r0, r2, #5
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	ebb2 0804 	subs.w	r8, r2, r4
 800b2cc:	eb63 0905 	sbc.w	r9, r3, r5
 800b2d0:	f04f 0200 	mov.w	r2, #0
 800b2d4:	f04f 0300 	mov.w	r3, #0
 800b2d8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b2dc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800b2e0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b2e4:	4690      	mov	r8, r2
 800b2e6:	4699      	mov	r9, r3
 800b2e8:	eb18 0304 	adds.w	r3, r8, r4
 800b2ec:	633b      	str	r3, [r7, #48]	; 0x30
 800b2ee:	eb49 0305 	adc.w	r3, r9, r5
 800b2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2f4:	f04f 0200 	mov.w	r2, #0
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b300:	4629      	mov	r1, r5
 800b302:	00cb      	lsls	r3, r1, #3
 800b304:	4621      	mov	r1, r4
 800b306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b30a:	4621      	mov	r1, r4
 800b30c:	00ca      	lsls	r2, r1, #3
 800b30e:	4610      	mov	r0, r2
 800b310:	4619      	mov	r1, r3
 800b312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b316:	2200      	movs	r2, #0
 800b318:	643b      	str	r3, [r7, #64]	; 0x40
 800b31a:	647a      	str	r2, [r7, #68]	; 0x44
 800b31c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b320:	f7f5 fd1a 	bl	8000d58 <__aeabi_uldivmod>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800b32c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800b330:	4622      	mov	r2, r4
 800b332:	462b      	mov	r3, r5
 800b334:	f04f 0000 	mov.w	r0, #0
 800b338:	f04f 0100 	mov.w	r1, #0
 800b33c:	0159      	lsls	r1, r3, #5
 800b33e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b342:	0150      	lsls	r0, r2, #5
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	ebb2 0a04 	subs.w	sl, r2, r4
 800b34c:	eb63 0b05 	sbc.w	fp, r3, r5
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	f04f 0300 	mov.w	r3, #0
 800b358:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b35c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800b360:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800b364:	4692      	mov	sl, r2
 800b366:	469b      	mov	fp, r3
 800b368:	eb1a 0304 	adds.w	r3, sl, r4
 800b36c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b36e:	eb4b 0305 	adc.w	r3, fp, r5
 800b372:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b374:	f04f 0200 	mov.w	r2, #0
 800b378:	f04f 0300 	mov.w	r3, #0
 800b37c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b380:	4629      	mov	r1, r5
 800b382:	00cb      	lsls	r3, r1, #3
 800b384:	4621      	mov	r1, r4
 800b386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b38a:	4621      	mov	r1, r4
 800b38c:	00ca      	lsls	r2, r1, #3
 800b38e:	4610      	mov	r0, r2
 800b390:	4619      	mov	r1, r3
 800b392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b396:	2200      	movs	r2, #0
 800b398:	63bb      	str	r3, [r7, #56]	; 0x38
 800b39a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b39c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3a0:	f7f5 fcda 	bl	8000d58 <__aeabi_uldivmod>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800b3ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3b2:	8ad2      	ldrh	r2, [r2, #22]
 800b3b4:	fb02 f303 	mul.w	r3, r2, r3
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	623b      	str	r3, [r7, #32]
 800b3bc:	627a      	str	r2, [r7, #36]	; 0x24
 800b3be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b3c2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800b3c6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	d105      	bne.n	800b3da <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800b3ce:	f04f 0201 	mov.w	r2, #1
 800b3d2:	f04f 0300 	mov.w	r3, #0
 800b3d6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800b3da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	f04f 0400 	mov.w	r4, #0
 800b3e6:	f04f 0500 	mov.w	r5, #0
 800b3ea:	015d      	lsls	r5, r3, #5
 800b3ec:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b3f0:	0154      	lsls	r4, r2, #5
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	1a14      	subs	r4, r2, r0
 800b3f8:	61bc      	str	r4, [r7, #24]
 800b3fa:	eb63 0301 	sbc.w	r3, r3, r1
 800b3fe:	61fb      	str	r3, [r7, #28]
 800b400:	f04f 0200 	mov.w	r2, #0
 800b404:	f04f 0300 	mov.w	r3, #0
 800b408:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800b40c:	464c      	mov	r4, r9
 800b40e:	00a3      	lsls	r3, r4, #2
 800b410:	4644      	mov	r4, r8
 800b412:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b416:	4644      	mov	r4, r8
 800b418:	00a2      	lsls	r2, r4, #2
 800b41a:	4614      	mov	r4, r2
 800b41c:	461d      	mov	r5, r3
 800b41e:	4623      	mov	r3, r4
 800b420:	181b      	adds	r3, r3, r0
 800b422:	613b      	str	r3, [r7, #16]
 800b424:	462b      	mov	r3, r5
 800b426:	eb41 0303 	adc.w	r3, r1, r3
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	f04f 0300 	mov.w	r3, #0
 800b434:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b438:	4629      	mov	r1, r5
 800b43a:	02cb      	lsls	r3, r1, #11
 800b43c:	4621      	mov	r1, r4
 800b43e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800b442:	4621      	mov	r1, r4
 800b444:	02ca      	lsls	r2, r1, #11
 800b446:	461c      	mov	r4, r3
 800b448:	4613      	mov	r3, r2
 800b44a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800b44e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b452:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b456:	f7f5 fc7f 	bl	8000d58 <__aeabi_uldivmod>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800b462:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	f04f 0400 	mov.w	r4, #0
 800b46e:	f04f 0500 	mov.w	r5, #0
 800b472:	015d      	lsls	r5, r3, #5
 800b474:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b478:	0154      	lsls	r4, r2, #5
 800b47a:	4622      	mov	r2, r4
 800b47c:	462b      	mov	r3, r5
 800b47e:	1a14      	subs	r4, r2, r0
 800b480:	60bc      	str	r4, [r7, #8]
 800b482:	eb63 0301 	sbc.w	r3, r3, r1
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	f04f 0300 	mov.w	r3, #0
 800b490:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800b494:	464c      	mov	r4, r9
 800b496:	00a3      	lsls	r3, r4, #2
 800b498:	4644      	mov	r4, r8
 800b49a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b49e:	4644      	mov	r4, r8
 800b4a0:	00a2      	lsls	r2, r4, #2
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	461d      	mov	r5, r3
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	181b      	adds	r3, r3, r0
 800b4aa:	603b      	str	r3, [r7, #0]
 800b4ac:	462b      	mov	r3, r5
 800b4ae:	eb41 0303 	adc.w	r3, r1, r3
 800b4b2:	607b      	str	r3, [r7, #4]
 800b4b4:	f04f 0200 	mov.w	r2, #0
 800b4b8:	f04f 0300 	mov.w	r3, #0
 800b4bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	02cb      	lsls	r3, r1, #11
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	02ca      	lsls	r2, r1, #11
 800b4ce:	461c      	mov	r4, r3
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800b4d6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b4da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b4de:	f7f5 fc3b 	bl	8000d58 <__aeabi_uldivmod>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800b4ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ee:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800b4f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d802      	bhi.n	800b4fe <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800b4f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800b4fe:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800b502:	4618      	mov	r0, r3
 800b504:	3788      	adds	r7, #136	; 0x88
 800b506:	46bd      	mov	sp, r7
 800b508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b50c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b094      	sub	sp, #80	; 0x50
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800b532:	3314      	adds	r3, #20
 800b534:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t max, nXtalk, cXtalk;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800b536:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d107      	bne.n	800b54e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x42>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	889b      	ldrh	r3, [r3, #4]
 800b542:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	609a      	str	r2, [r3, #8]
 800b54c:	e002      	b.n	800b554 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x48>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	64bb      	str	r3, [r7, #72]	; 0x48
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	89db      	ldrh	r3, [r3, #14]
 800b566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b570:	2b00      	cmp	r3, #0
 800b572:	d004      	beq.n	800b57e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x72>
		(pconfig->scaler_calc_method == 1)) &&
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d126      	bne.n	800b5cc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800b582:	2b00      	cmp	r3, #0
 800b584:	d022      	beq.n	800b5cc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b586:	f107 0317 	add.w	r3, r7, #23
 800b58a:	4619      	mov	r1, r3
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 fe52 	bl	800c236 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x90>
			histo_merge_nb = 1;
 800b598:	2301      	movs	r3, #1
 800b59a:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d003      	beq.n	800b5ae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa2>
			orig_xtalk_offset =
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5ac:	e006      	b.n	800b5bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	3202      	adds	r2, #2
 800b5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ba:	64bb      	str	r3, [r7, #72]	; 0x48

		orig_x_gradient =
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	889b      	ldrh	r3, [r3, #4]
 800b5c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	88db      	ldrh	r3, [r3, #6]
 800b5c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
 800b5d6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d106      	bne.n	800b5ec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		pout->gradient_zero_flag |= 0x01;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	795b      	ldrb	r3, [r3, #5]
 800b5e2:	f043 0301 	orr.w	r3, r3, #1
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10a      	bne.n	800b60c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800b5f6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x02;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	795b      	ldrb	r3, [r3, #5]
 800b602:	f043 0302 	orr.w	r3, r3, #2
 800b606:	b2da      	uxtb	r2, r3
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800b60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10a>
		orig_xtalk_offset = 1;
 800b612:	2301      	movs	r3, #1
 800b614:	64bb      	str	r3, [r7, #72]	; 0x48



	if (pconfig->user_scaler_set == 1) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d108      	bne.n	800b632 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x126>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b62c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b630:	e019      	b.n	800b666 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800b632:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b636:	019b      	lsls	r3, r3, #6
 800b638:	461a      	mov	r2, r3
 800b63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b64a:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800b64c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b650:	019b      	lsls	r3, r3, #6
 800b652:	461a      	mov	r2, r3
 800b654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b656:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b664:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d12a      	bne.n	800b6c6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ba>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800b678:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b67c:	63fb      	str	r3, [r7, #60]	; 0x3c
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b680:	119b      	asrs	r3, r3, #6
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68a:	db02      	blt.n	800b692 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x186>
			itemp32 = 0xFFFF;
 800b68c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b694:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6aa:	119b      	asrs	r3, r3, #6
 800b6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b4:	db02      	blt.n	800b6bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b0>
			itemp32 = 0xFFFF;
 800b6b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6be:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	81da      	strh	r2, [r3, #14]
 800b6c4:	e042      	b.n	800b74c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x240>
	} else if (pconfig->scaler_calc_method == 1) {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d13d      	bne.n	800b74c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x240>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800b6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	da00      	bge.n	800b6e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d6>
 800b6e0:	330f      	adds	r3, #15
 800b6e2:	111b      	asrs	r3, r3, #4
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 << 2;
 800b6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800b6ec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b6f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6f2:	4413      	add	r3, r2
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fc:	db02      	blt.n	800b704 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f8>
			itemp32 = 0xFFFF;
 800b6fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b702:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b706:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800b716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b718:	4a52      	ldr	r2, [pc, #328]	; (800b864 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800b71a:	fb82 1203 	smull	r1, r2, r2, r3
 800b71e:	1152      	asrs	r2, r2, #5
 800b720:	17db      	asrs	r3, r3, #31
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 << 2;
 800b726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800b72c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b732:	4413      	add	r3, r2
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800b736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b73c:	db02      	blt.n	800b744 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x238>
			itemp32 = 0xFFFF;
 800b73e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b742:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b746:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	785b      	ldrb	r3, [r3, #1]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d179      	bne.n	800b848 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800b754:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d075      	beq.n	800b848 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2201      	movs	r2, #1
 800b760:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	627b      	str	r3, [r7, #36]	; 0x24

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b768:	f107 0317 	add.w	r3, r7, #23
 800b76c:	4619      	mov	r1, r3
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 fd61 	bl	800c236 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800b77a:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	3308      	adds	r3, #8
 800b780:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((histo_merge_nb > 0) &&
 800b782:	7dfb      	ldrb	r3, [r7, #23]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d043      	beq.n	800b810 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
		if ((histo_merge_nb > 0) &&
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d13e      	bne.n	800b810 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	d03b      	beq.n	800b810 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	1e5a      	subs	r2, r3, #1
			cXtalk =
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	3202      	adds	r2, #2
 800b7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a4:	61fb      	str	r3, [r7, #28]
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7ac:	fb03 f202 	mul.w	r2, r3, r2
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b6:	61bb      	str	r3, [r7, #24]
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d303      	bcc.n	800b7ca <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	719a      	strb	r2, [r3, #6]
 800b7c8:	e022      	b.n	800b810 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else if (SmudgeFactor > 0)
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d01f      	beq.n	800b810 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
				for (i = 0; i < max; i++) {
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d6:	e016      	b.n	800b806 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fa>
				*pcpo *= 1000;
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7e0:	fb03 f202 	mul.w	r2, r3, r2
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	601a      	str	r2, [r3, #0]
				*pcpo /= SmudgeFactor;
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	601a      	str	r2, [r3, #0]
				pcpo++;
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	63bb      	str	r3, [r7, #56]	; 0x38
				for (i = 0; i < max; i++) {
 800b7fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b800:	3301      	adds	r3, #1
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b806:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b80a:	6a3a      	ldr	r2, [r7, #32]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d8e3      	bhi.n	800b7d8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2cc>
				}
		}
		if (pout->new_xtalk_applied_flag) {
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	799b      	ldrb	r3, [r3, #6]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d017      	beq.n	800b848 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	789b      	ldrb	r3, [r3, #2]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d105      	bne.n	800b848 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800b848:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d002      	beq.n	800b856 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2201      	movs	r2, #1
 800b854:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b856:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3750      	adds	r7, #80	; 0x50
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	66666667 	.word	0x66666667

0800b868 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800b868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b86c:	b0a2      	sub	sp, #136	; 0x88
 800b86e:	af02      	add	r7, sp, #8
 800b870:	6278      	str	r0, [r7, #36]	; 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b872:	2300      	movs	r3, #0
 800b874:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b882:	3320      	adds	r3, #32
 800b884:	667b      	str	r3, [r7, #100]	; 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800b886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b888:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b88c:	330c      	adds	r3, #12
 800b88e:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b892:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800b896:	3310      	adds	r3, #16
 800b898:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800b89a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b89c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b8a0:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800b8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8a4:	657b      	str	r3, [r7, #84]	; 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b8a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8a8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800b8ac:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800b8ca:	f04f 0200 	mov.w	r2, #0
 800b8ce:	f04f 0300 	mov.w	r3, #0
 800b8d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b8f8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b900:	f000 fc99 	bl	800c236 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800b904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d004      	beq.n	800b916 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800b90c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b90e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
	if ((histo_merge_nb == 0) ||
 800b912:	2b01      	cmp	r3, #1
 800b914:	d002      	beq.n	800b91c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800b916:	2301      	movs	r3, #1
 800b918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b91c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b91e:	f000 fb10 	bl	800bf42 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800b922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800b92a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b92c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b92e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b932:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800b936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b938:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d901      	bls.n	800b944 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800b944:	2300      	movs	r3, #0
 800b946:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800b94a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b94c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800b950:	2b01      	cmp	r3, #1
 800b952:	d106      	bne.n	800b962 <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800b954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b956:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800b95a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800b95e:	429a      	cmp	r2, r3
 800b960:	d101      	bne.n	800b966 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800b962:	2301      	movs	r3, #1
 800b964:	e000      	b.n	800b968 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800b966:	2300      	movs	r3, #0
	merging_complete =
 800b968:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800b96c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b96e:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b970:	2b01      	cmp	r3, #1
 800b972:	d10e      	bne.n	800b992 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800b974:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800b97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b97e:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800b982:	2b09      	cmp	r3, #9
 800b984:	d105      	bne.n	800b992 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b986:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800b992:	2300      	movs	r3, #0
	run_smudge_detection =
 800b994:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800b998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b99a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800b99e:	2b09      	cmp	r3, #9
 800b9a0:	f000 80a6 	beq.w	800baf0 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800b9a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9a6:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	f040 80a1 	bne.w	800baf0 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b9ba:	e02d      	b.n	800ba18 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800b9bc:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800b9c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9c2:	234c      	movs	r3, #76	; 0x4c
 800b9c4:	fb01 f303 	mul.w	r3, r1, r3
 800b9c8:	4413      	add	r3, r2
 800b9ca:	335e      	adds	r3, #94	; 0x5e
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b09      	cmp	r3, #9
 800b9d0:	d11d      	bne.n	800ba0e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800b9d2:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800b9d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9d8:	234c      	movs	r3, #76	; 0x4c
 800b9da:	fb01 f303 	mul.w	r3, r1, r3
 800b9de:	4413      	add	r3, r2
 800b9e0:	335a      	adds	r3, #90	; 0x5a
 800b9e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9e6:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800b9e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	dc03      	bgt.n	800b9f8 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b9f6:	e00a      	b.n	800ba0e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800b9f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d106      	bne.n	800ba0e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800ba00:	2301      	movs	r3, #1
 800ba02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800ba06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba0a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800ba0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba12:	3301      	adds	r3, #1
 800ba14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ba18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba1a:	7c9a      	ldrb	r2, [r3, #18]
 800ba1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d3cb      	bcc.n	800b9bc <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ba24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d102      	bne.n	800ba32 <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800ba32:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800ba36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba38:	234c      	movs	r3, #76	; 0x4c
 800ba3a:	fb01 f303 	mul.w	r3, r1, r3
 800ba3e:	4413      	add	r3, r2
 800ba40:	3348      	adds	r3, #72	; 0x48
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	867b      	strh	r3, [r7, #50]	; 0x32

		if (run_nodetect == 1) {
 800ba46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d150      	bne.n	800baf0 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800ba4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ba50:	2200      	movs	r2, #0
 800ba52:	469a      	mov	sl, r3
 800ba54:	4693      	mov	fp, r2
 800ba56:	4652      	mov	r2, sl
 800ba58:	465b      	mov	r3, fp
 800ba5a:	f04f 0000 	mov.w	r0, #0
 800ba5e:	f04f 0100 	mov.w	r1, #0
 800ba62:	0159      	lsls	r1, r3, #5
 800ba64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ba68:	0150      	lsls	r0, r2, #5
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	ebb2 040a 	subs.w	r4, r2, sl
 800ba72:	eb63 050b 	sbc.w	r5, r3, fp
 800ba76:	f04f 0200 	mov.w	r2, #0
 800ba7a:	f04f 0300 	mov.w	r3, #0
 800ba7e:	00ab      	lsls	r3, r5, #2
 800ba80:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ba84:	00a2      	lsls	r2, r4, #2
 800ba86:	4614      	mov	r4, r2
 800ba88:	461d      	mov	r5, r3
 800ba8a:	eb14 080a 	adds.w	r8, r4, sl
 800ba8e:	eb45 090b 	adc.w	r9, r5, fp
 800ba92:	f04f 0200 	mov.w	r2, #0
 800ba96:	f04f 0300 	mov.w	r3, #0
 800ba9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800baa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800baa6:	4690      	mov	r8, r2
 800baa8:	4699      	mov	r9, r3
 800baaa:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800baae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	f04f 0300 	mov.w	r3, #0
 800baba:	024b      	lsls	r3, r1, #9
 800babc:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800bac0:	0242      	lsls	r2, r0, #9
 800bac2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800bac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baca:	2200      	movs	r2, #0
 800bacc:	61bb      	str	r3, [r7, #24]
 800bace:	61fa      	str	r2, [r7, #28]
 800bad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bad4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800bad8:	4621      	mov	r1, r4
 800bada:	428a      	cmp	r2, r1
 800badc:	4629      	mov	r1, r5
 800bade:	418b      	sbcs	r3, r1
 800bae0:	d203      	bcs.n	800baea <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800bae2:	2301      	movs	r3, #1
 800bae4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800bae8:	e002      	b.n	800baf0 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800baf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 810b 	beq.w	800bd10 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800bafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bafc:	2200      	movs	r2, #0
 800bafe:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800bb00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb02:	f7ff fb9e 	bl	800b242 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800bb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb08:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800bb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800bb1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb1c:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800bb22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	1ad2      	subs	r2, r2, r3
 800bb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2a:	4413      	add	r3, r2
 800bb2c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800bb2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	da02      	bge.n	800bb3a <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800bb34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb36:	425b      	negs	r3, r3
 800bb38:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800bb3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb42:	4293      	cmp	r3, r2
 800bb44:	dd0c      	ble.n	800bb60 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800bb46:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800bb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800bb4a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800bb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	da03      	bge.n	800bb5a <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800bb52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb54:	2201      	movs	r2, #1
 800bb56:	709a      	strb	r2, [r3, #2]
 800bb58:	e002      	b.n	800bb60 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800bb5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800bb60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb68:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800bb6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d906      	bls.n	800bb84 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800bb76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb78:	2201      	movs	r2, #1
 800bb7a:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bb82:	e014      	b.n	800bbae <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800bb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bb8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	6139      	str	r1, [r7, #16]
 800bb90:	6178      	str	r0, [r7, #20]
 800bb92:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bb96:	4621      	mov	r1, r4
 800bb98:	1851      	adds	r1, r2, r1
 800bb9a:	60b9      	str	r1, [r7, #8]
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	eb43 0101 	adc.w	r1, r3, r1
 800bba2:	60f9      	str	r1, [r7, #12]
 800bba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbaa:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800bbae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d202      	bcs.n	800bbc0 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800bbc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bbc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	603b      	str	r3, [r7, #0]
 800bbce:	607a      	str	r2, [r7, #4]
 800bbd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd4:	f7f5 f8c0 	bl	8000d58 <__aeabi_uldivmod>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
		xtalk_offset_out =
 800bbdc:	4613      	mov	r3, r2
 800bbde:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800bbe0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	1ad2      	subs	r2, r2, r3
 800bbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe8:	4413      	add	r3, r2
 800bbea:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800bbec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	da02      	bge.n	800bbf8 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800bbf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbf4:	425b      	negs	r3, r3
 800bbf6:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800bbf8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d112      	bne.n	800bc26 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800bc00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800bc06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	db0c      	blt.n	800bc26 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800bc0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800bc10:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800bc12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc14:	429a      	cmp	r2, r3
 800bc16:	da03      	bge.n	800bc20 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800bc18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	70da      	strb	r2, [r3, #3]
 800bc1e:	e002      	b.n	800bc26 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800bc20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc22:	2202      	movs	r2, #2
 800bc24:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800bc26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d108      	bne.n	800bc40 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800bc2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800bc34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc36:	4293      	cmp	r3, r2
 800bc38:	da02      	bge.n	800bc40 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800bc40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc42:	2200      	movs	r2, #0
 800bc44:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800bc46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d112      	bne.n	800bc74 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800bc4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc50:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00e      	beq.n	800bc74 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800bc56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bc5e:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800bc62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d905      	bls.n	800bc74 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800bc68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800bc6e:	2302      	movs	r3, #2
 800bc70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800bc74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc76:	7c1b      	ldrb	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d007      	beq.n	800bc8c <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800bc7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc7e:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800bc80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d902      	bls.n	800bc8c <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800bc86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800bc8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc8e:	7c1b      	ldrb	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d107      	bne.n	800bca4 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800bc94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc96:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800bc98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d202      	bcs.n	800bca4 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800bc9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800bca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bca6:	089b      	lsrs	r3, r3, #2
 800bca8:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800bcaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcb0:	d301      	bcc.n	800bcb6 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800bcb2:	4b3f      	ldr	r3, [pc, #252]	; (800bdb0 <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800bcb4:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800bcb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10d      	bne.n	800bcda <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcce:	f7ff fc1d 	bl	800b50c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bcd8:	e009      	b.n	800bcee <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800bcda:	2301      	movs	r3, #1
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	2301      	movs	r3, #1
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bce6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcea:	f7ff fc0f 	bl	800b50c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800bcee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d10c      	bne.n	800bd10 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800bcf6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bcf8:	f04f 0200 	mov.w	r2, #0
 800bcfc:	f04f 0300 	mov.w	r3, #0
 800bd00:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800bd04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800bd0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800bd16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d140      	bne.n	800bda0 <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800bd1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd26:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800bd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd2a:	691a      	ldr	r2, [r3, #16]
 800bd2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d202      	bcs.n	800bd3a <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800bd34:	2301      	movs	r3, #1
 800bd36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800bd3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800bd40:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d110      	bne.n	800bd6a <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd54:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bd56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd58:	f7ff fbd8 	bl	800b50c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800bd5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd5e:	2202      	movs	r2, #2
 800bd60:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800bd62:	2302      	movs	r3, #2
 800bd64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bd68:	e009      	b.n	800bd7e <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bd78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd7a:	f7ff fbc7 	bl	800b50c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800bd7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d10c      	bne.n	800bda0 <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800bd86:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	f04f 0300 	mov.w	r3, #0
 800bd90:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800bd94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800bd9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bda0:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3780      	adds	r7, #128	; 0x80
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdae:	bf00      	nop
 800bdb0:	0003ffff 	.word	0x0003ffff

0800bdb4 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800bdca:	3320      	adds	r3, #32
 800bdcc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde0:	2201      	movs	r2, #1
 800bde2:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be04:	461a      	mov	r2, r3
 800be06:	2364      	movs	r3, #100	; 0x64
 800be08:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be12:	461a      	mov	r2, r3
 800be14:	2300      	movs	r3, #0
 800be16:	f8c2 33d8 	str.w	r3, [r2, #984]	; 0x3d8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be20:	2200      	movs	r2, #0
 800be22:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be2c:	461a      	mov	r2, r3
 800be2e:	23c8      	movs	r3, #200	; 0xc8
 800be30:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be3a:	461a      	mov	r2, r3
 800be3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be40:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be4a:	461a      	mov	r2, r3
 800be4c:	f44f 739a 	mov.w	r3, #308	; 0x134
 800be50:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be5a:	461a      	mov	r2, r3
 800be5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be60:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be6a:	461a      	mov	r2, r3
 800be6c:	2380      	movs	r3, #128	; 0x80
 800be6e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be88:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be96:	f8a3 23f8 	strh.w	r2, [r3, #1016]	; 0x3f8
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beac:	461a      	mov	r2, r3
 800beae:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800beb2:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bebc:	461a      	mov	r2, r3
 800bebe:	2328      	movs	r3, #40	; 0x28
 800bec0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beca:	461a      	mov	r2, r3
 800becc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bed0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beda:	f44f 7261 	mov.w	r2, #900	; 0x384
 800bede:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee8:	461a      	mov	r2, r3
 800beea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800beee:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef8:	461a      	mov	r2, r3
 800befa:	2300      	movs	r3, #0
 800befc:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
	pdev->smudge_corrector_internals.required_samples = 0;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf06:	461a      	mov	r2, r3
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
	pdev->smudge_corrector_internals.accumulator = 0;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800bf14:	4619      	mov	r1, r3
 800bf16:	f04f 0200 	mov.w	r2, #0
 800bf1a:	f04f 0300 	mov.w	r3, #0
 800bf1e:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 f806 	bl	800bf42 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800bf36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800bf54:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2200      	movs	r2, #0
 800bf66:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2200      	movs	r2, #0
 800bf72:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2200      	movs	r2, #0
 800bf78:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2200      	movs	r2, #0
 800bf84:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800bf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb8:	461a      	mov	r2, r3
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800bfde:	331c      	adds	r3, #28
 800bfe0:	2218      	movs	r2, #24
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f009 ff59 	bl	8015e9c <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800bfea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800bff6:	b480      	push	{r7}
 800bff8:	b085      	sub	sp, #20
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bffe:	2300      	movs	r3, #0
 800c000:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c00c:	2203      	movs	r2, #3
 800c00e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c024:	2200      	movs	r2, #0
 800c026:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c030:	2200      	movs	r2, #0
 800c032:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c054:	2200      	movs	r2, #0
 800c056:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c060:	461a      	mov	r2, r3
 800c062:	2300      	movs	r3, #0
 800c064:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c06e:	2200      	movs	r2, #0
 800c070:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434

	LOG_FUNCTION_END(status);

	return status;
 800c074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c090:	2300      	movs	r3, #0
 800c092:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f893 231b 	ldrb.w	r2, [r3, #795]	; 0x31b
	pdev->low_power_auto_data.saved_vhv_init =
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0a0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 2318 	ldrb.w	r2, [r3, #792]	; 0x318
	pdev->low_power_auto_data.saved_vhv_timeout =
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b0:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f893 331b 	ldrb.w	r3, [r3, #795]	; 0x31b
 800c0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800c0cc:	f003 0303 	and.w	r3, r3, #3
 800c0d0:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c0e0:	4413      	add	r3, r2
 800c0e2:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f8:	f893 2396 	ldrb.w	r2, [r3, #918]	; 0x396
	pdev->low_power_auto_data.first_run_phasecal_result =
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c102:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10c:	f893 242e 	ldrb.w	r2, [r3, #1070]	; 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359

	LOG_FUNCTION_END(status);

	return status;
 800c116:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800c126:	b480      	push	{r7}
 800c128:	b087      	sub	sp, #28
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f203 339e 	addw	r3, r3, #926	; 0x39e
 800c138:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c13a:	2300      	movs	r3, #0
 800c13c:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	8a1b      	ldrh	r3, [r3, #16]
 800c142:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	891b      	ldrh	r3, [r3, #8]
 800c148:	4413      	add	r3, r2
	utemp32a =
 800c14a:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c152:	d302      	bcc.n	800c15a <VL53LX_low_power_auto_update_DSS+0x34>
		utemp32a = 0xFFFF;
 800c154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c158:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	041b      	lsls	r3, r3, #16
 800c15e:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <VL53LX_low_power_auto_update_DSS+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800c16a:	23f1      	movs	r3, #241	; 0xf1
 800c16c:	75fb      	strb	r3, [r7, #23]
 800c16e:	e040      	b.n	800c1f2 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800c176:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c17e:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c186:	461a      	mov	r2, r3
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800c194:	041b      	lsls	r3, r3, #16
 800c196:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c19e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800c1a6:	23f1      	movs	r3, #241	; 0xf1
 800c1a8:	75fb      	strb	r3, [r7, #23]
 800c1aa:	e022      	b.n	800c1f2 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
			utemp32a = utemp32a /
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1bc:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c4:	d302      	bcc.n	800c1cc <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800c1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1ca:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d6:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1e0:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	; 0x434
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
			pdev->gen_cfg.dss_config__roi_mode_control =
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800c1f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1f6:	f113 0f0f 	cmn.w	r3, #15
 800c1fa:	d114      	bne.n	800c226 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c202:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c206:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c210:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	; 0x434
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
		pdev->gen_cfg.dss_config__roi_mode_control =
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2202      	movs	r2, #2
 800c21e:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800c222:	2300      	movs	r3, #0
 800c224:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	371c      	adds	r7, #28
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800c236:	b480      	push	{r7}
 800c238:	b087      	sub	sp, #28
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800c252:	2b07      	cmp	r3, #7
 800c254:	bf0c      	ite	eq
 800c256:	2301      	moveq	r3, #1
 800c258:	2300      	movne	r3, #0
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800c25e:	2300      	movs	r3, #0
 800c260:	75fb      	strb	r3, [r7, #23]
 800c262:	e019      	b.n	800c298 <VL53LX_compute_histo_merge_nb+0x62>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800c264:	7df9      	ldrb	r1, [r7, #23]
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	6938      	ldr	r0, [r7, #16]
 800c26a:	461a      	mov	r2, r3
 800c26c:	0052      	lsls	r2, r2, #1
 800c26e:	441a      	add	r2, r3
 800c270:	0153      	lsls	r3, r2, #5
 800c272:	461a      	mov	r2, r3
 800c274:	460b      	mov	r3, r1
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	440b      	add	r3, r1
 800c27a:	019b      	lsls	r3, r3, #6
 800c27c:	4413      	add	r3, r2
 800c27e:	4403      	add	r3, r0
 800c280:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800c284:	3304      	adds	r3, #4
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dd02      	ble.n	800c292 <VL53LX_compute_histo_merge_nb+0x5c>
			sum++;
 800c28c:	7dbb      	ldrb	r3, [r7, #22]
 800c28e:	3301      	adds	r3, #1
 800c290:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	3301      	adds	r3, #1
 800c296:	75fb      	strb	r3, [r7, #23]
 800c298:	7dfb      	ldrb	r3, [r7, #23]
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	d9e2      	bls.n	800c264 <VL53LX_compute_histo_merge_nb+0x2e>
	*histo_merge_nb = sum;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	7dba      	ldrb	r2, [r7, #22]
 800c2a2:	701a      	strb	r2, [r3, #0]

	return status;
 800c2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	371c      	adds	r7, #28
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800c2c2:	88fb      	ldrh	r3, [r7, #6]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800c2c8:	88fb      	ldrh	r3, [r7, #6]
 800c2ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c2ce:	fb92 f3f3 	sdiv	r3, r2, r3
 800c2d2:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800c2e2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c2e6:	b089      	sub	sp, #36	; 0x24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800c2f2:	f04f 0200 	mov.w	r2, #0
 800c2f6:	f04f 0300 	mov.w	r3, #0
 800c2fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	fb02 f303 	mul.w	r3, r2, r3
 800c30a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	0b1b      	lsrs	r3, r3, #12
 800c310:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2200      	movs	r2, #0
 800c316:	469a      	mov	sl, r3
 800c318:	4693      	mov	fp, r2
 800c31a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	091b      	lsrs	r3, r3, #4
 800c32c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	4698      	mov	r8, r3
 800c334:	4691      	mov	r9, r2
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	fb08 f203 	mul.w	r2, r8, r3
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	fb09 f303 	mul.w	r3, r9, r3
 800c342:	4413      	add	r3, r2
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	fba2 4508 	umull	r4, r5, r2, r8
 800c34a:	442b      	add	r3, r5
 800c34c:	461d      	mov	r5, r3
 800c34e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800c352:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800c356:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c35a:	f04f 0200 	mov.w	r2, #0
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	0b02      	lsrs	r2, r0, #12
 800c364:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c368:	0b0b      	lsrs	r3, r1, #12
 800c36a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800c36e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d305      	bcc.n	800c382 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800c376:	f04f 32ff 	mov.w	r2, #4294967295
 800c37a:	f04f 0300 	mov.w	r3, #0
 800c37e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	617b      	str	r3, [r7, #20]

	return duration_us;
 800c386:	697b      	ldr	r3, [r7, #20]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3724      	adds	r7, #36	; 0x24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c392:	4770      	bx	lr

0800c394 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800c394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c398:	b096      	sub	sp, #88	; 0x58
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c39e:	460b      	mov	r3, r1
 800c3a0:	627a      	str	r2, [r7, #36]	; 0x24
 800c3a2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800c3b0:	f04f 0200 	mov.w	r2, #0
 800c3b4:	f04f 0300 	mov.w	r3, #0
 800c3b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	17da      	asrs	r2, r3, #31
 800c3c4:	469a      	mov	sl, r3
 800c3c6:	4693      	mov	fp, r2
 800c3c8:	4652      	mov	r2, sl
 800c3ca:	465b      	mov	r3, fp
 800c3cc:	f04f 0000 	mov.w	r0, #0
 800c3d0:	f04f 0100 	mov.w	r1, #0
 800c3d4:	0159      	lsls	r1, r3, #5
 800c3d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c3da:	0150      	lsls	r0, r2, #5
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	ebb2 040a 	subs.w	r4, r2, sl
 800c3e4:	eb63 050b 	sbc.w	r5, r3, fp
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	f04f 0300 	mov.w	r3, #0
 800c3f0:	00ab      	lsls	r3, r5, #2
 800c3f2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c3f6:	00a2      	lsls	r2, r4, #2
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	461d      	mov	r5, r3
 800c3fc:	eb14 080a 	adds.w	r8, r4, sl
 800c400:	eb45 090b 	adc.w	r9, r5, fp
 800c404:	f04f 0200 	mov.w	r2, #0
 800c408:	f04f 0300 	mov.w	r3, #0
 800c40c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800c410:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800c414:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800c418:	4690      	mov	r8, r2
 800c41a:	4699      	mov	r9, r3
 800c41c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800c420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00d      	beq.n	800c442 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800c426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c428:	2200      	movs	r2, #0
 800c42a:	61bb      	str	r3, [r7, #24]
 800c42c:	61fa      	str	r2, [r7, #28]
 800c42e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c432:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c436:	f7f4 fc8f 	bl	8000d58 <__aeabi_uldivmod>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	d02a      	beq.n	800c49e <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800c448:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c44c:	f04f 0200 	mov.w	r2, #0
 800c450:	f04f 0300 	mov.w	r3, #0
 800c454:	02cb      	lsls	r3, r1, #11
 800c456:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c45a:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800c45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c45e:	0849      	lsrs	r1, r1, #1
 800c460:	2000      	movs	r0, #0
 800c462:	6139      	str	r1, [r7, #16]
 800c464:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800c466:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c46a:	4621      	mov	r1, r4
 800c46c:	1851      	adds	r1, r2, r1
 800c46e:	6039      	str	r1, [r7, #0]
 800c470:	4629      	mov	r1, r5
 800c472:	eb43 0101 	adc.w	r1, r3, r1
 800c476:	6079      	str	r1, [r7, #4]
 800c478:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c47c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	2200      	movs	r2, #0
 800c484:	60bb      	str	r3, [r7, #8]
 800c486:	60fa      	str	r2, [r7, #12]
 800c488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c48c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c490:	f7f4 fc62 	bl	8000d58 <__aeabi_uldivmod>
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c49c:	e00b      	b.n	800c4b6 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800c49e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c4a2:	f04f 0200 	mov.w	r2, #0
 800c4a6:	f04f 0300 	mov.w	r3, #0
 800c4aa:	02cb      	lsls	r3, r1, #11
 800c4ac:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c4b0:	02c2      	lsls	r2, r0, #11
 800c4b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800c4b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b8:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800c4ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3758      	adds	r7, #88	; 0x58
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c4c6 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800c4c6:	b480      	push	{r7}
 800c4c8:	b085      	sub	sp, #20
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c4d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4d6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800c4d8:	e002      	b.n	800c4e0 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	089b      	lsrs	r3, r3, #2
 800c4de:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d8f8      	bhi.n	800c4da <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800c4e8:	e017      	b.n	800c51a <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d30b      	bcc.n	800c50e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	085b      	lsrs	r3, r3, #1
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	4413      	add	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	e002      	b.n	800c514 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	085b      	lsrs	r3, r3, #1
 800c512:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	089b      	lsrs	r3, r3, #2
 800c518:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e4      	bne.n	800c4ea <VL53LX_isqrt+0x24>
	}

	return res;
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c544:	4618      	mov	r0, r3
 800c546:	f000 faa5 	bl	800ca94 <VL53LX_decode_vcsel_period>
 800c54a:	4603      	mov	r3, r0
	period = 2048 *
 800c54c:	02db      	lsls	r3, r3, #11
 800c54e:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c55a:	461a      	mov	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c568:	02db      	lsls	r3, r3, #11
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4413      	add	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c576:	02db      	lsls	r3, r3, #11
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d009      	beq.n	800c598 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	fbb3 f2f2 	udiv	r2, r3, r2
 800c58c:	68b9      	ldr	r1, [r7, #8]
 800c58e:	fb01 f202 	mul.w	r2, r1, r2
 800c592:	1a9b      	subs	r3, r3, r2
 800c594:	60fb      	str	r3, [r7, #12]
 800c596:	e001      	b.n	800c59c <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800c5a6:	bf00      	nop
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800c5c0:	6838      	ldr	r0, [r7, #0]
 800c5c2:	f000 fb90 	bl	800cce6 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff ff7a 	bl	800c4c6 <VL53LX_isqrt>
 800c5d2:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800c5d4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	fb02 f303 	mul.w	r3, r2, r3
 800c5de:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	3307      	adds	r3, #7
 800c5e4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	111b      	asrs	r3, r3, #4
 800c5ea:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2200      	movs	r2, #0
 800c604:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c608:	2300      	movs	r3, #0
 800c60a:	73fb      	strb	r3, [r7, #15]
 800c60c:	e01e      	b.n	800c64c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800c60e:	7bfa      	ldrb	r2, [r7, #15]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	3206      	adds	r2, #6
 800c614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	dd13      	ble.n	800c646 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c624:	7bf9      	ldrb	r1, [r7, #15]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	3106      	adds	r1, #6
 800c62a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c62e:	441a      	add	r2, r3
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c63c:	3301      	adds	r3, #1
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c646:	7bfb      	ldrb	r3, [r7, #15]
 800c648:	3301      	adds	r3, #1
 800c64a:	73fb      	strb	r3, [r7, #15]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	7a9b      	ldrb	r3, [r3, #10]
 800c650:	7bfa      	ldrb	r2, [r7, #15]
 800c652:	429a      	cmp	r2, r3
 800c654:	d3db      	bcc.n	800c60e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01c      	beq.n	800c69a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800c678:	0852      	lsrs	r2, r2, #1
 800c67a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c67c:	441a      	add	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800c690:	fb93 f2f2 	sdiv	r2, r3, r2
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800c69a:	bf00      	nop
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c6a2:	b480      	push	{r7}
 800c6a4:	b085      	sub	sp, #20
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7b1b      	ldrb	r3, [r3, #12]
 800c6ba:	f003 0307 	and.w	r3, r3, #7
 800c6be:	2b07      	cmp	r3, #7
 800c6c0:	d13a      	bne.n	800c738 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73bb      	strb	r3, [r7, #14]
 800c6ca:	e01f      	b.n	800c70c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	7b1b      	ldrb	r3, [r3, #12]
 800c6d4:	f003 0307 	and.w	r3, r3, #7
 800c6d8:	2b07      	cmp	r3, #7
 800c6da:	d014      	beq.n	800c706 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800c6dc:	7bba      	ldrb	r2, [r7, #14]
 800c6de:	7b7b      	ldrb	r3, [r7, #13]
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	440a      	add	r2, r1
 800c6e4:	7b11      	ldrb	r1, [r2, #12]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	460a      	mov	r2, r1
 800c6ec:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800c6ee:	7bba      	ldrb	r2, [r7, #14]
 800c6f0:	7b7b      	ldrb	r3, [r7, #13]
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	7c91      	ldrb	r1, [r2, #18]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	460a      	mov	r2, r1
 800c6fe:	749a      	strb	r2, [r3, #18]
				i++;
 800c700:	7b7b      	ldrb	r3, [r7, #13]
 800c702:	3301      	adds	r3, #1
 800c704:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c706:	7bbb      	ldrb	r3, [r7, #14]
 800c708:	3301      	adds	r3, #1
 800c70a:	73bb      	strb	r3, [r7, #14]
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	2b05      	cmp	r3, #5
 800c710:	d9dc      	bls.n	800c6cc <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c712:	7b7b      	ldrb	r3, [r7, #13]
 800c714:	73bb      	strb	r3, [r7, #14]
 800c716:	e00c      	b.n	800c732 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	4413      	add	r3, r2
 800c71e:	2210      	movs	r2, #16
 800c720:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800c722:	7bbb      	ldrb	r3, [r7, #14]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	4413      	add	r3, r2
 800c728:	2200      	movs	r2, #0
 800c72a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c72c:	7bbb      	ldrb	r3, [r7, #14]
 800c72e:	3301      	adds	r3, #1
 800c730:	73bb      	strb	r3, [r7, #14]
 800c732:	7bbb      	ldrb	r3, [r7, #14]
 800c734:	2b05      	cmp	r3, #5
 800c736:	d9ef      	bls.n	800c718 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7adb      	ldrb	r3, [r3, #11]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d023      	beq.n	800c788 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7adb      	ldrb	r3, [r3, #11]
 800c744:	73fb      	strb	r3, [r7, #15]
 800c746:	e00f      	b.n	800c768 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800c748:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	7ad2      	ldrb	r2, [r2, #11]
 800c750:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3106      	adds	r1, #6
 800c756:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3206      	adds	r2, #6
 800c75e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800c762:	7bfb      	ldrb	r3, [r7, #15]
 800c764:	3301      	adds	r3, #1
 800c766:	73fb      	strb	r3, [r7, #15]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800c76c:	7bfa      	ldrb	r2, [r7, #15]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d3ea      	bcc.n	800c748 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	72da      	strb	r2, [r3, #11]
	}
}
 800c788:	bf00      	nop
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c7a6:	88fb      	ldrh	r3, [r7, #6]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff fd83 	bl	800c2b4 <VL53LX_calc_pll_period_us>
 800c7ae:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800c7b4:	f249 2257 	movw	r2, #37463	; 0x9257
 800c7b8:	fb02 f303 	mul.w	r3, r2, r3
 800c7bc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c7c4:	0c1b      	lsrs	r3, r3, #16
 800c7c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800c7d2:	b480      	push	{r7}
 800c7d4:	b087      	sub	sp, #28
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800c7e0:	2307      	movs	r3, #7
 800c7e2:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ee:	db03      	blt.n	800c7f8 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800c7f0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	e004      	b.n	800c802 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	dd01      	ble.n	800c802 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c808:	dd02      	ble.n	800c810 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800c80a:	2303      	movs	r3, #3
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	e001      	b.n	800c814 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800c810:	2307      	movs	r3, #7
 800c812:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d009      	beq.n	800c82e <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	409a      	lsls	r2, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	085b      	lsrs	r3, r3, #1
 800c824:	441a      	add	r2, r3
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c834:	dd02      	ble.n	800c83c <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	011b      	lsls	r3, r3, #4
 800c83a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c842:	d302      	bcc.n	800c84a <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800c844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c848:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800c84e:	89fb      	ldrh	r3, [r7, #14]
}
 800c850:	4618      	mov	r0, r3
 800c852:	371c      	adds	r7, #28
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	603b      	str	r3, [r7, #0]
 800c868:	4613      	mov	r3, r2
 800c86a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800c874:	88fb      	ldrh	r3, [r7, #6]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d010      	beq.n	800c89c <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	021a      	lsls	r2, r3, #8
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	fa02 f303 	lsl.w	r3, r2, r3
 800c884:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800c892:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800c894:	fbb2 f3f3 	udiv	r3, r2, r3
 800c898:	617b      	str	r3, [r7, #20]
 800c89a:	e004      	b.n	800c8a6 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d901      	bls.n	800c8b2 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800c8b6:	8a7b      	ldrh	r3, [r7, #18]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	371c      	adds	r7, #28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800c8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c8:	b093      	sub	sp, #76	; 0x4c
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	461e      	mov	r6, r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c8da:	4633      	mov	r3, r6
 800c8dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800c8e4:	f04f 0200 	mov.w	r2, #0
 800c8e8:	f04f 0300 	mov.w	r3, #0
 800c8ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c8f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff fcda 	bl	800c2b4 <VL53LX_calc_pll_period_us>
 800c900:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800c902:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c904:	2200      	movs	r2, #0
 800c906:	623b      	str	r3, [r7, #32]
 800c908:	627a      	str	r2, [r7, #36]	; 0x24
 800c90a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c90c:	2200      	movs	r2, #0
 800c90e:	61bb      	str	r3, [r7, #24]
 800c910:	61fa      	str	r2, [r7, #28]
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c918:	4602      	mov	r2, r0
 800c91a:	1a9b      	subs	r3, r3, r2
 800c91c:	613b      	str	r3, [r7, #16]
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	460a      	mov	r2, r1
 800c922:	eb63 0302 	sbc.w	r3, r3, r2
 800c926:	617b      	str	r3, [r7, #20]
 800c928:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c92c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800c930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c932:	2200      	movs	r2, #0
 800c934:	469a      	mov	sl, r3
 800c936:	4693      	mov	fp, r2
 800c938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c93a:	fb0a f203 	mul.w	r2, sl, r3
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	fb0b f303 	mul.w	r3, fp, r3
 800c944:	4413      	add	r3, r2
 800c946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c948:	fba2 890a 	umull	r8, r9, r2, sl
 800c94c:	444b      	add	r3, r9
 800c94e:	4699      	mov	r9, r3
 800c950:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800c954:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800c958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	da08      	bge.n	800c972 <VL53LX_range_maths+0xae>
 800c960:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c964:	1851      	adds	r1, r2, r1
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	f143 0300 	adc.w	r3, r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c972:	f04f 0000 	mov.w	r0, #0
 800c976:	f04f 0100 	mov.w	r1, #0
 800c97a:	0a50      	lsrs	r0, r2, #9
 800c97c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c980:	1259      	asrs	r1, r3, #9
 800c982:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800c986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c988:	f249 2257 	movw	r2, #37463	; 0x9257
 800c98c:	fb03 f202 	mul.w	r2, r3, r2
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	2100      	movs	r1, #0
 800c994:	fb01 f303 	mul.w	r3, r1, r3
 800c998:	4413      	add	r3, r2
 800c99a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c99c:	f249 2157 	movw	r1, #37463	; 0x9257
 800c9a0:	fba2 4501 	umull	r4, r5, r2, r1
 800c9a4:	442b      	add	r3, r5
 800c9a6:	461d      	mov	r5, r3
 800c9a8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800c9ac:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800c9b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	da07      	bge.n	800c9c8 <VL53LX_range_maths+0x104>
 800c9b8:	4934      	ldr	r1, [pc, #208]	; (800ca8c <VL53LX_range_maths+0x1c8>)
 800c9ba:	1851      	adds	r1, r2, r1
 800c9bc:	6039      	str	r1, [r7, #0]
 800c9be:	f143 0300 	adc.w	r3, r3, #0
 800c9c2:	607b      	str	r3, [r7, #4]
 800c9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9c8:	f04f 0000 	mov.w	r0, #0
 800c9cc:	f04f 0100 	mov.w	r1, #0
 800c9d0:	0d90      	lsrs	r0, r2, #22
 800c9d2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800c9d6:	1599      	asrs	r1, r3, #22
 800c9d8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c9e0:	4413      	add	r3, r2
 800c9e2:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800c9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c9e8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ec:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800c9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9f4:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800c9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	da01      	bge.n	800ca00 <VL53LX_range_maths+0x13c>
 800c9fc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ca00:	12db      	asrs	r3, r3, #11
 800ca02:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800ca04:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d130      	bne.n	800ca6e <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800ca0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ca18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	da00      	bge.n	800ca20 <VL53LX_range_maths+0x15c>
 800ca1e:	3303      	adds	r3, #3
 800ca20:	109b      	asrs	r3, r3, #2
 800ca22:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800ca24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca26:	4b1a      	ldr	r3, [pc, #104]	; (800ca90 <VL53LX_range_maths+0x1cc>)
 800ca28:	fb83 2301 	smull	r2, r3, r3, r1
 800ca2c:	109a      	asrs	r2, r3, #2
 800ca2e:	17cb      	asrs	r3, r1, #31
 800ca30:	1ad2      	subs	r2, r2, r3
 800ca32:	4613      	mov	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	1aca      	subs	r2, r1, r3
 800ca3c:	2a04      	cmp	r2, #4
 800ca3e:	dc09      	bgt.n	800ca54 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ca40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca42:	4a13      	ldr	r2, [pc, #76]	; (800ca90 <VL53LX_range_maths+0x1cc>)
 800ca44:	fb82 1203 	smull	r1, r2, r2, r3
 800ca48:	1092      	asrs	r2, r2, #2
 800ca4a:	17db      	asrs	r3, r3, #31
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	b21b      	sxth	r3, r3
 800ca50:	647b      	str	r3, [r7, #68]	; 0x44
 800ca52:	e015      	b.n	800ca80 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	4a0e      	ldr	r2, [pc, #56]	; (800ca90 <VL53LX_range_maths+0x1cc>)
 800ca58:	fb82 1203 	smull	r1, r2, r2, r3
 800ca5c:	1092      	asrs	r2, r2, #2
 800ca5e:	17db      	asrs	r3, r3, #31
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	3301      	adds	r3, #1
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	b21b      	sxth	r3, r3
 800ca6a:	647b      	str	r3, [r7, #68]	; 0x44
 800ca6c:	e008      	b.n	800ca80 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800ca6e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d104      	bne.n	800ca80 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800ca76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca78:	0fda      	lsrs	r2, r3, #31
 800ca7a:	4413      	add	r3, r2
 800ca7c:	105b      	asrs	r3, r3, #1
 800ca7e:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800ca80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	374c      	adds	r7, #76	; 0x4c
 800ca86:	46bd      	mov	sp, r7
 800ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8c:	003fffff 	.word	0x003fffff
 800ca90:	66666667 	.word	0x66666667

0800ca94 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800caa2:	79fb      	ldrb	r3, [r7, #7]
 800caa4:	3301      	adds	r3, #1
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800caac:	7bfb      	ldrb	r3, [r7, #15]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800caba:	b480      	push	{r7}
 800cabc:	b083      	sub	sp, #12
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7a5a      	ldrb	r2, [r3, #9]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	605a      	str	r2, [r3, #4]
}
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b087      	sub	sp, #28
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	607a      	str	r2, [r7, #4]
 800cb42:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2203      	movs	r2, #3
 800cb4c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2203      	movs	r2, #3
 800cb52:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2218      	movs	r2, #24
 800cb6a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800cb6c:	897b      	ldrh	r3, [r7, #10]
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	82fb      	strh	r3, [r7, #22]
 800cc0e:	e009      	b.n	800cc24 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800cc10:	8afb      	ldrh	r3, [r7, #22]
 800cc12:	8afa      	ldrh	r2, [r7, #22]
 800cc14:	b2d1      	uxtb	r1, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	4413      	add	r3, r2
 800cc1a:	460a      	mov	r2, r1
 800cc1c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cc1e:	8afb      	ldrh	r3, [r7, #22]
 800cc20:	3301      	adds	r3, #1
 800cc22:	82fb      	strh	r3, [r7, #22]
 800cc24:	8afb      	ldrh	r3, [r7, #22]
 800cc26:	2b05      	cmp	r3, #5
 800cc28:	d9f2      	bls.n	800cc10 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	82fb      	strh	r3, [r7, #22]
 800cc2e:	e007      	b.n	800cc40 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800cc30:	8afb      	ldrh	r3, [r7, #22]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	4413      	add	r3, r2
 800cc36:	2201      	movs	r2, #1
 800cc38:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cc3a:	8afb      	ldrh	r3, [r7, #22]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	82fb      	strh	r3, [r7, #22]
 800cc40:	8afb      	ldrh	r3, [r7, #22]
 800cc42:	2b05      	cmp	r3, #5
 800cc44:	d9f4      	bls.n	800cc30 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800cc46:	2300      	movs	r3, #0
 800cc48:	82fb      	strh	r3, [r7, #22]
 800cc4a:	e013      	b.n	800cc74 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800cc4c:	8afa      	ldrh	r2, [r7, #22]
 800cc4e:	897b      	ldrh	r3, [r7, #10]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d206      	bcs.n	800cc62 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800cc54:	8afa      	ldrh	r2, [r7, #22]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3206      	adds	r2, #6
 800cc5a:	68f9      	ldr	r1, [r7, #12]
 800cc5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cc60:	e005      	b.n	800cc6e <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800cc62:	8afa      	ldrh	r2, [r7, #22]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	3206      	adds	r2, #6
 800cc68:	2100      	movs	r1, #0
 800cc6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800cc6e:	8afb      	ldrh	r3, [r7, #22]
 800cc70:	3301      	adds	r3, #1
 800cc72:	82fb      	strh	r3, [r7, #22]
 800cc74:	8afb      	ldrh	r3, [r7, #22]
 800cc76:	2b17      	cmp	r3, #23
 800cc78:	d9e8      	bls.n	800cc4c <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800cc7a:	bf00      	nop
 800cc7c:	bf00      	nop
 800cc7e:	371c      	adds	r7, #28
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800cc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	da10      	bge.n	800ccc0 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	43db      	mvns	r3, r3
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	f003 0307 	and.w	r3, r3, #7
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	3308      	adds	r3, #8
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	3b80      	subs	r3, #128	; 0x80
 800ccb6:	10db      	asrs	r3, r3, #3
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ccbe:	e00c      	b.n	800ccda <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ccd2:	10db      	asrs	r3, r3, #3
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	701a      	strb	r2, [r3, #0]
}
 800ccda:	bf00      	nop
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b085      	sub	sp, #20
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
 800ccf6:	e02c      	b.n	800cd52 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d009      	beq.n	800cd12 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cd04:	7bf9      	ldrb	r1, [r7, #15]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3106      	adds	r1, #6
 800cd0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	db07      	blt.n	800cd22 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800cd12:	7bfa      	ldrb	r2, [r7, #15]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3206      	adds	r2, #6
 800cd18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <VL53LX_hist_find_min_max_bin_values+0x56>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cd2e:	7bf9      	ldrb	r1, [r7, #15]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3106      	adds	r1, #6
 800cd34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	dc07      	bgt.n	800cd4c <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800cd3c:	7bfa      	ldrb	r2, [r7, #15]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3206      	adds	r2, #6
 800cd42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	73fb      	strb	r3, [r7, #15]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7a9b      	ldrb	r3, [r3, #10]
 800cd56:	7bfa      	ldrb	r2, [r7, #15]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d3cd      	bcc.n	800ccf8 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800cd5c:	bf00      	nop
 800cd5e:	bf00      	nop
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b085      	sub	sp, #20
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	7adb      	ldrb	r3, [r3, #11]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d03a      	beq.n	800cdf4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800cd90:	2300      	movs	r3, #0
 800cd92:	73fb      	strb	r3, [r7, #15]
 800cd94:	e00e      	b.n	800cdb4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800cd9c:	7bf9      	ldrb	r1, [r7, #15]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3106      	adds	r1, #6
 800cda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cda6:	441a      	add	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	73fb      	strb	r3, [r7, #15]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7adb      	ldrb	r3, [r3, #11]
 800cdb8:	7bfa      	ldrb	r2, [r7, #15]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d3eb      	bcc.n	800cd96 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	7ad2      	ldrb	r2, [r2, #11]
 800cdd4:	0852      	lsrs	r2, r2, #1
 800cdd6:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800cdd8:	441a      	add	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800cdea:	fb93 f2f2 	sdiv	r2, r3, r2
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800cdf4:	bf00      	nop
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800ce00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce04:	b0ca      	sub	sp, #296	; 0x128
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ce0c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800ce10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ce14:	4603      	mov	r3, r0
 800ce16:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800ce32:	f04f 0200 	mov.w	r2, #0
 800ce36:	f04f 0300 	mov.w	r3, #0
 800ce3a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800ce44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce48:	2300      	movs	r3, #0
 800ce4a:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800ce4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce50:	2300      	movs	r3, #0
 800ce52:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800ce54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce58:	2300      	movs	r3, #0
 800ce5a:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800ce5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce60:	2300      	movs	r3, #0
 800ce62:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800ce64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce68:	2300      	movs	r3, #0
 800ce6a:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800ce6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce70:	2300      	movs	r3, #0
 800ce72:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800ce74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce78:	2300      	movs	r3, #0
 800ce7a:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800ce7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce80:	2300      	movs	r3, #0
 800ce82:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800ce84:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ce88:	2300      	movs	r3, #0
 800ce8a:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800ce8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f000 80e1 	beq.w	800d05c <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800ce9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80da 	beq.w	800d05c <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800cea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ceac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff f9ff 	bl	800c2b4 <VL53LX_calc_pll_period_us>
 800ceb6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800ceba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec2:	3301      	adds	r3, #1
 800cec4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800cec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ced0:	2110      	movs	r1, #16
 800ced2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ced6:	f7ff fa04 	bl	800c2e2 <VL53LX_duration_maths>
 800ceda:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800cedc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cee0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800cee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cee6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ceea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4619      	mov	r1, r3
 800cef2:	4610      	mov	r0, r2
 800cef4:	f7ff fc6d 	bl	800c7d2 <VL53LX_rate_maths>
 800cef8:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800cefa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cefe:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800cf00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf04:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800cf08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf0c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800cf10:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	f7ff fa3c 	bl	800c394 <VL53LX_events_per_spad_maths>
 800cf1c:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800cf1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf22:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800cf24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf28:	8adb      	ldrh	r3, [r3, #22]
 800cf2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf2e:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800cf30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf34:	8adb      	ldrh	r3, [r3, #22]
 800cf36:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf3a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800cf3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 808a 	beq.w	800d05c <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800cf48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf4c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	2200      	movs	r2, #0
 800cf52:	461c      	mov	r4, r3
 800cf54:	4615      	mov	r5, r2
 800cf56:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800cf5a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800cf5e:	4622      	mov	r2, r4
 800cf60:	462b      	mov	r3, r5
 800cf62:	f04f 0000 	mov.w	r0, #0
 800cf66:	f04f 0100 	mov.w	r1, #0
 800cf6a:	0159      	lsls	r1, r3, #5
 800cf6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cf70:	0150      	lsls	r0, r2, #5
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	ebb2 0804 	subs.w	r8, r2, r4
 800cf7a:	eb63 0905 	sbc.w	r9, r3, r5
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	f04f 0300 	mov.w	r3, #0
 800cf86:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800cf8a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800cf8e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800cf92:	4690      	mov	r8, r2
 800cf94:	4699      	mov	r9, r3
 800cf96:	eb18 0a04 	adds.w	sl, r8, r4
 800cf9a:	eb49 0b05 	adc.w	fp, r9, r5
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	f04f 0300 	mov.w	r3, #0
 800cfa6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfaa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfb2:	4692      	mov	sl, r2
 800cfb4:	469b      	mov	fp, r3
 800cfb6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800cfba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800cfbe:	f04f 0000 	mov.w	r0, #0
 800cfc2:	f04f 0100 	mov.w	r1, #0
 800cfc6:	0319      	lsls	r1, r3, #12
 800cfc8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800cfcc:	0310      	lsls	r0, r2, #12
 800cfce:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800cfd2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	085b      	lsrs	r3, r3, #1
 800cfda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64 += (uint64_t)tmp32;
 800cfde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfe8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800cff0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800cff4:	4621      	mov	r1, r4
 800cff6:	1851      	adds	r1, r2, r1
 800cff8:	65b9      	str	r1, [r7, #88]	; 0x58
 800cffa:	4629      	mov	r1, r5
 800cffc:	eb43 0101 	adc.w	r1, r3, r1
 800d000:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d002:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d006:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800d00a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d00e:	695b      	ldr	r3, [r3, #20]
 800d010:	2200      	movs	r2, #0
 800d012:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d016:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d01a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800d01e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d022:	f7f3 fe99 	bl	8000d58 <__aeabi_uldivmod>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800d02e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d032:	8adb      	ldrh	r3, [r3, #22]
 800d034:	b29b      	uxth	r3, r3
 800d036:	2200      	movs	r2, #0
 800d038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d03c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d040:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d044:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d048:	4621      	mov	r1, r4
 800d04a:	428a      	cmp	r2, r1
 800d04c:	4629      	mov	r1, r5
 800d04e:	418b      	sbcs	r3, r1
 800d050:	d204      	bcs.n	800d05c <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800d052:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800d056:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d05a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800d05c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 82e9 	beq.w	800d63a <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800d068:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d06c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800d070:	2b00      	cmp	r3, #0
 800d072:	f000 82e2 	beq.w	800d63a <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800d076:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d07a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 82dc 	beq.w	800d63a <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800d082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 82d5 	beq.w	800d63a <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800d090:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d094:	885b      	ldrh	r3, [r3, #2]
 800d096:	b29b      	uxth	r3, r3
 800d098:	2200      	movs	r2, #0
 800d09a:	653b      	str	r3, [r7, #80]	; 0x50
 800d09c:	657a      	str	r2, [r7, #84]	; 0x54
 800d09e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d0a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800d0a6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d0aa:	4622      	mov	r2, r4
 800d0ac:	462b      	mov	r3, r5
 800d0ae:	f04f 0000 	mov.w	r0, #0
 800d0b2:	f04f 0100 	mov.w	r1, #0
 800d0b6:	0159      	lsls	r1, r3, #5
 800d0b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d0bc:	0150      	lsls	r0, r2, #5
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	1b11      	subs	r1, r2, r4
 800d0c4:	64b9      	str	r1, [r7, #72]	; 0x48
 800d0c6:	eb63 0305 	sbc.w	r3, r3, r5
 800d0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	f04f 0300 	mov.w	r3, #0
 800d0d4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800d0d8:	4649      	mov	r1, r9
 800d0da:	008b      	lsls	r3, r1, #2
 800d0dc:	4641      	mov	r1, r8
 800d0de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d0e2:	4641      	mov	r1, r8
 800d0e4:	008a      	lsls	r2, r1, #2
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	191b      	adds	r3, r3, r4
 800d0ee:	643b      	str	r3, [r7, #64]	; 0x40
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	eb45 0303 	adc.w	r3, r5, r3
 800d0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d0f8:	f04f 0200 	mov.w	r2, #0
 800d0fc:	f04f 0300 	mov.w	r3, #0
 800d100:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d104:	4629      	mov	r1, r5
 800d106:	02cb      	lsls	r3, r1, #11
 800d108:	4621      	mov	r1, r4
 800d10a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d10e:	4621      	mov	r1, r4
 800d110:	02ca      	lsls	r2, r1, #11
 800d112:	461c      	mov	r4, r3
 800d114:	4613      	mov	r3, r2
 800d116:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800d11a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d11e:	881b      	ldrh	r3, [r3, #0]
 800d120:	085b      	lsrs	r3, r3, #1
 800d122:	b29b      	uxth	r3, r3
 800d124:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800d128:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d12c:	2200      	movs	r2, #0
 800d12e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d132:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d136:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d13a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d13e:	4621      	mov	r1, r4
 800d140:	1851      	adds	r1, r2, r1
 800d142:	63b9      	str	r1, [r7, #56]	; 0x38
 800d144:	4629      	mov	r1, r5
 800d146:	eb43 0101 	adc.w	r1, r3, r1
 800d14a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d14c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d150:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800d154:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d166:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800d16a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d16e:	f7f3 fdf3 	bl	8000d58 <__aeabi_uldivmod>
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800d17a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d17e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d182:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800d184:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	011a      	lsls	r2, r3, #4
 800d18c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d190:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800d192:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2200      	movs	r2, #0
 800d19a:	633b      	str	r3, [r7, #48]	; 0x30
 800d19c:	637a      	str	r2, [r7, #52]	; 0x34
 800d19e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d1a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800d1a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d1b2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d1b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d1ba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800d1be:	4622      	mov	r2, r4
 800d1c0:	fb02 f203 	mul.w	r2, r2, r3
 800d1c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	fb01 f303 	mul.w	r3, r1, r3
 800d1ce:	441a      	add	r2, r3
 800d1d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	fba3 1301 	umull	r1, r3, r3, r1
 800d1da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1de:	460b      	mov	r3, r1
 800d1e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d1e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d1e8:	18d3      	adds	r3, r2, r3
 800d1ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1ee:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d1f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d1f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800d1fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1fe:	8b5b      	ldrh	r3, [r3, #26]
 800d200:	b29b      	uxth	r3, r3
 800d202:	2200      	movs	r2, #0
 800d204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d208:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d20c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d210:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d214:	4622      	mov	r2, r4
 800d216:	fb02 f203 	mul.w	r2, r2, r3
 800d21a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d21e:	4629      	mov	r1, r5
 800d220:	fb01 f303 	mul.w	r3, r1, r3
 800d224:	441a      	add	r2, r3
 800d226:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d22a:	4621      	mov	r1, r4
 800d22c:	fba3 1301 	umull	r1, r3, r3, r1
 800d230:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d234:	460b      	mov	r3, r1
 800d236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d23e:	18d3      	adds	r3, r2, r3
 800d240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d244:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d248:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d24c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800d250:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d254:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800d258:	62b9      	str	r1, [r7, #40]	; 0x28
 800d25a:	f143 0300 	adc.w	r3, r3, #0
 800d25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d260:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d264:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800d268:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d26c:	f04f 0000 	mov.w	r0, #0
 800d270:	f04f 0100 	mov.w	r1, #0
 800d274:	0cd0      	lsrs	r0, r2, #19
 800d276:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800d27a:	0cd9      	lsrs	r1, r3, #19
 800d27c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800d280:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d284:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800d288:	6239      	str	r1, [r7, #32]
 800d28a:	f143 0300 	adc.w	r3, r3, #0
 800d28e:	627b      	str	r3, [r7, #36]	; 0x24
 800d290:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d294:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800d298:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2a0:	f04f 0300 	mov.w	r3, #0
 800d2a4:	f7f3 fd58 	bl	8000d58 <__aeabi_uldivmod>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800d2b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d2b4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800d2b8:	f173 0300 	sbcs.w	r3, r3, #0
 800d2bc:	d305      	bcc.n	800d2ca <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800d2be:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d2c2:	f04f 0300 	mov.w	r3, #0
 800d2c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800d2ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d2ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2d2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800d2d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	61bb      	str	r3, [r7, #24]
 800d2de:	61fa      	str	r2, [r7, #28]
 800d2e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d2e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800d2e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d2f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d2fc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d300:	4622      	mov	r2, r4
 800d302:	fb02 f203 	mul.w	r2, r2, r3
 800d306:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d30a:	4629      	mov	r1, r5
 800d30c:	fb01 f303 	mul.w	r3, r1, r3
 800d310:	441a      	add	r2, r3
 800d312:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d316:	4621      	mov	r1, r4
 800d318:	fba3 1301 	umull	r1, r3, r3, r1
 800d31c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d320:	460b      	mov	r3, r1
 800d322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d32a:	18d3      	adds	r3, r2, r3
 800d32c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d330:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d334:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d338:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800d33c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d340:	8b5b      	ldrh	r3, [r3, #26]
 800d342:	b29b      	uxth	r3, r3
 800d344:	2200      	movs	r2, #0
 800d346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d34a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d34e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d352:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d356:	4622      	mov	r2, r4
 800d358:	fb02 f203 	mul.w	r2, r2, r3
 800d35c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d360:	4629      	mov	r1, r5
 800d362:	fb01 f303 	mul.w	r3, r1, r3
 800d366:	441a      	add	r2, r3
 800d368:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d36c:	4621      	mov	r1, r4
 800d36e:	fba3 1301 	umull	r1, r3, r3, r1
 800d372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d376:	460b      	mov	r3, r1
 800d378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d37c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d380:	18d3      	adds	r3, r2, r3
 800d382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d386:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d38a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d38e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800d392:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d396:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800d39a:	6139      	str	r1, [r7, #16]
 800d39c:	f143 0300 	adc.w	r3, r3, #0
 800d3a0:	617b      	str	r3, [r7, #20]
 800d3a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d3a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800d3aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d3ae:	f04f 0000 	mov.w	r0, #0
 800d3b2:	f04f 0100 	mov.w	r1, #0
 800d3b6:	0cd0      	lsrs	r0, r2, #19
 800d3b8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800d3bc:	0cd9      	lsrs	r1, r3, #19
 800d3be:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800d3c2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d3ca:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800d3cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d3d0:	891b      	ldrh	r3, [r3, #8]
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	673b      	str	r3, [r7, #112]	; 0x70
 800d3d8:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800d3da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800d3de:	462b      	mov	r3, r5
 800d3e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d3e4:	4642      	mov	r2, r8
 800d3e6:	fb02 f203 	mul.w	r2, r2, r3
 800d3ea:	464b      	mov	r3, r9
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	fb01 f303 	mul.w	r3, r1, r3
 800d3f2:	4413      	add	r3, r2
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4641      	mov	r1, r8
 800d3f8:	fba2 1201 	umull	r1, r2, r2, r1
 800d3fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d400:	460a      	mov	r2, r1
 800d402:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800d406:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800d40a:	4413      	add	r3, r2
 800d40c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d414:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800d418:	4622      	mov	r2, r4
 800d41a:	fb02 f203 	mul.w	r2, r2, r3
 800d41e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d422:	4629      	mov	r1, r5
 800d424:	fb01 f303 	mul.w	r3, r1, r3
 800d428:	4413      	add	r3, r2
 800d42a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d42e:	4621      	mov	r1, r4
 800d430:	fba2 1201 	umull	r1, r2, r2, r1
 800d434:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d438:	460a      	mov	r2, r1
 800d43a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800d43e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d442:	4413      	add	r3, r2
 800d444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d448:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800d44c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d450:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800d454:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d458:	88db      	ldrh	r3, [r3, #6]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	2200      	movs	r2, #0
 800d45e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d460:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800d46e:	4629      	mov	r1, r5
 800d470:	01cb      	lsls	r3, r1, #7
 800d472:	4621      	mov	r1, r4
 800d474:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800d478:	4621      	mov	r1, r4
 800d47a:	01ca      	lsls	r2, r1, #7
 800d47c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d480:	1884      	adds	r4, r0, r2
 800d482:	60bc      	str	r4, [r7, #8]
 800d484:	eb41 0303 	adc.w	r3, r1, r3
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d48e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800d492:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d496:	88db      	ldrh	r3, [r3, #6]
 800d498:	b29b      	uxth	r3, r3
 800d49a:	2200      	movs	r2, #0
 800d49c:	663b      	str	r3, [r7, #96]	; 0x60
 800d49e:	667a      	str	r2, [r7, #100]	; 0x64
 800d4a0:	f04f 0200 	mov.w	r2, #0
 800d4a4:	f04f 0300 	mov.w	r3, #0
 800d4a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	020b      	lsls	r3, r1, #8
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	020a      	lsls	r2, r1, #8
 800d4ba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d4be:	f7f3 fc4b 	bl	8000d58 <__aeabi_uldivmod>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800d4ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d4ce:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800d4d2:	6039      	str	r1, [r7, #0]
 800d4d4:	f143 0300 	adc.w	r3, r3, #0
 800d4d8:	607b      	str	r3, [r7, #4]
 800d4da:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d4de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800d4e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d4e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4ea:	f04f 0300 	mov.w	r3, #0
 800d4ee:	f7f3 fc33 	bl	8000d58 <__aeabi_uldivmod>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800d4fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d4fe:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800d502:	f173 0300 	sbcs.w	r3, r3, #0
 800d506:	d305      	bcc.n	800d514 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800d508:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d50c:	f04f 0300 	mov.w	r3, #0
 800d510:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800d514:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d518:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d51c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800d51e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d522:	69db      	ldr	r3, [r3, #28]
 800d524:	021b      	lsls	r3, r3, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe ffcd 	bl	800c4c6 <VL53LX_isqrt>
 800d52c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800d530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	461a      	mov	r2, r3
 800d538:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d53c:	fb02 f303 	mul.w	r3, r2, r3
 800d540:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53LX_p_028 <
 800d544:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d548:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800d54a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800d54e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800d550:	4293      	cmp	r3, r2
 800d552:	d218      	bcs.n	800d586 <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800d554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800d55c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d560:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800d568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d56c:	021b      	lsls	r3, r3, #8
 800d56e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800d572:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d576:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d203      	bcs.n	800d586 <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800d57e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d582:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800d586:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d58a:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800d58c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d590:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800d592:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800d594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d598:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800d59a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d59e:	f000 f854 	bl	800d64a <VL53LX_f_002>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800d5a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5aa:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800d5ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5b0:	6a1b      	ldr	r3, [r3, #32]
 800d5b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800d5b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d5ba:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d5c4:	fb02 f303 	mul.w	r3, r2, r3
 800d5c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800d5cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800d5d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d5da:	091b      	lsrs	r3, r3, #4
 800d5dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800d5e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5e4:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800d5e6:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800d5e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5ec:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800d5ee:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800d5f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5f4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800d5f6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d5fa:	f000 f826 	bl	800d64a <VL53LX_f_002>
 800d5fe:	4603      	mov	r3, r0
 800d600:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800d602:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d606:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800d608:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d60c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800d610:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d614:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800d618:	429a      	cmp	r2, r3
 800d61a:	da07      	bge.n	800d62c <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800d61c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d620:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800d624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d628:	801a      	strh	r2, [r3, #0]
 800d62a:	e006      	b.n	800d63a <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800d62c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d630:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800d634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d638:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800d63a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800d63e:	4618      	mov	r0, r3
 800d640:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d644:	46bd      	mov	sp, r7
 800d646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d64a <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b086      	sub	sp, #24
 800d64e:	af00      	add	r7, sp, #0
 800d650:	60f8      	str	r0, [r7, #12]
 800d652:	60b9      	str	r1, [r7, #8]
 800d654:	607a      	str	r2, [r7, #4]
 800d656:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	fb03 f303 	mul.w	r3, r3, r3
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	4413      	add	r3, r2
 800d670:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800d672:	6938      	ldr	r0, [r7, #16]
 800d674:	f7fe ff27 	bl	800c4c6 <VL53LX_isqrt>
 800d678:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800d67a:	693a      	ldr	r2, [r7, #16]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	4413      	add	r3, r2
 800d680:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	011b      	lsls	r3, r3, #4
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe ff1d 	bl	800c4c6 <VL53LX_isqrt>
 800d68c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	fb02 f303 	mul.w	r3, r2, r3
 800d696:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d009      	beq.n	800d6b2 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6b0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800d6b2:	697b      	ldr	r3, [r7, #20]

}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2218      	movs	r2, #24
 800d6cc:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	73fb      	strb	r3, [r7, #15]
 800d6f2:	e01f      	b.n	800d734 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	4413      	add	r3, r2
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	4413      	add	r3, r2
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800d716:	7bfa      	ldrb	r2, [r7, #15]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	322e      	adds	r2, #46	; 0x2e
 800d71c:	2100      	movs	r1, #0
 800d71e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800d722:	7bfa      	ldrb	r2, [r7, #15]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	3246      	adds	r2, #70	; 0x46
 800d728:	2100      	movs	r1, #0
 800d72a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800d72e:	7bfb      	ldrb	r3, [r7, #15]
 800d730:	3301      	adds	r3, #1
 800d732:	73fb      	strb	r3, [r7, #15]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	785b      	ldrb	r3, [r3, #1]
 800d738:	7bfa      	ldrb	r2, [r7, #15]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d3da      	bcc.n	800d6f4 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2208      	movs	r2, #8
 800d74a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d75c:	461a      	mov	r2, r3
 800d75e:	2118      	movs	r1, #24
 800d760:	2000      	movs	r0, #0
 800d762:	f7ff f9e8 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d76c:	461a      	mov	r2, r3
 800d76e:	2118      	movs	r1, #24
 800d770:	2000      	movs	r0, #0
 800d772:	f7ff f9e0 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d77c:	461a      	mov	r2, r3
 800d77e:	2118      	movs	r1, #24
 800d780:	2000      	movs	r0, #0
 800d782:	f7ff f9d8 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d78c:	461a      	mov	r2, r3
 800d78e:	2118      	movs	r1, #24
 800d790:	2000      	movs	r0, #0
 800d792:	f7ff f9d0 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d79c:	461a      	mov	r2, r3
 800d79e:	2118      	movs	r1, #24
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f7ff f9c8 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800d7a6:	bf00      	nop
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d7ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7b2:	b090      	sub	sp, #64	; 0x40
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	61b9      	str	r1, [r7, #24]
 800d7b8:	617a      	str	r2, [r7, #20]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	4603      	mov	r3, r0
 800d7be:	83fb      	strh	r3, [r7, #30]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	f04f 0300 	mov.w	r3, #0
 800d7de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53LX_p_018       = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800d7ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7f0:	7a5a      	ldrb	r2, [r3, #9]
 800d7f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7f4:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800d7f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7f8:	7a1a      	ldrb	r2, [r3, #8]
 800d7fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7fc:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800d7fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d800:	7a9a      	ldrb	r2, [r3, #10]
 800d802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d804:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800d806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d808:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d80c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d80e:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800d810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d812:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff f93c 	bl	800ca94 <VL53LX_decode_vcsel_period>
 800d81c:	4603      	mov	r3, r0
 800d81e:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800d820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d822:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800d824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d82a:	17da      	asrs	r2, r3, #31
 800d82c:	60bb      	str	r3, [r7, #8]
 800d82e:	60fa      	str	r2, [r7, #12]
 800d830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d834:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800d838:	8bfb      	ldrh	r3, [r7, #30]
 800d83a:	2200      	movs	r2, #0
 800d83c:	4698      	mov	r8, r3
 800d83e:	4691      	mov	r9, r2
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	fb08 f203 	mul.w	r2, r8, r3
 800d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d848:	fb09 f303 	mul.w	r3, r9, r3
 800d84c:	4413      	add	r3, r2
 800d84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d850:	fba2 4508 	umull	r4, r5, r2, r8
 800d854:	442b      	add	r3, r5
 800d856:	461d      	mov	r5, r3
 800d858:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800d85c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800d860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d864:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800d868:	f143 0b00 	adc.w	fp, r3, #0
 800d86c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800d870:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d874:	2b00      	cmp	r3, #0
 800d876:	da08      	bge.n	800d88a <VL53LX_f_006+0xdc>
 800d878:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d87c:	1851      	adds	r1, r2, r1
 800d87e:	6039      	str	r1, [r7, #0]
 800d880:	f143 0300 	adc.w	r3, r3, #0
 800d884:	607b      	str	r3, [r7, #4]
 800d886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d88a:	f04f 0000 	mov.w	r0, #0
 800d88e:	f04f 0100 	mov.w	r1, #0
 800d892:	0b10      	lsrs	r0, r2, #12
 800d894:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d898:	1319      	asrs	r1, r3, #12
 800d89a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8a8:	e062      	b.n	800d970 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800d8aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d8ae:	089b      	lsrs	r3, r3, #2
 800d8b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800d8b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d8b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8ba:	4413      	add	r3, r2
 800d8bc:	7c9b      	ldrb	r3, [r3, #18]
 800d8be:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	dd4f      	ble.n	800d966 <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800d8c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8c8:	7a9b      	ldrb	r3, [r3, #10]
 800d8ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d20f      	bcs.n	800d8f2 <VL53LX_f_006+0x144>
 800d8d2:	7f7b      	ldrb	r3, [r7, #29]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00c      	beq.n	800d8f2 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800d8d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8de:	3206      	adds	r2, #6
 800d8e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	441a      	add	r2, r3
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	fb02 f303 	mul.w	r3, r2, r3
 800d8ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8f0:	e004      	b.n	800d8fc <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8f6:	fb02 f303 	mul.w	r3, r2, r3
 800d8fa:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe fde1 	bl	800c4c6 <VL53LX_isqrt>
 800d904:	4603      	mov	r3, r0
 800d906:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53LX_p_018 += (samples/2);
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	0fda      	lsrs	r2, r3, #31
 800d90c:	4413      	add	r3, r2
 800d90e:	105b      	asrs	r3, r3, #1
 800d910:	461a      	mov	r2, r3
 800d912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d914:	4413      	add	r3, r2
 800d916:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 /= samples;
 800d918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	fb92 f3f3 	sdiv	r3, r2, r3
 800d920:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d924:	69ba      	ldr	r2, [r7, #24]
 800d926:	fb02 f303 	mul.w	r3, r2, r3
 800d92a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 += 8;
 800d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92e:	3308      	adds	r3, #8
 800d930:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 /= 16;
 800d932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d934:	2b00      	cmp	r3, #0
 800d936:	da00      	bge.n	800d93a <VL53LX_f_006+0x18c>
 800d938:	330f      	adds	r3, #15
 800d93a:	111b      	asrs	r3, r3, #4
 800d93c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 += amb_events;
 800d93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	4413      	add	r3, r2
 800d944:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800d946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	da01      	bge.n	800d952 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800d952:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d958:	3216      	adds	r2, #22
 800d95a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d95c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800d960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d964:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d966:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d96a:	3301      	adds	r3, #1
 800d96c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d972:	7a9b      	ldrb	r3, [r3, #10]
 800d974:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d978:	429a      	cmp	r2, r3
 800d97a:	d396      	bcc.n	800d8aa <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800d97c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d97e:	2200      	movs	r2, #0
 800d980:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800d982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d984:	7a1b      	ldrb	r3, [r3, #8]
 800d986:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d98a:	e033      	b.n	800d9f4 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800d98c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d992:	3206      	adds	r2, #6
 800d994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d998:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800d99c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d99e:	3116      	adds	r1, #22
 800d9a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	dd13      	ble.n	800d9d0 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800d9a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9ae:	4413      	add	r3, r2
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800d9b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9ba:	4413      	add	r3, r2
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800d9c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9c4:	791b      	ldrb	r3, [r3, #4]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9cc:	711a      	strb	r2, [r3, #4]
 800d9ce:	e00c      	b.n	800d9ea <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800d9d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9d6:	4413      	add	r3, r2
 800d9d8:	2200      	movs	r2, #0
 800d9da:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800d9dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9e2:	4413      	add	r3, r2
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800d9ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d9f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9f6:	7a9b      	ldrb	r3, [r3, #10]
 800d9f8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d3c5      	bcc.n	800d98c <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800da00:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800da04:	4618      	mov	r0, r3
 800da06:	3740      	adds	r7, #64	; 0x40
 800da08:	46bd      	mov	sp, r7
 800da0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800da0e <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800da16:	2300      	movs	r3, #0
 800da18:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800da1e:	2300      	movs	r3, #0
 800da20:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800da2e:	2300      	movs	r3, #0
 800da30:	73fb      	strb	r3, [r7, #15]
 800da32:	e02d      	b.n	800da90 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	3301      	adds	r3, #1
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	78d2      	ldrb	r2, [r2, #3]
 800da3c:	fb93 f1f2 	sdiv	r1, r3, r2
 800da40:	fb01 f202 	mul.w	r2, r1, r2
 800da44:	1a9b      	subs	r3, r3, r2
 800da46:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	789b      	ldrb	r3, [r3, #2]
 800da4c:	7bfa      	ldrb	r2, [r7, #15]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d21b      	bcs.n	800da8a <VL53LX_f_007+0x7c>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	789b      	ldrb	r3, [r3, #2]
 800da56:	7b3a      	ldrb	r2, [r7, #12]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d216      	bcs.n	800da8a <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	4413      	add	r3, r2
 800da62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10f      	bne.n	800da8a <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800da6a:	7b3b      	ldrb	r3, [r7, #12]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	4413      	add	r3, r2
 800da70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800da74:	2b01      	cmp	r3, #1
 800da76:	d108      	bne.n	800da8a <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800da78:	7bbb      	ldrb	r3, [r7, #14]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	7bfa      	ldrb	r2, [r7, #15]
 800da82:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800da86:	2301      	movs	r3, #1
 800da88:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800da8a:	7bfb      	ldrb	r3, [r7, #15]
 800da8c:	3301      	adds	r3, #1
 800da8e:	73fb      	strb	r3, [r7, #15]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	78db      	ldrb	r3, [r3, #3]
 800da94:	7bfa      	ldrb	r2, [r7, #15]
 800da96:	429a      	cmp	r2, r3
 800da98:	d3cc      	bcc.n	800da34 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800da9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3714      	adds	r7, #20
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800daaa:	b480      	push	{r7}
 800daac:	b085      	sub	sp, #20
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dab2:	2300      	movs	r3, #0
 800dab4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800dac8:	73fb      	strb	r3, [r7, #15]
 800daca:	e05a      	b.n	800db82 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	78da      	ldrb	r2, [r3, #3]
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dad6:	fb01 f202 	mul.w	r2, r1, r2
 800dada:	1a9b      	subs	r3, r3, r2
 800dadc:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	3301      	adds	r3, #1
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	78d2      	ldrb	r2, [r2, #3]
 800dae6:	fb93 f1f2 	sdiv	r1, r3, r2
 800daea:	fb01 f202 	mul.w	r2, r1, r2
 800daee:	1a9b      	subs	r3, r3, r2
 800daf0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	789b      	ldrb	r3, [r3, #2]
 800daf6:	7b7a      	ldrb	r2, [r7, #13]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d23f      	bcs.n	800db7c <VL53LX_f_008+0xd2>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	789b      	ldrb	r3, [r3, #2]
 800db00:	7b3a      	ldrb	r2, [r7, #12]
 800db02:	429a      	cmp	r2, r3
 800db04:	d23a      	bcs.n	800db7c <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800db06:	7b7b      	ldrb	r3, [r7, #13]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	4413      	add	r3, r2
 800db0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10e      	bne.n	800db32 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800db14:	7b3b      	ldrb	r3, [r7, #12]
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	4413      	add	r3, r2
 800db1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d107      	bne.n	800db32 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800db28:	3301      	adds	r3, #1
 800db2a:	b2da      	uxtb	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800db3e:	429a      	cmp	r2, r3
 800db40:	d905      	bls.n	800db4e <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800db4e:	7b7b      	ldrb	r3, [r7, #13]
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	4413      	add	r3, r2
 800db54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d009      	beq.n	800db70 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800db5c:	7b7b      	ldrb	r3, [r7, #13]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	4413      	add	r3, r2
 800db68:	460a      	mov	r2, r1
 800db6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db6e:	e005      	b.n	800db7c <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800db70:	7b7b      	ldrb	r3, [r7, #13]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	4413      	add	r3, r2
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	3301      	adds	r3, #1
 800db80:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800db82:	7bfa      	ldrb	r2, [r7, #15]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800db8a:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800db90:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800db92:	429a      	cmp	r2, r3
 800db94:	db9a      	blt.n	800dacc <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800db96:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b087      	sub	sp, #28
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	78db      	ldrb	r3, [r3, #3]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800dbce:	7cbb      	ldrb	r3, [r7, #18]
 800dbd0:	085b      	lsrs	r3, r3, #1
 800dbd2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800dbda:	75fb      	strb	r3, [r7, #23]
 800dbdc:	e0a2      	b.n	800dd24 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	78da      	ldrb	r2, [r3, #3]
 800dbe2:	7dfb      	ldrb	r3, [r7, #23]
 800dbe4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbe8:	fb01 f202 	mul.w	r2, r1, r2
 800dbec:	1a9b      	subs	r3, r3, r2
 800dbee:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800dbf0:	7dfb      	ldrb	r3, [r7, #23]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	78d2      	ldrb	r2, [r2, #3]
 800dbf8:	fb93 f1f2 	sdiv	r1, r3, r2
 800dbfc:	fb01 f202 	mul.w	r2, r1, r2
 800dc00:	1a9b      	subs	r3, r3, r2
 800dc02:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	789b      	ldrb	r3, [r3, #2]
 800dc08:	7d7a      	ldrb	r2, [r7, #21]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	f080 8087 	bcs.w	800dd1e <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800dc14:	7d3a      	ldrb	r2, [r7, #20]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	f080 8081 	bcs.w	800dd1e <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800dc1c:	7d7b      	ldrb	r3, [r7, #21]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	4413      	add	r3, r2
 800dc22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d12f      	bne.n	800dc8a <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800dc2a:	7d3b      	ldrb	r3, [r7, #20]
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	4413      	add	r3, r2
 800dc30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d028      	beq.n	800dc8a <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800dc38:	7d3b      	ldrb	r3, [r7, #20]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc42:	3b01      	subs	r3, #1
 800dc44:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800dc4c:	7cfa      	ldrb	r2, [r7, #19]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d21b      	bcs.n	800dc8a <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800dc52:	7cfa      	ldrb	r2, [r7, #19]
 800dc54:	4613      	mov	r3, r2
 800dc56:	00db      	lsls	r3, r3, #3
 800dc58:	4413      	add	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	4413      	add	r3, r2
 800dc64:	3304      	adds	r3, #4
 800dc66:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	7dfa      	ldrb	r2, [r7, #23]
 800dc6c:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	3301      	adds	r3, #1
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	22ff      	movs	r2, #255	; 0xff
 800dc7c:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800dc8a:	7d7b      	ldrb	r3, [r7, #21]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	4413      	add	r3, r2
 800dc90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d042      	beq.n	800dd1e <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800dc98:	7d3b      	ldrb	r3, [r7, #20]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d13b      	bne.n	800dd1e <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800dca6:	7d7b      	ldrb	r3, [r7, #21]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	4413      	add	r3, r2
 800dcac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800dcba:	7cfa      	ldrb	r2, [r7, #19]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d22e      	bcs.n	800dd1e <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800dcc0:	7cfa      	ldrb	r2, [r7, #19]
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	4413      	add	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	7dfa      	ldrb	r2, [r7, #23]
 800dcda:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
 800dcde:	3301      	adds	r3, #1
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	3301      	adds	r3, #1
 800dd08:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	799b      	ldrb	r3, [r3, #6]
 800dd12:	7cba      	ldrb	r2, [r7, #18]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d202      	bcs.n	800dd1e <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	7cba      	ldrb	r2, [r7, #18]
 800dd1c:	719a      	strb	r2, [r3, #6]
		blb++) {
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
 800dd20:	3301      	adds	r3, #1
 800dd22:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800dd24:	7dfa      	ldrb	r2, [r7, #23]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800dd2c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800dd32:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800dd34:	429a      	cmp	r2, r3
 800dd36:	f6ff af52 	blt.w	800dbde <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800dd3a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	371c      	adds	r7, #28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b090      	sub	sp, #64	; 0x40
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	4603      	mov	r3, r0
 800dd52:	6039      	str	r1, [r7, #0]
 800dd54:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dd56:	2300      	movs	r3, #0
 800dd58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800dd5c:	f107 030c 	add.w	r3, r7, #12
 800dd60:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d965      	bls.n	800de44 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800dd78:	e05f      	b.n	800de3a <VL53LX_f_016+0xf0>

		swapped = 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800dd80:	2301      	movs	r3, #1
 800dd82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dd86:	e051      	b.n	800de2c <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800dd88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd8c:	1e5a      	subs	r2, r3, #1
 800dd8e:	4613      	mov	r3, r2
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	4413      	add	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	3304      	adds	r3, #4
 800dda0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800dda2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800dda6:	4613      	mov	r3, r2
 800dda8:	00db      	lsls	r3, r3, #3
 800ddaa:	4413      	add	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d118      	bne.n	800ddf2 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800ddc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc2:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	da2a      	bge.n	800de22 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ddcc:	2224      	movs	r2, #36	; 0x24
 800ddce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddd2:	f008 f855 	bl	8015e80 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ddd6:	2224      	movs	r2, #36	; 0x24
 800ddd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dddc:	f008 f850 	bl	8015e80 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800dde0:	2224      	movs	r2, #36	; 0x24
 800dde2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dde4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dde6:	f008 f84b 	bl	8015e80 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ddea:	2301      	movs	r3, #1
 800ddec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ddf0:	e017      	b.n	800de22 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800ddf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf4:	699a      	ldr	r2, [r3, #24]
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d911      	bls.n	800de22 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ddfe:	2224      	movs	r2, #36	; 0x24
 800de00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de04:	f008 f83c 	bl	8015e80 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800de08:	2224      	movs	r2, #36	; 0x24
 800de0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de0e:	f008 f837 	bl	8015e80 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800de12:	2224      	movs	r2, #36	; 0x24
 800de14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de18:	f008 f832 	bl	8015e80 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800de1c:	2301      	movs	r3, #1
 800de1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800de22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800de26:	3301      	adds	r3, #1
 800de28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800de32:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800de36:	429a      	cmp	r2, r3
 800de38:	d3a6      	bcc.n	800dd88 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800de3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d19b      	bne.n	800dd7a <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800de42:	e000      	b.n	800de46 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800de44:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800de46:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3740      	adds	r7, #64	; 0x40
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800de52:	b480      	push	{r7}
 800de54:	b087      	sub	sp, #28
 800de56:	af00      	add	r7, sp, #0
 800de58:	4603      	mov	r3, r0
 800de5a:	60b9      	str	r1, [r7, #8]
 800de5c:	607a      	str	r2, [r7, #4]
 800de5e:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800de60:	2300      	movs	r3, #0
 800de62:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800de68:	2300      	movs	r3, #0
 800de6a:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800de6c:	7bfa      	ldrb	r2, [r7, #15]
 800de6e:	4613      	mov	r3, r2
 800de70:	00db      	lsls	r3, r3, #3
 800de72:	4413      	add	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	4413      	add	r3, r2
 800de7e:	3304      	adds	r3, #4
 800de80:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2200      	movs	r2, #0
 800de86:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	2200      	movs	r2, #0
 800de8c:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	75fb      	strb	r3, [r7, #23]
 800de94:	e01c      	b.n	800ded0 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	78da      	ldrb	r2, [r3, #3]
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dea0:	fb01 f202 	mul.w	r2, r1, r2
 800dea4:	1a9b      	subs	r3, r3, r2
 800dea6:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	68da      	ldr	r2, [r3, #12]
 800deac:	7d79      	ldrb	r1, [r7, #21]
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	3106      	adds	r1, #6
 800deb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800deb6:	441a      	add	r2, r3
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	441a      	add	r2, r3
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	3301      	adds	r3, #1
 800dece:	75fb      	strb	r3, [r7, #23]
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	791b      	ldrb	r3, [r3, #4]
 800ded4:	7dfa      	ldrb	r2, [r7, #23]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d9dd      	bls.n	800de96 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	68da      	ldr	r2, [r3, #12]
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800dee8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800deec:	4618      	mov	r0, r3
 800deee:	371c      	adds	r7, #28
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b08d      	sub	sp, #52	; 0x34
 800defc:	af02      	add	r7, sp, #8
 800defe:	60ba      	str	r2, [r7, #8]
 800df00:	607b      	str	r3, [r7, #4]
 800df02:	4603      	mov	r3, r0
 800df04:	73fb      	strb	r3, [r7, #15]
 800df06:	460b      	mov	r3, r1
 800df08:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800df0a:	2300      	movs	r3, #0
 800df0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800df26:	7bfa      	ldrb	r2, [r7, #15]
 800df28:	4613      	mov	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	4413      	add	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	4413      	add	r3, r2
 800df38:	3304      	adds	r3, #4
 800df3a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	789b      	ldrb	r3, [r3, #2]
 800df40:	2bff      	cmp	r3, #255	; 0xff
 800df42:	d102      	bne.n	800df4a <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2201      	movs	r2, #1
 800df48:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	789b      	ldrb	r3, [r3, #2]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	78d2      	ldrb	r2, [r2, #3]
 800df52:	fbb3 f1f2 	udiv	r1, r3, r2
 800df56:	fb01 f202 	mul.w	r2, r1, r2
 800df5a:	1a9b      	subs	r3, r3, r2
 800df5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800df60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df64:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	8c3b      	ldrh	r3, [r7, #32]
 800df6e:	4413      	add	r3, r2
 800df70:	b29b      	uxth	r3, r3
 800df72:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800df74:	8c3a      	ldrh	r2, [r7, #32]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	789b      	ldrb	r3, [r3, #2]
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	b29b      	uxth	r3, r3
 800df80:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800df82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df86:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	791b      	ldrb	r3, [r3, #4]
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	8bfb      	ldrh	r3, [r7, #30]
 800df90:	4413      	add	r3, r2
 800df92:	b29b      	uxth	r3, r3
 800df94:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800df96:	8bfa      	ldrh	r2, [r7, #30]
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	789b      	ldrb	r3, [r3, #2]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800dfa4:	8bfa      	ldrh	r2, [r7, #30]
 800dfa6:	8c3b      	ldrh	r3, [r7, #32]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800dfae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dfb2:	2b03      	cmp	r3, #3
 800dfb4:	dd01      	ble.n	800dfba <VL53LX_f_015+0xc2>
		window_width = 3;
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800dfba:	8c3a      	ldrh	r2, [r7, #32]
 800dfbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfbe:	4413      	add	r3, r2
 800dfc0:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800dfc2:	b219      	sxth	r1, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	78da      	ldrb	r2, [r3, #3]
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	3314      	adds	r3, #20
 800dfcc:	7bbc      	ldrb	r4, [r7, #14]
 800dfce:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800dfd2:	9301      	str	r3, [sp, #4]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	4623      	mov	r3, r4
 800dfda:	f000 f846 	bl	800e06a <VL53LX_f_020>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800dfe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d114      	bne.n	800e016 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800dfec:	8bfa      	ldrh	r2, [r7, #30]
 800dfee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800dff4:	b218      	sxth	r0, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	78da      	ldrb	r2, [r3, #3]
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	331c      	adds	r3, #28
 800dffe:	7bbc      	ldrb	r4, [r7, #14]
 800e000:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	4623      	mov	r3, r4
 800e00c:	f000 f82d 	bl	800e06a <VL53LX_f_020>
 800e010:	4603      	mov	r3, r0
 800e012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	695a      	ldr	r2, [r3, #20]
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	69db      	ldr	r3, [r3, #28]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d909      	bls.n	800e036 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	69da      	ldr	r2, [r3, #28]
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	69ba      	ldr	r2, [r7, #24]
 800e034:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	699a      	ldr	r2, [r3, #24]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d203      	bcs.n	800e04a <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	699a      	ldr	r2, [r3, #24]
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	429a      	cmp	r2, r3
 800e054:	d903      	bls.n	800e05e <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	699a      	ldr	r2, [r3, #24]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800e05e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e062:	4618      	mov	r0, r3
 800e064:	372c      	adds	r7, #44	; 0x2c
 800e066:	46bd      	mov	sp, r7
 800e068:	bd90      	pop	{r4, r7, pc}

0800e06a <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800e06a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06e:	b09d      	sub	sp, #116	; 0x74
 800e070:	af00      	add	r7, sp, #0
 800e072:	461c      	mov	r4, r3
 800e074:	4603      	mov	r3, r0
 800e076:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e07a:	460b      	mov	r3, r1
 800e07c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e080:	4613      	mov	r3, r2
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	4623      	mov	r3, r4
 800e088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e08c:	2300      	movs	r3, #0
 800e08e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53LX_p_018        = 0;
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	f04f 0300 	mov.w	r3, #0
 800e0a6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 800e0aa:	f04f 0200 	mov.w	r2, #0
 800e0ae:	f04f 0300 	mov.w	r3, #0
 800e0b2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	f04f 0300 	mov.w	r3, #0
 800e0be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800e0c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e0c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0ca:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800e0cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	f000 809c 	beq.w	800e20e <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800e0d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e0de:	e08f      	b.n	800e200 <VL53LX_f_020+0x196>

		if (lb < 0)
 800e0e0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	da09      	bge.n	800e0fc <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800e0e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e0f2:	4413      	add	r3, r2
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800e0fa:	e00a      	b.n	800e112 <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800e0fc:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 800e100:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800e104:	fb91 f3f2 	sdiv	r3, r1, r2
 800e108:	fb02 f303 	mul.w	r3, r2, r3
 800e10c:	1acb      	subs	r3, r1, r3
 800e10e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800e112:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e116:	2b00      	cmp	r3, #0
 800e118:	db6b      	blt.n	800e1f2 <VL53LX_f_020+0x188>
 800e11a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e11e:	2b17      	cmp	r3, #23
 800e120:	dc67      	bgt.n	800e1f2 <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800e122:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e126:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e12a:	3306      	adds	r3, #6
 800e12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e130:	17da      	asrs	r2, r3, #31
 800e132:	633b      	str	r3, [r7, #48]	; 0x30
 800e134:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53LX_p_028;
 800e136:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e13a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e13e:	17da      	asrs	r2, r3, #31
 800e140:	62bb      	str	r3, [r7, #40]	; 0x28
 800e142:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53LX_p_018 =
 800e144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e146:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e14a:	4602      	mov	r2, r0
 800e14c:	1a9b      	subs	r3, r3, r2
 800e14e:	623b      	str	r3, [r7, #32]
 800e150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e152:	460a      	mov	r2, r1
 800e154:	eb63 0302 	sbc.w	r3, r3, r2
 800e158:	627b      	str	r3, [r7, #36]	; 0x24
 800e15a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e15e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800e162:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e166:	2b00      	cmp	r3, #0
 800e168:	d009      	beq.n	800e17e <VL53LX_f_020+0x114>
 800e16a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e16e:	2b00      	cmp	r3, #0
 800e170:	da05      	bge.n	800e17e <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800e172:	f04f 0200 	mov.w	r2, #0
 800e176:	f04f 0300 	mov.w	r3, #0
 800e17a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53LX_p_018;
 800e17e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e182:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e186:	1884      	adds	r4, r0, r2
 800e188:	61bc      	str	r4, [r7, #24]
 800e18a:	eb41 0303 	adc.w	r3, r1, r3
 800e18e:	61fb      	str	r3, [r7, #28]
 800e190:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e194:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800e198:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e19c:	17da      	asrs	r2, r3, #31
 800e19e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e1a2:	f04f 0200 	mov.w	r2, #0
 800e1a6:	f04f 0300 	mov.w	r3, #0
 800e1aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e1ac:	02cb      	lsls	r3, r1, #11
 800e1ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1b0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e1b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1b6:	02ca      	lsls	r2, r1, #11
 800e1b8:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 800e1bc:	f143 0600 	adc.w	r6, r3, #0
 800e1c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1c2:	fb06 f203 	mul.w	r2, r6, r3
 800e1c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1c8:	fb05 f303 	mul.w	r3, r5, r3
 800e1cc:	441a      	add	r2, r3
 800e1ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1d0:	fba3 ab05 	umull	sl, fp, r3, r5
 800e1d4:	eb02 030b 	add.w	r3, r2, fp
 800e1d8:	469b      	mov	fp, r3
			weighted_sum +=
 800e1da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e1de:	eb12 010a 	adds.w	r1, r2, sl
 800e1e2:	6139      	str	r1, [r7, #16]
 800e1e4:	eb43 030b 	adc.w	r3, r3, fp
 800e1e8:	617b      	str	r3, [r7, #20]
 800e1ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e1ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800e1f2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e200:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e204:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800e208:	429a      	cmp	r2, r3
 800e20a:	f77f af69 	ble.w	800e0e0 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800e20e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e212:	2a01      	cmp	r2, #1
 800e214:	f173 0300 	sbcs.w	r3, r3, #0
 800e218:	db3b      	blt.n	800e292 <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800e21a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e21e:	0fd9      	lsrs	r1, r3, #31
 800e220:	2000      	movs	r0, #0
 800e222:	60b9      	str	r1, [r7, #8]
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e22a:	4621      	mov	r1, r4
 800e22c:	eb11 0802 	adds.w	r8, r1, r2
 800e230:	4629      	mov	r1, r5
 800e232:	eb41 0903 	adc.w	r9, r1, r3
 800e236:	f04f 0200 	mov.w	r2, #0
 800e23a:	f04f 0300 	mov.w	r3, #0
 800e23e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800e242:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800e246:	ea4f 0369 	mov.w	r3, r9, asr #1
 800e24a:	4610      	mov	r0, r2
 800e24c:	4619      	mov	r1, r3
 800e24e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e252:	1814      	adds	r4, r2, r0
 800e254:	603c      	str	r4, [r7, #0]
 800e256:	414b      	adcs	r3, r1
 800e258:	607b      	str	r3, [r7, #4]
 800e25a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e25e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800e262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e266:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e26a:	f7f2 fd25 	bl	8000cb8 <__aeabi_ldivmod>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 800e276:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	da05      	bge.n	800e28a <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800e27e:	f04f 0200 	mov.w	r2, #0
 800e282:	f04f 0300 	mov.w	r3, #0
 800e286:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 800e28a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e28c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e290:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e292:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800e296:	4618      	mov	r0, r3
 800e298:	3774      	adds	r7, #116	; 0x74
 800e29a:	46bd      	mov	sp, r7
 800e29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2a0 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60b9      	str	r1, [r7, #8]
 800e2a8:	607a      	str	r2, [r7, #4]
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800e2bc:	7bfa      	ldrb	r2, [r7, #15]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	4413      	add	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800e2d2:	22ac      	movs	r2, #172	; 0xac
 800e2d4:	68b9      	ldr	r1, [r7, #8]
 800e2d6:	6a38      	ldr	r0, [r7, #32]
 800e2d8:	f007 fdd2 	bl	8015e80 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800e2e2:	75fb      	strb	r3, [r7, #23]
 800e2e4:	e020      	b.n	800e328 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	7dfa      	ldrb	r2, [r7, #23]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d304      	bcc.n	800e2fa <VL53LX_f_011+0x5a>
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	791b      	ldrb	r3, [r3, #4]
 800e2f4:	7dfa      	ldrb	r2, [r7, #23]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d913      	bls.n	800e322 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	78da      	ldrb	r2, [r3, #3]
 800e2fe:	7dfb      	ldrb	r3, [r7, #23]
 800e300:	fbb3 f1f2 	udiv	r1, r3, r2
 800e304:	fb01 f202 	mul.w	r2, r1, r2
 800e308:	1a9b      	subs	r3, r3, r2
 800e30a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	7a9b      	ldrb	r3, [r3, #10]
 800e310:	7d7a      	ldrb	r2, [r7, #21]
 800e312:	429a      	cmp	r2, r3
 800e314:	d205      	bcs.n	800e322 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800e316:	7d7a      	ldrb	r2, [r7, #21]
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	3206      	adds	r2, #6
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800e322:	7dfb      	ldrb	r3, [r7, #23]
 800e324:	3301      	adds	r3, #1
 800e326:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800e328:	7dfa      	ldrb	r2, [r7, #23]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800e330:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800e336:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800e338:	429a      	cmp	r2, r3
 800e33a:	dbd4      	blt.n	800e2e6 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e33c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e34c:	b096      	sub	sp, #88	; 0x58
 800e34e:	af08      	add	r7, sp, #32
 800e350:	4604      	mov	r4, r0
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	461a      	mov	r2, r3
 800e358:	4623      	mov	r3, r4
 800e35a:	73fb      	strb	r3, [r7, #15]
 800e35c:	4603      	mov	r3, r0
 800e35e:	73bb      	strb	r3, [r7, #14]
 800e360:	460b      	mov	r3, r1
 800e362:	737b      	strb	r3, [r7, #13]
 800e364:	4613      	mov	r3, r2
 800e366:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800e368:	2300      	movs	r3, #0
 800e36a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800e36e:	2300      	movs	r3, #0
 800e370:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800e374:	2300      	movs	r3, #0
 800e376:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800e386:	2300      	movs	r3, #0
 800e388:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800e39a:	7b7b      	ldrb	r3, [r7, #13]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d106      	bne.n	800e3ae <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800e3a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3a6:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800e3a8:	f06f 030e 	mvn.w	r3, #14
 800e3ac:	e06f      	b.n	800e48e <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	7b7a      	ldrb	r2, [r7, #13]
 800e3b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3b6:	fb01 f202 	mul.w	r2, r1, r2
 800e3ba:	1a9b      	subs	r3, r3, r2
 800e3bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800e3c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e3c4:	7b39      	ldrb	r1, [r7, #12]
 800e3c6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800e3ca:	f107 0320 	add.w	r3, r7, #32
 800e3ce:	9301      	str	r3, [sp, #4]
 800e3d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3da:	f000 fddb 	bl	800ef94 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800e3de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e3e2:	7b39      	ldrb	r1, [r7, #12]
 800e3e4:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800e3e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3ec:	9301      	str	r3, [sp, #4]
 800e3ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3f8:	f000 fdcc 	bl	800ef94 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800e3fc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00e      	beq.n	800e422 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800e404:	f107 021c 	add.w	r2, r7, #28
 800e408:	7b39      	ldrb	r1, [r7, #12]
 800e40a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800e40e:	f107 0314 	add.w	r3, r7, #20
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	f107 0318 	add.w	r3, r7, #24
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	4613      	mov	r3, r2
 800e41c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e41e:	f000 fdb9 	bl	800ef94 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	469c      	mov	ip, r3
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	469e      	mov	lr, r3
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	4698      	mov	r8, r3
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	4619      	mov	r1, r3
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	461c      	mov	r4, r3
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	461d      	mov	r5, r3
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	461e      	mov	r6, r3
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800e442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800e448:	607b      	str	r3, [r7, #4]
 800e44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e44c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e450:	7bb8      	ldrb	r0, [r7, #14]
 800e452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e454:	9207      	str	r2, [sp, #28]
 800e456:	9306      	str	r3, [sp, #24]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	9205      	str	r2, [sp, #20]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	9304      	str	r3, [sp, #16]
 800e460:	9603      	str	r6, [sp, #12]
 800e462:	9502      	str	r5, [sp, #8]
 800e464:	9401      	str	r4, [sp, #4]
 800e466:	9100      	str	r1, [sp, #0]
 800e468:	4643      	mov	r3, r8
 800e46a:	4672      	mov	r2, lr
 800e46c:	4661      	mov	r1, ip
 800e46e:	f002 ff2d 	bl	80112cc <VL53LX_f_023>
 800e472:	4603      	mov	r3, r0
 800e474:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800e478:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800e47c:	f113 0f0f 	cmn.w	r3, #15
 800e480:	d103      	bne.n	800e48a <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800e482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e488:	801a      	strh	r2, [r3, #0]


	return status;
 800e48a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3738      	adds	r7, #56	; 0x38
 800e492:	46bd      	mov	sp, r7
 800e494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e498 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800e498:	b490      	push	{r4, r7}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	4604      	mov	r4, r0
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	4623      	mov	r3, r4
 800e4a8:	71fb      	strb	r3, [r7, #7]
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	71bb      	strb	r3, [r7, #6]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	717b      	strb	r3, [r7, #5]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	79fa      	ldrb	r2, [r7, #7]
 800e4c2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	781a      	ldrb	r2, [r3, #0]
 800e4ce:	6a3b      	ldr	r3, [r7, #32]
 800e4d0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	785a      	ldrb	r2, [r3, #1]
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	789a      	ldrb	r2, [r3, #2]
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	78da      	ldrb	r2, [r3, #3]
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	791a      	ldrb	r2, [r3, #4]
 800e4ee:	6a3b      	ldr	r3, [r7, #32]
 800e4f0:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	795a      	ldrb	r2, [r3, #5]
 800e4f6:	6a3b      	ldr	r3, [r7, #32]
 800e4f8:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	791a      	ldrb	r2, [r3, #4]
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	b2db      	uxtb	r3, r3
 800e506:	3301      	adds	r3, #1
 800e508:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800e50a:	6a3b      	ldr	r3, [r7, #32]
 800e50c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	8c1a      	ldrh	r2, [r3, #32]
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	695b      	ldr	r3, [r3, #20]
 800e524:	b29a      	uxth	r2, r3
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	b29a      	uxth	r2, r3
 800e530:	6a3b      	ldr	r3, [r7, #32]
 800e532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	69db      	ldr	r3, [r3, #28]
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	6a3b      	ldr	r3, [r7, #32]
 800e53e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	461a      	mov	r2, r3
 800e548:	6a3b      	ldr	r3, [r7, #32]
 800e54a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	691a      	ldr	r2, [r3, #16]
 800e550:	6a3b      	ldr	r3, [r7, #32]
 800e552:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	461a      	mov	r2, r3
 800e55a:	6a3b      	ldr	r3, [r7, #32]
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	2213      	movs	r2, #19
 800e56c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800e570:	887b      	ldrh	r3, [r7, #2]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	8c1b      	ldrh	r3, [r3, #32]
 800e57a:	461a      	mov	r2, r3
 800e57c:	887b      	ldrh	r3, [r7, #2]
 800e57e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800e580:	429a      	cmp	r2, r3
 800e582:	d903      	bls.n	800e58c <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800e584:	6a3b      	ldr	r3, [r7, #32]
 800e586:	2206      	movs	r2, #6
 800e588:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800e58c:	79bb      	ldrb	r3, [r7, #6]
 800e58e:	b29b      	uxth	r3, r3
 800e590:	021b      	lsls	r3, r3, #8
 800e592:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	8a9b      	ldrh	r3, [r3, #20]
 800e598:	89fa      	ldrh	r2, [r7, #14]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d205      	bcs.n	800e5aa <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800e5a2:	89fb      	ldrh	r3, [r7, #14]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	81fb      	strh	r3, [r7, #14]
 800e5a8:	e001      	b.n	800e5ae <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800e5ae:	797b      	ldrb	r3, [r7, #5]
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	021b      	lsls	r3, r3, #8
 800e5b4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800e5bc:	89bb      	ldrh	r3, [r7, #12]
 800e5be:	4413      	add	r3, r2
 800e5c0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e5c8:	89fa      	ldrh	r2, [r7, #14]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d805      	bhi.n	800e5da <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800e5ce:	6a3b      	ldr	r3, [r7, #32]
 800e5d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800e5d4:	89ba      	ldrh	r2, [r7, #12]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d203      	bcs.n	800e5e2 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	2205      	movs	r2, #5
 800e5de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800e5e2:	bf00      	nop
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bc90      	pop	{r4, r7}
 800e5ea:	4770      	bx	lr

0800e5ec <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800e5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ee:	b08f      	sub	sp, #60	; 0x3c
 800e5f0:	af06      	add	r7, sp, #24
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800e602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e604:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e608:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800e60a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e60c:	f7ff f856 	bl	800d6bc <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800e610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e612:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800e616:	22ac      	movs	r2, #172	; 0xac
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f007 fc30 	bl	8015e80 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	781a      	ldrb	r2, [r3, #0]
 800e624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e626:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	785a      	ldrb	r2, [r3, #1]
 800e62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e62e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	789a      	ldrb	r2, [r3, #2]
 800e634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e636:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800e63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e640:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800e642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e644:	2200      	movs	r2, #0
 800e646:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800e648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e64a:	2204      	movs	r2, #4
 800e64c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800e64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e650:	2200      	movs	r2, #0
 800e652:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800e654:	2300      	movs	r3, #0
 800e656:	77bb      	strb	r3, [r7, #30]
 800e658:	e008      	b.n	800e66c <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800e65a:	7fbb      	ldrb	r3, [r7, #30]
 800e65c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e65e:	005b      	lsls	r3, r3, #1
 800e660:	4413      	add	r3, r2
 800e662:	2200      	movs	r2, #0
 800e664:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800e666:	7fbb      	ldrb	r3, [r7, #30]
 800e668:	3301      	adds	r3, #1
 800e66a:	77bb      	strb	r3, [r7, #30]
 800e66c:	7fbb      	ldrb	r3, [r7, #30]
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d9f3      	bls.n	800e65a <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800e672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e674:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fd ff58 	bl	800c52e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800e682:	461a      	mov	r2, r3
 800e684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e686:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e68a:	4619      	mov	r1, r3
 800e68c:	4610      	mov	r0, r2
 800e68e:	f7fd ff8e 	bl	800c5ae <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800e692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e694:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fe fb66 	bl	800cd6a <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800e69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fd fffc 	bl	800c6a2 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d009      	beq.n	800e6c8 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800e6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6bc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6c4:	f000 fdae 	bl	800f224 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	77bb      	strb	r3, [r7, #30]
 800e6d4:	e01e      	b.n	800e714 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800e6d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d117      	bne.n	800e70e <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800e6de:	7fbb      	ldrb	r3, [r7, #30]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	4413      	add	r3, r2
 800e6e8:	8898      	ldrh	r0, [r3, #4]
 800e6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ec:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800e6f0:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6f6:	4413      	add	r3, r2
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	9301      	str	r3, [sp, #4]
 800e6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	460b      	mov	r3, r1
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	68f9      	ldr	r1, [r7, #12]
 800e706:	f7fe fb7b 	bl	800ce00 <VL53LX_f_001>
 800e70a:	4603      	mov	r3, r0
 800e70c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800e70e:	7fbb      	ldrb	r3, [r7, #30]
 800e710:	3301      	adds	r3, #1
 800e712:	77bb      	strb	r3, [r7, #30]
 800e714:	7fbb      	ldrb	r3, [r7, #30]
 800e716:	2b04      	cmp	r3, #4
 800e718:	d9dd      	bls.n	800e6d6 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800e71a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d11a      	bne.n	800e758 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800e72a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800e736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e738:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e73c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e73e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800e742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e744:	9102      	str	r1, [sp, #8]
 800e746:	9201      	str	r2, [sp, #4]
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	462b      	mov	r3, r5
 800e74c:	4622      	mov	r2, r4
 800e74e:	4631      	mov	r1, r6
 800e750:	f7ff f82d 	bl	800d7ae <VL53LX_f_006>
 800e754:	4603      	mov	r3, r0
 800e756:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800e758:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d104      	bne.n	800e76a <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800e760:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e762:	f7ff f954 	bl	800da0e <VL53LX_f_007>
 800e766:	4603      	mov	r3, r0
 800e768:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800e76a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d104      	bne.n	800e77c <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800e772:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e774:	f7ff f999 	bl	800daaa <VL53LX_f_008>
 800e778:	4603      	mov	r3, r0
 800e77a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800e77c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d104      	bne.n	800e78e <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800e784:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e786:	f7ff fa0e 	bl	800dba6 <VL53LX_f_009>
 800e78a:	4603      	mov	r3, r0
 800e78c:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e78e:	2300      	movs	r3, #0
 800e790:	77bb      	strb	r3, [r7, #30]
 800e792:	e0a6      	b.n	800e8e2 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800e794:	7fba      	ldrb	r2, [r7, #30]
 800e796:	4613      	mov	r3, r2
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e7a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7a4:	4413      	add	r3, r2
 800e7a6:	3304      	adds	r3, #4
 800e7a8:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800e7aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d109      	bne.n	800e7c6 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e7b8:	7fbb      	ldrb	r3, [r7, #30]
 800e7ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7ff fb48 	bl	800de52 <VL53LX_f_010>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800e7c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d110      	bne.n	800e7f0 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800e7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7dc:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800e7e0:	7fb8      	ldrb	r0, [r7, #30]
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7e8:	f7ff fd5a 	bl	800e2a0 <VL53LX_f_011>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800e7f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10d      	bne.n	800e814 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800e7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fa:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e800:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800e804:	7fb8      	ldrb	r0, [r7, #30]
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	2300      	movs	r3, #0
 800e80a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e80c:	f7ff fd48 	bl	800e2a0 <VL53LX_f_011>
 800e810:	4603      	mov	r3, r0
 800e812:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800e814:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10d      	bne.n	800e838 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800e81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e81e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800e822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e824:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800e828:	7fb8      	ldrb	r0, [r7, #30]
 800e82a:	9300      	str	r3, [sp, #0]
 800e82c:	2300      	movs	r3, #0
 800e82e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e830:	f7ff fd36 	bl	800e2a0 <VL53LX_f_011>
 800e834:	4603      	mov	r3, r0
 800e836:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800e838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d109      	bne.n	800e854 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800e840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e842:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800e846:	7fb8      	ldrb	r0, [r7, #30]
 800e848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e84a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e84c:	f000 f8dd 	bl	800ea0a <VL53LX_f_026>
 800e850:	4603      	mov	r3, r0
 800e852:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800e854:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d108      	bne.n	800e86e <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	8a19      	ldrh	r1, [r3, #16]
 800e860:	7fb8      	ldrb	r0, [r7, #30]
 800e862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e866:	f000 f95c 	bl	800eb22 <VL53LX_f_027>
 800e86a:	4603      	mov	r3, r0
 800e86c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800e86e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d124      	bne.n	800e8c0 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	789d      	ldrb	r5, [r3, #2]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	7e1e      	ldrb	r6, [r3, #24]
 800e87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e880:	f893 c003 	ldrb.w	ip, [r3, #3]
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	f893 e006 	ldrb.w	lr, [r3, #6]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e892:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800e896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e898:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800e89c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e89e:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800e8a2:	697c      	ldr	r4, [r7, #20]
 800e8a4:	3420      	adds	r4, #32
 800e8a6:	9404      	str	r4, [sp, #16]
 800e8a8:	9003      	str	r0, [sp, #12]
 800e8aa:	9102      	str	r1, [sp, #8]
 800e8ac:	9201      	str	r2, [sp, #4]
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	4673      	mov	r3, lr
 800e8b2:	4662      	mov	r2, ip
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	f7ff fd46 	bl	800e348 <VL53LX_f_014>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800e8c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d109      	bne.n	800e8dc <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800e8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ca:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800e8ce:	7fb8      	ldrb	r0, [r7, #30]
 800e8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	f7ff fb10 	bl	800def8 <VL53LX_f_015>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e8dc:	7fbb      	ldrb	r3, [r7, #30]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	77bb      	strb	r3, [r7, #30]
 800e8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800e8e8:	7fba      	ldrb	r2, [r7, #30]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	f4ff af52 	bcc.w	800e794 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800e8f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d107      	bne.n	800e908 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	785b      	ldrb	r3, [r3, #1]
 800e8fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff fa23 	bl	800dd4a <VL53LX_f_016>
 800e904:	4603      	mov	r3, r0
 800e906:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e908:	2300      	movs	r3, #0
 800e90a:	77bb      	strb	r3, [r7, #30]
 800e90c:	e071      	b.n	800e9f2 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800e90e:	7fba      	ldrb	r2, [r7, #30]
 800e910:	4613      	mov	r3, r2
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e91c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e91e:	4413      	add	r3, r2
 800e920:	3304      	adds	r3, #4
 800e922:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800e924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e926:	7c9a      	ldrb	r2, [r3, #18]
 800e928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e92a:	7c5b      	ldrb	r3, [r3, #17]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d25c      	bcs.n	800e9ea <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800e938:	429a      	cmp	r2, r3
 800e93a:	dd57      	ble.n	800e9ec <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800e940:	2bff      	cmp	r3, #255	; 0xff
 800e942:	d053      	beq.n	800e9ec <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800e944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e946:	7c9b      	ldrb	r3, [r3, #18]
 800e948:	461a      	mov	r2, r3
			prange_data =
 800e94a:	234c      	movs	r3, #76	; 0x4c
 800e94c:	fb02 f303 	mul.w	r3, r2, r3
 800e950:	3310      	adds	r3, #16
 800e952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e954:	4413      	add	r3, r2
 800e956:	3304      	adds	r3, #4
 800e958:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800e95a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d115      	bne.n	800e98e <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800e962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e964:	7c98      	ldrb	r0, [r3, #18]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	8b5d      	ldrh	r5, [r3, #26]
 800e976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e978:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	9202      	str	r2, [sp, #8]
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	9201      	str	r2, [sp, #4]
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	462b      	mov	r3, r5
 800e988:	4622      	mov	r2, r4
 800e98a:	f7ff fd85 	bl	800e498 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800e98e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d115      	bne.n	800e9c2 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800e9ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	4623      	mov	r3, r4
 800e9ba:	f000 fb44 	bl	800f046 <VL53LX_f_018>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800e9c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d108      	bne.n	800e9dc <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	8bd8      	ldrh	r0, [r3, #30]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800e9d4:	693a      	ldr	r2, [r7, #16]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	f000 fbda 	bl	800f190 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800e9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9de:	7c9b      	ldrb	r3, [r3, #18]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9e6:	749a      	strb	r2, [r3, #18]
 800e9e8:	e000      	b.n	800e9ec <VL53LX_f_025+0x400>
			continue;
 800e9ea:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e9ec:	7fbb      	ldrb	r3, [r7, #30]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	77bb      	strb	r3, [r7, #30]
 800e9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800e9f8:	7fba      	ldrb	r2, [r7, #30]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d387      	bcc.n	800e90e <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800e9fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3724      	adds	r7, #36	; 0x24
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea0a <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b08c      	sub	sp, #48	; 0x30
 800ea0e:	af02      	add	r7, sp, #8
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
 800ea14:	603b      	str	r3, [r7, #0]
 800ea16:	4603      	mov	r3, r0
 800ea18:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800ea20:	7bfa      	ldrb	r2, [r7, #15]
 800ea22:	4613      	mov	r3, r2
 800ea24:	00db      	lsls	r3, r3, #3
 800ea26:	4413      	add	r3, r2
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	4413      	add	r3, r2
 800ea32:	3304      	adds	r3, #4
 800ea34:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800ea44:	2300      	movs	r3, #0
 800ea46:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	785a      	ldrb	r2, [r3, #1]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	781a      	ldrb	r2, [r3, #0]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	789a      	ldrb	r2, [r3, #2]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea6c:	e04d      	b.n	800eb0a <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	78da      	ldrb	r2, [r3, #3]
 800ea72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea7a:	fb01 f202 	mul.w	r2, r1, r2
 800ea7e:	1a9b      	subs	r3, r3, r2
 800ea80:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	7999      	ldrb	r1, [r3, #6]
 800ea86:	f107 0218 	add.w	r2, r7, #24
 800ea8a:	7ff8      	ldrb	r0, [r7, #31]
 800ea8c:	f107 0310 	add.w	r3, r7, #16
 800ea90:	9301      	str	r3, [sp, #4]
 800ea92:	f107 0314 	add.w	r3, r7, #20
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	f000 fa7a 	bl	800ef94 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800eaa0:	7ffb      	ldrb	r3, [r7, #31]
 800eaa2:	69ba      	ldr	r2, [r7, #24]
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	440b      	add	r3, r1
 800eaaa:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800eaac:	7ffb      	ldrb	r3, [r7, #31]
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	6839      	ldr	r1, [r7, #0]
 800eab2:	3318      	adds	r3, #24
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	440b      	add	r3, r1
 800eab8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800eaba:	7ffb      	ldrb	r3, [r7, #31]
 800eabc:	693a      	ldr	r2, [r7, #16]
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	3330      	adds	r3, #48	; 0x30
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	440b      	add	r3, r1
 800eac6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	689a      	ldr	r2, [r3, #8]
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800ead6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800ead8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	3348      	adds	r3, #72	; 0x48
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	440b      	add	r3, r1
 800eae2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	689a      	ldr	r2, [r3, #8]
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800eaf2:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800eaf4:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	3360      	adds	r3, #96	; 0x60
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	440b      	add	r3, r1
 800eafe:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800eb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb04:	3301      	adds	r3, #1
 800eb06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	791b      	ldrb	r3, [r3, #4]
 800eb0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d9ab      	bls.n	800ea6e <VL53LX_f_026+0x64>
	}

	return status;
 800eb16:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3728      	adds	r7, #40	; 0x28
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800eb22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb24:	b08f      	sub	sp, #60	; 0x3c
 800eb26:	af06      	add	r7, sp, #24
 800eb28:	60ba      	str	r2, [r7, #8]
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73fb      	strb	r3, [r7, #15]
 800eb30:	460b      	mov	r3, r1
 800eb32:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800eb34:	2300      	movs	r3, #0
 800eb36:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800eb3c:	7bfa      	ldrb	r2, [r7, #15]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	00db      	lsls	r3, r3, #3
 800eb42:	4413      	add	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	3304      	adds	r3, #4
 800eb50:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	77fb      	strb	r3, [r7, #31]
 800eb64:	e0b9      	b.n	800ecda <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	78da      	ldrb	r2, [r3, #3]
 800eb6a:	7ffb      	ldrb	r3, [r7, #31]
 800eb6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb70:	fb01 f202 	mul.w	r2, r1, r2
 800eb74:	1a9b      	subs	r3, r3, r2
 800eb76:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800eb78:	7ffb      	ldrb	r3, [r7, #31]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	78d2      	ldrb	r2, [r2, #3]
 800eb80:	fb93 f1f2 	sdiv	r1, r3, r2
 800eb84:	fb01 f202 	mul.w	r2, r1, r2
 800eb88:	1a9b      	subs	r3, r3, r2
 800eb8a:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	789b      	ldrb	r3, [r3, #2]
 800eb90:	7dfa      	ldrb	r2, [r7, #23]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	f080 809e 	bcs.w	800ecd4 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800eb9c:	7dba      	ldrb	r2, [r7, #22]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	f080 8098 	bcs.w	800ecd4 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800eba4:	7dfb      	ldrb	r3, [r7, #23]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	3348      	adds	r3, #72	; 0x48
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10e      	bne.n	800ebd2 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800ebb4:	7dfb      	ldrb	r3, [r7, #23]
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	3360      	adds	r3, #96	; 0x60
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d106      	bne.n	800ebd2 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	4413      	add	r3, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ebd0:	e043      	b.n	800ec5a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ebd2:	7dfb      	ldrb	r3, [r7, #23]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	3348      	adds	r3, #72	; 0x48
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	db0e      	blt.n	800ec00 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	3360      	adds	r3, #96	; 0x60
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	4413      	add	r3, r2
 800ebec:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	db06      	blt.n	800ec00 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ebfe:	e02c      	b.n	800ec5a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ec00:	7dfb      	ldrb	r3, [r7, #23]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	3348      	adds	r3, #72	; 0x48
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	4413      	add	r3, r2
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	da1e      	bge.n	800ec4e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	3360      	adds	r3, #96	; 0x60
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4413      	add	r3, r2
 800ec1a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	db16      	blt.n	800ec4e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ec20:	7dbb      	ldrb	r3, [r7, #22]
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	3348      	adds	r3, #72	; 0x48
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4413      	add	r3, r2
 800ec2a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	db0e      	blt.n	800ec4e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ec30:	7dbb      	ldrb	r3, [r7, #22]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	3360      	adds	r3, #96	; 0x60
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4413      	add	r3, r2
 800ec3a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	da06      	bge.n	800ec4e <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	68ba      	ldr	r2, [r7, #8]
 800ec44:	4413      	add	r3, r2
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ec4c:	e005      	b.n	800ec5a <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800ec4e:	7dfb      	ldrb	r3, [r7, #23]
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	4413      	add	r3, r2
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	4413      	add	r3, r2
 800ec60:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d035      	beq.n	800ecd4 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	7ffa      	ldrb	r2, [r7, #31]
 800ec6c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	685c      	ldr	r4, [r3, #4]
 800ec78:	7dfb      	ldrb	r3, [r7, #23]
 800ec7a:	68ba      	ldr	r2, [r7, #8]
 800ec7c:	3318      	adds	r3, #24
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	685d      	ldr	r5, [r3, #4]
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	3330      	adds	r3, #48	; 0x30
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	4413      	add	r3, r2
 800ec8e:	685e      	ldr	r6, [r3, #4]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	78d2      	ldrb	r2, [r2, #3]
 800ec98:	69b9      	ldr	r1, [r7, #24]
 800ec9a:	3118      	adds	r1, #24
 800ec9c:	7ff8      	ldrb	r0, [r7, #31]
 800ec9e:	9105      	str	r1, [sp, #20]
 800eca0:	9204      	str	r2, [sp, #16]
 800eca2:	9303      	str	r3, [sp, #12]
 800eca4:	2300      	movs	r3, #0
 800eca6:	9302      	str	r3, [sp, #8]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	9301      	str	r3, [sp, #4]
 800ecac:	2300      	movs	r3, #0
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	4633      	mov	r3, r6
 800ecb2:	462a      	mov	r2, r5
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f000 f81c 	bl	800ecf2 <VL53LX_f_028>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800ecbe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ecc2:	f113 0f0f 	cmn.w	r3, #15
 800ecc6:	d105      	bne.n	800ecd4 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800ecc8:	7dfb      	ldrb	r3, [r7, #23]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	4413      	add	r3, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800ecd4:	7ffb      	ldrb	r3, [r7, #31]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	77fb      	strb	r3, [r7, #31]
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	791b      	ldrb	r3, [r3, #4]
 800ecde:	7ffa      	ldrb	r2, [r7, #31]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	f4ff af40 	bcc.w	800eb66 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800ece6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3724      	adds	r7, #36	; 0x24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecf2 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800ecf2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecf6:	b0b2      	sub	sp, #200	; 0xc8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800ecfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ed02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ed06:	4603      	mov	r3, r0
 800ed08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ed0c:	23f1      	movs	r3, #241	; 0xf1
 800ed0e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800ed12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed16:	f04f 0300 	mov.w	r3, #0
 800ed1a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800ed1e:	f04f 0200 	mov.w	r2, #0
 800ed22:	f04f 0300 	mov.w	r3, #0
 800ed26:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 800ed2a:	f04f 0200 	mov.w	r2, #0
 800ed2e:	f04f 0300 	mov.w	r3, #0
 800ed32:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ed36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ed3a:	17da      	asrs	r2, r3, #31
 800ed3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ed40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800ed44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed48:	17da      	asrs	r2, r3, #31
 800ed4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ed4e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ed52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ed56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	ebb3 0802 	subs.w	r8, r3, r2
 800ed60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed64:	460a      	mov	r2, r1
 800ed66:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800ed6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ed6e:	17da      	asrs	r2, r3, #31
 800ed70:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed72:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ed74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ed78:	460b      	mov	r3, r1
 800ed7a:	ebb8 0a03 	subs.w	sl, r8, r3
 800ed7e:	4613      	mov	r3, r2
 800ed80:	eb69 0b03 	sbc.w	fp, r9, r3
 800ed84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed88:	17da      	asrs	r2, r3, #31
 800ed8a:	673b      	str	r3, [r7, #112]	; 0x70
 800ed8c:	677a      	str	r2, [r7, #116]	; 0x74
 800ed8e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ed92:	460b      	mov	r3, r1
 800ed94:	ebba 0403 	subs.w	r4, sl, r3
 800ed98:	4613      	mov	r3, r2
 800ed9a:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ed9e:	f04f 0200 	mov.w	r2, #0
 800eda2:	f04f 0300 	mov.w	r3, #0
 800eda6:	032b      	lsls	r3, r5, #12
 800eda8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800edac:	0322      	lsls	r2, r4, #12
 800edae:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800edb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800edb6:	17da      	asrs	r2, r3, #31
 800edb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800edba:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800edbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800edc0:	17da      	asrs	r2, r3, #31
 800edc2:	663b      	str	r3, [r7, #96]	; 0x60
 800edc4:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800edc6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800edca:	4623      	mov	r3, r4
 800edcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800edd0:	4602      	mov	r2, r0
 800edd2:	1a9b      	subs	r3, r3, r2
 800edd4:	65bb      	str	r3, [r7, #88]	; 0x58
 800edd6:	462b      	mov	r3, r5
 800edd8:	460a      	mov	r2, r1
 800edda:	eb63 0302 	sbc.w	r3, r3, r2
 800edde:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800ede0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ede4:	17da      	asrs	r2, r3, #31
 800ede6:	653b      	str	r3, [r7, #80]	; 0x50
 800ede8:	657a      	str	r2, [r7, #84]	; 0x54
 800edea:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800edee:	4623      	mov	r3, r4
 800edf0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800edf4:	4602      	mov	r2, r0
 800edf6:	1a9b      	subs	r3, r3, r2
 800edf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800edfa:	462b      	mov	r3, r5
 800edfc:	460a      	mov	r2, r1
 800edfe:	eb63 0302 	sbc.w	r3, r3, r2
 800ee02:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800ee04:	f04f 0200 	mov.w	r2, #0
 800ee08:	f04f 0300 	mov.w	r3, #0
 800ee0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ee10:	4629      	mov	r1, r5
 800ee12:	030b      	lsls	r3, r1, #12
 800ee14:	4621      	mov	r1, r4
 800ee16:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	030a      	lsls	r2, r1, #12
 800ee1e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 800ee22:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ee26:	4313      	orrs	r3, r2
 800ee28:	f000 80a8 	beq.w	800ef7c <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800ee2c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800ee30:	f04f 0000 	mov.w	r0, #0
 800ee34:	f04f 0100 	mov.w	r1, #0
 800ee38:	0319      	lsls	r1, r3, #12
 800ee3a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ee3e:	0310      	lsls	r0, r2, #12
 800ee40:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ee44:	1814      	adds	r4, r2, r0
 800ee46:	633c      	str	r4, [r7, #48]	; 0x30
 800ee48:	414b      	adcs	r3, r1
 800ee4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ee50:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800ee54:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ee58:	1891      	adds	r1, r2, r2
 800ee5a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ee5c:	415b      	adcs	r3, r3
 800ee5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ee64:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ee68:	f7f1 ff26 	bl	8000cb8 <__aeabi_ldivmod>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase  +=  2048;
 800ee74:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ee78:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ee7c:	6239      	str	r1, [r7, #32]
 800ee7e:	f143 0300 	adc.w	r3, r3, #0
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24
 800ee84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ee88:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800ee8c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ee90:	2200      	movs	r2, #0
 800ee92:	643b      	str	r3, [r7, #64]	; 0x40
 800ee94:	647a      	str	r2, [r7, #68]	; 0x44
 800ee96:	f04f 0200 	mov.w	r2, #0
 800ee9a:	f04f 0300 	mov.w	r3, #0
 800ee9e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800eea2:	4629      	mov	r1, r5
 800eea4:	030b      	lsls	r3, r1, #12
 800eea6:	4621      	mov	r1, r4
 800eea8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800eeac:	4621      	mov	r1, r4
 800eeae:	030a      	lsls	r2, r1, #12
 800eeb0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800eeb4:	1884      	adds	r4, r0, r2
 800eeb6:	61bc      	str	r4, [r7, #24]
 800eeb8:	eb41 0303 	adc.w	r3, r1, r3
 800eebc:	61fb      	str	r3, [r7, #28]
 800eebe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800eec2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800eec6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800eeca:	1c51      	adds	r1, r2, #1
 800eecc:	63b9      	str	r1, [r7, #56]	; 0x38
 800eece:	f143 0300 	adc.w	r3, r3, #0
 800eed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eed4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800eed8:	460b      	mov	r3, r1
 800eeda:	0fdb      	lsrs	r3, r3, #31
 800eedc:	2200      	movs	r2, #0
 800eede:	613b      	str	r3, [r7, #16]
 800eee0:	617a      	str	r2, [r7, #20]
 800eee2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800eee6:	4623      	mov	r3, r4
 800eee8:	4602      	mov	r2, r0
 800eeea:	189b      	adds	r3, r3, r2
 800eeec:	60bb      	str	r3, [r7, #8]
 800eeee:	460b      	mov	r3, r1
 800eef0:	462a      	mov	r2, r5
 800eef2:	eb42 0303 	adc.w	r3, r2, r3
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	f04f 0200 	mov.w	r2, #0
 800eefc:	f04f 0300 	mov.w	r3, #0
 800ef00:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ef04:	4621      	mov	r1, r4
 800ef06:	084a      	lsrs	r2, r1, #1
 800ef08:	4629      	mov	r1, r5
 800ef0a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800ef0e:	4629      	mov	r1, r5
 800ef10:	104b      	asrs	r3, r1, #1
 800ef12:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8


		if (mean_phase  < 0)
 800ef16:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	da05      	bge.n	800ef2a <VL53LX_f_028+0x238>
			mean_phase = 0;
 800ef1e:	f04f 0200 	mov.w	r2, #0
 800ef22:	f04f 0300 	mov.w	r3, #0
 800ef26:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800ef2a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ef2e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ef32:	f173 0300 	sbcs.w	r3, r3, #0
 800ef36:	db05      	blt.n	800ef44 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800ef38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef3c:	f04f 0300 	mov.w	r3, #0
 800ef40:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800ef44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800ef4c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800ef50:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800ef52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef56:	fb93 f1f2 	sdiv	r1, r3, r2
 800ef5a:	fb01 f202 	mul.w	r2, r1, r2
 800ef5e:	1a9b      	subs	r3, r3, r2
 800ef60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 800ef64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef68:	17da      	asrs	r2, r3, #31
 800ef6a:	603b      	str	r3, [r7, #0]
 800ef6c:	607a      	str	r2, [r7, #4]
 800ef6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ef72:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53LX_ERROR_NONE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800ef7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ef80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef84:	601a      	str	r2, [r3, #0]

	return status;
 800ef86:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	37c8      	adds	r7, #200	; 0xc8
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ef94 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b087      	sub	sp, #28
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60ba      	str	r2, [r7, #8]
 800ef9c:	607b      	str	r3, [r7, #4]
 800ef9e:	4603      	mov	r3, r0
 800efa0:	73fb      	strb	r3, [r7, #15]
 800efa2:	460b      	mov	r3, r1
 800efa4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800efb4:	7bfa      	ldrb	r2, [r7, #15]
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	3206      	adds	r2, #6
 800efba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800efbe:	6a3b      	ldr	r3, [r7, #32]
 800efc0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800efc8:	2300      	movs	r3, #0
 800efca:	75fb      	strb	r3, [r7, #23]
 800efcc:	e02f      	b.n	800f02e <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800efce:	7bfa      	ldrb	r2, [r7, #15]
 800efd0:	7dfb      	ldrb	r3, [r7, #23]
 800efd2:	4413      	add	r3, r2
 800efd4:	68ba      	ldr	r2, [r7, #8]
 800efd6:	7a92      	ldrb	r2, [r2, #10]
 800efd8:	441a      	add	r2, r3
 800efda:	7bbb      	ldrb	r3, [r7, #14]
 800efdc:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	7a92      	ldrb	r2, [r2, #10]
 800efe2:	fb93 f1f2 	sdiv	r1, r3, r2
 800efe6:	fb01 f202 	mul.w	r2, r1, r2
 800efea:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800efec:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800efee:	7dfa      	ldrb	r2, [r7, #23]
 800eff0:	7bbb      	ldrb	r3, [r7, #14]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d20a      	bcs.n	800f00c <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	7db9      	ldrb	r1, [r7, #22]
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	3106      	adds	r1, #6
 800f000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f004:	441a      	add	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	e00d      	b.n	800f028 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800f00c:	7dfa      	ldrb	r2, [r7, #23]
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
 800f010:	429a      	cmp	r2, r3
 800f012:	d909      	bls.n	800f028 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	7db9      	ldrb	r1, [r7, #22]
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	3106      	adds	r1, #6
 800f01e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f022:	441a      	add	r2, r3
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800f028:	7dfb      	ldrb	r3, [r7, #23]
 800f02a:	3301      	adds	r3, #1
 800f02c:	75fb      	strb	r3, [r7, #23]
 800f02e:	7bbb      	ldrb	r3, [r7, #14]
 800f030:	005a      	lsls	r2, r3, #1
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	429a      	cmp	r2, r3
 800f036:	daca      	bge.n	800efce <VL53LX_f_022+0x3a>
	}
}
 800f038:	bf00      	nop
 800f03a:	bf00      	nop
 800f03c:	371c      	adds	r7, #28
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b088      	sub	sp, #32
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	60ba      	str	r2, [r7, #8]
 800f04e:	461a      	mov	r2, r3
 800f050:	4603      	mov	r3, r0
 800f052:	81fb      	strh	r3, [r7, #14]
 800f054:	460b      	mov	r3, r1
 800f056:	81bb      	strh	r3, [r7, #12]
 800f058:	4613      	mov	r3, r2
 800f05a:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800f05c:	2300      	movs	r3, #0
 800f05e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800f060:	2300      	movs	r3, #0
 800f062:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800f064:	2300      	movs	r3, #0
 800f066:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800f068:	2300      	movs	r3, #0
 800f06a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800f06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06e:	89fa      	ldrh	r2, [r7, #14]
 800f070:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	89ba      	ldrh	r2, [r7, #12]
 800f076:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800f07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f080:	88fa      	ldrh	r2, [r7, #6]
 800f082:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800f084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f086:	8a5b      	ldrh	r3, [r3, #18]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d101      	bne.n	800f090 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f08c:	23f1      	movs	r3, #241	; 0xf1
 800f08e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d101      	bne.n	800f09c <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f098:	23f1      	movs	r3, #241	; 0xf1
 800f09a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800f09c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d16f      	bne.n	800f184 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a6:	8a5b      	ldrh	r3, [r3, #18]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fd f903 	bl	800c2b4 <VL53LX_calc_pll_period_us>
 800f0ae:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800f0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ba:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800f0bc:	4619      	mov	r1, r3
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0c4:	6978      	ldr	r0, [r7, #20]
 800f0c6:	f7fd f90c 	bl	800c2e2 <VL53LX_duration_maths>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ce:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800f0d4:	0119      	lsls	r1, r3, #4
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0dc:	6978      	ldr	r0, [r7, #20]
 800f0de:	f7fd f900 	bl	800c2e2 <VL53LX_duration_maths>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e6:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800f0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ee:	69db      	ldr	r3, [r3, #28]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	f7fd fb6d 	bl	800c7d2 <VL53LX_rate_maths>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fe:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	6a1b      	ldr	r3, [r3, #32]
 800f108:	4619      	mov	r1, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	f7fd fb61 	bl	800c7d2 <VL53LX_rate_maths>
 800f110:	4603      	mov	r3, r0
 800f112:	461a      	mov	r2, r3
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800f11c:	461a      	mov	r2, r3
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	4619      	mov	r1, r3
 800f124:	4610      	mov	r0, r2
 800f126:	f7fd fb54 	bl	800c7d2 <VL53LX_rate_maths>
 800f12a:	4603      	mov	r3, r0
 800f12c:	461a      	mov	r2, r3
 800f12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f130:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f136:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800f13c:	4413      	add	r3, r2
 800f13e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800f140:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f144:	2b01      	cmp	r3, #1
 800f146:	d905      	bls.n	800f154 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800f148:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f14c:	69ba      	ldr	r2, [r7, #24]
 800f14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f152:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	8ada      	ldrh	r2, [r3, #22]
 800f158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f15c:	69b9      	ldr	r1, [r7, #24]
 800f15e:	2006      	movs	r0, #6
 800f160:	f7fd fb7c 	bl	800c85c <VL53LX_rate_per_spad_maths>
 800f164:	4603      	mov	r3, r0
 800f166:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800f168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	8ad9      	ldrh	r1, [r3, #22]
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	69db      	ldr	r3, [r3, #28]
 800f178:	461a      	mov	r2, r3
 800f17a:	f7fd f90b 	bl	800c394 <VL53LX_events_per_spad_maths>
 800f17e:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800f180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f182:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800f184:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3720      	adds	r7, #32
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800f190:	b590      	push	{r4, r7, lr}
 800f192:	b085      	sub	sp, #20
 800f194:	af02      	add	r7, sp, #8
 800f196:	4603      	mov	r3, r0
 800f198:	603a      	str	r2, [r7, #0]
 800f19a:	80fb      	strh	r3, [r7, #6]
 800f19c:	460b      	mov	r3, r1
 800f19e:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	8a58      	ldrh	r0, [r3, #18]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	8a9c      	ldrh	r4, [r3, #20]
 800f1ac:	88fb      	ldrh	r3, [r7, #6]
 800f1ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f1b2:	9201      	str	r2, [sp, #4]
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	f7fd fb83 	bl	800c8c4 <VL53LX_range_maths>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	8a58      	ldrh	r0, [r3, #18]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	8a9c      	ldrh	r4, [r3, #20]
 800f1d6:	88fb      	ldrh	r3, [r7, #6]
 800f1d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f1dc:	9201      	str	r2, [sp, #4]
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	f7fd fb6e 	bl	800c8c4 <VL53LX_range_maths>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	8a58      	ldrh	r0, [r3, #18]
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	8a9c      	ldrh	r4, [r3, #20]
 800f200:	88fb      	ldrh	r3, [r7, #6]
 800f202:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f206:	9201      	str	r2, [sp, #4]
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	2300      	movs	r3, #0
 800f20c:	4622      	mov	r2, r4
 800f20e:	f7fd fb59 	bl	800c8c4 <VL53LX_range_maths>
 800f212:	4603      	mov	r3, r0
 800f214:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800f21c:	bf00      	nop
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	bd90      	pop	{r4, r7, pc}

0800f224 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800f230:	2300      	movs	r3, #0
 800f232:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	757b      	strb	r3, [r7, #21]





	memcpy(
 800f240:	22ac      	movs	r2, #172	; 0xac
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f006 fe1b 	bl	8015e80 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800f24a:	2300      	movs	r3, #0
 800f24c:	75fb      	strb	r3, [r7, #23]
 800f24e:	e008      	b.n	800f262 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800f250:	7dfa      	ldrb	r2, [r7, #23]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	3206      	adds	r2, #6
 800f256:	2100      	movs	r1, #0
 800f258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800f25c:	7dfb      	ldrb	r3, [r7, #23]
 800f25e:	3301      	adds	r3, #1
 800f260:	75fb      	strb	r3, [r7, #23]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	7a5b      	ldrb	r3, [r3, #9]
 800f266:	7dfa      	ldrb	r2, [r7, #23]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d3f1      	bcc.n	800f250 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800f26c:	68f9      	ldr	r1, [r7, #12]
 800f26e:	68b8      	ldr	r0, [r7, #8]
 800f270:	f000 f878 	bl	800f364 <VL53LX_f_030>
 800f274:	4603      	mov	r3, r0
 800f276:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	7a9a      	ldrb	r2, [r3, #10]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	7a9b      	ldrb	r3, [r3, #10]
 800f280:	429a      	cmp	r2, r3
 800f282:	d203      	bcs.n	800f28c <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	7a9b      	ldrb	r3, [r3, #10]
 800f288:	75bb      	strb	r3, [r7, #22]
 800f28a:	e002      	b.n	800f292 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	7a9b      	ldrb	r3, [r3, #10]
 800f290:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800f292:	2300      	movs	r3, #0
 800f294:	75fb      	strb	r3, [r7, #23]
 800f296:	e05c      	b.n	800f352 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800f298:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	db0f      	blt.n	800f2c0 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800f2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800f2aa:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	7a92      	ldrb	r2, [r2, #10]
 800f2b0:	b252      	sxtb	r2, r2
 800f2b2:	fb93 f1f2 	sdiv	r1, r3, r2
 800f2b6:	fb01 f202 	mul.w	r2, r1, r2
 800f2ba:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800f2bc:	757b      	strb	r3, [r7, #21]
 800f2be:	e013      	b.n	800f2e8 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	7a9b      	ldrb	r3, [r3, #10]
 800f2c4:	b25b      	sxtb	r3, r3
 800f2c6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800f2c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800f2d2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800f2d4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	7a92      	ldrb	r2, [r2, #10]
 800f2da:	b252      	sxtb	r2, r2
 800f2dc:	fb93 f1f2 	sdiv	r1, r3, r2
 800f2e0:	fb01 f202 	mul.w	r2, r1, r2
 800f2e4:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800f2e6:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800f2e8:	7d7b      	ldrb	r3, [r7, #21]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	3206      	adds	r2, #6
 800f2f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800f2f4:	7df9      	ldrb	r1, [r7, #23]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	3106      	adds	r1, #6
 800f2fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800f2fe:	429a      	cmp	r2, r3
 800f300:	dd12      	ble.n	800f328 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800f302:	7d7b      	ldrb	r3, [r7, #21]
 800f304:	461a      	mov	r2, r3
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	3206      	adds	r2, #6
 800f30a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800f30e:	7df9      	ldrb	r1, [r7, #23]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	3106      	adds	r1, #6
 800f314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800f318:	7d79      	ldrb	r1, [r7, #21]
 800f31a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800f31c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	1d82      	adds	r2, r0, #6
 800f322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f326:	e006      	b.n	800f336 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800f328:	7d7b      	ldrb	r3, [r7, #21]
 800f32a:	461a      	mov	r2, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	3206      	adds	r2, #6
 800f330:	2100      	movs	r1, #0
 800f332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800f336:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800f338:	7d7b      	ldrb	r3, [r7, #21]
 800f33a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	3206      	adds	r2, #6
 800f340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	1d82      	adds	r2, r0, #6
 800f348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800f34c:	7dfb      	ldrb	r3, [r7, #23]
 800f34e:	3301      	adds	r3, #1
 800f350:	75fb      	strb	r3, [r7, #23]
 800f352:	7dfa      	ldrb	r2, [r7, #23]
 800f354:	7dbb      	ldrb	r3, [r7, #22]
 800f356:	429a      	cmp	r2, r3
 800f358:	d39e      	bcc.n	800f298 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800f35a:	bf00      	nop
 800f35c:	bf00      	nop
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800f372:	2300      	movs	r3, #0
 800f374:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800f37a:	2300      	movs	r3, #0
 800f37c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f384:	4618      	mov	r0, r3
 800f386:	f7fd fb85 	bl	800ca94 <VL53LX_decode_vcsel_period>
 800f38a:	4603      	mov	r3, r0
	period = 2048 *
 800f38c:	02db      	lsls	r3, r3, #11
 800f38e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00a      	beq.n	800f3ac <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3a2:	68b9      	ldr	r1, [r7, #8]
 800f3a4:	fb01 f202 	mul.w	r2, r1, r2
 800f3a8:	1a9b      	subs	r3, r3, r2
 800f3aa:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800f3b2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800f3b4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800f3b6:	1ad3      	subs	r3, r2, r3
 800f3b8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	dd09      	ble.n	800f3d4 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	da01      	bge.n	800f3ce <VL53LX_f_030+0x6a>
 800f3ca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800f3ce:	12db      	asrs	r3, r3, #11
 800f3d0:	75fb      	strb	r3, [r7, #23]
 800f3d2:	e008      	b.n	800f3e6 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	da01      	bge.n	800f3e2 <VL53LX_f_030+0x7e>
 800f3de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800f3e2:	12db      	asrs	r3, r3, #11
 800f3e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800f3e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b08e      	sub	sp, #56	; 0x38
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800f424:	22ac      	movs	r2, #172	; 0xac
 800f426:	6879      	ldr	r1, [r7, #4]
 800f428:	6838      	ldr	r0, [r7, #0]
 800f42a:	f006 fd29 	bl	8015e80 <memcpy>


	podata->VL53LX_p_021 = 0;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2200      	movs	r2, #0
 800f432:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800f434:	2300      	movs	r3, #0
 800f436:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f43a:	e00a      	b.n	800f452 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800f43c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	4413      	add	r3, r2
 800f444:	2210      	movs	r2, #16
 800f446:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800f448:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f44c:	3301      	adds	r3, #1
 800f44e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f452:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f456:	2b05      	cmp	r3, #5
 800f458:	d9f0      	bls.n	800f43c <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800f45a:	2300      	movs	r3, #0
 800f45c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f460:	e00b      	b.n	800f47a <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800f462:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	3206      	adds	r2, #6
 800f46a:	2100      	movs	r1, #0
 800f46c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800f470:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f474:	3301      	adds	r3, #1
 800f476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	7a5b      	ldrb	r3, [r3, #9]
 800f47e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f482:	429a      	cmp	r2, r3
 800f484:	d3ed      	bcc.n	800f462 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f486:	2300      	movs	r3, #0
 800f488:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f48c:	e012      	b.n	800f4b4 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800f48e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f492:	3338      	adds	r3, #56	; 0x38
 800f494:	443b      	add	r3, r7
 800f496:	2200      	movs	r2, #0
 800f498:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800f49c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f4a0:	3338      	adds	r3, #56	; 0x38
 800f4a2:	443b      	add	r3, r7
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f4aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f4b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f4b8:	2b0f      	cmp	r3, #15
 800f4ba:	d9e8      	bls.n	800f48e <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f4c8:	e068      	b.n	800f59c <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800f4ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	7b1b      	ldrb	r3, [r3, #12]
 800f4d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800f4d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f4dc:	3338      	adds	r3, #56	; 0x38
 800f4de:	443b      	add	r3, r7
 800f4e0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d115      	bne.n	800f514 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800f4e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f4ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f4f0:	0092      	lsls	r2, r2, #2
 800f4f2:	b2d2      	uxtb	r2, r2
 800f4f4:	3338      	adds	r3, #56	; 0x38
 800f4f6:	443b      	add	r3, r7
 800f4f8:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800f4fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	4413      	add	r3, r2
 800f504:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f508:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800f50a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f50e:	3301      	adds	r3, #1
 800f510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800f514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f518:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f51c:	443a      	add	r2, r7
 800f51e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800f522:	3201      	adds	r2, #1
 800f524:	b2d2      	uxtb	r2, r2
 800f526:	3338      	adds	r3, #56	; 0x38
 800f528:	443b      	add	r3, r7
 800f52a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800f52e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f532:	3338      	adds	r3, #56	; 0x38
 800f534:	443b      	add	r3, r7
 800f536:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800f53a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800f53e:	2300      	movs	r3, #0
 800f540:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f544:	e021      	b.n	800f58a <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800f546:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f54a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f54e:	441a      	add	r2, r3
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	3206      	adds	r2, #6
 800f554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800f558:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f55c:	009a      	lsls	r2, r3, #2
 800f55e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f562:	441a      	add	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	3206      	adds	r2, #6
 800f568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800f56c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800f570:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f574:	4402      	add	r2, r0
 800f576:	4419      	add	r1, r3
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	3206      	adds	r2, #6
 800f57c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800f580:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f584:	3301      	adds	r3, #1
 800f586:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f58a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d9d9      	bls.n	800f546 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f592:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f596:	3301      	adds	r3, #1
 800f598:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f59c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5a0:	2b05      	cmp	r3, #5
 800f5a2:	d992      	bls.n	800f4ca <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f5aa:	e022      	b.n	800f5f2 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800f5ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5b0:	683a      	ldr	r2, [r7, #0]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	7b1b      	ldrb	r3, [r3, #12]
 800f5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800f5ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f5be:	2b0f      	cmp	r3, #15
 800f5c0:	d80c      	bhi.n	800f5dc <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800f5c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800f5c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800f5ca:	3238      	adds	r2, #56	; 0x38
 800f5cc:	443a      	add	r2, r7
 800f5ce:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	460a      	mov	r2, r1
 800f5d8:	749a      	strb	r2, [r3, #18]
 800f5da:	e005      	b.n	800f5e8 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800f5dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800f5e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f5f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5f6:	2b05      	cmp	r3, #5
 800f5f8:	d9d8      	bls.n	800f5ac <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800f5fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	b2da      	uxtb	r2, r3
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f606:	2300      	movs	r3, #0
 800f608:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f60c:	e050      	b.n	800f6b0 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800f60e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f612:	3338      	adds	r3, #56	; 0x38
 800f614:	443b      	add	r3, r7
 800f616:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800f61a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800f61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61e:	2b00      	cmp	r3, #0
 800f620:	dd41      	ble.n	800f6a6 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800f622:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f626:	3338      	adds	r3, #56	; 0x38
 800f628:	443b      	add	r3, r7
 800f62a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800f62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800f632:	2300      	movs	r3, #0
 800f634:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f638:	e031      	b.n	800f69e <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800f63a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f63e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f642:	441a      	add	r2, r3
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	3206      	adds	r2, #6
 800f648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800f64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64e:	0fda      	lsrs	r2, r3, #31
 800f650:	4413      	add	r3, r2
 800f652:	105b      	asrs	r3, r3, #1
 800f654:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800f656:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f65a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f65e:	441a      	add	r2, r3
 800f660:	4401      	add	r1, r0
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	3206      	adds	r2, #6
 800f666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800f66a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f66e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f672:	441a      	add	r2, r3
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	3206      	adds	r2, #6
 800f678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f67c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f680:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f684:	441a      	add	r2, r3
 800f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f688:	fb91 f1f3 	sdiv	r1, r1, r3
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	3206      	adds	r2, #6
 800f690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800f694:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f698:	3301      	adds	r3, #1
 800f69a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f69e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d9c9      	bls.n	800f63a <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800f6a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f6b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f6b4:	2b0f      	cmp	r3, #15
 800f6b6:	d9aa      	bls.n	800f60e <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d102      	bne.n	800f6ca <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800f6c4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d002      	beq.n	800f6d0 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	2204      	movs	r2, #4
 800f6ce:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800f6d0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3738      	adds	r7, #56	; 0x38
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800f6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6de:	b0cb      	sub	sp, #300	; 0x12c
 800f6e0:	af06      	add	r7, sp, #24
 800f6e2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800f6e6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800f6ea:	6020      	str	r0, [r4, #0]
 800f6ec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f6f0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800f6f4:	6001      	str	r1, [r0, #0]
 800f6f6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f6fa:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800f6fe:	600a      	str	r2, [r1, #0]
 800f700:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f704:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800f708:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800f70a:	2300      	movs	r3, #0
 800f70c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800f710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800f718:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f71c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800f720:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800f728:	f107 0318 	add.w	r3, r7, #24
 800f72c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800f730:	2300      	movs	r3, #0
 800f732:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800f740:	2300      	movs	r3, #0
 800f742:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800f746:	2300      	movs	r3, #0
 800f748:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800f758:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f75c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f760:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7ff fe44 	bl	800f3f2 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800f76a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f76e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800f770:	b299      	uxth	r1, r3
 800f772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f776:	3348      	adds	r3, #72	; 0x48
 800f778:	461a      	mov	r2, r3
 800f77a:	2000      	movs	r0, #0
 800f77c:	f7fd f9db 	bl	800cb36 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800f780:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f788:	3348      	adds	r3, #72	; 0x48
 800f78a:	4619      	mov	r1, r3
 800f78c:	4610      	mov	r0, r2
 800f78e:	f7fd f994 	bl	800caba <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800f792:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f796:	2b00      	cmp	r3, #0
 800f798:	d142      	bne.n	800f820 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800f79a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f79e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d039      	beq.n	800f820 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800f7ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f7b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800f7c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800f7d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f7e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f7e6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800f7ea:	6812      	ldr	r2, [r2, #0]
 800f7ec:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800f7f0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f7f4:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800f7f8:	6809      	ldr	r1, [r1, #0]
 800f7fa:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800f7fe:	f107 0014 	add.w	r0, r7, #20
 800f802:	9004      	str	r0, [sp, #16]
 800f804:	9103      	str	r1, [sp, #12]
 800f806:	9202      	str	r2, [sp, #8]
 800f808:	9301      	str	r3, [sp, #4]
 800f80a:	2300      	movs	r3, #0
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	2300      	movs	r3, #0
 800f810:	4632      	mov	r2, r6
 800f812:	4629      	mov	r1, r5
 800f814:	4620      	mov	r0, r4
 800f816:	f002 f8e8 	bl	80119ea <VL53LX_f_032>
 800f81a:	4603      	mov	r3, r0
 800f81c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800f820:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f824:	2b00      	cmp	r3, #0
 800f826:	d115      	bne.n	800f854 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800f828:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f82c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00c      	beq.n	800f854 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800f83a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800f83e:	697a      	ldr	r2, [r7, #20]
 800f840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f844:	3348      	adds	r3, #72	; 0x48
 800f846:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f84a:	f002 fb40 	bl	8011ece <VL53LX_f_033>
 800f84e:	4603      	mov	r3, r0
 800f850:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800f854:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f858:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800f85c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f860:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800f864:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f868:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800f86c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f870:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800f874:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f878:	2200      	movs	r2, #0
 800f87a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800f87e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f882:	2200      	movs	r2, #0
 800f884:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800f888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800f892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f896:	2200      	movs	r2, #0
 800f898:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800f8a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800f8c0:	e108      	b.n	800fad4 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800f8c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800f8d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800f8d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8d8:	3348      	adds	r3, #72	; 0x48
 800f8da:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f8de:	7814      	ldrb	r4, [r2, #0]
 800f8e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f8e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800f8e8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f8ec:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800f8f0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f8f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f8f8:	9405      	str	r4, [sp, #20]
 800f8fa:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800f8fe:	9404      	str	r4, [sp, #16]
 800f900:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800f904:	9403      	str	r4, [sp, #12]
 800f906:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800f90a:	9402      	str	r4, [sp, #8]
 800f90c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800f910:	9401      	str	r4, [sp, #4]
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f918:	6812      	ldr	r2, [r2, #0]
 800f91a:	6809      	ldr	r1, [r1, #0]
 800f91c:	6800      	ldr	r0, [r0, #0]
 800f91e:	f7fe fe65 	bl	800e5ec <VL53LX_f_025>
 800f922:	4603      	mov	r3, r0
 800f924:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800f928:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f040 80cb 	bne.w	800fac8 <VL53LX_hist_process_data+0x3ec>
 800f932:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800f936:	2b00      	cmp	r3, #0
 800f938:	f040 80c6 	bne.w	800fac8 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800f93c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f940:	7c9b      	ldrb	r3, [r3, #18]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d110      	bne.n	800f968 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800f946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f94a:	3314      	adds	r3, #20
 800f94c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800f950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f954:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800f956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f95a:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800f95c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f960:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800f962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f966:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800f968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f96c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800f974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800f978:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f984:	fb02 f303 	mul.w	r3, r2, r3
 800f988:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800f98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f990:	011b      	lsls	r3, r3, #4
 800f992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800f996:	2300      	movs	r3, #0
 800f998:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800f99c:	e08b      	b.n	800fab6 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800f99e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800f9a2:	224c      	movs	r2, #76	; 0x4c
 800f9a4:	fb02 f303 	mul.w	r3, r2, r3
 800f9a8:	3310      	adds	r3, #16
 800f9aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800f9ae:	4413      	add	r3, r2
 800f9b0:	3304      	adds	r3, #4
 800f9b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800f9b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9ba:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800f9be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9c2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	dd0e      	ble.n	800f9e8 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800f9ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9ce:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f9d2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800f9d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9d8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f9dc:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800f9de:	1ad3      	subs	r3, r2, r3
 800f9e0:	b29b      	uxth	r3, r3
				delta_mm =
 800f9e2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800f9e6:	e00d      	b.n	800fa04 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800f9e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9ec:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f9f0:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800f9f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9f6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f9fa:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800f9fc:	1ad3      	subs	r3, r2, r3
 800f9fe:	b29b      	uxth	r3, r3
				delta_mm =
 800fa00:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800fa04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800fa10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800fa14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa20:	fb02 f303 	mul.w	r3, r2, r3
 800fa24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800fa28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa2c:	015b      	lsls	r3, r3, #5
 800fa2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800fa32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800fa3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	dd2f      	ble.n	800faac <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800fa4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa50:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800fa54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800fa62:	429a      	cmp	r2, r3
 800fa64:	da22      	bge.n	800faac <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800fa66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800fa6c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d91b      	bls.n	800faac <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800fa74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800fa7a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800fa7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d913      	bls.n	800faac <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800fa84:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800fa88:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fa8c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800fa90:	6812      	ldr	r2, [r2, #0]
 800fa92:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800fa94:	4293      	cmp	r3, r2
 800fa96:	da09      	bge.n	800faac <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800fa98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800faa0:	224c      	movs	r2, #76	; 0x4c
 800faa2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800faa6:	4618      	mov	r0, r3
 800faa8:	f006 f9ea 	bl	8015e80 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800faac:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800fab0:	3301      	adds	r3, #1
 800fab2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800fab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800faba:	7c9b      	ldrb	r3, [r3, #18]
 800fabc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800fac0:	429a      	cmp	r2, r3
 800fac2:	f4ff af6c 	bcc.w	800f99e <VL53LX_hist_process_data+0x2c2>
 800fac6:	e000      	b.n	800faca <VL53LX_hist_process_data+0x3ee>
			continue;
 800fac8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800faca:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800face:	3301      	adds	r3, #1
 800fad0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800fad4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800fad8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800fadc:	429a      	cmp	r2, r3
 800fade:	f67f aef0 	bls.w	800f8c2 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800fae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fae6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800faf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800faf4:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb02 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b086      	sub	sp, #24
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	60f8      	str	r0, [r7, #12]
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	607a      	str	r2, [r7, #4]
 800fb0e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb10:	2300      	movs	r3, #0
 800fb12:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800fb14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d104      	bne.n	800fb26 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7f9 fc8f 	bl	8009440 <VL53LX_disable_firmware>
 800fb22:	4603      	mov	r3, r0
 800fb24:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800fb26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d104      	bne.n	800fb38 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f7f9 fcb6 	bl	80094a0 <VL53LX_enable_powerforce>
 800fb34:	4603      	mov	r3, r0
 800fb36:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800fb38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d105      	bne.n	800fb4c <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800fb40:	21fa      	movs	r1, #250	; 0xfa
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f7f2 fe7a 	bl	800283c <VL53LX_WaitUs>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800fb4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d107      	bne.n	800fb64 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800fb54:	2201      	movs	r2, #1
 800fb56:	f240 7181 	movw	r1, #1921	; 0x781
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f7f2 fd7e 	bl	800265c <VL53LX_WrByte>
 800fb60:	4603      	mov	r3, r0
 800fb62:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800fb64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d107      	bne.n	800fb7c <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800fb6c:	2205      	movs	r2, #5
 800fb6e:	f240 6183 	movw	r1, #1667	; 0x683
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7f2 fd72 	bl	800265c <VL53LX_WrByte>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800fb7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d105      	bne.n	800fb90 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800fb84:	6879      	ldr	r1, [r7, #4]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7f2 fe58 	bl	800283c <VL53LX_WaitUs>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800fb90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d107      	bne.n	800fba8 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800fb98:	2201      	movs	r2, #1
 800fb9a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f7f2 fd5c 	bl	800265c <VL53LX_WrByte>
 800fba4:	4603      	mov	r3, r0
 800fba6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800fba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d108      	bne.n	800fbc2 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800fbb0:	897b      	ldrh	r3, [r7, #10]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	f240 7184 	movw	r1, #1924	; 0x784
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f7f2 fd79 	bl	80026b0 <VL53LX_WrWord>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800fbc2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3718      	adds	r7, #24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b086      	sub	sp, #24
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	60f8      	str	r0, [r7, #12]
 800fbd6:	607b      	str	r3, [r7, #4]
 800fbd8:	460b      	mov	r3, r1
 800fbda:	72fb      	strb	r3, [r7, #11]
 800fbdc:	4613      	mov	r3, r2
 800fbde:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800fbe8:	7afb      	ldrb	r3, [r7, #11]
 800fbea:	75bb      	strb	r3, [r7, #22]
 800fbec:	e041      	b.n	800fc72 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800fbee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d108      	bne.n	800fc08 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800fbf6:	7dbb      	ldrb	r3, [r7, #22]
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	f240 7194 	movw	r1, #1940	; 0x794
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f7f2 fd2c 	bl	800265c <VL53LX_WrByte>
 800fc04:	4603      	mov	r3, r0
 800fc06:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800fc08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d107      	bne.n	800fc20 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800fc10:	2200      	movs	r2, #0
 800fc12:	f240 7183 	movw	r1, #1923	; 0x783
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f7f2 fd20 	bl	800265c <VL53LX_WrByte>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800fc20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d105      	bne.n	800fc34 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800fc28:	2105      	movs	r1, #5
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f7f2 fe06 	bl	800283c <VL53LX_WaitUs>
 800fc30:	4603      	mov	r3, r0
 800fc32:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800fc34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d107      	bne.n	800fc4c <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	f240 7183 	movw	r1, #1923	; 0x783
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f7f2 fd0a 	bl	800265c <VL53LX_WrByte>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800fc4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d108      	bne.n	800fc66 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800fc54:	2304      	movs	r3, #4
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7f2 fcc7 	bl	80025f0 <VL53LX_ReadMulti>
 800fc62:	4603      	mov	r3, r0
 800fc64:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3304      	adds	r3, #4
 800fc6a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800fc6c:	7dbb      	ldrb	r3, [r7, #22]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	75bb      	strb	r3, [r7, #22]
 800fc72:	7dba      	ldrb	r2, [r7, #22]
 800fc74:	7af9      	ldrb	r1, [r7, #11]
 800fc76:	7abb      	ldrb	r3, [r7, #10]
 800fc78:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	dbb7      	blt.n	800fbee <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fc7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc92:	2300      	movs	r3, #0
 800fc94:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d107      	bne.n	800fcae <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f240 7183 	movw	r1, #1923	; 0x783
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7f2 fcd9 	bl	800265c <VL53LX_WrByte>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800fcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d107      	bne.n	800fcc6 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f240 7181 	movw	r1, #1921	; 0x781
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7f2 fccd 	bl	800265c <VL53LX_WrByte>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800fcc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d104      	bne.n	800fcd8 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7f9 fbf8 	bl	80094c4 <VL53LX_disable_powerforce>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800fcd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d104      	bne.n	800fcea <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7f9 fb9b 	bl	800941c <VL53LX_enable_firmware>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800fcea:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800fcf6:	b480      	push	{r7}
 800fcf8:	b087      	sub	sp, #28
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
 800fd02:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fd04:	2300      	movs	r3, #0
 800fd06:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800fd0c:	89fb      	ldrh	r3, [r7, #14]
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	d802      	bhi.n	800fd18 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800fd12:	f06f 0308 	mvn.w	r3, #8
 800fd16:	e018      	b.n	800fd4a <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800fd18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd1c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	3302      	adds	r3, #2
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	8afa      	ldrh	r2, [r7, #22]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800fd2c:	8afb      	ldrh	r3, [r7, #22]
 800fd2e:	2bff      	cmp	r3, #255	; 0xff
 800fd30:	d901      	bls.n	800fd36 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800fd36:	8afb      	ldrh	r3, [r7, #22]
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	78da      	ldrb	r2, [r3, #3]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	705a      	strb	r2, [r3, #1]

	return status;
 800fd46:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	371c      	adds	r7, #28
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr

0800fd56 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800fd56:	b590      	push	{r4, r7, lr}
 800fd58:	b087      	sub	sp, #28
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	60b9      	str	r1, [r7, #8]
 800fd60:	607a      	str	r2, [r7, #4]
 800fd62:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fd64:	2300      	movs	r3, #0
 800fd66:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800fd70:	89fb      	ldrh	r3, [r7, #14]
 800fd72:	2b37      	cmp	r3, #55	; 0x37
 800fd74:	d802      	bhi.n	800fd7c <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800fd76:	f06f 0308 	mvn.w	r3, #8
 800fd7a:	e03e      	b.n	800fdfa <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800fd7c:	68b9      	ldr	r1, [r7, #8]
 800fd7e:	2002      	movs	r0, #2
 800fd80:	f7f9 fa4d 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fd84:	4603      	mov	r3, r0
 800fd86:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	3302      	adds	r3, #2
 800fd90:	4619      	mov	r1, r3
 800fd92:	2002      	movs	r0, #2
 800fd94:	f7f9 fa43 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800fda4:	099b      	lsrs	r3, r3, #6
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2219      	movs	r2, #25
 800fdb0:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2205      	movs	r2, #5
 800fdb6:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2205      	movs	r2, #5
 800fdbc:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	74fb      	strb	r3, [r7, #19]
 800fdc8:	e012      	b.n	800fdf0 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800fdca:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800fdcc:	6979      	ldr	r1, [r7, #20]
 800fdce:	2002      	movs	r0, #2
 800fdd0:	f7f9 fa25 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	1d23      	adds	r3, r4, #4
 800fddc:	005b      	lsls	r3, r3, #1
 800fdde:	4413      	add	r3, r2
 800fde0:	460a      	mov	r2, r1
 800fde2:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	3302      	adds	r3, #2
 800fde8:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800fdea:	7cfb      	ldrb	r3, [r7, #19]
 800fdec:	3301      	adds	r3, #1
 800fdee:	74fb      	strb	r3, [r7, #19]
 800fdf0:	7cfb      	ldrb	r3, [r7, #19]
 800fdf2:	2b18      	cmp	r3, #24
 800fdf4:	d9e9      	bls.n	800fdca <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800fdf6:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	371c      	adds	r7, #28
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd90      	pop	{r4, r7, pc}

0800fe02 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b086      	sub	sp, #24
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	4603      	mov	r3, r0
 800fe0a:	60b9      	str	r1, [r7, #8]
 800fe0c:	607a      	str	r2, [r7, #4]
 800fe0e:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fe10:	2300      	movs	r3, #0
 800fe12:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800fe14:	89fb      	ldrh	r3, [r7, #14]
 800fe16:	2b07      	cmp	r3, #7
 800fe18:	d802      	bhi.n	800fe20 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800fe1a:	f06f 0308 	mvn.w	r3, #8
 800fe1e:	e027      	b.n	800fe70 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800fe20:	68b9      	ldr	r1, [r7, #8]
 800fe22:	2002      	movs	r0, #2
 800fe24:	f7f9 f9fb 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	3302      	adds	r3, #2
 800fe34:	4619      	mov	r1, r3
 800fe36:	2002      	movs	r0, #2
 800fe38:	f7f9 f9f1 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	3304      	adds	r3, #4
 800fe48:	4619      	mov	r1, r3
 800fe4a:	2002      	movs	r0, #2
 800fe4c:	f7f9 f9e7 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fe50:	4603      	mov	r3, r0
 800fe52:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	3306      	adds	r3, #6
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	2002      	movs	r0, #2
 800fe60:	f7f9 f9dd 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fe64:	4603      	mov	r3, r0
 800fe66:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	80da      	strh	r2, [r3, #6]

	return status;
 800fe6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	4603      	mov	r3, r0
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800fe8a:	89fb      	ldrh	r3, [r7, #14]
 800fe8c:	2b0f      	cmp	r3, #15
 800fe8e:	d802      	bhi.n	800fe96 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800fe90:	f06f 0308 	mvn.w	r3, #8
 800fe94:	e04d      	b.n	800ff32 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800fe96:	68b9      	ldr	r1, [r7, #8]
 800fe98:	2002      	movs	r0, #2
 800fe9a:	f7f9 f9c0 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	789a      	ldrb	r2, [r3, #2]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	78da      	ldrb	r2, [r3, #3]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	3304      	adds	r3, #4
 800feba:	4619      	mov	r1, r3
 800febc:	2002      	movs	r0, #2
 800febe:	f7f9 f9ae 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fec2:	4603      	mov	r3, r0
 800fec4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	3306      	adds	r3, #6
 800fece:	4619      	mov	r1, r3
 800fed0:	2002      	movs	r0, #2
 800fed2:	f7f9 f9a4 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fed6:	4603      	mov	r3, r0
 800fed8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	3308      	adds	r3, #8
 800fee2:	4619      	mov	r1, r3
 800fee4:	2002      	movs	r0, #2
 800fee6:	f7f9 f99a 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800feea:	4603      	mov	r3, r0
 800feec:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	330a      	adds	r3, #10
 800fef6:	4619      	mov	r1, r3
 800fef8:	2002      	movs	r0, #2
 800fefa:	f7f9 f990 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800fefe:	4603      	mov	r3, r0
 800ff00:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	330c      	adds	r3, #12
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	2002      	movs	r0, #2
 800ff0e:	f7f9 f986 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800ff12:	4603      	mov	r3, r0
 800ff14:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	330e      	adds	r3, #14
 800ff1e:	4619      	mov	r1, r3
 800ff20:	2002      	movs	r0, #2
 800ff22:	f7f9 f97c 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 800ff26:	4603      	mov	r3, r0
 800ff28:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	81da      	strh	r2, [r3, #14]

	return status;
 800ff2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3718      	adds	r7, #24
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b086      	sub	sp, #24
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	60f8      	str	r0, [r7, #12]
 800ff42:	607b      	str	r3, [r7, #4]
 800ff44:	460b      	mov	r3, r1
 800ff46:	72fb      	strb	r3, [r7, #11]
 800ff48:	4613      	mov	r3, r2
 800ff4a:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800ff50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d106      	bne.n	800ff66 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800ff58:	2232      	movs	r2, #50	; 0x32
 800ff5a:	2104      	movs	r1, #4
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f7ff fdd0 	bl	800fb02 <VL53LX_nvm_enable>
 800ff62:	4603      	mov	r3, r0
 800ff64:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800ff66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d107      	bne.n	800ff7e <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800ff6e:	7aba      	ldrb	r2, [r7, #10]
 800ff70:	7af9      	ldrb	r1, [r7, #11]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7ff fe2a 	bl	800fbce <VL53LX_nvm_read>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800ff7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d104      	bne.n	800ff90 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f7ff fe7f 	bl	800fc8a <VL53LX_nvm_disable>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800ff90:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3718      	adds	r7, #24
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	2201      	movs	r2, #1
 800ffb0:	212e      	movs	r1, #46	; 0x2e
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff ffc1 	bl	800ff3a <VL53LX_read_nvm_raw_data>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ffbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d108      	bne.n	800ffd6 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800ffc4:	f107 0308 	add.w	r3, r7, #8
 800ffc8:	683a      	ldr	r2, [r7, #0]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	2004      	movs	r0, #4
 800ffce:	f7ff fe92 	bl	800fcf6 <VL53LX_nvm_decode_optical_centre>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800ffd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b092      	sub	sp, #72	; 0x48
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffec:	2300      	movs	r3, #0
 800ffee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800fff2:	f107 030c 	add.w	r3, r7, #12
 800fff6:	220e      	movs	r2, #14
 800fff8:	2157      	movs	r1, #87	; 0x57
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7ff ff9d 	bl	800ff3a <VL53LX_read_nvm_raw_data>
 8010000:	4603      	mov	r3, r0
 8010002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010006:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801000a:	2b00      	cmp	r3, #0
 801000c:	d109      	bne.n	8010022 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 801000e:	f107 030c 	add.w	r3, r7, #12
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	4619      	mov	r1, r3
 8010016:	2038      	movs	r0, #56	; 0x38
 8010018:	f7ff fe9d 	bl	800fd56 <VL53LX_nvm_decode_cal_peak_rate_map>
 801001c:	4603      	mov	r3, r0
 801001e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010022:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8010026:	4618      	mov	r0, r3
 8010028:	3748      	adds	r7, #72	; 0x48
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b086      	sub	sp, #24
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
 8010036:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010038:	2300      	movs	r3, #0
 801003a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 801003c:	f107 030c 	add.w	r3, r7, #12
 8010040:	2202      	movs	r2, #2
 8010042:	2165      	movs	r1, #101	; 0x65
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff ff78 	bl	800ff3a <VL53LX_read_nvm_raw_data>
 801004a:	4603      	mov	r3, r0
 801004c:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 801004e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d108      	bne.n	8010068 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 8010056:	f107 030c 	add.w	r3, r7, #12
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	4619      	mov	r1, r3
 801005e:	2008      	movs	r0, #8
 8010060:	f7ff fecf 	bl	800fe02 <VL53LX_nvm_decode_additional_offset_cal_data>
 8010064:	4603      	mov	r3, r0
 8010066:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010068:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801006c:	4618      	mov	r0, r3
 801006e:	3718      	adds	r7, #24
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b08a      	sub	sp, #40	; 0x28
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	460b      	mov	r3, r1
 801007e:	607a      	str	r2, [r7, #4]
 8010080:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010082:	2300      	movs	r3, #0
 8010084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 8010088:	897b      	ldrh	r3, [r7, #10]
 801008a:	089b      	lsrs	r3, r3, #2
 801008c:	b29b      	uxth	r3, r3
 801008e:	b2d9      	uxtb	r1, r3
 8010090:	f107 0314 	add.w	r3, r7, #20
 8010094:	2204      	movs	r2, #4
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f7ff ff4f 	bl	800ff3a <VL53LX_read_nvm_raw_data>
 801009c:	4603      	mov	r3, r0
 801009e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80100a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d109      	bne.n	80100be <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 80100aa:	f107 0314 	add.w	r3, r7, #20
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	4619      	mov	r1, r3
 80100b2:	2010      	movs	r0, #16
 80100b4:	f7ff fee0 	bl	800fe78 <VL53LX_nvm_decode_fmt_range_results_data>
 80100b8:	4603      	mov	r3, r0
 80100ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80100be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3728      	adds	r7, #40	; 0x28
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b086      	sub	sp, #24
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	60f8      	str	r0, [r7, #12]
 80100d2:	460b      	mov	r3, r1
 80100d4:	607a      	str	r2, [r7, #4]
 80100d6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80100d8:	2300      	movs	r3, #0
 80100da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80100dc:	897b      	ldrh	r3, [r7, #10]
 80100de:	2b0a      	cmp	r3, #10
 80100e0:	d802      	bhi.n	80100e8 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80100e2:	f06f 0309 	mvn.w	r3, #9
 80100e6:	e047      	b.n	8010178 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100f0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80100fe:	f002 020f 	and.w	r2, r2, #15
 8010102:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801010e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010112:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010114:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801011e:	f002 0203 	and.w	r2, r2, #3
 8010122:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010124:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801012e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010132:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010134:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	88d8      	ldrh	r0, [r3, #6]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	3305      	adds	r3, #5
 801013e:	461a      	mov	r2, r3
 8010140:	2102      	movs	r1, #2
 8010142:	f7f9 f841 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801014e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010158:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8010162:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010166:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010168:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8010172:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010174:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3718      	adds	r7, #24
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b086      	sub	sp, #24
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801018e:	2300      	movs	r3, #0
 8010190:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8010192:	89fb      	ldrh	r3, [r7, #14]
 8010194:	2b0a      	cmp	r3, #10
 8010196:	d802      	bhi.n	801019e <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010198:	f06f 0309 	mvn.w	r3, #9
 801019c:	e046      	b.n	801022c <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101a6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	3301      	adds	r3, #1
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	f003 030f 	and.w	r3, r3, #15
 80101b6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	3302      	adds	r3, #2
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	3303      	adds	r3, #3
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f003 0303 	and.w	r3, r3, #3
 80101d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	3304      	adds	r3, #4
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	3305      	adds	r3, #5
 80101f0:	4619      	mov	r1, r3
 80101f2:	2002      	movs	r0, #2
 80101f4:	f7f9 f813 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	79da      	ldrb	r2, [r3, #7]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	7a1a      	ldrb	r2, [r3, #8]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	3309      	adds	r3, #9
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801021a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	7a9a      	ldrb	r2, [r3, #10]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8010228:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801022c:	4618      	mov	r0, r3
 801022e:	3718      	adds	r7, #24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b086      	sub	sp, #24
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801023e:	2300      	movs	r3, #0
 8010240:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d108      	bne.n	801025c <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 801024a:	f107 020c 	add.w	r2, r7, #12
 801024e:	230b      	movs	r3, #11
 8010250:	2101      	movs	r1, #1
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7f2 f9cc 	bl	80025f0 <VL53LX_ReadMulti>
 8010258:	4603      	mov	r3, r0
 801025a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 801025c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d108      	bne.n	8010276 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 8010264:	f107 030c 	add.w	r3, r7, #12
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	4619      	mov	r1, r3
 801026c:	200b      	movs	r0, #11
 801026e:	f7ff ff87 	bl	8010180 <VL53LX_i2c_decode_static_nvm_managed>
 8010272:	4603      	mov	r3, r0
 8010274:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b086      	sub	sp, #24
 8010286:	af00      	add	r7, sp, #0
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	460b      	mov	r3, r1
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010290:	2300      	movs	r3, #0
 8010292:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8010294:	897b      	ldrh	r3, [r7, #10]
 8010296:	2b16      	cmp	r3, #22
 8010298:	d802      	bhi.n	80102a0 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801029a:	f06f 0309 	mvn.w	r3, #9
 801029e:	e076      	b.n	801038e <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80102b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80102ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80102c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80102ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80102d8:	f002 020f 	and.w	r2, r2, #15
 80102dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80102de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80102e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80102f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80102f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80102f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8010302:	f002 0203 	and.w	r2, r2, #3
 8010306:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010308:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	8958      	ldrh	r0, [r3, #10]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	3309      	adds	r3, #9
 8010312:	461a      	mov	r2, r3
 8010314:	2102      	movs	r1, #2
 8010316:	f7f8 ff57 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	330b      	adds	r3, #11
 8010324:	461a      	mov	r2, r3
 8010326:	2102      	movs	r1, #2
 8010328:	f7f8 ff99 	bl	800925e <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	330d      	adds	r3, #13
 8010336:	461a      	mov	r2, r3
 8010338:	2102      	movs	r1, #2
 801033a:	f7f8 ff90 	bl	800925e <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	8a18      	ldrh	r0, [r3, #16]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	330f      	adds	r3, #15
 8010346:	461a      	mov	r2, r3
 8010348:	2102      	movs	r1, #2
 801034a:	f7f8 ff3d 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 8010354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010358:	b218      	sxth	r0, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	3311      	adds	r3, #17
 801035e:	461a      	mov	r2, r3
 8010360:	2102      	movs	r1, #2
 8010362:	f7f8 ff7c 	bl	800925e <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3313      	adds	r3, #19
 8010370:	461a      	mov	r2, r3
 8010372:	2102      	movs	r1, #2
 8010374:	f7f8 ff73 	bl	800925e <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	3315      	adds	r3, #21
 8010382:	461a      	mov	r2, r3
 8010384:	2102      	movs	r1, #2
 8010386:	f7f8 ff6a 	bl	800925e <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 801038a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801038e:	4618      	mov	r0, r3
 8010390:	3718      	adds	r7, #24
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}

08010396 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b086      	sub	sp, #24
 801039a:	af00      	add	r7, sp, #0
 801039c:	4603      	mov	r3, r0
 801039e:	60b9      	str	r1, [r7, #8]
 80103a0:	607a      	str	r2, [r7, #4]
 80103a2:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80103a4:	2300      	movs	r3, #0
 80103a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80103a8:	89fb      	ldrh	r3, [r7, #14]
 80103aa:	2b16      	cmp	r3, #22
 80103ac:	d802      	bhi.n	80103b4 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80103ae:	f06f 0309 	mvn.w	r3, #9
 80103b2:	e079      	b.n	80104a8 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	785a      	ldrb	r2, [r3, #1]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	789a      	ldrb	r2, [r3, #2]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	78da      	ldrb	r2, [r3, #3]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	791a      	ldrb	r2, [r3, #4]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	3305      	adds	r3, #5
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	f003 030f 	and.w	r3, r3, #15
 80103e6:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	799a      	ldrb	r2, [r3, #6]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	3307      	adds	r3, #7
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103fe:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	3308      	adds	r3, #8
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	f003 0303 	and.w	r3, r3, #3
 801040e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	3309      	adds	r3, #9
 8010418:	4619      	mov	r1, r3
 801041a:	2002      	movs	r0, #2
 801041c:	f7f8 feff 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010420:	4603      	mov	r3, r0
 8010422:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	330b      	adds	r3, #11
 801042c:	4619      	mov	r1, r3
 801042e:	2002      	movs	r0, #2
 8010430:	f7f8 ff41 	bl	80092b6 <VL53LX_i2c_decode_int16_t>
 8010434:	4603      	mov	r3, r0
 8010436:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	330d      	adds	r3, #13
 8010440:	4619      	mov	r1, r3
 8010442:	2002      	movs	r0, #2
 8010444:	f7f8 ff37 	bl	80092b6 <VL53LX_i2c_decode_int16_t>
 8010448:	4603      	mov	r3, r0
 801044a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	330f      	adds	r3, #15
 8010454:	4619      	mov	r1, r3
 8010456:	2002      	movs	r0, #2
 8010458:	f7f8 fee1 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 801045c:	4603      	mov	r3, r0
 801045e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	3311      	adds	r3, #17
 8010468:	4619      	mov	r1, r3
 801046a:	2002      	movs	r0, #2
 801046c:	f7f8 ff23 	bl	80092b6 <VL53LX_i2c_decode_int16_t>
 8010470:	4603      	mov	r3, r0
 8010472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010476:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	3313      	adds	r3, #19
 8010480:	4619      	mov	r1, r3
 8010482:	2002      	movs	r0, #2
 8010484:	f7f8 ff17 	bl	80092b6 <VL53LX_i2c_decode_int16_t>
 8010488:	4603      	mov	r3, r0
 801048a:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	3315      	adds	r3, #21
 8010494:	4619      	mov	r1, r3
 8010496:	2002      	movs	r0, #2
 8010498:	f7f8 ff0d 	bl	80092b6 <VL53LX_i2c_decode_int16_t>
 801049c:	4603      	mov	r3, r0
 801049e:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80104a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3718      	adds	r7, #24
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b08a      	sub	sp, #40	; 0x28
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104ba:	2300      	movs	r3, #0
 80104bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80104c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d109      	bne.n	80104dc <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 80104c8:	f107 020c 	add.w	r2, r7, #12
 80104cc:	2317      	movs	r3, #23
 80104ce:	210d      	movs	r1, #13
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7f2 f88d 	bl	80025f0 <VL53LX_ReadMulti>
 80104d6:	4603      	mov	r3, r0
 80104d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80104dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d109      	bne.n	80104f8 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 80104e4:	f107 030c 	add.w	r3, r7, #12
 80104e8:	683a      	ldr	r2, [r7, #0]
 80104ea:	4619      	mov	r1, r3
 80104ec:	2017      	movs	r0, #23
 80104ee:	f7ff ff52 	bl	8010396 <VL53LX_i2c_decode_customer_nvm_managed>
 80104f2:	4603      	mov	r3, r0
 80104f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 80104f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d11c      	bne.n	801053a <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	8a5b      	ldrh	r3, [r3, #18]
 8010504:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 8010506:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801050a:	2b00      	cmp	r3, #0
 801050c:	da00      	bge.n	8010510 <VL53LX_get_customer_nvm_managed+0x60>
 801050e:	3303      	adds	r3, #3
 8010510:	109b      	asrs	r3, r3, #2
 8010512:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 8010514:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801051c:	db04      	blt.n	8010528 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 801051e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010520:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010524:	b29b      	uxth	r3, r3
 8010526:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	2200      	movs	r2, #0
 801052c:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010532:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010538:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 801053a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801053e:	4618      	mov	r0, r3
 8010540:	3728      	adds	r7, #40	; 0x28
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b086      	sub	sp, #24
 801054a:	af00      	add	r7, sp, #0
 801054c:	60f8      	str	r0, [r7, #12]
 801054e:	460b      	mov	r3, r1
 8010550:	607a      	str	r2, [r7, #4]
 8010552:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010554:	2300      	movs	r3, #0
 8010556:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8010558:	897b      	ldrh	r3, [r7, #10]
 801055a:	2b1f      	cmp	r3, #31
 801055c:	d802      	bhi.n	8010564 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801055e:	f06f 0309 	mvn.w	r3, #9
 8010562:	e0cf      	b.n	8010704 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	881b      	ldrh	r3, [r3, #0]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	2102      	movs	r1, #2
 801056c:	4618      	mov	r0, r3
 801056e:	f7f8 fe2b 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801057a:	f002 0201 	and.w	r2, r2, #1
 801057e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010580:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801058a:	f002 020f 	and.w	r2, r2, #15
 801058e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010590:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801059a:	f002 020f 	and.w	r2, r2, #15
 801059e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80105a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80105aa:	f002 021f 	and.w	r2, r2, #31
 80105ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80105b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80105ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80105be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80105c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80105ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80105ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80105d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80105da:	f002 0201 	and.w	r2, r2, #1
 80105de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80105e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80105e6:	68fa      	ldr	r2, [r7, #12]
 80105e8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80105ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80105f4:	f002 0201 	and.w	r2, r2, #1
 80105f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80105fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8010604:	f002 0203 	and.w	r2, r2, #3
 8010608:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801060a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8010614:	f002 021f 	and.w	r2, r2, #31
 8010618:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801061a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8010624:	f002 0203 	and.w	r2, r2, #3
 8010628:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801062a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8010634:	f002 0203 	and.w	r2, r2, #3
 8010638:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801063a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8010644:	f002 0207 	and.w	r2, r2, #7
 8010648:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801064a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8010654:	f002 021f 	and.w	r2, r2, #31
 8010658:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801065a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8010664:	f002 0201 	and.w	r2, r2, #1
 8010668:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801066a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8010674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 801067e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8010688:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8010692:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 801069c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80106a6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	8b18      	ldrh	r0, [r3, #24]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	3318      	adds	r3, #24
 80106b0:	461a      	mov	r2, r3
 80106b2:	2102      	movs	r1, #2
 80106b4:	f7f8 fd88 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80106bc:	68fa      	ldr	r2, [r7, #12]
 80106be:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80106c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80106ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80106d4:	f002 020f 	and.w	r2, r2, #15
 80106d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80106da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80106e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80106ee:	f002 020f 	and.w	r2, r2, #15
 80106f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80106f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80106fe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3718      	adds	r7, #24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	460b      	mov	r3, r1
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801071a:	2300      	movs	r3, #0
 801071c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 801071e:	897b      	ldrh	r3, [r7, #10]
 8010720:	2b15      	cmp	r3, #21
 8010722:	d802      	bhi.n	801072a <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010724:	f06f 0309 	mvn.w	r3, #9
 8010728:	e070      	b.n	801080c <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801073a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8010744:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 801074e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010752:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010754:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 801075a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801075e:	b298      	uxth	r0, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	3304      	adds	r3, #4
 8010764:	461a      	mov	r2, r3
 8010766:	2102      	movs	r1, #2
 8010768:	f7f8 fd2e 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8010774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010778:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801077a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8010784:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801078e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8010798:	f002 0201 	and.w	r2, r2, #1
 801079c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801079e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80107a8:	f002 0207 	and.w	r2, r2, #7
 80107ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80107ae:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	8998      	ldrh	r0, [r3, #12]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	330c      	adds	r3, #12
 80107b8:	461a      	mov	r2, r3
 80107ba:	2102      	movs	r1, #2
 80107bc:	f7f8 fd04 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	89d8      	ldrh	r0, [r3, #14]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	330e      	adds	r3, #14
 80107c8:	461a      	mov	r2, r3
 80107ca:	2102      	movs	r1, #2
 80107cc:	f7f8 fcfc 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	8a18      	ldrh	r0, [r3, #16]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	3310      	adds	r3, #16
 80107d8:	461a      	mov	r2, r3
 80107da:	2102      	movs	r1, #2
 80107dc:	f7f8 fcf4 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80107e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80107f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80107fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8010806:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3718      	adds	r7, #24
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b086      	sub	sp, #24
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	460b      	mov	r3, r1
 801081e:	607a      	str	r2, [r7, #4]
 8010820:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010822:	2300      	movs	r3, #0
 8010824:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8010826:	897b      	ldrh	r3, [r7, #10]
 8010828:	2b16      	cmp	r3, #22
 801082a:	d802      	bhi.n	8010832 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801082c:	f06f 0309 	mvn.w	r3, #9
 8010830:	e06e      	b.n	8010910 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f003 030f 	and.w	r3, r3, #15
 801083a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010848:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8010852:	f002 020f 	and.w	r2, r2, #15
 8010856:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010858:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8010862:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801086c:	f002 020f 	and.w	r2, r2, #15
 8010870:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010872:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 801087c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8010886:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801088a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801088c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010896:	f002 020f 	and.w	r2, r2, #15
 801089a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801089c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80108a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80108b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80108b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80108b6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	8958      	ldrh	r0, [r3, #10]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	330a      	adds	r3, #10
 80108c0:	461a      	mov	r2, r3
 80108c2:	2102      	movs	r1, #2
 80108c4:	f7f8 fc80 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	8998      	ldrh	r0, [r3, #12]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	330c      	adds	r3, #12
 80108d0:	461a      	mov	r2, r3
 80108d2:	2102      	movs	r1, #2
 80108d4:	f7f8 fc78 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80108e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80108ea:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6918      	ldr	r0, [r3, #16]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	3312      	adds	r3, #18
 80108f4:	461a      	mov	r2, r3
 80108f6:	2104      	movs	r1, #4
 80108f8:	f7f8 fd06 	bl	8009308 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8010904:	f002 0201 	and.w	r2, r2, #1
 8010908:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 801090a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801090c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010910:	4618      	mov	r0, r3
 8010912:	3718      	adds	r7, #24
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	460b      	mov	r3, r1
 8010922:	607a      	str	r2, [r7, #4]
 8010924:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010926:	2300      	movs	r3, #0
 8010928:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 801092a:	897b      	ldrh	r3, [r7, #10]
 801092c:	2b11      	cmp	r3, #17
 801092e:	d802      	bhi.n	8010936 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010930:	f06f 0309 	mvn.w	r3, #9
 8010934:	e071      	b.n	8010a1a <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	f003 0303 	and.w	r3, r3, #3
 801093e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	8858      	ldrh	r0, [r3, #2]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	3301      	adds	r3, #1
 801094c:	461a      	mov	r2, r3
 801094e:	2102      	movs	r1, #2
 8010950:	f7f8 fc3a 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	8898      	ldrh	r0, [r3, #4]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3303      	adds	r3, #3
 801095c:	461a      	mov	r2, r3
 801095e:	2102      	movs	r1, #2
 8010960:	f7f8 fc32 	bl	80091c8 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801096c:	f002 0201 	and.w	r2, r2, #1
 8010970:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8010972:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 801097c:	f002 0207 	and.w	r2, r2, #7
 8010980:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010982:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801098c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8010992:	68fa      	ldr	r2, [r7, #12]
 8010994:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010996:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80109a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80109a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80109a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80109b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80109b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80109b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80109c0:	f002 0203 	and.w	r2, r2, #3
 80109c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80109c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80109d0:	f002 0203 	and.w	r2, r2, #3
 80109d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80109d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80109e0:	f002 020f 	and.w	r2, r2, #15
 80109e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80109e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80109f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80109fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8010a04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8010a0e:	f002 0203 	and.w	r2, r2, #3
 8010a12:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010a14:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3718      	adds	r7, #24
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010a22:	b480      	push	{r7}
 8010a24:	b087      	sub	sp, #28
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	60f8      	str	r0, [r7, #12]
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	607a      	str	r2, [r7, #4]
 8010a2e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a30:	2300      	movs	r3, #0
 8010a32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8010a34:	897b      	ldrh	r3, [r7, #10]
 8010a36:	2b04      	cmp	r3, #4
 8010a38:	d802      	bhi.n	8010a40 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010a3a:	f06f 0309 	mvn.w	r3, #9
 8010a3e:	e025      	b.n	8010a8c <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	f003 0301 	and.w	r3, r3, #1
 8010a48:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8010a56:	f002 0201 	and.w	r2, r2, #1
 8010a5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8010a66:	f002 0201 	and.w	r2, r2, #1
 8010a6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010a6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8010a76:	f002 0203 	and.w	r2, r2, #3
 8010a7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010a7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010a86:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	371c      	adds	r7, #28
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b086      	sub	sp, #24
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8010aaa:	89fb      	ldrh	r3, [r7, #14]
 8010aac:	2b2b      	cmp	r3, #43	; 0x2b
 8010aae:	d802      	bhi.n	8010ab6 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010ab0:	f06f 0309 	mvn.w	r3, #9
 8010ab4:	e0e2      	b.n	8010c7c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010abe:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	785a      	ldrb	r2, [r3, #1]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	3302      	adds	r3, #2
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	f003 030f 	and.w	r3, r3, #15
 8010ad6:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	78da      	ldrb	r2, [r3, #3]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	4619      	mov	r1, r3
 8010aea:	2002      	movs	r0, #2
 8010aec:	f7f8 fb97 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	3306      	adds	r3, #6
 8010afc:	4619      	mov	r1, r3
 8010afe:	2002      	movs	r0, #2
 8010b00:	f7f8 fb8d 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b04:	4603      	mov	r3, r0
 8010b06:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	3308      	adds	r3, #8
 8010b10:	4619      	mov	r1, r3
 8010b12:	2002      	movs	r0, #2
 8010b14:	f7f8 fb83 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	330a      	adds	r3, #10
 8010b24:	4619      	mov	r1, r3
 8010b26:	2002      	movs	r0, #2
 8010b28:	f7f8 fb79 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	330c      	adds	r3, #12
 8010b38:	4619      	mov	r1, r3
 8010b3a:	2002      	movs	r0, #2
 8010b3c:	f7f8 fb6f 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b40:	4603      	mov	r3, r0
 8010b42:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	330e      	adds	r3, #14
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	2002      	movs	r0, #2
 8010b50:	f7f8 fb65 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b54:	4603      	mov	r3, r0
 8010b56:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	3310      	adds	r3, #16
 8010b60:	4619      	mov	r1, r3
 8010b62:	2002      	movs	r0, #2
 8010b64:	f7f8 fb5b 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	3312      	adds	r3, #18
 8010b74:	4619      	mov	r1, r3
 8010b76:	2002      	movs	r0, #2
 8010b78:	f7f8 fb51 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3314      	adds	r3, #20
 8010b88:	4619      	mov	r1, r3
 8010b8a:	2002      	movs	r0, #2
 8010b8c:	f7f8 fb47 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010b90:	4603      	mov	r3, r0
 8010b92:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	3316      	adds	r3, #22
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	2002      	movs	r0, #2
 8010ba0:	f7f8 fb3d 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	3318      	adds	r3, #24
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	2002      	movs	r0, #2
 8010bb4:	f7f8 fb33 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	331a      	adds	r3, #26
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	2002      	movs	r0, #2
 8010bc8:	f7f8 fb29 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	331c      	adds	r3, #28
 8010bd8:	4619      	mov	r1, r3
 8010bda:	2002      	movs	r0, #2
 8010bdc:	f7f8 fb1f 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010be0:	4603      	mov	r3, r0
 8010be2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	331e      	adds	r3, #30
 8010bec:	4619      	mov	r1, r3
 8010bee:	2002      	movs	r0, #2
 8010bf0:	f7f8 fb15 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	3320      	adds	r3, #32
 8010c00:	4619      	mov	r1, r3
 8010c02:	2002      	movs	r0, #2
 8010c04:	f7f8 fb0b 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	3322      	adds	r3, #34	; 0x22
 8010c14:	4619      	mov	r1, r3
 8010c16:	2002      	movs	r0, #2
 8010c18:	f7f8 fb01 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	3324      	adds	r3, #36	; 0x24
 8010c28:	4619      	mov	r1, r3
 8010c2a:	2002      	movs	r0, #2
 8010c2c:	f7f8 faf7 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010c30:	4603      	mov	r3, r0
 8010c32:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	3326      	adds	r3, #38	; 0x26
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	2002      	movs	r0, #2
 8010c40:	f7f8 faed 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010c44:	4603      	mov	r3, r0
 8010c46:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	3328      	adds	r3, #40	; 0x28
 8010c50:	4619      	mov	r1, r3
 8010c52:	2002      	movs	r0, #2
 8010c54:	f7f8 fae3 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8010c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3718      	adds	r7, #24
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010c92:	2300      	movs	r3, #0
 8010c94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8010c96:	89fb      	ldrh	r3, [r7, #14]
 8010c98:	2b20      	cmp	r3, #32
 8010c9a:	d802      	bhi.n	8010ca2 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010c9c:	f06f 0309 	mvn.w	r3, #9
 8010ca0:	e04d      	b.n	8010d3e <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8010ca2:	68b9      	ldr	r1, [r7, #8]
 8010ca4:	2004      	movs	r0, #4
 8010ca6:	f7f8 fb59 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010caa:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	2004      	movs	r0, #4
 8010cb8:	f7f8 fb50 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010cbc:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	3308      	adds	r3, #8
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	2004      	movs	r0, #4
 8010cca:	f7f8 fb64 	bl	8009396 <VL53LX_i2c_decode_int32_t>
 8010cce:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	330c      	adds	r3, #12
 8010cd8:	4619      	mov	r1, r3
 8010cda:	2004      	movs	r0, #4
 8010cdc:	f7f8 fb3e 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010ce0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	3310      	adds	r3, #16
 8010cea:	4619      	mov	r1, r3
 8010cec:	2004      	movs	r0, #4
 8010cee:	f7f8 fb35 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010cf2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	3314      	adds	r3, #20
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	2004      	movs	r0, #4
 8010d00:	f7f8 fb2c 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010d04:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	3318      	adds	r3, #24
 8010d0e:	4619      	mov	r1, r3
 8010d10:	2004      	movs	r0, #4
 8010d12:	f7f8 fb40 	bl	8009396 <VL53LX_i2c_decode_int32_t>
 8010d16:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	331c      	adds	r3, #28
 8010d20:	4619      	mov	r1, r3
 8010d22:	2004      	movs	r0, #4
 8010d24:	f7f8 fb1a 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010d28:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8010d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3718      	adds	r7, #24
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b086      	sub	sp, #24
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	60b9      	str	r1, [r7, #8]
 8010d50:	607a      	str	r2, [r7, #4]
 8010d52:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d54:	2300      	movs	r3, #0
 8010d56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8010d58:	89fb      	ldrh	r3, [r7, #14]
 8010d5a:	2b37      	cmp	r3, #55	; 0x37
 8010d5c:	d802      	bhi.n	8010d64 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010d5e:	f06f 0309 	mvn.w	r3, #9
 8010d62:	e15e      	b.n	8011022 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8010d64:	68b9      	ldr	r1, [r7, #8]
 8010d66:	2002      	movs	r0, #2
 8010d68:	f7f8 fa59 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	3302      	adds	r3, #2
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d7e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	3303      	adds	r3, #3
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d8e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	3304      	adds	r3, #4
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	f003 0303 	and.w	r3, r3, #3
 8010d9e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	3305      	adds	r3, #5
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	f003 0301 	and.w	r3, r3, #1
 8010dae:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	3306      	adds	r3, #6
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dbe:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	3307      	adds	r3, #7
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dce:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	3308      	adds	r3, #8
 8010dd8:	4619      	mov	r1, r3
 8010dda:	2002      	movs	r0, #2
 8010ddc:	f7f8 fa1f 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010de0:	4603      	mov	r3, r0
 8010de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010de6:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	330a      	adds	r3, #10
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	f003 0303 	and.w	r3, r3, #3
 8010df6:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	330b      	adds	r3, #11
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	f003 0303 	and.w	r3, r3, #3
 8010e06:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	330c      	adds	r3, #12
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	f003 030f 	and.w	r3, r3, #15
 8010e16:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	330d      	adds	r3, #13
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	f003 0307 	and.w	r3, r3, #7
 8010e26:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	330e      	adds	r3, #14
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	f003 0301 	and.w	r3, r3, #1
 8010e36:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	330f      	adds	r3, #15
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	f003 0303 	and.w	r3, r3, #3
 8010e46:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	7c1a      	ldrb	r2, [r3, #16]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	7c5a      	ldrb	r2, [r3, #17]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	3312      	adds	r3, #18
 8010e60:	4619      	mov	r1, r3
 8010e62:	2002      	movs	r0, #2
 8010e64:	f7f8 f9db 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e6e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	3316      	adds	r3, #22
 8010e78:	4619      	mov	r1, r3
 8010e7a:	2002      	movs	r0, #2
 8010e7c:	f7f8 f9cf 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010e80:	4603      	mov	r3, r0
 8010e82:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	3318      	adds	r3, #24
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	2002      	movs	r0, #2
 8010e90:	f7f8 f9c5 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	331a      	adds	r3, #26
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	f003 0301 	and.w	r3, r3, #1
 8010ea6:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	331b      	adds	r3, #27
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	f003 0307 	and.w	r3, r3, #7
 8010eb6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	7f1a      	ldrb	r2, [r3, #28]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	7f5a      	ldrb	r2, [r3, #29]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	331e      	adds	r3, #30
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ed6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	331f      	adds	r3, #31
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ee6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	3320      	adds	r3, #32
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	f003 0303 	and.w	r3, r3, #3
 8010ef6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	3321      	adds	r3, #33	; 0x21
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	f003 030f 	and.w	r3, r3, #15
 8010f06:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	3325      	adds	r3, #37	; 0x25
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	f003 0301 	and.w	r3, r3, #1
 8010f3a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	3326      	adds	r3, #38	; 0x26
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f003 0303 	and.w	r3, r3, #3
 8010f4c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	3327      	adds	r3, #39	; 0x27
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	f003 031f 	and.w	r3, r3, #31
 8010f5e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	3328      	adds	r3, #40	; 0x28
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	f003 031f 	and.w	r3, r3, #31
 8010f70:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	3329      	adds	r3, #41	; 0x29
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	f003 031f 	and.w	r3, r3, #31
 8010f82:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	332a      	adds	r3, #42	; 0x2a
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	f003 0301 	and.w	r3, r3, #1
 8010f94:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	332b      	adds	r3, #43	; 0x2b
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	f003 0301 	and.w	r3, r3, #1
 8010fa6:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	332c      	adds	r3, #44	; 0x2c
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	f003 0303 	and.w	r3, r3, #3
 8010fb8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	332d      	adds	r3, #45	; 0x2d
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010fca:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	332e      	adds	r3, #46	; 0x2e
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	2004      	movs	r0, #4
 8010fda:	f7f8 f9bf 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	3332      	adds	r3, #50	; 0x32
 8010fec:	4619      	mov	r1, r3
 8010fee:	2004      	movs	r0, #4
 8010ff0:	f7f8 f9b4 	bl	800935c <VL53LX_i2c_decode_uint32_t>
 8010ff4:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	3336      	adds	r3, #54	; 0x36
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	f003 0301 	and.w	r3, r3, #1
 8011004:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	3337      	adds	r3, #55	; 0x37
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	f003 0301 	and.w	r3, r3, #1
 8011016:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 801101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011022:	4618      	mov	r0, r3
 8011024:	3718      	adds	r7, #24
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b086      	sub	sp, #24
 801102e:	af00      	add	r7, sp, #0
 8011030:	4603      	mov	r3, r0
 8011032:	60b9      	str	r1, [r7, #8]
 8011034:	607a      	str	r2, [r7, #4]
 8011036:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011038:	2300      	movs	r3, #0
 801103a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801103c:	89fb      	ldrh	r3, [r7, #14]
 801103e:	2b30      	cmp	r3, #48	; 0x30
 8011040:	d802      	bhi.n	8011048 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011042:	f06f 0309 	mvn.w	r3, #9
 8011046:	e112      	b.n	801126e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	785a      	ldrb	r2, [r3, #1]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	789a      	ldrb	r2, [r3, #2]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	3303      	adds	r3, #3
 8011064:	4619      	mov	r1, r3
 8011066:	2002      	movs	r0, #2
 8011068:	f7f8 f8d9 	bl	800921e <VL53LX_i2c_decode_uint16_t>
 801106c:	4603      	mov	r3, r0
 801106e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	3305      	adds	r3, #5
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801107e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	3306      	adds	r3, #6
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	f003 0307 	and.w	r3, r3, #7
 801108e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	3307      	adds	r3, #7
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	f003 0307 	and.w	r3, r3, #7
 801109e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	3308      	adds	r3, #8
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110ae:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	3309      	adds	r3, #9
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110be:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	330a      	adds	r3, #10
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	f003 0301 	and.w	r3, r3, #1
 80110ce:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	330b      	adds	r3, #11
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110de:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	330c      	adds	r3, #12
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	330d      	adds	r3, #13
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110fe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	330e      	adds	r3, #14
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801110e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	7bda      	ldrb	r2, [r3, #15]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	7c1a      	ldrb	r2, [r3, #16]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	7c5a      	ldrb	r2, [r3, #17]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	7c9a      	ldrb	r2, [r3, #18]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	7cda      	ldrb	r2, [r3, #19]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	7d1a      	ldrb	r2, [r3, #20]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	7d5a      	ldrb	r2, [r3, #21]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	7d9a      	ldrb	r2, [r3, #22]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	7dda      	ldrb	r2, [r3, #23]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	7e1a      	ldrb	r2, [r3, #24]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	7e5a      	ldrb	r2, [r3, #25]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	7e9a      	ldrb	r2, [r3, #26]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	7eda      	ldrb	r2, [r3, #27]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	7f1a      	ldrb	r2, [r3, #28]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	7f5a      	ldrb	r2, [r3, #29]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	7f9a      	ldrb	r2, [r3, #30]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	7fda      	ldrb	r2, [r3, #31]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801126e:	4618      	mov	r0, r3
 8011270:	3718      	adds	r7, #24
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b090      	sub	sp, #64	; 0x40
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011280:	2300      	movs	r3, #0
 8011282:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8011286:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801128a:	2b00      	cmp	r3, #0
 801128c:	d10a      	bne.n	80112a4 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 801128e:	f107 020c 	add.w	r2, r7, #12
 8011292:	2331      	movs	r3, #49	; 0x31
 8011294:	f240 110f 	movw	r1, #271	; 0x10f
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f7f1 f9a9 	bl	80025f0 <VL53LX_ReadMulti>
 801129e:	4603      	mov	r3, r0
 80112a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80112a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d109      	bne.n	80112c0 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80112ac:	f107 030c 	add.w	r3, r7, #12
 80112b0:	683a      	ldr	r2, [r7, #0]
 80112b2:	4619      	mov	r1, r3
 80112b4:	2031      	movs	r0, #49	; 0x31
 80112b6:	f7ff feb8 	bl	801102a <VL53LX_i2c_decode_nvm_copy_data>
 80112ba:	4603      	mov	r3, r0
 80112bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80112c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3740      	adds	r7, #64	; 0x40
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80112cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112d0:	b0d6      	sub	sp, #344	; 0x158
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80112d8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80112dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80112e0:	4603      	mov	r3, r0
 80112e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80112e6:	23f1      	movs	r3, #241	; 0xf1
 80112e8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 80112ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 80112f4:	2300      	movs	r3, #0
 80112f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 80112fa:	f04f 0200 	mov.w	r2, #0
 80112fe:	f04f 0300 	mov.w	r3, #0
 8011302:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8011306:	f04f 0200 	mov.w	r2, #0
 801130a:	f04f 0300 	mov.w	r3, #0
 801130e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8011312:	f04f 0200 	mov.w	r2, #0
 8011316:	f04f 0300 	mov.w	r3, #0
 801131a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53LX_p_055   = 0;
 801131e:	f04f 0200 	mov.w	r2, #0
 8011322:	f04f 0300 	mov.w	r3, #0
 8011326:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53LX_D_002;
 801132a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801132e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011332:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8011334:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8011338:	2b00      	cmp	r3, #0
 801133a:	f000 8322 	beq.w	8011982 <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 801133e:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8011342:	4618      	mov	r0, r3
 8011344:	f7fb fa26 	bl	800c794 <VL53LX_calc_pll_period_mm>
 8011348:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 801134c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8011350:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011354:	429a      	cmp	r2, r3
 8011356:	d91a      	bls.n	801138e <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8011358:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801135c:	2200      	movs	r2, #0
 801135e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011362:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53LX_p_032;
 8011366:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801136a:	2200      	movs	r2, #0
 801136c:	4698      	mov	r8, r3
 801136e:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8011370:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011374:	460b      	mov	r3, r1
 8011376:	ebb3 0308 	subs.w	r3, r3, r8
 801137a:	63bb      	str	r3, [r7, #56]	; 0x38
 801137c:	4613      	mov	r3, r2
 801137e:	eb63 0309 	sbc.w	r3, r3, r9
 8011382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011384:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8011388:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801138c:	e013      	b.n	80113b6 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 801138e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011392:	2200      	movs	r2, #0
 8011394:	469a      	mov	sl, r3
 8011396:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 8011398:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801139c:	2200      	movs	r2, #0
 801139e:	461c      	mov	r4, r3
 80113a0:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80113a2:	ebba 0304 	subs.w	r3, sl, r4
 80113a6:	633b      	str	r3, [r7, #48]	; 0x30
 80113a8:	eb6b 0305 	sbc.w	r3, fp, r5
 80113ac:	637b      	str	r3, [r7, #52]	; 0x34
 80113ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80113b2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 80113b6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80113ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80113be:	429a      	cmp	r2, r3
 80113c0:	d91f      	bls.n	8011402 <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80113c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80113c6:	2200      	movs	r2, #0
 80113c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80113cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53LX_p_001;
 80113d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80113d4:	2200      	movs	r2, #0
 80113d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80113da:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80113de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80113e2:	4623      	mov	r3, r4
 80113e4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80113e8:	4602      	mov	r2, r0
 80113ea:	1a9b      	subs	r3, r3, r2
 80113ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ee:	462b      	mov	r3, r5
 80113f0:	460a      	mov	r2, r1
 80113f2:	eb63 0302 	sbc.w	r3, r3, r2
 80113f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80113fc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8011400:	e01e      	b.n	8011440 <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8011402:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011406:	2200      	movs	r2, #0
 8011408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801140c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53LX_p_007;
 8011410:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011414:	2200      	movs	r2, #0
 8011416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801141a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801141e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8011422:	4623      	mov	r3, r4
 8011424:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011428:	4602      	mov	r2, r0
 801142a:	1a9b      	subs	r3, r3, r2
 801142c:	623b      	str	r3, [r7, #32]
 801142e:	462b      	mov	r3, r5
 8011430:	460a      	mov	r2, r1
 8011432:	eb63 0302 	sbc.w	r3, r3, r2
 8011436:	627b      	str	r3, [r7, #36]	; 0x24
 8011438:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801143c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8011440:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011444:	4313      	orrs	r3, r2
 8011446:	f000 829c 	beq.w	8011982 <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 801144a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801144e:	2200      	movs	r2, #0
 8011450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011454:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8011458:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801145c:	2200      	movs	r2, #0
 801145e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011462:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011466:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 801146a:	4623      	mov	r3, r4
 801146c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8011470:	4602      	mov	r2, r0
 8011472:	189b      	adds	r3, r3, r2
 8011474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011478:	460b      	mov	r3, r1
 801147a:	462a      	mov	r2, r5
 801147c:	eb42 0303 	adc.w	r3, r2, r3
 8011480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53LX_p_028;
 8011484:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8011488:	2200      	movs	r2, #0
 801148a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801148e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8011492:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8011496:	4623      	mov	r3, r4
 8011498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801149c:	4602      	mov	r2, r0
 801149e:	189b      	adds	r3, r3, r2
 80114a0:	61bb      	str	r3, [r7, #24]
 80114a2:	460b      	mov	r3, r1
 80114a4:	462a      	mov	r2, r5
 80114a6:	eb42 0303 	adc.w	r3, r2, r3
 80114aa:	61fb      	str	r3, [r7, #28]
 80114ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80114b0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53LX_D_003)
 80114b4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80114b8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80114bc:	f173 0300 	sbcs.w	r3, r3, #0
 80114c0:	d305      	bcc.n	80114ce <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 80114c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80114c6:	f04f 0300 	mov.w	r3, #0
 80114ca:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 80114ce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80114d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80114d6:	fb03 f102 	mul.w	r1, r3, r2
 80114da:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80114de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80114e2:	fb02 f303 	mul.w	r3, r2, r3
 80114e6:	18ca      	adds	r2, r1, r3
 80114e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80114ec:	fba3 1303 	umull	r1, r3, r3, r3
 80114f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80114f4:	460b      	mov	r3, r1
 80114f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80114fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114fe:	18d3      	adds	r3, r2, r3
 8011500:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011504:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8011508:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801150c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8011510:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8011514:	f04f 0000 	mov.w	r0, #0
 8011518:	f04f 0100 	mov.w	r1, #0
 801151c:	0219      	lsls	r1, r3, #8
 801151e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8011522:	0210      	lsls	r0, r2, #8
 8011524:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53LX_D_004)
 8011528:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011530:	d305      	bcc.n	801153e <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8011532:	f04f 32ff 	mov.w	r2, #4294967295
 8011536:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801153a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801153e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011542:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8011546:	f7ef fc07 	bl	8000d58 <__aeabi_uldivmod>
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8011552:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011556:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801155a:	f7ef fbfd 	bl	8000d58 <__aeabi_uldivmod>
 801155e:	4602      	mov	r2, r0
 8011560:	460b      	mov	r3, r1
 8011562:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8011566:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801156a:	2b80      	cmp	r3, #128	; 0x80
 801156c:	d305      	bcc.n	801157a <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 801156e:	f04f 32ff 	mov.w	r2, #4294967295
 8011572:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8011576:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 801157a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801157e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011582:	fb03 f102 	mul.w	r1, r3, r2
 8011586:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801158a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801158e:	fb02 f303 	mul.w	r3, r2, r3
 8011592:	4419      	add	r1, r3
 8011594:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011598:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801159c:	fba2 2303 	umull	r2, r3, r2, r3
 80115a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80115a4:	4613      	mov	r3, r2
 80115a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80115aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80115ae:	18cb      	adds	r3, r1, r3
 80115b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80115b4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80115b8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80115bc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80115c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80115c4:	2200      	movs	r2, #0
 80115c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80115ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80115ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80115d2:	2200      	movs	r2, #0
 80115d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80115d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80115dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80115e0:	4623      	mov	r3, r4
 80115e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80115e6:	4602      	mov	r2, r0
 80115e8:	189b      	adds	r3, r3, r2
 80115ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80115ee:	460b      	mov	r3, r1
 80115f0:	462a      	mov	r2, r5
 80115f2:	eb42 0303 	adc.w	r3, r2, r3
 80115f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80115fa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80115fe:	2200      	movs	r2, #0
 8011600:	67bb      	str	r3, [r7, #120]	; 0x78
 8011602:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011604:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8011608:	4623      	mov	r3, r4
 801160a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801160e:	4602      	mov	r2, r0
 8011610:	189b      	adds	r3, r3, r2
 8011612:	673b      	str	r3, [r7, #112]	; 0x70
 8011614:	460b      	mov	r3, r1
 8011616:	462a      	mov	r2, r5
 8011618:	eb42 0303 	adc.w	r3, r2, r3
 801161c:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801161e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011622:	2200      	movs	r2, #0
 8011624:	66bb      	str	r3, [r7, #104]	; 0x68
 8011626:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8011628:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801162c:	4623      	mov	r3, r4
 801162e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011632:	4602      	mov	r2, r0
 8011634:	189b      	adds	r3, r3, r2
 8011636:	613b      	str	r3, [r7, #16]
 8011638:	460b      	mov	r3, r1
 801163a:	462a      	mov	r2, r5
 801163c:	eb42 0303 	adc.w	r3, r2, r3
 8011640:	617b      	str	r3, [r7, #20]
 8011642:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011646:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 801164a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801164e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011652:	f173 0300 	sbcs.w	r3, r3, #0
 8011656:	d305      	bcc.n	8011664 <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 8011658:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801165c:	f04f 0300 	mov.w	r3, #0
 8011660:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8011664:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8011668:	f04f 0000 	mov.w	r0, #0
 801166c:	f04f 0100 	mov.w	r1, #0
 8011670:	0219      	lsls	r1, r3, #8
 8011672:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8011676:	0210      	lsls	r0, r2, #8
 8011678:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 801167c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011680:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8011684:	1884      	adds	r4, r0, r2
 8011686:	60bc      	str	r4, [r7, #8]
 8011688:	eb41 0303 	adc.w	r3, r1, r3
 801168c:	60fb      	str	r3, [r7, #12]
 801168e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011692:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8011696:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801169a:	2b00      	cmp	r3, #0
 801169c:	da05      	bge.n	80116aa <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 801169e:	f04f 32ff 	mov.w	r2, #4294967295
 80116a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80116a6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80116aa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d331      	bcc.n	8011716 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80116b2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80116b6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80116ba:	f7ef fb4d 	bl	8000d58 <__aeabi_uldivmod>
 80116be:	4602      	mov	r2, r0
 80116c0:	460b      	mov	r3, r1
 80116c2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80116c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80116ca:	2200      	movs	r2, #0
 80116cc:	663b      	str	r3, [r7, #96]	; 0x60
 80116ce:	667a      	str	r2, [r7, #100]	; 0x64
 80116d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80116d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80116d8:	4622      	mov	r2, r4
 80116da:	fb02 f203 	mul.w	r2, r2, r3
 80116de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80116e2:	4629      	mov	r1, r5
 80116e4:	fb01 f303 	mul.w	r3, r1, r3
 80116e8:	441a      	add	r2, r3
 80116ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80116ee:	4621      	mov	r1, r4
 80116f0:	fba3 1301 	umull	r1, r3, r3, r1
 80116f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80116f8:	460b      	mov	r3, r1
 80116fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80116fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011702:	18d3      	adds	r3, r2, r3
 8011704:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011708:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 801170c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8011710:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8011714:	e030      	b.n	8011778 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8011716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801171a:	2200      	movs	r2, #0
 801171c:	65bb      	str	r3, [r7, #88]	; 0x58
 801171e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011720:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011724:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8011728:	4622      	mov	r2, r4
 801172a:	fb02 f203 	mul.w	r2, r2, r3
 801172e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011732:	4629      	mov	r1, r5
 8011734:	fb01 f303 	mul.w	r3, r1, r3
 8011738:	441a      	add	r2, r3
 801173a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801173e:	4621      	mov	r1, r4
 8011740:	fba3 1301 	umull	r1, r3, r3, r1
 8011744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011748:	460b      	mov	r3, r1
 801174a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801174e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011752:	18d3      	adds	r3, r2, r3
 8011754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011758:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801175c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8011760:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8011764:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011768:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801176c:	f7ef faf4 	bl	8000d58 <__aeabi_uldivmod>
 8011770:	4602      	mov	r2, r0
 8011772:	460b      	mov	r3, r1
 8011774:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8011778:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801177c:	2b00      	cmp	r3, #0
 801177e:	da05      	bge.n	801178c <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 8011780:	f04f 32ff 	mov.w	r2, #4294967295
 8011784:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011788:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801178c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8011790:	2b01      	cmp	r3, #1
 8011792:	d33d      	bcc.n	8011810 <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8011794:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011798:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801179c:	f7ef fadc 	bl	8000d58 <__aeabi_uldivmod>
 80117a0:	4602      	mov	r2, r0
 80117a2:	460b      	mov	r3, r1
 80117a4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80117a8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80117ac:	f04f 0200 	mov.w	r2, #0
 80117b0:	f04f 0300 	mov.w	r3, #0
 80117b4:	0882      	lsrs	r2, r0, #2
 80117b6:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80117ba:	088b      	lsrs	r3, r1, #2
 80117bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80117c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80117c4:	2200      	movs	r2, #0
 80117c6:	653b      	str	r3, [r7, #80]	; 0x50
 80117c8:	657a      	str	r2, [r7, #84]	; 0x54
 80117ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80117ce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80117d2:	4622      	mov	r2, r4
 80117d4:	fb02 f203 	mul.w	r2, r2, r3
 80117d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80117dc:	4629      	mov	r1, r5
 80117de:	fb01 f303 	mul.w	r3, r1, r3
 80117e2:	4413      	add	r3, r2
 80117e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117e8:	4621      	mov	r1, r4
 80117ea:	fba2 1201 	umull	r1, r2, r2, r1
 80117ee:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80117f2:	460a      	mov	r2, r1
 80117f4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80117f8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80117fc:	4413      	add	r3, r2
 80117fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011802:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8011806:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801180a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801180e:	e03c      	b.n	801188a <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8011810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011814:	2200      	movs	r2, #0
 8011816:	64bb      	str	r3, [r7, #72]	; 0x48
 8011818:	64fa      	str	r2, [r7, #76]	; 0x4c
 801181a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801181e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011822:	4622      	mov	r2, r4
 8011824:	fb02 f203 	mul.w	r2, r2, r3
 8011828:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801182c:	4629      	mov	r1, r5
 801182e:	fb01 f303 	mul.w	r3, r1, r3
 8011832:	4413      	add	r3, r2
 8011834:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011838:	4621      	mov	r1, r4
 801183a:	fba2 1201 	umull	r1, r2, r2, r1
 801183e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011842:	460a      	mov	r2, r1
 8011844:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8011848:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801184c:	4413      	add	r3, r2
 801184e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011852:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011856:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801185a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801185e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011862:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011866:	f7ef fa77 	bl	8000d58 <__aeabi_uldivmod>
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8011872:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011876:	f04f 0200 	mov.w	r2, #0
 801187a:	f04f 0300 	mov.w	r3, #0
 801187e:	0882      	lsrs	r2, r0, #2
 8011880:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8011884:	088b      	lsrs	r3, r1, #2
 8011886:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 801188a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801188e:	2b00      	cmp	r3, #0
 8011890:	da05      	bge.n	801189e <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8011892:	f04f 32ff 	mov.w	r2, #4294967295
 8011896:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801189a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 801189e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80118a2:	f04f 0200 	mov.w	r2, #0
 80118a6:	f04f 0300 	mov.w	r3, #0
 80118aa:	0882      	lsrs	r2, r0, #2
 80118ac:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80118b0:	088b      	lsrs	r3, r1, #2
 80118b2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80118b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d305      	bcc.n	80118ca <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 80118be:	f04f 32ff 	mov.w	r2, #4294967295
 80118c2:	f04f 0300 	mov.w	r3, #0
 80118c6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80118ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80118ce:	2200      	movs	r2, #0
 80118d0:	643b      	str	r3, [r7, #64]	; 0x40
 80118d2:	647a      	str	r2, [r7, #68]	; 0x44
 80118d4:	f04f 0200 	mov.w	r2, #0
 80118d8:	f04f 0300 	mov.w	r3, #0
 80118dc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80118e0:	4629      	mov	r1, r5
 80118e2:	01cb      	lsls	r3, r1, #7
 80118e4:	4621      	mov	r1, r4
 80118e6:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 80118ea:	4621      	mov	r1, r4
 80118ec:	01ca      	lsls	r2, r1, #7
 80118ee:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 80118f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80118f6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80118fa:	fb03 f202 	mul.w	r2, r3, r2
 80118fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011902:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8011906:	fb01 f303 	mul.w	r3, r1, r3
 801190a:	441a      	add	r2, r3
 801190c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011910:	fba3 1303 	umull	r1, r3, r3, r3
 8011914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011918:	460b      	mov	r3, r1
 801191a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801191e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011922:	18d3      	adds	r3, r2, r3
 8011924:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011928:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801192c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8011930:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8011934:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8011938:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801193c:	1884      	adds	r4, r0, r2
 801193e:	603c      	str	r4, [r7, #0]
 8011940:	eb41 0303 	adc.w	r3, r1, r3
 8011944:	607b      	str	r3, [r7, #4]
 8011946:	e9d7 3400 	ldrd	r3, r4, [r7]
 801194a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 801194e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8011952:	2b01      	cmp	r3, #1
 8011954:	d305      	bcc.n	8011962 <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8011956:	f04f 32ff 	mov.w	r2, #4294967295
 801195a:	f04f 0300 	mov.w	r3, #0
 801195e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8011962:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011966:	4618      	mov	r0, r3
 8011968:	f7fa fdad 	bl	800c4c6 <VL53LX_isqrt>
 801196c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8011970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011974:	b29a      	uxth	r2, r3
 8011976:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801197a:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 801197c:	2300      	movs	r3, #0
 801197e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8011982:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8011986:	4618      	mov	r0, r3
 8011988:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801198c:	46bd      	mov	sp, r7
 801198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011992 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b086      	sub	sp, #24
 8011996:	af02      	add	r7, sp, #8
 8011998:	6078      	str	r0, [r7, #4]
 801199a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 801199c:	2300      	movs	r3, #0
 801199e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80119a0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f7f0 ff49 	bl	800283c <VL53LX_WaitUs>
 80119aa:	4603      	mov	r3, r0
 80119ac:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80119ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d10b      	bne.n	80119ce <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80119b6:	2301      	movs	r3, #1
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	2301      	movs	r3, #1
 80119bc:	9300      	str	r3, [sp, #0]
 80119be:	2301      	movs	r3, #1
 80119c0:	22e5      	movs	r2, #229	; 0xe5
 80119c2:	6839      	ldr	r1, [r7, #0]
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7f0 ff4f 	bl	8002868 <VL53LX_WaitValueMaskEx>
 80119ca:	4603      	mov	r3, r0
 80119cc:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 80119ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d103      	bne.n	80119de <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 80119d6:	2103      	movs	r1, #3
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f7f6 fe3a 	bl	8008652 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80119de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 80119ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80119ee:	b0c0      	sub	sp, #256	; 0x100
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 80119f6:	4618      	mov	r0, r3
 80119f8:	460b      	mov	r3, r1
 80119fa:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80119fe:	4613      	mov	r3, r2
 8011a00:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8011a04:	4603      	mov	r3, r0
 8011a06:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8011a10:	2300      	movs	r3, #0
 8011a12:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8011a16:	2300      	movs	r3, #0
 8011a18:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8011a22:	2300      	movs	r3, #0
 8011a24:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8011a34:	f04f 0200 	mov.w	r2, #0
 8011a38:	f04f 0300 	mov.w	r3, #0
 8011a3c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8011a40:	f04f 0200 	mov.w	r2, #0
 8011a44:	f04f 0300 	mov.w	r3, #0
 8011a48:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8011a4c:	f04f 0200 	mov.w	r2, #0
 8011a50:	f04f 0300 	mov.w	r3, #0
 8011a54:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8011a58:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d108      	bne.n	8011a72 <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8011a60:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8011a64:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8011a68:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7fb f90b 	bl	800cc88 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8011a72:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d165      	bne.n	8011b46 <VL53LX_f_032+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8011a7a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011a7e:	091b      	lsrs	r3, r3, #4
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d00e      	beq.n	8011aa8 <VL53LX_f_032+0xbe>
			bound_l_x = (int16_t) col -
 8011a8a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011a94:	095b      	lsrs	r3, r3, #5
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8011aa6:	e00b      	b.n	8011ac0 <VL53LX_f_032+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8011aa8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011ab2:	095b      	lsrs	r3, r3, #5
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	1ad3      	subs	r3, r2, r3
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8011ac0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011aca:	095b      	lsrs	r3, r3, #5
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8011ad8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d011      	beq.n	8011b08 <VL53LX_f_032+0x11e>
			bound_d_y = (int16_t) row -
 8011ae4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011ae8:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8011aea:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011aee:	f003 020f 	and.w	r2, r3, #15
 8011af2:	0fd3      	lsrs	r3, r2, #31
 8011af4:	4413      	add	r3, r2
 8011af6:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	1acb      	subs	r3, r1, r3
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	3b01      	subs	r3, #1
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8011b06:	e00f      	b.n	8011b28 <VL53LX_f_032+0x13e>
		else
			bound_d_y = (int16_t) row -
 8011b08:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011b0c:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8011b0e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011b12:	f003 020f 	and.w	r2, r3, #15
 8011b16:	0fd3      	lsrs	r3, r2, #31
 8011b18:	4413      	add	r3, r2
 8011b1a:	105b      	asrs	r3, r3, #1
 8011b1c:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	440b      	add	r3, r1
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8011b28:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011b2c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8011b2e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8011b32:	f003 020f 	and.w	r2, r3, #15
 8011b36:	0fd3      	lsrs	r3, r2, #31
 8011b38:	4413      	add	r3, r2
 8011b3a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	440b      	add	r3, r1
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8011b46:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d133      	bne.n	8011bb6 <VL53LX_f_032+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8011b4e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8011b58:	4413      	add	r3, r2
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	005b      	lsls	r3, r3, #1
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	3b0f      	subs	r3, #15
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8011b68:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8011b72:	4413      	add	r3, r2
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	3b0f      	subs	r3, #15
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8011b82:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8011b8c:	4413      	add	r3, r2
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	005b      	lsls	r3, r3, #1
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	3b0f      	subs	r3, #15
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8011b9c:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8011ba6:	4413      	add	r3, r2
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	005b      	lsls	r3, r3, #1
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	3b0f      	subs	r3, #15
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8011bb6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f040 8135 	bne.w	8011e2a <VL53LX_f_032+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011bc0:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8011bc4:	17da      	asrs	r2, r3, #31
 8011bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011bca:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011bce:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011bd2:	17da      	asrs	r2, r3, #31
 8011bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011bdc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8011be0:	460b      	mov	r3, r1
 8011be2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011be6:	fb02 f203 	mul.w	r2, r2, r3
 8011bea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011bee:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	fb01 f303 	mul.w	r3, r1, r3
 8011bf8:	4413      	add	r3, r2
 8011bfa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011bfe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8011c02:	fba2 4501 	umull	r4, r5, r2, r1
 8011c06:	442b      	add	r3, r5
 8011c08:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011c0a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8011c0e:	17da      	asrs	r2, r3, #31
 8011c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011c14:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8011c18:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011c1c:	17da      	asrs	r2, r3, #31
 8011c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011c22:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011c30:	fb02 f203 	mul.w	r2, r2, r3
 8011c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011c38:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8011c3c:	4601      	mov	r1, r0
 8011c3e:	fb01 f303 	mul.w	r3, r1, r3
 8011c42:	4413      	add	r3, r2
 8011c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011c48:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8011c4c:	fba2 8901 	umull	r8, r9, r2, r1
 8011c50:	444b      	add	r3, r9
 8011c52:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011c54:	eb14 0308 	adds.w	r3, r4, r8
 8011c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c5a:	eb45 0309 	adc.w	r3, r5, r9
 8011c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c60:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8011c64:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8011c68:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011c6c:	1c51      	adds	r1, r2, #1
 8011c6e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011c72:	f143 0300 	adc.w	r3, r3, #0
 8011c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011c7a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011c7e:	460b      	mov	r3, r1
 8011c80:	0fdb      	lsrs	r3, r3, #31
 8011c82:	2200      	movs	r2, #0
 8011c84:	643b      	str	r3, [r7, #64]	; 0x40
 8011c86:	647a      	str	r2, [r7, #68]	; 0x44
 8011c88:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011c8c:	4623      	mov	r3, r4
 8011c8e:	4602      	mov	r2, r0
 8011c90:	189b      	adds	r3, r3, r2
 8011c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c94:	460b      	mov	r3, r1
 8011c96:	462a      	mov	r2, r5
 8011c98:	eb42 0303 	adc.w	r3, r2, r3
 8011c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c9e:	f04f 0200 	mov.w	r2, #0
 8011ca2:	f04f 0300 	mov.w	r3, #0
 8011ca6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8011caa:	4621      	mov	r1, r4
 8011cac:	084a      	lsrs	r2, r1, #1
 8011cae:	4629      	mov	r1, r5
 8011cb0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	104b      	asrs	r3, r1, #1
 8011cb8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8011cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011cc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011cca:	f04f 0000 	mov.w	r0, #0
 8011cce:	f04f 0100 	mov.w	r1, #0
 8011cd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011cd6:	462b      	mov	r3, r5
 8011cd8:	0099      	lsls	r1, r3, #2
 8011cda:	4623      	mov	r3, r4
 8011cdc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8011ce0:	4623      	mov	r3, r4
 8011ce2:	0098      	lsls	r0, r3, #2
 8011ce4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011ce8:	1814      	adds	r4, r2, r0
 8011cea:	633c      	str	r4, [r7, #48]	; 0x30
 8011cec:	414b      	adcs	r3, r1
 8011cee:	637b      	str	r3, [r7, #52]	; 0x34
 8011cf0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011cf4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011cf8:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8011cfc:	17da      	asrs	r2, r3, #31
 8011cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011d02:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011d06:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011d0a:	17da      	asrs	r2, r3, #31
 8011d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011d14:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8011d18:	462b      	mov	r3, r5
 8011d1a:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8011d1e:	4642      	mov	r2, r8
 8011d20:	fb02 f203 	mul.w	r2, r2, r3
 8011d24:	464b      	mov	r3, r9
 8011d26:	4621      	mov	r1, r4
 8011d28:	fb01 f303 	mul.w	r3, r1, r3
 8011d2c:	4413      	add	r3, r2
 8011d2e:	4622      	mov	r2, r4
 8011d30:	4641      	mov	r1, r8
 8011d32:	fba2 ab01 	umull	sl, fp, r2, r1
 8011d36:	445b      	add	r3, fp
 8011d38:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011d3a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8011d3e:	17da      	asrs	r2, r3, #31
 8011d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d42:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8011d44:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011d48:	17da      	asrs	r2, r3, #31
 8011d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8011d4c:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011d4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8011d52:	462b      	mov	r3, r5
 8011d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011d58:	4642      	mov	r2, r8
 8011d5a:	fb02 f203 	mul.w	r2, r2, r3
 8011d5e:	464b      	mov	r3, r9
 8011d60:	4621      	mov	r1, r4
 8011d62:	fb01 f303 	mul.w	r3, r1, r3
 8011d66:	4413      	add	r3, r2
 8011d68:	4622      	mov	r2, r4
 8011d6a:	4641      	mov	r1, r8
 8011d6c:	fba2 1201 	umull	r1, r2, r2, r1
 8011d70:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011d74:	460a      	mov	r2, r1
 8011d76:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8011d7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011d7e:	4413      	add	r3, r2
 8011d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011d84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8011d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d90:	4613      	mov	r3, r2
 8011d92:	eb4b 0303 	adc.w	r3, fp, r3
 8011d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d98:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8011d9c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011da0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8011da4:	1c51      	adds	r1, r2, #1
 8011da6:	66b9      	str	r1, [r7, #104]	; 0x68
 8011da8:	f143 0300 	adc.w	r3, r3, #0
 8011dac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011db2:	460b      	mov	r3, r1
 8011db4:	0fdb      	lsrs	r3, r3, #31
 8011db6:	2200      	movs	r2, #0
 8011db8:	623b      	str	r3, [r7, #32]
 8011dba:	627a      	str	r2, [r7, #36]	; 0x24
 8011dbc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8011dc0:	4623      	mov	r3, r4
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	189b      	adds	r3, r3, r2
 8011dc6:	61bb      	str	r3, [r7, #24]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	462a      	mov	r2, r5
 8011dcc:	eb42 0303 	adc.w	r3, r2, r3
 8011dd0:	61fb      	str	r3, [r7, #28]
 8011dd2:	f04f 0200 	mov.w	r2, #0
 8011dd6:	f04f 0300 	mov.w	r3, #0
 8011dda:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011dde:	4621      	mov	r1, r4
 8011de0:	084a      	lsrs	r2, r1, #1
 8011de2:	4629      	mov	r1, r5
 8011de4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011de8:	4629      	mov	r1, r5
 8011dea:	104b      	asrs	r3, r1, #1
 8011dec:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8011df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011df4:	2200      	movs	r2, #0
 8011df6:	663b      	str	r3, [r7, #96]	; 0x60
 8011df8:	667a      	str	r2, [r7, #100]	; 0x64
 8011dfa:	f04f 0200 	mov.w	r2, #0
 8011dfe:	f04f 0300 	mov.w	r3, #0
 8011e02:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011e06:	4629      	mov	r1, r5
 8011e08:	008b      	lsls	r3, r1, #2
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011e10:	4621      	mov	r1, r4
 8011e12:	008a      	lsls	r2, r1, #2
 8011e14:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8011e18:	1884      	adds	r4, r0, r2
 8011e1a:	613c      	str	r4, [r7, #16]
 8011e1c:	eb41 0303 	adc.w	r3, r1, r3
 8011e20:	617b      	str	r3, [r7, #20]
 8011e22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011e26:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8011e2a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d132      	bne.n	8011e98 <VL53LX_f_032+0x4ae>
		xtalk_avg = do_division_s(
 8011e32:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8011e36:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8011e3a:	1884      	adds	r4, r0, r2
 8011e3c:	65bc      	str	r4, [r7, #88]	; 0x58
 8011e3e:	eb41 0303 	adc.w	r3, r1, r3
 8011e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e44:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8011e48:	460b      	mov	r3, r1
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8011e4e:	4613      	mov	r3, r2
 8011e50:	f143 0300 	adc.w	r3, r3, #0
 8011e54:	657b      	str	r3, [r7, #84]	; 0x54
 8011e56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	0fdb      	lsrs	r3, r3, #31
 8011e5e:	2200      	movs	r2, #0
 8011e60:	60bb      	str	r3, [r7, #8]
 8011e62:	60fa      	str	r2, [r7, #12]
 8011e64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011e68:	4623      	mov	r3, r4
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	189b      	adds	r3, r3, r2
 8011e6e:	603b      	str	r3, [r7, #0]
 8011e70:	460b      	mov	r3, r1
 8011e72:	462a      	mov	r2, r5
 8011e74:	eb42 0303 	adc.w	r3, r2, r3
 8011e78:	607b      	str	r3, [r7, #4]
 8011e7a:	f04f 0200 	mov.w	r2, #0
 8011e7e:	f04f 0300 	mov.w	r3, #0
 8011e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011e86:	4621      	mov	r1, r4
 8011e88:	084a      	lsrs	r2, r1, #1
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011e90:	4629      	mov	r1, r5
 8011e92:	104b      	asrs	r3, r1, #1
 8011e94:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8011e98:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d109      	bne.n	8011eb4 <VL53LX_f_032+0x4ca>
		if (xtalk_avg < 0)
 8011ea0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	da05      	bge.n	8011eb4 <VL53LX_f_032+0x4ca>
			xtalk_avg = 0;
 8011ea8:	f04f 0200 	mov.w	r2, #0
 8011eac:	f04f 0300 	mov.w	r3, #0
 8011eb0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8011eb4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011ebc:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011ebe:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011ece <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011ece:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011ed2:	b09a      	sub	sp, #104	; 0x68
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6478      	str	r0, [r7, #68]	; 0x44
 8011ed8:	6439      	str	r1, [r7, #64]	; 0x40
 8011eda:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011edc:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8011ee4:	f04f 0200 	mov.w	r2, #0
 8011ee8:	f04f 0300 	mov.w	r3, #0
 8011eec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8011ef0:	f04f 0200 	mov.w	r2, #0
 8011ef4:	f04f 0300 	mov.w	r3, #0
 8011ef8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8011efc:	f04f 0200 	mov.w	r2, #0
 8011f00:	f04f 0300 	mov.w	r3, #0
 8011f04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8011f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f10:	2200      	movs	r2, #0
 8011f12:	633b      	str	r3, [r7, #48]	; 0x30
 8011f14:	637a      	str	r2, [r7, #52]	; 0x34
 8011f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011f26:	460b      	mov	r3, r1
 8011f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f2a:	fb02 f203 	mul.w	r2, r2, r3
 8011f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f30:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8011f34:	4601      	mov	r1, r0
 8011f36:	fb01 f303 	mul.w	r3, r1, r3
 8011f3a:	4413      	add	r3, r2
 8011f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f40:	fba2 4501 	umull	r4, r5, r2, r1
 8011f44:	442b      	add	r3, r5
 8011f46:	461d      	mov	r5, r3
 8011f48:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8011f4c:	623b      	str	r3, [r7, #32]
 8011f4e:	f145 0300 	adc.w	r3, r5, #0
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24
 8011f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011f58:	f04f 0300 	mov.w	r3, #0
 8011f5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011f60:	f7ee fefa 	bl	8000d58 <__aeabi_uldivmod>
 8011f64:	4602      	mov	r2, r0
 8011f66:	460b      	mov	r3, r1
 8011f68:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8011f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f6e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	2200      	movs	r2, #0
 8011f76:	61bb      	str	r3, [r7, #24]
 8011f78:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8011f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f7c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011f80:	4622      	mov	r2, r4
 8011f82:	fb02 f203 	mul.w	r2, r2, r3
 8011f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f88:	4629      	mov	r1, r5
 8011f8a:	fb01 f303 	mul.w	r3, r1, r3
 8011f8e:	4413      	add	r3, r2
 8011f90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f92:	4621      	mov	r1, r4
 8011f94:	fba2 ab01 	umull	sl, fp, r2, r1
 8011f98:	445b      	add	r3, fp
 8011f9a:	469b      	mov	fp, r3
 8011f9c:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8011fa0:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011fa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8011fa8:	f04f 0200 	mov.w	r2, #0
 8011fac:	f04f 0300 	mov.w	r3, #0
 8011fb0:	0a02      	lsrs	r2, r0, #8
 8011fb2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011fb6:	0a0b      	lsrs	r3, r1, #8
 8011fb8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8011fbc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011fc0:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8011fc4:	6139      	str	r1, [r7, #16]
 8011fc6:	f143 0300 	adc.w	r3, r3, #0
 8011fca:	617b      	str	r3, [r7, #20]
 8011fcc:	f04f 0200 	mov.w	r2, #0
 8011fd0:	f04f 0300 	mov.w	r3, #0
 8011fd4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011fd8:	4621      	mov	r1, r4
 8011fda:	0aca      	lsrs	r2, r1, #11
 8011fdc:	4629      	mov	r1, r5
 8011fde:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	0acb      	lsrs	r3, r1, #11
 8011fe6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8011fea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d305      	bcc.n	8011ffe <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8011ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff6:	f04f 0300 	mov.w	r3, #0
 8011ffa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8011ffe:	2300      	movs	r3, #0
 8012000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012004:	e041      	b.n	801208a <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8012006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801200a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801200c:	3302      	adds	r3, #2
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	4413      	add	r3, r2
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	60bb      	str	r3, [r7, #8]
 8012018:	60fa      	str	r2, [r7, #12]
 801201a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801201c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012020:	4622      	mov	r2, r4
 8012022:	fb02 f203 	mul.w	r2, r2, r3
 8012026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012028:	4629      	mov	r1, r5
 801202a:	fb01 f303 	mul.w	r3, r1, r3
 801202e:	4413      	add	r3, r2
 8012030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012032:	4621      	mov	r1, r4
 8012034:	fba2 8901 	umull	r8, r9, r2, r1
 8012038:	444b      	add	r3, r9
 801203a:	4699      	mov	r9, r3
 801203c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8012040:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8012044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012048:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 801204c:	6039      	str	r1, [r7, #0]
 801204e:	f143 0300 	adc.w	r3, r3, #0
 8012052:	607b      	str	r3, [r7, #4]
 8012054:	f04f 0200 	mov.w	r2, #0
 8012058:	f04f 0300 	mov.w	r3, #0
 801205c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012060:	4621      	mov	r1, r4
 8012062:	0a8a      	lsrs	r2, r1, #10
 8012064:	4629      	mov	r1, r5
 8012066:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801206a:	4629      	mov	r1, r5
 801206c:	0a8b      	lsrs	r3, r1, #10
 801206e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8012072:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012076:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207a:	3206      	adds	r2, #6
 801207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8012080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012084:	3301      	adds	r3, #1
 8012086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801208a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801208c:	7a9b      	ldrb	r3, [r3, #10]
 801208e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012092:	429a      	cmp	r2, r3
 8012094:	d3b7      	bcc.n	8012006 <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8012096:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801209a:	4618      	mov	r0, r3
 801209c:	3768      	adds	r7, #104	; 0x68
 801209e:	46bd      	mov	sp, r7
 80120a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080120a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80120ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	db0b      	blt.n	80120ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80120b6:	79fb      	ldrb	r3, [r7, #7]
 80120b8:	f003 021f 	and.w	r2, r3, #31
 80120bc:	4907      	ldr	r1, [pc, #28]	; (80120dc <__NVIC_EnableIRQ+0x38>)
 80120be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120c2:	095b      	lsrs	r3, r3, #5
 80120c4:	2001      	movs	r0, #1
 80120c6:	fa00 f202 	lsl.w	r2, r0, r2
 80120ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80120ce:	bf00      	nop
 80120d0:	370c      	adds	r7, #12
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	e000e100 	.word	0xe000e100

080120e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	4603      	mov	r3, r0
 80120e8:	6039      	str	r1, [r7, #0]
 80120ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80120ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	db0a      	blt.n	801210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	490c      	ldr	r1, [pc, #48]	; (801212c <__NVIC_SetPriority+0x4c>)
 80120fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120fe:	0112      	lsls	r2, r2, #4
 8012100:	b2d2      	uxtb	r2, r2
 8012102:	440b      	add	r3, r1
 8012104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012108:	e00a      	b.n	8012120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	b2da      	uxtb	r2, r3
 801210e:	4908      	ldr	r1, [pc, #32]	; (8012130 <__NVIC_SetPriority+0x50>)
 8012110:	79fb      	ldrb	r3, [r7, #7]
 8012112:	f003 030f 	and.w	r3, r3, #15
 8012116:	3b04      	subs	r3, #4
 8012118:	0112      	lsls	r2, r2, #4
 801211a:	b2d2      	uxtb	r2, r2
 801211c:	440b      	add	r3, r1
 801211e:	761a      	strb	r2, [r3, #24]
}
 8012120:	bf00      	nop
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr
 801212c:	e000e100 	.word	0xe000e100
 8012130:	e000ed00 	.word	0xe000ed00

08012134 <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4a53      	ldr	r2, [pc, #332]	; (8012290 <BTimer_Config+0x15c>)
 8012142:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8012144:	b672      	cpsid	i
}
 8012146:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012150:	d106      	bne.n	8012160 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8012152:	4b50      	ldr	r3, [pc, #320]	; (8012294 <BTimer_Config+0x160>)
 8012154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012156:	4a4f      	ldr	r2, [pc, #316]	; (8012294 <BTimer_Config+0x160>)
 8012158:	f043 0301 	orr.w	r3, r3, #1
 801215c:	6413      	str	r3, [r2, #64]	; 0x40
 801215e:	e022      	b.n	80121a6 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	4a4c      	ldr	r2, [pc, #304]	; (8012298 <BTimer_Config+0x164>)
 8012166:	4293      	cmp	r3, r2
 8012168:	d106      	bne.n	8012178 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 801216a:	4b4a      	ldr	r3, [pc, #296]	; (8012294 <BTimer_Config+0x160>)
 801216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801216e:	4a49      	ldr	r2, [pc, #292]	; (8012294 <BTimer_Config+0x160>)
 8012170:	f043 0302 	orr.w	r3, r3, #2
 8012174:	6413      	str	r3, [r2, #64]	; 0x40
 8012176:	e016      	b.n	80121a6 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4a47      	ldr	r2, [pc, #284]	; (801229c <BTimer_Config+0x168>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d106      	bne.n	8012190 <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8012182:	4b44      	ldr	r3, [pc, #272]	; (8012294 <BTimer_Config+0x160>)
 8012184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012186:	4a43      	ldr	r2, [pc, #268]	; (8012294 <BTimer_Config+0x160>)
 8012188:	f043 0304 	orr.w	r3, r3, #4
 801218c:	6413      	str	r3, [r2, #64]	; 0x40
 801218e:	e00a      	b.n	80121a6 <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4a42      	ldr	r2, [pc, #264]	; (80122a0 <BTimer_Config+0x16c>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d105      	bne.n	80121a6 <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 801219a:	4b3e      	ldr	r3, [pc, #248]	; (8012294 <BTimer_Config+0x160>)
 801219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801219e:	4a3d      	ldr	r2, [pc, #244]	; (8012294 <BTimer_Config+0x160>)
 80121a0:	f043 0308 	orr.w	r3, r3, #8
 80121a4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	791b      	ldrb	r3, [r3, #4]
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	d10c      	bne.n	80121c8 <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f022 0210 	bic.w	r2, r2, #16
 80121bc:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2200      	movs	r2, #0
 80121c4:	625a      	str	r2, [r3, #36]	; 0x24
 80121c6:	e00d      	b.n	80121e4 <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f042 0210 	orr.w	r2, r2, #16
 80121d6:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	689a      	ldr	r2, [r3, #8]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	3a01      	subs	r2, #1
 80121e2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	88db      	ldrh	r3, [r3, #6]
 80121e8:	1e5a      	subs	r2, r3, #1
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	689a      	ldr	r2, [r3, #8]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3a01      	subs	r2, #1
 80121fa:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f042 0201 	orr.w	r2, r2, #1
 801220a:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	68da      	ldr	r2, [r3, #12]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f042 0201 	orr.w	r2, r2, #1
 801221a:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012224:	d107      	bne.n	8012236 <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8012226:	201c      	movs	r0, #28
 8012228:	f7ff ff3c 	bl	80120a4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 801222c:	2103      	movs	r1, #3
 801222e:	201c      	movs	r0, #28
 8012230:	f7ff ff56 	bl	80120e0 <__NVIC_SetPriority>
 8012234:	e025      	b.n	8012282 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a17      	ldr	r2, [pc, #92]	; (8012298 <BTimer_Config+0x164>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d107      	bne.n	8012250 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8012240:	201d      	movs	r0, #29
 8012242:	f7ff ff2f 	bl	80120a4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 8012246:	2103      	movs	r1, #3
 8012248:	201d      	movs	r0, #29
 801224a:	f7ff ff49 	bl	80120e0 <__NVIC_SetPriority>
 801224e:	e018      	b.n	8012282 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a11      	ldr	r2, [pc, #68]	; (801229c <BTimer_Config+0x168>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d107      	bne.n	801226a <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 801225a:	201e      	movs	r0, #30
 801225c:	f7ff ff22 	bl	80120a4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 1);
 8012260:	2101      	movs	r1, #1
 8012262:	201e      	movs	r0, #30
 8012264:	f7ff ff3c 	bl	80120e0 <__NVIC_SetPriority>
 8012268:	e00b      	b.n	8012282 <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4a0c      	ldr	r2, [pc, #48]	; (80122a0 <BTimer_Config+0x16c>)
 8012270:	4293      	cmp	r3, r2
 8012272:	d106      	bne.n	8012282 <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 8012274:	2032      	movs	r0, #50	; 0x32
 8012276:	f7ff ff15 	bl	80120a4 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 801227a:	2104      	movs	r1, #4
 801227c:	2032      	movs	r0, #50	; 0x32
 801227e:	f7ff ff2f 	bl	80120e0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8012282:	b662      	cpsie	i
}
 8012284:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 8012286:	bf00      	nop
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	200040c4 	.word	0x200040c4
 8012294:	40023800 	.word	0x40023800
 8012298:	40000400 	.word	0x40000400
 801229c:	40000800 	.word	0x40000800
 80122a0:	40000c00 	.word	0x40000c00

080122a4 <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 80122a4:	b480      	push	{r7}
 80122a6:	af00      	add	r7, sp, #0
	 __NOP();
 80122a8:	bf00      	nop
}
 80122aa:	bf00      	nop
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr

080122b4 <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 80122b4:	b480      	push	{r7}
 80122b6:	af00      	add	r7, sp, #0
	 __NOP();
 80122b8:	bf00      	nop
}
 80122ba:	bf00      	nop
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr

080122c4 <BTimer5_Callback>:

__attribute__((weak)) void BTimer5_Callback(void){
 80122c4:	b480      	push	{r7}
 80122c6:	af00      	add	r7, sp, #0
	 __NOP();
 80122c8:	bf00      	nop
}
 80122ca:	bf00      	nop
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr

080122d4 <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80122d4:	b580      	push	{r7, lr}
 80122d6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80122d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80122dc:	691b      	ldr	r3, [r3, #16]
 80122de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80122e2:	f023 0301 	bic.w	r3, r3, #1
 80122e6:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 80122e8:	f7ef feb4 	bl	8002054 <BTimer2_Callback>

}
 80122ec:	bf00      	nop
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 80122f0:	b580      	push	{r7, lr}
 80122f2:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 80122f4:	4b04      	ldr	r3, [pc, #16]	; (8012308 <TIM3_IRQHandler+0x18>)
 80122f6:	691b      	ldr	r3, [r3, #16]
 80122f8:	4a03      	ldr	r2, [pc, #12]	; (8012308 <TIM3_IRQHandler+0x18>)
 80122fa:	f023 0301 	bic.w	r3, r3, #1
 80122fe:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8012300:	f7ff ffd0 	bl	80122a4 <BTimer3_Callback>
}
 8012304:	bf00      	nop
 8012306:	bd80      	pop	{r7, pc}
 8012308:	40000400 	.word	0x40000400

0801230c <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8012310:	4b04      	ldr	r3, [pc, #16]	; (8012324 <TIM4_IRQHandler+0x18>)
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	4a03      	ldr	r2, [pc, #12]	; (8012324 <TIM4_IRQHandler+0x18>)
 8012316:	f023 0301 	bic.w	r3, r3, #1
 801231a:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 801231c:	f7ff ffca 	bl	80122b4 <BTimer4_Callback>
}
 8012320:	bf00      	nop
 8012322:	bd80      	pop	{r7, pc}
 8012324:	40000800 	.word	0x40000800

08012328 <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 8012328:	b580      	push	{r7, lr}
 801232a:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 801232c:	4b04      	ldr	r3, [pc, #16]	; (8012340 <TIM5_IRQHandler+0x18>)
 801232e:	691b      	ldr	r3, [r3, #16]
 8012330:	4a03      	ldr	r2, [pc, #12]	; (8012340 <TIM5_IRQHandler+0x18>)
 8012332:	f023 0301 	bic.w	r3, r3, #1
 8012336:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 8012338:	f7ff ffc4 	bl	80122c4 <BTimer5_Callback>
}
 801233c:	bf00      	nop
 801233e:	bd80      	pop	{r7, pc}
 8012340:	40000c00 	.word	0x40000c00

08012344 <__NVIC_EnableIRQ>:
{
 8012344:	b480      	push	{r7}
 8012346:	b083      	sub	sp, #12
 8012348:	af00      	add	r7, sp, #0
 801234a:	4603      	mov	r3, r0
 801234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012352:	2b00      	cmp	r3, #0
 8012354:	db0b      	blt.n	801236e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012356:	79fb      	ldrb	r3, [r7, #7]
 8012358:	f003 021f 	and.w	r2, r3, #31
 801235c:	4907      	ldr	r1, [pc, #28]	; (801237c <__NVIC_EnableIRQ+0x38>)
 801235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012362:	095b      	lsrs	r3, r3, #5
 8012364:	2001      	movs	r0, #1
 8012366:	fa00 f202 	lsl.w	r2, r0, r2
 801236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801236e:	bf00      	nop
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	e000e100 	.word	0xe000e100

08012380 <exti_Config>:
#include "GPIOxDriver.h"


GPIO_Handler_t 	handlerExtiPIN = {0};

void exti_Config(EXTI_Config_t	*extiConfig){
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]

	/* Se activa la señal de reloj para SYSCFG*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8012388:	4b77      	ldr	r3, [pc, #476]	; (8012568 <exti_Config+0x1e8>)
 801238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801238c:	4a76      	ldr	r2, [pc, #472]	; (8012568 <exti_Config+0x1e8>)
 801238e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012392:	6453      	str	r3, [r2, #68]	; 0x44

	/* Configuramos el PINX como entrada digital */
	configExtiPin(extiConfig);
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fa55 	bl	8012844 <configExtiPin>


	/* Se conecta la entrada del PIN configurado al EXTI correspondiente */
	if (extiConfig->EXTIx <= EXTI3){
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	2b03      	cmp	r3, #3
 80123a0:	d80e      	bhi.n	80123c0 <exti_Config+0x40>
		SYSCFG->EXTICR[0] |= (extiConfig->pinPort << (extiConfig->EXTIx)*4);
 80123a2:	4b72      	ldr	r3, [pc, #456]	; (801256c <exti_Config+0x1ec>)
 80123a4:	689b      	ldr	r3, [r3, #8]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	7852      	ldrb	r2, [r2, #1]
 80123aa:	4611      	mov	r1, r2
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	7812      	ldrb	r2, [r2, #0]
 80123b0:	0092      	lsls	r2, r2, #2
 80123b2:	fa01 f202 	lsl.w	r2, r1, r2
 80123b6:	4611      	mov	r1, r2
 80123b8:	4a6c      	ldr	r2, [pc, #432]	; (801256c <exti_Config+0x1ec>)
 80123ba:	430b      	orrs	r3, r1
 80123bc:	6093      	str	r3, [r2, #8]
 80123be:	e046      	b.n	801244e <exti_Config+0xce>
	}
	else if ((extiConfig->EXTIx >= EXTI4 && extiConfig->EXTIx <= EXTI7)){
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d913      	bls.n	80123f0 <exti_Config+0x70>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	2b07      	cmp	r3, #7
 80123ce:	d80f      	bhi.n	80123f0 <exti_Config+0x70>
		SYSCFG->EXTICR[1] |= (extiConfig->pinPort << (extiConfig->EXTIx-4)*4);
 80123d0:	4b66      	ldr	r3, [pc, #408]	; (801256c <exti_Config+0x1ec>)
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	7852      	ldrb	r2, [r2, #1]
 80123d8:	4611      	mov	r1, r2
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	7812      	ldrb	r2, [r2, #0]
 80123de:	3a04      	subs	r2, #4
 80123e0:	0092      	lsls	r2, r2, #2
 80123e2:	fa01 f202 	lsl.w	r2, r1, r2
 80123e6:	4611      	mov	r1, r2
 80123e8:	4a60      	ldr	r2, [pc, #384]	; (801256c <exti_Config+0x1ec>)
 80123ea:	430b      	orrs	r3, r1
 80123ec:	60d3      	str	r3, [r2, #12]
 80123ee:	e02e      	b.n	801244e <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI8 && extiConfig->EXTIx <= EXTI11){
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b07      	cmp	r3, #7
 80123f6:	d913      	bls.n	8012420 <exti_Config+0xa0>
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	2b0b      	cmp	r3, #11
 80123fe:	d80f      	bhi.n	8012420 <exti_Config+0xa0>
		SYSCFG->EXTICR[2] |= (extiConfig->pinPort << (extiConfig->EXTIx-8)*4);
 8012400:	4b5a      	ldr	r3, [pc, #360]	; (801256c <exti_Config+0x1ec>)
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	7852      	ldrb	r2, [r2, #1]
 8012408:	4611      	mov	r1, r2
 801240a:	687a      	ldr	r2, [r7, #4]
 801240c:	7812      	ldrb	r2, [r2, #0]
 801240e:	3a08      	subs	r2, #8
 8012410:	0092      	lsls	r2, r2, #2
 8012412:	fa01 f202 	lsl.w	r2, r1, r2
 8012416:	4611      	mov	r1, r2
 8012418:	4a54      	ldr	r2, [pc, #336]	; (801256c <exti_Config+0x1ec>)
 801241a:	430b      	orrs	r3, r1
 801241c:	6113      	str	r3, [r2, #16]
 801241e:	e016      	b.n	801244e <exti_Config+0xce>
	}
	else if (extiConfig->EXTIx >= EXTI12 && extiConfig->EXTIx <= EXTI15){
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	2b0b      	cmp	r3, #11
 8012426:	d912      	bls.n	801244e <exti_Config+0xce>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	2b0f      	cmp	r3, #15
 801242e:	d80e      	bhi.n	801244e <exti_Config+0xce>
		SYSCFG->EXTICR[3] |= (extiConfig->pinPort << (extiConfig->EXTIx-12)*4);
 8012430:	4b4e      	ldr	r3, [pc, #312]	; (801256c <exti_Config+0x1ec>)
 8012432:	695b      	ldr	r3, [r3, #20]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	7852      	ldrb	r2, [r2, #1]
 8012438:	4611      	mov	r1, r2
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	7812      	ldrb	r2, [r2, #0]
 801243e:	3a0c      	subs	r2, #12
 8012440:	0092      	lsls	r2, r2, #2
 8012442:	fa01 f202 	lsl.w	r2, r1, r2
 8012446:	4611      	mov	r1, r2
 8012448:	4a48      	ldr	r2, [pc, #288]	; (801256c <exti_Config+0x1ec>)
 801244a:	430b      	orrs	r3, r1
 801244c:	6153      	str	r3, [r2, #20]
	}

	/* Configurar el tipo de flanco según el PIN utilizado*/
	switch(extiConfig->triggerMode){
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	78db      	ldrb	r3, [r3, #3]
 8012452:	2b02      	cmp	r3, #2
 8012454:	d01e      	beq.n	8012494 <exti_Config+0x114>
 8012456:	2b02      	cmp	r3, #2
 8012458:	dc33      	bgt.n	80124c2 <exti_Config+0x142>
 801245a:	2b00      	cmp	r3, #0
 801245c:	d002      	beq.n	8012464 <exti_Config+0xe4>
 801245e:	2b01      	cmp	r3, #1
 8012460:	d00c      	beq.n	801247c <exti_Config+0xfc>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
		break;
	}
	default:
	{
		break;
 8012462:	e02e      	b.n	80124c2 <exti_Config+0x142>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8012464:	4b42      	ldr	r3, [pc, #264]	; (8012570 <exti_Config+0x1f0>)
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	7812      	ldrb	r2, [r2, #0]
 801246c:	4611      	mov	r1, r2
 801246e:	2201      	movs	r2, #1
 8012470:	408a      	lsls	r2, r1
 8012472:	4611      	mov	r1, r2
 8012474:	4a3e      	ldr	r2, [pc, #248]	; (8012570 <exti_Config+0x1f0>)
 8012476:	430b      	orrs	r3, r1
 8012478:	6093      	str	r3, [r2, #8]
		break;
 801247a:	e023      	b.n	80124c4 <exti_Config+0x144>
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 801247c:	4b3c      	ldr	r3, [pc, #240]	; (8012570 <exti_Config+0x1f0>)
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	7812      	ldrb	r2, [r2, #0]
 8012484:	4611      	mov	r1, r2
 8012486:	2201      	movs	r2, #1
 8012488:	408a      	lsls	r2, r1
 801248a:	4611      	mov	r1, r2
 801248c:	4a38      	ldr	r2, [pc, #224]	; (8012570 <exti_Config+0x1f0>)
 801248e:	430b      	orrs	r3, r1
 8012490:	60d3      	str	r3, [r2, #12]
		break;
 8012492:	e017      	b.n	80124c4 <exti_Config+0x144>
		EXTI->RTSR |= (0b1 << extiConfig->EXTIx);
 8012494:	4b36      	ldr	r3, [pc, #216]	; (8012570 <exti_Config+0x1f0>)
 8012496:	689b      	ldr	r3, [r3, #8]
 8012498:	687a      	ldr	r2, [r7, #4]
 801249a:	7812      	ldrb	r2, [r2, #0]
 801249c:	4611      	mov	r1, r2
 801249e:	2201      	movs	r2, #1
 80124a0:	408a      	lsls	r2, r1
 80124a2:	4611      	mov	r1, r2
 80124a4:	4a32      	ldr	r2, [pc, #200]	; (8012570 <exti_Config+0x1f0>)
 80124a6:	430b      	orrs	r3, r1
 80124a8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1 << extiConfig->EXTIx);
 80124aa:	4b31      	ldr	r3, [pc, #196]	; (8012570 <exti_Config+0x1f0>)
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	7812      	ldrb	r2, [r2, #0]
 80124b2:	4611      	mov	r1, r2
 80124b4:	2201      	movs	r2, #1
 80124b6:	408a      	lsls	r2, r1
 80124b8:	4611      	mov	r1, r2
 80124ba:	4a2d      	ldr	r2, [pc, #180]	; (8012570 <exti_Config+0x1f0>)
 80124bc:	430b      	orrs	r3, r1
 80124be:	60d3      	str	r3, [r2, #12]
		break;
 80124c0:	e000      	b.n	80124c4 <exti_Config+0x144>
		break;
 80124c2:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80124c4:	b672      	cpsid	i
}
 80124c6:	bf00      	nop
	}
	}

	__disable_irq();
	/* Se activa la interrupción para el EXTI configurado */
	EXTI->IMR |= (0b1 << extiConfig->EXTIx);
 80124c8:	4b29      	ldr	r3, [pc, #164]	; (8012570 <exti_Config+0x1f0>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	7812      	ldrb	r2, [r2, #0]
 80124d0:	4611      	mov	r1, r2
 80124d2:	2201      	movs	r2, #1
 80124d4:	408a      	lsls	r2, r1
 80124d6:	4611      	mov	r1, r2
 80124d8:	4a25      	ldr	r2, [pc, #148]	; (8012570 <exti_Config+0x1f0>)
 80124da:	430b      	orrs	r3, r1
 80124dc:	6013      	str	r3, [r2, #0]

	/* Se matricula la interrupción correspondiente en el NVIC */

	if (extiConfig->EXTIx == EXTI0){
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d103      	bne.n	80124ee <exti_Config+0x16e>
		__NVIC_EnableIRQ(EXTI0_IRQn);
 80124e6:	2006      	movs	r0, #6
 80124e8:	f7ff ff2c 	bl	8012344 <__NVIC_EnableIRQ>
 80124ec:	e036      	b.n	801255c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI1){
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d103      	bne.n	80124fe <exti_Config+0x17e>
		__NVIC_EnableIRQ(EXTI1_IRQn);
 80124f6:	2007      	movs	r0, #7
 80124f8:	f7ff ff24 	bl	8012344 <__NVIC_EnableIRQ>
 80124fc:	e02e      	b.n	801255c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI2){
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	2b02      	cmp	r3, #2
 8012504:	d103      	bne.n	801250e <exti_Config+0x18e>
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8012506:	2008      	movs	r0, #8
 8012508:	f7ff ff1c 	bl	8012344 <__NVIC_EnableIRQ>
 801250c:	e026      	b.n	801255c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI3){
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b03      	cmp	r3, #3
 8012514:	d103      	bne.n	801251e <exti_Config+0x19e>
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8012516:	2009      	movs	r0, #9
 8012518:	f7ff ff14 	bl	8012344 <__NVIC_EnableIRQ>
 801251c:	e01e      	b.n	801255c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx == EXTI4){
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	2b04      	cmp	r3, #4
 8012524:	d103      	bne.n	801252e <exti_Config+0x1ae>
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8012526:	200a      	movs	r0, #10
 8012528:	f7ff ff0c 	bl	8012344 <__NVIC_EnableIRQ>
 801252c:	e016      	b.n	801255c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI5 && extiConfig->EXTIx <= EXTI9){
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b04      	cmp	r3, #4
 8012534:	d907      	bls.n	8012546 <exti_Config+0x1c6>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	2b09      	cmp	r3, #9
 801253c:	d803      	bhi.n	8012546 <exti_Config+0x1c6>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 801253e:	2017      	movs	r0, #23
 8012540:	f7ff ff00 	bl	8012344 <__NVIC_EnableIRQ>
 8012544:	e00a      	b.n	801255c <exti_Config+0x1dc>
	}
	else if (extiConfig->EXTIx >= EXTI10 && extiConfig->EXTIx <= EXTI15){
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	2b09      	cmp	r3, #9
 801254c:	d906      	bls.n	801255c <exti_Config+0x1dc>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2b0f      	cmp	r3, #15
 8012554:	d802      	bhi.n	801255c <exti_Config+0x1dc>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8012556:	2028      	movs	r0, #40	; 0x28
 8012558:	f7ff fef4 	bl	8012344 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 801255c:	b662      	cpsie	i
}
 801255e:	bf00      	nop

	/* Se reactican las interrupciones globales */
	__enable_irq();


}
 8012560:	bf00      	nop
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	40023800 	.word	0x40023800
 801256c:	40013800 	.word	0x40013800
 8012570:	40013c00 	.word	0x40013c00

08012574 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8012574:	b580      	push	{r7, lr}
 8012576:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0){
 8012578:	4b07      	ldr	r3, [pc, #28]	; (8012598 <EXTI0_IRQHandler+0x24>)
 801257a:	695b      	ldr	r3, [r3, #20]
 801257c:	f003 0301 	and.w	r3, r3, #1
 8012580:	2b00      	cmp	r3, #0
 8012582:	d007      	beq.n	8012594 <EXTI0_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR0;
 8012584:	4b04      	ldr	r3, [pc, #16]	; (8012598 <EXTI0_IRQHandler+0x24>)
 8012586:	695b      	ldr	r3, [r3, #20]
 8012588:	4a03      	ldr	r2, [pc, #12]	; (8012598 <EXTI0_IRQHandler+0x24>)
 801258a:	f043 0301 	orr.w	r3, r3, #1
 801258e:	6153      	str	r3, [r2, #20]
		Exti0_Callback();
 8012590:	f000 f8f0 	bl	8012774 <Exti0_Callback>
	}
}
 8012594:	bf00      	nop
 8012596:	bd80      	pop	{r7, pc}
 8012598:	40013c00 	.word	0x40013c00

0801259c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 801259c:	b580      	push	{r7, lr}
 801259e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1){
 80125a0:	4b07      	ldr	r3, [pc, #28]	; (80125c0 <EXTI1_IRQHandler+0x24>)
 80125a2:	695b      	ldr	r3, [r3, #20]
 80125a4:	f003 0302 	and.w	r3, r3, #2
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d007      	beq.n	80125bc <EXTI1_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR1;
 80125ac:	4b04      	ldr	r3, [pc, #16]	; (80125c0 <EXTI1_IRQHandler+0x24>)
 80125ae:	695b      	ldr	r3, [r3, #20]
 80125b0:	4a03      	ldr	r2, [pc, #12]	; (80125c0 <EXTI1_IRQHandler+0x24>)
 80125b2:	f043 0302 	orr.w	r3, r3, #2
 80125b6:	6153      	str	r3, [r2, #20]
		Exti1_Callback();
 80125b8:	f000 f8e4 	bl	8012784 <Exti1_Callback>
	}
}
 80125bc:	bf00      	nop
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	40013c00 	.word	0x40013c00

080125c4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80125c4:	b580      	push	{r7, lr}
 80125c6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2){
 80125c8:	4b07      	ldr	r3, [pc, #28]	; (80125e8 <EXTI2_IRQHandler+0x24>)
 80125ca:	695b      	ldr	r3, [r3, #20]
 80125cc:	f003 0304 	and.w	r3, r3, #4
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d007      	beq.n	80125e4 <EXTI2_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR2;
 80125d4:	4b04      	ldr	r3, [pc, #16]	; (80125e8 <EXTI2_IRQHandler+0x24>)
 80125d6:	695b      	ldr	r3, [r3, #20]
 80125d8:	4a03      	ldr	r2, [pc, #12]	; (80125e8 <EXTI2_IRQHandler+0x24>)
 80125da:	f043 0304 	orr.w	r3, r3, #4
 80125de:	6153      	str	r3, [r2, #20]
		Exti2_Callback();
 80125e0:	f000 f8d8 	bl	8012794 <Exti2_Callback>
	}
}
 80125e4:	bf00      	nop
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	40013c00 	.word	0x40013c00

080125ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80125ec:	b580      	push	{r7, lr}
 80125ee:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR3){
 80125f0:	4b07      	ldr	r3, [pc, #28]	; (8012610 <EXTI3_IRQHandler+0x24>)
 80125f2:	695b      	ldr	r3, [r3, #20]
 80125f4:	f003 0308 	and.w	r3, r3, #8
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d007      	beq.n	801260c <EXTI3_IRQHandler+0x20>
		EXTI->PR |= EXTI_PR_PR3;
 80125fc:	4b04      	ldr	r3, [pc, #16]	; (8012610 <EXTI3_IRQHandler+0x24>)
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	4a03      	ldr	r2, [pc, #12]	; (8012610 <EXTI3_IRQHandler+0x24>)
 8012602:	f043 0308 	orr.w	r3, r3, #8
 8012606:	6153      	str	r3, [r2, #20]
		Exti3_Callback();
 8012608:	f000 f8cc 	bl	80127a4 <Exti3_Callback>
	}
}
 801260c:	bf00      	nop
 801260e:	bd80      	pop	{r7, pc}
 8012610:	40013c00 	.word	0x40013c00

08012614 <EXTI9_5_IRQHandler>:
//		EXTI->PR |= EXTI_PR_PR4;
//		Exti4_Callback();
//	}
//}

void EXTI9_5_IRQHandler(void){
 8012614:	b580      	push	{r7, lr}
 8012616:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5){
 8012618:	4b25      	ldr	r3, [pc, #148]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 801261a:	695b      	ldr	r3, [r3, #20]
 801261c:	f003 0320 	and.w	r3, r3, #32
 8012620:	2b00      	cmp	r3, #0
 8012622:	d008      	beq.n	8012636 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR5;
 8012624:	4b22      	ldr	r3, [pc, #136]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012626:	695b      	ldr	r3, [r3, #20]
 8012628:	4a21      	ldr	r2, [pc, #132]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 801262a:	f043 0320 	orr.w	r3, r3, #32
 801262e:	6153      	str	r3, [r2, #20]
		Exti5_Callback();
 8012630:	f000 f8c0 	bl	80127b4 <Exti5_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR9){
		EXTI->PR |= EXTI_PR_PR9;
		Exti9_Callback();
	}
}
 8012634:	e03a      	b.n	80126ac <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR6){
 8012636:	4b1e      	ldr	r3, [pc, #120]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012638:	695b      	ldr	r3, [r3, #20]
 801263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801263e:	2b00      	cmp	r3, #0
 8012640:	d008      	beq.n	8012654 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8012642:	4b1b      	ldr	r3, [pc, #108]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012644:	695b      	ldr	r3, [r3, #20]
 8012646:	4a1a      	ldr	r2, [pc, #104]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801264c:	6153      	str	r3, [r2, #20]
		Exti6_Callback();
 801264e:	f000 f8b9 	bl	80127c4 <Exti6_Callback>
}
 8012652:	e02b      	b.n	80126ac <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR7){
 8012654:	4b16      	ldr	r3, [pc, #88]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801265c:	2b00      	cmp	r3, #0
 801265e:	d008      	beq.n	8012672 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8012660:	4b13      	ldr	r3, [pc, #76]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	4a12      	ldr	r2, [pc, #72]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801266a:	6153      	str	r3, [r2, #20]
		Exti7_Callback();
 801266c:	f000 fcdc 	bl	8013028 <Exti7_Callback>
}
 8012670:	e01c      	b.n	80126ac <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR8){
 8012672:	4b0f      	ldr	r3, [pc, #60]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012674:	695b      	ldr	r3, [r3, #20]
 8012676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801267a:	2b00      	cmp	r3, #0
 801267c:	d008      	beq.n	8012690 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 801267e:	4b0c      	ldr	r3, [pc, #48]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012680:	695b      	ldr	r3, [r3, #20]
 8012682:	4a0b      	ldr	r2, [pc, #44]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012688:	6153      	str	r3, [r2, #20]
		Exti8_Callback();
 801268a:	f000 f8a3 	bl	80127d4 <Exti8_Callback>
}
 801268e:	e00d      	b.n	80126ac <EXTI9_5_IRQHandler+0x98>
	else if (EXTI->PR & EXTI_PR_PR9){
 8012690:	4b07      	ldr	r3, [pc, #28]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 8012692:	695b      	ldr	r3, [r3, #20]
 8012694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012698:	2b00      	cmp	r3, #0
 801269a:	d007      	beq.n	80126ac <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 801269c:	4b04      	ldr	r3, [pc, #16]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 801269e:	695b      	ldr	r3, [r3, #20]
 80126a0:	4a03      	ldr	r2, [pc, #12]	; (80126b0 <EXTI9_5_IRQHandler+0x9c>)
 80126a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80126a6:	6153      	str	r3, [r2, #20]
		Exti9_Callback();
 80126a8:	f000 f89c 	bl	80127e4 <Exti9_Callback>
}
 80126ac:	bf00      	nop
 80126ae:	bd80      	pop	{r7, pc}
 80126b0:	40013c00 	.word	0x40013c00

080126b4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR10){
 80126b8:	4b2d      	ldr	r3, [pc, #180]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126ba:	695b      	ldr	r3, [r3, #20]
 80126bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d008      	beq.n	80126d6 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR10;
 80126c4:	4b2a      	ldr	r3, [pc, #168]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126c6:	695b      	ldr	r3, [r3, #20]
 80126c8:	4a29      	ldr	r2, [pc, #164]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80126ce:	6153      	str	r3, [r2, #20]
		Exti10_Callback();
 80126d0:	f000 f890 	bl	80127f4 <Exti10_Callback>
	}
	else if (EXTI->PR & EXTI_PR_PR15){
		EXTI->PR |= EXTI_PR_PR15;
		Exti15_Callback();
	}
}
 80126d4:	e049      	b.n	801276a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR11){
 80126d6:	4b26      	ldr	r3, [pc, #152]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126d8:	695b      	ldr	r3, [r3, #20]
 80126da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d008      	beq.n	80126f4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80126e2:	4b23      	ldr	r3, [pc, #140]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126e4:	695b      	ldr	r3, [r3, #20]
 80126e6:	4a22      	ldr	r2, [pc, #136]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80126ec:	6153      	str	r3, [r2, #20]
		Exti11_Callback();
 80126ee:	f000 f889 	bl	8012804 <Exti11_Callback>
}
 80126f2:	e03a      	b.n	801276a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR12){
 80126f4:	4b1e      	ldr	r3, [pc, #120]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 80126f6:	695b      	ldr	r3, [r3, #20]
 80126f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d008      	beq.n	8012712 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8012700:	4b1b      	ldr	r3, [pc, #108]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012702:	695b      	ldr	r3, [r3, #20]
 8012704:	4a1a      	ldr	r2, [pc, #104]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801270a:	6153      	str	r3, [r2, #20]
		Exti12_Callback();
 801270c:	f000 f882 	bl	8012814 <Exti12_Callback>
}
 8012710:	e02b      	b.n	801276a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR13){
 8012712:	4b17      	ldr	r3, [pc, #92]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012714:	695b      	ldr	r3, [r3, #20]
 8012716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801271a:	2b00      	cmp	r3, #0
 801271c:	d008      	beq.n	8012730 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 801271e:	4b14      	ldr	r3, [pc, #80]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012720:	695b      	ldr	r3, [r3, #20]
 8012722:	4a13      	ldr	r2, [pc, #76]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012728:	6153      	str	r3, [r2, #20]
		Exti13_Callback();
 801272a:	f000 fc95 	bl	8013058 <Exti13_Callback>
}
 801272e:	e01c      	b.n	801276a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR14){
 8012730:	4b0f      	ldr	r3, [pc, #60]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012732:	695b      	ldr	r3, [r3, #20]
 8012734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012738:	2b00      	cmp	r3, #0
 801273a:	d008      	beq.n	801274e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 801273c:	4b0c      	ldr	r3, [pc, #48]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 801273e:	695b      	ldr	r3, [r3, #20]
 8012740:	4a0b      	ldr	r2, [pc, #44]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012746:	6153      	str	r3, [r2, #20]
		Exti14_Callback();
 8012748:	f000 f86c 	bl	8012824 <Exti14_Callback>
}
 801274c:	e00d      	b.n	801276a <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR15){
 801274e:	4b08      	ldr	r3, [pc, #32]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012750:	695b      	ldr	r3, [r3, #20]
 8012752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012756:	2b00      	cmp	r3, #0
 8012758:	d007      	beq.n	801276a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 801275a:	4b05      	ldr	r3, [pc, #20]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 801275c:	695b      	ldr	r3, [r3, #20]
 801275e:	4a04      	ldr	r2, [pc, #16]	; (8012770 <EXTI15_10_IRQHandler+0xbc>)
 8012760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012764:	6153      	str	r3, [r2, #20]
		Exti15_Callback();
 8012766:	f000 f865 	bl	8012834 <Exti15_Callback>
}
 801276a:	bf00      	nop
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	40013c00 	.word	0x40013c00

08012774 <Exti0_Callback>:


__attribute__ ((weak)) void Exti0_Callback(void){
 8012774:	b480      	push	{r7}
 8012776:	af00      	add	r7, sp, #0
	__NOP();
 8012778:	bf00      	nop
}
 801277a:	bf00      	nop
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr

08012784 <Exti1_Callback>:
__attribute__ ((weak)) void Exti1_Callback(void){
 8012784:	b480      	push	{r7}
 8012786:	af00      	add	r7, sp, #0
	__NOP();
 8012788:	bf00      	nop
}
 801278a:	bf00      	nop
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <Exti2_Callback>:
__attribute__ ((weak)) void Exti2_Callback(void){
 8012794:	b480      	push	{r7}
 8012796:	af00      	add	r7, sp, #0
	__NOP();
 8012798:	bf00      	nop
}
 801279a:	bf00      	nop
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <Exti3_Callback>:
__attribute__ ((weak)) void Exti3_Callback(void){
 80127a4:	b480      	push	{r7}
 80127a6:	af00      	add	r7, sp, #0
	__NOP();
 80127a8:	bf00      	nop
}
 80127aa:	bf00      	nop
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr

080127b4 <Exti5_Callback>:
__attribute__ ((weak)) void Exti4_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti5_Callback(void){
 80127b4:	b480      	push	{r7}
 80127b6:	af00      	add	r7, sp, #0
	__NOP();
 80127b8:	bf00      	nop
}
 80127ba:	bf00      	nop
 80127bc:	46bd      	mov	sp, r7
 80127be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c2:	4770      	bx	lr

080127c4 <Exti6_Callback>:
__attribute__ ((weak)) void Exti6_Callback(void){
 80127c4:	b480      	push	{r7}
 80127c6:	af00      	add	r7, sp, #0
	__NOP();
 80127c8:	bf00      	nop
}
 80127ca:	bf00      	nop
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <Exti8_Callback>:
__attribute__ ((weak)) void Exti7_Callback(void){
	__NOP();
}

__attribute__ ((weak)) void Exti8_Callback(void){
 80127d4:	b480      	push	{r7}
 80127d6:	af00      	add	r7, sp, #0
	__NOP();
 80127d8:	bf00      	nop
}
 80127da:	bf00      	nop
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <Exti9_Callback>:
__attribute__ ((weak)) void Exti9_Callback(void){
 80127e4:	b480      	push	{r7}
 80127e6:	af00      	add	r7, sp, #0
	__NOP();
 80127e8:	bf00      	nop
}
 80127ea:	bf00      	nop
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <Exti10_Callback>:
__attribute__ ((weak)) void Exti10_Callback(void){
 80127f4:	b480      	push	{r7}
 80127f6:	af00      	add	r7, sp, #0
	__NOP();
 80127f8:	bf00      	nop
}
 80127fa:	bf00      	nop
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr

08012804 <Exti11_Callback>:
__attribute__ ((weak)) void Exti11_Callback(void){
 8012804:	b480      	push	{r7}
 8012806:	af00      	add	r7, sp, #0
	__NOP();
 8012808:	bf00      	nop
}
 801280a:	bf00      	nop
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr

08012814 <Exti12_Callback>:
__attribute__ ((weak)) void Exti12_Callback(void){
 8012814:	b480      	push	{r7}
 8012816:	af00      	add	r7, sp, #0
	__NOP();
 8012818:	bf00      	nop
}
 801281a:	bf00      	nop
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <Exti14_Callback>:
__attribute__ ((weak)) void Exti13_Callback(void){
	__NOP();
}
__attribute__ ((weak)) void Exti14_Callback(void){
 8012824:	b480      	push	{r7}
 8012826:	af00      	add	r7, sp, #0
	__NOP();
 8012828:	bf00      	nop
}
 801282a:	bf00      	nop
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <Exti15_Callback>:
__attribute__ ((weak)) void Exti15_Callback(void){
 8012834:	b480      	push	{r7}
 8012836:	af00      	add	r7, sp, #0
	__NOP();
 8012838:	bf00      	nop
}
 801283a:	bf00      	nop
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr

08012844 <configExtiPin>:

void configExtiPin(EXTI_Config_t *extiConfig){
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
	switch (extiConfig->pinPort){
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	785b      	ldrb	r3, [r3, #1]
 8012850:	2b07      	cmp	r3, #7
 8012852:	d82b      	bhi.n	80128ac <configExtiPin+0x68>
 8012854:	a201      	add	r2, pc, #4	; (adr r2, 801285c <configExtiPin+0x18>)
 8012856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801285a:	bf00      	nop
 801285c:	0801287d 	.word	0x0801287d
 8012860:	08012885 	.word	0x08012885
 8012864:	0801288d 	.word	0x0801288d
 8012868:	08012895 	.word	0x08012895
 801286c:	0801289d 	.word	0x0801289d
 8012870:	080128ad 	.word	0x080128ad
 8012874:	080128ad 	.word	0x080128ad
 8012878:	080128a5 	.word	0x080128a5
	case PA:
	{
		handlerExtiPIN.pGPIOx = GPIOA;
 801287c:	4b18      	ldr	r3, [pc, #96]	; (80128e0 <configExtiPin+0x9c>)
 801287e:	4a19      	ldr	r2, [pc, #100]	; (80128e4 <configExtiPin+0xa0>)
 8012880:	601a      	str	r2, [r3, #0]
		break;
 8012882:	e014      	b.n	80128ae <configExtiPin+0x6a>
	}
	case PB:
	{
		handlerExtiPIN.pGPIOx = GPIOB;
 8012884:	4b16      	ldr	r3, [pc, #88]	; (80128e0 <configExtiPin+0x9c>)
 8012886:	4a18      	ldr	r2, [pc, #96]	; (80128e8 <configExtiPin+0xa4>)
 8012888:	601a      	str	r2, [r3, #0]
		break;
 801288a:	e010      	b.n	80128ae <configExtiPin+0x6a>
	}
	case PC:
	{
		handlerExtiPIN.pGPIOx = GPIOC;
 801288c:	4b14      	ldr	r3, [pc, #80]	; (80128e0 <configExtiPin+0x9c>)
 801288e:	4a17      	ldr	r2, [pc, #92]	; (80128ec <configExtiPin+0xa8>)
 8012890:	601a      	str	r2, [r3, #0]
		break;
 8012892:	e00c      	b.n	80128ae <configExtiPin+0x6a>
	}
	case PD:
	{
		handlerExtiPIN.pGPIOx = GPIOD;
 8012894:	4b12      	ldr	r3, [pc, #72]	; (80128e0 <configExtiPin+0x9c>)
 8012896:	4a16      	ldr	r2, [pc, #88]	; (80128f0 <configExtiPin+0xac>)
 8012898:	601a      	str	r2, [r3, #0]
		break;
 801289a:	e008      	b.n	80128ae <configExtiPin+0x6a>
	}
	case PE:
	{
		handlerExtiPIN.pGPIOx = GPIOE;
 801289c:	4b10      	ldr	r3, [pc, #64]	; (80128e0 <configExtiPin+0x9c>)
 801289e:	4a15      	ldr	r2, [pc, #84]	; (80128f4 <configExtiPin+0xb0>)
 80128a0:	601a      	str	r2, [r3, #0]
		break;
 80128a2:	e004      	b.n	80128ae <configExtiPin+0x6a>
	}
	case PH:
	{
		handlerExtiPIN.pGPIOx = GPIOH;
 80128a4:	4b0e      	ldr	r3, [pc, #56]	; (80128e0 <configExtiPin+0x9c>)
 80128a6:	4a14      	ldr	r2, [pc, #80]	; (80128f8 <configExtiPin+0xb4>)
 80128a8:	601a      	str	r2, [r3, #0]
		break;
 80128aa:	e000      	b.n	80128ae <configExtiPin+0x6a>
	}
	default:
	{
		break;
 80128ac:	bf00      	nop
	}
	}

	handlerExtiPIN.GPIO_PinConfig.GPIO_PinNumber 		= extiConfig->EXTIx;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	781a      	ldrb	r2, [r3, #0]
 80128b2:	4b0b      	ldr	r3, [pc, #44]	; (80128e0 <configExtiPin+0x9c>)
 80128b4:	711a      	strb	r2, [r3, #4]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 80128b6:	4b0a      	ldr	r3, [pc, #40]	; (80128e0 <configExtiPin+0x9c>)
 80128b8:	2200      	movs	r2, #0
 80128ba:	715a      	strb	r2, [r3, #5]
	handlerExtiPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= extiConfig->pinPUPD_Mode;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	789a      	ldrb	r2, [r3, #2]
 80128c0:	4b07      	ldr	r3, [pc, #28]	; (80128e0 <configExtiPin+0x9c>)
 80128c2:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerExtiPIN);
 80128c4:	4806      	ldr	r0, [pc, #24]	; (80128e0 <configExtiPin+0x9c>)
 80128c6:	f000 f819 	bl	80128fc <GPIO_Config>
	extiConfig->handlerEXTIPin = handlerExtiPIN;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	4a04      	ldr	r2, [pc, #16]	; (80128e0 <configExtiPin+0x9c>)
 80128ce:	3304      	adds	r3, #4
 80128d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80128d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80128d6:	bf00      	nop
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	200040c8 	.word	0x200040c8
 80128e4:	40020000 	.word	0x40020000
 80128e8:	40020400 	.word	0x40020400
 80128ec:	40020800 	.word	0x40020800
 80128f0:	40020c00 	.word	0x40020c00
 80128f4:	40021000 	.word	0x40021000
 80128f8:	40021c00 	.word	0x40021c00

080128fc <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80128fc:	b480      	push	{r7}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8012904:	2300      	movs	r3, #0
 8012906:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8012908:	2300      	movs	r3, #0
 801290a:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4a88      	ldr	r2, [pc, #544]	; (8012b34 <GPIO_Config+0x238>)
 8012912:	4293      	cmp	r3, r2
 8012914:	d106      	bne.n	8012924 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8012916:	4b88      	ldr	r3, [pc, #544]	; (8012b38 <GPIO_Config+0x23c>)
 8012918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801291a:	4a87      	ldr	r2, [pc, #540]	; (8012b38 <GPIO_Config+0x23c>)
 801291c:	f043 0301 	orr.w	r3, r3, #1
 8012920:	6313      	str	r3, [r2, #48]	; 0x30
 8012922:	e03a      	b.n	801299a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4a84      	ldr	r2, [pc, #528]	; (8012b3c <GPIO_Config+0x240>)
 801292a:	4293      	cmp	r3, r2
 801292c:	d106      	bne.n	801293c <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 801292e:	4b82      	ldr	r3, [pc, #520]	; (8012b38 <GPIO_Config+0x23c>)
 8012930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012932:	4a81      	ldr	r2, [pc, #516]	; (8012b38 <GPIO_Config+0x23c>)
 8012934:	f043 0302 	orr.w	r3, r3, #2
 8012938:	6313      	str	r3, [r2, #48]	; 0x30
 801293a:	e02e      	b.n	801299a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4a7f      	ldr	r2, [pc, #508]	; (8012b40 <GPIO_Config+0x244>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d106      	bne.n	8012954 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8012946:	4b7c      	ldr	r3, [pc, #496]	; (8012b38 <GPIO_Config+0x23c>)
 8012948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801294a:	4a7b      	ldr	r2, [pc, #492]	; (8012b38 <GPIO_Config+0x23c>)
 801294c:	f043 0304 	orr.w	r3, r3, #4
 8012950:	6313      	str	r3, [r2, #48]	; 0x30
 8012952:	e022      	b.n	801299a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4a7a      	ldr	r2, [pc, #488]	; (8012b44 <GPIO_Config+0x248>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d106      	bne.n	801296c <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 801295e:	4b76      	ldr	r3, [pc, #472]	; (8012b38 <GPIO_Config+0x23c>)
 8012960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012962:	4a75      	ldr	r2, [pc, #468]	; (8012b38 <GPIO_Config+0x23c>)
 8012964:	f043 0308 	orr.w	r3, r3, #8
 8012968:	6313      	str	r3, [r2, #48]	; 0x30
 801296a:	e016      	b.n	801299a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a75      	ldr	r2, [pc, #468]	; (8012b48 <GPIO_Config+0x24c>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d106      	bne.n	8012984 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8012976:	4b70      	ldr	r3, [pc, #448]	; (8012b38 <GPIO_Config+0x23c>)
 8012978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801297a:	4a6f      	ldr	r2, [pc, #444]	; (8012b38 <GPIO_Config+0x23c>)
 801297c:	f043 0310 	orr.w	r3, r3, #16
 8012980:	6313      	str	r3, [r2, #48]	; 0x30
 8012982:	e00a      	b.n	801299a <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a70      	ldr	r2, [pc, #448]	; (8012b4c <GPIO_Config+0x250>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d105      	bne.n	801299a <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 801298e:	4b6a      	ldr	r3, [pc, #424]	; (8012b38 <GPIO_Config+0x23c>)
 8012990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012992:	4a69      	ldr	r2, [pc, #420]	; (8012b38 <GPIO_Config+0x23c>)
 8012994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012998:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	795b      	ldrb	r3, [r3, #5]
 801299e:	461a      	mov	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	791b      	ldrb	r3, [r3, #4]
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	fa02 f303 	lsl.w	r3, r2, r3
 80129aa:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	791b      	ldrb	r3, [r3, #4]
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	2103      	movs	r1, #3
 80129ba:	fa01 f303 	lsl.w	r3, r1, r3
 80129be:	43db      	mvns	r3, r3
 80129c0:	4619      	mov	r1, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	400a      	ands	r2, r1
 80129c8:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	6819      	ldr	r1, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	430a      	orrs	r2, r1
 80129d8:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	7a1b      	ldrb	r3, [r3, #8]
 80129de:	461a      	mov	r2, r3
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	791b      	ldrb	r3, [r3, #4]
 80129e4:	fa02 f303 	lsl.w	r3, r2, r3
 80129e8:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	791b      	ldrb	r3, [r3, #4]
 80129f4:	4619      	mov	r1, r3
 80129f6:	2301      	movs	r3, #1
 80129f8:	408b      	lsls	r3, r1
 80129fa:	43db      	mvns	r3, r3
 80129fc:	4619      	mov	r1, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	400a      	ands	r2, r1
 8012a04:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	6859      	ldr	r1, [r3, #4]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	68fa      	ldr	r2, [r7, #12]
 8012a12:	430a      	orrs	r2, r1
 8012a14:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	799b      	ldrb	r3, [r3, #6]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	791b      	ldrb	r3, [r3, #4]
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	fa02 f303 	lsl.w	r3, r2, r3
 8012a26:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	689a      	ldr	r2, [r3, #8]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	791b      	ldrb	r3, [r3, #4]
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	2103      	movs	r1, #3
 8012a36:	fa01 f303 	lsl.w	r3, r1, r3
 8012a3a:	43db      	mvns	r3, r3
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	400a      	ands	r2, r1
 8012a44:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	6899      	ldr	r1, [r3, #8]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	68fa      	ldr	r2, [r7, #12]
 8012a52:	430a      	orrs	r2, r1
 8012a54:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	79db      	ldrb	r3, [r3, #7]
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	791b      	ldrb	r3, [r3, #4]
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	fa02 f303 	lsl.w	r3, r2, r3
 8012a66:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	68da      	ldr	r2, [r3, #12]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	791b      	ldrb	r3, [r3, #4]
 8012a72:	005b      	lsls	r3, r3, #1
 8012a74:	2103      	movs	r1, #3
 8012a76:	fa01 f303 	lsl.w	r3, r1, r3
 8012a7a:	43db      	mvns	r3, r3
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	400a      	ands	r2, r1
 8012a84:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	68d9      	ldr	r1, [r3, #12]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	430a      	orrs	r2, r1
 8012a94:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	795b      	ldrb	r3, [r3, #5]
 8012a9a:	2b02      	cmp	r3, #2
 8012a9c:	d143      	bne.n	8012b26 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	791b      	ldrb	r3, [r3, #4]
 8012aa2:	2b07      	cmp	r3, #7
 8012aa4:	d81f      	bhi.n	8012ae6 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	791b      	ldrb	r3, [r3, #4]
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	6a1a      	ldr	r2, [r3, #32]
 8012ab4:	210f      	movs	r1, #15
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8012abc:	43db      	mvns	r3, r3
 8012abe:	4619      	mov	r1, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	400a      	ands	r2, r1
 8012ac6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6a1a      	ldr	r2, [r3, #32]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	7a5b      	ldrb	r3, [r3, #9]
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8012ada:	4619      	mov	r1, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	430a      	orrs	r2, r1
 8012ae2:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8012ae4:	e01f      	b.n	8012b26 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	791b      	ldrb	r3, [r3, #4]
 8012aea:	3b08      	subs	r3, #8
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012af6:	210f      	movs	r1, #15
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	fa01 f303 	lsl.w	r3, r1, r3
 8012afe:	43db      	mvns	r3, r3
 8012b00:	4619      	mov	r1, r3
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	400a      	ands	r2, r1
 8012b08:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	7a5b      	ldrb	r3, [r3, #9]
 8012b14:	4619      	mov	r1, r3
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	fa01 f303 	lsl.w	r3, r1, r3
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	430a      	orrs	r2, r1
 8012b24:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8012b26:	bf00      	nop
 8012b28:	3714      	adds	r7, #20
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	40020000 	.word	0x40020000
 8012b38:	40023800 	.word	0x40023800
 8012b3c:	40020400 	.word	0x40020400
 8012b40:	40020800 	.word	0x40020800
 8012b44:	40020c00 	.word	0x40020c00
 8012b48:	40021000 	.word	0x40021000
 8012b4c:	40021c00 	.word	0x40021c00

08012b50 <GPIO_WritePin>:
/**
 * Función utilizada para cambiar de estado el pin entregado en el handler, asignando el valor
 * entregado en la variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8012b50:	b480      	push	{r7}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 8012b5c:	78fb      	ldrb	r3, [r7, #3]
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	d10d      	bne.n	8012b7e <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	699a      	ldr	r2, [r3, #24]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	791b      	ldrb	r3, [r3, #4]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	2301      	movs	r3, #1
 8012b70:	408b      	lsls	r3, r1
 8012b72:	4619      	mov	r1, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	430a      	orrs	r2, r1
 8012b7a:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8012b7c:	e00d      	b.n	8012b9a <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	699a      	ldr	r2, [r3, #24]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	791b      	ldrb	r3, [r3, #4]
 8012b88:	3310      	adds	r3, #16
 8012b8a:	2101      	movs	r1, #1
 8012b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8012b90:	4619      	mov	r1, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	430a      	orrs	r2, r1
 8012b98:	619a      	str	r2, [r3, #24]
}
 8012b9a:	bf00      	nop
 8012b9c:	370c      	adds	r7, #12
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr

08012ba6 <GPIO_ReadPin>:

/**
 * Función para leer el estado de un PIN especifico
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8012ba6:	b480      	push	{r7}
 8012ba8:	b085      	sub	sp, #20
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cuel luego retornaremos
	uint32_t pinValue = 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	60fb      	str	r3, [r7, #12]

	//Cargamos el valor del registro IDR, desplazando a la derecha tantas veces como la ubicación del PIN específico
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	691b      	ldr	r3, [r3, #16]
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	7912      	ldrb	r2, [r2, #4]
 8012bbc:	40d3      	lsrs	r3, r2
 8012bbe:	60fb      	str	r3, [r7, #12]
	pinValue &= 0b1;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f003 0301 	and.w	r3, r3, #1
 8012bc6:	60fb      	str	r3, [r7, #12]
	return pinValue;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3714      	adds	r7, #20
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd4:	4770      	bx	lr
	...

08012bd8 <moveStepMotor>:
uint16_t			pulses = 0;
uint16_t			totalPulses = 0;
uint8_t				directionCheck = 0;

/* Función que controla el paso del motor */
uint16_t moveStepMotor(StepMotor_Handler_t *pStepMotorHandler, uint16_t numSteps, uint8_t direction){
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	460b      	mov	r3, r1
 8012be2:	807b      	strh	r3, [r7, #2]
 8012be4:	4613      	mov	r3, r2
 8012be6:	707b      	strb	r3, [r7, #1]
	numStepsLeft = numSteps;
 8012be8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012bec:	4baa      	ldr	r3, [pc, #680]	; (8012e98 <moveStepMotor+0x2c0>)
 8012bee:	801a      	strh	r2, [r3, #0]
	directionCheck = direction;
 8012bf0:	4aaa      	ldr	r2, [pc, #680]	; (8012e9c <moveStepMotor+0x2c4>)
 8012bf2:	787b      	ldrb	r3, [r7, #1]
 8012bf4:	7013      	strb	r3, [r2, #0]

	while(numStepsLeft > 0){
 8012bf6:	e191      	b.n	8012f1c <moveStepMotor+0x344>
		// En este ciclo se alterna la alimentación de las bobinas para conseguir el paso deseado
		switch (step){
 8012bf8:	4ba9      	ldr	r3, [pc, #676]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	2b07      	cmp	r3, #7
 8012c00:	f200 80dc 	bhi.w	8012dbc <moveStepMotor+0x1e4>
 8012c04:	a201      	add	r2, pc, #4	; (adr r2, 8012c0c <moveStepMotor+0x34>)
 8012c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c0a:	bf00      	nop
 8012c0c:	08012c2d 	.word	0x08012c2d
 8012c10:	08012c5f 	.word	0x08012c5f
 8012c14:	08012c91 	.word	0x08012c91
 8012c18:	08012cc3 	.word	0x08012cc3
 8012c1c:	08012cf5 	.word	0x08012cf5
 8012c20:	08012d27 	.word	0x08012d27
 8012c24:	08012d59 	.word	0x08012d59
 8012c28:	08012d8b 	.word	0x08012d8b
		case 1:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, SET);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2101      	movs	r1, #1
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff ff8c 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff ff86 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	689b      	ldr	r3, [r3, #8]
 8012c48:	2100      	movs	r1, #0
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7ff ff80 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	2100      	movs	r1, #0
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7ff ff7a 	bl	8012b50 <GPIO_WritePin>
			break;
 8012c5c:	e0af      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 2:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, SET);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	2101      	movs	r1, #1
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7ff ff73 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, SET);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	2101      	movs	r1, #1
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7ff ff6d 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	689b      	ldr	r3, [r3, #8]
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff ff67 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	68db      	ldr	r3, [r3, #12]
 8012c86:	2100      	movs	r1, #0
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7ff ff61 	bl	8012b50 <GPIO_WritePin>
			break;
 8012c8e:	e096      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 3:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	2100      	movs	r1, #0
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ff ff5a 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, SET);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff ff54 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	689b      	ldr	r3, [r3, #8]
 8012cac:	2100      	movs	r1, #0
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7ff ff4e 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	2100      	movs	r1, #0
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ff ff48 	bl	8012b50 <GPIO_WritePin>
			break;
 8012cc0:	e07d      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 4:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ff ff41 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, SET);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	2101      	movs	r1, #1
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7ff ff3b 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, SET);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	2101      	movs	r1, #1
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7ff ff35 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	68db      	ldr	r3, [r3, #12]
 8012cea:	2100      	movs	r1, #0
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff ff2f 	bl	8012b50 <GPIO_WritePin>
			break;
 8012cf2:	e064      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 5:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7ff ff28 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	2100      	movs	r1, #0
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff ff22 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, SET);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	2101      	movs	r1, #1
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7ff ff1c 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, RESET);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff ff16 	bl	8012b50 <GPIO_WritePin>
			break;
 8012d24:	e04b      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 6:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7ff ff0f 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	2100      	movs	r1, #0
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7ff ff09 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, SET);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	689b      	ldr	r3, [r3, #8]
 8012d42:	2101      	movs	r1, #1
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff ff03 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, SET);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	2101      	movs	r1, #1
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7ff fefd 	bl	8012b50 <GPIO_WritePin>
			break;
 8012d56:	e032      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 7:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, RESET);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7ff fef6 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	2100      	movs	r1, #0
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fef0 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	2100      	movs	r1, #0
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff feea 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, SET);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	2101      	movs	r1, #1
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7ff fee4 	bl	8012b50 <GPIO_WritePin>
			break;
 8012d88:	e019      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		case 8:
		{
			GPIO_WritePin(pStepMotorHandler->IN1, SET);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2101      	movs	r1, #1
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff fedd 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN2, RESET);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7ff fed7 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN3, RESET);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	2100      	movs	r1, #0
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7ff fed1 	bl	8012b50 <GPIO_WritePin>
			GPIO_WritePin(pStepMotorHandler->IN4, SET);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	2101      	movs	r1, #1
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff fecb 	bl	8012b50 <GPIO_WritePin>
			break;
 8012dba:	e000      	b.n	8012dbe <moveStepMotor+0x1e6>
		}
		default:
		{
			break;
 8012dbc:	bf00      	nop
		}
		}
		// En esta sección se elige el siguiente paso a realizar según la dirección de movimiento
		switch (direction){
 8012dbe:	787b      	ldrb	r3, [r7, #1]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d002      	beq.n	8012dca <moveStepMotor+0x1f2>
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d052      	beq.n	8012e6e <moveStepMotor+0x296>
			}
			break;
		}
		default:
		{
			break;
 8012dc8:	e0a5      	b.n	8012f16 <moveStepMotor+0x33e>
			if (step == 8){
 8012dca:	4b35      	ldr	r3, [pc, #212]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	2b08      	cmp	r3, #8
 8012dd0:	d11d      	bne.n	8012e0e <moveStepMotor+0x236>
				step = 1;
 8012dd2:	4b33      	ldr	r3, [pc, #204]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	701a      	strb	r2, [r3, #0]
				if (pulses == 0){
 8012dd8:	4b32      	ldr	r3, [pc, #200]	; (8012ea4 <moveStepMotor+0x2cc>)
 8012dda:	881b      	ldrh	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d109      	bne.n	8012df4 <moveStepMotor+0x21c>
					numStepsLeft++;
 8012de0:	4b2d      	ldr	r3, [pc, #180]	; (8012e98 <moveStepMotor+0x2c0>)
 8012de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	3301      	adds	r3, #1
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	b21a      	sxth	r2, r3
 8012dee:	4b2a      	ldr	r3, [pc, #168]	; (8012e98 <moveStepMotor+0x2c0>)
 8012df0:	801a      	strh	r2, [r3, #0]
					continue;
 8012df2:	e093      	b.n	8012f1c <moveStepMotor+0x344>
					numStepsLeft--;
 8012df4:	4b28      	ldr	r3, [pc, #160]	; (8012e98 <moveStepMotor+0x2c0>)
 8012df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	b21a      	sxth	r2, r3
 8012e02:	4b25      	ldr	r3, [pc, #148]	; (8012e98 <moveStepMotor+0x2c0>)
 8012e04:	801a      	strh	r2, [r3, #0]
					pulses = 0;
 8012e06:	4b27      	ldr	r3, [pc, #156]	; (8012ea4 <moveStepMotor+0x2cc>)
 8012e08:	2200      	movs	r2, #0
 8012e0a:	801a      	strh	r2, [r3, #0]
			break;
 8012e0c:	e080      	b.n	8012f10 <moveStepMotor+0x338>
			}else if ((step % 2) == 0){
 8012e0e:	4b24      	ldr	r3, [pc, #144]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	f003 0301 	and.w	r3, r3, #1
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d121      	bne.n	8012e60 <moveStepMotor+0x288>
				step++;
 8012e1c:	4b20      	ldr	r3, [pc, #128]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	3301      	adds	r3, #1
 8012e22:	b2da      	uxtb	r2, r3
 8012e24:	4b1e      	ldr	r3, [pc, #120]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e26:	701a      	strb	r2, [r3, #0]
				numStepsLeft--;
 8012e28:	4b1b      	ldr	r3, [pc, #108]	; (8012e98 <moveStepMotor+0x2c0>)
 8012e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	3b01      	subs	r3, #1
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	b21a      	sxth	r2, r3
 8012e36:	4b18      	ldr	r3, [pc, #96]	; (8012e98 <moveStepMotor+0x2c0>)
 8012e38:	801a      	strh	r2, [r3, #0]
				if (direction ^ directionCheck){
 8012e3a:	4b18      	ldr	r3, [pc, #96]	; (8012e9c <moveStepMotor+0x2c4>)
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	787a      	ldrb	r2, [r7, #1]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d065      	beq.n	8012f10 <moveStepMotor+0x338>
					step--;
 8012e44:	4b16      	ldr	r3, [pc, #88]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	b2da      	uxtb	r2, r3
 8012e4c:	4b14      	ldr	r3, [pc, #80]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e4e:	701a      	strb	r2, [r3, #0]
					step--;
 8012e50:	4b13      	ldr	r3, [pc, #76]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	4b11      	ldr	r3, [pc, #68]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e5a:	701a      	strb	r2, [r3, #0]
					return WARNING_WRONG_DIRECTION;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e064      	b.n	8012f2a <moveStepMotor+0x352>
				step++;
 8012e60:	4b0f      	ldr	r3, [pc, #60]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	3301      	adds	r3, #1
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	4b0d      	ldr	r3, [pc, #52]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e6a:	701a      	strb	r2, [r3, #0]
			break;
 8012e6c:	e050      	b.n	8012f10 <moveStepMotor+0x338>
			if (step == 1){
 8012e6e:	4b0c      	ldr	r3, [pc, #48]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d11c      	bne.n	8012eb0 <moveStepMotor+0x2d8>
				step = 8;
 8012e76:	4b0a      	ldr	r3, [pc, #40]	; (8012ea0 <moveStepMotor+0x2c8>)
 8012e78:	2208      	movs	r2, #8
 8012e7a:	701a      	strb	r2, [r3, #0]
				if (pulses == 0){
 8012e7c:	4b09      	ldr	r3, [pc, #36]	; (8012ea4 <moveStepMotor+0x2cc>)
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d111      	bne.n	8012ea8 <moveStepMotor+0x2d0>
					numStepsLeft++;
 8012e84:	4b04      	ldr	r3, [pc, #16]	; (8012e98 <moveStepMotor+0x2c0>)
 8012e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	b21a      	sxth	r2, r3
 8012e92:	4b01      	ldr	r3, [pc, #4]	; (8012e98 <moveStepMotor+0x2c0>)
 8012e94:	801a      	strh	r2, [r3, #0]
					continue;
 8012e96:	e041      	b.n	8012f1c <moveStepMotor+0x344>
 8012e98:	2000410c 	.word	0x2000410c
 8012e9c:	20004112 	.word	0x20004112
 8012ea0:	20000034 	.word	0x20000034
 8012ea4:	2000410e 	.word	0x2000410e
					pulses = 0;
 8012ea8:	4b22      	ldr	r3, [pc, #136]	; (8012f34 <moveStepMotor+0x35c>)
 8012eaa:	2200      	movs	r2, #0
 8012eac:	801a      	strh	r2, [r3, #0]
			break;
 8012eae:	e031      	b.n	8012f14 <moveStepMotor+0x33c>
			}else if ((step % 2) == 0){
 8012eb0:	4b21      	ldr	r3, [pc, #132]	; (8012f38 <moveStepMotor+0x360>)
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	f003 0301 	and.w	r3, r3, #1
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d121      	bne.n	8012f02 <moveStepMotor+0x32a>
				step--;
 8012ebe:	4b1e      	ldr	r3, [pc, #120]	; (8012f38 <moveStepMotor+0x360>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	3b01      	subs	r3, #1
 8012ec4:	b2da      	uxtb	r2, r3
 8012ec6:	4b1c      	ldr	r3, [pc, #112]	; (8012f38 <moveStepMotor+0x360>)
 8012ec8:	701a      	strb	r2, [r3, #0]
				numStepsLeft--;
 8012eca:	4b1c      	ldr	r3, [pc, #112]	; (8012f3c <moveStepMotor+0x364>)
 8012ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	3b01      	subs	r3, #1
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	b21a      	sxth	r2, r3
 8012ed8:	4b18      	ldr	r3, [pc, #96]	; (8012f3c <moveStepMotor+0x364>)
 8012eda:	801a      	strh	r2, [r3, #0]
				if (direction ^ directionCheck){
 8012edc:	4b18      	ldr	r3, [pc, #96]	; (8012f40 <moveStepMotor+0x368>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	787a      	ldrb	r2, [r7, #1]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d016      	beq.n	8012f14 <moveStepMotor+0x33c>
					step++;
 8012ee6:	4b14      	ldr	r3, [pc, #80]	; (8012f38 <moveStepMotor+0x360>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	3301      	adds	r3, #1
 8012eec:	b2da      	uxtb	r2, r3
 8012eee:	4b12      	ldr	r3, [pc, #72]	; (8012f38 <moveStepMotor+0x360>)
 8012ef0:	701a      	strb	r2, [r3, #0]
					step++;
 8012ef2:	4b11      	ldr	r3, [pc, #68]	; (8012f38 <moveStepMotor+0x360>)
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	4b0f      	ldr	r3, [pc, #60]	; (8012f38 <moveStepMotor+0x360>)
 8012efc:	701a      	strb	r2, [r3, #0]
					return WARNING_WRONG_DIRECTION;
 8012efe:	2300      	movs	r3, #0
 8012f00:	e013      	b.n	8012f2a <moveStepMotor+0x352>
				step--;
 8012f02:	4b0d      	ldr	r3, [pc, #52]	; (8012f38 <moveStepMotor+0x360>)
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	3b01      	subs	r3, #1
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	4b0b      	ldr	r3, [pc, #44]	; (8012f38 <moveStepMotor+0x360>)
 8012f0c:	701a      	strb	r2, [r3, #0]
			break;
 8012f0e:	e001      	b.n	8012f14 <moveStepMotor+0x33c>
			break;
 8012f10:	bf00      	nop
 8012f12:	e000      	b.n	8012f16 <moveStepMotor+0x33e>
			break;
 8012f14:	bf00      	nop
		}
		}
		HAL_Delay(7);
 8012f16:	2007      	movs	r0, #7
 8012f18:	f000 fc78 	bl	801380c <HAL_Delay>
	while(numStepsLeft > 0){
 8012f1c:	4b07      	ldr	r3, [pc, #28]	; (8012f3c <moveStepMotor+0x364>)
 8012f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f73f ae68 	bgt.w	8012bf8 <moveStepMotor+0x20>
	}
	return NO_WARNING;
 8012f28:	2301      	movs	r3, #1
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	2000410e 	.word	0x2000410e
 8012f38:	20000034 	.word	0x20000034
 8012f3c:	2000410c 	.word	0x2000410c
 8012f40:	20004112 	.word	0x20004112

08012f44 <initStepMotor>:

/* Esta función inicializa los Exti que ayudarán al control del motor. Se debe llamar desde el Main*/
void initStepMotor(void){
 8012f44:	b598      	push	{r3, r4, r7, lr}
 8012f46:	af00      	add	r7, sp, #0
	encoderCHA.EXTIx			= EXTI7;
 8012f48:	4b17      	ldr	r3, [pc, #92]	; (8012fa8 <initStepMotor+0x64>)
 8012f4a:	2207      	movs	r2, #7
 8012f4c:	701a      	strb	r2, [r3, #0]
	encoderCHA.pinPort			= PB;
 8012f4e:	4b16      	ldr	r3, [pc, #88]	; (8012fa8 <initStepMotor+0x64>)
 8012f50:	2201      	movs	r2, #1
 8012f52:	705a      	strb	r2, [r3, #1]
	encoderCHA.pinPUPD_Mode		= GPIO_PUPDR_NOTHING;
 8012f54:	4b14      	ldr	r3, [pc, #80]	; (8012fa8 <initStepMotor+0x64>)
 8012f56:	2200      	movs	r2, #0
 8012f58:	709a      	strb	r2, [r3, #2]
	encoderCHA.triggerMode		= FALLING_RISING_TRIGGER;
 8012f5a:	4b13      	ldr	r3, [pc, #76]	; (8012fa8 <initStepMotor+0x64>)
 8012f5c:	2202      	movs	r2, #2
 8012f5e:	70da      	strb	r2, [r3, #3]
	exti_Config(&encoderCHA);
 8012f60:	4811      	ldr	r0, [pc, #68]	; (8012fa8 <initStepMotor+0x64>)
 8012f62:	f7ff fa0d 	bl	8012380 <exti_Config>
	encoderCHAPin = encoderCHA.handlerEXTIPin;
 8012f66:	4a11      	ldr	r2, [pc, #68]	; (8012fac <initStepMotor+0x68>)
 8012f68:	4b0f      	ldr	r3, [pc, #60]	; (8012fa8 <initStepMotor+0x64>)
 8012f6a:	4614      	mov	r4, r2
 8012f6c:	3304      	adds	r3, #4
 8012f6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	encoderCHB.EXTIx			= EXTI13;
 8012f76:	4b0e      	ldr	r3, [pc, #56]	; (8012fb0 <initStepMotor+0x6c>)
 8012f78:	220d      	movs	r2, #13
 8012f7a:	701a      	strb	r2, [r3, #0]
	encoderCHB.pinPort			= PC;
 8012f7c:	4b0c      	ldr	r3, [pc, #48]	; (8012fb0 <initStepMotor+0x6c>)
 8012f7e:	2202      	movs	r2, #2
 8012f80:	705a      	strb	r2, [r3, #1]
	encoderCHB.pinPUPD_Mode		= GPIO_PUPDR_NOTHING;
 8012f82:	4b0b      	ldr	r3, [pc, #44]	; (8012fb0 <initStepMotor+0x6c>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	709a      	strb	r2, [r3, #2]
	encoderCHB.triggerMode		= FALLING_TRIGGER;
 8012f88:	4b09      	ldr	r3, [pc, #36]	; (8012fb0 <initStepMotor+0x6c>)
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	70da      	strb	r2, [r3, #3]
	exti_Config(&encoderCHB);
 8012f8e:	4808      	ldr	r0, [pc, #32]	; (8012fb0 <initStepMotor+0x6c>)
 8012f90:	f7ff f9f6 	bl	8012380 <exti_Config>
	encoderCHBPin = encoderCHB.handlerEXTIPin;
 8012f94:	4a07      	ldr	r2, [pc, #28]	; (8012fb4 <initStepMotor+0x70>)
 8012f96:	4b06      	ldr	r3, [pc, #24]	; (8012fb0 <initStepMotor+0x6c>)
 8012f98:	4614      	mov	r4, r2
 8012f9a:	3304      	adds	r3, #4
 8012f9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012fa4:	bf00      	nop
 8012fa6:	bd98      	pop	{r3, r4, r7, pc}
 8012fa8:	200040d4 	.word	0x200040d4
 8012fac:	200040f4 	.word	0x200040f4
 8012fb0:	200040e4 	.word	0x200040e4
 8012fb4:	20004100 	.word	0x20004100

08012fb8 <readEncoder>:

void readEncoder(uint8_t *pEncoderChannels){
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
	/**
	 * readEncoder es una función que se encarga de leer los estados de las salidas del encoder, y mostrarlas por consola
	 */
	pEncoderChannels[0] = (uint8_t) GPIO_ReadPin(&encoderCHAPin);
 8012fc0:	4809      	ldr	r0, [pc, #36]	; (8012fe8 <readEncoder+0x30>)
 8012fc2:	f7ff fdf0 	bl	8012ba6 <GPIO_ReadPin>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	701a      	strb	r2, [r3, #0]
	pEncoderChannels[1] = (uint8_t) GPIO_ReadPin(&encoderCHBPin);
 8012fce:	4807      	ldr	r0, [pc, #28]	; (8012fec <readEncoder+0x34>)
 8012fd0:	f7ff fde9 	bl	8012ba6 <GPIO_ReadPin>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	3301      	adds	r3, #1
 8012fda:	b2d2      	uxtb	r2, r2
 8012fdc:	701a      	strb	r2, [r3, #0]
}
 8012fde:	bf00      	nop
 8012fe0:	3708      	adds	r7, #8
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	200040f4 	.word	0x200040f4
 8012fec:	20004100 	.word	0x20004100

08012ff0 <restartPulses>:

/* Función para reiniciar el número de pulsos contados del encoder */
void restartPulses(void){
 8012ff0:	b480      	push	{r7}
 8012ff2:	af00      	add	r7, sp, #0
	totalPulses = 0;
 8012ff4:	4b03      	ldr	r3, [pc, #12]	; (8013004 <restartPulses+0x14>)
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	801a      	strh	r2, [r3, #0]
}
 8012ffa:	bf00      	nop
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013002:	4770      	bx	lr
 8013004:	20004110 	.word	0x20004110

08013008 <getPulses>:

/* Función para leer el número de pulsos contados del encoder */
float getPulses(void){
 8013008:	b480      	push	{r7}
 801300a:	af00      	add	r7, sp, #0
	return (float) totalPulses;
 801300c:	4b05      	ldr	r3, [pc, #20]	; (8013024 <getPulses+0x1c>)
 801300e:	881b      	ldrh	r3, [r3, #0]
 8013010:	ee07 3a90 	vmov	s15, r3
 8013014:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8013018:	eeb0 0a67 	vmov.f32	s0, s15
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr
 8013024:	20004110 	.word	0x20004110

08013028 <Exti7_Callback>:

/* Implementació del Callback para el Exti7 */
void Exti7_Callback(void){
 8013028:	b480      	push	{r7}
 801302a:	af00      	add	r7, sp, #0
	// Este Exti pertenece a uno de los canales del Encoder, la funcionalidad será el conteo de pulsos
	pulses++;
 801302c:	4b08      	ldr	r3, [pc, #32]	; (8013050 <Exti7_Callback+0x28>)
 801302e:	881b      	ldrh	r3, [r3, #0]
 8013030:	3301      	adds	r3, #1
 8013032:	b29a      	uxth	r2, r3
 8013034:	4b06      	ldr	r3, [pc, #24]	; (8013050 <Exti7_Callback+0x28>)
 8013036:	801a      	strh	r2, [r3, #0]
	totalPulses++;
 8013038:	4b06      	ldr	r3, [pc, #24]	; (8013054 <Exti7_Callback+0x2c>)
 801303a:	881b      	ldrh	r3, [r3, #0]
 801303c:	3301      	adds	r3, #1
 801303e:	b29a      	uxth	r2, r3
 8013040:	4b04      	ldr	r3, [pc, #16]	; (8013054 <Exti7_Callback+0x2c>)
 8013042:	801a      	strh	r2, [r3, #0]
}
 8013044:	bf00      	nop
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	2000410e 	.word	0x2000410e
 8013054:	20004110 	.word	0x20004110

08013058 <Exti13_Callback>:

/* Implementació del Callback para el Exti13 */
void Exti13_Callback(void){
 8013058:	b580      	push	{r7, lr}
 801305a:	af00      	add	r7, sp, #0
	// Este Exti pertenece a uno de los canales del Encoder, la funcionalidad será chequear continuamente la dirección de movimiento
	if (GPIO_ReadPin(&encoderCHAPin)){
 801305c:	4807      	ldr	r0, [pc, #28]	; (801307c <Exti13_Callback+0x24>)
 801305e:	f7ff fda2 	bl	8012ba6 <GPIO_ReadPin>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <Exti13_Callback+0x18>
		directionCheck = CLOCKWISE;
 8013068:	4b05      	ldr	r3, [pc, #20]	; (8013080 <Exti13_Callback+0x28>)
 801306a:	2200      	movs	r2, #0
 801306c:	701a      	strb	r2, [r3, #0]
	}
	else {
		directionCheck = COUNTERCLOCKWISE;
	}
}
 801306e:	e002      	b.n	8013076 <Exti13_Callback+0x1e>
		directionCheck = COUNTERCLOCKWISE;
 8013070:	4b03      	ldr	r3, [pc, #12]	; (8013080 <Exti13_Callback+0x28>)
 8013072:	2201      	movs	r2, #1
 8013074:	701a      	strb	r2, [r3, #0]
}
 8013076:	bf00      	nop
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	200040f4 	.word	0x200040f4
 8013080:	20004112 	.word	0x20004112

08013084 <__NVIC_EnableIRQ>:
{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013092:	2b00      	cmp	r3, #0
 8013094:	db0b      	blt.n	80130ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013096:	79fb      	ldrb	r3, [r7, #7]
 8013098:	f003 021f 	and.w	r2, r3, #31
 801309c:	4907      	ldr	r1, [pc, #28]	; (80130bc <__NVIC_EnableIRQ+0x38>)
 801309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80130a2:	095b      	lsrs	r3, r3, #5
 80130a4:	2001      	movs	r0, #1
 80130a6:	fa00 f202 	lsl.w	r2, r0, r2
 80130aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80130ae:	bf00      	nop
 80130b0:	370c      	adds	r7, #12
 80130b2:	46bd      	mov	sp, r7
 80130b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b8:	4770      	bx	lr
 80130ba:	bf00      	nop
 80130bc:	e000e100 	.word	0xe000e100

080130c0 <config_SysTickMs>:
uint64_t ticks;
uint32_t sysTicksStart = 0;
uint32_t sysTicksEnd   = 0;

/**/
void config_SysTickMs(void){
 80130c0:	b580      	push	{r7, lr}
 80130c2:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 80130c4:	4914      	ldr	r1, [pc, #80]	; (8013118 <config_SysTickMs+0x58>)
 80130c6:	f04f 0200 	mov.w	r2, #0
 80130ca:	f04f 0300 	mov.w	r3, #0
 80130ce:	e9c1 2300 	strd	r2, r3, [r1]

	// Cargando el valor del limite de icrementos que representan 1ms
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 80130d2:	4b12      	ldr	r3, [pc, #72]	; (801311c <config_SysTickMs+0x5c>)
 80130d4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80130d8:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 80130da:	4b10      	ldr	r3, [pc, #64]	; (801311c <config_SysTickMs+0x5c>)
 80130dc:	2200      	movs	r2, #0
 80130de:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80130e0:	4b0e      	ldr	r3, [pc, #56]	; (801311c <config_SysTickMs+0x5c>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a0d      	ldr	r2, [pc, #52]	; (801311c <config_SysTickMs+0x5c>)
 80130e6:	f043 0304 	orr.w	r3, r3, #4
 80130ea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80130ec:	b672      	cpsid	i
}
 80130ee:	bf00      	nop

	// Desactivamos la interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80130f0:	4b0a      	ldr	r3, [pc, #40]	; (801311c <config_SysTickMs+0x5c>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4a09      	ldr	r2, [pc, #36]	; (801311c <config_SysTickMs+0x5c>)
 80130f6:	f043 0302 	orr.w	r3, r3, #2
 80130fa:	6013      	str	r3, [r2, #0]

	// Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 80130fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013100:	f7ff ffc0 	bl	8013084 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8013104:	4b05      	ldr	r3, [pc, #20]	; (801311c <config_SysTickMs+0x5c>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	4a04      	ldr	r2, [pc, #16]	; (801311c <config_SysTickMs+0x5c>)
 801310a:	f043 0301 	orr.w	r3, r3, #1
 801310e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8013110:	b662      	cpsie	i
}
 8013112:	bf00      	nop

	// Activamos las interrupciones globales
	__enable_irq();
}
 8013114:	bf00      	nop
 8013116:	bd80      	pop	{r7, pc}
 8013118:	20004118 	.word	0x20004118
 801311c:	e000e010 	.word	0xe000e010

08013120 <__NVIC_EnableIRQ>:
{
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	4603      	mov	r3, r0
 8013128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801312e:	2b00      	cmp	r3, #0
 8013130:	db0b      	blt.n	801314a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013132:	79fb      	ldrb	r3, [r7, #7]
 8013134:	f003 021f 	and.w	r2, r3, #31
 8013138:	4907      	ldr	r1, [pc, #28]	; (8013158 <__NVIC_EnableIRQ+0x38>)
 801313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801313e:	095b      	lsrs	r3, r3, #5
 8013140:	2001      	movs	r0, #1
 8013142:	fa00 f202 	lsl.w	r2, r0, r2
 8013146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801314a:	bf00      	nop
 801314c:	370c      	adds	r7, #12
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	e000e100 	.word	0xe000e100

0801315c <__NVIC_DisableIRQ>:
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	4603      	mov	r3, r0
 8013164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801316a:	2b00      	cmp	r3, #0
 801316c:	db12      	blt.n	8013194 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801316e:	79fb      	ldrb	r3, [r7, #7]
 8013170:	f003 021f 	and.w	r2, r3, #31
 8013174:	490a      	ldr	r1, [pc, #40]	; (80131a0 <__NVIC_DisableIRQ+0x44>)
 8013176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801317a:	095b      	lsrs	r3, r3, #5
 801317c:	2001      	movs	r0, #1
 801317e:	fa00 f202 	lsl.w	r2, r0, r2
 8013182:	3320      	adds	r3, #32
 8013184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013188:	f3bf 8f4f 	dsb	sy
}
 801318c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801318e:	f3bf 8f6f 	isb	sy
}
 8013192:	bf00      	nop
}
 8013194:	bf00      	nop
 8013196:	370c      	adds	r7, #12
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	e000e100 	.word	0xe000e100

080131a4 <__NVIC_SetPriority>:
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	4603      	mov	r3, r0
 80131ac:	6039      	str	r1, [r7, #0]
 80131ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80131b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	db0a      	blt.n	80131ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	b2da      	uxtb	r2, r3
 80131bc:	490c      	ldr	r1, [pc, #48]	; (80131f0 <__NVIC_SetPriority+0x4c>)
 80131be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80131c2:	0112      	lsls	r2, r2, #4
 80131c4:	b2d2      	uxtb	r2, r2
 80131c6:	440b      	add	r3, r1
 80131c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80131cc:	e00a      	b.n	80131e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	b2da      	uxtb	r2, r3
 80131d2:	4908      	ldr	r1, [pc, #32]	; (80131f4 <__NVIC_SetPriority+0x50>)
 80131d4:	79fb      	ldrb	r3, [r7, #7]
 80131d6:	f003 030f 	and.w	r3, r3, #15
 80131da:	3b04      	subs	r3, #4
 80131dc:	0112      	lsls	r2, r2, #4
 80131de:	b2d2      	uxtb	r2, r2
 80131e0:	440b      	add	r3, r1
 80131e2:	761a      	strb	r2, [r3, #24]
}
 80131e4:	bf00      	nop
 80131e6:	370c      	adds	r7, #12
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr
 80131f0:	e000e100 	.word	0xe000e100
 80131f4:	e000ed00 	.word	0xe000ed00

080131f8 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a89      	ldr	r2, [pc, #548]	; (801342c <USART_Config+0x234>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d106      	bne.n	8013218 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 801320a:	4b89      	ldr	r3, [pc, #548]	; (8013430 <USART_Config+0x238>)
 801320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801320e:	4a88      	ldr	r2, [pc, #544]	; (8013430 <USART_Config+0x238>)
 8013210:	f043 0310 	orr.w	r3, r3, #16
 8013214:	6453      	str	r3, [r2, #68]	; 0x44
 8013216:	e016      	b.n	8013246 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4a85      	ldr	r2, [pc, #532]	; (8013434 <USART_Config+0x23c>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d106      	bne.n	8013230 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8013222:	4b83      	ldr	r3, [pc, #524]	; (8013430 <USART_Config+0x238>)
 8013224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013226:	4a82      	ldr	r2, [pc, #520]	; (8013430 <USART_Config+0x238>)
 8013228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801322c:	6413      	str	r3, [r2, #64]	; 0x40
 801322e:	e00a      	b.n	8013246 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4a80      	ldr	r2, [pc, #512]	; (8013438 <USART_Config+0x240>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d105      	bne.n	8013246 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 801323a:	4b7d      	ldr	r3, [pc, #500]	; (8013430 <USART_Config+0x238>)
 801323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801323e:	4a7c      	ldr	r2, [pc, #496]	; (8013430 <USART_Config+0x238>)
 8013240:	f043 0320 	orr.w	r3, r3, #32
 8013244:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2200      	movs	r2, #0
 801324c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2200      	movs	r2, #0
 8013254:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	79db      	ldrb	r3, [r3, #7]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d023      	beq.n	80132a6 <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	68da      	ldr	r2, [r3, #12]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801326c:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	79db      	ldrb	r3, [r3, #7]
 8013272:	2b02      	cmp	r3, #2
 8013274:	d10b      	bne.n	801328e <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	68da      	ldr	r2, [r3, #12]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8013284:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2201      	movs	r2, #1
 801328a:	719a      	strb	r2, [r3, #6]
 801328c:	e013      	b.n	80132b6 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	68da      	ldr	r2, [r3, #12]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801329c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2201      	movs	r2, #1
 80132a2:	719a      	strb	r2, [r3, #6]
 80132a4:	e007      	b.n	80132b6 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	68da      	ldr	r2, [r3, #12]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132b4:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	799b      	ldrb	r3, [r3, #6]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d108      	bne.n	80132d0 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	68da      	ldr	r2, [r3, #12]
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80132cc:	60da      	str	r2, [r3, #12]
 80132ce:	e007      	b.n	80132e0 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	68da      	ldr	r2, [r3, #12]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80132de:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	7a1b      	ldrb	r3, [r3, #8]
 80132e4:	2b03      	cmp	r3, #3
 80132e6:	d82f      	bhi.n	8013348 <USART_Config+0x150>
 80132e8:	a201      	add	r2, pc, #4	; (adr r2, 80132f0 <USART_Config+0xf8>)
 80132ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ee:	bf00      	nop
 80132f0:	08013301 	.word	0x08013301
 80132f4:	08013313 	.word	0x08013313
 80132f8:	08013325 	.word	0x08013325
 80132fc:	08013337 	.word	0x08013337
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	691a      	ldr	r2, [r3, #16]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801330e:	611a      	str	r2, [r3, #16]
		break;
 8013310:	e01a      	b.n	8013348 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	691a      	ldr	r2, [r3, #16]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013320:	611a      	str	r2, [r3, #16]
		break;
 8013322:	e011      	b.n	8013348 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	691a      	ldr	r2, [r3, #16]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013332:	611a      	str	r2, [r3, #16]
		break;
 8013334:	e008      	b.n	8013348 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	691a      	ldr	r2, [r3, #16]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8013344:	611a      	str	r2, [r3, #16]
		break;
 8013346:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	795b      	ldrb	r3, [r3, #5]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d105      	bne.n	801335c <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	f240 6283 	movw	r2, #1667	; 0x683
 8013358:	609a      	str	r2, [r3, #8]
 801335a:	e01b      	b.n	8013394 <USART_Config+0x19c>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	795b      	ldrb	r3, [r3, #5]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d105      	bne.n	8013370 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f240 3241 	movw	r2, #833	; 0x341
 801336c:	609a      	str	r2, [r3, #8]
 801336e:	e011      	b.n	8013394 <USART_Config+0x19c>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	795b      	ldrb	r3, [r3, #5]
 8013374:	2b02      	cmp	r3, #2
 8013376:	d105      	bne.n	8013384 <USART_Config+0x18c>
		// El valor a cargar es 45.5625 -> Mantiza =45, fraction = 0.5625
		// Mantiza = 8 = 0x2D, fraction = 16 * 0.5625 = 9
		// El valor a cargar es 0x2D9
		ptrUsartHandler->ptrUSARTx->BRR = 0x2D9;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f240 22d9 	movw	r2, #729	; 0x2d9
 8013380:	609a      	str	r2, [r3, #8]
 8013382:	e007      	b.n	8013394 <USART_Config+0x19c>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	795b      	ldrb	r3, [r3, #5]
 8013388:	2b03      	cmp	r3, #3
 801338a:	d103      	bne.n	8013394 <USART_Config+0x19c>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	2211      	movs	r2, #17
 8013392:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	791b      	ldrb	r3, [r3, #4]
 8013398:	2b03      	cmp	r3, #3
 801339a:	d84f      	bhi.n	801343c <USART_Config+0x244>
 801339c:	a201      	add	r2, pc, #4	; (adr r2, 80133a4 <USART_Config+0x1ac>)
 801339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133a2:	bf00      	nop
 80133a4:	080133b5 	.word	0x080133b5
 80133a8:	080133c7 	.word	0x080133c7
 80133ac:	080133d9 	.word	0x080133d9
 80133b0:	080133fb 	.word	0x080133fb
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	68da      	ldr	r2, [r3, #12]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f042 0208 	orr.w	r2, r2, #8
 80133c2:	60da      	str	r2, [r3, #12]
		break;
 80133c4:	e053      	b.n	801346e <USART_Config+0x276>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	68da      	ldr	r2, [r3, #12]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f042 0204 	orr.w	r2, r2, #4
 80133d4:	60da      	str	r2, [r3, #12]
		break;
 80133d6:	e04a      	b.n	801346e <USART_Config+0x276>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	68da      	ldr	r2, [r3, #12]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	f042 0208 	orr.w	r2, r2, #8
 80133e6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	68da      	ldr	r2, [r3, #12]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f042 0204 	orr.w	r2, r2, #4
 80133f6:	60da      	str	r2, [r3, #12]
		break;
 80133f8:	e039      	b.n	801346e <USART_Config+0x276>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	68da      	ldr	r2, [r3, #12]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f022 0208 	bic.w	r2, r2, #8
 8013408:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	68da      	ldr	r2, [r3, #12]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f022 0204 	bic.w	r2, r2, #4
 8013418:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	68da      	ldr	r2, [r3, #12]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013428:	60da      	str	r2, [r3, #12]
		break;
 801342a:	e020      	b.n	801346e <USART_Config+0x276>
 801342c:	40011000 	.word	0x40011000
 8013430:	40023800 	.word	0x40023800
 8013434:	40004400 	.word	0x40004400
 8013438:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	68da      	ldr	r2, [r3, #12]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f022 0208 	bic.w	r2, r2, #8
 801344a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	68da      	ldr	r2, [r3, #12]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	f022 0204 	bic.w	r2, r2, #4
 801345a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	68da      	ldr	r2, [r3, #12]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801346a:	60da      	str	r2, [r3, #12]
		break;
 801346c:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	791b      	ldrb	r3, [r3, #4]
 8013472:	2b03      	cmp	r3, #3
 8013474:	d007      	beq.n	8013486 <USART_Config+0x28e>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	68da      	ldr	r2, [r3, #12]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013484:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8013486:	b672      	cpsid	i
}
 8013488:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	68da      	ldr	r2, [r3, #12]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013498:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	7a5b      	ldrb	r3, [r3, #9]
 801349e:	2b03      	cmp	r3, #3
 80134a0:	d022      	beq.n	80134e8 <USART_Config+0x2f0>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	4a20      	ldr	r2, [pc, #128]	; (8013528 <USART_Config+0x330>)
 80134a8:	4293      	cmp	r3, r2
 80134aa:	d107      	bne.n	80134bc <USART_Config+0x2c4>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80134ac:	2025      	movs	r0, #37	; 0x25
 80134ae:	f7ff fe37 	bl	8013120 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART1_IRQn, 1);
 80134b2:	2101      	movs	r1, #1
 80134b4:	2025      	movs	r0, #37	; 0x25
 80134b6:	f7ff fe75 	bl	80131a4 <__NVIC_SetPriority>
 80134ba:	e01e      	b.n	80134fa <USART_Config+0x302>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a1a      	ldr	r2, [pc, #104]	; (801352c <USART_Config+0x334>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d107      	bne.n	80134d6 <USART_Config+0x2de>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80134c6:	2026      	movs	r0, #38	; 0x26
 80134c8:	f7ff fe2a 	bl	8013120 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART2_IRQn, 2);
 80134cc:	2102      	movs	r1, #2
 80134ce:	2026      	movs	r0, #38	; 0x26
 80134d0:	f7ff fe68 	bl	80131a4 <__NVIC_SetPriority>
 80134d4:	e011      	b.n	80134fa <USART_Config+0x302>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4a15      	ldr	r2, [pc, #84]	; (8013530 <USART_Config+0x338>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d10c      	bne.n	80134fa <USART_Config+0x302>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80134e0:	2047      	movs	r0, #71	; 0x47
 80134e2:	f7ff fe1d 	bl	8013120 <__NVIC_EnableIRQ>
 80134e6:	e008      	b.n	80134fa <USART_Config+0x302>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 80134e8:	2025      	movs	r0, #37	; 0x25
 80134ea:	f7ff fe37 	bl	801315c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 80134ee:	2026      	movs	r0, #38	; 0x26
 80134f0:	f7ff fe34 	bl	801315c <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 80134f4:	2047      	movs	r0, #71	; 0x47
 80134f6:	f7ff fe31 	bl	801315c <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	7a5b      	ldrb	r3, [r3, #9]
 80134fe:	2b01      	cmp	r3, #1
 8013500:	d003      	beq.n	801350a <USART_Config+0x312>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	7a5b      	ldrb	r3, [r3, #9]
 8013506:	2b02      	cmp	r3, #2
 8013508:	d107      	bne.n	801351a <USART_Config+0x322>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	68da      	ldr	r2, [r3, #12]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f042 0220 	orr.w	r2, r2, #32
 8013518:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801351a:	b662      	cpsie	i
}
 801351c:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 801351e:	bf00      	nop
 8013520:	3708      	adds	r7, #8
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	40011000 	.word	0x40011000
 801352c:	40004400 	.word	0x40004400
 8013530:	40011400 	.word	0x40011400

08013534 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	460b      	mov	r3, r1
 801353e:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	7a5b      	ldrb	r3, [r3, #9]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d003      	beq.n	8013550 <writeChar+0x1c>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	7a5b      	ldrb	r3, [r3, #9]
 801354c:	2b02      	cmp	r3, #2
 801354e:	d10c      	bne.n	801356a <writeChar+0x36>
		auxDataToSend = dataToSend;
 8013550:	4a0f      	ldr	r2, [pc, #60]	; (8013590 <writeChar+0x5c>)
 8013552:	78fb      	ldrb	r3, [r7, #3]
 8013554:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	68da      	ldr	r2, [r3, #12]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013564:	60da      	str	r2, [r3, #12]
 8013566:	e00c      	b.n	8013582 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 8013568:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013574:	2b00      	cmp	r3, #0
 8013576:	d0f7      	beq.n	8013568 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	78fa      	ldrb	r2, [r7, #3]
 801357e:	605a      	str	r2, [r3, #4]
	}
}
 8013580:	bf00      	nop
 8013582:	bf00      	nop
 8013584:	370c      	adds	r7, #12
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop
 8013590:	20004121 	.word	0x20004121

08013594 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 801359e:	e008      	b.n	80135b2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	4619      	mov	r1, r3
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f7ff ffc4 	bl	8013534 <writeChar>
		msgToSend++;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	3301      	adds	r3, #1
 80135b0:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1f2      	bne.n	80135a0 <writeMsg+0xc>
	}
}
 80135ba:	bf00      	nop
 80135bc:	bf00      	nop
 80135be:	3708      	adds	r7, #8
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 80135c4:	b480      	push	{r7}
 80135c6:	af00      	add	r7, sp, #0
	return auxRxData;
 80135c8:	4b03      	ldr	r3, [pc, #12]	; (80135d8 <getRxData+0x14>)
 80135ca:	781b      	ldrb	r3, [r3, #0]
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	46bd      	mov	sp, r7
 80135d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d4:	4770      	bx	lr
 80135d6:	bf00      	nop
 80135d8:	20004120 	.word	0x20004120

080135dc <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 80135dc:	b480      	push	{r7}
 80135de:	af00      	add	r7, sp, #0
	 __NOP();
 80135e0:	bf00      	nop
}
 80135e2:	bf00      	nop
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <Usart2_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
 80135ec:	b480      	push	{r7}
 80135ee:	af00      	add	r7, sp, #0
	 __NOP();
 80135f0:	bf00      	nop
}
 80135f2:	bf00      	nop
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 80135fc:	b480      	push	{r7}
 80135fe:	af00      	add	r7, sp, #0
	 __NOP();
 8013600:	bf00      	nop
}
 8013602:	bf00      	nop
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 801360c:	b480      	push	{r7}
 801360e:	af00      	add	r7, sp, #0
	 __NOP();
 8013610:	bf00      	nop
}
 8013612:	bf00      	nop
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 801361c:	b480      	push	{r7}
 801361e:	af00      	add	r7, sp, #0
	 __NOP();
 8013620:	bf00      	nop
}
 8013622:	bf00      	nop
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr

0801362c <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 801362c:	b580      	push	{r7, lr}
 801362e:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 8013630:	4b10      	ldr	r3, [pc, #64]	; (8013674 <USART1_IRQHandler+0x48>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f003 0320 	and.w	r3, r3, #32
 8013638:	2b00      	cmp	r3, #0
 801363a:	d007      	beq.n	801364c <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 801363c:	4b0d      	ldr	r3, [pc, #52]	; (8013674 <USART1_IRQHandler+0x48>)
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	b2da      	uxtb	r2, r3
 8013642:	4b0d      	ldr	r3, [pc, #52]	; (8013678 <USART1_IRQHandler+0x4c>)
 8013644:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 8013646:	f7ff ffe1 	bl	801360c <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 801364a:	e011      	b.n	8013670 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 801364c:	4b09      	ldr	r3, [pc, #36]	; (8013674 <USART1_IRQHandler+0x48>)
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00b      	beq.n	8013670 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 8013658:	4b08      	ldr	r3, [pc, #32]	; (801367c <USART1_IRQHandler+0x50>)
 801365a:	781a      	ldrb	r2, [r3, #0]
 801365c:	4b05      	ldr	r3, [pc, #20]	; (8013674 <USART1_IRQHandler+0x48>)
 801365e:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 8013660:	4b04      	ldr	r3, [pc, #16]	; (8013674 <USART1_IRQHandler+0x48>)
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	4a03      	ldr	r2, [pc, #12]	; (8013674 <USART1_IRQHandler+0x48>)
 8013666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801366a:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 801366c:	f7ff ffb6 	bl	80135dc <Usart1_TX_Callback>
}
 8013670:	bf00      	nop
 8013672:	bd80      	pop	{r7, pc}
 8013674:	40011000 	.word	0x40011000
 8013678:	20004120 	.word	0x20004120
 801367c:	20004121 	.word	0x20004121

08013680 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 8013680:	b580      	push	{r7, lr}
 8013682:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 8013684:	4b10      	ldr	r3, [pc, #64]	; (80136c8 <USART2_IRQHandler+0x48>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f003 0320 	and.w	r3, r3, #32
 801368c:	2b00      	cmp	r3, #0
 801368e:	d007      	beq.n	80136a0 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 8013690:	4b0d      	ldr	r3, [pc, #52]	; (80136c8 <USART2_IRQHandler+0x48>)
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	b2da      	uxtb	r2, r3
 8013696:	4b0d      	ldr	r3, [pc, #52]	; (80136cc <USART2_IRQHandler+0x4c>)
 8013698:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 801369a:	f7ee fced 	bl	8002078 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 801369e:	e011      	b.n	80136c4 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 80136a0:	4b09      	ldr	r3, [pc, #36]	; (80136c8 <USART2_IRQHandler+0x48>)
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d00b      	beq.n	80136c4 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80136ac:	4b08      	ldr	r3, [pc, #32]	; (80136d0 <USART2_IRQHandler+0x50>)
 80136ae:	781a      	ldrb	r2, [r3, #0]
 80136b0:	4b05      	ldr	r3, [pc, #20]	; (80136c8 <USART2_IRQHandler+0x48>)
 80136b2:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80136b4:	4b04      	ldr	r3, [pc, #16]	; (80136c8 <USART2_IRQHandler+0x48>)
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	4a03      	ldr	r2, [pc, #12]	; (80136c8 <USART2_IRQHandler+0x48>)
 80136ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80136be:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80136c0:	f7ff ff94 	bl	80135ec <Usart2_TX_Callback>
}
 80136c4:	bf00      	nop
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	40004400 	.word	0x40004400
 80136cc:	20004120 	.word	0x20004120
 80136d0:	20004121 	.word	0x20004121

080136d4 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 80136d4:	b580      	push	{r7, lr}
 80136d6:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 80136d8:	4b10      	ldr	r3, [pc, #64]	; (801371c <USART6_IRQHandler+0x48>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f003 0320 	and.w	r3, r3, #32
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d007      	beq.n	80136f4 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 80136e4:	4b0d      	ldr	r3, [pc, #52]	; (801371c <USART6_IRQHandler+0x48>)
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	4b0d      	ldr	r3, [pc, #52]	; (8013720 <USART6_IRQHandler+0x4c>)
 80136ec:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 80136ee:	f7ff ff95 	bl	801361c <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 80136f2:	e011      	b.n	8013718 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 80136f4:	4b09      	ldr	r3, [pc, #36]	; (801371c <USART6_IRQHandler+0x48>)
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d00b      	beq.n	8013718 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8013700:	4b08      	ldr	r3, [pc, #32]	; (8013724 <USART6_IRQHandler+0x50>)
 8013702:	781a      	ldrb	r2, [r3, #0]
 8013704:	4b05      	ldr	r3, [pc, #20]	; (801371c <USART6_IRQHandler+0x48>)
 8013706:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8013708:	4b04      	ldr	r3, [pc, #16]	; (801371c <USART6_IRQHandler+0x48>)
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	4a03      	ldr	r2, [pc, #12]	; (801371c <USART6_IRQHandler+0x48>)
 801370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013712:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8013714:	f7ff ff72 	bl	80135fc <Usart6_TX_Callback>
}
 8013718:	bf00      	nop
 801371a:	bd80      	pop	{r7, pc}
 801371c:	40011400 	.word	0x40011400
 8013720:	20004120 	.word	0x20004120
 8013724:	20004121 	.word	0x20004121

08013728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801372c:	4b0e      	ldr	r3, [pc, #56]	; (8013768 <HAL_Init+0x40>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	4a0d      	ldr	r2, [pc, #52]	; (8013768 <HAL_Init+0x40>)
 8013732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8013738:	4b0b      	ldr	r3, [pc, #44]	; (8013768 <HAL_Init+0x40>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	4a0a      	ldr	r2, [pc, #40]	; (8013768 <HAL_Init+0x40>)
 801373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013744:	4b08      	ldr	r3, [pc, #32]	; (8013768 <HAL_Init+0x40>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	4a07      	ldr	r2, [pc, #28]	; (8013768 <HAL_Init+0x40>)
 801374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801374e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013750:	2003      	movs	r0, #3
 8013752:	f000 f94f 	bl	80139f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013756:	2000      	movs	r0, #0
 8013758:	f000 f808 	bl	801376c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801375c:	f7ee fcce 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013760:	2300      	movs	r3, #0
}
 8013762:	4618      	mov	r0, r3
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	40023c00 	.word	0x40023c00

0801376c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013774:	4b12      	ldr	r3, [pc, #72]	; (80137c0 <HAL_InitTick+0x54>)
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	4b12      	ldr	r3, [pc, #72]	; (80137c4 <HAL_InitTick+0x58>)
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	4619      	mov	r1, r3
 801377e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013782:	fbb3 f3f1 	udiv	r3, r3, r1
 8013786:	fbb2 f3f3 	udiv	r3, r2, r3
 801378a:	4618      	mov	r0, r3
 801378c:	f000 f967 	bl	8013a5e <HAL_SYSTICK_Config>
 8013790:	4603      	mov	r3, r0
 8013792:	2b00      	cmp	r3, #0
 8013794:	d001      	beq.n	801379a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8013796:	2301      	movs	r3, #1
 8013798:	e00e      	b.n	80137b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2b0f      	cmp	r3, #15
 801379e:	d80a      	bhi.n	80137b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80137a0:	2200      	movs	r2, #0
 80137a2:	6879      	ldr	r1, [r7, #4]
 80137a4:	f04f 30ff 	mov.w	r0, #4294967295
 80137a8:	f000 f92f 	bl	8013a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80137ac:	4a06      	ldr	r2, [pc, #24]	; (80137c8 <HAL_InitTick+0x5c>)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80137b2:	2300      	movs	r3, #0
 80137b4:	e000      	b.n	80137b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80137b6:	2301      	movs	r3, #1
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	20000004 	.word	0x20000004
 80137c4:	2000003c 	.word	0x2000003c
 80137c8:	20000038 	.word	0x20000038

080137cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80137cc:	b480      	push	{r7}
 80137ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80137d0:	4b06      	ldr	r3, [pc, #24]	; (80137ec <HAL_IncTick+0x20>)
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	461a      	mov	r2, r3
 80137d6:	4b06      	ldr	r3, [pc, #24]	; (80137f0 <HAL_IncTick+0x24>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4413      	add	r3, r2
 80137dc:	4a04      	ldr	r2, [pc, #16]	; (80137f0 <HAL_IncTick+0x24>)
 80137de:	6013      	str	r3, [r2, #0]
}
 80137e0:	bf00      	nop
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	2000003c 	.word	0x2000003c
 80137f0:	20004124 	.word	0x20004124

080137f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80137f4:	b480      	push	{r7}
 80137f6:	af00      	add	r7, sp, #0
  return uwTick;
 80137f8:	4b03      	ldr	r3, [pc, #12]	; (8013808 <HAL_GetTick+0x14>)
 80137fa:	681b      	ldr	r3, [r3, #0]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	46bd      	mov	sp, r7
 8013800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013804:	4770      	bx	lr
 8013806:	bf00      	nop
 8013808:	20004124 	.word	0x20004124

0801380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013814:	f7ff ffee 	bl	80137f4 <HAL_GetTick>
 8013818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013824:	d005      	beq.n	8013832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013826:	4b0a      	ldr	r3, [pc, #40]	; (8013850 <HAL_Delay+0x44>)
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	461a      	mov	r2, r3
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	4413      	add	r3, r2
 8013830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013832:	bf00      	nop
 8013834:	f7ff ffde 	bl	80137f4 <HAL_GetTick>
 8013838:	4602      	mov	r2, r0
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	1ad3      	subs	r3, r2, r3
 801383e:	68fa      	ldr	r2, [r7, #12]
 8013840:	429a      	cmp	r2, r3
 8013842:	d8f7      	bhi.n	8013834 <HAL_Delay+0x28>
  {
  }
}
 8013844:	bf00      	nop
 8013846:	bf00      	nop
 8013848:	3710      	adds	r7, #16
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	2000003c 	.word	0x2000003c

08013854 <__NVIC_SetPriorityGrouping>:
{
 8013854:	b480      	push	{r7}
 8013856:	b085      	sub	sp, #20
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f003 0307 	and.w	r3, r3, #7
 8013862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013864:	4b0c      	ldr	r3, [pc, #48]	; (8013898 <__NVIC_SetPriorityGrouping+0x44>)
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801386a:	68ba      	ldr	r2, [r7, #8]
 801386c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013870:	4013      	ands	r3, r2
 8013872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801387c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013886:	4a04      	ldr	r2, [pc, #16]	; (8013898 <__NVIC_SetPriorityGrouping+0x44>)
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	60d3      	str	r3, [r2, #12]
}
 801388c:	bf00      	nop
 801388e:	3714      	adds	r7, #20
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr
 8013898:	e000ed00 	.word	0xe000ed00

0801389c <__NVIC_GetPriorityGrouping>:
{
 801389c:	b480      	push	{r7}
 801389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80138a0:	4b04      	ldr	r3, [pc, #16]	; (80138b4 <__NVIC_GetPriorityGrouping+0x18>)
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	0a1b      	lsrs	r3, r3, #8
 80138a6:	f003 0307 	and.w	r3, r3, #7
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr
 80138b4:	e000ed00 	.word	0xe000ed00

080138b8 <__NVIC_EnableIRQ>:
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	4603      	mov	r3, r0
 80138c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80138c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	db0b      	blt.n	80138e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80138ca:	79fb      	ldrb	r3, [r7, #7]
 80138cc:	f003 021f 	and.w	r2, r3, #31
 80138d0:	4907      	ldr	r1, [pc, #28]	; (80138f0 <__NVIC_EnableIRQ+0x38>)
 80138d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138d6:	095b      	lsrs	r3, r3, #5
 80138d8:	2001      	movs	r0, #1
 80138da:	fa00 f202 	lsl.w	r2, r0, r2
 80138de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80138e2:	bf00      	nop
 80138e4:	370c      	adds	r7, #12
 80138e6:	46bd      	mov	sp, r7
 80138e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ec:	4770      	bx	lr
 80138ee:	bf00      	nop
 80138f0:	e000e100 	.word	0xe000e100

080138f4 <__NVIC_SetPriority>:
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	4603      	mov	r3, r0
 80138fc:	6039      	str	r1, [r7, #0]
 80138fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013904:	2b00      	cmp	r3, #0
 8013906:	db0a      	blt.n	801391e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	b2da      	uxtb	r2, r3
 801390c:	490c      	ldr	r1, [pc, #48]	; (8013940 <__NVIC_SetPriority+0x4c>)
 801390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013912:	0112      	lsls	r2, r2, #4
 8013914:	b2d2      	uxtb	r2, r2
 8013916:	440b      	add	r3, r1
 8013918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801391c:	e00a      	b.n	8013934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	b2da      	uxtb	r2, r3
 8013922:	4908      	ldr	r1, [pc, #32]	; (8013944 <__NVIC_SetPriority+0x50>)
 8013924:	79fb      	ldrb	r3, [r7, #7]
 8013926:	f003 030f 	and.w	r3, r3, #15
 801392a:	3b04      	subs	r3, #4
 801392c:	0112      	lsls	r2, r2, #4
 801392e:	b2d2      	uxtb	r2, r2
 8013930:	440b      	add	r3, r1
 8013932:	761a      	strb	r2, [r3, #24]
}
 8013934:	bf00      	nop
 8013936:	370c      	adds	r7, #12
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr
 8013940:	e000e100 	.word	0xe000e100
 8013944:	e000ed00 	.word	0xe000ed00

08013948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013948:	b480      	push	{r7}
 801394a:	b089      	sub	sp, #36	; 0x24
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f003 0307 	and.w	r3, r3, #7
 801395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	f1c3 0307 	rsb	r3, r3, #7
 8013962:	2b04      	cmp	r3, #4
 8013964:	bf28      	it	cs
 8013966:	2304      	movcs	r3, #4
 8013968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	3304      	adds	r3, #4
 801396e:	2b06      	cmp	r3, #6
 8013970:	d902      	bls.n	8013978 <NVIC_EncodePriority+0x30>
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	3b03      	subs	r3, #3
 8013976:	e000      	b.n	801397a <NVIC_EncodePriority+0x32>
 8013978:	2300      	movs	r3, #0
 801397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801397c:	f04f 32ff 	mov.w	r2, #4294967295
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	fa02 f303 	lsl.w	r3, r2, r3
 8013986:	43da      	mvns	r2, r3
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	401a      	ands	r2, r3
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013990:	f04f 31ff 	mov.w	r1, #4294967295
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	fa01 f303 	lsl.w	r3, r1, r3
 801399a:	43d9      	mvns	r1, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80139a0:	4313      	orrs	r3, r2
         );
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3724      	adds	r7, #36	; 0x24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
	...

080139b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3b01      	subs	r3, #1
 80139bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80139c0:	d301      	bcc.n	80139c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80139c2:	2301      	movs	r3, #1
 80139c4:	e00f      	b.n	80139e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80139c6:	4a0a      	ldr	r2, [pc, #40]	; (80139f0 <SysTick_Config+0x40>)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	3b01      	subs	r3, #1
 80139cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80139ce:	210f      	movs	r1, #15
 80139d0:	f04f 30ff 	mov.w	r0, #4294967295
 80139d4:	f7ff ff8e 	bl	80138f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80139d8:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <SysTick_Config+0x40>)
 80139da:	2200      	movs	r2, #0
 80139dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80139de:	4b04      	ldr	r3, [pc, #16]	; (80139f0 <SysTick_Config+0x40>)
 80139e0:	2207      	movs	r2, #7
 80139e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80139e4:	2300      	movs	r3, #0
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3708      	adds	r7, #8
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	e000e010 	.word	0xe000e010

080139f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f7ff ff29 	bl	8013854 <__NVIC_SetPriorityGrouping>
}
 8013a02:	bf00      	nop
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b086      	sub	sp, #24
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	4603      	mov	r3, r0
 8013a12:	60b9      	str	r1, [r7, #8]
 8013a14:	607a      	str	r2, [r7, #4]
 8013a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8013a1c:	f7ff ff3e 	bl	801389c <__NVIC_GetPriorityGrouping>
 8013a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013a22:	687a      	ldr	r2, [r7, #4]
 8013a24:	68b9      	ldr	r1, [r7, #8]
 8013a26:	6978      	ldr	r0, [r7, #20]
 8013a28:	f7ff ff8e 	bl	8013948 <NVIC_EncodePriority>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a32:	4611      	mov	r1, r2
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff ff5d 	bl	80138f4 <__NVIC_SetPriority>
}
 8013a3a:	bf00      	nop
 8013a3c:	3718      	adds	r7, #24
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b082      	sub	sp, #8
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	4603      	mov	r3, r0
 8013a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7ff ff31 	bl	80138b8 <__NVIC_EnableIRQ>
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b082      	sub	sp, #8
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f7ff ffa2 	bl	80139b0 <SysTick_Config>
 8013a6c:	4603      	mov	r3, r0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3708      	adds	r7, #8
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
	...

08013a78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b083      	sub	sp, #12
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b04      	cmp	r3, #4
 8013a84:	d106      	bne.n	8013a94 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8013a86:	4b09      	ldr	r3, [pc, #36]	; (8013aac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a08      	ldr	r2, [pc, #32]	; (8013aac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8013a8c:	f043 0304 	orr.w	r3, r3, #4
 8013a90:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8013a92:	e005      	b.n	8013aa0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8013a94:	4b05      	ldr	r3, [pc, #20]	; (8013aac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	4a04      	ldr	r2, [pc, #16]	; (8013aac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8013a9a:	f023 0304 	bic.w	r3, r3, #4
 8013a9e:	6013      	str	r3, [r2, #0]
}
 8013aa0:	bf00      	nop
 8013aa2:	370c      	adds	r7, #12
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr
 8013aac:	e000e010 	.word	0xe000e010

08013ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b089      	sub	sp, #36	; 0x24
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013aba:	2300      	movs	r3, #0
 8013abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	61fb      	str	r3, [r7, #28]
 8013aca:	e159      	b.n	8013d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013acc:	2201      	movs	r2, #1
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8013ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	4013      	ands	r3, r2
 8013ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013ae0:	693a      	ldr	r2, [r7, #16]
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	f040 8148 	bne.w	8013d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	f003 0303 	and.w	r3, r3, #3
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d005      	beq.n	8013b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013afe:	2b02      	cmp	r3, #2
 8013b00:	d130      	bne.n	8013b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	689b      	ldr	r3, [r3, #8]
 8013b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	005b      	lsls	r3, r3, #1
 8013b0c:	2203      	movs	r2, #3
 8013b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b12:	43db      	mvns	r3, r3
 8013b14:	69ba      	ldr	r2, [r7, #24]
 8013b16:	4013      	ands	r3, r2
 8013b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	68da      	ldr	r2, [r3, #12]
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	005b      	lsls	r3, r3, #1
 8013b22:	fa02 f303 	lsl.w	r3, r2, r3
 8013b26:	69ba      	ldr	r2, [r7, #24]
 8013b28:	4313      	orrs	r3, r2
 8013b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	69ba      	ldr	r2, [r7, #24]
 8013b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013b38:	2201      	movs	r2, #1
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b40:	43db      	mvns	r3, r3
 8013b42:	69ba      	ldr	r2, [r7, #24]
 8013b44:	4013      	ands	r3, r2
 8013b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	091b      	lsrs	r3, r3, #4
 8013b4e:	f003 0201 	and.w	r2, r3, #1
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	fa02 f303 	lsl.w	r3, r2, r3
 8013b58:	69ba      	ldr	r2, [r7, #24]
 8013b5a:	4313      	orrs	r3, r2
 8013b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	69ba      	ldr	r2, [r7, #24]
 8013b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	f003 0303 	and.w	r3, r3, #3
 8013b6c:	2b03      	cmp	r3, #3
 8013b6e:	d017      	beq.n	8013ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	005b      	lsls	r3, r3, #1
 8013b7a:	2203      	movs	r2, #3
 8013b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b80:	43db      	mvns	r3, r3
 8013b82:	69ba      	ldr	r2, [r7, #24]
 8013b84:	4013      	ands	r3, r2
 8013b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	689a      	ldr	r2, [r3, #8]
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	fa02 f303 	lsl.w	r3, r2, r3
 8013b94:	69ba      	ldr	r2, [r7, #24]
 8013b96:	4313      	orrs	r3, r2
 8013b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	69ba      	ldr	r2, [r7, #24]
 8013b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	f003 0303 	and.w	r3, r3, #3
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d123      	bne.n	8013bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	08da      	lsrs	r2, r3, #3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	3208      	adds	r2, #8
 8013bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	f003 0307 	and.w	r3, r3, #7
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	220f      	movs	r2, #15
 8013bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8013bc8:	43db      	mvns	r3, r3
 8013bca:	69ba      	ldr	r2, [r7, #24]
 8013bcc:	4013      	ands	r3, r2
 8013bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	691a      	ldr	r2, [r3, #16]
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	f003 0307 	and.w	r3, r3, #7
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8013be0:	69ba      	ldr	r2, [r7, #24]
 8013be2:	4313      	orrs	r3, r2
 8013be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	08da      	lsrs	r2, r3, #3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	3208      	adds	r2, #8
 8013bee:	69b9      	ldr	r1, [r7, #24]
 8013bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	005b      	lsls	r3, r3, #1
 8013bfe:	2203      	movs	r2, #3
 8013c00:	fa02 f303 	lsl.w	r3, r2, r3
 8013c04:	43db      	mvns	r3, r3
 8013c06:	69ba      	ldr	r2, [r7, #24]
 8013c08:	4013      	ands	r3, r2
 8013c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	f003 0203 	and.w	r2, r3, #3
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	005b      	lsls	r3, r3, #1
 8013c18:	fa02 f303 	lsl.w	r3, r2, r3
 8013c1c:	69ba      	ldr	r2, [r7, #24]
 8013c1e:	4313      	orrs	r3, r2
 8013c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	69ba      	ldr	r2, [r7, #24]
 8013c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f000 80a2 	beq.w	8013d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013c36:	2300      	movs	r3, #0
 8013c38:	60fb      	str	r3, [r7, #12]
 8013c3a:	4b57      	ldr	r3, [pc, #348]	; (8013d98 <HAL_GPIO_Init+0x2e8>)
 8013c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c3e:	4a56      	ldr	r2, [pc, #344]	; (8013d98 <HAL_GPIO_Init+0x2e8>)
 8013c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013c44:	6453      	str	r3, [r2, #68]	; 0x44
 8013c46:	4b54      	ldr	r3, [pc, #336]	; (8013d98 <HAL_GPIO_Init+0x2e8>)
 8013c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013c4e:	60fb      	str	r3, [r7, #12]
 8013c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013c52:	4a52      	ldr	r2, [pc, #328]	; (8013d9c <HAL_GPIO_Init+0x2ec>)
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	089b      	lsrs	r3, r3, #2
 8013c58:	3302      	adds	r3, #2
 8013c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	f003 0303 	and.w	r3, r3, #3
 8013c66:	009b      	lsls	r3, r3, #2
 8013c68:	220f      	movs	r2, #15
 8013c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c6e:	43db      	mvns	r3, r3
 8013c70:	69ba      	ldr	r2, [r7, #24]
 8013c72:	4013      	ands	r3, r2
 8013c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	4a49      	ldr	r2, [pc, #292]	; (8013da0 <HAL_GPIO_Init+0x2f0>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d019      	beq.n	8013cb2 <HAL_GPIO_Init+0x202>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	4a48      	ldr	r2, [pc, #288]	; (8013da4 <HAL_GPIO_Init+0x2f4>)
 8013c82:	4293      	cmp	r3, r2
 8013c84:	d013      	beq.n	8013cae <HAL_GPIO_Init+0x1fe>
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	4a47      	ldr	r2, [pc, #284]	; (8013da8 <HAL_GPIO_Init+0x2f8>)
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d00d      	beq.n	8013caa <HAL_GPIO_Init+0x1fa>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	4a46      	ldr	r2, [pc, #280]	; (8013dac <HAL_GPIO_Init+0x2fc>)
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d007      	beq.n	8013ca6 <HAL_GPIO_Init+0x1f6>
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	4a45      	ldr	r2, [pc, #276]	; (8013db0 <HAL_GPIO_Init+0x300>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d101      	bne.n	8013ca2 <HAL_GPIO_Init+0x1f2>
 8013c9e:	2304      	movs	r3, #4
 8013ca0:	e008      	b.n	8013cb4 <HAL_GPIO_Init+0x204>
 8013ca2:	2307      	movs	r3, #7
 8013ca4:	e006      	b.n	8013cb4 <HAL_GPIO_Init+0x204>
 8013ca6:	2303      	movs	r3, #3
 8013ca8:	e004      	b.n	8013cb4 <HAL_GPIO_Init+0x204>
 8013caa:	2302      	movs	r3, #2
 8013cac:	e002      	b.n	8013cb4 <HAL_GPIO_Init+0x204>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	e000      	b.n	8013cb4 <HAL_GPIO_Init+0x204>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	69fa      	ldr	r2, [r7, #28]
 8013cb6:	f002 0203 	and.w	r2, r2, #3
 8013cba:	0092      	lsls	r2, r2, #2
 8013cbc:	4093      	lsls	r3, r2
 8013cbe:	69ba      	ldr	r2, [r7, #24]
 8013cc0:	4313      	orrs	r3, r2
 8013cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013cc4:	4935      	ldr	r1, [pc, #212]	; (8013d9c <HAL_GPIO_Init+0x2ec>)
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	089b      	lsrs	r3, r3, #2
 8013cca:	3302      	adds	r3, #2
 8013ccc:	69ba      	ldr	r2, [r7, #24]
 8013cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013cd2:	4b38      	ldr	r3, [pc, #224]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013cd4:	689b      	ldr	r3, [r3, #8]
 8013cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	43db      	mvns	r3, r3
 8013cdc:	69ba      	ldr	r2, [r7, #24]
 8013cde:	4013      	ands	r3, r2
 8013ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d003      	beq.n	8013cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8013cee:	69ba      	ldr	r2, [r7, #24]
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	4313      	orrs	r3, r2
 8013cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013cf6:	4a2f      	ldr	r2, [pc, #188]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013cf8:	69bb      	ldr	r3, [r7, #24]
 8013cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013cfc:	4b2d      	ldr	r3, [pc, #180]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	43db      	mvns	r3, r3
 8013d06:	69ba      	ldr	r2, [r7, #24]
 8013d08:	4013      	ands	r3, r2
 8013d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d003      	beq.n	8013d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8013d18:	69ba      	ldr	r2, [r7, #24]
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013d20:	4a24      	ldr	r2, [pc, #144]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8013d26:	4b23      	ldr	r3, [pc, #140]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	43db      	mvns	r3, r3
 8013d30:	69ba      	ldr	r2, [r7, #24]
 8013d32:	4013      	ands	r3, r2
 8013d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d003      	beq.n	8013d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8013d42:	69ba      	ldr	r2, [r7, #24]
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	4313      	orrs	r3, r2
 8013d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013d4a:	4a1a      	ldr	r2, [pc, #104]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013d50:	4b18      	ldr	r3, [pc, #96]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	43db      	mvns	r3, r3
 8013d5a:	69ba      	ldr	r2, [r7, #24]
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d003      	beq.n	8013d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8013d6c:	69ba      	ldr	r2, [r7, #24]
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	4313      	orrs	r3, r2
 8013d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013d74:	4a0f      	ldr	r2, [pc, #60]	; (8013db4 <HAL_GPIO_Init+0x304>)
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	61fb      	str	r3, [r7, #28]
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	2b0f      	cmp	r3, #15
 8013d84:	f67f aea2 	bls.w	8013acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013d88:	bf00      	nop
 8013d8a:	bf00      	nop
 8013d8c:	3724      	adds	r7, #36	; 0x24
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	40023800 	.word	0x40023800
 8013d9c:	40013800 	.word	0x40013800
 8013da0:	40020000 	.word	0x40020000
 8013da4:	40020400 	.word	0x40020400
 8013da8:	40020800 	.word	0x40020800
 8013dac:	40020c00 	.word	0x40020c00
 8013db0:	40021000 	.word	0x40021000
 8013db4:	40013c00 	.word	0x40013c00

08013db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b085      	sub	sp, #20
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	691a      	ldr	r2, [r3, #16]
 8013dc8:	887b      	ldrh	r3, [r7, #2]
 8013dca:	4013      	ands	r3, r2
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d002      	beq.n	8013dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	73fb      	strb	r3, [r7, #15]
 8013dd4:	e001      	b.n	8013dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3714      	adds	r7, #20
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	460b      	mov	r3, r1
 8013df2:	807b      	strh	r3, [r7, #2]
 8013df4:	4613      	mov	r3, r2
 8013df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013df8:	787b      	ldrb	r3, [r7, #1]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d003      	beq.n	8013e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013dfe:	887a      	ldrh	r2, [r7, #2]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013e04:	e003      	b.n	8013e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013e06:	887b      	ldrh	r3, [r7, #2]
 8013e08:	041a      	lsls	r2, r3, #16
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	619a      	str	r2, [r3, #24]
}
 8013e0e:	bf00      	nop
 8013e10:	370c      	adds	r7, #12
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr
	...

08013e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	4603      	mov	r3, r0
 8013e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8013e26:	4b08      	ldr	r3, [pc, #32]	; (8013e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013e28:	695a      	ldr	r2, [r3, #20]
 8013e2a:	88fb      	ldrh	r3, [r7, #6]
 8013e2c:	4013      	ands	r3, r2
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d006      	beq.n	8013e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013e32:	4a05      	ldr	r2, [pc, #20]	; (8013e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013e34:	88fb      	ldrh	r3, [r7, #6]
 8013e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013e38:	88fb      	ldrh	r3, [r7, #6]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ed f956 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
}
 8013e40:	bf00      	nop
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	40013c00 	.word	0x40013c00

08013e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e12b      	b.n	80140b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d106      	bne.n	8013e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7ee f994 	bl	80021a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2224      	movs	r2, #36	; 0x24
 8013e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	f022 0201 	bic.w	r2, r2, #1
 8013e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	681a      	ldr	r2, [r3, #0]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8013eb0:	f001 fbd2 	bl	8015658 <HAL_RCC_GetPCLK1Freq>
 8013eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	4a81      	ldr	r2, [pc, #516]	; (80140c0 <HAL_I2C_Init+0x274>)
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d807      	bhi.n	8013ed0 <HAL_I2C_Init+0x84>
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	4a80      	ldr	r2, [pc, #512]	; (80140c4 <HAL_I2C_Init+0x278>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	bf94      	ite	ls
 8013ec8:	2301      	movls	r3, #1
 8013eca:	2300      	movhi	r3, #0
 8013ecc:	b2db      	uxtb	r3, r3
 8013ece:	e006      	b.n	8013ede <HAL_I2C_Init+0x92>
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4a7d      	ldr	r2, [pc, #500]	; (80140c8 <HAL_I2C_Init+0x27c>)
 8013ed4:	4293      	cmp	r3, r2
 8013ed6:	bf94      	ite	ls
 8013ed8:	2301      	movls	r3, #1
 8013eda:	2300      	movhi	r3, #0
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d001      	beq.n	8013ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	e0e7      	b.n	80140b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4a78      	ldr	r2, [pc, #480]	; (80140cc <HAL_I2C_Init+0x280>)
 8013eea:	fba2 2303 	umull	r2, r3, r2, r3
 8013eee:	0c9b      	lsrs	r3, r3, #18
 8013ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	685b      	ldr	r3, [r3, #4]
 8013ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	68ba      	ldr	r2, [r7, #8]
 8013f02:	430a      	orrs	r2, r1
 8013f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	6a1b      	ldr	r3, [r3, #32]
 8013f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	4a6a      	ldr	r2, [pc, #424]	; (80140c0 <HAL_I2C_Init+0x274>)
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d802      	bhi.n	8013f20 <HAL_I2C_Init+0xd4>
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	e009      	b.n	8013f34 <HAL_I2C_Init+0xe8>
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013f26:	fb02 f303 	mul.w	r3, r2, r3
 8013f2a:	4a69      	ldr	r2, [pc, #420]	; (80140d0 <HAL_I2C_Init+0x284>)
 8013f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8013f30:	099b      	lsrs	r3, r3, #6
 8013f32:	3301      	adds	r3, #1
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	6812      	ldr	r2, [r2, #0]
 8013f38:	430b      	orrs	r3, r1
 8013f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	69db      	ldr	r3, [r3, #28]
 8013f42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8013f46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	495c      	ldr	r1, [pc, #368]	; (80140c0 <HAL_I2C_Init+0x274>)
 8013f50:	428b      	cmp	r3, r1
 8013f52:	d819      	bhi.n	8013f88 <HAL_I2C_Init+0x13c>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	1e59      	subs	r1, r3, #1
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013f62:	1c59      	adds	r1, r3, #1
 8013f64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013f68:	400b      	ands	r3, r1
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00a      	beq.n	8013f84 <HAL_I2C_Init+0x138>
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	1e59      	subs	r1, r3, #1
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	005b      	lsls	r3, r3, #1
 8013f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f82:	e051      	b.n	8014028 <HAL_I2C_Init+0x1dc>
 8013f84:	2304      	movs	r3, #4
 8013f86:	e04f      	b.n	8014028 <HAL_I2C_Init+0x1dc>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d111      	bne.n	8013fb4 <HAL_I2C_Init+0x168>
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	1e58      	subs	r0, r3, #1
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6859      	ldr	r1, [r3, #4]
 8013f98:	460b      	mov	r3, r1
 8013f9a:	005b      	lsls	r3, r3, #1
 8013f9c:	440b      	add	r3, r1
 8013f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	bf0c      	ite	eq
 8013fac:	2301      	moveq	r3, #1
 8013fae:	2300      	movne	r3, #0
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	e012      	b.n	8013fda <HAL_I2C_Init+0x18e>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	1e58      	subs	r0, r3, #1
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6859      	ldr	r1, [r3, #4]
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	440b      	add	r3, r1
 8013fc2:	0099      	lsls	r1, r3, #2
 8013fc4:	440b      	add	r3, r1
 8013fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8013fca:	3301      	adds	r3, #1
 8013fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	bf0c      	ite	eq
 8013fd4:	2301      	moveq	r3, #1
 8013fd6:	2300      	movne	r3, #0
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d001      	beq.n	8013fe2 <HAL_I2C_Init+0x196>
 8013fde:	2301      	movs	r3, #1
 8013fe0:	e022      	b.n	8014028 <HAL_I2C_Init+0x1dc>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	689b      	ldr	r3, [r3, #8]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d10e      	bne.n	8014008 <HAL_I2C_Init+0x1bc>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	1e58      	subs	r0, r3, #1
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6859      	ldr	r1, [r3, #4]
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	005b      	lsls	r3, r3, #1
 8013ff6:	440b      	add	r3, r1
 8013ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014006:	e00f      	b.n	8014028 <HAL_I2C_Init+0x1dc>
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	1e58      	subs	r0, r3, #1
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6859      	ldr	r1, [r3, #4]
 8014010:	460b      	mov	r3, r1
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	440b      	add	r3, r1
 8014016:	0099      	lsls	r1, r3, #2
 8014018:	440b      	add	r3, r1
 801401a:	fbb0 f3f3 	udiv	r3, r0, r3
 801401e:	3301      	adds	r3, #1
 8014020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014028:	6879      	ldr	r1, [r7, #4]
 801402a:	6809      	ldr	r1, [r1, #0]
 801402c:	4313      	orrs	r3, r2
 801402e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	69da      	ldr	r2, [r3, #28]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6a1b      	ldr	r3, [r3, #32]
 8014042:	431a      	orrs	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	430a      	orrs	r2, r1
 801404a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	689b      	ldr	r3, [r3, #8]
 8014052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8014056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	6911      	ldr	r1, [r2, #16]
 801405e:	687a      	ldr	r2, [r7, #4]
 8014060:	68d2      	ldr	r2, [r2, #12]
 8014062:	4311      	orrs	r1, r2
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	6812      	ldr	r2, [r2, #0]
 8014068:	430b      	orrs	r3, r1
 801406a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	695a      	ldr	r2, [r3, #20]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	699b      	ldr	r3, [r3, #24]
 801407e:	431a      	orrs	r2, r3
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	430a      	orrs	r2, r1
 8014086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	f042 0201 	orr.w	r2, r2, #1
 8014096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2200      	movs	r2, #0
 801409c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2220      	movs	r2, #32
 80140a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2200      	movs	r2, #0
 80140aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2200      	movs	r2, #0
 80140b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80140b4:	2300      	movs	r3, #0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	000186a0 	.word	0x000186a0
 80140c4:	001e847f 	.word	0x001e847f
 80140c8:	003d08ff 	.word	0x003d08ff
 80140cc:	431bde83 	.word	0x431bde83
 80140d0:	10624dd3 	.word	0x10624dd3

080140d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b088      	sub	sp, #32
 80140d8:	af02      	add	r7, sp, #8
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	607a      	str	r2, [r7, #4]
 80140de:	461a      	mov	r2, r3
 80140e0:	460b      	mov	r3, r1
 80140e2:	817b      	strh	r3, [r7, #10]
 80140e4:	4613      	mov	r3, r2
 80140e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80140e8:	f7ff fb84 	bl	80137f4 <HAL_GetTick>
 80140ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	2b20      	cmp	r3, #32
 80140f8:	f040 80e0 	bne.w	80142bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	2319      	movs	r3, #25
 8014102:	2201      	movs	r2, #1
 8014104:	4970      	ldr	r1, [pc, #448]	; (80142c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f000 fc58 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 801410c:	4603      	mov	r3, r0
 801410e:	2b00      	cmp	r3, #0
 8014110:	d001      	beq.n	8014116 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8014112:	2302      	movs	r3, #2
 8014114:	e0d3      	b.n	80142be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801411c:	2b01      	cmp	r3, #1
 801411e:	d101      	bne.n	8014124 <HAL_I2C_Master_Transmit+0x50>
 8014120:	2302      	movs	r3, #2
 8014122:	e0cc      	b.n	80142be <HAL_I2C_Master_Transmit+0x1ea>
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	2201      	movs	r2, #1
 8014128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f003 0301 	and.w	r3, r3, #1
 8014136:	2b01      	cmp	r3, #1
 8014138:	d007      	beq.n	801414a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f042 0201 	orr.w	r2, r2, #1
 8014148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014158:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2221      	movs	r2, #33	; 0x21
 801415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2210      	movs	r2, #16
 8014166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2200      	movs	r2, #0
 801416e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	893a      	ldrh	r2, [r7, #8]
 801417a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014180:	b29a      	uxth	r2, r3
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	4a50      	ldr	r2, [pc, #320]	; (80142cc <HAL_I2C_Master_Transmit+0x1f8>)
 801418a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801418c:	8979      	ldrh	r1, [r7, #10]
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	6a3a      	ldr	r2, [r7, #32]
 8014192:	68f8      	ldr	r0, [r7, #12]
 8014194:	f000 fac2 	bl	801471c <I2C_MasterRequestWrite>
 8014198:	4603      	mov	r3, r0
 801419a:	2b00      	cmp	r3, #0
 801419c:	d001      	beq.n	80141a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801419e:	2301      	movs	r3, #1
 80141a0:	e08d      	b.n	80142be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80141a2:	2300      	movs	r3, #0
 80141a4:	613b      	str	r3, [r7, #16]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	695b      	ldr	r3, [r3, #20]
 80141ac:	613b      	str	r3, [r7, #16]
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	699b      	ldr	r3, [r3, #24]
 80141b4:	613b      	str	r3, [r7, #16]
 80141b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80141b8:	e066      	b.n	8014288 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	6a39      	ldr	r1, [r7, #32]
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	f000 fcd2 	bl	8014b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00d      	beq.n	80141e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ce:	2b04      	cmp	r3, #4
 80141d0:	d107      	bne.n	80141e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80141e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80141e2:	2301      	movs	r3, #1
 80141e4:	e06b      	b.n	80142be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ea:	781a      	ldrb	r2, [r3, #0]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f6:	1c5a      	adds	r2, r3, #1
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014200:	b29b      	uxth	r3, r3
 8014202:	3b01      	subs	r3, #1
 8014204:	b29a      	uxth	r2, r3
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801420e:	3b01      	subs	r3, #1
 8014210:	b29a      	uxth	r2, r3
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	695b      	ldr	r3, [r3, #20]
 801421c:	f003 0304 	and.w	r3, r3, #4
 8014220:	2b04      	cmp	r3, #4
 8014222:	d11b      	bne.n	801425c <HAL_I2C_Master_Transmit+0x188>
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014228:	2b00      	cmp	r3, #0
 801422a:	d017      	beq.n	801425c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014230:	781a      	ldrb	r2, [r3, #0]
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423c:	1c5a      	adds	r2, r3, #1
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014246:	b29b      	uxth	r3, r3
 8014248:	3b01      	subs	r3, #1
 801424a:	b29a      	uxth	r2, r3
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014254:	3b01      	subs	r3, #1
 8014256:	b29a      	uxth	r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801425c:	697a      	ldr	r2, [r7, #20]
 801425e:	6a39      	ldr	r1, [r7, #32]
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f000 fcc2 	bl	8014bea <I2C_WaitOnBTFFlagUntilTimeout>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d00d      	beq.n	8014288 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014270:	2b04      	cmp	r3, #4
 8014272:	d107      	bne.n	8014284 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014282:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8014284:	2301      	movs	r3, #1
 8014286:	e01a      	b.n	80142be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801428c:	2b00      	cmp	r3, #0
 801428e:	d194      	bne.n	80141ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801429e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2220      	movs	r2, #32
 80142a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	2200      	movs	r2, #0
 80142ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2200      	movs	r2, #0
 80142b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80142b8:	2300      	movs	r3, #0
 80142ba:	e000      	b.n	80142be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80142bc:	2302      	movs	r3, #2
  }
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3718      	adds	r7, #24
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	00100002 	.word	0x00100002
 80142cc:	ffff0000 	.word	0xffff0000

080142d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b08c      	sub	sp, #48	; 0x30
 80142d4:	af02      	add	r7, sp, #8
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	607a      	str	r2, [r7, #4]
 80142da:	461a      	mov	r2, r3
 80142dc:	460b      	mov	r3, r1
 80142de:	817b      	strh	r3, [r7, #10]
 80142e0:	4613      	mov	r3, r2
 80142e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80142e4:	f7ff fa86 	bl	80137f4 <HAL_GetTick>
 80142e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	2b20      	cmp	r3, #32
 80142f4:	f040 820b 	bne.w	801470e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	2319      	movs	r3, #25
 80142fe:	2201      	movs	r2, #1
 8014300:	497c      	ldr	r1, [pc, #496]	; (80144f4 <HAL_I2C_Master_Receive+0x224>)
 8014302:	68f8      	ldr	r0, [r7, #12]
 8014304:	f000 fb5a 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d001      	beq.n	8014312 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 801430e:	2302      	movs	r3, #2
 8014310:	e1fe      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014318:	2b01      	cmp	r3, #1
 801431a:	d101      	bne.n	8014320 <HAL_I2C_Master_Receive+0x50>
 801431c:	2302      	movs	r3, #2
 801431e:	e1f7      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2201      	movs	r2, #1
 8014324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	f003 0301 	and.w	r3, r3, #1
 8014332:	2b01      	cmp	r3, #1
 8014334:	d007      	beq.n	8014346 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	f042 0201 	orr.w	r2, r2, #1
 8014344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2222      	movs	r2, #34	; 0x22
 801435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	2210      	movs	r2, #16
 8014362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	2200      	movs	r2, #0
 801436a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	893a      	ldrh	r2, [r7, #8]
 8014376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801437c:	b29a      	uxth	r2, r3
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	4a5c      	ldr	r2, [pc, #368]	; (80144f8 <HAL_I2C_Master_Receive+0x228>)
 8014386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8014388:	8979      	ldrh	r1, [r7, #10]
 801438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801438e:	68f8      	ldr	r0, [r7, #12]
 8014390:	f000 fa46 	bl	8014820 <I2C_MasterRequestRead>
 8014394:	4603      	mov	r3, r0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d001      	beq.n	801439e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801439a:	2301      	movs	r3, #1
 801439c:	e1b8      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d113      	bne.n	80143ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80143a6:	2300      	movs	r3, #0
 80143a8:	623b      	str	r3, [r7, #32]
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	695b      	ldr	r3, [r3, #20]
 80143b0:	623b      	str	r3, [r7, #32]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	699b      	ldr	r3, [r3, #24]
 80143b8:	623b      	str	r3, [r7, #32]
 80143ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80143ca:	601a      	str	r2, [r3, #0]
 80143cc:	e18c      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d11b      	bne.n	801440e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80143e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80143e6:	2300      	movs	r3, #0
 80143e8:	61fb      	str	r3, [r7, #28]
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	695b      	ldr	r3, [r3, #20]
 80143f0:	61fb      	str	r3, [r7, #28]
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	699b      	ldr	r3, [r3, #24]
 80143f8:	61fb      	str	r3, [r7, #28]
 80143fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	681a      	ldr	r2, [r3, #0]
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801440a:	601a      	str	r2, [r3, #0]
 801440c:	e16c      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014412:	2b02      	cmp	r3, #2
 8014414:	d11b      	bne.n	801444e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014424:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	681a      	ldr	r2, [r3, #0]
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014436:	2300      	movs	r3, #0
 8014438:	61bb      	str	r3, [r7, #24]
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	695b      	ldr	r3, [r3, #20]
 8014440:	61bb      	str	r3, [r7, #24]
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	699b      	ldr	r3, [r3, #24]
 8014448:	61bb      	str	r3, [r7, #24]
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	e14c      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801445c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801445e:	2300      	movs	r3, #0
 8014460:	617b      	str	r3, [r7, #20]
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	695b      	ldr	r3, [r3, #20]
 8014468:	617b      	str	r3, [r7, #20]
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	699b      	ldr	r3, [r3, #24]
 8014470:	617b      	str	r3, [r7, #20]
 8014472:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8014474:	e138      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801447a:	2b03      	cmp	r3, #3
 801447c:	f200 80f1 	bhi.w	8014662 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014484:	2b01      	cmp	r3, #1
 8014486:	d123      	bne.n	80144d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801448a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f000 fbed 	bl	8014c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d001      	beq.n	801449c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8014498:	2301      	movs	r3, #1
 801449a:	e139      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	691a      	ldr	r2, [r3, #16]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a6:	b2d2      	uxtb	r2, r2
 80144a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ae:	1c5a      	adds	r2, r3, #1
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144b8:	3b01      	subs	r3, #1
 80144ba:	b29a      	uxth	r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	3b01      	subs	r3, #1
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80144ce:	e10b      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144d4:	2b02      	cmp	r3, #2
 80144d6:	d14e      	bne.n	8014576 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80144d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144de:	2200      	movs	r2, #0
 80144e0:	4906      	ldr	r1, [pc, #24]	; (80144fc <HAL_I2C_Master_Receive+0x22c>)
 80144e2:	68f8      	ldr	r0, [r7, #12]
 80144e4:	f000 fa6a 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 80144e8:	4603      	mov	r3, r0
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d008      	beq.n	8014500 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80144ee:	2301      	movs	r3, #1
 80144f0:	e10e      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
 80144f2:	bf00      	nop
 80144f4:	00100002 	.word	0x00100002
 80144f8:	ffff0000 	.word	0xffff0000
 80144fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801450e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	691a      	ldr	r2, [r3, #16]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801451a:	b2d2      	uxtb	r2, r2
 801451c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014522:	1c5a      	adds	r2, r3, #1
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801452c:	3b01      	subs	r3, #1
 801452e:	b29a      	uxth	r2, r3
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014538:	b29b      	uxth	r3, r3
 801453a:	3b01      	subs	r3, #1
 801453c:	b29a      	uxth	r2, r3
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	691a      	ldr	r2, [r3, #16]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801454c:	b2d2      	uxtb	r2, r2
 801454e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014554:	1c5a      	adds	r2, r3, #1
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801455e:	3b01      	subs	r3, #1
 8014560:	b29a      	uxth	r2, r3
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801456a:	b29b      	uxth	r3, r3
 801456c:	3b01      	subs	r3, #1
 801456e:	b29a      	uxth	r2, r3
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014574:	e0b8      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801457c:	2200      	movs	r2, #0
 801457e:	4966      	ldr	r1, [pc, #408]	; (8014718 <HAL_I2C_Master_Receive+0x448>)
 8014580:	68f8      	ldr	r0, [r7, #12]
 8014582:	f000 fa1b 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 8014586:	4603      	mov	r3, r0
 8014588:	2b00      	cmp	r3, #0
 801458a:	d001      	beq.n	8014590 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801458c:	2301      	movs	r3, #1
 801458e:	e0bf      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801459e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	691a      	ldr	r2, [r3, #16]
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145aa:	b2d2      	uxtb	r2, r2
 80145ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b2:	1c5a      	adds	r2, r3, #1
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145bc:	3b01      	subs	r3, #1
 80145be:	b29a      	uxth	r2, r3
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	3b01      	subs	r3, #1
 80145cc:	b29a      	uxth	r2, r3
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80145d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d8:	2200      	movs	r2, #0
 80145da:	494f      	ldr	r1, [pc, #316]	; (8014718 <HAL_I2C_Master_Receive+0x448>)
 80145dc:	68f8      	ldr	r0, [r7, #12]
 80145de:	f000 f9ed 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d001      	beq.n	80145ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80145e8:	2301      	movs	r3, #1
 80145ea:	e091      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80145fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	691a      	ldr	r2, [r3, #16]
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014606:	b2d2      	uxtb	r2, r2
 8014608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801460e:	1c5a      	adds	r2, r3, #1
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014618:	3b01      	subs	r3, #1
 801461a:	b29a      	uxth	r2, r3
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014624:	b29b      	uxth	r3, r3
 8014626:	3b01      	subs	r3, #1
 8014628:	b29a      	uxth	r2, r3
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	691a      	ldr	r2, [r3, #16]
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014638:	b2d2      	uxtb	r2, r2
 801463a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014640:	1c5a      	adds	r2, r3, #1
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801464a:	3b01      	subs	r3, #1
 801464c:	b29a      	uxth	r2, r3
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014656:	b29b      	uxth	r3, r3
 8014658:	3b01      	subs	r3, #1
 801465a:	b29a      	uxth	r2, r3
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014660:	e042      	b.n	80146e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014666:	68f8      	ldr	r0, [r7, #12]
 8014668:	f000 fb00 	bl	8014c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d001      	beq.n	8014676 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8014672:	2301      	movs	r3, #1
 8014674:	e04c      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	691a      	ldr	r2, [r3, #16]
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014680:	b2d2      	uxtb	r2, r2
 8014682:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014688:	1c5a      	adds	r2, r3, #1
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014692:	3b01      	subs	r3, #1
 8014694:	b29a      	uxth	r2, r3
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801469e:	b29b      	uxth	r3, r3
 80146a0:	3b01      	subs	r3, #1
 80146a2:	b29a      	uxth	r2, r3
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	695b      	ldr	r3, [r3, #20]
 80146ae:	f003 0304 	and.w	r3, r3, #4
 80146b2:	2b04      	cmp	r3, #4
 80146b4:	d118      	bne.n	80146e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	691a      	ldr	r2, [r3, #16]
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c0:	b2d2      	uxtb	r2, r2
 80146c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c8:	1c5a      	adds	r2, r3, #1
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146d2:	3b01      	subs	r3, #1
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80146de:	b29b      	uxth	r3, r3
 80146e0:	3b01      	subs	r3, #1
 80146e2:	b29a      	uxth	r2, r3
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	f47f aec2 	bne.w	8014476 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2220      	movs	r2, #32
 80146f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2200      	movs	r2, #0
 80146fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2200      	movs	r2, #0
 8014706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801470a:	2300      	movs	r3, #0
 801470c:	e000      	b.n	8014710 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 801470e:	2302      	movs	r3, #2
  }
}
 8014710:	4618      	mov	r0, r3
 8014712:	3728      	adds	r7, #40	; 0x28
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	00010004 	.word	0x00010004

0801471c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b088      	sub	sp, #32
 8014720:	af02      	add	r7, sp, #8
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	607a      	str	r2, [r7, #4]
 8014726:	603b      	str	r3, [r7, #0]
 8014728:	460b      	mov	r3, r1
 801472a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014730:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	2b08      	cmp	r3, #8
 8014736:	d006      	beq.n	8014746 <I2C_MasterRequestWrite+0x2a>
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	2b01      	cmp	r3, #1
 801473c:	d003      	beq.n	8014746 <I2C_MasterRequestWrite+0x2a>
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014744:	d108      	bne.n	8014758 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	681a      	ldr	r2, [r3, #0]
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	e00b      	b.n	8014770 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801475c:	2b12      	cmp	r3, #18
 801475e:	d107      	bne.n	8014770 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	681a      	ldr	r2, [r3, #0]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801476e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801477c:	68f8      	ldr	r0, [r7, #12]
 801477e:	f000 f91d 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 8014782:	4603      	mov	r3, r0
 8014784:	2b00      	cmp	r3, #0
 8014786:	d00d      	beq.n	80147a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014796:	d103      	bne.n	80147a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801479e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80147a0:	2303      	movs	r3, #3
 80147a2:	e035      	b.n	8014810 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147ac:	d108      	bne.n	80147c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80147ae:	897b      	ldrh	r3, [r7, #10]
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	461a      	mov	r2, r3
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80147bc:	611a      	str	r2, [r3, #16]
 80147be:	e01b      	b.n	80147f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80147c0:	897b      	ldrh	r3, [r7, #10]
 80147c2:	11db      	asrs	r3, r3, #7
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	f003 0306 	and.w	r3, r3, #6
 80147ca:	b2db      	uxtb	r3, r3
 80147cc:	f063 030f 	orn	r3, r3, #15
 80147d0:	b2da      	uxtb	r2, r3
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	490e      	ldr	r1, [pc, #56]	; (8014818 <I2C_MasterRequestWrite+0xfc>)
 80147de:	68f8      	ldr	r0, [r7, #12]
 80147e0:	f000 f943 	bl	8014a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d001      	beq.n	80147ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80147ea:	2301      	movs	r3, #1
 80147ec:	e010      	b.n	8014810 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80147ee:	897b      	ldrh	r3, [r7, #10]
 80147f0:	b2da      	uxtb	r2, r3
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	687a      	ldr	r2, [r7, #4]
 80147fc:	4907      	ldr	r1, [pc, #28]	; (801481c <I2C_MasterRequestWrite+0x100>)
 80147fe:	68f8      	ldr	r0, [r7, #12]
 8014800:	f000 f933 	bl	8014a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014804:	4603      	mov	r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	d001      	beq.n	801480e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801480a:	2301      	movs	r3, #1
 801480c:	e000      	b.n	8014810 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801480e:	2300      	movs	r3, #0
}
 8014810:	4618      	mov	r0, r3
 8014812:	3718      	adds	r7, #24
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}
 8014818:	00010008 	.word	0x00010008
 801481c:	00010002 	.word	0x00010002

08014820 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b088      	sub	sp, #32
 8014824:	af02      	add	r7, sp, #8
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	607a      	str	r2, [r7, #4]
 801482a:	603b      	str	r3, [r7, #0]
 801482c:	460b      	mov	r3, r1
 801482e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014834:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014844:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	2b08      	cmp	r3, #8
 801484a:	d006      	beq.n	801485a <I2C_MasterRequestRead+0x3a>
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	2b01      	cmp	r3, #1
 8014850:	d003      	beq.n	801485a <I2C_MasterRequestRead+0x3a>
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014858:	d108      	bne.n	801486c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014868:	601a      	str	r2, [r3, #0]
 801486a:	e00b      	b.n	8014884 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014870:	2b11      	cmp	r3, #17
 8014872:	d107      	bne.n	8014884 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	681a      	ldr	r2, [r3, #0]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014890:	68f8      	ldr	r0, [r7, #12]
 8014892:	f000 f893 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d00d      	beq.n	80148b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148aa:	d103      	bne.n	80148b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80148b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80148b4:	2303      	movs	r3, #3
 80148b6:	e079      	b.n	80149ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	691b      	ldr	r3, [r3, #16]
 80148bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148c0:	d108      	bne.n	80148d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80148c2:	897b      	ldrh	r3, [r7, #10]
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	f043 0301 	orr.w	r3, r3, #1
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	611a      	str	r2, [r3, #16]
 80148d2:	e05f      	b.n	8014994 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80148d4:	897b      	ldrh	r3, [r7, #10]
 80148d6:	11db      	asrs	r3, r3, #7
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	f003 0306 	and.w	r3, r3, #6
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	f063 030f 	orn	r3, r3, #15
 80148e4:	b2da      	uxtb	r2, r3
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	4930      	ldr	r1, [pc, #192]	; (80149b4 <I2C_MasterRequestRead+0x194>)
 80148f2:	68f8      	ldr	r0, [r7, #12]
 80148f4:	f000 f8b9 	bl	8014a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80148f8:	4603      	mov	r3, r0
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d001      	beq.n	8014902 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80148fe:	2301      	movs	r3, #1
 8014900:	e054      	b.n	80149ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8014902:	897b      	ldrh	r3, [r7, #10]
 8014904:	b2da      	uxtb	r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	4929      	ldr	r1, [pc, #164]	; (80149b8 <I2C_MasterRequestRead+0x198>)
 8014912:	68f8      	ldr	r0, [r7, #12]
 8014914:	f000 f8a9 	bl	8014a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	e044      	b.n	80149ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014922:	2300      	movs	r3, #0
 8014924:	613b      	str	r3, [r7, #16]
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	695b      	ldr	r3, [r3, #20]
 801492c:	613b      	str	r3, [r7, #16]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	699b      	ldr	r3, [r3, #24]
 8014934:	613b      	str	r3, [r7, #16]
 8014936:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	681a      	ldr	r2, [r3, #0]
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014946:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2200      	movs	r2, #0
 8014950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	f000 f831 	bl	80149bc <I2C_WaitOnFlagUntilTimeout>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00d      	beq.n	801497c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801496e:	d103      	bne.n	8014978 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014976:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8014978:	2303      	movs	r3, #3
 801497a:	e017      	b.n	80149ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 801497c:	897b      	ldrh	r3, [r7, #10]
 801497e:	11db      	asrs	r3, r3, #7
 8014980:	b2db      	uxtb	r3, r3
 8014982:	f003 0306 	and.w	r3, r3, #6
 8014986:	b2db      	uxtb	r3, r3
 8014988:	f063 030e 	orn	r3, r3, #14
 801498c:	b2da      	uxtb	r2, r3
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	4907      	ldr	r1, [pc, #28]	; (80149b8 <I2C_MasterRequestRead+0x198>)
 801499a:	68f8      	ldr	r0, [r7, #12]
 801499c:	f000 f865 	bl	8014a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d001      	beq.n	80149aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80149a6:	2301      	movs	r3, #1
 80149a8:	e000      	b.n	80149ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80149aa:	2300      	movs	r3, #0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3718      	adds	r7, #24
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	00010008 	.word	0x00010008
 80149b8:	00010002 	.word	0x00010002

080149bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	603b      	str	r3, [r7, #0]
 80149c8:	4613      	mov	r3, r2
 80149ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80149cc:	e025      	b.n	8014a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d4:	d021      	beq.n	8014a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80149d6:	f7fe ff0d 	bl	80137f4 <HAL_GetTick>
 80149da:	4602      	mov	r2, r0
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	683a      	ldr	r2, [r7, #0]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d302      	bcc.n	80149ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d116      	bne.n	8014a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2200      	movs	r2, #0
 80149f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2220      	movs	r2, #32
 80149f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2200      	movs	r2, #0
 80149fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a06:	f043 0220 	orr.w	r2, r3, #32
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2200      	movs	r2, #0
 8014a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014a16:	2301      	movs	r3, #1
 8014a18:	e023      	b.n	8014a62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	0c1b      	lsrs	r3, r3, #16
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d10d      	bne.n	8014a40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	695b      	ldr	r3, [r3, #20]
 8014a2a:	43da      	mvns	r2, r3
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	4013      	ands	r3, r2
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	bf0c      	ite	eq
 8014a36:	2301      	moveq	r3, #1
 8014a38:	2300      	movne	r3, #0
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	e00c      	b.n	8014a5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	699b      	ldr	r3, [r3, #24]
 8014a46:	43da      	mvns	r2, r3
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	4013      	ands	r3, r2
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	bf0c      	ite	eq
 8014a52:	2301      	moveq	r3, #1
 8014a54:	2300      	movne	r3, #0
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	461a      	mov	r2, r3
 8014a5a:	79fb      	ldrb	r3, [r7, #7]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d0b6      	beq.n	80149ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014a60:	2300      	movs	r3, #0
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b084      	sub	sp, #16
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	60f8      	str	r0, [r7, #12]
 8014a72:	60b9      	str	r1, [r7, #8]
 8014a74:	607a      	str	r2, [r7, #4]
 8014a76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014a78:	e051      	b.n	8014b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	695b      	ldr	r3, [r3, #20]
 8014a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a88:	d123      	bne.n	8014ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	681a      	ldr	r2, [r3, #0]
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014a98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014aa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	2220      	movs	r2, #32
 8014aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014abe:	f043 0204 	orr.w	r2, r3, #4
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014ace:	2301      	movs	r3, #1
 8014ad0:	e046      	b.n	8014b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ad8:	d021      	beq.n	8014b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ada:	f7fe fe8b 	bl	80137f4 <HAL_GetTick>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	1ad3      	subs	r3, r2, r3
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d302      	bcc.n	8014af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d116      	bne.n	8014b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	2200      	movs	r2, #0
 8014af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2220      	movs	r2, #32
 8014afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0a:	f043 0220 	orr.w	r2, r3, #32
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2200      	movs	r2, #0
 8014b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	e020      	b.n	8014b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	0c1b      	lsrs	r3, r3, #16
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d10c      	bne.n	8014b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	695b      	ldr	r3, [r3, #20]
 8014b2e:	43da      	mvns	r2, r3
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	4013      	ands	r3, r2
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	bf14      	ite	ne
 8014b3a:	2301      	movne	r3, #1
 8014b3c:	2300      	moveq	r3, #0
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	e00b      	b.n	8014b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	699b      	ldr	r3, [r3, #24]
 8014b48:	43da      	mvns	r2, r3
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	4013      	ands	r3, r2
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	bf14      	ite	ne
 8014b54:	2301      	movne	r3, #1
 8014b56:	2300      	moveq	r3, #0
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d18d      	bne.n	8014a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3710      	adds	r7, #16
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	60f8      	str	r0, [r7, #12]
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014b74:	e02d      	b.n	8014bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f000 f8ce 	bl	8014d18 <I2C_IsAcknowledgeFailed>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d001      	beq.n	8014b86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014b82:	2301      	movs	r3, #1
 8014b84:	e02d      	b.n	8014be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b8c:	d021      	beq.n	8014bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b8e:	f7fe fe31 	bl	80137f4 <HAL_GetTick>
 8014b92:	4602      	mov	r2, r0
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	1ad3      	subs	r3, r2, r3
 8014b98:	68ba      	ldr	r2, [r7, #8]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d302      	bcc.n	8014ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d116      	bne.n	8014bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2220      	movs	r2, #32
 8014bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bbe:	f043 0220 	orr.w	r2, r3, #32
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	e007      	b.n	8014be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	695b      	ldr	r3, [r3, #20]
 8014bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bdc:	2b80      	cmp	r3, #128	; 0x80
 8014bde:	d1ca      	bne.n	8014b76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014be0:	2300      	movs	r3, #0
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b084      	sub	sp, #16
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	60f8      	str	r0, [r7, #12]
 8014bf2:	60b9      	str	r1, [r7, #8]
 8014bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014bf6:	e02d      	b.n	8014c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f000 f88d 	bl	8014d18 <I2C_IsAcknowledgeFailed>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d001      	beq.n	8014c08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8014c04:	2301      	movs	r3, #1
 8014c06:	e02d      	b.n	8014c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	d021      	beq.n	8014c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c10:	f7fe fdf0 	bl	80137f4 <HAL_GetTick>
 8014c14:	4602      	mov	r2, r0
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	68ba      	ldr	r2, [r7, #8]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d302      	bcc.n	8014c26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d116      	bne.n	8014c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2220      	movs	r2, #32
 8014c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c40:	f043 0220 	orr.w	r2, r3, #32
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014c50:	2301      	movs	r3, #1
 8014c52:	e007      	b.n	8014c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	695b      	ldr	r3, [r3, #20]
 8014c5a:	f003 0304 	and.w	r3, r3, #4
 8014c5e:	2b04      	cmp	r3, #4
 8014c60:	d1ca      	bne.n	8014bf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014c62:	2300      	movs	r3, #0
}
 8014c64:	4618      	mov	r0, r3
 8014c66:	3710      	adds	r7, #16
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}

08014c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014c78:	e042      	b.n	8014d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	695b      	ldr	r3, [r3, #20]
 8014c80:	f003 0310 	and.w	r3, r3, #16
 8014c84:	2b10      	cmp	r3, #16
 8014c86:	d119      	bne.n	8014cbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f06f 0210 	mvn.w	r2, #16
 8014c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2200      	movs	r2, #0
 8014c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2220      	movs	r2, #32
 8014c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	e029      	b.n	8014d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014cbc:	f7fe fd9a 	bl	80137f4 <HAL_GetTick>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	1ad3      	subs	r3, r2, r3
 8014cc6:	68ba      	ldr	r2, [r7, #8]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d302      	bcc.n	8014cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d116      	bne.n	8014d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2220      	movs	r2, #32
 8014cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cec:	f043 0220 	orr.w	r2, r3, #32
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	e007      	b.n	8014d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	695b      	ldr	r3, [r3, #20]
 8014d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d0a:	2b40      	cmp	r3, #64	; 0x40
 8014d0c:	d1b5      	bne.n	8014c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8014d0e:	2300      	movs	r3, #0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3710      	adds	r7, #16
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	695b      	ldr	r3, [r3, #20]
 8014d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d2e:	d11b      	bne.n	8014d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2220      	movs	r2, #32
 8014d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d54:	f043 0204 	orr.w	r2, r3, #4
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8014d64:	2301      	movs	r3, #1
 8014d66:	e000      	b.n	8014d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8014d68:	2300      	movs	r3, #0
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	370c      	adds	r7, #12
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr
	...

08014d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b086      	sub	sp, #24
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d101      	bne.n	8014d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014d86:	2301      	movs	r3, #1
 8014d88:	e267      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	f003 0301 	and.w	r3, r3, #1
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d075      	beq.n	8014e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014d96:	4b88      	ldr	r3, [pc, #544]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	f003 030c 	and.w	r3, r3, #12
 8014d9e:	2b04      	cmp	r3, #4
 8014da0:	d00c      	beq.n	8014dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014da2:	4b85      	ldr	r3, [pc, #532]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014da4:	689b      	ldr	r3, [r3, #8]
 8014da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014daa:	2b08      	cmp	r3, #8
 8014dac:	d112      	bne.n	8014dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014dae:	4b82      	ldr	r3, [pc, #520]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014dba:	d10b      	bne.n	8014dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014dbc:	4b7e      	ldr	r3, [pc, #504]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d05b      	beq.n	8014e80 <HAL_RCC_OscConfig+0x108>
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d157      	bne.n	8014e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e242      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ddc:	d106      	bne.n	8014dec <HAL_RCC_OscConfig+0x74>
 8014dde:	4b76      	ldr	r3, [pc, #472]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4a75      	ldr	r2, [pc, #468]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	e01d      	b.n	8014e28 <HAL_RCC_OscConfig+0xb0>
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	685b      	ldr	r3, [r3, #4]
 8014df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014df4:	d10c      	bne.n	8014e10 <HAL_RCC_OscConfig+0x98>
 8014df6:	4b70      	ldr	r3, [pc, #448]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	4a6f      	ldr	r2, [pc, #444]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014e00:	6013      	str	r3, [r2, #0]
 8014e02:	4b6d      	ldr	r3, [pc, #436]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	4a6c      	ldr	r2, [pc, #432]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014e0c:	6013      	str	r3, [r2, #0]
 8014e0e:	e00b      	b.n	8014e28 <HAL_RCC_OscConfig+0xb0>
 8014e10:	4b69      	ldr	r3, [pc, #420]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4a68      	ldr	r2, [pc, #416]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014e1a:	6013      	str	r3, [r2, #0]
 8014e1c:	4b66      	ldr	r3, [pc, #408]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4a65      	ldr	r2, [pc, #404]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d013      	beq.n	8014e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014e30:	f7fe fce0 	bl	80137f4 <HAL_GetTick>
 8014e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014e36:	e008      	b.n	8014e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014e38:	f7fe fcdc 	bl	80137f4 <HAL_GetTick>
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	1ad3      	subs	r3, r2, r3
 8014e42:	2b64      	cmp	r3, #100	; 0x64
 8014e44:	d901      	bls.n	8014e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8014e46:	2303      	movs	r3, #3
 8014e48:	e207      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014e4a:	4b5b      	ldr	r3, [pc, #364]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d0f0      	beq.n	8014e38 <HAL_RCC_OscConfig+0xc0>
 8014e56:	e014      	b.n	8014e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014e58:	f7fe fccc 	bl	80137f4 <HAL_GetTick>
 8014e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014e5e:	e008      	b.n	8014e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014e60:	f7fe fcc8 	bl	80137f4 <HAL_GetTick>
 8014e64:	4602      	mov	r2, r0
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	1ad3      	subs	r3, r2, r3
 8014e6a:	2b64      	cmp	r3, #100	; 0x64
 8014e6c:	d901      	bls.n	8014e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014e6e:	2303      	movs	r3, #3
 8014e70:	e1f3      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014e72:	4b51      	ldr	r3, [pc, #324]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d1f0      	bne.n	8014e60 <HAL_RCC_OscConfig+0xe8>
 8014e7e:	e000      	b.n	8014e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	f003 0302 	and.w	r3, r3, #2
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d063      	beq.n	8014f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014e8e:	4b4a      	ldr	r3, [pc, #296]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e90:	689b      	ldr	r3, [r3, #8]
 8014e92:	f003 030c 	and.w	r3, r3, #12
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00b      	beq.n	8014eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014e9a:	4b47      	ldr	r3, [pc, #284]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014e9c:	689b      	ldr	r3, [r3, #8]
 8014e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014ea2:	2b08      	cmp	r3, #8
 8014ea4:	d11c      	bne.n	8014ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014ea6:	4b44      	ldr	r3, [pc, #272]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d116      	bne.n	8014ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014eb2:	4b41      	ldr	r3, [pc, #260]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f003 0302 	and.w	r3, r3, #2
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d005      	beq.n	8014eca <HAL_RCC_OscConfig+0x152>
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	68db      	ldr	r3, [r3, #12]
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d001      	beq.n	8014eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	e1c7      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014eca:	4b3b      	ldr	r3, [pc, #236]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	691b      	ldr	r3, [r3, #16]
 8014ed6:	00db      	lsls	r3, r3, #3
 8014ed8:	4937      	ldr	r1, [pc, #220]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014eda:	4313      	orrs	r3, r2
 8014edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014ede:	e03a      	b.n	8014f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d020      	beq.n	8014f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014ee8:	4b34      	ldr	r3, [pc, #208]	; (8014fbc <HAL_RCC_OscConfig+0x244>)
 8014eea:	2201      	movs	r2, #1
 8014eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014eee:	f7fe fc81 	bl	80137f4 <HAL_GetTick>
 8014ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014ef4:	e008      	b.n	8014f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014ef6:	f7fe fc7d 	bl	80137f4 <HAL_GetTick>
 8014efa:	4602      	mov	r2, r0
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	1ad3      	subs	r3, r2, r3
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	d901      	bls.n	8014f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014f04:	2303      	movs	r3, #3
 8014f06:	e1a8      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014f08:	4b2b      	ldr	r3, [pc, #172]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	f003 0302 	and.w	r3, r3, #2
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d0f0      	beq.n	8014ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014f14:	4b28      	ldr	r3, [pc, #160]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	691b      	ldr	r3, [r3, #16]
 8014f20:	00db      	lsls	r3, r3, #3
 8014f22:	4925      	ldr	r1, [pc, #148]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014f24:	4313      	orrs	r3, r2
 8014f26:	600b      	str	r3, [r1, #0]
 8014f28:	e015      	b.n	8014f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014f2a:	4b24      	ldr	r3, [pc, #144]	; (8014fbc <HAL_RCC_OscConfig+0x244>)
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014f30:	f7fe fc60 	bl	80137f4 <HAL_GetTick>
 8014f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014f36:	e008      	b.n	8014f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014f38:	f7fe fc5c 	bl	80137f4 <HAL_GetTick>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	2b02      	cmp	r3, #2
 8014f44:	d901      	bls.n	8014f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014f46:	2303      	movs	r3, #3
 8014f48:	e187      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014f4a:	4b1b      	ldr	r3, [pc, #108]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f003 0302 	and.w	r3, r3, #2
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d1f0      	bne.n	8014f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f003 0308 	and.w	r3, r3, #8
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d036      	beq.n	8014fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	695b      	ldr	r3, [r3, #20]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d016      	beq.n	8014f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014f6a:	4b15      	ldr	r3, [pc, #84]	; (8014fc0 <HAL_RCC_OscConfig+0x248>)
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014f70:	f7fe fc40 	bl	80137f4 <HAL_GetTick>
 8014f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014f76:	e008      	b.n	8014f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014f78:	f7fe fc3c 	bl	80137f4 <HAL_GetTick>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	693b      	ldr	r3, [r7, #16]
 8014f80:	1ad3      	subs	r3, r2, r3
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	d901      	bls.n	8014f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8014f86:	2303      	movs	r3, #3
 8014f88:	e167      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014f8a:	4b0b      	ldr	r3, [pc, #44]	; (8014fb8 <HAL_RCC_OscConfig+0x240>)
 8014f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f8e:	f003 0302 	and.w	r3, r3, #2
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d0f0      	beq.n	8014f78 <HAL_RCC_OscConfig+0x200>
 8014f96:	e01b      	b.n	8014fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014f98:	4b09      	ldr	r3, [pc, #36]	; (8014fc0 <HAL_RCC_OscConfig+0x248>)
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014f9e:	f7fe fc29 	bl	80137f4 <HAL_GetTick>
 8014fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014fa4:	e00e      	b.n	8014fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014fa6:	f7fe fc25 	bl	80137f4 <HAL_GetTick>
 8014faa:	4602      	mov	r2, r0
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	1ad3      	subs	r3, r2, r3
 8014fb0:	2b02      	cmp	r3, #2
 8014fb2:	d907      	bls.n	8014fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	e150      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
 8014fb8:	40023800 	.word	0x40023800
 8014fbc:	42470000 	.word	0x42470000
 8014fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014fc4:	4b88      	ldr	r3, [pc, #544]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8014fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fc8:	f003 0302 	and.w	r3, r3, #2
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d1ea      	bne.n	8014fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	f003 0304 	and.w	r3, r3, #4
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f000 8097 	beq.w	801510c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014fe2:	4b81      	ldr	r3, [pc, #516]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8014fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d10f      	bne.n	801500e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014fee:	2300      	movs	r3, #0
 8014ff0:	60bb      	str	r3, [r7, #8]
 8014ff2:	4b7d      	ldr	r3, [pc, #500]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8014ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ff6:	4a7c      	ldr	r2, [pc, #496]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8014ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8014ffe:	4b7a      	ldr	r3, [pc, #488]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015006:	60bb      	str	r3, [r7, #8]
 8015008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801500a:	2301      	movs	r3, #1
 801500c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801500e:	4b77      	ldr	r3, [pc, #476]	; (80151ec <HAL_RCC_OscConfig+0x474>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015016:	2b00      	cmp	r3, #0
 8015018:	d118      	bne.n	801504c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801501a:	4b74      	ldr	r3, [pc, #464]	; (80151ec <HAL_RCC_OscConfig+0x474>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	4a73      	ldr	r2, [pc, #460]	; (80151ec <HAL_RCC_OscConfig+0x474>)
 8015020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015026:	f7fe fbe5 	bl	80137f4 <HAL_GetTick>
 801502a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801502c:	e008      	b.n	8015040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801502e:	f7fe fbe1 	bl	80137f4 <HAL_GetTick>
 8015032:	4602      	mov	r2, r0
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	1ad3      	subs	r3, r2, r3
 8015038:	2b02      	cmp	r3, #2
 801503a:	d901      	bls.n	8015040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801503c:	2303      	movs	r3, #3
 801503e:	e10c      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015040:	4b6a      	ldr	r3, [pc, #424]	; (80151ec <HAL_RCC_OscConfig+0x474>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015048:	2b00      	cmp	r3, #0
 801504a:	d0f0      	beq.n	801502e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	2b01      	cmp	r3, #1
 8015052:	d106      	bne.n	8015062 <HAL_RCC_OscConfig+0x2ea>
 8015054:	4b64      	ldr	r3, [pc, #400]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015058:	4a63      	ldr	r2, [pc, #396]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 801505a:	f043 0301 	orr.w	r3, r3, #1
 801505e:	6713      	str	r3, [r2, #112]	; 0x70
 8015060:	e01c      	b.n	801509c <HAL_RCC_OscConfig+0x324>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	689b      	ldr	r3, [r3, #8]
 8015066:	2b05      	cmp	r3, #5
 8015068:	d10c      	bne.n	8015084 <HAL_RCC_OscConfig+0x30c>
 801506a:	4b5f      	ldr	r3, [pc, #380]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 801506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801506e:	4a5e      	ldr	r2, [pc, #376]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015070:	f043 0304 	orr.w	r3, r3, #4
 8015074:	6713      	str	r3, [r2, #112]	; 0x70
 8015076:	4b5c      	ldr	r3, [pc, #368]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801507a:	4a5b      	ldr	r2, [pc, #364]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 801507c:	f043 0301 	orr.w	r3, r3, #1
 8015080:	6713      	str	r3, [r2, #112]	; 0x70
 8015082:	e00b      	b.n	801509c <HAL_RCC_OscConfig+0x324>
 8015084:	4b58      	ldr	r3, [pc, #352]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015088:	4a57      	ldr	r2, [pc, #348]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 801508a:	f023 0301 	bic.w	r3, r3, #1
 801508e:	6713      	str	r3, [r2, #112]	; 0x70
 8015090:	4b55      	ldr	r3, [pc, #340]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015094:	4a54      	ldr	r2, [pc, #336]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015096:	f023 0304 	bic.w	r3, r3, #4
 801509a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	689b      	ldr	r3, [r3, #8]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d015      	beq.n	80150d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80150a4:	f7fe fba6 	bl	80137f4 <HAL_GetTick>
 80150a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80150aa:	e00a      	b.n	80150c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80150ac:	f7fe fba2 	bl	80137f4 <HAL_GetTick>
 80150b0:	4602      	mov	r2, r0
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d901      	bls.n	80150c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80150be:	2303      	movs	r3, #3
 80150c0:	e0cb      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80150c2:	4b49      	ldr	r3, [pc, #292]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 80150c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150c6:	f003 0302 	and.w	r3, r3, #2
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d0ee      	beq.n	80150ac <HAL_RCC_OscConfig+0x334>
 80150ce:	e014      	b.n	80150fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80150d0:	f7fe fb90 	bl	80137f4 <HAL_GetTick>
 80150d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80150d6:	e00a      	b.n	80150ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80150d8:	f7fe fb8c 	bl	80137f4 <HAL_GetTick>
 80150dc:	4602      	mov	r2, r0
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	1ad3      	subs	r3, r2, r3
 80150e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80150e6:	4293      	cmp	r3, r2
 80150e8:	d901      	bls.n	80150ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80150ea:	2303      	movs	r3, #3
 80150ec:	e0b5      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80150ee:	4b3e      	ldr	r3, [pc, #248]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 80150f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150f2:	f003 0302 	and.w	r3, r3, #2
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d1ee      	bne.n	80150d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80150fa:	7dfb      	ldrb	r3, [r7, #23]
 80150fc:	2b01      	cmp	r3, #1
 80150fe:	d105      	bne.n	801510c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015100:	4b39      	ldr	r3, [pc, #228]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015104:	4a38      	ldr	r2, [pc, #224]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801510a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	699b      	ldr	r3, [r3, #24]
 8015110:	2b00      	cmp	r3, #0
 8015112:	f000 80a1 	beq.w	8015258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015116:	4b34      	ldr	r3, [pc, #208]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 8015118:	689b      	ldr	r3, [r3, #8]
 801511a:	f003 030c 	and.w	r3, r3, #12
 801511e:	2b08      	cmp	r3, #8
 8015120:	d05c      	beq.n	80151dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	699b      	ldr	r3, [r3, #24]
 8015126:	2b02      	cmp	r3, #2
 8015128:	d141      	bne.n	80151ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801512a:	4b31      	ldr	r3, [pc, #196]	; (80151f0 <HAL_RCC_OscConfig+0x478>)
 801512c:	2200      	movs	r2, #0
 801512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015130:	f7fe fb60 	bl	80137f4 <HAL_GetTick>
 8015134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015136:	e008      	b.n	801514a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015138:	f7fe fb5c 	bl	80137f4 <HAL_GetTick>
 801513c:	4602      	mov	r2, r0
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	2b02      	cmp	r3, #2
 8015144:	d901      	bls.n	801514a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8015146:	2303      	movs	r3, #3
 8015148:	e087      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801514a:	4b27      	ldr	r3, [pc, #156]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015152:	2b00      	cmp	r3, #0
 8015154:	d1f0      	bne.n	8015138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	69da      	ldr	r2, [r3, #28]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6a1b      	ldr	r3, [r3, #32]
 801515e:	431a      	orrs	r2, r3
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015164:	019b      	lsls	r3, r3, #6
 8015166:	431a      	orrs	r2, r3
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801516c:	085b      	lsrs	r3, r3, #1
 801516e:	3b01      	subs	r3, #1
 8015170:	041b      	lsls	r3, r3, #16
 8015172:	431a      	orrs	r2, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015178:	061b      	lsls	r3, r3, #24
 801517a:	491b      	ldr	r1, [pc, #108]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 801517c:	4313      	orrs	r3, r2
 801517e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015180:	4b1b      	ldr	r3, [pc, #108]	; (80151f0 <HAL_RCC_OscConfig+0x478>)
 8015182:	2201      	movs	r2, #1
 8015184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015186:	f7fe fb35 	bl	80137f4 <HAL_GetTick>
 801518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801518c:	e008      	b.n	80151a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801518e:	f7fe fb31 	bl	80137f4 <HAL_GetTick>
 8015192:	4602      	mov	r2, r0
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	2b02      	cmp	r3, #2
 801519a:	d901      	bls.n	80151a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801519c:	2303      	movs	r3, #3
 801519e:	e05c      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80151a0:	4b11      	ldr	r3, [pc, #68]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d0f0      	beq.n	801518e <HAL_RCC_OscConfig+0x416>
 80151ac:	e054      	b.n	8015258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80151ae:	4b10      	ldr	r3, [pc, #64]	; (80151f0 <HAL_RCC_OscConfig+0x478>)
 80151b0:	2200      	movs	r2, #0
 80151b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151b4:	f7fe fb1e 	bl	80137f4 <HAL_GetTick>
 80151b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80151ba:	e008      	b.n	80151ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80151bc:	f7fe fb1a 	bl	80137f4 <HAL_GetTick>
 80151c0:	4602      	mov	r2, r0
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	2b02      	cmp	r3, #2
 80151c8:	d901      	bls.n	80151ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80151ca:	2303      	movs	r3, #3
 80151cc:	e045      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80151ce:	4b06      	ldr	r3, [pc, #24]	; (80151e8 <HAL_RCC_OscConfig+0x470>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d1f0      	bne.n	80151bc <HAL_RCC_OscConfig+0x444>
 80151da:	e03d      	b.n	8015258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	699b      	ldr	r3, [r3, #24]
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	d107      	bne.n	80151f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80151e4:	2301      	movs	r3, #1
 80151e6:	e038      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
 80151e8:	40023800 	.word	0x40023800
 80151ec:	40007000 	.word	0x40007000
 80151f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80151f4:	4b1b      	ldr	r3, [pc, #108]	; (8015264 <HAL_RCC_OscConfig+0x4ec>)
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	699b      	ldr	r3, [r3, #24]
 80151fe:	2b01      	cmp	r3, #1
 8015200:	d028      	beq.n	8015254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801520c:	429a      	cmp	r2, r3
 801520e:	d121      	bne.n	8015254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801521a:	429a      	cmp	r2, r3
 801521c:	d11a      	bne.n	8015254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801521e:	68fa      	ldr	r2, [r7, #12]
 8015220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8015224:	4013      	ands	r3, r2
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801522a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801522c:	4293      	cmp	r3, r2
 801522e:	d111      	bne.n	8015254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801523a:	085b      	lsrs	r3, r3, #1
 801523c:	3b01      	subs	r3, #1
 801523e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015240:	429a      	cmp	r2, r3
 8015242:	d107      	bne.n	8015254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801524e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015250:	429a      	cmp	r2, r3
 8015252:	d001      	beq.n	8015258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8015254:	2301      	movs	r3, #1
 8015256:	e000      	b.n	801525a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3718      	adds	r7, #24
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	bf00      	nop
 8015264:	40023800 	.word	0x40023800

08015268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d101      	bne.n	801527c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015278:	2301      	movs	r3, #1
 801527a:	e0cc      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801527c:	4b68      	ldr	r3, [pc, #416]	; (8015420 <HAL_RCC_ClockConfig+0x1b8>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	f003 0307 	and.w	r3, r3, #7
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	429a      	cmp	r2, r3
 8015288:	d90c      	bls.n	80152a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801528a:	4b65      	ldr	r3, [pc, #404]	; (8015420 <HAL_RCC_ClockConfig+0x1b8>)
 801528c:	683a      	ldr	r2, [r7, #0]
 801528e:	b2d2      	uxtb	r2, r2
 8015290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015292:	4b63      	ldr	r3, [pc, #396]	; (8015420 <HAL_RCC_ClockConfig+0x1b8>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	f003 0307 	and.w	r3, r3, #7
 801529a:	683a      	ldr	r2, [r7, #0]
 801529c:	429a      	cmp	r2, r3
 801529e:	d001      	beq.n	80152a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80152a0:	2301      	movs	r3, #1
 80152a2:	e0b8      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	f003 0302 	and.w	r3, r3, #2
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d020      	beq.n	80152f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	f003 0304 	and.w	r3, r3, #4
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d005      	beq.n	80152c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80152bc:	4b59      	ldr	r3, [pc, #356]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80152be:	689b      	ldr	r3, [r3, #8]
 80152c0:	4a58      	ldr	r2, [pc, #352]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80152c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80152c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f003 0308 	and.w	r3, r3, #8
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d005      	beq.n	80152e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80152d4:	4b53      	ldr	r3, [pc, #332]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80152d6:	689b      	ldr	r3, [r3, #8]
 80152d8:	4a52      	ldr	r2, [pc, #328]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80152da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80152de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80152e0:	4b50      	ldr	r3, [pc, #320]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80152e2:	689b      	ldr	r3, [r3, #8]
 80152e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	689b      	ldr	r3, [r3, #8]
 80152ec:	494d      	ldr	r1, [pc, #308]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80152ee:	4313      	orrs	r3, r2
 80152f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	f003 0301 	and.w	r3, r3, #1
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d044      	beq.n	8015388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	2b01      	cmp	r3, #1
 8015304:	d107      	bne.n	8015316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015306:	4b47      	ldr	r3, [pc, #284]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801530e:	2b00      	cmp	r3, #0
 8015310:	d119      	bne.n	8015346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015312:	2301      	movs	r3, #1
 8015314:	e07f      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	2b02      	cmp	r3, #2
 801531c:	d003      	beq.n	8015326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015322:	2b03      	cmp	r3, #3
 8015324:	d107      	bne.n	8015336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015326:	4b3f      	ldr	r3, [pc, #252]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801532e:	2b00      	cmp	r3, #0
 8015330:	d109      	bne.n	8015346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015332:	2301      	movs	r3, #1
 8015334:	e06f      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015336:	4b3b      	ldr	r3, [pc, #236]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f003 0302 	and.w	r3, r3, #2
 801533e:	2b00      	cmp	r3, #0
 8015340:	d101      	bne.n	8015346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015342:	2301      	movs	r3, #1
 8015344:	e067      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015346:	4b37      	ldr	r3, [pc, #220]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 8015348:	689b      	ldr	r3, [r3, #8]
 801534a:	f023 0203 	bic.w	r2, r3, #3
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	4934      	ldr	r1, [pc, #208]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 8015354:	4313      	orrs	r3, r2
 8015356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015358:	f7fe fa4c 	bl	80137f4 <HAL_GetTick>
 801535c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801535e:	e00a      	b.n	8015376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015360:	f7fe fa48 	bl	80137f4 <HAL_GetTick>
 8015364:	4602      	mov	r2, r0
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	1ad3      	subs	r3, r2, r3
 801536a:	f241 3288 	movw	r2, #5000	; 0x1388
 801536e:	4293      	cmp	r3, r2
 8015370:	d901      	bls.n	8015376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8015372:	2303      	movs	r3, #3
 8015374:	e04f      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015376:	4b2b      	ldr	r3, [pc, #172]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 8015378:	689b      	ldr	r3, [r3, #8]
 801537a:	f003 020c 	and.w	r2, r3, #12
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	429a      	cmp	r2, r3
 8015386:	d1eb      	bne.n	8015360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015388:	4b25      	ldr	r3, [pc, #148]	; (8015420 <HAL_RCC_ClockConfig+0x1b8>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	f003 0307 	and.w	r3, r3, #7
 8015390:	683a      	ldr	r2, [r7, #0]
 8015392:	429a      	cmp	r2, r3
 8015394:	d20c      	bcs.n	80153b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015396:	4b22      	ldr	r3, [pc, #136]	; (8015420 <HAL_RCC_ClockConfig+0x1b8>)
 8015398:	683a      	ldr	r2, [r7, #0]
 801539a:	b2d2      	uxtb	r2, r2
 801539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801539e:	4b20      	ldr	r3, [pc, #128]	; (8015420 <HAL_RCC_ClockConfig+0x1b8>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f003 0307 	and.w	r3, r3, #7
 80153a6:	683a      	ldr	r2, [r7, #0]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d001      	beq.n	80153b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80153ac:	2301      	movs	r3, #1
 80153ae:	e032      	b.n	8015416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	f003 0304 	and.w	r3, r3, #4
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d008      	beq.n	80153ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80153bc:	4b19      	ldr	r3, [pc, #100]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80153be:	689b      	ldr	r3, [r3, #8]
 80153c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	4916      	ldr	r1, [pc, #88]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80153ca:	4313      	orrs	r3, r2
 80153cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f003 0308 	and.w	r3, r3, #8
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d009      	beq.n	80153ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80153da:	4b12      	ldr	r3, [pc, #72]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80153dc:	689b      	ldr	r3, [r3, #8]
 80153de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	691b      	ldr	r3, [r3, #16]
 80153e6:	00db      	lsls	r3, r3, #3
 80153e8:	490e      	ldr	r1, [pc, #56]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80153ea:	4313      	orrs	r3, r2
 80153ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80153ee:	f000 f821 	bl	8015434 <HAL_RCC_GetSysClockFreq>
 80153f2:	4602      	mov	r2, r0
 80153f4:	4b0b      	ldr	r3, [pc, #44]	; (8015424 <HAL_RCC_ClockConfig+0x1bc>)
 80153f6:	689b      	ldr	r3, [r3, #8]
 80153f8:	091b      	lsrs	r3, r3, #4
 80153fa:	f003 030f 	and.w	r3, r3, #15
 80153fe:	490a      	ldr	r1, [pc, #40]	; (8015428 <HAL_RCC_ClockConfig+0x1c0>)
 8015400:	5ccb      	ldrb	r3, [r1, r3]
 8015402:	fa22 f303 	lsr.w	r3, r2, r3
 8015406:	4a09      	ldr	r2, [pc, #36]	; (801542c <HAL_RCC_ClockConfig+0x1c4>)
 8015408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801540a:	4b09      	ldr	r3, [pc, #36]	; (8015430 <HAL_RCC_ClockConfig+0x1c8>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4618      	mov	r0, r3
 8015410:	f7fe f9ac 	bl	801376c <HAL_InitTick>

  return HAL_OK;
 8015414:	2300      	movs	r3, #0
}
 8015416:	4618      	mov	r0, r3
 8015418:	3710      	adds	r7, #16
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	40023c00 	.word	0x40023c00
 8015424:	40023800 	.word	0x40023800
 8015428:	0801ba18 	.word	0x0801ba18
 801542c:	20000004 	.word	0x20000004
 8015430:	20000038 	.word	0x20000038

08015434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015438:	b094      	sub	sp, #80	; 0x50
 801543a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801543c:	2300      	movs	r3, #0
 801543e:	647b      	str	r3, [r7, #68]	; 0x44
 8015440:	2300      	movs	r3, #0
 8015442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015444:	2300      	movs	r3, #0
 8015446:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8015448:	2300      	movs	r3, #0
 801544a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801544c:	4b79      	ldr	r3, [pc, #484]	; (8015634 <HAL_RCC_GetSysClockFreq+0x200>)
 801544e:	689b      	ldr	r3, [r3, #8]
 8015450:	f003 030c 	and.w	r3, r3, #12
 8015454:	2b08      	cmp	r3, #8
 8015456:	d00d      	beq.n	8015474 <HAL_RCC_GetSysClockFreq+0x40>
 8015458:	2b08      	cmp	r3, #8
 801545a:	f200 80e1 	bhi.w	8015620 <HAL_RCC_GetSysClockFreq+0x1ec>
 801545e:	2b00      	cmp	r3, #0
 8015460:	d002      	beq.n	8015468 <HAL_RCC_GetSysClockFreq+0x34>
 8015462:	2b04      	cmp	r3, #4
 8015464:	d003      	beq.n	801546e <HAL_RCC_GetSysClockFreq+0x3a>
 8015466:	e0db      	b.n	8015620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015468:	4b73      	ldr	r3, [pc, #460]	; (8015638 <HAL_RCC_GetSysClockFreq+0x204>)
 801546a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801546c:	e0db      	b.n	8015626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801546e:	4b73      	ldr	r3, [pc, #460]	; (801563c <HAL_RCC_GetSysClockFreq+0x208>)
 8015470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8015472:	e0d8      	b.n	8015626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015474:	4b6f      	ldr	r3, [pc, #444]	; (8015634 <HAL_RCC_GetSysClockFreq+0x200>)
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801547c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801547e:	4b6d      	ldr	r3, [pc, #436]	; (8015634 <HAL_RCC_GetSysClockFreq+0x200>)
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015486:	2b00      	cmp	r3, #0
 8015488:	d063      	beq.n	8015552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801548a:	4b6a      	ldr	r3, [pc, #424]	; (8015634 <HAL_RCC_GetSysClockFreq+0x200>)
 801548c:	685b      	ldr	r3, [r3, #4]
 801548e:	099b      	lsrs	r3, r3, #6
 8015490:	2200      	movs	r2, #0
 8015492:	63bb      	str	r3, [r7, #56]	; 0x38
 8015494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801549c:	633b      	str	r3, [r7, #48]	; 0x30
 801549e:	2300      	movs	r3, #0
 80154a0:	637b      	str	r3, [r7, #52]	; 0x34
 80154a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80154a6:	4622      	mov	r2, r4
 80154a8:	462b      	mov	r3, r5
 80154aa:	f04f 0000 	mov.w	r0, #0
 80154ae:	f04f 0100 	mov.w	r1, #0
 80154b2:	0159      	lsls	r1, r3, #5
 80154b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80154b8:	0150      	lsls	r0, r2, #5
 80154ba:	4602      	mov	r2, r0
 80154bc:	460b      	mov	r3, r1
 80154be:	4621      	mov	r1, r4
 80154c0:	1a51      	subs	r1, r2, r1
 80154c2:	6139      	str	r1, [r7, #16]
 80154c4:	4629      	mov	r1, r5
 80154c6:	eb63 0301 	sbc.w	r3, r3, r1
 80154ca:	617b      	str	r3, [r7, #20]
 80154cc:	f04f 0200 	mov.w	r2, #0
 80154d0:	f04f 0300 	mov.w	r3, #0
 80154d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80154d8:	4659      	mov	r1, fp
 80154da:	018b      	lsls	r3, r1, #6
 80154dc:	4651      	mov	r1, sl
 80154de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80154e2:	4651      	mov	r1, sl
 80154e4:	018a      	lsls	r2, r1, #6
 80154e6:	4651      	mov	r1, sl
 80154e8:	ebb2 0801 	subs.w	r8, r2, r1
 80154ec:	4659      	mov	r1, fp
 80154ee:	eb63 0901 	sbc.w	r9, r3, r1
 80154f2:	f04f 0200 	mov.w	r2, #0
 80154f6:	f04f 0300 	mov.w	r3, #0
 80154fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80154fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8015502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8015506:	4690      	mov	r8, r2
 8015508:	4699      	mov	r9, r3
 801550a:	4623      	mov	r3, r4
 801550c:	eb18 0303 	adds.w	r3, r8, r3
 8015510:	60bb      	str	r3, [r7, #8]
 8015512:	462b      	mov	r3, r5
 8015514:	eb49 0303 	adc.w	r3, r9, r3
 8015518:	60fb      	str	r3, [r7, #12]
 801551a:	f04f 0200 	mov.w	r2, #0
 801551e:	f04f 0300 	mov.w	r3, #0
 8015522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015526:	4629      	mov	r1, r5
 8015528:	024b      	lsls	r3, r1, #9
 801552a:	4621      	mov	r1, r4
 801552c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8015530:	4621      	mov	r1, r4
 8015532:	024a      	lsls	r2, r1, #9
 8015534:	4610      	mov	r0, r2
 8015536:	4619      	mov	r1, r3
 8015538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801553a:	2200      	movs	r2, #0
 801553c:	62bb      	str	r3, [r7, #40]	; 0x28
 801553e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015544:	f7eb fc08 	bl	8000d58 <__aeabi_uldivmod>
 8015548:	4602      	mov	r2, r0
 801554a:	460b      	mov	r3, r1
 801554c:	4613      	mov	r3, r2
 801554e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015550:	e058      	b.n	8015604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015552:	4b38      	ldr	r3, [pc, #224]	; (8015634 <HAL_RCC_GetSysClockFreq+0x200>)
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	099b      	lsrs	r3, r3, #6
 8015558:	2200      	movs	r2, #0
 801555a:	4618      	mov	r0, r3
 801555c:	4611      	mov	r1, r2
 801555e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8015562:	623b      	str	r3, [r7, #32]
 8015564:	2300      	movs	r3, #0
 8015566:	627b      	str	r3, [r7, #36]	; 0x24
 8015568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801556c:	4642      	mov	r2, r8
 801556e:	464b      	mov	r3, r9
 8015570:	f04f 0000 	mov.w	r0, #0
 8015574:	f04f 0100 	mov.w	r1, #0
 8015578:	0159      	lsls	r1, r3, #5
 801557a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801557e:	0150      	lsls	r0, r2, #5
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	4641      	mov	r1, r8
 8015586:	ebb2 0a01 	subs.w	sl, r2, r1
 801558a:	4649      	mov	r1, r9
 801558c:	eb63 0b01 	sbc.w	fp, r3, r1
 8015590:	f04f 0200 	mov.w	r2, #0
 8015594:	f04f 0300 	mov.w	r3, #0
 8015598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801559c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80155a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80155a4:	ebb2 040a 	subs.w	r4, r2, sl
 80155a8:	eb63 050b 	sbc.w	r5, r3, fp
 80155ac:	f04f 0200 	mov.w	r2, #0
 80155b0:	f04f 0300 	mov.w	r3, #0
 80155b4:	00eb      	lsls	r3, r5, #3
 80155b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80155ba:	00e2      	lsls	r2, r4, #3
 80155bc:	4614      	mov	r4, r2
 80155be:	461d      	mov	r5, r3
 80155c0:	4643      	mov	r3, r8
 80155c2:	18e3      	adds	r3, r4, r3
 80155c4:	603b      	str	r3, [r7, #0]
 80155c6:	464b      	mov	r3, r9
 80155c8:	eb45 0303 	adc.w	r3, r5, r3
 80155cc:	607b      	str	r3, [r7, #4]
 80155ce:	f04f 0200 	mov.w	r2, #0
 80155d2:	f04f 0300 	mov.w	r3, #0
 80155d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80155da:	4629      	mov	r1, r5
 80155dc:	028b      	lsls	r3, r1, #10
 80155de:	4621      	mov	r1, r4
 80155e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80155e4:	4621      	mov	r1, r4
 80155e6:	028a      	lsls	r2, r1, #10
 80155e8:	4610      	mov	r0, r2
 80155ea:	4619      	mov	r1, r3
 80155ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155ee:	2200      	movs	r2, #0
 80155f0:	61bb      	str	r3, [r7, #24]
 80155f2:	61fa      	str	r2, [r7, #28]
 80155f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80155f8:	f7eb fbae 	bl	8000d58 <__aeabi_uldivmod>
 80155fc:	4602      	mov	r2, r0
 80155fe:	460b      	mov	r3, r1
 8015600:	4613      	mov	r3, r2
 8015602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8015604:	4b0b      	ldr	r3, [pc, #44]	; (8015634 <HAL_RCC_GetSysClockFreq+0x200>)
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	0c1b      	lsrs	r3, r3, #16
 801560a:	f003 0303 	and.w	r3, r3, #3
 801560e:	3301      	adds	r3, #1
 8015610:	005b      	lsls	r3, r3, #1
 8015612:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8015614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015618:	fbb2 f3f3 	udiv	r3, r2, r3
 801561c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801561e:	e002      	b.n	8015626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8015620:	4b05      	ldr	r3, [pc, #20]	; (8015638 <HAL_RCC_GetSysClockFreq+0x204>)
 8015622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8015624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8015626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8015628:	4618      	mov	r0, r3
 801562a:	3750      	adds	r7, #80	; 0x50
 801562c:	46bd      	mov	sp, r7
 801562e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015632:	bf00      	nop
 8015634:	40023800 	.word	0x40023800
 8015638:	00f42400 	.word	0x00f42400
 801563c:	007a1200 	.word	0x007a1200

08015640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015640:	b480      	push	{r7}
 8015642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015644:	4b03      	ldr	r3, [pc, #12]	; (8015654 <HAL_RCC_GetHCLKFreq+0x14>)
 8015646:	681b      	ldr	r3, [r3, #0]
}
 8015648:	4618      	mov	r0, r3
 801564a:	46bd      	mov	sp, r7
 801564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	20000004 	.word	0x20000004

08015658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801565c:	f7ff fff0 	bl	8015640 <HAL_RCC_GetHCLKFreq>
 8015660:	4602      	mov	r2, r0
 8015662:	4b05      	ldr	r3, [pc, #20]	; (8015678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8015664:	689b      	ldr	r3, [r3, #8]
 8015666:	0a9b      	lsrs	r3, r3, #10
 8015668:	f003 0307 	and.w	r3, r3, #7
 801566c:	4903      	ldr	r1, [pc, #12]	; (801567c <HAL_RCC_GetPCLK1Freq+0x24>)
 801566e:	5ccb      	ldrb	r3, [r1, r3]
 8015670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015674:	4618      	mov	r0, r3
 8015676:	bd80      	pop	{r7, pc}
 8015678:	40023800 	.word	0x40023800
 801567c:	0801ba28 	.word	0x0801ba28

08015680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8015684:	f7ff ffdc 	bl	8015640 <HAL_RCC_GetHCLKFreq>
 8015688:	4602      	mov	r2, r0
 801568a:	4b05      	ldr	r3, [pc, #20]	; (80156a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	0b5b      	lsrs	r3, r3, #13
 8015690:	f003 0307 	and.w	r3, r3, #7
 8015694:	4903      	ldr	r1, [pc, #12]	; (80156a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015696:	5ccb      	ldrb	r3, [r1, r3]
 8015698:	fa22 f303 	lsr.w	r3, r2, r3
}
 801569c:	4618      	mov	r0, r3
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	40023800 	.word	0x40023800
 80156a4:	0801ba28 	.word	0x0801ba28

080156a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d101      	bne.n	80156ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80156b6:	2301      	movs	r3, #1
 80156b8:	e03f      	b.n	801573a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d106      	bne.n	80156d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2200      	movs	r2, #0
 80156ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7ec fdae 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2224      	movs	r2, #36	; 0x24
 80156d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	68da      	ldr	r2, [r3, #12]
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80156ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f000 f929 	bl	8015944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	691a      	ldr	r2, [r3, #16]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	695a      	ldr	r2, [r3, #20]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	68da      	ldr	r2, [r3, #12]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2200      	movs	r2, #0
 8015726:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2220      	movs	r2, #32
 801572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2220      	movs	r2, #32
 8015734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015738:	2300      	movs	r3, #0
}
 801573a:	4618      	mov	r0, r3
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}

08015742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015742:	b580      	push	{r7, lr}
 8015744:	b08a      	sub	sp, #40	; 0x28
 8015746:	af02      	add	r7, sp, #8
 8015748:	60f8      	str	r0, [r7, #12]
 801574a:	60b9      	str	r1, [r7, #8]
 801574c:	603b      	str	r3, [r7, #0]
 801574e:	4613      	mov	r3, r2
 8015750:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015752:	2300      	movs	r3, #0
 8015754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801575c:	b2db      	uxtb	r3, r3
 801575e:	2b20      	cmp	r3, #32
 8015760:	d17c      	bne.n	801585c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d002      	beq.n	801576e <HAL_UART_Transmit+0x2c>
 8015768:	88fb      	ldrh	r3, [r7, #6]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d101      	bne.n	8015772 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801576e:	2301      	movs	r3, #1
 8015770:	e075      	b.n	801585e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015778:	2b01      	cmp	r3, #1
 801577a:	d101      	bne.n	8015780 <HAL_UART_Transmit+0x3e>
 801577c:	2302      	movs	r3, #2
 801577e:	e06e      	b.n	801585e <HAL_UART_Transmit+0x11c>
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2201      	movs	r2, #1
 8015784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	2200      	movs	r2, #0
 801578c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	2221      	movs	r2, #33	; 0x21
 8015792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015796:	f7fe f82d 	bl	80137f4 <HAL_GetTick>
 801579a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	88fa      	ldrh	r2, [r7, #6]
 80157a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	88fa      	ldrh	r2, [r7, #6]
 80157a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	689b      	ldr	r3, [r3, #8]
 80157ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157b0:	d108      	bne.n	80157c4 <HAL_UART_Transmit+0x82>
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	691b      	ldr	r3, [r3, #16]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d104      	bne.n	80157c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80157ba:	2300      	movs	r3, #0
 80157bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	61bb      	str	r3, [r7, #24]
 80157c2:	e003      	b.n	80157cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80157c8:	2300      	movs	r3, #0
 80157ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	2200      	movs	r2, #0
 80157d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80157d4:	e02a      	b.n	801582c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	9300      	str	r3, [sp, #0]
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	2200      	movs	r2, #0
 80157de:	2180      	movs	r1, #128	; 0x80
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f000 f840 	bl	8015866 <UART_WaitOnFlagUntilTimeout>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d001      	beq.n	80157f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80157ec:	2303      	movs	r3, #3
 80157ee:	e036      	b.n	801585e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80157f0:	69fb      	ldr	r3, [r7, #28]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d10b      	bne.n	801580e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	881b      	ldrh	r3, [r3, #0]
 80157fa:	461a      	mov	r2, r3
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015806:	69bb      	ldr	r3, [r7, #24]
 8015808:	3302      	adds	r3, #2
 801580a:	61bb      	str	r3, [r7, #24]
 801580c:	e007      	b.n	801581e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801580e:	69fb      	ldr	r3, [r7, #28]
 8015810:	781a      	ldrb	r2, [r3, #0]
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	3301      	adds	r3, #1
 801581c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015822:	b29b      	uxth	r3, r3
 8015824:	3b01      	subs	r3, #1
 8015826:	b29a      	uxth	r2, r3
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015830:	b29b      	uxth	r3, r3
 8015832:	2b00      	cmp	r3, #0
 8015834:	d1cf      	bne.n	80157d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	9300      	str	r3, [sp, #0]
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	2200      	movs	r2, #0
 801583e:	2140      	movs	r1, #64	; 0x40
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f000 f810 	bl	8015866 <UART_WaitOnFlagUntilTimeout>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d001      	beq.n	8015850 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801584c:	2303      	movs	r3, #3
 801584e:	e006      	b.n	801585e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	2220      	movs	r2, #32
 8015854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8015858:	2300      	movs	r3, #0
 801585a:	e000      	b.n	801585e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801585c:	2302      	movs	r3, #2
  }
}
 801585e:	4618      	mov	r0, r3
 8015860:	3720      	adds	r7, #32
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b090      	sub	sp, #64	; 0x40
 801586a:	af00      	add	r7, sp, #0
 801586c:	60f8      	str	r0, [r7, #12]
 801586e:	60b9      	str	r1, [r7, #8]
 8015870:	603b      	str	r3, [r7, #0]
 8015872:	4613      	mov	r3, r2
 8015874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015876:	e050      	b.n	801591a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801587e:	d04c      	beq.n	801591a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8015880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015882:	2b00      	cmp	r3, #0
 8015884:	d007      	beq.n	8015896 <UART_WaitOnFlagUntilTimeout+0x30>
 8015886:	f7fd ffb5 	bl	80137f4 <HAL_GetTick>
 801588a:	4602      	mov	r2, r0
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	1ad3      	subs	r3, r2, r3
 8015890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015892:	429a      	cmp	r2, r3
 8015894:	d241      	bcs.n	801591a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	330c      	adds	r3, #12
 801589c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a0:	e853 3f00 	ldrex	r3, [r3]
 80158a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80158ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	330c      	adds	r3, #12
 80158b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80158b6:	637a      	str	r2, [r7, #52]	; 0x34
 80158b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80158bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158be:	e841 2300 	strex	r3, r2, [r1]
 80158c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80158c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1e5      	bne.n	8015896 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	3314      	adds	r3, #20
 80158d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	e853 3f00 	ldrex	r3, [r3]
 80158d8:	613b      	str	r3, [r7, #16]
   return(result);
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	f023 0301 	bic.w	r3, r3, #1
 80158e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	3314      	adds	r3, #20
 80158e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158ea:	623a      	str	r2, [r7, #32]
 80158ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158ee:	69f9      	ldr	r1, [r7, #28]
 80158f0:	6a3a      	ldr	r2, [r7, #32]
 80158f2:	e841 2300 	strex	r3, r2, [r1]
 80158f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80158f8:	69bb      	ldr	r3, [r7, #24]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d1e5      	bne.n	80158ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	2220      	movs	r2, #32
 8015902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2220      	movs	r2, #32
 801590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8015916:	2303      	movs	r3, #3
 8015918:	e00f      	b.n	801593a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	4013      	ands	r3, r2
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	429a      	cmp	r2, r3
 8015928:	bf0c      	ite	eq
 801592a:	2301      	moveq	r3, #1
 801592c:	2300      	movne	r3, #0
 801592e:	b2db      	uxtb	r3, r3
 8015930:	461a      	mov	r2, r3
 8015932:	79fb      	ldrb	r3, [r7, #7]
 8015934:	429a      	cmp	r2, r3
 8015936:	d09f      	beq.n	8015878 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015938:	2300      	movs	r3, #0
}
 801593a:	4618      	mov	r0, r3
 801593c:	3740      	adds	r7, #64	; 0x40
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}
	...

08015944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015948:	b0c0      	sub	sp, #256	; 0x100
 801594a:	af00      	add	r7, sp, #0
 801594c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	691b      	ldr	r3, [r3, #16]
 8015958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015960:	68d9      	ldr	r1, [r3, #12]
 8015962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015966:	681a      	ldr	r2, [r3, #0]
 8015968:	ea40 0301 	orr.w	r3, r0, r1
 801596c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015972:	689a      	ldr	r2, [r3, #8]
 8015974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015978:	691b      	ldr	r3, [r3, #16]
 801597a:	431a      	orrs	r2, r3
 801597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015980:	695b      	ldr	r3, [r3, #20]
 8015982:	431a      	orrs	r2, r3
 8015984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015988:	69db      	ldr	r3, [r3, #28]
 801598a:	4313      	orrs	r3, r2
 801598c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801599c:	f021 010c 	bic.w	r1, r1, #12
 80159a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80159aa:	430b      	orrs	r3, r1
 80159ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80159ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	695b      	ldr	r3, [r3, #20]
 80159b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80159ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159be:	6999      	ldr	r1, [r3, #24]
 80159c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	ea40 0301 	orr.w	r3, r0, r1
 80159ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80159cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	4b8f      	ldr	r3, [pc, #572]	; (8015c10 <UART_SetConfig+0x2cc>)
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d005      	beq.n	80159e4 <UART_SetConfig+0xa0>
 80159d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	4b8d      	ldr	r3, [pc, #564]	; (8015c14 <UART_SetConfig+0x2d0>)
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d104      	bne.n	80159ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80159e4:	f7ff fe4c 	bl	8015680 <HAL_RCC_GetPCLK2Freq>
 80159e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80159ec:	e003      	b.n	80159f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80159ee:	f7ff fe33 	bl	8015658 <HAL_RCC_GetPCLK1Freq>
 80159f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80159f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159fa:	69db      	ldr	r3, [r3, #28]
 80159fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a00:	f040 810c 	bne.w	8015c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015a08:	2200      	movs	r2, #0
 8015a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8015a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8015a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8015a16:	4622      	mov	r2, r4
 8015a18:	462b      	mov	r3, r5
 8015a1a:	1891      	adds	r1, r2, r2
 8015a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8015a1e:	415b      	adcs	r3, r3
 8015a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8015a26:	4621      	mov	r1, r4
 8015a28:	eb12 0801 	adds.w	r8, r2, r1
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	eb43 0901 	adc.w	r9, r3, r1
 8015a32:	f04f 0200 	mov.w	r2, #0
 8015a36:	f04f 0300 	mov.w	r3, #0
 8015a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8015a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8015a46:	4690      	mov	r8, r2
 8015a48:	4699      	mov	r9, r3
 8015a4a:	4623      	mov	r3, r4
 8015a4c:	eb18 0303 	adds.w	r3, r8, r3
 8015a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015a54:	462b      	mov	r3, r5
 8015a56:	eb49 0303 	adc.w	r3, r9, r3
 8015a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	2200      	movs	r2, #0
 8015a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8015a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015a72:	460b      	mov	r3, r1
 8015a74:	18db      	adds	r3, r3, r3
 8015a76:	653b      	str	r3, [r7, #80]	; 0x50
 8015a78:	4613      	mov	r3, r2
 8015a7a:	eb42 0303 	adc.w	r3, r2, r3
 8015a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8015a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8015a88:	f7eb f966 	bl	8000d58 <__aeabi_uldivmod>
 8015a8c:	4602      	mov	r2, r0
 8015a8e:	460b      	mov	r3, r1
 8015a90:	4b61      	ldr	r3, [pc, #388]	; (8015c18 <UART_SetConfig+0x2d4>)
 8015a92:	fba3 2302 	umull	r2, r3, r3, r2
 8015a96:	095b      	lsrs	r3, r3, #5
 8015a98:	011c      	lsls	r4, r3, #4
 8015a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8015aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8015aac:	4642      	mov	r2, r8
 8015aae:	464b      	mov	r3, r9
 8015ab0:	1891      	adds	r1, r2, r2
 8015ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8015ab4:	415b      	adcs	r3, r3
 8015ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015abc:	4641      	mov	r1, r8
 8015abe:	eb12 0a01 	adds.w	sl, r2, r1
 8015ac2:	4649      	mov	r1, r9
 8015ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8015ac8:	f04f 0200 	mov.w	r2, #0
 8015acc:	f04f 0300 	mov.w	r3, #0
 8015ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8015ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015adc:	4692      	mov	sl, r2
 8015ade:	469b      	mov	fp, r3
 8015ae0:	4643      	mov	r3, r8
 8015ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8015ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015aea:	464b      	mov	r3, r9
 8015aec:	eb4b 0303 	adc.w	r3, fp, r3
 8015af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	2200      	movs	r2, #0
 8015afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015b08:	460b      	mov	r3, r1
 8015b0a:	18db      	adds	r3, r3, r3
 8015b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8015b0e:	4613      	mov	r3, r2
 8015b10:	eb42 0303 	adc.w	r3, r2, r3
 8015b14:	647b      	str	r3, [r7, #68]	; 0x44
 8015b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015b1e:	f7eb f91b 	bl	8000d58 <__aeabi_uldivmod>
 8015b22:	4602      	mov	r2, r0
 8015b24:	460b      	mov	r3, r1
 8015b26:	4611      	mov	r1, r2
 8015b28:	4b3b      	ldr	r3, [pc, #236]	; (8015c18 <UART_SetConfig+0x2d4>)
 8015b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8015b2e:	095b      	lsrs	r3, r3, #5
 8015b30:	2264      	movs	r2, #100	; 0x64
 8015b32:	fb02 f303 	mul.w	r3, r2, r3
 8015b36:	1acb      	subs	r3, r1, r3
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8015b3e:	4b36      	ldr	r3, [pc, #216]	; (8015c18 <UART_SetConfig+0x2d4>)
 8015b40:	fba3 2302 	umull	r2, r3, r3, r2
 8015b44:	095b      	lsrs	r3, r3, #5
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015b4c:	441c      	add	r4, r3
 8015b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015b52:	2200      	movs	r2, #0
 8015b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8015b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8015b60:	4642      	mov	r2, r8
 8015b62:	464b      	mov	r3, r9
 8015b64:	1891      	adds	r1, r2, r2
 8015b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8015b68:	415b      	adcs	r3, r3
 8015b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015b70:	4641      	mov	r1, r8
 8015b72:	1851      	adds	r1, r2, r1
 8015b74:	6339      	str	r1, [r7, #48]	; 0x30
 8015b76:	4649      	mov	r1, r9
 8015b78:	414b      	adcs	r3, r1
 8015b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8015b7c:	f04f 0200 	mov.w	r2, #0
 8015b80:	f04f 0300 	mov.w	r3, #0
 8015b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8015b88:	4659      	mov	r1, fp
 8015b8a:	00cb      	lsls	r3, r1, #3
 8015b8c:	4651      	mov	r1, sl
 8015b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015b92:	4651      	mov	r1, sl
 8015b94:	00ca      	lsls	r2, r1, #3
 8015b96:	4610      	mov	r0, r2
 8015b98:	4619      	mov	r1, r3
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	4642      	mov	r2, r8
 8015b9e:	189b      	adds	r3, r3, r2
 8015ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015ba4:	464b      	mov	r3, r9
 8015ba6:	460a      	mov	r2, r1
 8015ba8:	eb42 0303 	adc.w	r3, r2, r3
 8015bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015bb4:	685b      	ldr	r3, [r3, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	18db      	adds	r3, r3, r3
 8015bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015bca:	4613      	mov	r3, r2
 8015bcc:	eb42 0303 	adc.w	r3, r2, r3
 8015bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8015bda:	f7eb f8bd 	bl	8000d58 <__aeabi_uldivmod>
 8015bde:	4602      	mov	r2, r0
 8015be0:	460b      	mov	r3, r1
 8015be2:	4b0d      	ldr	r3, [pc, #52]	; (8015c18 <UART_SetConfig+0x2d4>)
 8015be4:	fba3 1302 	umull	r1, r3, r3, r2
 8015be8:	095b      	lsrs	r3, r3, #5
 8015bea:	2164      	movs	r1, #100	; 0x64
 8015bec:	fb01 f303 	mul.w	r3, r1, r3
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	00db      	lsls	r3, r3, #3
 8015bf4:	3332      	adds	r3, #50	; 0x32
 8015bf6:	4a08      	ldr	r2, [pc, #32]	; (8015c18 <UART_SetConfig+0x2d4>)
 8015bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8015bfc:	095b      	lsrs	r3, r3, #5
 8015bfe:	f003 0207 	and.w	r2, r3, #7
 8015c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	4422      	add	r2, r4
 8015c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015c0c:	e105      	b.n	8015e1a <UART_SetConfig+0x4d6>
 8015c0e:	bf00      	nop
 8015c10:	40011000 	.word	0x40011000
 8015c14:	40011400 	.word	0x40011400
 8015c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015c20:	2200      	movs	r2, #0
 8015c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8015c2e:	4642      	mov	r2, r8
 8015c30:	464b      	mov	r3, r9
 8015c32:	1891      	adds	r1, r2, r2
 8015c34:	6239      	str	r1, [r7, #32]
 8015c36:	415b      	adcs	r3, r3
 8015c38:	627b      	str	r3, [r7, #36]	; 0x24
 8015c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015c3e:	4641      	mov	r1, r8
 8015c40:	1854      	adds	r4, r2, r1
 8015c42:	4649      	mov	r1, r9
 8015c44:	eb43 0501 	adc.w	r5, r3, r1
 8015c48:	f04f 0200 	mov.w	r2, #0
 8015c4c:	f04f 0300 	mov.w	r3, #0
 8015c50:	00eb      	lsls	r3, r5, #3
 8015c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8015c56:	00e2      	lsls	r2, r4, #3
 8015c58:	4614      	mov	r4, r2
 8015c5a:	461d      	mov	r5, r3
 8015c5c:	4643      	mov	r3, r8
 8015c5e:	18e3      	adds	r3, r4, r3
 8015c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015c64:	464b      	mov	r3, r9
 8015c66:	eb45 0303 	adc.w	r3, r5, r3
 8015c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	2200      	movs	r2, #0
 8015c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015c7e:	f04f 0200 	mov.w	r2, #0
 8015c82:	f04f 0300 	mov.w	r3, #0
 8015c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015c8a:	4629      	mov	r1, r5
 8015c8c:	008b      	lsls	r3, r1, #2
 8015c8e:	4621      	mov	r1, r4
 8015c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015c94:	4621      	mov	r1, r4
 8015c96:	008a      	lsls	r2, r1, #2
 8015c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015c9c:	f7eb f85c 	bl	8000d58 <__aeabi_uldivmod>
 8015ca0:	4602      	mov	r2, r0
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	4b60      	ldr	r3, [pc, #384]	; (8015e28 <UART_SetConfig+0x4e4>)
 8015ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8015caa:	095b      	lsrs	r3, r3, #5
 8015cac:	011c      	lsls	r4, r3, #4
 8015cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015cc0:	4642      	mov	r2, r8
 8015cc2:	464b      	mov	r3, r9
 8015cc4:	1891      	adds	r1, r2, r2
 8015cc6:	61b9      	str	r1, [r7, #24]
 8015cc8:	415b      	adcs	r3, r3
 8015cca:	61fb      	str	r3, [r7, #28]
 8015ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015cd0:	4641      	mov	r1, r8
 8015cd2:	1851      	adds	r1, r2, r1
 8015cd4:	6139      	str	r1, [r7, #16]
 8015cd6:	4649      	mov	r1, r9
 8015cd8:	414b      	adcs	r3, r1
 8015cda:	617b      	str	r3, [r7, #20]
 8015cdc:	f04f 0200 	mov.w	r2, #0
 8015ce0:	f04f 0300 	mov.w	r3, #0
 8015ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015ce8:	4659      	mov	r1, fp
 8015cea:	00cb      	lsls	r3, r1, #3
 8015cec:	4651      	mov	r1, sl
 8015cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015cf2:	4651      	mov	r1, sl
 8015cf4:	00ca      	lsls	r2, r1, #3
 8015cf6:	4610      	mov	r0, r2
 8015cf8:	4619      	mov	r1, r3
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	4642      	mov	r2, r8
 8015cfe:	189b      	adds	r3, r3, r2
 8015d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015d04:	464b      	mov	r3, r9
 8015d06:	460a      	mov	r2, r1
 8015d08:	eb42 0303 	adc.w	r3, r2, r3
 8015d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	2200      	movs	r2, #0
 8015d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8015d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015d1c:	f04f 0200 	mov.w	r2, #0
 8015d20:	f04f 0300 	mov.w	r3, #0
 8015d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8015d28:	4649      	mov	r1, r9
 8015d2a:	008b      	lsls	r3, r1, #2
 8015d2c:	4641      	mov	r1, r8
 8015d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015d32:	4641      	mov	r1, r8
 8015d34:	008a      	lsls	r2, r1, #2
 8015d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8015d3a:	f7eb f80d 	bl	8000d58 <__aeabi_uldivmod>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	460b      	mov	r3, r1
 8015d42:	4b39      	ldr	r3, [pc, #228]	; (8015e28 <UART_SetConfig+0x4e4>)
 8015d44:	fba3 1302 	umull	r1, r3, r3, r2
 8015d48:	095b      	lsrs	r3, r3, #5
 8015d4a:	2164      	movs	r1, #100	; 0x64
 8015d4c:	fb01 f303 	mul.w	r3, r1, r3
 8015d50:	1ad3      	subs	r3, r2, r3
 8015d52:	011b      	lsls	r3, r3, #4
 8015d54:	3332      	adds	r3, #50	; 0x32
 8015d56:	4a34      	ldr	r2, [pc, #208]	; (8015e28 <UART_SetConfig+0x4e4>)
 8015d58:	fba2 2303 	umull	r2, r3, r2, r3
 8015d5c:	095b      	lsrs	r3, r3, #5
 8015d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d62:	441c      	add	r4, r3
 8015d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015d68:	2200      	movs	r2, #0
 8015d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8015d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8015d6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015d72:	4642      	mov	r2, r8
 8015d74:	464b      	mov	r3, r9
 8015d76:	1891      	adds	r1, r2, r2
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	415b      	adcs	r3, r3
 8015d7c:	60fb      	str	r3, [r7, #12]
 8015d7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015d82:	4641      	mov	r1, r8
 8015d84:	1851      	adds	r1, r2, r1
 8015d86:	6039      	str	r1, [r7, #0]
 8015d88:	4649      	mov	r1, r9
 8015d8a:	414b      	adcs	r3, r1
 8015d8c:	607b      	str	r3, [r7, #4]
 8015d8e:	f04f 0200 	mov.w	r2, #0
 8015d92:	f04f 0300 	mov.w	r3, #0
 8015d96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8015d9a:	4659      	mov	r1, fp
 8015d9c:	00cb      	lsls	r3, r1, #3
 8015d9e:	4651      	mov	r1, sl
 8015da0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015da4:	4651      	mov	r1, sl
 8015da6:	00ca      	lsls	r2, r1, #3
 8015da8:	4610      	mov	r0, r2
 8015daa:	4619      	mov	r1, r3
 8015dac:	4603      	mov	r3, r0
 8015dae:	4642      	mov	r2, r8
 8015db0:	189b      	adds	r3, r3, r2
 8015db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8015db4:	464b      	mov	r3, r9
 8015db6:	460a      	mov	r2, r1
 8015db8:	eb42 0303 	adc.w	r3, r2, r3
 8015dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8015dc8:	667a      	str	r2, [r7, #100]	; 0x64
 8015dca:	f04f 0200 	mov.w	r2, #0
 8015dce:	f04f 0300 	mov.w	r3, #0
 8015dd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8015dd6:	4649      	mov	r1, r9
 8015dd8:	008b      	lsls	r3, r1, #2
 8015dda:	4641      	mov	r1, r8
 8015ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015de0:	4641      	mov	r1, r8
 8015de2:	008a      	lsls	r2, r1, #2
 8015de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015de8:	f7ea ffb6 	bl	8000d58 <__aeabi_uldivmod>
 8015dec:	4602      	mov	r2, r0
 8015dee:	460b      	mov	r3, r1
 8015df0:	4b0d      	ldr	r3, [pc, #52]	; (8015e28 <UART_SetConfig+0x4e4>)
 8015df2:	fba3 1302 	umull	r1, r3, r3, r2
 8015df6:	095b      	lsrs	r3, r3, #5
 8015df8:	2164      	movs	r1, #100	; 0x64
 8015dfa:	fb01 f303 	mul.w	r3, r1, r3
 8015dfe:	1ad3      	subs	r3, r2, r3
 8015e00:	011b      	lsls	r3, r3, #4
 8015e02:	3332      	adds	r3, #50	; 0x32
 8015e04:	4a08      	ldr	r2, [pc, #32]	; (8015e28 <UART_SetConfig+0x4e4>)
 8015e06:	fba2 2303 	umull	r2, r3, r2, r3
 8015e0a:	095b      	lsrs	r3, r3, #5
 8015e0c:	f003 020f 	and.w	r2, r3, #15
 8015e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	4422      	add	r2, r4
 8015e18:	609a      	str	r2, [r3, #8]
}
 8015e1a:	bf00      	nop
 8015e1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8015e20:	46bd      	mov	sp, r7
 8015e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015e26:	bf00      	nop
 8015e28:	51eb851f 	.word	0x51eb851f

08015e2c <__errno>:
 8015e2c:	4b01      	ldr	r3, [pc, #4]	; (8015e34 <__errno+0x8>)
 8015e2e:	6818      	ldr	r0, [r3, #0]
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop
 8015e34:	20000040 	.word	0x20000040

08015e38 <__libc_init_array>:
 8015e38:	b570      	push	{r4, r5, r6, lr}
 8015e3a:	4d0d      	ldr	r5, [pc, #52]	; (8015e70 <__libc_init_array+0x38>)
 8015e3c:	4c0d      	ldr	r4, [pc, #52]	; (8015e74 <__libc_init_array+0x3c>)
 8015e3e:	1b64      	subs	r4, r4, r5
 8015e40:	10a4      	asrs	r4, r4, #2
 8015e42:	2600      	movs	r6, #0
 8015e44:	42a6      	cmp	r6, r4
 8015e46:	d109      	bne.n	8015e5c <__libc_init_array+0x24>
 8015e48:	4d0b      	ldr	r5, [pc, #44]	; (8015e78 <__libc_init_array+0x40>)
 8015e4a:	4c0c      	ldr	r4, [pc, #48]	; (8015e7c <__libc_init_array+0x44>)
 8015e4c:	f005 f8da 	bl	801b004 <_init>
 8015e50:	1b64      	subs	r4, r4, r5
 8015e52:	10a4      	asrs	r4, r4, #2
 8015e54:	2600      	movs	r6, #0
 8015e56:	42a6      	cmp	r6, r4
 8015e58:	d105      	bne.n	8015e66 <__libc_init_array+0x2e>
 8015e5a:	bd70      	pop	{r4, r5, r6, pc}
 8015e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e60:	4798      	blx	r3
 8015e62:	3601      	adds	r6, #1
 8015e64:	e7ee      	b.n	8015e44 <__libc_init_array+0xc>
 8015e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e6a:	4798      	blx	r3
 8015e6c:	3601      	adds	r6, #1
 8015e6e:	e7f2      	b.n	8015e56 <__libc_init_array+0x1e>
 8015e70:	0801bef4 	.word	0x0801bef4
 8015e74:	0801bef4 	.word	0x0801bef4
 8015e78:	0801bef4 	.word	0x0801bef4
 8015e7c:	0801bef8 	.word	0x0801bef8

08015e80 <memcpy>:
 8015e80:	440a      	add	r2, r1
 8015e82:	4291      	cmp	r1, r2
 8015e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e88:	d100      	bne.n	8015e8c <memcpy+0xc>
 8015e8a:	4770      	bx	lr
 8015e8c:	b510      	push	{r4, lr}
 8015e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e96:	4291      	cmp	r1, r2
 8015e98:	d1f9      	bne.n	8015e8e <memcpy+0xe>
 8015e9a:	bd10      	pop	{r4, pc}

08015e9c <memset>:
 8015e9c:	4402      	add	r2, r0
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	d100      	bne.n	8015ea6 <memset+0xa>
 8015ea4:	4770      	bx	lr
 8015ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8015eaa:	e7f9      	b.n	8015ea0 <memset+0x4>

08015eac <__cvt>:
 8015eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015eb0:	ec55 4b10 	vmov	r4, r5, d0
 8015eb4:	2d00      	cmp	r5, #0
 8015eb6:	460e      	mov	r6, r1
 8015eb8:	4619      	mov	r1, r3
 8015eba:	462b      	mov	r3, r5
 8015ebc:	bfbb      	ittet	lt
 8015ebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015ec2:	461d      	movlt	r5, r3
 8015ec4:	2300      	movge	r3, #0
 8015ec6:	232d      	movlt	r3, #45	; 0x2d
 8015ec8:	700b      	strb	r3, [r1, #0]
 8015eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ecc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015ed0:	4691      	mov	r9, r2
 8015ed2:	f023 0820 	bic.w	r8, r3, #32
 8015ed6:	bfbc      	itt	lt
 8015ed8:	4622      	movlt	r2, r4
 8015eda:	4614      	movlt	r4, r2
 8015edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015ee0:	d005      	beq.n	8015eee <__cvt+0x42>
 8015ee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015ee6:	d100      	bne.n	8015eea <__cvt+0x3e>
 8015ee8:	3601      	adds	r6, #1
 8015eea:	2102      	movs	r1, #2
 8015eec:	e000      	b.n	8015ef0 <__cvt+0x44>
 8015eee:	2103      	movs	r1, #3
 8015ef0:	ab03      	add	r3, sp, #12
 8015ef2:	9301      	str	r3, [sp, #4]
 8015ef4:	ab02      	add	r3, sp, #8
 8015ef6:	9300      	str	r3, [sp, #0]
 8015ef8:	ec45 4b10 	vmov	d0, r4, r5
 8015efc:	4653      	mov	r3, sl
 8015efe:	4632      	mov	r2, r6
 8015f00:	f001 fe56 	bl	8017bb0 <_dtoa_r>
 8015f04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015f08:	4607      	mov	r7, r0
 8015f0a:	d102      	bne.n	8015f12 <__cvt+0x66>
 8015f0c:	f019 0f01 	tst.w	r9, #1
 8015f10:	d022      	beq.n	8015f58 <__cvt+0xac>
 8015f12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015f16:	eb07 0906 	add.w	r9, r7, r6
 8015f1a:	d110      	bne.n	8015f3e <__cvt+0x92>
 8015f1c:	783b      	ldrb	r3, [r7, #0]
 8015f1e:	2b30      	cmp	r3, #48	; 0x30
 8015f20:	d10a      	bne.n	8015f38 <__cvt+0x8c>
 8015f22:	2200      	movs	r2, #0
 8015f24:	2300      	movs	r3, #0
 8015f26:	4620      	mov	r0, r4
 8015f28:	4629      	mov	r1, r5
 8015f2a:	f7ea fde5 	bl	8000af8 <__aeabi_dcmpeq>
 8015f2e:	b918      	cbnz	r0, 8015f38 <__cvt+0x8c>
 8015f30:	f1c6 0601 	rsb	r6, r6, #1
 8015f34:	f8ca 6000 	str.w	r6, [sl]
 8015f38:	f8da 3000 	ldr.w	r3, [sl]
 8015f3c:	4499      	add	r9, r3
 8015f3e:	2200      	movs	r2, #0
 8015f40:	2300      	movs	r3, #0
 8015f42:	4620      	mov	r0, r4
 8015f44:	4629      	mov	r1, r5
 8015f46:	f7ea fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 8015f4a:	b108      	cbz	r0, 8015f50 <__cvt+0xa4>
 8015f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015f50:	2230      	movs	r2, #48	; 0x30
 8015f52:	9b03      	ldr	r3, [sp, #12]
 8015f54:	454b      	cmp	r3, r9
 8015f56:	d307      	bcc.n	8015f68 <__cvt+0xbc>
 8015f58:	9b03      	ldr	r3, [sp, #12]
 8015f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f5c:	1bdb      	subs	r3, r3, r7
 8015f5e:	4638      	mov	r0, r7
 8015f60:	6013      	str	r3, [r2, #0]
 8015f62:	b004      	add	sp, #16
 8015f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f68:	1c59      	adds	r1, r3, #1
 8015f6a:	9103      	str	r1, [sp, #12]
 8015f6c:	701a      	strb	r2, [r3, #0]
 8015f6e:	e7f0      	b.n	8015f52 <__cvt+0xa6>

08015f70 <__exponent>:
 8015f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f72:	4603      	mov	r3, r0
 8015f74:	2900      	cmp	r1, #0
 8015f76:	bfb8      	it	lt
 8015f78:	4249      	neglt	r1, r1
 8015f7a:	f803 2b02 	strb.w	r2, [r3], #2
 8015f7e:	bfb4      	ite	lt
 8015f80:	222d      	movlt	r2, #45	; 0x2d
 8015f82:	222b      	movge	r2, #43	; 0x2b
 8015f84:	2909      	cmp	r1, #9
 8015f86:	7042      	strb	r2, [r0, #1]
 8015f88:	dd2a      	ble.n	8015fe0 <__exponent+0x70>
 8015f8a:	f10d 0407 	add.w	r4, sp, #7
 8015f8e:	46a4      	mov	ip, r4
 8015f90:	270a      	movs	r7, #10
 8015f92:	46a6      	mov	lr, r4
 8015f94:	460a      	mov	r2, r1
 8015f96:	fb91 f6f7 	sdiv	r6, r1, r7
 8015f9a:	fb07 1516 	mls	r5, r7, r6, r1
 8015f9e:	3530      	adds	r5, #48	; 0x30
 8015fa0:	2a63      	cmp	r2, #99	; 0x63
 8015fa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8015fa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015faa:	4631      	mov	r1, r6
 8015fac:	dcf1      	bgt.n	8015f92 <__exponent+0x22>
 8015fae:	3130      	adds	r1, #48	; 0x30
 8015fb0:	f1ae 0502 	sub.w	r5, lr, #2
 8015fb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015fb8:	1c44      	adds	r4, r0, #1
 8015fba:	4629      	mov	r1, r5
 8015fbc:	4561      	cmp	r1, ip
 8015fbe:	d30a      	bcc.n	8015fd6 <__exponent+0x66>
 8015fc0:	f10d 0209 	add.w	r2, sp, #9
 8015fc4:	eba2 020e 	sub.w	r2, r2, lr
 8015fc8:	4565      	cmp	r5, ip
 8015fca:	bf88      	it	hi
 8015fcc:	2200      	movhi	r2, #0
 8015fce:	4413      	add	r3, r2
 8015fd0:	1a18      	subs	r0, r3, r0
 8015fd2:	b003      	add	sp, #12
 8015fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015fde:	e7ed      	b.n	8015fbc <__exponent+0x4c>
 8015fe0:	2330      	movs	r3, #48	; 0x30
 8015fe2:	3130      	adds	r1, #48	; 0x30
 8015fe4:	7083      	strb	r3, [r0, #2]
 8015fe6:	70c1      	strb	r1, [r0, #3]
 8015fe8:	1d03      	adds	r3, r0, #4
 8015fea:	e7f1      	b.n	8015fd0 <__exponent+0x60>

08015fec <_printf_float>:
 8015fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff0:	ed2d 8b02 	vpush	{d8}
 8015ff4:	b08d      	sub	sp, #52	; 0x34
 8015ff6:	460c      	mov	r4, r1
 8015ff8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015ffc:	4616      	mov	r6, r2
 8015ffe:	461f      	mov	r7, r3
 8016000:	4605      	mov	r5, r0
 8016002:	f002 ff33 	bl	8018e6c <_localeconv_r>
 8016006:	f8d0 a000 	ldr.w	sl, [r0]
 801600a:	4650      	mov	r0, sl
 801600c:	f7ea f8f2 	bl	80001f4 <strlen>
 8016010:	2300      	movs	r3, #0
 8016012:	930a      	str	r3, [sp, #40]	; 0x28
 8016014:	6823      	ldr	r3, [r4, #0]
 8016016:	9305      	str	r3, [sp, #20]
 8016018:	f8d8 3000 	ldr.w	r3, [r8]
 801601c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016020:	3307      	adds	r3, #7
 8016022:	f023 0307 	bic.w	r3, r3, #7
 8016026:	f103 0208 	add.w	r2, r3, #8
 801602a:	f8c8 2000 	str.w	r2, [r8]
 801602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016032:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016036:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801603a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801603e:	9307      	str	r3, [sp, #28]
 8016040:	f8cd 8018 	str.w	r8, [sp, #24]
 8016044:	ee08 0a10 	vmov	s16, r0
 8016048:	4b9f      	ldr	r3, [pc, #636]	; (80162c8 <_printf_float+0x2dc>)
 801604a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801604e:	f04f 32ff 	mov.w	r2, #4294967295
 8016052:	f7ea fd83 	bl	8000b5c <__aeabi_dcmpun>
 8016056:	bb88      	cbnz	r0, 80160bc <_printf_float+0xd0>
 8016058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801605c:	4b9a      	ldr	r3, [pc, #616]	; (80162c8 <_printf_float+0x2dc>)
 801605e:	f04f 32ff 	mov.w	r2, #4294967295
 8016062:	f7ea fd5d 	bl	8000b20 <__aeabi_dcmple>
 8016066:	bb48      	cbnz	r0, 80160bc <_printf_float+0xd0>
 8016068:	2200      	movs	r2, #0
 801606a:	2300      	movs	r3, #0
 801606c:	4640      	mov	r0, r8
 801606e:	4649      	mov	r1, r9
 8016070:	f7ea fd4c 	bl	8000b0c <__aeabi_dcmplt>
 8016074:	b110      	cbz	r0, 801607c <_printf_float+0x90>
 8016076:	232d      	movs	r3, #45	; 0x2d
 8016078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801607c:	4b93      	ldr	r3, [pc, #588]	; (80162cc <_printf_float+0x2e0>)
 801607e:	4894      	ldr	r0, [pc, #592]	; (80162d0 <_printf_float+0x2e4>)
 8016080:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016084:	bf94      	ite	ls
 8016086:	4698      	movls	r8, r3
 8016088:	4680      	movhi	r8, r0
 801608a:	2303      	movs	r3, #3
 801608c:	6123      	str	r3, [r4, #16]
 801608e:	9b05      	ldr	r3, [sp, #20]
 8016090:	f023 0204 	bic.w	r2, r3, #4
 8016094:	6022      	str	r2, [r4, #0]
 8016096:	f04f 0900 	mov.w	r9, #0
 801609a:	9700      	str	r7, [sp, #0]
 801609c:	4633      	mov	r3, r6
 801609e:	aa0b      	add	r2, sp, #44	; 0x2c
 80160a0:	4621      	mov	r1, r4
 80160a2:	4628      	mov	r0, r5
 80160a4:	f000 f9d8 	bl	8016458 <_printf_common>
 80160a8:	3001      	adds	r0, #1
 80160aa:	f040 8090 	bne.w	80161ce <_printf_float+0x1e2>
 80160ae:	f04f 30ff 	mov.w	r0, #4294967295
 80160b2:	b00d      	add	sp, #52	; 0x34
 80160b4:	ecbd 8b02 	vpop	{d8}
 80160b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160bc:	4642      	mov	r2, r8
 80160be:	464b      	mov	r3, r9
 80160c0:	4640      	mov	r0, r8
 80160c2:	4649      	mov	r1, r9
 80160c4:	f7ea fd4a 	bl	8000b5c <__aeabi_dcmpun>
 80160c8:	b140      	cbz	r0, 80160dc <_printf_float+0xf0>
 80160ca:	464b      	mov	r3, r9
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	bfbc      	itt	lt
 80160d0:	232d      	movlt	r3, #45	; 0x2d
 80160d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80160d6:	487f      	ldr	r0, [pc, #508]	; (80162d4 <_printf_float+0x2e8>)
 80160d8:	4b7f      	ldr	r3, [pc, #508]	; (80162d8 <_printf_float+0x2ec>)
 80160da:	e7d1      	b.n	8016080 <_printf_float+0x94>
 80160dc:	6863      	ldr	r3, [r4, #4]
 80160de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80160e2:	9206      	str	r2, [sp, #24]
 80160e4:	1c5a      	adds	r2, r3, #1
 80160e6:	d13f      	bne.n	8016168 <_printf_float+0x17c>
 80160e8:	2306      	movs	r3, #6
 80160ea:	6063      	str	r3, [r4, #4]
 80160ec:	9b05      	ldr	r3, [sp, #20]
 80160ee:	6861      	ldr	r1, [r4, #4]
 80160f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80160f4:	2300      	movs	r3, #0
 80160f6:	9303      	str	r3, [sp, #12]
 80160f8:	ab0a      	add	r3, sp, #40	; 0x28
 80160fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80160fe:	ab09      	add	r3, sp, #36	; 0x24
 8016100:	ec49 8b10 	vmov	d0, r8, r9
 8016104:	9300      	str	r3, [sp, #0]
 8016106:	6022      	str	r2, [r4, #0]
 8016108:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801610c:	4628      	mov	r0, r5
 801610e:	f7ff fecd 	bl	8015eac <__cvt>
 8016112:	9b06      	ldr	r3, [sp, #24]
 8016114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016116:	2b47      	cmp	r3, #71	; 0x47
 8016118:	4680      	mov	r8, r0
 801611a:	d108      	bne.n	801612e <_printf_float+0x142>
 801611c:	1cc8      	adds	r0, r1, #3
 801611e:	db02      	blt.n	8016126 <_printf_float+0x13a>
 8016120:	6863      	ldr	r3, [r4, #4]
 8016122:	4299      	cmp	r1, r3
 8016124:	dd41      	ble.n	80161aa <_printf_float+0x1be>
 8016126:	f1ab 0b02 	sub.w	fp, fp, #2
 801612a:	fa5f fb8b 	uxtb.w	fp, fp
 801612e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016132:	d820      	bhi.n	8016176 <_printf_float+0x18a>
 8016134:	3901      	subs	r1, #1
 8016136:	465a      	mov	r2, fp
 8016138:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801613c:	9109      	str	r1, [sp, #36]	; 0x24
 801613e:	f7ff ff17 	bl	8015f70 <__exponent>
 8016142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016144:	1813      	adds	r3, r2, r0
 8016146:	2a01      	cmp	r2, #1
 8016148:	4681      	mov	r9, r0
 801614a:	6123      	str	r3, [r4, #16]
 801614c:	dc02      	bgt.n	8016154 <_printf_float+0x168>
 801614e:	6822      	ldr	r2, [r4, #0]
 8016150:	07d2      	lsls	r2, r2, #31
 8016152:	d501      	bpl.n	8016158 <_printf_float+0x16c>
 8016154:	3301      	adds	r3, #1
 8016156:	6123      	str	r3, [r4, #16]
 8016158:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801615c:	2b00      	cmp	r3, #0
 801615e:	d09c      	beq.n	801609a <_printf_float+0xae>
 8016160:	232d      	movs	r3, #45	; 0x2d
 8016162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016166:	e798      	b.n	801609a <_printf_float+0xae>
 8016168:	9a06      	ldr	r2, [sp, #24]
 801616a:	2a47      	cmp	r2, #71	; 0x47
 801616c:	d1be      	bne.n	80160ec <_printf_float+0x100>
 801616e:	2b00      	cmp	r3, #0
 8016170:	d1bc      	bne.n	80160ec <_printf_float+0x100>
 8016172:	2301      	movs	r3, #1
 8016174:	e7b9      	b.n	80160ea <_printf_float+0xfe>
 8016176:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801617a:	d118      	bne.n	80161ae <_printf_float+0x1c2>
 801617c:	2900      	cmp	r1, #0
 801617e:	6863      	ldr	r3, [r4, #4]
 8016180:	dd0b      	ble.n	801619a <_printf_float+0x1ae>
 8016182:	6121      	str	r1, [r4, #16]
 8016184:	b913      	cbnz	r3, 801618c <_printf_float+0x1a0>
 8016186:	6822      	ldr	r2, [r4, #0]
 8016188:	07d0      	lsls	r0, r2, #31
 801618a:	d502      	bpl.n	8016192 <_printf_float+0x1a6>
 801618c:	3301      	adds	r3, #1
 801618e:	440b      	add	r3, r1
 8016190:	6123      	str	r3, [r4, #16]
 8016192:	65a1      	str	r1, [r4, #88]	; 0x58
 8016194:	f04f 0900 	mov.w	r9, #0
 8016198:	e7de      	b.n	8016158 <_printf_float+0x16c>
 801619a:	b913      	cbnz	r3, 80161a2 <_printf_float+0x1b6>
 801619c:	6822      	ldr	r2, [r4, #0]
 801619e:	07d2      	lsls	r2, r2, #31
 80161a0:	d501      	bpl.n	80161a6 <_printf_float+0x1ba>
 80161a2:	3302      	adds	r3, #2
 80161a4:	e7f4      	b.n	8016190 <_printf_float+0x1a4>
 80161a6:	2301      	movs	r3, #1
 80161a8:	e7f2      	b.n	8016190 <_printf_float+0x1a4>
 80161aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80161ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b0:	4299      	cmp	r1, r3
 80161b2:	db05      	blt.n	80161c0 <_printf_float+0x1d4>
 80161b4:	6823      	ldr	r3, [r4, #0]
 80161b6:	6121      	str	r1, [r4, #16]
 80161b8:	07d8      	lsls	r0, r3, #31
 80161ba:	d5ea      	bpl.n	8016192 <_printf_float+0x1a6>
 80161bc:	1c4b      	adds	r3, r1, #1
 80161be:	e7e7      	b.n	8016190 <_printf_float+0x1a4>
 80161c0:	2900      	cmp	r1, #0
 80161c2:	bfd4      	ite	le
 80161c4:	f1c1 0202 	rsble	r2, r1, #2
 80161c8:	2201      	movgt	r2, #1
 80161ca:	4413      	add	r3, r2
 80161cc:	e7e0      	b.n	8016190 <_printf_float+0x1a4>
 80161ce:	6823      	ldr	r3, [r4, #0]
 80161d0:	055a      	lsls	r2, r3, #21
 80161d2:	d407      	bmi.n	80161e4 <_printf_float+0x1f8>
 80161d4:	6923      	ldr	r3, [r4, #16]
 80161d6:	4642      	mov	r2, r8
 80161d8:	4631      	mov	r1, r6
 80161da:	4628      	mov	r0, r5
 80161dc:	47b8      	blx	r7
 80161de:	3001      	adds	r0, #1
 80161e0:	d12c      	bne.n	801623c <_printf_float+0x250>
 80161e2:	e764      	b.n	80160ae <_printf_float+0xc2>
 80161e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80161e8:	f240 80e0 	bls.w	80163ac <_printf_float+0x3c0>
 80161ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80161f0:	2200      	movs	r2, #0
 80161f2:	2300      	movs	r3, #0
 80161f4:	f7ea fc80 	bl	8000af8 <__aeabi_dcmpeq>
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d034      	beq.n	8016266 <_printf_float+0x27a>
 80161fc:	4a37      	ldr	r2, [pc, #220]	; (80162dc <_printf_float+0x2f0>)
 80161fe:	2301      	movs	r3, #1
 8016200:	4631      	mov	r1, r6
 8016202:	4628      	mov	r0, r5
 8016204:	47b8      	blx	r7
 8016206:	3001      	adds	r0, #1
 8016208:	f43f af51 	beq.w	80160ae <_printf_float+0xc2>
 801620c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016210:	429a      	cmp	r2, r3
 8016212:	db02      	blt.n	801621a <_printf_float+0x22e>
 8016214:	6823      	ldr	r3, [r4, #0]
 8016216:	07d8      	lsls	r0, r3, #31
 8016218:	d510      	bpl.n	801623c <_printf_float+0x250>
 801621a:	ee18 3a10 	vmov	r3, s16
 801621e:	4652      	mov	r2, sl
 8016220:	4631      	mov	r1, r6
 8016222:	4628      	mov	r0, r5
 8016224:	47b8      	blx	r7
 8016226:	3001      	adds	r0, #1
 8016228:	f43f af41 	beq.w	80160ae <_printf_float+0xc2>
 801622c:	f04f 0800 	mov.w	r8, #0
 8016230:	f104 091a 	add.w	r9, r4, #26
 8016234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016236:	3b01      	subs	r3, #1
 8016238:	4543      	cmp	r3, r8
 801623a:	dc09      	bgt.n	8016250 <_printf_float+0x264>
 801623c:	6823      	ldr	r3, [r4, #0]
 801623e:	079b      	lsls	r3, r3, #30
 8016240:	f100 8105 	bmi.w	801644e <_printf_float+0x462>
 8016244:	68e0      	ldr	r0, [r4, #12]
 8016246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016248:	4298      	cmp	r0, r3
 801624a:	bfb8      	it	lt
 801624c:	4618      	movlt	r0, r3
 801624e:	e730      	b.n	80160b2 <_printf_float+0xc6>
 8016250:	2301      	movs	r3, #1
 8016252:	464a      	mov	r2, r9
 8016254:	4631      	mov	r1, r6
 8016256:	4628      	mov	r0, r5
 8016258:	47b8      	blx	r7
 801625a:	3001      	adds	r0, #1
 801625c:	f43f af27 	beq.w	80160ae <_printf_float+0xc2>
 8016260:	f108 0801 	add.w	r8, r8, #1
 8016264:	e7e6      	b.n	8016234 <_printf_float+0x248>
 8016266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016268:	2b00      	cmp	r3, #0
 801626a:	dc39      	bgt.n	80162e0 <_printf_float+0x2f4>
 801626c:	4a1b      	ldr	r2, [pc, #108]	; (80162dc <_printf_float+0x2f0>)
 801626e:	2301      	movs	r3, #1
 8016270:	4631      	mov	r1, r6
 8016272:	4628      	mov	r0, r5
 8016274:	47b8      	blx	r7
 8016276:	3001      	adds	r0, #1
 8016278:	f43f af19 	beq.w	80160ae <_printf_float+0xc2>
 801627c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016280:	4313      	orrs	r3, r2
 8016282:	d102      	bne.n	801628a <_printf_float+0x29e>
 8016284:	6823      	ldr	r3, [r4, #0]
 8016286:	07d9      	lsls	r1, r3, #31
 8016288:	d5d8      	bpl.n	801623c <_printf_float+0x250>
 801628a:	ee18 3a10 	vmov	r3, s16
 801628e:	4652      	mov	r2, sl
 8016290:	4631      	mov	r1, r6
 8016292:	4628      	mov	r0, r5
 8016294:	47b8      	blx	r7
 8016296:	3001      	adds	r0, #1
 8016298:	f43f af09 	beq.w	80160ae <_printf_float+0xc2>
 801629c:	f04f 0900 	mov.w	r9, #0
 80162a0:	f104 0a1a 	add.w	sl, r4, #26
 80162a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162a6:	425b      	negs	r3, r3
 80162a8:	454b      	cmp	r3, r9
 80162aa:	dc01      	bgt.n	80162b0 <_printf_float+0x2c4>
 80162ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162ae:	e792      	b.n	80161d6 <_printf_float+0x1ea>
 80162b0:	2301      	movs	r3, #1
 80162b2:	4652      	mov	r2, sl
 80162b4:	4631      	mov	r1, r6
 80162b6:	4628      	mov	r0, r5
 80162b8:	47b8      	blx	r7
 80162ba:	3001      	adds	r0, #1
 80162bc:	f43f aef7 	beq.w	80160ae <_printf_float+0xc2>
 80162c0:	f109 0901 	add.w	r9, r9, #1
 80162c4:	e7ee      	b.n	80162a4 <_printf_float+0x2b8>
 80162c6:	bf00      	nop
 80162c8:	7fefffff 	.word	0x7fefffff
 80162cc:	0801ba34 	.word	0x0801ba34
 80162d0:	0801ba38 	.word	0x0801ba38
 80162d4:	0801ba40 	.word	0x0801ba40
 80162d8:	0801ba3c 	.word	0x0801ba3c
 80162dc:	0801be39 	.word	0x0801be39
 80162e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80162e4:	429a      	cmp	r2, r3
 80162e6:	bfa8      	it	ge
 80162e8:	461a      	movge	r2, r3
 80162ea:	2a00      	cmp	r2, #0
 80162ec:	4691      	mov	r9, r2
 80162ee:	dc37      	bgt.n	8016360 <_printf_float+0x374>
 80162f0:	f04f 0b00 	mov.w	fp, #0
 80162f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80162f8:	f104 021a 	add.w	r2, r4, #26
 80162fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80162fe:	9305      	str	r3, [sp, #20]
 8016300:	eba3 0309 	sub.w	r3, r3, r9
 8016304:	455b      	cmp	r3, fp
 8016306:	dc33      	bgt.n	8016370 <_printf_float+0x384>
 8016308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801630c:	429a      	cmp	r2, r3
 801630e:	db3b      	blt.n	8016388 <_printf_float+0x39c>
 8016310:	6823      	ldr	r3, [r4, #0]
 8016312:	07da      	lsls	r2, r3, #31
 8016314:	d438      	bmi.n	8016388 <_printf_float+0x39c>
 8016316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016318:	9a05      	ldr	r2, [sp, #20]
 801631a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801631c:	1a9a      	subs	r2, r3, r2
 801631e:	eba3 0901 	sub.w	r9, r3, r1
 8016322:	4591      	cmp	r9, r2
 8016324:	bfa8      	it	ge
 8016326:	4691      	movge	r9, r2
 8016328:	f1b9 0f00 	cmp.w	r9, #0
 801632c:	dc35      	bgt.n	801639a <_printf_float+0x3ae>
 801632e:	f04f 0800 	mov.w	r8, #0
 8016332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016336:	f104 0a1a 	add.w	sl, r4, #26
 801633a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801633e:	1a9b      	subs	r3, r3, r2
 8016340:	eba3 0309 	sub.w	r3, r3, r9
 8016344:	4543      	cmp	r3, r8
 8016346:	f77f af79 	ble.w	801623c <_printf_float+0x250>
 801634a:	2301      	movs	r3, #1
 801634c:	4652      	mov	r2, sl
 801634e:	4631      	mov	r1, r6
 8016350:	4628      	mov	r0, r5
 8016352:	47b8      	blx	r7
 8016354:	3001      	adds	r0, #1
 8016356:	f43f aeaa 	beq.w	80160ae <_printf_float+0xc2>
 801635a:	f108 0801 	add.w	r8, r8, #1
 801635e:	e7ec      	b.n	801633a <_printf_float+0x34e>
 8016360:	4613      	mov	r3, r2
 8016362:	4631      	mov	r1, r6
 8016364:	4642      	mov	r2, r8
 8016366:	4628      	mov	r0, r5
 8016368:	47b8      	blx	r7
 801636a:	3001      	adds	r0, #1
 801636c:	d1c0      	bne.n	80162f0 <_printf_float+0x304>
 801636e:	e69e      	b.n	80160ae <_printf_float+0xc2>
 8016370:	2301      	movs	r3, #1
 8016372:	4631      	mov	r1, r6
 8016374:	4628      	mov	r0, r5
 8016376:	9205      	str	r2, [sp, #20]
 8016378:	47b8      	blx	r7
 801637a:	3001      	adds	r0, #1
 801637c:	f43f ae97 	beq.w	80160ae <_printf_float+0xc2>
 8016380:	9a05      	ldr	r2, [sp, #20]
 8016382:	f10b 0b01 	add.w	fp, fp, #1
 8016386:	e7b9      	b.n	80162fc <_printf_float+0x310>
 8016388:	ee18 3a10 	vmov	r3, s16
 801638c:	4652      	mov	r2, sl
 801638e:	4631      	mov	r1, r6
 8016390:	4628      	mov	r0, r5
 8016392:	47b8      	blx	r7
 8016394:	3001      	adds	r0, #1
 8016396:	d1be      	bne.n	8016316 <_printf_float+0x32a>
 8016398:	e689      	b.n	80160ae <_printf_float+0xc2>
 801639a:	9a05      	ldr	r2, [sp, #20]
 801639c:	464b      	mov	r3, r9
 801639e:	4442      	add	r2, r8
 80163a0:	4631      	mov	r1, r6
 80163a2:	4628      	mov	r0, r5
 80163a4:	47b8      	blx	r7
 80163a6:	3001      	adds	r0, #1
 80163a8:	d1c1      	bne.n	801632e <_printf_float+0x342>
 80163aa:	e680      	b.n	80160ae <_printf_float+0xc2>
 80163ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163ae:	2a01      	cmp	r2, #1
 80163b0:	dc01      	bgt.n	80163b6 <_printf_float+0x3ca>
 80163b2:	07db      	lsls	r3, r3, #31
 80163b4:	d538      	bpl.n	8016428 <_printf_float+0x43c>
 80163b6:	2301      	movs	r3, #1
 80163b8:	4642      	mov	r2, r8
 80163ba:	4631      	mov	r1, r6
 80163bc:	4628      	mov	r0, r5
 80163be:	47b8      	blx	r7
 80163c0:	3001      	adds	r0, #1
 80163c2:	f43f ae74 	beq.w	80160ae <_printf_float+0xc2>
 80163c6:	ee18 3a10 	vmov	r3, s16
 80163ca:	4652      	mov	r2, sl
 80163cc:	4631      	mov	r1, r6
 80163ce:	4628      	mov	r0, r5
 80163d0:	47b8      	blx	r7
 80163d2:	3001      	adds	r0, #1
 80163d4:	f43f ae6b 	beq.w	80160ae <_printf_float+0xc2>
 80163d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80163dc:	2200      	movs	r2, #0
 80163de:	2300      	movs	r3, #0
 80163e0:	f7ea fb8a 	bl	8000af8 <__aeabi_dcmpeq>
 80163e4:	b9d8      	cbnz	r0, 801641e <_printf_float+0x432>
 80163e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163e8:	f108 0201 	add.w	r2, r8, #1
 80163ec:	3b01      	subs	r3, #1
 80163ee:	4631      	mov	r1, r6
 80163f0:	4628      	mov	r0, r5
 80163f2:	47b8      	blx	r7
 80163f4:	3001      	adds	r0, #1
 80163f6:	d10e      	bne.n	8016416 <_printf_float+0x42a>
 80163f8:	e659      	b.n	80160ae <_printf_float+0xc2>
 80163fa:	2301      	movs	r3, #1
 80163fc:	4652      	mov	r2, sl
 80163fe:	4631      	mov	r1, r6
 8016400:	4628      	mov	r0, r5
 8016402:	47b8      	blx	r7
 8016404:	3001      	adds	r0, #1
 8016406:	f43f ae52 	beq.w	80160ae <_printf_float+0xc2>
 801640a:	f108 0801 	add.w	r8, r8, #1
 801640e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016410:	3b01      	subs	r3, #1
 8016412:	4543      	cmp	r3, r8
 8016414:	dcf1      	bgt.n	80163fa <_printf_float+0x40e>
 8016416:	464b      	mov	r3, r9
 8016418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801641c:	e6dc      	b.n	80161d8 <_printf_float+0x1ec>
 801641e:	f04f 0800 	mov.w	r8, #0
 8016422:	f104 0a1a 	add.w	sl, r4, #26
 8016426:	e7f2      	b.n	801640e <_printf_float+0x422>
 8016428:	2301      	movs	r3, #1
 801642a:	4642      	mov	r2, r8
 801642c:	e7df      	b.n	80163ee <_printf_float+0x402>
 801642e:	2301      	movs	r3, #1
 8016430:	464a      	mov	r2, r9
 8016432:	4631      	mov	r1, r6
 8016434:	4628      	mov	r0, r5
 8016436:	47b8      	blx	r7
 8016438:	3001      	adds	r0, #1
 801643a:	f43f ae38 	beq.w	80160ae <_printf_float+0xc2>
 801643e:	f108 0801 	add.w	r8, r8, #1
 8016442:	68e3      	ldr	r3, [r4, #12]
 8016444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016446:	1a5b      	subs	r3, r3, r1
 8016448:	4543      	cmp	r3, r8
 801644a:	dcf0      	bgt.n	801642e <_printf_float+0x442>
 801644c:	e6fa      	b.n	8016244 <_printf_float+0x258>
 801644e:	f04f 0800 	mov.w	r8, #0
 8016452:	f104 0919 	add.w	r9, r4, #25
 8016456:	e7f4      	b.n	8016442 <_printf_float+0x456>

08016458 <_printf_common>:
 8016458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801645c:	4616      	mov	r6, r2
 801645e:	4699      	mov	r9, r3
 8016460:	688a      	ldr	r2, [r1, #8]
 8016462:	690b      	ldr	r3, [r1, #16]
 8016464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016468:	4293      	cmp	r3, r2
 801646a:	bfb8      	it	lt
 801646c:	4613      	movlt	r3, r2
 801646e:	6033      	str	r3, [r6, #0]
 8016470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016474:	4607      	mov	r7, r0
 8016476:	460c      	mov	r4, r1
 8016478:	b10a      	cbz	r2, 801647e <_printf_common+0x26>
 801647a:	3301      	adds	r3, #1
 801647c:	6033      	str	r3, [r6, #0]
 801647e:	6823      	ldr	r3, [r4, #0]
 8016480:	0699      	lsls	r1, r3, #26
 8016482:	bf42      	ittt	mi
 8016484:	6833      	ldrmi	r3, [r6, #0]
 8016486:	3302      	addmi	r3, #2
 8016488:	6033      	strmi	r3, [r6, #0]
 801648a:	6825      	ldr	r5, [r4, #0]
 801648c:	f015 0506 	ands.w	r5, r5, #6
 8016490:	d106      	bne.n	80164a0 <_printf_common+0x48>
 8016492:	f104 0a19 	add.w	sl, r4, #25
 8016496:	68e3      	ldr	r3, [r4, #12]
 8016498:	6832      	ldr	r2, [r6, #0]
 801649a:	1a9b      	subs	r3, r3, r2
 801649c:	42ab      	cmp	r3, r5
 801649e:	dc26      	bgt.n	80164ee <_printf_common+0x96>
 80164a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80164a4:	1e13      	subs	r3, r2, #0
 80164a6:	6822      	ldr	r2, [r4, #0]
 80164a8:	bf18      	it	ne
 80164aa:	2301      	movne	r3, #1
 80164ac:	0692      	lsls	r2, r2, #26
 80164ae:	d42b      	bmi.n	8016508 <_printf_common+0xb0>
 80164b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164b4:	4649      	mov	r1, r9
 80164b6:	4638      	mov	r0, r7
 80164b8:	47c0      	blx	r8
 80164ba:	3001      	adds	r0, #1
 80164bc:	d01e      	beq.n	80164fc <_printf_common+0xa4>
 80164be:	6823      	ldr	r3, [r4, #0]
 80164c0:	68e5      	ldr	r5, [r4, #12]
 80164c2:	6832      	ldr	r2, [r6, #0]
 80164c4:	f003 0306 	and.w	r3, r3, #6
 80164c8:	2b04      	cmp	r3, #4
 80164ca:	bf08      	it	eq
 80164cc:	1aad      	subeq	r5, r5, r2
 80164ce:	68a3      	ldr	r3, [r4, #8]
 80164d0:	6922      	ldr	r2, [r4, #16]
 80164d2:	bf0c      	ite	eq
 80164d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164d8:	2500      	movne	r5, #0
 80164da:	4293      	cmp	r3, r2
 80164dc:	bfc4      	itt	gt
 80164de:	1a9b      	subgt	r3, r3, r2
 80164e0:	18ed      	addgt	r5, r5, r3
 80164e2:	2600      	movs	r6, #0
 80164e4:	341a      	adds	r4, #26
 80164e6:	42b5      	cmp	r5, r6
 80164e8:	d11a      	bne.n	8016520 <_printf_common+0xc8>
 80164ea:	2000      	movs	r0, #0
 80164ec:	e008      	b.n	8016500 <_printf_common+0xa8>
 80164ee:	2301      	movs	r3, #1
 80164f0:	4652      	mov	r2, sl
 80164f2:	4649      	mov	r1, r9
 80164f4:	4638      	mov	r0, r7
 80164f6:	47c0      	blx	r8
 80164f8:	3001      	adds	r0, #1
 80164fa:	d103      	bne.n	8016504 <_printf_common+0xac>
 80164fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016504:	3501      	adds	r5, #1
 8016506:	e7c6      	b.n	8016496 <_printf_common+0x3e>
 8016508:	18e1      	adds	r1, r4, r3
 801650a:	1c5a      	adds	r2, r3, #1
 801650c:	2030      	movs	r0, #48	; 0x30
 801650e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016512:	4422      	add	r2, r4
 8016514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801651c:	3302      	adds	r3, #2
 801651e:	e7c7      	b.n	80164b0 <_printf_common+0x58>
 8016520:	2301      	movs	r3, #1
 8016522:	4622      	mov	r2, r4
 8016524:	4649      	mov	r1, r9
 8016526:	4638      	mov	r0, r7
 8016528:	47c0      	blx	r8
 801652a:	3001      	adds	r0, #1
 801652c:	d0e6      	beq.n	80164fc <_printf_common+0xa4>
 801652e:	3601      	adds	r6, #1
 8016530:	e7d9      	b.n	80164e6 <_printf_common+0x8e>
	...

08016534 <_printf_i>:
 8016534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016538:	7e0f      	ldrb	r7, [r1, #24]
 801653a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801653c:	2f78      	cmp	r7, #120	; 0x78
 801653e:	4691      	mov	r9, r2
 8016540:	4680      	mov	r8, r0
 8016542:	460c      	mov	r4, r1
 8016544:	469a      	mov	sl, r3
 8016546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801654a:	d807      	bhi.n	801655c <_printf_i+0x28>
 801654c:	2f62      	cmp	r7, #98	; 0x62
 801654e:	d80a      	bhi.n	8016566 <_printf_i+0x32>
 8016550:	2f00      	cmp	r7, #0
 8016552:	f000 80d8 	beq.w	8016706 <_printf_i+0x1d2>
 8016556:	2f58      	cmp	r7, #88	; 0x58
 8016558:	f000 80a3 	beq.w	80166a2 <_printf_i+0x16e>
 801655c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016564:	e03a      	b.n	80165dc <_printf_i+0xa8>
 8016566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801656a:	2b15      	cmp	r3, #21
 801656c:	d8f6      	bhi.n	801655c <_printf_i+0x28>
 801656e:	a101      	add	r1, pc, #4	; (adr r1, 8016574 <_printf_i+0x40>)
 8016570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016574:	080165cd 	.word	0x080165cd
 8016578:	080165e1 	.word	0x080165e1
 801657c:	0801655d 	.word	0x0801655d
 8016580:	0801655d 	.word	0x0801655d
 8016584:	0801655d 	.word	0x0801655d
 8016588:	0801655d 	.word	0x0801655d
 801658c:	080165e1 	.word	0x080165e1
 8016590:	0801655d 	.word	0x0801655d
 8016594:	0801655d 	.word	0x0801655d
 8016598:	0801655d 	.word	0x0801655d
 801659c:	0801655d 	.word	0x0801655d
 80165a0:	080166ed 	.word	0x080166ed
 80165a4:	08016611 	.word	0x08016611
 80165a8:	080166cf 	.word	0x080166cf
 80165ac:	0801655d 	.word	0x0801655d
 80165b0:	0801655d 	.word	0x0801655d
 80165b4:	0801670f 	.word	0x0801670f
 80165b8:	0801655d 	.word	0x0801655d
 80165bc:	08016611 	.word	0x08016611
 80165c0:	0801655d 	.word	0x0801655d
 80165c4:	0801655d 	.word	0x0801655d
 80165c8:	080166d7 	.word	0x080166d7
 80165cc:	682b      	ldr	r3, [r5, #0]
 80165ce:	1d1a      	adds	r2, r3, #4
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	602a      	str	r2, [r5, #0]
 80165d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165dc:	2301      	movs	r3, #1
 80165de:	e0a3      	b.n	8016728 <_printf_i+0x1f4>
 80165e0:	6820      	ldr	r0, [r4, #0]
 80165e2:	6829      	ldr	r1, [r5, #0]
 80165e4:	0606      	lsls	r6, r0, #24
 80165e6:	f101 0304 	add.w	r3, r1, #4
 80165ea:	d50a      	bpl.n	8016602 <_printf_i+0xce>
 80165ec:	680e      	ldr	r6, [r1, #0]
 80165ee:	602b      	str	r3, [r5, #0]
 80165f0:	2e00      	cmp	r6, #0
 80165f2:	da03      	bge.n	80165fc <_printf_i+0xc8>
 80165f4:	232d      	movs	r3, #45	; 0x2d
 80165f6:	4276      	negs	r6, r6
 80165f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165fc:	485e      	ldr	r0, [pc, #376]	; (8016778 <_printf_i+0x244>)
 80165fe:	230a      	movs	r3, #10
 8016600:	e019      	b.n	8016636 <_printf_i+0x102>
 8016602:	680e      	ldr	r6, [r1, #0]
 8016604:	602b      	str	r3, [r5, #0]
 8016606:	f010 0f40 	tst.w	r0, #64	; 0x40
 801660a:	bf18      	it	ne
 801660c:	b236      	sxthne	r6, r6
 801660e:	e7ef      	b.n	80165f0 <_printf_i+0xbc>
 8016610:	682b      	ldr	r3, [r5, #0]
 8016612:	6820      	ldr	r0, [r4, #0]
 8016614:	1d19      	adds	r1, r3, #4
 8016616:	6029      	str	r1, [r5, #0]
 8016618:	0601      	lsls	r1, r0, #24
 801661a:	d501      	bpl.n	8016620 <_printf_i+0xec>
 801661c:	681e      	ldr	r6, [r3, #0]
 801661e:	e002      	b.n	8016626 <_printf_i+0xf2>
 8016620:	0646      	lsls	r6, r0, #25
 8016622:	d5fb      	bpl.n	801661c <_printf_i+0xe8>
 8016624:	881e      	ldrh	r6, [r3, #0]
 8016626:	4854      	ldr	r0, [pc, #336]	; (8016778 <_printf_i+0x244>)
 8016628:	2f6f      	cmp	r7, #111	; 0x6f
 801662a:	bf0c      	ite	eq
 801662c:	2308      	moveq	r3, #8
 801662e:	230a      	movne	r3, #10
 8016630:	2100      	movs	r1, #0
 8016632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016636:	6865      	ldr	r5, [r4, #4]
 8016638:	60a5      	str	r5, [r4, #8]
 801663a:	2d00      	cmp	r5, #0
 801663c:	bfa2      	ittt	ge
 801663e:	6821      	ldrge	r1, [r4, #0]
 8016640:	f021 0104 	bicge.w	r1, r1, #4
 8016644:	6021      	strge	r1, [r4, #0]
 8016646:	b90e      	cbnz	r6, 801664c <_printf_i+0x118>
 8016648:	2d00      	cmp	r5, #0
 801664a:	d04d      	beq.n	80166e8 <_printf_i+0x1b4>
 801664c:	4615      	mov	r5, r2
 801664e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016652:	fb03 6711 	mls	r7, r3, r1, r6
 8016656:	5dc7      	ldrb	r7, [r0, r7]
 8016658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801665c:	4637      	mov	r7, r6
 801665e:	42bb      	cmp	r3, r7
 8016660:	460e      	mov	r6, r1
 8016662:	d9f4      	bls.n	801664e <_printf_i+0x11a>
 8016664:	2b08      	cmp	r3, #8
 8016666:	d10b      	bne.n	8016680 <_printf_i+0x14c>
 8016668:	6823      	ldr	r3, [r4, #0]
 801666a:	07de      	lsls	r6, r3, #31
 801666c:	d508      	bpl.n	8016680 <_printf_i+0x14c>
 801666e:	6923      	ldr	r3, [r4, #16]
 8016670:	6861      	ldr	r1, [r4, #4]
 8016672:	4299      	cmp	r1, r3
 8016674:	bfde      	ittt	le
 8016676:	2330      	movle	r3, #48	; 0x30
 8016678:	f805 3c01 	strble.w	r3, [r5, #-1]
 801667c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016680:	1b52      	subs	r2, r2, r5
 8016682:	6122      	str	r2, [r4, #16]
 8016684:	f8cd a000 	str.w	sl, [sp]
 8016688:	464b      	mov	r3, r9
 801668a:	aa03      	add	r2, sp, #12
 801668c:	4621      	mov	r1, r4
 801668e:	4640      	mov	r0, r8
 8016690:	f7ff fee2 	bl	8016458 <_printf_common>
 8016694:	3001      	adds	r0, #1
 8016696:	d14c      	bne.n	8016732 <_printf_i+0x1fe>
 8016698:	f04f 30ff 	mov.w	r0, #4294967295
 801669c:	b004      	add	sp, #16
 801669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a2:	4835      	ldr	r0, [pc, #212]	; (8016778 <_printf_i+0x244>)
 80166a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80166a8:	6829      	ldr	r1, [r5, #0]
 80166aa:	6823      	ldr	r3, [r4, #0]
 80166ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80166b0:	6029      	str	r1, [r5, #0]
 80166b2:	061d      	lsls	r5, r3, #24
 80166b4:	d514      	bpl.n	80166e0 <_printf_i+0x1ac>
 80166b6:	07df      	lsls	r7, r3, #31
 80166b8:	bf44      	itt	mi
 80166ba:	f043 0320 	orrmi.w	r3, r3, #32
 80166be:	6023      	strmi	r3, [r4, #0]
 80166c0:	b91e      	cbnz	r6, 80166ca <_printf_i+0x196>
 80166c2:	6823      	ldr	r3, [r4, #0]
 80166c4:	f023 0320 	bic.w	r3, r3, #32
 80166c8:	6023      	str	r3, [r4, #0]
 80166ca:	2310      	movs	r3, #16
 80166cc:	e7b0      	b.n	8016630 <_printf_i+0xfc>
 80166ce:	6823      	ldr	r3, [r4, #0]
 80166d0:	f043 0320 	orr.w	r3, r3, #32
 80166d4:	6023      	str	r3, [r4, #0]
 80166d6:	2378      	movs	r3, #120	; 0x78
 80166d8:	4828      	ldr	r0, [pc, #160]	; (801677c <_printf_i+0x248>)
 80166da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80166de:	e7e3      	b.n	80166a8 <_printf_i+0x174>
 80166e0:	0659      	lsls	r1, r3, #25
 80166e2:	bf48      	it	mi
 80166e4:	b2b6      	uxthmi	r6, r6
 80166e6:	e7e6      	b.n	80166b6 <_printf_i+0x182>
 80166e8:	4615      	mov	r5, r2
 80166ea:	e7bb      	b.n	8016664 <_printf_i+0x130>
 80166ec:	682b      	ldr	r3, [r5, #0]
 80166ee:	6826      	ldr	r6, [r4, #0]
 80166f0:	6961      	ldr	r1, [r4, #20]
 80166f2:	1d18      	adds	r0, r3, #4
 80166f4:	6028      	str	r0, [r5, #0]
 80166f6:	0635      	lsls	r5, r6, #24
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	d501      	bpl.n	8016700 <_printf_i+0x1cc>
 80166fc:	6019      	str	r1, [r3, #0]
 80166fe:	e002      	b.n	8016706 <_printf_i+0x1d2>
 8016700:	0670      	lsls	r0, r6, #25
 8016702:	d5fb      	bpl.n	80166fc <_printf_i+0x1c8>
 8016704:	8019      	strh	r1, [r3, #0]
 8016706:	2300      	movs	r3, #0
 8016708:	6123      	str	r3, [r4, #16]
 801670a:	4615      	mov	r5, r2
 801670c:	e7ba      	b.n	8016684 <_printf_i+0x150>
 801670e:	682b      	ldr	r3, [r5, #0]
 8016710:	1d1a      	adds	r2, r3, #4
 8016712:	602a      	str	r2, [r5, #0]
 8016714:	681d      	ldr	r5, [r3, #0]
 8016716:	6862      	ldr	r2, [r4, #4]
 8016718:	2100      	movs	r1, #0
 801671a:	4628      	mov	r0, r5
 801671c:	f7e9 fd78 	bl	8000210 <memchr>
 8016720:	b108      	cbz	r0, 8016726 <_printf_i+0x1f2>
 8016722:	1b40      	subs	r0, r0, r5
 8016724:	6060      	str	r0, [r4, #4]
 8016726:	6863      	ldr	r3, [r4, #4]
 8016728:	6123      	str	r3, [r4, #16]
 801672a:	2300      	movs	r3, #0
 801672c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016730:	e7a8      	b.n	8016684 <_printf_i+0x150>
 8016732:	6923      	ldr	r3, [r4, #16]
 8016734:	462a      	mov	r2, r5
 8016736:	4649      	mov	r1, r9
 8016738:	4640      	mov	r0, r8
 801673a:	47d0      	blx	sl
 801673c:	3001      	adds	r0, #1
 801673e:	d0ab      	beq.n	8016698 <_printf_i+0x164>
 8016740:	6823      	ldr	r3, [r4, #0]
 8016742:	079b      	lsls	r3, r3, #30
 8016744:	d413      	bmi.n	801676e <_printf_i+0x23a>
 8016746:	68e0      	ldr	r0, [r4, #12]
 8016748:	9b03      	ldr	r3, [sp, #12]
 801674a:	4298      	cmp	r0, r3
 801674c:	bfb8      	it	lt
 801674e:	4618      	movlt	r0, r3
 8016750:	e7a4      	b.n	801669c <_printf_i+0x168>
 8016752:	2301      	movs	r3, #1
 8016754:	4632      	mov	r2, r6
 8016756:	4649      	mov	r1, r9
 8016758:	4640      	mov	r0, r8
 801675a:	47d0      	blx	sl
 801675c:	3001      	adds	r0, #1
 801675e:	d09b      	beq.n	8016698 <_printf_i+0x164>
 8016760:	3501      	adds	r5, #1
 8016762:	68e3      	ldr	r3, [r4, #12]
 8016764:	9903      	ldr	r1, [sp, #12]
 8016766:	1a5b      	subs	r3, r3, r1
 8016768:	42ab      	cmp	r3, r5
 801676a:	dcf2      	bgt.n	8016752 <_printf_i+0x21e>
 801676c:	e7eb      	b.n	8016746 <_printf_i+0x212>
 801676e:	2500      	movs	r5, #0
 8016770:	f104 0619 	add.w	r6, r4, #25
 8016774:	e7f5      	b.n	8016762 <_printf_i+0x22e>
 8016776:	bf00      	nop
 8016778:	0801ba44 	.word	0x0801ba44
 801677c:	0801ba55 	.word	0x0801ba55

08016780 <_scanf_float>:
 8016780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	b087      	sub	sp, #28
 8016786:	4617      	mov	r7, r2
 8016788:	9303      	str	r3, [sp, #12]
 801678a:	688b      	ldr	r3, [r1, #8]
 801678c:	1e5a      	subs	r2, r3, #1
 801678e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016792:	bf83      	ittte	hi
 8016794:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016798:	195b      	addhi	r3, r3, r5
 801679a:	9302      	strhi	r3, [sp, #8]
 801679c:	2300      	movls	r3, #0
 801679e:	bf86      	itte	hi
 80167a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80167a4:	608b      	strhi	r3, [r1, #8]
 80167a6:	9302      	strls	r3, [sp, #8]
 80167a8:	680b      	ldr	r3, [r1, #0]
 80167aa:	468b      	mov	fp, r1
 80167ac:	2500      	movs	r5, #0
 80167ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80167b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80167b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80167ba:	4680      	mov	r8, r0
 80167bc:	460c      	mov	r4, r1
 80167be:	465e      	mov	r6, fp
 80167c0:	46aa      	mov	sl, r5
 80167c2:	46a9      	mov	r9, r5
 80167c4:	9501      	str	r5, [sp, #4]
 80167c6:	68a2      	ldr	r2, [r4, #8]
 80167c8:	b152      	cbz	r2, 80167e0 <_scanf_float+0x60>
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	781b      	ldrb	r3, [r3, #0]
 80167ce:	2b4e      	cmp	r3, #78	; 0x4e
 80167d0:	d864      	bhi.n	801689c <_scanf_float+0x11c>
 80167d2:	2b40      	cmp	r3, #64	; 0x40
 80167d4:	d83c      	bhi.n	8016850 <_scanf_float+0xd0>
 80167d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80167da:	b2c8      	uxtb	r0, r1
 80167dc:	280e      	cmp	r0, #14
 80167de:	d93a      	bls.n	8016856 <_scanf_float+0xd6>
 80167e0:	f1b9 0f00 	cmp.w	r9, #0
 80167e4:	d003      	beq.n	80167ee <_scanf_float+0x6e>
 80167e6:	6823      	ldr	r3, [r4, #0]
 80167e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167ec:	6023      	str	r3, [r4, #0]
 80167ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167f2:	f1ba 0f01 	cmp.w	sl, #1
 80167f6:	f200 8113 	bhi.w	8016a20 <_scanf_float+0x2a0>
 80167fa:	455e      	cmp	r6, fp
 80167fc:	f200 8105 	bhi.w	8016a0a <_scanf_float+0x28a>
 8016800:	2501      	movs	r5, #1
 8016802:	4628      	mov	r0, r5
 8016804:	b007      	add	sp, #28
 8016806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801680e:	2a0d      	cmp	r2, #13
 8016810:	d8e6      	bhi.n	80167e0 <_scanf_float+0x60>
 8016812:	a101      	add	r1, pc, #4	; (adr r1, 8016818 <_scanf_float+0x98>)
 8016814:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016818:	08016957 	.word	0x08016957
 801681c:	080167e1 	.word	0x080167e1
 8016820:	080167e1 	.word	0x080167e1
 8016824:	080167e1 	.word	0x080167e1
 8016828:	080169b7 	.word	0x080169b7
 801682c:	0801698f 	.word	0x0801698f
 8016830:	080167e1 	.word	0x080167e1
 8016834:	080167e1 	.word	0x080167e1
 8016838:	08016965 	.word	0x08016965
 801683c:	080167e1 	.word	0x080167e1
 8016840:	080167e1 	.word	0x080167e1
 8016844:	080167e1 	.word	0x080167e1
 8016848:	080167e1 	.word	0x080167e1
 801684c:	0801691d 	.word	0x0801691d
 8016850:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016854:	e7db      	b.n	801680e <_scanf_float+0x8e>
 8016856:	290e      	cmp	r1, #14
 8016858:	d8c2      	bhi.n	80167e0 <_scanf_float+0x60>
 801685a:	a001      	add	r0, pc, #4	; (adr r0, 8016860 <_scanf_float+0xe0>)
 801685c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016860:	0801690f 	.word	0x0801690f
 8016864:	080167e1 	.word	0x080167e1
 8016868:	0801690f 	.word	0x0801690f
 801686c:	080169a3 	.word	0x080169a3
 8016870:	080167e1 	.word	0x080167e1
 8016874:	080168bd 	.word	0x080168bd
 8016878:	080168f9 	.word	0x080168f9
 801687c:	080168f9 	.word	0x080168f9
 8016880:	080168f9 	.word	0x080168f9
 8016884:	080168f9 	.word	0x080168f9
 8016888:	080168f9 	.word	0x080168f9
 801688c:	080168f9 	.word	0x080168f9
 8016890:	080168f9 	.word	0x080168f9
 8016894:	080168f9 	.word	0x080168f9
 8016898:	080168f9 	.word	0x080168f9
 801689c:	2b6e      	cmp	r3, #110	; 0x6e
 801689e:	d809      	bhi.n	80168b4 <_scanf_float+0x134>
 80168a0:	2b60      	cmp	r3, #96	; 0x60
 80168a2:	d8b2      	bhi.n	801680a <_scanf_float+0x8a>
 80168a4:	2b54      	cmp	r3, #84	; 0x54
 80168a6:	d077      	beq.n	8016998 <_scanf_float+0x218>
 80168a8:	2b59      	cmp	r3, #89	; 0x59
 80168aa:	d199      	bne.n	80167e0 <_scanf_float+0x60>
 80168ac:	2d07      	cmp	r5, #7
 80168ae:	d197      	bne.n	80167e0 <_scanf_float+0x60>
 80168b0:	2508      	movs	r5, #8
 80168b2:	e029      	b.n	8016908 <_scanf_float+0x188>
 80168b4:	2b74      	cmp	r3, #116	; 0x74
 80168b6:	d06f      	beq.n	8016998 <_scanf_float+0x218>
 80168b8:	2b79      	cmp	r3, #121	; 0x79
 80168ba:	e7f6      	b.n	80168aa <_scanf_float+0x12a>
 80168bc:	6821      	ldr	r1, [r4, #0]
 80168be:	05c8      	lsls	r0, r1, #23
 80168c0:	d51a      	bpl.n	80168f8 <_scanf_float+0x178>
 80168c2:	9b02      	ldr	r3, [sp, #8]
 80168c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80168c8:	6021      	str	r1, [r4, #0]
 80168ca:	f109 0901 	add.w	r9, r9, #1
 80168ce:	b11b      	cbz	r3, 80168d8 <_scanf_float+0x158>
 80168d0:	3b01      	subs	r3, #1
 80168d2:	3201      	adds	r2, #1
 80168d4:	9302      	str	r3, [sp, #8]
 80168d6:	60a2      	str	r2, [r4, #8]
 80168d8:	68a3      	ldr	r3, [r4, #8]
 80168da:	3b01      	subs	r3, #1
 80168dc:	60a3      	str	r3, [r4, #8]
 80168de:	6923      	ldr	r3, [r4, #16]
 80168e0:	3301      	adds	r3, #1
 80168e2:	6123      	str	r3, [r4, #16]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	3b01      	subs	r3, #1
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	607b      	str	r3, [r7, #4]
 80168ec:	f340 8084 	ble.w	80169f8 <_scanf_float+0x278>
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	3301      	adds	r3, #1
 80168f4:	603b      	str	r3, [r7, #0]
 80168f6:	e766      	b.n	80167c6 <_scanf_float+0x46>
 80168f8:	eb1a 0f05 	cmn.w	sl, r5
 80168fc:	f47f af70 	bne.w	80167e0 <_scanf_float+0x60>
 8016900:	6822      	ldr	r2, [r4, #0]
 8016902:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016906:	6022      	str	r2, [r4, #0]
 8016908:	f806 3b01 	strb.w	r3, [r6], #1
 801690c:	e7e4      	b.n	80168d8 <_scanf_float+0x158>
 801690e:	6822      	ldr	r2, [r4, #0]
 8016910:	0610      	lsls	r0, r2, #24
 8016912:	f57f af65 	bpl.w	80167e0 <_scanf_float+0x60>
 8016916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801691a:	e7f4      	b.n	8016906 <_scanf_float+0x186>
 801691c:	f1ba 0f00 	cmp.w	sl, #0
 8016920:	d10e      	bne.n	8016940 <_scanf_float+0x1c0>
 8016922:	f1b9 0f00 	cmp.w	r9, #0
 8016926:	d10e      	bne.n	8016946 <_scanf_float+0x1c6>
 8016928:	6822      	ldr	r2, [r4, #0]
 801692a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801692e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016932:	d108      	bne.n	8016946 <_scanf_float+0x1c6>
 8016934:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016938:	6022      	str	r2, [r4, #0]
 801693a:	f04f 0a01 	mov.w	sl, #1
 801693e:	e7e3      	b.n	8016908 <_scanf_float+0x188>
 8016940:	f1ba 0f02 	cmp.w	sl, #2
 8016944:	d055      	beq.n	80169f2 <_scanf_float+0x272>
 8016946:	2d01      	cmp	r5, #1
 8016948:	d002      	beq.n	8016950 <_scanf_float+0x1d0>
 801694a:	2d04      	cmp	r5, #4
 801694c:	f47f af48 	bne.w	80167e0 <_scanf_float+0x60>
 8016950:	3501      	adds	r5, #1
 8016952:	b2ed      	uxtb	r5, r5
 8016954:	e7d8      	b.n	8016908 <_scanf_float+0x188>
 8016956:	f1ba 0f01 	cmp.w	sl, #1
 801695a:	f47f af41 	bne.w	80167e0 <_scanf_float+0x60>
 801695e:	f04f 0a02 	mov.w	sl, #2
 8016962:	e7d1      	b.n	8016908 <_scanf_float+0x188>
 8016964:	b97d      	cbnz	r5, 8016986 <_scanf_float+0x206>
 8016966:	f1b9 0f00 	cmp.w	r9, #0
 801696a:	f47f af3c 	bne.w	80167e6 <_scanf_float+0x66>
 801696e:	6822      	ldr	r2, [r4, #0]
 8016970:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016974:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016978:	f47f af39 	bne.w	80167ee <_scanf_float+0x6e>
 801697c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016980:	6022      	str	r2, [r4, #0]
 8016982:	2501      	movs	r5, #1
 8016984:	e7c0      	b.n	8016908 <_scanf_float+0x188>
 8016986:	2d03      	cmp	r5, #3
 8016988:	d0e2      	beq.n	8016950 <_scanf_float+0x1d0>
 801698a:	2d05      	cmp	r5, #5
 801698c:	e7de      	b.n	801694c <_scanf_float+0x1cc>
 801698e:	2d02      	cmp	r5, #2
 8016990:	f47f af26 	bne.w	80167e0 <_scanf_float+0x60>
 8016994:	2503      	movs	r5, #3
 8016996:	e7b7      	b.n	8016908 <_scanf_float+0x188>
 8016998:	2d06      	cmp	r5, #6
 801699a:	f47f af21 	bne.w	80167e0 <_scanf_float+0x60>
 801699e:	2507      	movs	r5, #7
 80169a0:	e7b2      	b.n	8016908 <_scanf_float+0x188>
 80169a2:	6822      	ldr	r2, [r4, #0]
 80169a4:	0591      	lsls	r1, r2, #22
 80169a6:	f57f af1b 	bpl.w	80167e0 <_scanf_float+0x60>
 80169aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80169ae:	6022      	str	r2, [r4, #0]
 80169b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80169b4:	e7a8      	b.n	8016908 <_scanf_float+0x188>
 80169b6:	6822      	ldr	r2, [r4, #0]
 80169b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80169bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80169c0:	d006      	beq.n	80169d0 <_scanf_float+0x250>
 80169c2:	0550      	lsls	r0, r2, #21
 80169c4:	f57f af0c 	bpl.w	80167e0 <_scanf_float+0x60>
 80169c8:	f1b9 0f00 	cmp.w	r9, #0
 80169cc:	f43f af0f 	beq.w	80167ee <_scanf_float+0x6e>
 80169d0:	0591      	lsls	r1, r2, #22
 80169d2:	bf58      	it	pl
 80169d4:	9901      	ldrpl	r1, [sp, #4]
 80169d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80169da:	bf58      	it	pl
 80169dc:	eba9 0101 	subpl.w	r1, r9, r1
 80169e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80169e4:	bf58      	it	pl
 80169e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80169ea:	6022      	str	r2, [r4, #0]
 80169ec:	f04f 0900 	mov.w	r9, #0
 80169f0:	e78a      	b.n	8016908 <_scanf_float+0x188>
 80169f2:	f04f 0a03 	mov.w	sl, #3
 80169f6:	e787      	b.n	8016908 <_scanf_float+0x188>
 80169f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80169fc:	4639      	mov	r1, r7
 80169fe:	4640      	mov	r0, r8
 8016a00:	4798      	blx	r3
 8016a02:	2800      	cmp	r0, #0
 8016a04:	f43f aedf 	beq.w	80167c6 <_scanf_float+0x46>
 8016a08:	e6ea      	b.n	80167e0 <_scanf_float+0x60>
 8016a0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a12:	463a      	mov	r2, r7
 8016a14:	4640      	mov	r0, r8
 8016a16:	4798      	blx	r3
 8016a18:	6923      	ldr	r3, [r4, #16]
 8016a1a:	3b01      	subs	r3, #1
 8016a1c:	6123      	str	r3, [r4, #16]
 8016a1e:	e6ec      	b.n	80167fa <_scanf_float+0x7a>
 8016a20:	1e6b      	subs	r3, r5, #1
 8016a22:	2b06      	cmp	r3, #6
 8016a24:	d825      	bhi.n	8016a72 <_scanf_float+0x2f2>
 8016a26:	2d02      	cmp	r5, #2
 8016a28:	d836      	bhi.n	8016a98 <_scanf_float+0x318>
 8016a2a:	455e      	cmp	r6, fp
 8016a2c:	f67f aee8 	bls.w	8016800 <_scanf_float+0x80>
 8016a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a38:	463a      	mov	r2, r7
 8016a3a:	4640      	mov	r0, r8
 8016a3c:	4798      	blx	r3
 8016a3e:	6923      	ldr	r3, [r4, #16]
 8016a40:	3b01      	subs	r3, #1
 8016a42:	6123      	str	r3, [r4, #16]
 8016a44:	e7f1      	b.n	8016a2a <_scanf_float+0x2aa>
 8016a46:	9802      	ldr	r0, [sp, #8]
 8016a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016a50:	9002      	str	r0, [sp, #8]
 8016a52:	463a      	mov	r2, r7
 8016a54:	4640      	mov	r0, r8
 8016a56:	4798      	blx	r3
 8016a58:	6923      	ldr	r3, [r4, #16]
 8016a5a:	3b01      	subs	r3, #1
 8016a5c:	6123      	str	r3, [r4, #16]
 8016a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a62:	fa5f fa8a 	uxtb.w	sl, sl
 8016a66:	f1ba 0f02 	cmp.w	sl, #2
 8016a6a:	d1ec      	bne.n	8016a46 <_scanf_float+0x2c6>
 8016a6c:	3d03      	subs	r5, #3
 8016a6e:	b2ed      	uxtb	r5, r5
 8016a70:	1b76      	subs	r6, r6, r5
 8016a72:	6823      	ldr	r3, [r4, #0]
 8016a74:	05da      	lsls	r2, r3, #23
 8016a76:	d52f      	bpl.n	8016ad8 <_scanf_float+0x358>
 8016a78:	055b      	lsls	r3, r3, #21
 8016a7a:	d510      	bpl.n	8016a9e <_scanf_float+0x31e>
 8016a7c:	455e      	cmp	r6, fp
 8016a7e:	f67f aebf 	bls.w	8016800 <_scanf_float+0x80>
 8016a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a8a:	463a      	mov	r2, r7
 8016a8c:	4640      	mov	r0, r8
 8016a8e:	4798      	blx	r3
 8016a90:	6923      	ldr	r3, [r4, #16]
 8016a92:	3b01      	subs	r3, #1
 8016a94:	6123      	str	r3, [r4, #16]
 8016a96:	e7f1      	b.n	8016a7c <_scanf_float+0x2fc>
 8016a98:	46aa      	mov	sl, r5
 8016a9a:	9602      	str	r6, [sp, #8]
 8016a9c:	e7df      	b.n	8016a5e <_scanf_float+0x2de>
 8016a9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016aa2:	6923      	ldr	r3, [r4, #16]
 8016aa4:	2965      	cmp	r1, #101	; 0x65
 8016aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016aaa:	f106 35ff 	add.w	r5, r6, #4294967295
 8016aae:	6123      	str	r3, [r4, #16]
 8016ab0:	d00c      	beq.n	8016acc <_scanf_float+0x34c>
 8016ab2:	2945      	cmp	r1, #69	; 0x45
 8016ab4:	d00a      	beq.n	8016acc <_scanf_float+0x34c>
 8016ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016aba:	463a      	mov	r2, r7
 8016abc:	4640      	mov	r0, r8
 8016abe:	4798      	blx	r3
 8016ac0:	6923      	ldr	r3, [r4, #16]
 8016ac2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016ac6:	3b01      	subs	r3, #1
 8016ac8:	1eb5      	subs	r5, r6, #2
 8016aca:	6123      	str	r3, [r4, #16]
 8016acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ad0:	463a      	mov	r2, r7
 8016ad2:	4640      	mov	r0, r8
 8016ad4:	4798      	blx	r3
 8016ad6:	462e      	mov	r6, r5
 8016ad8:	6825      	ldr	r5, [r4, #0]
 8016ada:	f015 0510 	ands.w	r5, r5, #16
 8016ade:	d159      	bne.n	8016b94 <_scanf_float+0x414>
 8016ae0:	7035      	strb	r5, [r6, #0]
 8016ae2:	6823      	ldr	r3, [r4, #0]
 8016ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016aec:	d11b      	bne.n	8016b26 <_scanf_float+0x3a6>
 8016aee:	9b01      	ldr	r3, [sp, #4]
 8016af0:	454b      	cmp	r3, r9
 8016af2:	eba3 0209 	sub.w	r2, r3, r9
 8016af6:	d123      	bne.n	8016b40 <_scanf_float+0x3c0>
 8016af8:	2200      	movs	r2, #0
 8016afa:	4659      	mov	r1, fp
 8016afc:	4640      	mov	r0, r8
 8016afe:	f000 ff1d 	bl	801793c <_strtod_r>
 8016b02:	6822      	ldr	r2, [r4, #0]
 8016b04:	9b03      	ldr	r3, [sp, #12]
 8016b06:	f012 0f02 	tst.w	r2, #2
 8016b0a:	ec57 6b10 	vmov	r6, r7, d0
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	d021      	beq.n	8016b56 <_scanf_float+0x3d6>
 8016b12:	9903      	ldr	r1, [sp, #12]
 8016b14:	1d1a      	adds	r2, r3, #4
 8016b16:	600a      	str	r2, [r1, #0]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	e9c3 6700 	strd	r6, r7, [r3]
 8016b1e:	68e3      	ldr	r3, [r4, #12]
 8016b20:	3301      	adds	r3, #1
 8016b22:	60e3      	str	r3, [r4, #12]
 8016b24:	e66d      	b.n	8016802 <_scanf_float+0x82>
 8016b26:	9b04      	ldr	r3, [sp, #16]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d0e5      	beq.n	8016af8 <_scanf_float+0x378>
 8016b2c:	9905      	ldr	r1, [sp, #20]
 8016b2e:	230a      	movs	r3, #10
 8016b30:	462a      	mov	r2, r5
 8016b32:	3101      	adds	r1, #1
 8016b34:	4640      	mov	r0, r8
 8016b36:	f000 ff89 	bl	8017a4c <_strtol_r>
 8016b3a:	9b04      	ldr	r3, [sp, #16]
 8016b3c:	9e05      	ldr	r6, [sp, #20]
 8016b3e:	1ac2      	subs	r2, r0, r3
 8016b40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016b44:	429e      	cmp	r6, r3
 8016b46:	bf28      	it	cs
 8016b48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016b4c:	4912      	ldr	r1, [pc, #72]	; (8016b98 <_scanf_float+0x418>)
 8016b4e:	4630      	mov	r0, r6
 8016b50:	f000 f82c 	bl	8016bac <siprintf>
 8016b54:	e7d0      	b.n	8016af8 <_scanf_float+0x378>
 8016b56:	9903      	ldr	r1, [sp, #12]
 8016b58:	f012 0f04 	tst.w	r2, #4
 8016b5c:	f103 0204 	add.w	r2, r3, #4
 8016b60:	600a      	str	r2, [r1, #0]
 8016b62:	d1d9      	bne.n	8016b18 <_scanf_float+0x398>
 8016b64:	f8d3 8000 	ldr.w	r8, [r3]
 8016b68:	ee10 2a10 	vmov	r2, s0
 8016b6c:	ee10 0a10 	vmov	r0, s0
 8016b70:	463b      	mov	r3, r7
 8016b72:	4639      	mov	r1, r7
 8016b74:	f7e9 fff2 	bl	8000b5c <__aeabi_dcmpun>
 8016b78:	b128      	cbz	r0, 8016b86 <_scanf_float+0x406>
 8016b7a:	4808      	ldr	r0, [pc, #32]	; (8016b9c <_scanf_float+0x41c>)
 8016b7c:	f000 f810 	bl	8016ba0 <nanf>
 8016b80:	ed88 0a00 	vstr	s0, [r8]
 8016b84:	e7cb      	b.n	8016b1e <_scanf_float+0x39e>
 8016b86:	4630      	mov	r0, r6
 8016b88:	4639      	mov	r1, r7
 8016b8a:	f7ea f845 	bl	8000c18 <__aeabi_d2f>
 8016b8e:	f8c8 0000 	str.w	r0, [r8]
 8016b92:	e7c4      	b.n	8016b1e <_scanf_float+0x39e>
 8016b94:	2500      	movs	r5, #0
 8016b96:	e634      	b.n	8016802 <_scanf_float+0x82>
 8016b98:	0801ba66 	.word	0x0801ba66
 8016b9c:	0801be8b 	.word	0x0801be8b

08016ba0 <nanf>:
 8016ba0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ba8 <nanf+0x8>
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	7fc00000 	.word	0x7fc00000

08016bac <siprintf>:
 8016bac:	b40e      	push	{r1, r2, r3}
 8016bae:	b500      	push	{lr}
 8016bb0:	b09c      	sub	sp, #112	; 0x70
 8016bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8016bb4:	9002      	str	r0, [sp, #8]
 8016bb6:	9006      	str	r0, [sp, #24]
 8016bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bbc:	4809      	ldr	r0, [pc, #36]	; (8016be4 <siprintf+0x38>)
 8016bbe:	9107      	str	r1, [sp, #28]
 8016bc0:	9104      	str	r1, [sp, #16]
 8016bc2:	4909      	ldr	r1, [pc, #36]	; (8016be8 <siprintf+0x3c>)
 8016bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bc8:	9105      	str	r1, [sp, #20]
 8016bca:	6800      	ldr	r0, [r0, #0]
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	a902      	add	r1, sp, #8
 8016bd0:	f002 ff90 	bl	8019af4 <_svfiprintf_r>
 8016bd4:	9b02      	ldr	r3, [sp, #8]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	701a      	strb	r2, [r3, #0]
 8016bda:	b01c      	add	sp, #112	; 0x70
 8016bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016be0:	b003      	add	sp, #12
 8016be2:	4770      	bx	lr
 8016be4:	20000040 	.word	0x20000040
 8016be8:	ffff0208 	.word	0xffff0208

08016bec <siscanf>:
 8016bec:	b40e      	push	{r1, r2, r3}
 8016bee:	b510      	push	{r4, lr}
 8016bf0:	b09f      	sub	sp, #124	; 0x7c
 8016bf2:	ac21      	add	r4, sp, #132	; 0x84
 8016bf4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016bf8:	f854 2b04 	ldr.w	r2, [r4], #4
 8016bfc:	9201      	str	r2, [sp, #4]
 8016bfe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016c02:	9004      	str	r0, [sp, #16]
 8016c04:	9008      	str	r0, [sp, #32]
 8016c06:	f7e9 faf5 	bl	80001f4 <strlen>
 8016c0a:	4b0c      	ldr	r3, [pc, #48]	; (8016c3c <siscanf+0x50>)
 8016c0c:	9005      	str	r0, [sp, #20]
 8016c0e:	9009      	str	r0, [sp, #36]	; 0x24
 8016c10:	930d      	str	r3, [sp, #52]	; 0x34
 8016c12:	480b      	ldr	r0, [pc, #44]	; (8016c40 <siscanf+0x54>)
 8016c14:	9a01      	ldr	r2, [sp, #4]
 8016c16:	6800      	ldr	r0, [r0, #0]
 8016c18:	9403      	str	r4, [sp, #12]
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8016c1e:	9316      	str	r3, [sp, #88]	; 0x58
 8016c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016c28:	a904      	add	r1, sp, #16
 8016c2a:	4623      	mov	r3, r4
 8016c2c:	f003 f8bc 	bl	8019da8 <__ssvfiscanf_r>
 8016c30:	b01f      	add	sp, #124	; 0x7c
 8016c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c36:	b003      	add	sp, #12
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	08016c67 	.word	0x08016c67
 8016c40:	20000040 	.word	0x20000040

08016c44 <__sread>:
 8016c44:	b510      	push	{r4, lr}
 8016c46:	460c      	mov	r4, r1
 8016c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c4c:	f003 fb76 	bl	801a33c <_read_r>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	bfab      	itete	ge
 8016c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c56:	89a3      	ldrhlt	r3, [r4, #12]
 8016c58:	181b      	addge	r3, r3, r0
 8016c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c5e:	bfac      	ite	ge
 8016c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c62:	81a3      	strhlt	r3, [r4, #12]
 8016c64:	bd10      	pop	{r4, pc}

08016c66 <__seofread>:
 8016c66:	2000      	movs	r0, #0
 8016c68:	4770      	bx	lr

08016c6a <__swrite>:
 8016c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c6e:	461f      	mov	r7, r3
 8016c70:	898b      	ldrh	r3, [r1, #12]
 8016c72:	05db      	lsls	r3, r3, #23
 8016c74:	4605      	mov	r5, r0
 8016c76:	460c      	mov	r4, r1
 8016c78:	4616      	mov	r6, r2
 8016c7a:	d505      	bpl.n	8016c88 <__swrite+0x1e>
 8016c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c80:	2302      	movs	r3, #2
 8016c82:	2200      	movs	r2, #0
 8016c84:	f002 f8f6 	bl	8018e74 <_lseek_r>
 8016c88:	89a3      	ldrh	r3, [r4, #12]
 8016c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c92:	81a3      	strh	r3, [r4, #12]
 8016c94:	4632      	mov	r2, r6
 8016c96:	463b      	mov	r3, r7
 8016c98:	4628      	mov	r0, r5
 8016c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9e:	f000 bed7 	b.w	8017a50 <_write_r>

08016ca2 <__sseek>:
 8016ca2:	b510      	push	{r4, lr}
 8016ca4:	460c      	mov	r4, r1
 8016ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016caa:	f002 f8e3 	bl	8018e74 <_lseek_r>
 8016cae:	1c43      	adds	r3, r0, #1
 8016cb0:	89a3      	ldrh	r3, [r4, #12]
 8016cb2:	bf15      	itete	ne
 8016cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8016cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016cbe:	81a3      	strheq	r3, [r4, #12]
 8016cc0:	bf18      	it	ne
 8016cc2:	81a3      	strhne	r3, [r4, #12]
 8016cc4:	bd10      	pop	{r4, pc}

08016cc6 <__sclose>:
 8016cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cca:	f000 bed3 	b.w	8017a74 <_close_r>

08016cce <strncpy>:
 8016cce:	b510      	push	{r4, lr}
 8016cd0:	3901      	subs	r1, #1
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	b132      	cbz	r2, 8016ce4 <strncpy+0x16>
 8016cd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016cda:	f803 4b01 	strb.w	r4, [r3], #1
 8016cde:	3a01      	subs	r2, #1
 8016ce0:	2c00      	cmp	r4, #0
 8016ce2:	d1f7      	bne.n	8016cd4 <strncpy+0x6>
 8016ce4:	441a      	add	r2, r3
 8016ce6:	2100      	movs	r1, #0
 8016ce8:	4293      	cmp	r3, r2
 8016cea:	d100      	bne.n	8016cee <strncpy+0x20>
 8016cec:	bd10      	pop	{r4, pc}
 8016cee:	f803 1b01 	strb.w	r1, [r3], #1
 8016cf2:	e7f9      	b.n	8016ce8 <strncpy+0x1a>

08016cf4 <sulp>:
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	460d      	mov	r5, r1
 8016cfa:	ec45 4b10 	vmov	d0, r4, r5
 8016cfe:	4616      	mov	r6, r2
 8016d00:	f002 fc56 	bl	80195b0 <__ulp>
 8016d04:	ec51 0b10 	vmov	r0, r1, d0
 8016d08:	b17e      	cbz	r6, 8016d2a <sulp+0x36>
 8016d0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	dd09      	ble.n	8016d2a <sulp+0x36>
 8016d16:	051b      	lsls	r3, r3, #20
 8016d18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016d1c:	2400      	movs	r4, #0
 8016d1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016d22:	4622      	mov	r2, r4
 8016d24:	462b      	mov	r3, r5
 8016d26:	f7e9 fc7f 	bl	8000628 <__aeabi_dmul>
 8016d2a:	bd70      	pop	{r4, r5, r6, pc}
 8016d2c:	0000      	movs	r0, r0
	...

08016d30 <_strtod_l>:
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	ed2d 8b02 	vpush	{d8}
 8016d38:	b09d      	sub	sp, #116	; 0x74
 8016d3a:	461f      	mov	r7, r3
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	9318      	str	r3, [sp, #96]	; 0x60
 8016d40:	4ba2      	ldr	r3, [pc, #648]	; (8016fcc <_strtod_l+0x29c>)
 8016d42:	9213      	str	r2, [sp, #76]	; 0x4c
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	9305      	str	r3, [sp, #20]
 8016d48:	4604      	mov	r4, r0
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	4688      	mov	r8, r1
 8016d4e:	f7e9 fa51 	bl	80001f4 <strlen>
 8016d52:	f04f 0a00 	mov.w	sl, #0
 8016d56:	4605      	mov	r5, r0
 8016d58:	f04f 0b00 	mov.w	fp, #0
 8016d5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d62:	781a      	ldrb	r2, [r3, #0]
 8016d64:	2a2b      	cmp	r2, #43	; 0x2b
 8016d66:	d04e      	beq.n	8016e06 <_strtod_l+0xd6>
 8016d68:	d83b      	bhi.n	8016de2 <_strtod_l+0xb2>
 8016d6a:	2a0d      	cmp	r2, #13
 8016d6c:	d834      	bhi.n	8016dd8 <_strtod_l+0xa8>
 8016d6e:	2a08      	cmp	r2, #8
 8016d70:	d834      	bhi.n	8016ddc <_strtod_l+0xac>
 8016d72:	2a00      	cmp	r2, #0
 8016d74:	d03e      	beq.n	8016df4 <_strtod_l+0xc4>
 8016d76:	2300      	movs	r3, #0
 8016d78:	930a      	str	r3, [sp, #40]	; 0x28
 8016d7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016d7c:	7833      	ldrb	r3, [r6, #0]
 8016d7e:	2b30      	cmp	r3, #48	; 0x30
 8016d80:	f040 80b0 	bne.w	8016ee4 <_strtod_l+0x1b4>
 8016d84:	7873      	ldrb	r3, [r6, #1]
 8016d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016d8a:	2b58      	cmp	r3, #88	; 0x58
 8016d8c:	d168      	bne.n	8016e60 <_strtod_l+0x130>
 8016d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d90:	9301      	str	r3, [sp, #4]
 8016d92:	ab18      	add	r3, sp, #96	; 0x60
 8016d94:	9702      	str	r7, [sp, #8]
 8016d96:	9300      	str	r3, [sp, #0]
 8016d98:	4a8d      	ldr	r2, [pc, #564]	; (8016fd0 <_strtod_l+0x2a0>)
 8016d9a:	ab19      	add	r3, sp, #100	; 0x64
 8016d9c:	a917      	add	r1, sp, #92	; 0x5c
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f001 fd5c 	bl	801885c <__gethex>
 8016da4:	f010 0707 	ands.w	r7, r0, #7
 8016da8:	4605      	mov	r5, r0
 8016daa:	d005      	beq.n	8016db8 <_strtod_l+0x88>
 8016dac:	2f06      	cmp	r7, #6
 8016dae:	d12c      	bne.n	8016e0a <_strtod_l+0xda>
 8016db0:	3601      	adds	r6, #1
 8016db2:	2300      	movs	r3, #0
 8016db4:	9617      	str	r6, [sp, #92]	; 0x5c
 8016db6:	930a      	str	r3, [sp, #40]	; 0x28
 8016db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	f040 8590 	bne.w	80178e0 <_strtod_l+0xbb0>
 8016dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dc2:	b1eb      	cbz	r3, 8016e00 <_strtod_l+0xd0>
 8016dc4:	4652      	mov	r2, sl
 8016dc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016dca:	ec43 2b10 	vmov	d0, r2, r3
 8016dce:	b01d      	add	sp, #116	; 0x74
 8016dd0:	ecbd 8b02 	vpop	{d8}
 8016dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd8:	2a20      	cmp	r2, #32
 8016dda:	d1cc      	bne.n	8016d76 <_strtod_l+0x46>
 8016ddc:	3301      	adds	r3, #1
 8016dde:	9317      	str	r3, [sp, #92]	; 0x5c
 8016de0:	e7be      	b.n	8016d60 <_strtod_l+0x30>
 8016de2:	2a2d      	cmp	r2, #45	; 0x2d
 8016de4:	d1c7      	bne.n	8016d76 <_strtod_l+0x46>
 8016de6:	2201      	movs	r2, #1
 8016de8:	920a      	str	r2, [sp, #40]	; 0x28
 8016dea:	1c5a      	adds	r2, r3, #1
 8016dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8016dee:	785b      	ldrb	r3, [r3, #1]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d1c2      	bne.n	8016d7a <_strtod_l+0x4a>
 8016df4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016df6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	f040 856e 	bne.w	80178dc <_strtod_l+0xbac>
 8016e00:	4652      	mov	r2, sl
 8016e02:	465b      	mov	r3, fp
 8016e04:	e7e1      	b.n	8016dca <_strtod_l+0x9a>
 8016e06:	2200      	movs	r2, #0
 8016e08:	e7ee      	b.n	8016de8 <_strtod_l+0xb8>
 8016e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016e0c:	b13a      	cbz	r2, 8016e1e <_strtod_l+0xee>
 8016e0e:	2135      	movs	r1, #53	; 0x35
 8016e10:	a81a      	add	r0, sp, #104	; 0x68
 8016e12:	f002 fcd8 	bl	80197c6 <__copybits>
 8016e16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f002 f897 	bl	8018f4c <_Bfree>
 8016e1e:	3f01      	subs	r7, #1
 8016e20:	2f04      	cmp	r7, #4
 8016e22:	d806      	bhi.n	8016e32 <_strtod_l+0x102>
 8016e24:	e8df f007 	tbb	[pc, r7]
 8016e28:	1714030a 	.word	0x1714030a
 8016e2c:	0a          	.byte	0x0a
 8016e2d:	00          	.byte	0x00
 8016e2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8016e32:	0728      	lsls	r0, r5, #28
 8016e34:	d5c0      	bpl.n	8016db8 <_strtod_l+0x88>
 8016e36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016e3a:	e7bd      	b.n	8016db8 <_strtod_l+0x88>
 8016e3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8016e40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016e42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016e46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016e4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e4e:	e7f0      	b.n	8016e32 <_strtod_l+0x102>
 8016e50:	f8df b180 	ldr.w	fp, [pc, #384]	; 8016fd4 <_strtod_l+0x2a4>
 8016e54:	e7ed      	b.n	8016e32 <_strtod_l+0x102>
 8016e56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016e5a:	f04f 3aff 	mov.w	sl, #4294967295
 8016e5e:	e7e8      	b.n	8016e32 <_strtod_l+0x102>
 8016e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e62:	1c5a      	adds	r2, r3, #1
 8016e64:	9217      	str	r2, [sp, #92]	; 0x5c
 8016e66:	785b      	ldrb	r3, [r3, #1]
 8016e68:	2b30      	cmp	r3, #48	; 0x30
 8016e6a:	d0f9      	beq.n	8016e60 <_strtod_l+0x130>
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d0a3      	beq.n	8016db8 <_strtod_l+0x88>
 8016e70:	2301      	movs	r3, #1
 8016e72:	f04f 0900 	mov.w	r9, #0
 8016e76:	9304      	str	r3, [sp, #16]
 8016e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e7a:	9308      	str	r3, [sp, #32]
 8016e7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8016e80:	464f      	mov	r7, r9
 8016e82:	220a      	movs	r2, #10
 8016e84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016e86:	7806      	ldrb	r6, [r0, #0]
 8016e88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016e8c:	b2d9      	uxtb	r1, r3
 8016e8e:	2909      	cmp	r1, #9
 8016e90:	d92a      	bls.n	8016ee8 <_strtod_l+0x1b8>
 8016e92:	9905      	ldr	r1, [sp, #20]
 8016e94:	462a      	mov	r2, r5
 8016e96:	f003 fab3 	bl	801a400 <strncmp>
 8016e9a:	b398      	cbz	r0, 8016f04 <_strtod_l+0x1d4>
 8016e9c:	2000      	movs	r0, #0
 8016e9e:	4632      	mov	r2, r6
 8016ea0:	463d      	mov	r5, r7
 8016ea2:	9005      	str	r0, [sp, #20]
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	2a65      	cmp	r2, #101	; 0x65
 8016ea8:	d001      	beq.n	8016eae <_strtod_l+0x17e>
 8016eaa:	2a45      	cmp	r2, #69	; 0x45
 8016eac:	d118      	bne.n	8016ee0 <_strtod_l+0x1b0>
 8016eae:	b91d      	cbnz	r5, 8016eb8 <_strtod_l+0x188>
 8016eb0:	9a04      	ldr	r2, [sp, #16]
 8016eb2:	4302      	orrs	r2, r0
 8016eb4:	d09e      	beq.n	8016df4 <_strtod_l+0xc4>
 8016eb6:	2500      	movs	r5, #0
 8016eb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016ebc:	f108 0201 	add.w	r2, r8, #1
 8016ec0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ec2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016ec6:	2a2b      	cmp	r2, #43	; 0x2b
 8016ec8:	d075      	beq.n	8016fb6 <_strtod_l+0x286>
 8016eca:	2a2d      	cmp	r2, #45	; 0x2d
 8016ecc:	d07b      	beq.n	8016fc6 <_strtod_l+0x296>
 8016ece:	f04f 0c00 	mov.w	ip, #0
 8016ed2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016ed6:	2909      	cmp	r1, #9
 8016ed8:	f240 8082 	bls.w	8016fe0 <_strtod_l+0x2b0>
 8016edc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016ee0:	2600      	movs	r6, #0
 8016ee2:	e09d      	b.n	8017020 <_strtod_l+0x2f0>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	e7c4      	b.n	8016e72 <_strtod_l+0x142>
 8016ee8:	2f08      	cmp	r7, #8
 8016eea:	bfd8      	it	le
 8016eec:	9907      	ldrle	r1, [sp, #28]
 8016eee:	f100 0001 	add.w	r0, r0, #1
 8016ef2:	bfda      	itte	le
 8016ef4:	fb02 3301 	mlale	r3, r2, r1, r3
 8016ef8:	9307      	strle	r3, [sp, #28]
 8016efa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016efe:	3701      	adds	r7, #1
 8016f00:	9017      	str	r0, [sp, #92]	; 0x5c
 8016f02:	e7bf      	b.n	8016e84 <_strtod_l+0x154>
 8016f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f06:	195a      	adds	r2, r3, r5
 8016f08:	9217      	str	r2, [sp, #92]	; 0x5c
 8016f0a:	5d5a      	ldrb	r2, [r3, r5]
 8016f0c:	2f00      	cmp	r7, #0
 8016f0e:	d037      	beq.n	8016f80 <_strtod_l+0x250>
 8016f10:	9005      	str	r0, [sp, #20]
 8016f12:	463d      	mov	r5, r7
 8016f14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016f18:	2b09      	cmp	r3, #9
 8016f1a:	d912      	bls.n	8016f42 <_strtod_l+0x212>
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	e7c2      	b.n	8016ea6 <_strtod_l+0x176>
 8016f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f22:	1c5a      	adds	r2, r3, #1
 8016f24:	9217      	str	r2, [sp, #92]	; 0x5c
 8016f26:	785a      	ldrb	r2, [r3, #1]
 8016f28:	3001      	adds	r0, #1
 8016f2a:	2a30      	cmp	r2, #48	; 0x30
 8016f2c:	d0f8      	beq.n	8016f20 <_strtod_l+0x1f0>
 8016f2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016f32:	2b08      	cmp	r3, #8
 8016f34:	f200 84d9 	bhi.w	80178ea <_strtod_l+0xbba>
 8016f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f3a:	9005      	str	r0, [sp, #20]
 8016f3c:	2000      	movs	r0, #0
 8016f3e:	9308      	str	r3, [sp, #32]
 8016f40:	4605      	mov	r5, r0
 8016f42:	3a30      	subs	r2, #48	; 0x30
 8016f44:	f100 0301 	add.w	r3, r0, #1
 8016f48:	d014      	beq.n	8016f74 <_strtod_l+0x244>
 8016f4a:	9905      	ldr	r1, [sp, #20]
 8016f4c:	4419      	add	r1, r3
 8016f4e:	9105      	str	r1, [sp, #20]
 8016f50:	462b      	mov	r3, r5
 8016f52:	eb00 0e05 	add.w	lr, r0, r5
 8016f56:	210a      	movs	r1, #10
 8016f58:	4573      	cmp	r3, lr
 8016f5a:	d113      	bne.n	8016f84 <_strtod_l+0x254>
 8016f5c:	182b      	adds	r3, r5, r0
 8016f5e:	2b08      	cmp	r3, #8
 8016f60:	f105 0501 	add.w	r5, r5, #1
 8016f64:	4405      	add	r5, r0
 8016f66:	dc1c      	bgt.n	8016fa2 <_strtod_l+0x272>
 8016f68:	9907      	ldr	r1, [sp, #28]
 8016f6a:	230a      	movs	r3, #10
 8016f6c:	fb03 2301 	mla	r3, r3, r1, r2
 8016f70:	9307      	str	r3, [sp, #28]
 8016f72:	2300      	movs	r3, #0
 8016f74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f76:	1c51      	adds	r1, r2, #1
 8016f78:	9117      	str	r1, [sp, #92]	; 0x5c
 8016f7a:	7852      	ldrb	r2, [r2, #1]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	e7c9      	b.n	8016f14 <_strtod_l+0x1e4>
 8016f80:	4638      	mov	r0, r7
 8016f82:	e7d2      	b.n	8016f2a <_strtod_l+0x1fa>
 8016f84:	2b08      	cmp	r3, #8
 8016f86:	dc04      	bgt.n	8016f92 <_strtod_l+0x262>
 8016f88:	9e07      	ldr	r6, [sp, #28]
 8016f8a:	434e      	muls	r6, r1
 8016f8c:	9607      	str	r6, [sp, #28]
 8016f8e:	3301      	adds	r3, #1
 8016f90:	e7e2      	b.n	8016f58 <_strtod_l+0x228>
 8016f92:	f103 0c01 	add.w	ip, r3, #1
 8016f96:	f1bc 0f10 	cmp.w	ip, #16
 8016f9a:	bfd8      	it	le
 8016f9c:	fb01 f909 	mulle.w	r9, r1, r9
 8016fa0:	e7f5      	b.n	8016f8e <_strtod_l+0x25e>
 8016fa2:	2d10      	cmp	r5, #16
 8016fa4:	bfdc      	itt	le
 8016fa6:	230a      	movle	r3, #10
 8016fa8:	fb03 2909 	mlale	r9, r3, r9, r2
 8016fac:	e7e1      	b.n	8016f72 <_strtod_l+0x242>
 8016fae:	2300      	movs	r3, #0
 8016fb0:	9305      	str	r3, [sp, #20]
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	e77c      	b.n	8016eb0 <_strtod_l+0x180>
 8016fb6:	f04f 0c00 	mov.w	ip, #0
 8016fba:	f108 0202 	add.w	r2, r8, #2
 8016fbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8016fc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016fc4:	e785      	b.n	8016ed2 <_strtod_l+0x1a2>
 8016fc6:	f04f 0c01 	mov.w	ip, #1
 8016fca:	e7f6      	b.n	8016fba <_strtod_l+0x28a>
 8016fcc:	0801bcb8 	.word	0x0801bcb8
 8016fd0:	0801ba6c 	.word	0x0801ba6c
 8016fd4:	7ff00000 	.word	0x7ff00000
 8016fd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016fda:	1c51      	adds	r1, r2, #1
 8016fdc:	9117      	str	r1, [sp, #92]	; 0x5c
 8016fde:	7852      	ldrb	r2, [r2, #1]
 8016fe0:	2a30      	cmp	r2, #48	; 0x30
 8016fe2:	d0f9      	beq.n	8016fd8 <_strtod_l+0x2a8>
 8016fe4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016fe8:	2908      	cmp	r1, #8
 8016fea:	f63f af79 	bhi.w	8016ee0 <_strtod_l+0x1b0>
 8016fee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016ff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ff4:	9206      	str	r2, [sp, #24]
 8016ff6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ff8:	1c51      	adds	r1, r2, #1
 8016ffa:	9117      	str	r1, [sp, #92]	; 0x5c
 8016ffc:	7852      	ldrb	r2, [r2, #1]
 8016ffe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8017002:	2e09      	cmp	r6, #9
 8017004:	d937      	bls.n	8017076 <_strtod_l+0x346>
 8017006:	9e06      	ldr	r6, [sp, #24]
 8017008:	1b89      	subs	r1, r1, r6
 801700a:	2908      	cmp	r1, #8
 801700c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017010:	dc02      	bgt.n	8017018 <_strtod_l+0x2e8>
 8017012:	4576      	cmp	r6, lr
 8017014:	bfa8      	it	ge
 8017016:	4676      	movge	r6, lr
 8017018:	f1bc 0f00 	cmp.w	ip, #0
 801701c:	d000      	beq.n	8017020 <_strtod_l+0x2f0>
 801701e:	4276      	negs	r6, r6
 8017020:	2d00      	cmp	r5, #0
 8017022:	d14d      	bne.n	80170c0 <_strtod_l+0x390>
 8017024:	9904      	ldr	r1, [sp, #16]
 8017026:	4301      	orrs	r1, r0
 8017028:	f47f aec6 	bne.w	8016db8 <_strtod_l+0x88>
 801702c:	2b00      	cmp	r3, #0
 801702e:	f47f aee1 	bne.w	8016df4 <_strtod_l+0xc4>
 8017032:	2a69      	cmp	r2, #105	; 0x69
 8017034:	d027      	beq.n	8017086 <_strtod_l+0x356>
 8017036:	dc24      	bgt.n	8017082 <_strtod_l+0x352>
 8017038:	2a49      	cmp	r2, #73	; 0x49
 801703a:	d024      	beq.n	8017086 <_strtod_l+0x356>
 801703c:	2a4e      	cmp	r2, #78	; 0x4e
 801703e:	f47f aed9 	bne.w	8016df4 <_strtod_l+0xc4>
 8017042:	499f      	ldr	r1, [pc, #636]	; (80172c0 <_strtod_l+0x590>)
 8017044:	a817      	add	r0, sp, #92	; 0x5c
 8017046:	f001 fe61 	bl	8018d0c <__match>
 801704a:	2800      	cmp	r0, #0
 801704c:	f43f aed2 	beq.w	8016df4 <_strtod_l+0xc4>
 8017050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	2b28      	cmp	r3, #40	; 0x28
 8017056:	d12d      	bne.n	80170b4 <_strtod_l+0x384>
 8017058:	499a      	ldr	r1, [pc, #616]	; (80172c4 <_strtod_l+0x594>)
 801705a:	aa1a      	add	r2, sp, #104	; 0x68
 801705c:	a817      	add	r0, sp, #92	; 0x5c
 801705e:	f001 fe69 	bl	8018d34 <__hexnan>
 8017062:	2805      	cmp	r0, #5
 8017064:	d126      	bne.n	80170b4 <_strtod_l+0x384>
 8017066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017068:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801706c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017070:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017074:	e6a0      	b.n	8016db8 <_strtod_l+0x88>
 8017076:	210a      	movs	r1, #10
 8017078:	fb01 2e0e 	mla	lr, r1, lr, r2
 801707c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017080:	e7b9      	b.n	8016ff6 <_strtod_l+0x2c6>
 8017082:	2a6e      	cmp	r2, #110	; 0x6e
 8017084:	e7db      	b.n	801703e <_strtod_l+0x30e>
 8017086:	4990      	ldr	r1, [pc, #576]	; (80172c8 <_strtod_l+0x598>)
 8017088:	a817      	add	r0, sp, #92	; 0x5c
 801708a:	f001 fe3f 	bl	8018d0c <__match>
 801708e:	2800      	cmp	r0, #0
 8017090:	f43f aeb0 	beq.w	8016df4 <_strtod_l+0xc4>
 8017094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017096:	498d      	ldr	r1, [pc, #564]	; (80172cc <_strtod_l+0x59c>)
 8017098:	3b01      	subs	r3, #1
 801709a:	a817      	add	r0, sp, #92	; 0x5c
 801709c:	9317      	str	r3, [sp, #92]	; 0x5c
 801709e:	f001 fe35 	bl	8018d0c <__match>
 80170a2:	b910      	cbnz	r0, 80170aa <_strtod_l+0x37a>
 80170a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170a6:	3301      	adds	r3, #1
 80170a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80170aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80172dc <_strtod_l+0x5ac>
 80170ae:	f04f 0a00 	mov.w	sl, #0
 80170b2:	e681      	b.n	8016db8 <_strtod_l+0x88>
 80170b4:	4886      	ldr	r0, [pc, #536]	; (80172d0 <_strtod_l+0x5a0>)
 80170b6:	f003 f953 	bl	801a360 <nan>
 80170ba:	ec5b ab10 	vmov	sl, fp, d0
 80170be:	e67b      	b.n	8016db8 <_strtod_l+0x88>
 80170c0:	9b05      	ldr	r3, [sp, #20]
 80170c2:	9807      	ldr	r0, [sp, #28]
 80170c4:	1af3      	subs	r3, r6, r3
 80170c6:	2f00      	cmp	r7, #0
 80170c8:	bf08      	it	eq
 80170ca:	462f      	moveq	r7, r5
 80170cc:	2d10      	cmp	r5, #16
 80170ce:	9306      	str	r3, [sp, #24]
 80170d0:	46a8      	mov	r8, r5
 80170d2:	bfa8      	it	ge
 80170d4:	f04f 0810 	movge.w	r8, #16
 80170d8:	f7e9 fa2c 	bl	8000534 <__aeabi_ui2d>
 80170dc:	2d09      	cmp	r5, #9
 80170de:	4682      	mov	sl, r0
 80170e0:	468b      	mov	fp, r1
 80170e2:	dd13      	ble.n	801710c <_strtod_l+0x3dc>
 80170e4:	4b7b      	ldr	r3, [pc, #492]	; (80172d4 <_strtod_l+0x5a4>)
 80170e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80170ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80170ee:	f7e9 fa9b 	bl	8000628 <__aeabi_dmul>
 80170f2:	4682      	mov	sl, r0
 80170f4:	4648      	mov	r0, r9
 80170f6:	468b      	mov	fp, r1
 80170f8:	f7e9 fa1c 	bl	8000534 <__aeabi_ui2d>
 80170fc:	4602      	mov	r2, r0
 80170fe:	460b      	mov	r3, r1
 8017100:	4650      	mov	r0, sl
 8017102:	4659      	mov	r1, fp
 8017104:	f7e9 f8da 	bl	80002bc <__adddf3>
 8017108:	4682      	mov	sl, r0
 801710a:	468b      	mov	fp, r1
 801710c:	2d0f      	cmp	r5, #15
 801710e:	dc38      	bgt.n	8017182 <_strtod_l+0x452>
 8017110:	9b06      	ldr	r3, [sp, #24]
 8017112:	2b00      	cmp	r3, #0
 8017114:	f43f ae50 	beq.w	8016db8 <_strtod_l+0x88>
 8017118:	dd24      	ble.n	8017164 <_strtod_l+0x434>
 801711a:	2b16      	cmp	r3, #22
 801711c:	dc0b      	bgt.n	8017136 <_strtod_l+0x406>
 801711e:	496d      	ldr	r1, [pc, #436]	; (80172d4 <_strtod_l+0x5a4>)
 8017120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017128:	4652      	mov	r2, sl
 801712a:	465b      	mov	r3, fp
 801712c:	f7e9 fa7c 	bl	8000628 <__aeabi_dmul>
 8017130:	4682      	mov	sl, r0
 8017132:	468b      	mov	fp, r1
 8017134:	e640      	b.n	8016db8 <_strtod_l+0x88>
 8017136:	9a06      	ldr	r2, [sp, #24]
 8017138:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801713c:	4293      	cmp	r3, r2
 801713e:	db20      	blt.n	8017182 <_strtod_l+0x452>
 8017140:	4c64      	ldr	r4, [pc, #400]	; (80172d4 <_strtod_l+0x5a4>)
 8017142:	f1c5 050f 	rsb	r5, r5, #15
 8017146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801714a:	4652      	mov	r2, sl
 801714c:	465b      	mov	r3, fp
 801714e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017152:	f7e9 fa69 	bl	8000628 <__aeabi_dmul>
 8017156:	9b06      	ldr	r3, [sp, #24]
 8017158:	1b5d      	subs	r5, r3, r5
 801715a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801715e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017162:	e7e3      	b.n	801712c <_strtod_l+0x3fc>
 8017164:	9b06      	ldr	r3, [sp, #24]
 8017166:	3316      	adds	r3, #22
 8017168:	db0b      	blt.n	8017182 <_strtod_l+0x452>
 801716a:	9b05      	ldr	r3, [sp, #20]
 801716c:	1b9e      	subs	r6, r3, r6
 801716e:	4b59      	ldr	r3, [pc, #356]	; (80172d4 <_strtod_l+0x5a4>)
 8017170:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8017174:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017178:	4650      	mov	r0, sl
 801717a:	4659      	mov	r1, fp
 801717c:	f7e9 fb7e 	bl	800087c <__aeabi_ddiv>
 8017180:	e7d6      	b.n	8017130 <_strtod_l+0x400>
 8017182:	9b06      	ldr	r3, [sp, #24]
 8017184:	eba5 0808 	sub.w	r8, r5, r8
 8017188:	4498      	add	r8, r3
 801718a:	f1b8 0f00 	cmp.w	r8, #0
 801718e:	dd74      	ble.n	801727a <_strtod_l+0x54a>
 8017190:	f018 030f 	ands.w	r3, r8, #15
 8017194:	d00a      	beq.n	80171ac <_strtod_l+0x47c>
 8017196:	494f      	ldr	r1, [pc, #316]	; (80172d4 <_strtod_l+0x5a4>)
 8017198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801719c:	4652      	mov	r2, sl
 801719e:	465b      	mov	r3, fp
 80171a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171a4:	f7e9 fa40 	bl	8000628 <__aeabi_dmul>
 80171a8:	4682      	mov	sl, r0
 80171aa:	468b      	mov	fp, r1
 80171ac:	f038 080f 	bics.w	r8, r8, #15
 80171b0:	d04f      	beq.n	8017252 <_strtod_l+0x522>
 80171b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80171b6:	dd22      	ble.n	80171fe <_strtod_l+0x4ce>
 80171b8:	2500      	movs	r5, #0
 80171ba:	462e      	mov	r6, r5
 80171bc:	9507      	str	r5, [sp, #28]
 80171be:	9505      	str	r5, [sp, #20]
 80171c0:	2322      	movs	r3, #34	; 0x22
 80171c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80172dc <_strtod_l+0x5ac>
 80171c6:	6023      	str	r3, [r4, #0]
 80171c8:	f04f 0a00 	mov.w	sl, #0
 80171cc:	9b07      	ldr	r3, [sp, #28]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	f43f adf2 	beq.w	8016db8 <_strtod_l+0x88>
 80171d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80171d6:	4620      	mov	r0, r4
 80171d8:	f001 feb8 	bl	8018f4c <_Bfree>
 80171dc:	9905      	ldr	r1, [sp, #20]
 80171de:	4620      	mov	r0, r4
 80171e0:	f001 feb4 	bl	8018f4c <_Bfree>
 80171e4:	4631      	mov	r1, r6
 80171e6:	4620      	mov	r0, r4
 80171e8:	f001 feb0 	bl	8018f4c <_Bfree>
 80171ec:	9907      	ldr	r1, [sp, #28]
 80171ee:	4620      	mov	r0, r4
 80171f0:	f001 feac 	bl	8018f4c <_Bfree>
 80171f4:	4629      	mov	r1, r5
 80171f6:	4620      	mov	r0, r4
 80171f8:	f001 fea8 	bl	8018f4c <_Bfree>
 80171fc:	e5dc      	b.n	8016db8 <_strtod_l+0x88>
 80171fe:	4b36      	ldr	r3, [pc, #216]	; (80172d8 <_strtod_l+0x5a8>)
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	2300      	movs	r3, #0
 8017204:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017208:	4650      	mov	r0, sl
 801720a:	4659      	mov	r1, fp
 801720c:	4699      	mov	r9, r3
 801720e:	f1b8 0f01 	cmp.w	r8, #1
 8017212:	dc21      	bgt.n	8017258 <_strtod_l+0x528>
 8017214:	b10b      	cbz	r3, 801721a <_strtod_l+0x4ea>
 8017216:	4682      	mov	sl, r0
 8017218:	468b      	mov	fp, r1
 801721a:	4b2f      	ldr	r3, [pc, #188]	; (80172d8 <_strtod_l+0x5a8>)
 801721c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017220:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017224:	4652      	mov	r2, sl
 8017226:	465b      	mov	r3, fp
 8017228:	e9d9 0100 	ldrd	r0, r1, [r9]
 801722c:	f7e9 f9fc 	bl	8000628 <__aeabi_dmul>
 8017230:	4b2a      	ldr	r3, [pc, #168]	; (80172dc <_strtod_l+0x5ac>)
 8017232:	460a      	mov	r2, r1
 8017234:	400b      	ands	r3, r1
 8017236:	492a      	ldr	r1, [pc, #168]	; (80172e0 <_strtod_l+0x5b0>)
 8017238:	428b      	cmp	r3, r1
 801723a:	4682      	mov	sl, r0
 801723c:	d8bc      	bhi.n	80171b8 <_strtod_l+0x488>
 801723e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017242:	428b      	cmp	r3, r1
 8017244:	bf86      	itte	hi
 8017246:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80172e4 <_strtod_l+0x5b4>
 801724a:	f04f 3aff 	movhi.w	sl, #4294967295
 801724e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017252:	2300      	movs	r3, #0
 8017254:	9304      	str	r3, [sp, #16]
 8017256:	e084      	b.n	8017362 <_strtod_l+0x632>
 8017258:	f018 0f01 	tst.w	r8, #1
 801725c:	d005      	beq.n	801726a <_strtod_l+0x53a>
 801725e:	9b04      	ldr	r3, [sp, #16]
 8017260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017264:	f7e9 f9e0 	bl	8000628 <__aeabi_dmul>
 8017268:	2301      	movs	r3, #1
 801726a:	9a04      	ldr	r2, [sp, #16]
 801726c:	3208      	adds	r2, #8
 801726e:	f109 0901 	add.w	r9, r9, #1
 8017272:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017276:	9204      	str	r2, [sp, #16]
 8017278:	e7c9      	b.n	801720e <_strtod_l+0x4de>
 801727a:	d0ea      	beq.n	8017252 <_strtod_l+0x522>
 801727c:	f1c8 0800 	rsb	r8, r8, #0
 8017280:	f018 020f 	ands.w	r2, r8, #15
 8017284:	d00a      	beq.n	801729c <_strtod_l+0x56c>
 8017286:	4b13      	ldr	r3, [pc, #76]	; (80172d4 <_strtod_l+0x5a4>)
 8017288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801728c:	4650      	mov	r0, sl
 801728e:	4659      	mov	r1, fp
 8017290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017294:	f7e9 faf2 	bl	800087c <__aeabi_ddiv>
 8017298:	4682      	mov	sl, r0
 801729a:	468b      	mov	fp, r1
 801729c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80172a0:	d0d7      	beq.n	8017252 <_strtod_l+0x522>
 80172a2:	f1b8 0f1f 	cmp.w	r8, #31
 80172a6:	dd1f      	ble.n	80172e8 <_strtod_l+0x5b8>
 80172a8:	2500      	movs	r5, #0
 80172aa:	462e      	mov	r6, r5
 80172ac:	9507      	str	r5, [sp, #28]
 80172ae:	9505      	str	r5, [sp, #20]
 80172b0:	2322      	movs	r3, #34	; 0x22
 80172b2:	f04f 0a00 	mov.w	sl, #0
 80172b6:	f04f 0b00 	mov.w	fp, #0
 80172ba:	6023      	str	r3, [r4, #0]
 80172bc:	e786      	b.n	80171cc <_strtod_l+0x49c>
 80172be:	bf00      	nop
 80172c0:	0801ba41 	.word	0x0801ba41
 80172c4:	0801ba80 	.word	0x0801ba80
 80172c8:	0801ba39 	.word	0x0801ba39
 80172cc:	0801bbc4 	.word	0x0801bbc4
 80172d0:	0801be8b 	.word	0x0801be8b
 80172d4:	0801bd50 	.word	0x0801bd50
 80172d8:	0801bd28 	.word	0x0801bd28
 80172dc:	7ff00000 	.word	0x7ff00000
 80172e0:	7ca00000 	.word	0x7ca00000
 80172e4:	7fefffff 	.word	0x7fefffff
 80172e8:	f018 0310 	ands.w	r3, r8, #16
 80172ec:	bf18      	it	ne
 80172ee:	236a      	movne	r3, #106	; 0x6a
 80172f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80176a0 <_strtod_l+0x970>
 80172f4:	9304      	str	r3, [sp, #16]
 80172f6:	4650      	mov	r0, sl
 80172f8:	4659      	mov	r1, fp
 80172fa:	2300      	movs	r3, #0
 80172fc:	f018 0f01 	tst.w	r8, #1
 8017300:	d004      	beq.n	801730c <_strtod_l+0x5dc>
 8017302:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017306:	f7e9 f98f 	bl	8000628 <__aeabi_dmul>
 801730a:	2301      	movs	r3, #1
 801730c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017310:	f109 0908 	add.w	r9, r9, #8
 8017314:	d1f2      	bne.n	80172fc <_strtod_l+0x5cc>
 8017316:	b10b      	cbz	r3, 801731c <_strtod_l+0x5ec>
 8017318:	4682      	mov	sl, r0
 801731a:	468b      	mov	fp, r1
 801731c:	9b04      	ldr	r3, [sp, #16]
 801731e:	b1c3      	cbz	r3, 8017352 <_strtod_l+0x622>
 8017320:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017324:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017328:	2b00      	cmp	r3, #0
 801732a:	4659      	mov	r1, fp
 801732c:	dd11      	ble.n	8017352 <_strtod_l+0x622>
 801732e:	2b1f      	cmp	r3, #31
 8017330:	f340 8124 	ble.w	801757c <_strtod_l+0x84c>
 8017334:	2b34      	cmp	r3, #52	; 0x34
 8017336:	bfde      	ittt	le
 8017338:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801733c:	f04f 33ff 	movle.w	r3, #4294967295
 8017340:	fa03 f202 	lslle.w	r2, r3, r2
 8017344:	f04f 0a00 	mov.w	sl, #0
 8017348:	bfcc      	ite	gt
 801734a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801734e:	ea02 0b01 	andle.w	fp, r2, r1
 8017352:	2200      	movs	r2, #0
 8017354:	2300      	movs	r3, #0
 8017356:	4650      	mov	r0, sl
 8017358:	4659      	mov	r1, fp
 801735a:	f7e9 fbcd 	bl	8000af8 <__aeabi_dcmpeq>
 801735e:	2800      	cmp	r0, #0
 8017360:	d1a2      	bne.n	80172a8 <_strtod_l+0x578>
 8017362:	9b07      	ldr	r3, [sp, #28]
 8017364:	9300      	str	r3, [sp, #0]
 8017366:	9908      	ldr	r1, [sp, #32]
 8017368:	462b      	mov	r3, r5
 801736a:	463a      	mov	r2, r7
 801736c:	4620      	mov	r0, r4
 801736e:	f001 fe55 	bl	801901c <__s2b>
 8017372:	9007      	str	r0, [sp, #28]
 8017374:	2800      	cmp	r0, #0
 8017376:	f43f af1f 	beq.w	80171b8 <_strtod_l+0x488>
 801737a:	9b05      	ldr	r3, [sp, #20]
 801737c:	1b9e      	subs	r6, r3, r6
 801737e:	9b06      	ldr	r3, [sp, #24]
 8017380:	2b00      	cmp	r3, #0
 8017382:	bfb4      	ite	lt
 8017384:	4633      	movlt	r3, r6
 8017386:	2300      	movge	r3, #0
 8017388:	930c      	str	r3, [sp, #48]	; 0x30
 801738a:	9b06      	ldr	r3, [sp, #24]
 801738c:	2500      	movs	r5, #0
 801738e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017392:	9312      	str	r3, [sp, #72]	; 0x48
 8017394:	462e      	mov	r6, r5
 8017396:	9b07      	ldr	r3, [sp, #28]
 8017398:	4620      	mov	r0, r4
 801739a:	6859      	ldr	r1, [r3, #4]
 801739c:	f001 fd96 	bl	8018ecc <_Balloc>
 80173a0:	9005      	str	r0, [sp, #20]
 80173a2:	2800      	cmp	r0, #0
 80173a4:	f43f af0c 	beq.w	80171c0 <_strtod_l+0x490>
 80173a8:	9b07      	ldr	r3, [sp, #28]
 80173aa:	691a      	ldr	r2, [r3, #16]
 80173ac:	3202      	adds	r2, #2
 80173ae:	f103 010c 	add.w	r1, r3, #12
 80173b2:	0092      	lsls	r2, r2, #2
 80173b4:	300c      	adds	r0, #12
 80173b6:	f7fe fd63 	bl	8015e80 <memcpy>
 80173ba:	ec4b ab10 	vmov	d0, sl, fp
 80173be:	aa1a      	add	r2, sp, #104	; 0x68
 80173c0:	a919      	add	r1, sp, #100	; 0x64
 80173c2:	4620      	mov	r0, r4
 80173c4:	f002 f970 	bl	80196a8 <__d2b>
 80173c8:	ec4b ab18 	vmov	d8, sl, fp
 80173cc:	9018      	str	r0, [sp, #96]	; 0x60
 80173ce:	2800      	cmp	r0, #0
 80173d0:	f43f aef6 	beq.w	80171c0 <_strtod_l+0x490>
 80173d4:	2101      	movs	r1, #1
 80173d6:	4620      	mov	r0, r4
 80173d8:	f001 feba 	bl	8019150 <__i2b>
 80173dc:	4606      	mov	r6, r0
 80173de:	2800      	cmp	r0, #0
 80173e0:	f43f aeee 	beq.w	80171c0 <_strtod_l+0x490>
 80173e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80173e6:	9904      	ldr	r1, [sp, #16]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	bfab      	itete	ge
 80173ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80173ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80173f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80173f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80173f6:	bfac      	ite	ge
 80173f8:	eb03 0902 	addge.w	r9, r3, r2
 80173fc:	1ad7      	sublt	r7, r2, r3
 80173fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017400:	eba3 0801 	sub.w	r8, r3, r1
 8017404:	4490      	add	r8, r2
 8017406:	4ba1      	ldr	r3, [pc, #644]	; (801768c <_strtod_l+0x95c>)
 8017408:	f108 38ff 	add.w	r8, r8, #4294967295
 801740c:	4598      	cmp	r8, r3
 801740e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017412:	f280 80c7 	bge.w	80175a4 <_strtod_l+0x874>
 8017416:	eba3 0308 	sub.w	r3, r3, r8
 801741a:	2b1f      	cmp	r3, #31
 801741c:	eba2 0203 	sub.w	r2, r2, r3
 8017420:	f04f 0101 	mov.w	r1, #1
 8017424:	f300 80b1 	bgt.w	801758a <_strtod_l+0x85a>
 8017428:	fa01 f303 	lsl.w	r3, r1, r3
 801742c:	930d      	str	r3, [sp, #52]	; 0x34
 801742e:	2300      	movs	r3, #0
 8017430:	9308      	str	r3, [sp, #32]
 8017432:	eb09 0802 	add.w	r8, r9, r2
 8017436:	9b04      	ldr	r3, [sp, #16]
 8017438:	45c1      	cmp	r9, r8
 801743a:	4417      	add	r7, r2
 801743c:	441f      	add	r7, r3
 801743e:	464b      	mov	r3, r9
 8017440:	bfa8      	it	ge
 8017442:	4643      	movge	r3, r8
 8017444:	42bb      	cmp	r3, r7
 8017446:	bfa8      	it	ge
 8017448:	463b      	movge	r3, r7
 801744a:	2b00      	cmp	r3, #0
 801744c:	bfc2      	ittt	gt
 801744e:	eba8 0803 	subgt.w	r8, r8, r3
 8017452:	1aff      	subgt	r7, r7, r3
 8017454:	eba9 0903 	subgt.w	r9, r9, r3
 8017458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801745a:	2b00      	cmp	r3, #0
 801745c:	dd17      	ble.n	801748e <_strtod_l+0x75e>
 801745e:	4631      	mov	r1, r6
 8017460:	461a      	mov	r2, r3
 8017462:	4620      	mov	r0, r4
 8017464:	f001 ff34 	bl	80192d0 <__pow5mult>
 8017468:	4606      	mov	r6, r0
 801746a:	2800      	cmp	r0, #0
 801746c:	f43f aea8 	beq.w	80171c0 <_strtod_l+0x490>
 8017470:	4601      	mov	r1, r0
 8017472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017474:	4620      	mov	r0, r4
 8017476:	f001 fe81 	bl	801917c <__multiply>
 801747a:	900b      	str	r0, [sp, #44]	; 0x2c
 801747c:	2800      	cmp	r0, #0
 801747e:	f43f ae9f 	beq.w	80171c0 <_strtod_l+0x490>
 8017482:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017484:	4620      	mov	r0, r4
 8017486:	f001 fd61 	bl	8018f4c <_Bfree>
 801748a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801748c:	9318      	str	r3, [sp, #96]	; 0x60
 801748e:	f1b8 0f00 	cmp.w	r8, #0
 8017492:	f300 808c 	bgt.w	80175ae <_strtod_l+0x87e>
 8017496:	9b06      	ldr	r3, [sp, #24]
 8017498:	2b00      	cmp	r3, #0
 801749a:	dd08      	ble.n	80174ae <_strtod_l+0x77e>
 801749c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801749e:	9905      	ldr	r1, [sp, #20]
 80174a0:	4620      	mov	r0, r4
 80174a2:	f001 ff15 	bl	80192d0 <__pow5mult>
 80174a6:	9005      	str	r0, [sp, #20]
 80174a8:	2800      	cmp	r0, #0
 80174aa:	f43f ae89 	beq.w	80171c0 <_strtod_l+0x490>
 80174ae:	2f00      	cmp	r7, #0
 80174b0:	dd08      	ble.n	80174c4 <_strtod_l+0x794>
 80174b2:	9905      	ldr	r1, [sp, #20]
 80174b4:	463a      	mov	r2, r7
 80174b6:	4620      	mov	r0, r4
 80174b8:	f001 ff64 	bl	8019384 <__lshift>
 80174bc:	9005      	str	r0, [sp, #20]
 80174be:	2800      	cmp	r0, #0
 80174c0:	f43f ae7e 	beq.w	80171c0 <_strtod_l+0x490>
 80174c4:	f1b9 0f00 	cmp.w	r9, #0
 80174c8:	dd08      	ble.n	80174dc <_strtod_l+0x7ac>
 80174ca:	4631      	mov	r1, r6
 80174cc:	464a      	mov	r2, r9
 80174ce:	4620      	mov	r0, r4
 80174d0:	f001 ff58 	bl	8019384 <__lshift>
 80174d4:	4606      	mov	r6, r0
 80174d6:	2800      	cmp	r0, #0
 80174d8:	f43f ae72 	beq.w	80171c0 <_strtod_l+0x490>
 80174dc:	9a05      	ldr	r2, [sp, #20]
 80174de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80174e0:	4620      	mov	r0, r4
 80174e2:	f001 ffdb 	bl	801949c <__mdiff>
 80174e6:	4605      	mov	r5, r0
 80174e8:	2800      	cmp	r0, #0
 80174ea:	f43f ae69 	beq.w	80171c0 <_strtod_l+0x490>
 80174ee:	68c3      	ldr	r3, [r0, #12]
 80174f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80174f2:	2300      	movs	r3, #0
 80174f4:	60c3      	str	r3, [r0, #12]
 80174f6:	4631      	mov	r1, r6
 80174f8:	f001 ffb4 	bl	8019464 <__mcmp>
 80174fc:	2800      	cmp	r0, #0
 80174fe:	da60      	bge.n	80175c2 <_strtod_l+0x892>
 8017500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017502:	ea53 030a 	orrs.w	r3, r3, sl
 8017506:	f040 8082 	bne.w	801760e <_strtod_l+0x8de>
 801750a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801750e:	2b00      	cmp	r3, #0
 8017510:	d17d      	bne.n	801760e <_strtod_l+0x8de>
 8017512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017516:	0d1b      	lsrs	r3, r3, #20
 8017518:	051b      	lsls	r3, r3, #20
 801751a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801751e:	d976      	bls.n	801760e <_strtod_l+0x8de>
 8017520:	696b      	ldr	r3, [r5, #20]
 8017522:	b913      	cbnz	r3, 801752a <_strtod_l+0x7fa>
 8017524:	692b      	ldr	r3, [r5, #16]
 8017526:	2b01      	cmp	r3, #1
 8017528:	dd71      	ble.n	801760e <_strtod_l+0x8de>
 801752a:	4629      	mov	r1, r5
 801752c:	2201      	movs	r2, #1
 801752e:	4620      	mov	r0, r4
 8017530:	f001 ff28 	bl	8019384 <__lshift>
 8017534:	4631      	mov	r1, r6
 8017536:	4605      	mov	r5, r0
 8017538:	f001 ff94 	bl	8019464 <__mcmp>
 801753c:	2800      	cmp	r0, #0
 801753e:	dd66      	ble.n	801760e <_strtod_l+0x8de>
 8017540:	9904      	ldr	r1, [sp, #16]
 8017542:	4a53      	ldr	r2, [pc, #332]	; (8017690 <_strtod_l+0x960>)
 8017544:	465b      	mov	r3, fp
 8017546:	2900      	cmp	r1, #0
 8017548:	f000 8081 	beq.w	801764e <_strtod_l+0x91e>
 801754c:	ea02 010b 	and.w	r1, r2, fp
 8017550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017554:	dc7b      	bgt.n	801764e <_strtod_l+0x91e>
 8017556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801755a:	f77f aea9 	ble.w	80172b0 <_strtod_l+0x580>
 801755e:	4b4d      	ldr	r3, [pc, #308]	; (8017694 <_strtod_l+0x964>)
 8017560:	4650      	mov	r0, sl
 8017562:	4659      	mov	r1, fp
 8017564:	2200      	movs	r2, #0
 8017566:	f7e9 f85f 	bl	8000628 <__aeabi_dmul>
 801756a:	460b      	mov	r3, r1
 801756c:	4303      	orrs	r3, r0
 801756e:	bf08      	it	eq
 8017570:	2322      	moveq	r3, #34	; 0x22
 8017572:	4682      	mov	sl, r0
 8017574:	468b      	mov	fp, r1
 8017576:	bf08      	it	eq
 8017578:	6023      	streq	r3, [r4, #0]
 801757a:	e62b      	b.n	80171d4 <_strtod_l+0x4a4>
 801757c:	f04f 32ff 	mov.w	r2, #4294967295
 8017580:	fa02 f303 	lsl.w	r3, r2, r3
 8017584:	ea03 0a0a 	and.w	sl, r3, sl
 8017588:	e6e3      	b.n	8017352 <_strtod_l+0x622>
 801758a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801758e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017592:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017596:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801759a:	fa01 f308 	lsl.w	r3, r1, r8
 801759e:	9308      	str	r3, [sp, #32]
 80175a0:	910d      	str	r1, [sp, #52]	; 0x34
 80175a2:	e746      	b.n	8017432 <_strtod_l+0x702>
 80175a4:	2300      	movs	r3, #0
 80175a6:	9308      	str	r3, [sp, #32]
 80175a8:	2301      	movs	r3, #1
 80175aa:	930d      	str	r3, [sp, #52]	; 0x34
 80175ac:	e741      	b.n	8017432 <_strtod_l+0x702>
 80175ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80175b0:	4642      	mov	r2, r8
 80175b2:	4620      	mov	r0, r4
 80175b4:	f001 fee6 	bl	8019384 <__lshift>
 80175b8:	9018      	str	r0, [sp, #96]	; 0x60
 80175ba:	2800      	cmp	r0, #0
 80175bc:	f47f af6b 	bne.w	8017496 <_strtod_l+0x766>
 80175c0:	e5fe      	b.n	80171c0 <_strtod_l+0x490>
 80175c2:	465f      	mov	r7, fp
 80175c4:	d16e      	bne.n	80176a4 <_strtod_l+0x974>
 80175c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80175c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175cc:	b342      	cbz	r2, 8017620 <_strtod_l+0x8f0>
 80175ce:	4a32      	ldr	r2, [pc, #200]	; (8017698 <_strtod_l+0x968>)
 80175d0:	4293      	cmp	r3, r2
 80175d2:	d128      	bne.n	8017626 <_strtod_l+0x8f6>
 80175d4:	9b04      	ldr	r3, [sp, #16]
 80175d6:	4651      	mov	r1, sl
 80175d8:	b1eb      	cbz	r3, 8017616 <_strtod_l+0x8e6>
 80175da:	4b2d      	ldr	r3, [pc, #180]	; (8017690 <_strtod_l+0x960>)
 80175dc:	403b      	ands	r3, r7
 80175de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80175e2:	f04f 32ff 	mov.w	r2, #4294967295
 80175e6:	d819      	bhi.n	801761c <_strtod_l+0x8ec>
 80175e8:	0d1b      	lsrs	r3, r3, #20
 80175ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80175ee:	fa02 f303 	lsl.w	r3, r2, r3
 80175f2:	4299      	cmp	r1, r3
 80175f4:	d117      	bne.n	8017626 <_strtod_l+0x8f6>
 80175f6:	4b29      	ldr	r3, [pc, #164]	; (801769c <_strtod_l+0x96c>)
 80175f8:	429f      	cmp	r7, r3
 80175fa:	d102      	bne.n	8017602 <_strtod_l+0x8d2>
 80175fc:	3101      	adds	r1, #1
 80175fe:	f43f addf 	beq.w	80171c0 <_strtod_l+0x490>
 8017602:	4b23      	ldr	r3, [pc, #140]	; (8017690 <_strtod_l+0x960>)
 8017604:	403b      	ands	r3, r7
 8017606:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801760a:	f04f 0a00 	mov.w	sl, #0
 801760e:	9b04      	ldr	r3, [sp, #16]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d1a4      	bne.n	801755e <_strtod_l+0x82e>
 8017614:	e5de      	b.n	80171d4 <_strtod_l+0x4a4>
 8017616:	f04f 33ff 	mov.w	r3, #4294967295
 801761a:	e7ea      	b.n	80175f2 <_strtod_l+0x8c2>
 801761c:	4613      	mov	r3, r2
 801761e:	e7e8      	b.n	80175f2 <_strtod_l+0x8c2>
 8017620:	ea53 030a 	orrs.w	r3, r3, sl
 8017624:	d08c      	beq.n	8017540 <_strtod_l+0x810>
 8017626:	9b08      	ldr	r3, [sp, #32]
 8017628:	b1db      	cbz	r3, 8017662 <_strtod_l+0x932>
 801762a:	423b      	tst	r3, r7
 801762c:	d0ef      	beq.n	801760e <_strtod_l+0x8de>
 801762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017630:	9a04      	ldr	r2, [sp, #16]
 8017632:	4650      	mov	r0, sl
 8017634:	4659      	mov	r1, fp
 8017636:	b1c3      	cbz	r3, 801766a <_strtod_l+0x93a>
 8017638:	f7ff fb5c 	bl	8016cf4 <sulp>
 801763c:	4602      	mov	r2, r0
 801763e:	460b      	mov	r3, r1
 8017640:	ec51 0b18 	vmov	r0, r1, d8
 8017644:	f7e8 fe3a 	bl	80002bc <__adddf3>
 8017648:	4682      	mov	sl, r0
 801764a:	468b      	mov	fp, r1
 801764c:	e7df      	b.n	801760e <_strtod_l+0x8de>
 801764e:	4013      	ands	r3, r2
 8017650:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017654:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017658:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801765c:	f04f 3aff 	mov.w	sl, #4294967295
 8017660:	e7d5      	b.n	801760e <_strtod_l+0x8de>
 8017662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017664:	ea13 0f0a 	tst.w	r3, sl
 8017668:	e7e0      	b.n	801762c <_strtod_l+0x8fc>
 801766a:	f7ff fb43 	bl	8016cf4 <sulp>
 801766e:	4602      	mov	r2, r0
 8017670:	460b      	mov	r3, r1
 8017672:	ec51 0b18 	vmov	r0, r1, d8
 8017676:	f7e8 fe1f 	bl	80002b8 <__aeabi_dsub>
 801767a:	2200      	movs	r2, #0
 801767c:	2300      	movs	r3, #0
 801767e:	4682      	mov	sl, r0
 8017680:	468b      	mov	fp, r1
 8017682:	f7e9 fa39 	bl	8000af8 <__aeabi_dcmpeq>
 8017686:	2800      	cmp	r0, #0
 8017688:	d0c1      	beq.n	801760e <_strtod_l+0x8de>
 801768a:	e611      	b.n	80172b0 <_strtod_l+0x580>
 801768c:	fffffc02 	.word	0xfffffc02
 8017690:	7ff00000 	.word	0x7ff00000
 8017694:	39500000 	.word	0x39500000
 8017698:	000fffff 	.word	0x000fffff
 801769c:	7fefffff 	.word	0x7fefffff
 80176a0:	0801ba98 	.word	0x0801ba98
 80176a4:	4631      	mov	r1, r6
 80176a6:	4628      	mov	r0, r5
 80176a8:	f002 f85a 	bl	8019760 <__ratio>
 80176ac:	ec59 8b10 	vmov	r8, r9, d0
 80176b0:	ee10 0a10 	vmov	r0, s0
 80176b4:	2200      	movs	r2, #0
 80176b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176ba:	4649      	mov	r1, r9
 80176bc:	f7e9 fa30 	bl	8000b20 <__aeabi_dcmple>
 80176c0:	2800      	cmp	r0, #0
 80176c2:	d07a      	beq.n	80177ba <_strtod_l+0xa8a>
 80176c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d04a      	beq.n	8017760 <_strtod_l+0xa30>
 80176ca:	4b95      	ldr	r3, [pc, #596]	; (8017920 <_strtod_l+0xbf0>)
 80176cc:	2200      	movs	r2, #0
 80176ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80176d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017920 <_strtod_l+0xbf0>
 80176d6:	f04f 0800 	mov.w	r8, #0
 80176da:	4b92      	ldr	r3, [pc, #584]	; (8017924 <_strtod_l+0xbf4>)
 80176dc:	403b      	ands	r3, r7
 80176de:	930d      	str	r3, [sp, #52]	; 0x34
 80176e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176e2:	4b91      	ldr	r3, [pc, #580]	; (8017928 <_strtod_l+0xbf8>)
 80176e4:	429a      	cmp	r2, r3
 80176e6:	f040 80b0 	bne.w	801784a <_strtod_l+0xb1a>
 80176ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80176ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80176f2:	ec4b ab10 	vmov	d0, sl, fp
 80176f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80176fa:	f001 ff59 	bl	80195b0 <__ulp>
 80176fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017702:	ec53 2b10 	vmov	r2, r3, d0
 8017706:	f7e8 ff8f 	bl	8000628 <__aeabi_dmul>
 801770a:	4652      	mov	r2, sl
 801770c:	465b      	mov	r3, fp
 801770e:	f7e8 fdd5 	bl	80002bc <__adddf3>
 8017712:	460b      	mov	r3, r1
 8017714:	4983      	ldr	r1, [pc, #524]	; (8017924 <_strtod_l+0xbf4>)
 8017716:	4a85      	ldr	r2, [pc, #532]	; (801792c <_strtod_l+0xbfc>)
 8017718:	4019      	ands	r1, r3
 801771a:	4291      	cmp	r1, r2
 801771c:	4682      	mov	sl, r0
 801771e:	d960      	bls.n	80177e2 <_strtod_l+0xab2>
 8017720:	ee18 3a90 	vmov	r3, s17
 8017724:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017728:	4293      	cmp	r3, r2
 801772a:	d104      	bne.n	8017736 <_strtod_l+0xa06>
 801772c:	ee18 3a10 	vmov	r3, s16
 8017730:	3301      	adds	r3, #1
 8017732:	f43f ad45 	beq.w	80171c0 <_strtod_l+0x490>
 8017736:	f8df b200 	ldr.w	fp, [pc, #512]	; 8017938 <_strtod_l+0xc08>
 801773a:	f04f 3aff 	mov.w	sl, #4294967295
 801773e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017740:	4620      	mov	r0, r4
 8017742:	f001 fc03 	bl	8018f4c <_Bfree>
 8017746:	9905      	ldr	r1, [sp, #20]
 8017748:	4620      	mov	r0, r4
 801774a:	f001 fbff 	bl	8018f4c <_Bfree>
 801774e:	4631      	mov	r1, r6
 8017750:	4620      	mov	r0, r4
 8017752:	f001 fbfb 	bl	8018f4c <_Bfree>
 8017756:	4629      	mov	r1, r5
 8017758:	4620      	mov	r0, r4
 801775a:	f001 fbf7 	bl	8018f4c <_Bfree>
 801775e:	e61a      	b.n	8017396 <_strtod_l+0x666>
 8017760:	f1ba 0f00 	cmp.w	sl, #0
 8017764:	d11b      	bne.n	801779e <_strtod_l+0xa6e>
 8017766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801776a:	b9f3      	cbnz	r3, 80177aa <_strtod_l+0xa7a>
 801776c:	4b6c      	ldr	r3, [pc, #432]	; (8017920 <_strtod_l+0xbf0>)
 801776e:	2200      	movs	r2, #0
 8017770:	4640      	mov	r0, r8
 8017772:	4649      	mov	r1, r9
 8017774:	f7e9 f9ca 	bl	8000b0c <__aeabi_dcmplt>
 8017778:	b9d0      	cbnz	r0, 80177b0 <_strtod_l+0xa80>
 801777a:	4640      	mov	r0, r8
 801777c:	4649      	mov	r1, r9
 801777e:	4b6c      	ldr	r3, [pc, #432]	; (8017930 <_strtod_l+0xc00>)
 8017780:	2200      	movs	r2, #0
 8017782:	f7e8 ff51 	bl	8000628 <__aeabi_dmul>
 8017786:	4680      	mov	r8, r0
 8017788:	4689      	mov	r9, r1
 801778a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801778e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8017792:	9315      	str	r3, [sp, #84]	; 0x54
 8017794:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801779c:	e79d      	b.n	80176da <_strtod_l+0x9aa>
 801779e:	f1ba 0f01 	cmp.w	sl, #1
 80177a2:	d102      	bne.n	80177aa <_strtod_l+0xa7a>
 80177a4:	2f00      	cmp	r7, #0
 80177a6:	f43f ad83 	beq.w	80172b0 <_strtod_l+0x580>
 80177aa:	4b62      	ldr	r3, [pc, #392]	; (8017934 <_strtod_l+0xc04>)
 80177ac:	2200      	movs	r2, #0
 80177ae:	e78e      	b.n	80176ce <_strtod_l+0x99e>
 80177b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8017930 <_strtod_l+0xc00>
 80177b4:	f04f 0800 	mov.w	r8, #0
 80177b8:	e7e7      	b.n	801778a <_strtod_l+0xa5a>
 80177ba:	4b5d      	ldr	r3, [pc, #372]	; (8017930 <_strtod_l+0xc00>)
 80177bc:	4640      	mov	r0, r8
 80177be:	4649      	mov	r1, r9
 80177c0:	2200      	movs	r2, #0
 80177c2:	f7e8 ff31 	bl	8000628 <__aeabi_dmul>
 80177c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177c8:	4680      	mov	r8, r0
 80177ca:	4689      	mov	r9, r1
 80177cc:	b933      	cbnz	r3, 80177dc <_strtod_l+0xaac>
 80177ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177d2:	900e      	str	r0, [sp, #56]	; 0x38
 80177d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80177d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80177da:	e7dd      	b.n	8017798 <_strtod_l+0xa68>
 80177dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80177e0:	e7f9      	b.n	80177d6 <_strtod_l+0xaa6>
 80177e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80177e6:	9b04      	ldr	r3, [sp, #16]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d1a8      	bne.n	801773e <_strtod_l+0xa0e>
 80177ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80177f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177f2:	0d1b      	lsrs	r3, r3, #20
 80177f4:	051b      	lsls	r3, r3, #20
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d1a1      	bne.n	801773e <_strtod_l+0xa0e>
 80177fa:	4640      	mov	r0, r8
 80177fc:	4649      	mov	r1, r9
 80177fe:	f7e9 fac3 	bl	8000d88 <__aeabi_d2lz>
 8017802:	f7e8 fee3 	bl	80005cc <__aeabi_l2d>
 8017806:	4602      	mov	r2, r0
 8017808:	460b      	mov	r3, r1
 801780a:	4640      	mov	r0, r8
 801780c:	4649      	mov	r1, r9
 801780e:	f7e8 fd53 	bl	80002b8 <__aeabi_dsub>
 8017812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017818:	ea43 030a 	orr.w	r3, r3, sl
 801781c:	4313      	orrs	r3, r2
 801781e:	4680      	mov	r8, r0
 8017820:	4689      	mov	r9, r1
 8017822:	d055      	beq.n	80178d0 <_strtod_l+0xba0>
 8017824:	a336      	add	r3, pc, #216	; (adr r3, 8017900 <_strtod_l+0xbd0>)
 8017826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801782a:	f7e9 f96f 	bl	8000b0c <__aeabi_dcmplt>
 801782e:	2800      	cmp	r0, #0
 8017830:	f47f acd0 	bne.w	80171d4 <_strtod_l+0x4a4>
 8017834:	a334      	add	r3, pc, #208	; (adr r3, 8017908 <_strtod_l+0xbd8>)
 8017836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801783a:	4640      	mov	r0, r8
 801783c:	4649      	mov	r1, r9
 801783e:	f7e9 f983 	bl	8000b48 <__aeabi_dcmpgt>
 8017842:	2800      	cmp	r0, #0
 8017844:	f43f af7b 	beq.w	801773e <_strtod_l+0xa0e>
 8017848:	e4c4      	b.n	80171d4 <_strtod_l+0x4a4>
 801784a:	9b04      	ldr	r3, [sp, #16]
 801784c:	b333      	cbz	r3, 801789c <_strtod_l+0xb6c>
 801784e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017850:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017854:	d822      	bhi.n	801789c <_strtod_l+0xb6c>
 8017856:	a32e      	add	r3, pc, #184	; (adr r3, 8017910 <_strtod_l+0xbe0>)
 8017858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801785c:	4640      	mov	r0, r8
 801785e:	4649      	mov	r1, r9
 8017860:	f7e9 f95e 	bl	8000b20 <__aeabi_dcmple>
 8017864:	b1a0      	cbz	r0, 8017890 <_strtod_l+0xb60>
 8017866:	4649      	mov	r1, r9
 8017868:	4640      	mov	r0, r8
 801786a:	f7e9 f9b5 	bl	8000bd8 <__aeabi_d2uiz>
 801786e:	2801      	cmp	r0, #1
 8017870:	bf38      	it	cc
 8017872:	2001      	movcc	r0, #1
 8017874:	f7e8 fe5e 	bl	8000534 <__aeabi_ui2d>
 8017878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801787a:	4680      	mov	r8, r0
 801787c:	4689      	mov	r9, r1
 801787e:	bb23      	cbnz	r3, 80178ca <_strtod_l+0xb9a>
 8017880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017884:	9010      	str	r0, [sp, #64]	; 0x40
 8017886:	9311      	str	r3, [sp, #68]	; 0x44
 8017888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801788c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017894:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017898:	1a9b      	subs	r3, r3, r2
 801789a:	9309      	str	r3, [sp, #36]	; 0x24
 801789c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80178a0:	eeb0 0a48 	vmov.f32	s0, s16
 80178a4:	eef0 0a68 	vmov.f32	s1, s17
 80178a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80178ac:	f001 fe80 	bl	80195b0 <__ulp>
 80178b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80178b4:	ec53 2b10 	vmov	r2, r3, d0
 80178b8:	f7e8 feb6 	bl	8000628 <__aeabi_dmul>
 80178bc:	ec53 2b18 	vmov	r2, r3, d8
 80178c0:	f7e8 fcfc 	bl	80002bc <__adddf3>
 80178c4:	4682      	mov	sl, r0
 80178c6:	468b      	mov	fp, r1
 80178c8:	e78d      	b.n	80177e6 <_strtod_l+0xab6>
 80178ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80178ce:	e7db      	b.n	8017888 <_strtod_l+0xb58>
 80178d0:	a311      	add	r3, pc, #68	; (adr r3, 8017918 <_strtod_l+0xbe8>)
 80178d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d6:	f7e9 f919 	bl	8000b0c <__aeabi_dcmplt>
 80178da:	e7b2      	b.n	8017842 <_strtod_l+0xb12>
 80178dc:	2300      	movs	r3, #0
 80178de:	930a      	str	r3, [sp, #40]	; 0x28
 80178e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80178e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80178e4:	6013      	str	r3, [r2, #0]
 80178e6:	f7ff ba6b 	b.w	8016dc0 <_strtod_l+0x90>
 80178ea:	2a65      	cmp	r2, #101	; 0x65
 80178ec:	f43f ab5f 	beq.w	8016fae <_strtod_l+0x27e>
 80178f0:	2a45      	cmp	r2, #69	; 0x45
 80178f2:	f43f ab5c 	beq.w	8016fae <_strtod_l+0x27e>
 80178f6:	2301      	movs	r3, #1
 80178f8:	f7ff bb94 	b.w	8017024 <_strtod_l+0x2f4>
 80178fc:	f3af 8000 	nop.w
 8017900:	94a03595 	.word	0x94a03595
 8017904:	3fdfffff 	.word	0x3fdfffff
 8017908:	35afe535 	.word	0x35afe535
 801790c:	3fe00000 	.word	0x3fe00000
 8017910:	ffc00000 	.word	0xffc00000
 8017914:	41dfffff 	.word	0x41dfffff
 8017918:	94a03595 	.word	0x94a03595
 801791c:	3fcfffff 	.word	0x3fcfffff
 8017920:	3ff00000 	.word	0x3ff00000
 8017924:	7ff00000 	.word	0x7ff00000
 8017928:	7fe00000 	.word	0x7fe00000
 801792c:	7c9fffff 	.word	0x7c9fffff
 8017930:	3fe00000 	.word	0x3fe00000
 8017934:	bff00000 	.word	0xbff00000
 8017938:	7fefffff 	.word	0x7fefffff

0801793c <_strtod_r>:
 801793c:	4b01      	ldr	r3, [pc, #4]	; (8017944 <_strtod_r+0x8>)
 801793e:	f7ff b9f7 	b.w	8016d30 <_strtod_l>
 8017942:	bf00      	nop
 8017944:	200000a8 	.word	0x200000a8

08017948 <_strtol_l.constprop.0>:
 8017948:	2b01      	cmp	r3, #1
 801794a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801794e:	d001      	beq.n	8017954 <_strtol_l.constprop.0+0xc>
 8017950:	2b24      	cmp	r3, #36	; 0x24
 8017952:	d906      	bls.n	8017962 <_strtol_l.constprop.0+0x1a>
 8017954:	f7fe fa6a 	bl	8015e2c <__errno>
 8017958:	2316      	movs	r3, #22
 801795a:	6003      	str	r3, [r0, #0]
 801795c:	2000      	movs	r0, #0
 801795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017962:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017a48 <_strtol_l.constprop.0+0x100>
 8017966:	460d      	mov	r5, r1
 8017968:	462e      	mov	r6, r5
 801796a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801796e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017972:	f017 0708 	ands.w	r7, r7, #8
 8017976:	d1f7      	bne.n	8017968 <_strtol_l.constprop.0+0x20>
 8017978:	2c2d      	cmp	r4, #45	; 0x2d
 801797a:	d132      	bne.n	80179e2 <_strtol_l.constprop.0+0x9a>
 801797c:	782c      	ldrb	r4, [r5, #0]
 801797e:	2701      	movs	r7, #1
 8017980:	1cb5      	adds	r5, r6, #2
 8017982:	2b00      	cmp	r3, #0
 8017984:	d05b      	beq.n	8017a3e <_strtol_l.constprop.0+0xf6>
 8017986:	2b10      	cmp	r3, #16
 8017988:	d109      	bne.n	801799e <_strtol_l.constprop.0+0x56>
 801798a:	2c30      	cmp	r4, #48	; 0x30
 801798c:	d107      	bne.n	801799e <_strtol_l.constprop.0+0x56>
 801798e:	782c      	ldrb	r4, [r5, #0]
 8017990:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017994:	2c58      	cmp	r4, #88	; 0x58
 8017996:	d14d      	bne.n	8017a34 <_strtol_l.constprop.0+0xec>
 8017998:	786c      	ldrb	r4, [r5, #1]
 801799a:	2310      	movs	r3, #16
 801799c:	3502      	adds	r5, #2
 801799e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80179a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80179a6:	f04f 0c00 	mov.w	ip, #0
 80179aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80179ae:	4666      	mov	r6, ip
 80179b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80179b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80179b8:	f1be 0f09 	cmp.w	lr, #9
 80179bc:	d816      	bhi.n	80179ec <_strtol_l.constprop.0+0xa4>
 80179be:	4674      	mov	r4, lr
 80179c0:	42a3      	cmp	r3, r4
 80179c2:	dd24      	ble.n	8017a0e <_strtol_l.constprop.0+0xc6>
 80179c4:	f1bc 0f00 	cmp.w	ip, #0
 80179c8:	db1e      	blt.n	8017a08 <_strtol_l.constprop.0+0xc0>
 80179ca:	45b1      	cmp	r9, r6
 80179cc:	d31c      	bcc.n	8017a08 <_strtol_l.constprop.0+0xc0>
 80179ce:	d101      	bne.n	80179d4 <_strtol_l.constprop.0+0x8c>
 80179d0:	45a2      	cmp	sl, r4
 80179d2:	db19      	blt.n	8017a08 <_strtol_l.constprop.0+0xc0>
 80179d4:	fb06 4603 	mla	r6, r6, r3, r4
 80179d8:	f04f 0c01 	mov.w	ip, #1
 80179dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179e0:	e7e8      	b.n	80179b4 <_strtol_l.constprop.0+0x6c>
 80179e2:	2c2b      	cmp	r4, #43	; 0x2b
 80179e4:	bf04      	itt	eq
 80179e6:	782c      	ldrbeq	r4, [r5, #0]
 80179e8:	1cb5      	addeq	r5, r6, #2
 80179ea:	e7ca      	b.n	8017982 <_strtol_l.constprop.0+0x3a>
 80179ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80179f0:	f1be 0f19 	cmp.w	lr, #25
 80179f4:	d801      	bhi.n	80179fa <_strtol_l.constprop.0+0xb2>
 80179f6:	3c37      	subs	r4, #55	; 0x37
 80179f8:	e7e2      	b.n	80179c0 <_strtol_l.constprop.0+0x78>
 80179fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80179fe:	f1be 0f19 	cmp.w	lr, #25
 8017a02:	d804      	bhi.n	8017a0e <_strtol_l.constprop.0+0xc6>
 8017a04:	3c57      	subs	r4, #87	; 0x57
 8017a06:	e7db      	b.n	80179c0 <_strtol_l.constprop.0+0x78>
 8017a08:	f04f 3cff 	mov.w	ip, #4294967295
 8017a0c:	e7e6      	b.n	80179dc <_strtol_l.constprop.0+0x94>
 8017a0e:	f1bc 0f00 	cmp.w	ip, #0
 8017a12:	da05      	bge.n	8017a20 <_strtol_l.constprop.0+0xd8>
 8017a14:	2322      	movs	r3, #34	; 0x22
 8017a16:	6003      	str	r3, [r0, #0]
 8017a18:	4646      	mov	r6, r8
 8017a1a:	b942      	cbnz	r2, 8017a2e <_strtol_l.constprop.0+0xe6>
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	e79e      	b.n	801795e <_strtol_l.constprop.0+0x16>
 8017a20:	b107      	cbz	r7, 8017a24 <_strtol_l.constprop.0+0xdc>
 8017a22:	4276      	negs	r6, r6
 8017a24:	2a00      	cmp	r2, #0
 8017a26:	d0f9      	beq.n	8017a1c <_strtol_l.constprop.0+0xd4>
 8017a28:	f1bc 0f00 	cmp.w	ip, #0
 8017a2c:	d000      	beq.n	8017a30 <_strtol_l.constprop.0+0xe8>
 8017a2e:	1e69      	subs	r1, r5, #1
 8017a30:	6011      	str	r1, [r2, #0]
 8017a32:	e7f3      	b.n	8017a1c <_strtol_l.constprop.0+0xd4>
 8017a34:	2430      	movs	r4, #48	; 0x30
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d1b1      	bne.n	801799e <_strtol_l.constprop.0+0x56>
 8017a3a:	2308      	movs	r3, #8
 8017a3c:	e7af      	b.n	801799e <_strtol_l.constprop.0+0x56>
 8017a3e:	2c30      	cmp	r4, #48	; 0x30
 8017a40:	d0a5      	beq.n	801798e <_strtol_l.constprop.0+0x46>
 8017a42:	230a      	movs	r3, #10
 8017a44:	e7ab      	b.n	801799e <_strtol_l.constprop.0+0x56>
 8017a46:	bf00      	nop
 8017a48:	0801bac1 	.word	0x0801bac1

08017a4c <_strtol_r>:
 8017a4c:	f7ff bf7c 	b.w	8017948 <_strtol_l.constprop.0>

08017a50 <_write_r>:
 8017a50:	b538      	push	{r3, r4, r5, lr}
 8017a52:	4d07      	ldr	r5, [pc, #28]	; (8017a70 <_write_r+0x20>)
 8017a54:	4604      	mov	r4, r0
 8017a56:	4608      	mov	r0, r1
 8017a58:	4611      	mov	r1, r2
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	602a      	str	r2, [r5, #0]
 8017a5e:	461a      	mov	r2, r3
 8017a60:	f7ea fc9e 	bl	80023a0 <_write>
 8017a64:	1c43      	adds	r3, r0, #1
 8017a66:	d102      	bne.n	8017a6e <_write_r+0x1e>
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	b103      	cbz	r3, 8017a6e <_write_r+0x1e>
 8017a6c:	6023      	str	r3, [r4, #0]
 8017a6e:	bd38      	pop	{r3, r4, r5, pc}
 8017a70:	20004130 	.word	0x20004130

08017a74 <_close_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	4d06      	ldr	r5, [pc, #24]	; (8017a90 <_close_r+0x1c>)
 8017a78:	2300      	movs	r3, #0
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	4608      	mov	r0, r1
 8017a7e:	602b      	str	r3, [r5, #0]
 8017a80:	f7ea fcaa 	bl	80023d8 <_close>
 8017a84:	1c43      	adds	r3, r0, #1
 8017a86:	d102      	bne.n	8017a8e <_close_r+0x1a>
 8017a88:	682b      	ldr	r3, [r5, #0]
 8017a8a:	b103      	cbz	r3, 8017a8e <_close_r+0x1a>
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	bd38      	pop	{r3, r4, r5, pc}
 8017a90:	20004130 	.word	0x20004130

08017a94 <quorem>:
 8017a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a98:	6903      	ldr	r3, [r0, #16]
 8017a9a:	690c      	ldr	r4, [r1, #16]
 8017a9c:	42a3      	cmp	r3, r4
 8017a9e:	4607      	mov	r7, r0
 8017aa0:	f2c0 8081 	blt.w	8017ba6 <quorem+0x112>
 8017aa4:	3c01      	subs	r4, #1
 8017aa6:	f101 0814 	add.w	r8, r1, #20
 8017aaa:	f100 0514 	add.w	r5, r0, #20
 8017aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ab2:	9301      	str	r3, [sp, #4]
 8017ab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017abc:	3301      	adds	r3, #1
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017ac8:	fbb2 f6f3 	udiv	r6, r2, r3
 8017acc:	d331      	bcc.n	8017b32 <quorem+0x9e>
 8017ace:	f04f 0e00 	mov.w	lr, #0
 8017ad2:	4640      	mov	r0, r8
 8017ad4:	46ac      	mov	ip, r5
 8017ad6:	46f2      	mov	sl, lr
 8017ad8:	f850 2b04 	ldr.w	r2, [r0], #4
 8017adc:	b293      	uxth	r3, r2
 8017ade:	fb06 e303 	mla	r3, r6, r3, lr
 8017ae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	ebaa 0303 	sub.w	r3, sl, r3
 8017aec:	f8dc a000 	ldr.w	sl, [ip]
 8017af0:	0c12      	lsrs	r2, r2, #16
 8017af2:	fa13 f38a 	uxtah	r3, r3, sl
 8017af6:	fb06 e202 	mla	r2, r6, r2, lr
 8017afa:	9300      	str	r3, [sp, #0]
 8017afc:	9b00      	ldr	r3, [sp, #0]
 8017afe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b02:	b292      	uxth	r2, r2
 8017b04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b10:	4581      	cmp	r9, r0
 8017b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b16:	f84c 3b04 	str.w	r3, [ip], #4
 8017b1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017b1e:	d2db      	bcs.n	8017ad8 <quorem+0x44>
 8017b20:	f855 300b 	ldr.w	r3, [r5, fp]
 8017b24:	b92b      	cbnz	r3, 8017b32 <quorem+0x9e>
 8017b26:	9b01      	ldr	r3, [sp, #4]
 8017b28:	3b04      	subs	r3, #4
 8017b2a:	429d      	cmp	r5, r3
 8017b2c:	461a      	mov	r2, r3
 8017b2e:	d32e      	bcc.n	8017b8e <quorem+0xfa>
 8017b30:	613c      	str	r4, [r7, #16]
 8017b32:	4638      	mov	r0, r7
 8017b34:	f001 fc96 	bl	8019464 <__mcmp>
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	db24      	blt.n	8017b86 <quorem+0xf2>
 8017b3c:	3601      	adds	r6, #1
 8017b3e:	4628      	mov	r0, r5
 8017b40:	f04f 0c00 	mov.w	ip, #0
 8017b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8017b48:	f8d0 e000 	ldr.w	lr, [r0]
 8017b4c:	b293      	uxth	r3, r2
 8017b4e:	ebac 0303 	sub.w	r3, ip, r3
 8017b52:	0c12      	lsrs	r2, r2, #16
 8017b54:	fa13 f38e 	uxtah	r3, r3, lr
 8017b58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b66:	45c1      	cmp	r9, r8
 8017b68:	f840 3b04 	str.w	r3, [r0], #4
 8017b6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017b70:	d2e8      	bcs.n	8017b44 <quorem+0xb0>
 8017b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b7a:	b922      	cbnz	r2, 8017b86 <quorem+0xf2>
 8017b7c:	3b04      	subs	r3, #4
 8017b7e:	429d      	cmp	r5, r3
 8017b80:	461a      	mov	r2, r3
 8017b82:	d30a      	bcc.n	8017b9a <quorem+0x106>
 8017b84:	613c      	str	r4, [r7, #16]
 8017b86:	4630      	mov	r0, r6
 8017b88:	b003      	add	sp, #12
 8017b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b8e:	6812      	ldr	r2, [r2, #0]
 8017b90:	3b04      	subs	r3, #4
 8017b92:	2a00      	cmp	r2, #0
 8017b94:	d1cc      	bne.n	8017b30 <quorem+0x9c>
 8017b96:	3c01      	subs	r4, #1
 8017b98:	e7c7      	b.n	8017b2a <quorem+0x96>
 8017b9a:	6812      	ldr	r2, [r2, #0]
 8017b9c:	3b04      	subs	r3, #4
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	d1f0      	bne.n	8017b84 <quorem+0xf0>
 8017ba2:	3c01      	subs	r4, #1
 8017ba4:	e7eb      	b.n	8017b7e <quorem+0xea>
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	e7ee      	b.n	8017b88 <quorem+0xf4>
 8017baa:	0000      	movs	r0, r0
 8017bac:	0000      	movs	r0, r0
	...

08017bb0 <_dtoa_r>:
 8017bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb4:	ed2d 8b04 	vpush	{d8-d9}
 8017bb8:	ec57 6b10 	vmov	r6, r7, d0
 8017bbc:	b093      	sub	sp, #76	; 0x4c
 8017bbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017bc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017bc4:	9106      	str	r1, [sp, #24]
 8017bc6:	ee10 aa10 	vmov	sl, s0
 8017bca:	4604      	mov	r4, r0
 8017bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8017bce:	930c      	str	r3, [sp, #48]	; 0x30
 8017bd0:	46bb      	mov	fp, r7
 8017bd2:	b975      	cbnz	r5, 8017bf2 <_dtoa_r+0x42>
 8017bd4:	2010      	movs	r0, #16
 8017bd6:	f001 f95f 	bl	8018e98 <malloc>
 8017bda:	4602      	mov	r2, r0
 8017bdc:	6260      	str	r0, [r4, #36]	; 0x24
 8017bde:	b920      	cbnz	r0, 8017bea <_dtoa_r+0x3a>
 8017be0:	4ba7      	ldr	r3, [pc, #668]	; (8017e80 <_dtoa_r+0x2d0>)
 8017be2:	21ea      	movs	r1, #234	; 0xea
 8017be4:	48a7      	ldr	r0, [pc, #668]	; (8017e84 <_dtoa_r+0x2d4>)
 8017be6:	f002 fcdb 	bl	801a5a0 <__assert_func>
 8017bea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017bee:	6005      	str	r5, [r0, #0]
 8017bf0:	60c5      	str	r5, [r0, #12]
 8017bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017bf4:	6819      	ldr	r1, [r3, #0]
 8017bf6:	b151      	cbz	r1, 8017c0e <_dtoa_r+0x5e>
 8017bf8:	685a      	ldr	r2, [r3, #4]
 8017bfa:	604a      	str	r2, [r1, #4]
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	4093      	lsls	r3, r2
 8017c00:	608b      	str	r3, [r1, #8]
 8017c02:	4620      	mov	r0, r4
 8017c04:	f001 f9a2 	bl	8018f4c <_Bfree>
 8017c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	601a      	str	r2, [r3, #0]
 8017c0e:	1e3b      	subs	r3, r7, #0
 8017c10:	bfaa      	itet	ge
 8017c12:	2300      	movge	r3, #0
 8017c14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017c18:	f8c8 3000 	strge.w	r3, [r8]
 8017c1c:	4b9a      	ldr	r3, [pc, #616]	; (8017e88 <_dtoa_r+0x2d8>)
 8017c1e:	bfbc      	itt	lt
 8017c20:	2201      	movlt	r2, #1
 8017c22:	f8c8 2000 	strlt.w	r2, [r8]
 8017c26:	ea33 030b 	bics.w	r3, r3, fp
 8017c2a:	d11b      	bne.n	8017c64 <_dtoa_r+0xb4>
 8017c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c32:	6013      	str	r3, [r2, #0]
 8017c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c38:	4333      	orrs	r3, r6
 8017c3a:	f000 8592 	beq.w	8018762 <_dtoa_r+0xbb2>
 8017c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c40:	b963      	cbnz	r3, 8017c5c <_dtoa_r+0xac>
 8017c42:	4b92      	ldr	r3, [pc, #584]	; (8017e8c <_dtoa_r+0x2dc>)
 8017c44:	e022      	b.n	8017c8c <_dtoa_r+0xdc>
 8017c46:	4b92      	ldr	r3, [pc, #584]	; (8017e90 <_dtoa_r+0x2e0>)
 8017c48:	9301      	str	r3, [sp, #4]
 8017c4a:	3308      	adds	r3, #8
 8017c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c4e:	6013      	str	r3, [r2, #0]
 8017c50:	9801      	ldr	r0, [sp, #4]
 8017c52:	b013      	add	sp, #76	; 0x4c
 8017c54:	ecbd 8b04 	vpop	{d8-d9}
 8017c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c5c:	4b8b      	ldr	r3, [pc, #556]	; (8017e8c <_dtoa_r+0x2dc>)
 8017c5e:	9301      	str	r3, [sp, #4]
 8017c60:	3303      	adds	r3, #3
 8017c62:	e7f3      	b.n	8017c4c <_dtoa_r+0x9c>
 8017c64:	2200      	movs	r2, #0
 8017c66:	2300      	movs	r3, #0
 8017c68:	4650      	mov	r0, sl
 8017c6a:	4659      	mov	r1, fp
 8017c6c:	f7e8 ff44 	bl	8000af8 <__aeabi_dcmpeq>
 8017c70:	ec4b ab19 	vmov	d9, sl, fp
 8017c74:	4680      	mov	r8, r0
 8017c76:	b158      	cbz	r0, 8017c90 <_dtoa_r+0xe0>
 8017c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	6013      	str	r3, [r2, #0]
 8017c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f000 856b 	beq.w	801875c <_dtoa_r+0xbac>
 8017c86:	4883      	ldr	r0, [pc, #524]	; (8017e94 <_dtoa_r+0x2e4>)
 8017c88:	6018      	str	r0, [r3, #0]
 8017c8a:	1e43      	subs	r3, r0, #1
 8017c8c:	9301      	str	r3, [sp, #4]
 8017c8e:	e7df      	b.n	8017c50 <_dtoa_r+0xa0>
 8017c90:	ec4b ab10 	vmov	d0, sl, fp
 8017c94:	aa10      	add	r2, sp, #64	; 0x40
 8017c96:	a911      	add	r1, sp, #68	; 0x44
 8017c98:	4620      	mov	r0, r4
 8017c9a:	f001 fd05 	bl	80196a8 <__d2b>
 8017c9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017ca2:	ee08 0a10 	vmov	s16, r0
 8017ca6:	2d00      	cmp	r5, #0
 8017ca8:	f000 8084 	beq.w	8017db4 <_dtoa_r+0x204>
 8017cac:	ee19 3a90 	vmov	r3, s19
 8017cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017cb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017cb8:	4656      	mov	r6, sl
 8017cba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017cc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8017cc6:	4b74      	ldr	r3, [pc, #464]	; (8017e98 <_dtoa_r+0x2e8>)
 8017cc8:	2200      	movs	r2, #0
 8017cca:	4630      	mov	r0, r6
 8017ccc:	4639      	mov	r1, r7
 8017cce:	f7e8 faf3 	bl	80002b8 <__aeabi_dsub>
 8017cd2:	a365      	add	r3, pc, #404	; (adr r3, 8017e68 <_dtoa_r+0x2b8>)
 8017cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd8:	f7e8 fca6 	bl	8000628 <__aeabi_dmul>
 8017cdc:	a364      	add	r3, pc, #400	; (adr r3, 8017e70 <_dtoa_r+0x2c0>)
 8017cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce2:	f7e8 faeb 	bl	80002bc <__adddf3>
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	4628      	mov	r0, r5
 8017cea:	460f      	mov	r7, r1
 8017cec:	f7e8 fc32 	bl	8000554 <__aeabi_i2d>
 8017cf0:	a361      	add	r3, pc, #388	; (adr r3, 8017e78 <_dtoa_r+0x2c8>)
 8017cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf6:	f7e8 fc97 	bl	8000628 <__aeabi_dmul>
 8017cfa:	4602      	mov	r2, r0
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	4630      	mov	r0, r6
 8017d00:	4639      	mov	r1, r7
 8017d02:	f7e8 fadb 	bl	80002bc <__adddf3>
 8017d06:	4606      	mov	r6, r0
 8017d08:	460f      	mov	r7, r1
 8017d0a:	f7e8 ff3d 	bl	8000b88 <__aeabi_d2iz>
 8017d0e:	2200      	movs	r2, #0
 8017d10:	9000      	str	r0, [sp, #0]
 8017d12:	2300      	movs	r3, #0
 8017d14:	4630      	mov	r0, r6
 8017d16:	4639      	mov	r1, r7
 8017d18:	f7e8 fef8 	bl	8000b0c <__aeabi_dcmplt>
 8017d1c:	b150      	cbz	r0, 8017d34 <_dtoa_r+0x184>
 8017d1e:	9800      	ldr	r0, [sp, #0]
 8017d20:	f7e8 fc18 	bl	8000554 <__aeabi_i2d>
 8017d24:	4632      	mov	r2, r6
 8017d26:	463b      	mov	r3, r7
 8017d28:	f7e8 fee6 	bl	8000af8 <__aeabi_dcmpeq>
 8017d2c:	b910      	cbnz	r0, 8017d34 <_dtoa_r+0x184>
 8017d2e:	9b00      	ldr	r3, [sp, #0]
 8017d30:	3b01      	subs	r3, #1
 8017d32:	9300      	str	r3, [sp, #0]
 8017d34:	9b00      	ldr	r3, [sp, #0]
 8017d36:	2b16      	cmp	r3, #22
 8017d38:	d85a      	bhi.n	8017df0 <_dtoa_r+0x240>
 8017d3a:	9a00      	ldr	r2, [sp, #0]
 8017d3c:	4b57      	ldr	r3, [pc, #348]	; (8017e9c <_dtoa_r+0x2ec>)
 8017d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d46:	ec51 0b19 	vmov	r0, r1, d9
 8017d4a:	f7e8 fedf 	bl	8000b0c <__aeabi_dcmplt>
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d050      	beq.n	8017df4 <_dtoa_r+0x244>
 8017d52:	9b00      	ldr	r3, [sp, #0]
 8017d54:	3b01      	subs	r3, #1
 8017d56:	9300      	str	r3, [sp, #0]
 8017d58:	2300      	movs	r3, #0
 8017d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d5e:	1b5d      	subs	r5, r3, r5
 8017d60:	1e6b      	subs	r3, r5, #1
 8017d62:	9305      	str	r3, [sp, #20]
 8017d64:	bf45      	ittet	mi
 8017d66:	f1c5 0301 	rsbmi	r3, r5, #1
 8017d6a:	9304      	strmi	r3, [sp, #16]
 8017d6c:	2300      	movpl	r3, #0
 8017d6e:	2300      	movmi	r3, #0
 8017d70:	bf4c      	ite	mi
 8017d72:	9305      	strmi	r3, [sp, #20]
 8017d74:	9304      	strpl	r3, [sp, #16]
 8017d76:	9b00      	ldr	r3, [sp, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	db3d      	blt.n	8017df8 <_dtoa_r+0x248>
 8017d7c:	9b05      	ldr	r3, [sp, #20]
 8017d7e:	9a00      	ldr	r2, [sp, #0]
 8017d80:	920a      	str	r2, [sp, #40]	; 0x28
 8017d82:	4413      	add	r3, r2
 8017d84:	9305      	str	r3, [sp, #20]
 8017d86:	2300      	movs	r3, #0
 8017d88:	9307      	str	r3, [sp, #28]
 8017d8a:	9b06      	ldr	r3, [sp, #24]
 8017d8c:	2b09      	cmp	r3, #9
 8017d8e:	f200 8089 	bhi.w	8017ea4 <_dtoa_r+0x2f4>
 8017d92:	2b05      	cmp	r3, #5
 8017d94:	bfc4      	itt	gt
 8017d96:	3b04      	subgt	r3, #4
 8017d98:	9306      	strgt	r3, [sp, #24]
 8017d9a:	9b06      	ldr	r3, [sp, #24]
 8017d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8017da0:	bfcc      	ite	gt
 8017da2:	2500      	movgt	r5, #0
 8017da4:	2501      	movle	r5, #1
 8017da6:	2b03      	cmp	r3, #3
 8017da8:	f200 8087 	bhi.w	8017eba <_dtoa_r+0x30a>
 8017dac:	e8df f003 	tbb	[pc, r3]
 8017db0:	59383a2d 	.word	0x59383a2d
 8017db4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017db8:	441d      	add	r5, r3
 8017dba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017dbe:	2b20      	cmp	r3, #32
 8017dc0:	bfc1      	itttt	gt
 8017dc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017dc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017dca:	fa0b f303 	lslgt.w	r3, fp, r3
 8017dce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017dd2:	bfda      	itte	le
 8017dd4:	f1c3 0320 	rsble	r3, r3, #32
 8017dd8:	fa06 f003 	lslle.w	r0, r6, r3
 8017ddc:	4318      	orrgt	r0, r3
 8017dde:	f7e8 fba9 	bl	8000534 <__aeabi_ui2d>
 8017de2:	2301      	movs	r3, #1
 8017de4:	4606      	mov	r6, r0
 8017de6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017dea:	3d01      	subs	r5, #1
 8017dec:	930e      	str	r3, [sp, #56]	; 0x38
 8017dee:	e76a      	b.n	8017cc6 <_dtoa_r+0x116>
 8017df0:	2301      	movs	r3, #1
 8017df2:	e7b2      	b.n	8017d5a <_dtoa_r+0x1aa>
 8017df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8017df6:	e7b1      	b.n	8017d5c <_dtoa_r+0x1ac>
 8017df8:	9b04      	ldr	r3, [sp, #16]
 8017dfa:	9a00      	ldr	r2, [sp, #0]
 8017dfc:	1a9b      	subs	r3, r3, r2
 8017dfe:	9304      	str	r3, [sp, #16]
 8017e00:	4253      	negs	r3, r2
 8017e02:	9307      	str	r3, [sp, #28]
 8017e04:	2300      	movs	r3, #0
 8017e06:	930a      	str	r3, [sp, #40]	; 0x28
 8017e08:	e7bf      	b.n	8017d8a <_dtoa_r+0x1da>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	9308      	str	r3, [sp, #32]
 8017e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	dc55      	bgt.n	8017ec0 <_dtoa_r+0x310>
 8017e14:	2301      	movs	r3, #1
 8017e16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8017e1e:	e00c      	b.n	8017e3a <_dtoa_r+0x28a>
 8017e20:	2301      	movs	r3, #1
 8017e22:	e7f3      	b.n	8017e0c <_dtoa_r+0x25c>
 8017e24:	2300      	movs	r3, #0
 8017e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e28:	9308      	str	r3, [sp, #32]
 8017e2a:	9b00      	ldr	r3, [sp, #0]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	9302      	str	r3, [sp, #8]
 8017e30:	3301      	adds	r3, #1
 8017e32:	2b01      	cmp	r3, #1
 8017e34:	9303      	str	r3, [sp, #12]
 8017e36:	bfb8      	it	lt
 8017e38:	2301      	movlt	r3, #1
 8017e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	6042      	str	r2, [r0, #4]
 8017e40:	2204      	movs	r2, #4
 8017e42:	f102 0614 	add.w	r6, r2, #20
 8017e46:	429e      	cmp	r6, r3
 8017e48:	6841      	ldr	r1, [r0, #4]
 8017e4a:	d93d      	bls.n	8017ec8 <_dtoa_r+0x318>
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f001 f83d 	bl	8018ecc <_Balloc>
 8017e52:	9001      	str	r0, [sp, #4]
 8017e54:	2800      	cmp	r0, #0
 8017e56:	d13b      	bne.n	8017ed0 <_dtoa_r+0x320>
 8017e58:	4b11      	ldr	r3, [pc, #68]	; (8017ea0 <_dtoa_r+0x2f0>)
 8017e5a:	4602      	mov	r2, r0
 8017e5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017e60:	e6c0      	b.n	8017be4 <_dtoa_r+0x34>
 8017e62:	2301      	movs	r3, #1
 8017e64:	e7df      	b.n	8017e26 <_dtoa_r+0x276>
 8017e66:	bf00      	nop
 8017e68:	636f4361 	.word	0x636f4361
 8017e6c:	3fd287a7 	.word	0x3fd287a7
 8017e70:	8b60c8b3 	.word	0x8b60c8b3
 8017e74:	3fc68a28 	.word	0x3fc68a28
 8017e78:	509f79fb 	.word	0x509f79fb
 8017e7c:	3fd34413 	.word	0x3fd34413
 8017e80:	0801bbce 	.word	0x0801bbce
 8017e84:	0801bbe5 	.word	0x0801bbe5
 8017e88:	7ff00000 	.word	0x7ff00000
 8017e8c:	0801bbca 	.word	0x0801bbca
 8017e90:	0801bbc1 	.word	0x0801bbc1
 8017e94:	0801be3a 	.word	0x0801be3a
 8017e98:	3ff80000 	.word	0x3ff80000
 8017e9c:	0801bd50 	.word	0x0801bd50
 8017ea0:	0801bc40 	.word	0x0801bc40
 8017ea4:	2501      	movs	r5, #1
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	9306      	str	r3, [sp, #24]
 8017eaa:	9508      	str	r5, [sp, #32]
 8017eac:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	2312      	movs	r3, #18
 8017eb8:	e7b0      	b.n	8017e1c <_dtoa_r+0x26c>
 8017eba:	2301      	movs	r3, #1
 8017ebc:	9308      	str	r3, [sp, #32]
 8017ebe:	e7f5      	b.n	8017eac <_dtoa_r+0x2fc>
 8017ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017ec6:	e7b8      	b.n	8017e3a <_dtoa_r+0x28a>
 8017ec8:	3101      	adds	r1, #1
 8017eca:	6041      	str	r1, [r0, #4]
 8017ecc:	0052      	lsls	r2, r2, #1
 8017ece:	e7b8      	b.n	8017e42 <_dtoa_r+0x292>
 8017ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ed2:	9a01      	ldr	r2, [sp, #4]
 8017ed4:	601a      	str	r2, [r3, #0]
 8017ed6:	9b03      	ldr	r3, [sp, #12]
 8017ed8:	2b0e      	cmp	r3, #14
 8017eda:	f200 809d 	bhi.w	8018018 <_dtoa_r+0x468>
 8017ede:	2d00      	cmp	r5, #0
 8017ee0:	f000 809a 	beq.w	8018018 <_dtoa_r+0x468>
 8017ee4:	9b00      	ldr	r3, [sp, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	dd32      	ble.n	8017f50 <_dtoa_r+0x3a0>
 8017eea:	4ab7      	ldr	r2, [pc, #732]	; (80181c8 <_dtoa_r+0x618>)
 8017eec:	f003 030f 	and.w	r3, r3, #15
 8017ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017ef8:	9b00      	ldr	r3, [sp, #0]
 8017efa:	05d8      	lsls	r0, r3, #23
 8017efc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017f00:	d516      	bpl.n	8017f30 <_dtoa_r+0x380>
 8017f02:	4bb2      	ldr	r3, [pc, #712]	; (80181cc <_dtoa_r+0x61c>)
 8017f04:	ec51 0b19 	vmov	r0, r1, d9
 8017f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f0c:	f7e8 fcb6 	bl	800087c <__aeabi_ddiv>
 8017f10:	f007 070f 	and.w	r7, r7, #15
 8017f14:	4682      	mov	sl, r0
 8017f16:	468b      	mov	fp, r1
 8017f18:	2503      	movs	r5, #3
 8017f1a:	4eac      	ldr	r6, [pc, #688]	; (80181cc <_dtoa_r+0x61c>)
 8017f1c:	b957      	cbnz	r7, 8017f34 <_dtoa_r+0x384>
 8017f1e:	4642      	mov	r2, r8
 8017f20:	464b      	mov	r3, r9
 8017f22:	4650      	mov	r0, sl
 8017f24:	4659      	mov	r1, fp
 8017f26:	f7e8 fca9 	bl	800087c <__aeabi_ddiv>
 8017f2a:	4682      	mov	sl, r0
 8017f2c:	468b      	mov	fp, r1
 8017f2e:	e028      	b.n	8017f82 <_dtoa_r+0x3d2>
 8017f30:	2502      	movs	r5, #2
 8017f32:	e7f2      	b.n	8017f1a <_dtoa_r+0x36a>
 8017f34:	07f9      	lsls	r1, r7, #31
 8017f36:	d508      	bpl.n	8017f4a <_dtoa_r+0x39a>
 8017f38:	4640      	mov	r0, r8
 8017f3a:	4649      	mov	r1, r9
 8017f3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017f40:	f7e8 fb72 	bl	8000628 <__aeabi_dmul>
 8017f44:	3501      	adds	r5, #1
 8017f46:	4680      	mov	r8, r0
 8017f48:	4689      	mov	r9, r1
 8017f4a:	107f      	asrs	r7, r7, #1
 8017f4c:	3608      	adds	r6, #8
 8017f4e:	e7e5      	b.n	8017f1c <_dtoa_r+0x36c>
 8017f50:	f000 809b 	beq.w	801808a <_dtoa_r+0x4da>
 8017f54:	9b00      	ldr	r3, [sp, #0]
 8017f56:	4f9d      	ldr	r7, [pc, #628]	; (80181cc <_dtoa_r+0x61c>)
 8017f58:	425e      	negs	r6, r3
 8017f5a:	4b9b      	ldr	r3, [pc, #620]	; (80181c8 <_dtoa_r+0x618>)
 8017f5c:	f006 020f 	and.w	r2, r6, #15
 8017f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f68:	ec51 0b19 	vmov	r0, r1, d9
 8017f6c:	f7e8 fb5c 	bl	8000628 <__aeabi_dmul>
 8017f70:	1136      	asrs	r6, r6, #4
 8017f72:	4682      	mov	sl, r0
 8017f74:	468b      	mov	fp, r1
 8017f76:	2300      	movs	r3, #0
 8017f78:	2502      	movs	r5, #2
 8017f7a:	2e00      	cmp	r6, #0
 8017f7c:	d17a      	bne.n	8018074 <_dtoa_r+0x4c4>
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d1d3      	bne.n	8017f2a <_dtoa_r+0x37a>
 8017f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	f000 8082 	beq.w	801808e <_dtoa_r+0x4de>
 8017f8a:	4b91      	ldr	r3, [pc, #580]	; (80181d0 <_dtoa_r+0x620>)
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	4650      	mov	r0, sl
 8017f90:	4659      	mov	r1, fp
 8017f92:	f7e8 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	d079      	beq.n	801808e <_dtoa_r+0x4de>
 8017f9a:	9b03      	ldr	r3, [sp, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d076      	beq.n	801808e <_dtoa_r+0x4de>
 8017fa0:	9b02      	ldr	r3, [sp, #8]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	dd36      	ble.n	8018014 <_dtoa_r+0x464>
 8017fa6:	9b00      	ldr	r3, [sp, #0]
 8017fa8:	4650      	mov	r0, sl
 8017faa:	4659      	mov	r1, fp
 8017fac:	1e5f      	subs	r7, r3, #1
 8017fae:	2200      	movs	r2, #0
 8017fb0:	4b88      	ldr	r3, [pc, #544]	; (80181d4 <_dtoa_r+0x624>)
 8017fb2:	f7e8 fb39 	bl	8000628 <__aeabi_dmul>
 8017fb6:	9e02      	ldr	r6, [sp, #8]
 8017fb8:	4682      	mov	sl, r0
 8017fba:	468b      	mov	fp, r1
 8017fbc:	3501      	adds	r5, #1
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	f7e8 fac8 	bl	8000554 <__aeabi_i2d>
 8017fc4:	4652      	mov	r2, sl
 8017fc6:	465b      	mov	r3, fp
 8017fc8:	f7e8 fb2e 	bl	8000628 <__aeabi_dmul>
 8017fcc:	4b82      	ldr	r3, [pc, #520]	; (80181d8 <_dtoa_r+0x628>)
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f7e8 f974 	bl	80002bc <__adddf3>
 8017fd4:	46d0      	mov	r8, sl
 8017fd6:	46d9      	mov	r9, fp
 8017fd8:	4682      	mov	sl, r0
 8017fda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017fde:	2e00      	cmp	r6, #0
 8017fe0:	d158      	bne.n	8018094 <_dtoa_r+0x4e4>
 8017fe2:	4b7e      	ldr	r3, [pc, #504]	; (80181dc <_dtoa_r+0x62c>)
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	4640      	mov	r0, r8
 8017fe8:	4649      	mov	r1, r9
 8017fea:	f7e8 f965 	bl	80002b8 <__aeabi_dsub>
 8017fee:	4652      	mov	r2, sl
 8017ff0:	465b      	mov	r3, fp
 8017ff2:	4680      	mov	r8, r0
 8017ff4:	4689      	mov	r9, r1
 8017ff6:	f7e8 fda7 	bl	8000b48 <__aeabi_dcmpgt>
 8017ffa:	2800      	cmp	r0, #0
 8017ffc:	f040 8295 	bne.w	801852a <_dtoa_r+0x97a>
 8018000:	4652      	mov	r2, sl
 8018002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018006:	4640      	mov	r0, r8
 8018008:	4649      	mov	r1, r9
 801800a:	f7e8 fd7f 	bl	8000b0c <__aeabi_dcmplt>
 801800e:	2800      	cmp	r0, #0
 8018010:	f040 8289 	bne.w	8018526 <_dtoa_r+0x976>
 8018014:	ec5b ab19 	vmov	sl, fp, d9
 8018018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801801a:	2b00      	cmp	r3, #0
 801801c:	f2c0 8148 	blt.w	80182b0 <_dtoa_r+0x700>
 8018020:	9a00      	ldr	r2, [sp, #0]
 8018022:	2a0e      	cmp	r2, #14
 8018024:	f300 8144 	bgt.w	80182b0 <_dtoa_r+0x700>
 8018028:	4b67      	ldr	r3, [pc, #412]	; (80181c8 <_dtoa_r+0x618>)
 801802a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801802e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018034:	2b00      	cmp	r3, #0
 8018036:	f280 80d5 	bge.w	80181e4 <_dtoa_r+0x634>
 801803a:	9b03      	ldr	r3, [sp, #12]
 801803c:	2b00      	cmp	r3, #0
 801803e:	f300 80d1 	bgt.w	80181e4 <_dtoa_r+0x634>
 8018042:	f040 826f 	bne.w	8018524 <_dtoa_r+0x974>
 8018046:	4b65      	ldr	r3, [pc, #404]	; (80181dc <_dtoa_r+0x62c>)
 8018048:	2200      	movs	r2, #0
 801804a:	4640      	mov	r0, r8
 801804c:	4649      	mov	r1, r9
 801804e:	f7e8 faeb 	bl	8000628 <__aeabi_dmul>
 8018052:	4652      	mov	r2, sl
 8018054:	465b      	mov	r3, fp
 8018056:	f7e8 fd6d 	bl	8000b34 <__aeabi_dcmpge>
 801805a:	9e03      	ldr	r6, [sp, #12]
 801805c:	4637      	mov	r7, r6
 801805e:	2800      	cmp	r0, #0
 8018060:	f040 8245 	bne.w	80184ee <_dtoa_r+0x93e>
 8018064:	9d01      	ldr	r5, [sp, #4]
 8018066:	2331      	movs	r3, #49	; 0x31
 8018068:	f805 3b01 	strb.w	r3, [r5], #1
 801806c:	9b00      	ldr	r3, [sp, #0]
 801806e:	3301      	adds	r3, #1
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	e240      	b.n	80184f6 <_dtoa_r+0x946>
 8018074:	07f2      	lsls	r2, r6, #31
 8018076:	d505      	bpl.n	8018084 <_dtoa_r+0x4d4>
 8018078:	e9d7 2300 	ldrd	r2, r3, [r7]
 801807c:	f7e8 fad4 	bl	8000628 <__aeabi_dmul>
 8018080:	3501      	adds	r5, #1
 8018082:	2301      	movs	r3, #1
 8018084:	1076      	asrs	r6, r6, #1
 8018086:	3708      	adds	r7, #8
 8018088:	e777      	b.n	8017f7a <_dtoa_r+0x3ca>
 801808a:	2502      	movs	r5, #2
 801808c:	e779      	b.n	8017f82 <_dtoa_r+0x3d2>
 801808e:	9f00      	ldr	r7, [sp, #0]
 8018090:	9e03      	ldr	r6, [sp, #12]
 8018092:	e794      	b.n	8017fbe <_dtoa_r+0x40e>
 8018094:	9901      	ldr	r1, [sp, #4]
 8018096:	4b4c      	ldr	r3, [pc, #304]	; (80181c8 <_dtoa_r+0x618>)
 8018098:	4431      	add	r1, r6
 801809a:	910d      	str	r1, [sp, #52]	; 0x34
 801809c:	9908      	ldr	r1, [sp, #32]
 801809e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80180a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80180a6:	2900      	cmp	r1, #0
 80180a8:	d043      	beq.n	8018132 <_dtoa_r+0x582>
 80180aa:	494d      	ldr	r1, [pc, #308]	; (80181e0 <_dtoa_r+0x630>)
 80180ac:	2000      	movs	r0, #0
 80180ae:	f7e8 fbe5 	bl	800087c <__aeabi_ddiv>
 80180b2:	4652      	mov	r2, sl
 80180b4:	465b      	mov	r3, fp
 80180b6:	f7e8 f8ff 	bl	80002b8 <__aeabi_dsub>
 80180ba:	9d01      	ldr	r5, [sp, #4]
 80180bc:	4682      	mov	sl, r0
 80180be:	468b      	mov	fp, r1
 80180c0:	4649      	mov	r1, r9
 80180c2:	4640      	mov	r0, r8
 80180c4:	f7e8 fd60 	bl	8000b88 <__aeabi_d2iz>
 80180c8:	4606      	mov	r6, r0
 80180ca:	f7e8 fa43 	bl	8000554 <__aeabi_i2d>
 80180ce:	4602      	mov	r2, r0
 80180d0:	460b      	mov	r3, r1
 80180d2:	4640      	mov	r0, r8
 80180d4:	4649      	mov	r1, r9
 80180d6:	f7e8 f8ef 	bl	80002b8 <__aeabi_dsub>
 80180da:	3630      	adds	r6, #48	; 0x30
 80180dc:	f805 6b01 	strb.w	r6, [r5], #1
 80180e0:	4652      	mov	r2, sl
 80180e2:	465b      	mov	r3, fp
 80180e4:	4680      	mov	r8, r0
 80180e6:	4689      	mov	r9, r1
 80180e8:	f7e8 fd10 	bl	8000b0c <__aeabi_dcmplt>
 80180ec:	2800      	cmp	r0, #0
 80180ee:	d163      	bne.n	80181b8 <_dtoa_r+0x608>
 80180f0:	4642      	mov	r2, r8
 80180f2:	464b      	mov	r3, r9
 80180f4:	4936      	ldr	r1, [pc, #216]	; (80181d0 <_dtoa_r+0x620>)
 80180f6:	2000      	movs	r0, #0
 80180f8:	f7e8 f8de 	bl	80002b8 <__aeabi_dsub>
 80180fc:	4652      	mov	r2, sl
 80180fe:	465b      	mov	r3, fp
 8018100:	f7e8 fd04 	bl	8000b0c <__aeabi_dcmplt>
 8018104:	2800      	cmp	r0, #0
 8018106:	f040 80b5 	bne.w	8018274 <_dtoa_r+0x6c4>
 801810a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801810c:	429d      	cmp	r5, r3
 801810e:	d081      	beq.n	8018014 <_dtoa_r+0x464>
 8018110:	4b30      	ldr	r3, [pc, #192]	; (80181d4 <_dtoa_r+0x624>)
 8018112:	2200      	movs	r2, #0
 8018114:	4650      	mov	r0, sl
 8018116:	4659      	mov	r1, fp
 8018118:	f7e8 fa86 	bl	8000628 <__aeabi_dmul>
 801811c:	4b2d      	ldr	r3, [pc, #180]	; (80181d4 <_dtoa_r+0x624>)
 801811e:	4682      	mov	sl, r0
 8018120:	468b      	mov	fp, r1
 8018122:	4640      	mov	r0, r8
 8018124:	4649      	mov	r1, r9
 8018126:	2200      	movs	r2, #0
 8018128:	f7e8 fa7e 	bl	8000628 <__aeabi_dmul>
 801812c:	4680      	mov	r8, r0
 801812e:	4689      	mov	r9, r1
 8018130:	e7c6      	b.n	80180c0 <_dtoa_r+0x510>
 8018132:	4650      	mov	r0, sl
 8018134:	4659      	mov	r1, fp
 8018136:	f7e8 fa77 	bl	8000628 <__aeabi_dmul>
 801813a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801813c:	9d01      	ldr	r5, [sp, #4]
 801813e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018140:	4682      	mov	sl, r0
 8018142:	468b      	mov	fp, r1
 8018144:	4649      	mov	r1, r9
 8018146:	4640      	mov	r0, r8
 8018148:	f7e8 fd1e 	bl	8000b88 <__aeabi_d2iz>
 801814c:	4606      	mov	r6, r0
 801814e:	f7e8 fa01 	bl	8000554 <__aeabi_i2d>
 8018152:	3630      	adds	r6, #48	; 0x30
 8018154:	4602      	mov	r2, r0
 8018156:	460b      	mov	r3, r1
 8018158:	4640      	mov	r0, r8
 801815a:	4649      	mov	r1, r9
 801815c:	f7e8 f8ac 	bl	80002b8 <__aeabi_dsub>
 8018160:	f805 6b01 	strb.w	r6, [r5], #1
 8018164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018166:	429d      	cmp	r5, r3
 8018168:	4680      	mov	r8, r0
 801816a:	4689      	mov	r9, r1
 801816c:	f04f 0200 	mov.w	r2, #0
 8018170:	d124      	bne.n	80181bc <_dtoa_r+0x60c>
 8018172:	4b1b      	ldr	r3, [pc, #108]	; (80181e0 <_dtoa_r+0x630>)
 8018174:	4650      	mov	r0, sl
 8018176:	4659      	mov	r1, fp
 8018178:	f7e8 f8a0 	bl	80002bc <__adddf3>
 801817c:	4602      	mov	r2, r0
 801817e:	460b      	mov	r3, r1
 8018180:	4640      	mov	r0, r8
 8018182:	4649      	mov	r1, r9
 8018184:	f7e8 fce0 	bl	8000b48 <__aeabi_dcmpgt>
 8018188:	2800      	cmp	r0, #0
 801818a:	d173      	bne.n	8018274 <_dtoa_r+0x6c4>
 801818c:	4652      	mov	r2, sl
 801818e:	465b      	mov	r3, fp
 8018190:	4913      	ldr	r1, [pc, #76]	; (80181e0 <_dtoa_r+0x630>)
 8018192:	2000      	movs	r0, #0
 8018194:	f7e8 f890 	bl	80002b8 <__aeabi_dsub>
 8018198:	4602      	mov	r2, r0
 801819a:	460b      	mov	r3, r1
 801819c:	4640      	mov	r0, r8
 801819e:	4649      	mov	r1, r9
 80181a0:	f7e8 fcb4 	bl	8000b0c <__aeabi_dcmplt>
 80181a4:	2800      	cmp	r0, #0
 80181a6:	f43f af35 	beq.w	8018014 <_dtoa_r+0x464>
 80181aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80181ac:	1e6b      	subs	r3, r5, #1
 80181ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80181b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80181b4:	2b30      	cmp	r3, #48	; 0x30
 80181b6:	d0f8      	beq.n	80181aa <_dtoa_r+0x5fa>
 80181b8:	9700      	str	r7, [sp, #0]
 80181ba:	e049      	b.n	8018250 <_dtoa_r+0x6a0>
 80181bc:	4b05      	ldr	r3, [pc, #20]	; (80181d4 <_dtoa_r+0x624>)
 80181be:	f7e8 fa33 	bl	8000628 <__aeabi_dmul>
 80181c2:	4680      	mov	r8, r0
 80181c4:	4689      	mov	r9, r1
 80181c6:	e7bd      	b.n	8018144 <_dtoa_r+0x594>
 80181c8:	0801bd50 	.word	0x0801bd50
 80181cc:	0801bd28 	.word	0x0801bd28
 80181d0:	3ff00000 	.word	0x3ff00000
 80181d4:	40240000 	.word	0x40240000
 80181d8:	401c0000 	.word	0x401c0000
 80181dc:	40140000 	.word	0x40140000
 80181e0:	3fe00000 	.word	0x3fe00000
 80181e4:	9d01      	ldr	r5, [sp, #4]
 80181e6:	4656      	mov	r6, sl
 80181e8:	465f      	mov	r7, fp
 80181ea:	4642      	mov	r2, r8
 80181ec:	464b      	mov	r3, r9
 80181ee:	4630      	mov	r0, r6
 80181f0:	4639      	mov	r1, r7
 80181f2:	f7e8 fb43 	bl	800087c <__aeabi_ddiv>
 80181f6:	f7e8 fcc7 	bl	8000b88 <__aeabi_d2iz>
 80181fa:	4682      	mov	sl, r0
 80181fc:	f7e8 f9aa 	bl	8000554 <__aeabi_i2d>
 8018200:	4642      	mov	r2, r8
 8018202:	464b      	mov	r3, r9
 8018204:	f7e8 fa10 	bl	8000628 <__aeabi_dmul>
 8018208:	4602      	mov	r2, r0
 801820a:	460b      	mov	r3, r1
 801820c:	4630      	mov	r0, r6
 801820e:	4639      	mov	r1, r7
 8018210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8018214:	f7e8 f850 	bl	80002b8 <__aeabi_dsub>
 8018218:	f805 6b01 	strb.w	r6, [r5], #1
 801821c:	9e01      	ldr	r6, [sp, #4]
 801821e:	9f03      	ldr	r7, [sp, #12]
 8018220:	1bae      	subs	r6, r5, r6
 8018222:	42b7      	cmp	r7, r6
 8018224:	4602      	mov	r2, r0
 8018226:	460b      	mov	r3, r1
 8018228:	d135      	bne.n	8018296 <_dtoa_r+0x6e6>
 801822a:	f7e8 f847 	bl	80002bc <__adddf3>
 801822e:	4642      	mov	r2, r8
 8018230:	464b      	mov	r3, r9
 8018232:	4606      	mov	r6, r0
 8018234:	460f      	mov	r7, r1
 8018236:	f7e8 fc87 	bl	8000b48 <__aeabi_dcmpgt>
 801823a:	b9d0      	cbnz	r0, 8018272 <_dtoa_r+0x6c2>
 801823c:	4642      	mov	r2, r8
 801823e:	464b      	mov	r3, r9
 8018240:	4630      	mov	r0, r6
 8018242:	4639      	mov	r1, r7
 8018244:	f7e8 fc58 	bl	8000af8 <__aeabi_dcmpeq>
 8018248:	b110      	cbz	r0, 8018250 <_dtoa_r+0x6a0>
 801824a:	f01a 0f01 	tst.w	sl, #1
 801824e:	d110      	bne.n	8018272 <_dtoa_r+0x6c2>
 8018250:	4620      	mov	r0, r4
 8018252:	ee18 1a10 	vmov	r1, s16
 8018256:	f000 fe79 	bl	8018f4c <_Bfree>
 801825a:	2300      	movs	r3, #0
 801825c:	9800      	ldr	r0, [sp, #0]
 801825e:	702b      	strb	r3, [r5, #0]
 8018260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018262:	3001      	adds	r0, #1
 8018264:	6018      	str	r0, [r3, #0]
 8018266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018268:	2b00      	cmp	r3, #0
 801826a:	f43f acf1 	beq.w	8017c50 <_dtoa_r+0xa0>
 801826e:	601d      	str	r5, [r3, #0]
 8018270:	e4ee      	b.n	8017c50 <_dtoa_r+0xa0>
 8018272:	9f00      	ldr	r7, [sp, #0]
 8018274:	462b      	mov	r3, r5
 8018276:	461d      	mov	r5, r3
 8018278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801827c:	2a39      	cmp	r2, #57	; 0x39
 801827e:	d106      	bne.n	801828e <_dtoa_r+0x6de>
 8018280:	9a01      	ldr	r2, [sp, #4]
 8018282:	429a      	cmp	r2, r3
 8018284:	d1f7      	bne.n	8018276 <_dtoa_r+0x6c6>
 8018286:	9901      	ldr	r1, [sp, #4]
 8018288:	2230      	movs	r2, #48	; 0x30
 801828a:	3701      	adds	r7, #1
 801828c:	700a      	strb	r2, [r1, #0]
 801828e:	781a      	ldrb	r2, [r3, #0]
 8018290:	3201      	adds	r2, #1
 8018292:	701a      	strb	r2, [r3, #0]
 8018294:	e790      	b.n	80181b8 <_dtoa_r+0x608>
 8018296:	4ba6      	ldr	r3, [pc, #664]	; (8018530 <_dtoa_r+0x980>)
 8018298:	2200      	movs	r2, #0
 801829a:	f7e8 f9c5 	bl	8000628 <__aeabi_dmul>
 801829e:	2200      	movs	r2, #0
 80182a0:	2300      	movs	r3, #0
 80182a2:	4606      	mov	r6, r0
 80182a4:	460f      	mov	r7, r1
 80182a6:	f7e8 fc27 	bl	8000af8 <__aeabi_dcmpeq>
 80182aa:	2800      	cmp	r0, #0
 80182ac:	d09d      	beq.n	80181ea <_dtoa_r+0x63a>
 80182ae:	e7cf      	b.n	8018250 <_dtoa_r+0x6a0>
 80182b0:	9a08      	ldr	r2, [sp, #32]
 80182b2:	2a00      	cmp	r2, #0
 80182b4:	f000 80d7 	beq.w	8018466 <_dtoa_r+0x8b6>
 80182b8:	9a06      	ldr	r2, [sp, #24]
 80182ba:	2a01      	cmp	r2, #1
 80182bc:	f300 80ba 	bgt.w	8018434 <_dtoa_r+0x884>
 80182c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80182c2:	2a00      	cmp	r2, #0
 80182c4:	f000 80b2 	beq.w	801842c <_dtoa_r+0x87c>
 80182c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80182cc:	9e07      	ldr	r6, [sp, #28]
 80182ce:	9d04      	ldr	r5, [sp, #16]
 80182d0:	9a04      	ldr	r2, [sp, #16]
 80182d2:	441a      	add	r2, r3
 80182d4:	9204      	str	r2, [sp, #16]
 80182d6:	9a05      	ldr	r2, [sp, #20]
 80182d8:	2101      	movs	r1, #1
 80182da:	441a      	add	r2, r3
 80182dc:	4620      	mov	r0, r4
 80182de:	9205      	str	r2, [sp, #20]
 80182e0:	f000 ff36 	bl	8019150 <__i2b>
 80182e4:	4607      	mov	r7, r0
 80182e6:	2d00      	cmp	r5, #0
 80182e8:	dd0c      	ble.n	8018304 <_dtoa_r+0x754>
 80182ea:	9b05      	ldr	r3, [sp, #20]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	dd09      	ble.n	8018304 <_dtoa_r+0x754>
 80182f0:	42ab      	cmp	r3, r5
 80182f2:	9a04      	ldr	r2, [sp, #16]
 80182f4:	bfa8      	it	ge
 80182f6:	462b      	movge	r3, r5
 80182f8:	1ad2      	subs	r2, r2, r3
 80182fa:	9204      	str	r2, [sp, #16]
 80182fc:	9a05      	ldr	r2, [sp, #20]
 80182fe:	1aed      	subs	r5, r5, r3
 8018300:	1ad3      	subs	r3, r2, r3
 8018302:	9305      	str	r3, [sp, #20]
 8018304:	9b07      	ldr	r3, [sp, #28]
 8018306:	b31b      	cbz	r3, 8018350 <_dtoa_r+0x7a0>
 8018308:	9b08      	ldr	r3, [sp, #32]
 801830a:	2b00      	cmp	r3, #0
 801830c:	f000 80af 	beq.w	801846e <_dtoa_r+0x8be>
 8018310:	2e00      	cmp	r6, #0
 8018312:	dd13      	ble.n	801833c <_dtoa_r+0x78c>
 8018314:	4639      	mov	r1, r7
 8018316:	4632      	mov	r2, r6
 8018318:	4620      	mov	r0, r4
 801831a:	f000 ffd9 	bl	80192d0 <__pow5mult>
 801831e:	ee18 2a10 	vmov	r2, s16
 8018322:	4601      	mov	r1, r0
 8018324:	4607      	mov	r7, r0
 8018326:	4620      	mov	r0, r4
 8018328:	f000 ff28 	bl	801917c <__multiply>
 801832c:	ee18 1a10 	vmov	r1, s16
 8018330:	4680      	mov	r8, r0
 8018332:	4620      	mov	r0, r4
 8018334:	f000 fe0a 	bl	8018f4c <_Bfree>
 8018338:	ee08 8a10 	vmov	s16, r8
 801833c:	9b07      	ldr	r3, [sp, #28]
 801833e:	1b9a      	subs	r2, r3, r6
 8018340:	d006      	beq.n	8018350 <_dtoa_r+0x7a0>
 8018342:	ee18 1a10 	vmov	r1, s16
 8018346:	4620      	mov	r0, r4
 8018348:	f000 ffc2 	bl	80192d0 <__pow5mult>
 801834c:	ee08 0a10 	vmov	s16, r0
 8018350:	2101      	movs	r1, #1
 8018352:	4620      	mov	r0, r4
 8018354:	f000 fefc 	bl	8019150 <__i2b>
 8018358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801835a:	2b00      	cmp	r3, #0
 801835c:	4606      	mov	r6, r0
 801835e:	f340 8088 	ble.w	8018472 <_dtoa_r+0x8c2>
 8018362:	461a      	mov	r2, r3
 8018364:	4601      	mov	r1, r0
 8018366:	4620      	mov	r0, r4
 8018368:	f000 ffb2 	bl	80192d0 <__pow5mult>
 801836c:	9b06      	ldr	r3, [sp, #24]
 801836e:	2b01      	cmp	r3, #1
 8018370:	4606      	mov	r6, r0
 8018372:	f340 8081 	ble.w	8018478 <_dtoa_r+0x8c8>
 8018376:	f04f 0800 	mov.w	r8, #0
 801837a:	6933      	ldr	r3, [r6, #16]
 801837c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018380:	6918      	ldr	r0, [r3, #16]
 8018382:	f000 fe95 	bl	80190b0 <__hi0bits>
 8018386:	f1c0 0020 	rsb	r0, r0, #32
 801838a:	9b05      	ldr	r3, [sp, #20]
 801838c:	4418      	add	r0, r3
 801838e:	f010 001f 	ands.w	r0, r0, #31
 8018392:	f000 8092 	beq.w	80184ba <_dtoa_r+0x90a>
 8018396:	f1c0 0320 	rsb	r3, r0, #32
 801839a:	2b04      	cmp	r3, #4
 801839c:	f340 808a 	ble.w	80184b4 <_dtoa_r+0x904>
 80183a0:	f1c0 001c 	rsb	r0, r0, #28
 80183a4:	9b04      	ldr	r3, [sp, #16]
 80183a6:	4403      	add	r3, r0
 80183a8:	9304      	str	r3, [sp, #16]
 80183aa:	9b05      	ldr	r3, [sp, #20]
 80183ac:	4403      	add	r3, r0
 80183ae:	4405      	add	r5, r0
 80183b0:	9305      	str	r3, [sp, #20]
 80183b2:	9b04      	ldr	r3, [sp, #16]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	dd07      	ble.n	80183c8 <_dtoa_r+0x818>
 80183b8:	ee18 1a10 	vmov	r1, s16
 80183bc:	461a      	mov	r2, r3
 80183be:	4620      	mov	r0, r4
 80183c0:	f000 ffe0 	bl	8019384 <__lshift>
 80183c4:	ee08 0a10 	vmov	s16, r0
 80183c8:	9b05      	ldr	r3, [sp, #20]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	dd05      	ble.n	80183da <_dtoa_r+0x82a>
 80183ce:	4631      	mov	r1, r6
 80183d0:	461a      	mov	r2, r3
 80183d2:	4620      	mov	r0, r4
 80183d4:	f000 ffd6 	bl	8019384 <__lshift>
 80183d8:	4606      	mov	r6, r0
 80183da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d06e      	beq.n	80184be <_dtoa_r+0x90e>
 80183e0:	ee18 0a10 	vmov	r0, s16
 80183e4:	4631      	mov	r1, r6
 80183e6:	f001 f83d 	bl	8019464 <__mcmp>
 80183ea:	2800      	cmp	r0, #0
 80183ec:	da67      	bge.n	80184be <_dtoa_r+0x90e>
 80183ee:	9b00      	ldr	r3, [sp, #0]
 80183f0:	3b01      	subs	r3, #1
 80183f2:	ee18 1a10 	vmov	r1, s16
 80183f6:	9300      	str	r3, [sp, #0]
 80183f8:	220a      	movs	r2, #10
 80183fa:	2300      	movs	r3, #0
 80183fc:	4620      	mov	r0, r4
 80183fe:	f000 fdc7 	bl	8018f90 <__multadd>
 8018402:	9b08      	ldr	r3, [sp, #32]
 8018404:	ee08 0a10 	vmov	s16, r0
 8018408:	2b00      	cmp	r3, #0
 801840a:	f000 81b1 	beq.w	8018770 <_dtoa_r+0xbc0>
 801840e:	2300      	movs	r3, #0
 8018410:	4639      	mov	r1, r7
 8018412:	220a      	movs	r2, #10
 8018414:	4620      	mov	r0, r4
 8018416:	f000 fdbb 	bl	8018f90 <__multadd>
 801841a:	9b02      	ldr	r3, [sp, #8]
 801841c:	2b00      	cmp	r3, #0
 801841e:	4607      	mov	r7, r0
 8018420:	f300 808e 	bgt.w	8018540 <_dtoa_r+0x990>
 8018424:	9b06      	ldr	r3, [sp, #24]
 8018426:	2b02      	cmp	r3, #2
 8018428:	dc51      	bgt.n	80184ce <_dtoa_r+0x91e>
 801842a:	e089      	b.n	8018540 <_dtoa_r+0x990>
 801842c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801842e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018432:	e74b      	b.n	80182cc <_dtoa_r+0x71c>
 8018434:	9b03      	ldr	r3, [sp, #12]
 8018436:	1e5e      	subs	r6, r3, #1
 8018438:	9b07      	ldr	r3, [sp, #28]
 801843a:	42b3      	cmp	r3, r6
 801843c:	bfbf      	itttt	lt
 801843e:	9b07      	ldrlt	r3, [sp, #28]
 8018440:	9607      	strlt	r6, [sp, #28]
 8018442:	1af2      	sublt	r2, r6, r3
 8018444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018446:	bfb6      	itet	lt
 8018448:	189b      	addlt	r3, r3, r2
 801844a:	1b9e      	subge	r6, r3, r6
 801844c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801844e:	9b03      	ldr	r3, [sp, #12]
 8018450:	bfb8      	it	lt
 8018452:	2600      	movlt	r6, #0
 8018454:	2b00      	cmp	r3, #0
 8018456:	bfb7      	itett	lt
 8018458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801845c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018460:	1a9d      	sublt	r5, r3, r2
 8018462:	2300      	movlt	r3, #0
 8018464:	e734      	b.n	80182d0 <_dtoa_r+0x720>
 8018466:	9e07      	ldr	r6, [sp, #28]
 8018468:	9d04      	ldr	r5, [sp, #16]
 801846a:	9f08      	ldr	r7, [sp, #32]
 801846c:	e73b      	b.n	80182e6 <_dtoa_r+0x736>
 801846e:	9a07      	ldr	r2, [sp, #28]
 8018470:	e767      	b.n	8018342 <_dtoa_r+0x792>
 8018472:	9b06      	ldr	r3, [sp, #24]
 8018474:	2b01      	cmp	r3, #1
 8018476:	dc18      	bgt.n	80184aa <_dtoa_r+0x8fa>
 8018478:	f1ba 0f00 	cmp.w	sl, #0
 801847c:	d115      	bne.n	80184aa <_dtoa_r+0x8fa>
 801847e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018482:	b993      	cbnz	r3, 80184aa <_dtoa_r+0x8fa>
 8018484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018488:	0d1b      	lsrs	r3, r3, #20
 801848a:	051b      	lsls	r3, r3, #20
 801848c:	b183      	cbz	r3, 80184b0 <_dtoa_r+0x900>
 801848e:	9b04      	ldr	r3, [sp, #16]
 8018490:	3301      	adds	r3, #1
 8018492:	9304      	str	r3, [sp, #16]
 8018494:	9b05      	ldr	r3, [sp, #20]
 8018496:	3301      	adds	r3, #1
 8018498:	9305      	str	r3, [sp, #20]
 801849a:	f04f 0801 	mov.w	r8, #1
 801849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	f47f af6a 	bne.w	801837a <_dtoa_r+0x7ca>
 80184a6:	2001      	movs	r0, #1
 80184a8:	e76f      	b.n	801838a <_dtoa_r+0x7da>
 80184aa:	f04f 0800 	mov.w	r8, #0
 80184ae:	e7f6      	b.n	801849e <_dtoa_r+0x8ee>
 80184b0:	4698      	mov	r8, r3
 80184b2:	e7f4      	b.n	801849e <_dtoa_r+0x8ee>
 80184b4:	f43f af7d 	beq.w	80183b2 <_dtoa_r+0x802>
 80184b8:	4618      	mov	r0, r3
 80184ba:	301c      	adds	r0, #28
 80184bc:	e772      	b.n	80183a4 <_dtoa_r+0x7f4>
 80184be:	9b03      	ldr	r3, [sp, #12]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	dc37      	bgt.n	8018534 <_dtoa_r+0x984>
 80184c4:	9b06      	ldr	r3, [sp, #24]
 80184c6:	2b02      	cmp	r3, #2
 80184c8:	dd34      	ble.n	8018534 <_dtoa_r+0x984>
 80184ca:	9b03      	ldr	r3, [sp, #12]
 80184cc:	9302      	str	r3, [sp, #8]
 80184ce:	9b02      	ldr	r3, [sp, #8]
 80184d0:	b96b      	cbnz	r3, 80184ee <_dtoa_r+0x93e>
 80184d2:	4631      	mov	r1, r6
 80184d4:	2205      	movs	r2, #5
 80184d6:	4620      	mov	r0, r4
 80184d8:	f000 fd5a 	bl	8018f90 <__multadd>
 80184dc:	4601      	mov	r1, r0
 80184de:	4606      	mov	r6, r0
 80184e0:	ee18 0a10 	vmov	r0, s16
 80184e4:	f000 ffbe 	bl	8019464 <__mcmp>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	f73f adbb 	bgt.w	8018064 <_dtoa_r+0x4b4>
 80184ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184f0:	9d01      	ldr	r5, [sp, #4]
 80184f2:	43db      	mvns	r3, r3
 80184f4:	9300      	str	r3, [sp, #0]
 80184f6:	f04f 0800 	mov.w	r8, #0
 80184fa:	4631      	mov	r1, r6
 80184fc:	4620      	mov	r0, r4
 80184fe:	f000 fd25 	bl	8018f4c <_Bfree>
 8018502:	2f00      	cmp	r7, #0
 8018504:	f43f aea4 	beq.w	8018250 <_dtoa_r+0x6a0>
 8018508:	f1b8 0f00 	cmp.w	r8, #0
 801850c:	d005      	beq.n	801851a <_dtoa_r+0x96a>
 801850e:	45b8      	cmp	r8, r7
 8018510:	d003      	beq.n	801851a <_dtoa_r+0x96a>
 8018512:	4641      	mov	r1, r8
 8018514:	4620      	mov	r0, r4
 8018516:	f000 fd19 	bl	8018f4c <_Bfree>
 801851a:	4639      	mov	r1, r7
 801851c:	4620      	mov	r0, r4
 801851e:	f000 fd15 	bl	8018f4c <_Bfree>
 8018522:	e695      	b.n	8018250 <_dtoa_r+0x6a0>
 8018524:	2600      	movs	r6, #0
 8018526:	4637      	mov	r7, r6
 8018528:	e7e1      	b.n	80184ee <_dtoa_r+0x93e>
 801852a:	9700      	str	r7, [sp, #0]
 801852c:	4637      	mov	r7, r6
 801852e:	e599      	b.n	8018064 <_dtoa_r+0x4b4>
 8018530:	40240000 	.word	0x40240000
 8018534:	9b08      	ldr	r3, [sp, #32]
 8018536:	2b00      	cmp	r3, #0
 8018538:	f000 80ca 	beq.w	80186d0 <_dtoa_r+0xb20>
 801853c:	9b03      	ldr	r3, [sp, #12]
 801853e:	9302      	str	r3, [sp, #8]
 8018540:	2d00      	cmp	r5, #0
 8018542:	dd05      	ble.n	8018550 <_dtoa_r+0x9a0>
 8018544:	4639      	mov	r1, r7
 8018546:	462a      	mov	r2, r5
 8018548:	4620      	mov	r0, r4
 801854a:	f000 ff1b 	bl	8019384 <__lshift>
 801854e:	4607      	mov	r7, r0
 8018550:	f1b8 0f00 	cmp.w	r8, #0
 8018554:	d05b      	beq.n	801860e <_dtoa_r+0xa5e>
 8018556:	6879      	ldr	r1, [r7, #4]
 8018558:	4620      	mov	r0, r4
 801855a:	f000 fcb7 	bl	8018ecc <_Balloc>
 801855e:	4605      	mov	r5, r0
 8018560:	b928      	cbnz	r0, 801856e <_dtoa_r+0x9be>
 8018562:	4b87      	ldr	r3, [pc, #540]	; (8018780 <_dtoa_r+0xbd0>)
 8018564:	4602      	mov	r2, r0
 8018566:	f240 21ea 	movw	r1, #746	; 0x2ea
 801856a:	f7ff bb3b 	b.w	8017be4 <_dtoa_r+0x34>
 801856e:	693a      	ldr	r2, [r7, #16]
 8018570:	3202      	adds	r2, #2
 8018572:	0092      	lsls	r2, r2, #2
 8018574:	f107 010c 	add.w	r1, r7, #12
 8018578:	300c      	adds	r0, #12
 801857a:	f7fd fc81 	bl	8015e80 <memcpy>
 801857e:	2201      	movs	r2, #1
 8018580:	4629      	mov	r1, r5
 8018582:	4620      	mov	r0, r4
 8018584:	f000 fefe 	bl	8019384 <__lshift>
 8018588:	9b01      	ldr	r3, [sp, #4]
 801858a:	f103 0901 	add.w	r9, r3, #1
 801858e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018592:	4413      	add	r3, r2
 8018594:	9305      	str	r3, [sp, #20]
 8018596:	f00a 0301 	and.w	r3, sl, #1
 801859a:	46b8      	mov	r8, r7
 801859c:	9304      	str	r3, [sp, #16]
 801859e:	4607      	mov	r7, r0
 80185a0:	4631      	mov	r1, r6
 80185a2:	ee18 0a10 	vmov	r0, s16
 80185a6:	f7ff fa75 	bl	8017a94 <quorem>
 80185aa:	4641      	mov	r1, r8
 80185ac:	9002      	str	r0, [sp, #8]
 80185ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80185b2:	ee18 0a10 	vmov	r0, s16
 80185b6:	f000 ff55 	bl	8019464 <__mcmp>
 80185ba:	463a      	mov	r2, r7
 80185bc:	9003      	str	r0, [sp, #12]
 80185be:	4631      	mov	r1, r6
 80185c0:	4620      	mov	r0, r4
 80185c2:	f000 ff6b 	bl	801949c <__mdiff>
 80185c6:	68c2      	ldr	r2, [r0, #12]
 80185c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80185cc:	4605      	mov	r5, r0
 80185ce:	bb02      	cbnz	r2, 8018612 <_dtoa_r+0xa62>
 80185d0:	4601      	mov	r1, r0
 80185d2:	ee18 0a10 	vmov	r0, s16
 80185d6:	f000 ff45 	bl	8019464 <__mcmp>
 80185da:	4602      	mov	r2, r0
 80185dc:	4629      	mov	r1, r5
 80185de:	4620      	mov	r0, r4
 80185e0:	9207      	str	r2, [sp, #28]
 80185e2:	f000 fcb3 	bl	8018f4c <_Bfree>
 80185e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80185ea:	ea43 0102 	orr.w	r1, r3, r2
 80185ee:	9b04      	ldr	r3, [sp, #16]
 80185f0:	430b      	orrs	r3, r1
 80185f2:	464d      	mov	r5, r9
 80185f4:	d10f      	bne.n	8018616 <_dtoa_r+0xa66>
 80185f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80185fa:	d02a      	beq.n	8018652 <_dtoa_r+0xaa2>
 80185fc:	9b03      	ldr	r3, [sp, #12]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	dd02      	ble.n	8018608 <_dtoa_r+0xa58>
 8018602:	9b02      	ldr	r3, [sp, #8]
 8018604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018608:	f88b a000 	strb.w	sl, [fp]
 801860c:	e775      	b.n	80184fa <_dtoa_r+0x94a>
 801860e:	4638      	mov	r0, r7
 8018610:	e7ba      	b.n	8018588 <_dtoa_r+0x9d8>
 8018612:	2201      	movs	r2, #1
 8018614:	e7e2      	b.n	80185dc <_dtoa_r+0xa2c>
 8018616:	9b03      	ldr	r3, [sp, #12]
 8018618:	2b00      	cmp	r3, #0
 801861a:	db04      	blt.n	8018626 <_dtoa_r+0xa76>
 801861c:	9906      	ldr	r1, [sp, #24]
 801861e:	430b      	orrs	r3, r1
 8018620:	9904      	ldr	r1, [sp, #16]
 8018622:	430b      	orrs	r3, r1
 8018624:	d122      	bne.n	801866c <_dtoa_r+0xabc>
 8018626:	2a00      	cmp	r2, #0
 8018628:	ddee      	ble.n	8018608 <_dtoa_r+0xa58>
 801862a:	ee18 1a10 	vmov	r1, s16
 801862e:	2201      	movs	r2, #1
 8018630:	4620      	mov	r0, r4
 8018632:	f000 fea7 	bl	8019384 <__lshift>
 8018636:	4631      	mov	r1, r6
 8018638:	ee08 0a10 	vmov	s16, r0
 801863c:	f000 ff12 	bl	8019464 <__mcmp>
 8018640:	2800      	cmp	r0, #0
 8018642:	dc03      	bgt.n	801864c <_dtoa_r+0xa9c>
 8018644:	d1e0      	bne.n	8018608 <_dtoa_r+0xa58>
 8018646:	f01a 0f01 	tst.w	sl, #1
 801864a:	d0dd      	beq.n	8018608 <_dtoa_r+0xa58>
 801864c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018650:	d1d7      	bne.n	8018602 <_dtoa_r+0xa52>
 8018652:	2339      	movs	r3, #57	; 0x39
 8018654:	f88b 3000 	strb.w	r3, [fp]
 8018658:	462b      	mov	r3, r5
 801865a:	461d      	mov	r5, r3
 801865c:	3b01      	subs	r3, #1
 801865e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018662:	2a39      	cmp	r2, #57	; 0x39
 8018664:	d071      	beq.n	801874a <_dtoa_r+0xb9a>
 8018666:	3201      	adds	r2, #1
 8018668:	701a      	strb	r2, [r3, #0]
 801866a:	e746      	b.n	80184fa <_dtoa_r+0x94a>
 801866c:	2a00      	cmp	r2, #0
 801866e:	dd07      	ble.n	8018680 <_dtoa_r+0xad0>
 8018670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018674:	d0ed      	beq.n	8018652 <_dtoa_r+0xaa2>
 8018676:	f10a 0301 	add.w	r3, sl, #1
 801867a:	f88b 3000 	strb.w	r3, [fp]
 801867e:	e73c      	b.n	80184fa <_dtoa_r+0x94a>
 8018680:	9b05      	ldr	r3, [sp, #20]
 8018682:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018686:	4599      	cmp	r9, r3
 8018688:	d047      	beq.n	801871a <_dtoa_r+0xb6a>
 801868a:	ee18 1a10 	vmov	r1, s16
 801868e:	2300      	movs	r3, #0
 8018690:	220a      	movs	r2, #10
 8018692:	4620      	mov	r0, r4
 8018694:	f000 fc7c 	bl	8018f90 <__multadd>
 8018698:	45b8      	cmp	r8, r7
 801869a:	ee08 0a10 	vmov	s16, r0
 801869e:	f04f 0300 	mov.w	r3, #0
 80186a2:	f04f 020a 	mov.w	r2, #10
 80186a6:	4641      	mov	r1, r8
 80186a8:	4620      	mov	r0, r4
 80186aa:	d106      	bne.n	80186ba <_dtoa_r+0xb0a>
 80186ac:	f000 fc70 	bl	8018f90 <__multadd>
 80186b0:	4680      	mov	r8, r0
 80186b2:	4607      	mov	r7, r0
 80186b4:	f109 0901 	add.w	r9, r9, #1
 80186b8:	e772      	b.n	80185a0 <_dtoa_r+0x9f0>
 80186ba:	f000 fc69 	bl	8018f90 <__multadd>
 80186be:	4639      	mov	r1, r7
 80186c0:	4680      	mov	r8, r0
 80186c2:	2300      	movs	r3, #0
 80186c4:	220a      	movs	r2, #10
 80186c6:	4620      	mov	r0, r4
 80186c8:	f000 fc62 	bl	8018f90 <__multadd>
 80186cc:	4607      	mov	r7, r0
 80186ce:	e7f1      	b.n	80186b4 <_dtoa_r+0xb04>
 80186d0:	9b03      	ldr	r3, [sp, #12]
 80186d2:	9302      	str	r3, [sp, #8]
 80186d4:	9d01      	ldr	r5, [sp, #4]
 80186d6:	ee18 0a10 	vmov	r0, s16
 80186da:	4631      	mov	r1, r6
 80186dc:	f7ff f9da 	bl	8017a94 <quorem>
 80186e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80186e4:	9b01      	ldr	r3, [sp, #4]
 80186e6:	f805 ab01 	strb.w	sl, [r5], #1
 80186ea:	1aea      	subs	r2, r5, r3
 80186ec:	9b02      	ldr	r3, [sp, #8]
 80186ee:	4293      	cmp	r3, r2
 80186f0:	dd09      	ble.n	8018706 <_dtoa_r+0xb56>
 80186f2:	ee18 1a10 	vmov	r1, s16
 80186f6:	2300      	movs	r3, #0
 80186f8:	220a      	movs	r2, #10
 80186fa:	4620      	mov	r0, r4
 80186fc:	f000 fc48 	bl	8018f90 <__multadd>
 8018700:	ee08 0a10 	vmov	s16, r0
 8018704:	e7e7      	b.n	80186d6 <_dtoa_r+0xb26>
 8018706:	9b02      	ldr	r3, [sp, #8]
 8018708:	2b00      	cmp	r3, #0
 801870a:	bfc8      	it	gt
 801870c:	461d      	movgt	r5, r3
 801870e:	9b01      	ldr	r3, [sp, #4]
 8018710:	bfd8      	it	le
 8018712:	2501      	movle	r5, #1
 8018714:	441d      	add	r5, r3
 8018716:	f04f 0800 	mov.w	r8, #0
 801871a:	ee18 1a10 	vmov	r1, s16
 801871e:	2201      	movs	r2, #1
 8018720:	4620      	mov	r0, r4
 8018722:	f000 fe2f 	bl	8019384 <__lshift>
 8018726:	4631      	mov	r1, r6
 8018728:	ee08 0a10 	vmov	s16, r0
 801872c:	f000 fe9a 	bl	8019464 <__mcmp>
 8018730:	2800      	cmp	r0, #0
 8018732:	dc91      	bgt.n	8018658 <_dtoa_r+0xaa8>
 8018734:	d102      	bne.n	801873c <_dtoa_r+0xb8c>
 8018736:	f01a 0f01 	tst.w	sl, #1
 801873a:	d18d      	bne.n	8018658 <_dtoa_r+0xaa8>
 801873c:	462b      	mov	r3, r5
 801873e:	461d      	mov	r5, r3
 8018740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018744:	2a30      	cmp	r2, #48	; 0x30
 8018746:	d0fa      	beq.n	801873e <_dtoa_r+0xb8e>
 8018748:	e6d7      	b.n	80184fa <_dtoa_r+0x94a>
 801874a:	9a01      	ldr	r2, [sp, #4]
 801874c:	429a      	cmp	r2, r3
 801874e:	d184      	bne.n	801865a <_dtoa_r+0xaaa>
 8018750:	9b00      	ldr	r3, [sp, #0]
 8018752:	3301      	adds	r3, #1
 8018754:	9300      	str	r3, [sp, #0]
 8018756:	2331      	movs	r3, #49	; 0x31
 8018758:	7013      	strb	r3, [r2, #0]
 801875a:	e6ce      	b.n	80184fa <_dtoa_r+0x94a>
 801875c:	4b09      	ldr	r3, [pc, #36]	; (8018784 <_dtoa_r+0xbd4>)
 801875e:	f7ff ba95 	b.w	8017c8c <_dtoa_r+0xdc>
 8018762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018764:	2b00      	cmp	r3, #0
 8018766:	f47f aa6e 	bne.w	8017c46 <_dtoa_r+0x96>
 801876a:	4b07      	ldr	r3, [pc, #28]	; (8018788 <_dtoa_r+0xbd8>)
 801876c:	f7ff ba8e 	b.w	8017c8c <_dtoa_r+0xdc>
 8018770:	9b02      	ldr	r3, [sp, #8]
 8018772:	2b00      	cmp	r3, #0
 8018774:	dcae      	bgt.n	80186d4 <_dtoa_r+0xb24>
 8018776:	9b06      	ldr	r3, [sp, #24]
 8018778:	2b02      	cmp	r3, #2
 801877a:	f73f aea8 	bgt.w	80184ce <_dtoa_r+0x91e>
 801877e:	e7a9      	b.n	80186d4 <_dtoa_r+0xb24>
 8018780:	0801bc40 	.word	0x0801bc40
 8018784:	0801be39 	.word	0x0801be39
 8018788:	0801bbc1 	.word	0x0801bbc1

0801878c <rshift>:
 801878c:	6903      	ldr	r3, [r0, #16]
 801878e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018796:	ea4f 1261 	mov.w	r2, r1, asr #5
 801879a:	f100 0414 	add.w	r4, r0, #20
 801879e:	dd45      	ble.n	801882c <rshift+0xa0>
 80187a0:	f011 011f 	ands.w	r1, r1, #31
 80187a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80187a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80187ac:	d10c      	bne.n	80187c8 <rshift+0x3c>
 80187ae:	f100 0710 	add.w	r7, r0, #16
 80187b2:	4629      	mov	r1, r5
 80187b4:	42b1      	cmp	r1, r6
 80187b6:	d334      	bcc.n	8018822 <rshift+0x96>
 80187b8:	1a9b      	subs	r3, r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	1eea      	subs	r2, r5, #3
 80187be:	4296      	cmp	r6, r2
 80187c0:	bf38      	it	cc
 80187c2:	2300      	movcc	r3, #0
 80187c4:	4423      	add	r3, r4
 80187c6:	e015      	b.n	80187f4 <rshift+0x68>
 80187c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80187cc:	f1c1 0820 	rsb	r8, r1, #32
 80187d0:	40cf      	lsrs	r7, r1
 80187d2:	f105 0e04 	add.w	lr, r5, #4
 80187d6:	46a1      	mov	r9, r4
 80187d8:	4576      	cmp	r6, lr
 80187da:	46f4      	mov	ip, lr
 80187dc:	d815      	bhi.n	801880a <rshift+0x7e>
 80187de:	1a9a      	subs	r2, r3, r2
 80187e0:	0092      	lsls	r2, r2, #2
 80187e2:	3a04      	subs	r2, #4
 80187e4:	3501      	adds	r5, #1
 80187e6:	42ae      	cmp	r6, r5
 80187e8:	bf38      	it	cc
 80187ea:	2200      	movcc	r2, #0
 80187ec:	18a3      	adds	r3, r4, r2
 80187ee:	50a7      	str	r7, [r4, r2]
 80187f0:	b107      	cbz	r7, 80187f4 <rshift+0x68>
 80187f2:	3304      	adds	r3, #4
 80187f4:	1b1a      	subs	r2, r3, r4
 80187f6:	42a3      	cmp	r3, r4
 80187f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80187fc:	bf08      	it	eq
 80187fe:	2300      	moveq	r3, #0
 8018800:	6102      	str	r2, [r0, #16]
 8018802:	bf08      	it	eq
 8018804:	6143      	streq	r3, [r0, #20]
 8018806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801880a:	f8dc c000 	ldr.w	ip, [ip]
 801880e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018812:	ea4c 0707 	orr.w	r7, ip, r7
 8018816:	f849 7b04 	str.w	r7, [r9], #4
 801881a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801881e:	40cf      	lsrs	r7, r1
 8018820:	e7da      	b.n	80187d8 <rshift+0x4c>
 8018822:	f851 cb04 	ldr.w	ip, [r1], #4
 8018826:	f847 cf04 	str.w	ip, [r7, #4]!
 801882a:	e7c3      	b.n	80187b4 <rshift+0x28>
 801882c:	4623      	mov	r3, r4
 801882e:	e7e1      	b.n	80187f4 <rshift+0x68>

08018830 <__hexdig_fun>:
 8018830:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018834:	2b09      	cmp	r3, #9
 8018836:	d802      	bhi.n	801883e <__hexdig_fun+0xe>
 8018838:	3820      	subs	r0, #32
 801883a:	b2c0      	uxtb	r0, r0
 801883c:	4770      	bx	lr
 801883e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018842:	2b05      	cmp	r3, #5
 8018844:	d801      	bhi.n	801884a <__hexdig_fun+0x1a>
 8018846:	3847      	subs	r0, #71	; 0x47
 8018848:	e7f7      	b.n	801883a <__hexdig_fun+0xa>
 801884a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801884e:	2b05      	cmp	r3, #5
 8018850:	d801      	bhi.n	8018856 <__hexdig_fun+0x26>
 8018852:	3827      	subs	r0, #39	; 0x27
 8018854:	e7f1      	b.n	801883a <__hexdig_fun+0xa>
 8018856:	2000      	movs	r0, #0
 8018858:	4770      	bx	lr
	...

0801885c <__gethex>:
 801885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018860:	ed2d 8b02 	vpush	{d8}
 8018864:	b089      	sub	sp, #36	; 0x24
 8018866:	ee08 0a10 	vmov	s16, r0
 801886a:	9304      	str	r3, [sp, #16]
 801886c:	4bb4      	ldr	r3, [pc, #720]	; (8018b40 <__gethex+0x2e4>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	9301      	str	r3, [sp, #4]
 8018872:	4618      	mov	r0, r3
 8018874:	468b      	mov	fp, r1
 8018876:	4690      	mov	r8, r2
 8018878:	f7e7 fcbc 	bl	80001f4 <strlen>
 801887c:	9b01      	ldr	r3, [sp, #4]
 801887e:	f8db 2000 	ldr.w	r2, [fp]
 8018882:	4403      	add	r3, r0
 8018884:	4682      	mov	sl, r0
 8018886:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801888a:	9305      	str	r3, [sp, #20]
 801888c:	1c93      	adds	r3, r2, #2
 801888e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018892:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018896:	32fe      	adds	r2, #254	; 0xfe
 8018898:	18d1      	adds	r1, r2, r3
 801889a:	461f      	mov	r7, r3
 801889c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80188a0:	9100      	str	r1, [sp, #0]
 80188a2:	2830      	cmp	r0, #48	; 0x30
 80188a4:	d0f8      	beq.n	8018898 <__gethex+0x3c>
 80188a6:	f7ff ffc3 	bl	8018830 <__hexdig_fun>
 80188aa:	4604      	mov	r4, r0
 80188ac:	2800      	cmp	r0, #0
 80188ae:	d13a      	bne.n	8018926 <__gethex+0xca>
 80188b0:	9901      	ldr	r1, [sp, #4]
 80188b2:	4652      	mov	r2, sl
 80188b4:	4638      	mov	r0, r7
 80188b6:	f001 fda3 	bl	801a400 <strncmp>
 80188ba:	4605      	mov	r5, r0
 80188bc:	2800      	cmp	r0, #0
 80188be:	d168      	bne.n	8018992 <__gethex+0x136>
 80188c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80188c4:	eb07 060a 	add.w	r6, r7, sl
 80188c8:	f7ff ffb2 	bl	8018830 <__hexdig_fun>
 80188cc:	2800      	cmp	r0, #0
 80188ce:	d062      	beq.n	8018996 <__gethex+0x13a>
 80188d0:	4633      	mov	r3, r6
 80188d2:	7818      	ldrb	r0, [r3, #0]
 80188d4:	2830      	cmp	r0, #48	; 0x30
 80188d6:	461f      	mov	r7, r3
 80188d8:	f103 0301 	add.w	r3, r3, #1
 80188dc:	d0f9      	beq.n	80188d2 <__gethex+0x76>
 80188de:	f7ff ffa7 	bl	8018830 <__hexdig_fun>
 80188e2:	2301      	movs	r3, #1
 80188e4:	fab0 f480 	clz	r4, r0
 80188e8:	0964      	lsrs	r4, r4, #5
 80188ea:	4635      	mov	r5, r6
 80188ec:	9300      	str	r3, [sp, #0]
 80188ee:	463a      	mov	r2, r7
 80188f0:	4616      	mov	r6, r2
 80188f2:	3201      	adds	r2, #1
 80188f4:	7830      	ldrb	r0, [r6, #0]
 80188f6:	f7ff ff9b 	bl	8018830 <__hexdig_fun>
 80188fa:	2800      	cmp	r0, #0
 80188fc:	d1f8      	bne.n	80188f0 <__gethex+0x94>
 80188fe:	9901      	ldr	r1, [sp, #4]
 8018900:	4652      	mov	r2, sl
 8018902:	4630      	mov	r0, r6
 8018904:	f001 fd7c 	bl	801a400 <strncmp>
 8018908:	b980      	cbnz	r0, 801892c <__gethex+0xd0>
 801890a:	b94d      	cbnz	r5, 8018920 <__gethex+0xc4>
 801890c:	eb06 050a 	add.w	r5, r6, sl
 8018910:	462a      	mov	r2, r5
 8018912:	4616      	mov	r6, r2
 8018914:	3201      	adds	r2, #1
 8018916:	7830      	ldrb	r0, [r6, #0]
 8018918:	f7ff ff8a 	bl	8018830 <__hexdig_fun>
 801891c:	2800      	cmp	r0, #0
 801891e:	d1f8      	bne.n	8018912 <__gethex+0xb6>
 8018920:	1bad      	subs	r5, r5, r6
 8018922:	00ad      	lsls	r5, r5, #2
 8018924:	e004      	b.n	8018930 <__gethex+0xd4>
 8018926:	2400      	movs	r4, #0
 8018928:	4625      	mov	r5, r4
 801892a:	e7e0      	b.n	80188ee <__gethex+0x92>
 801892c:	2d00      	cmp	r5, #0
 801892e:	d1f7      	bne.n	8018920 <__gethex+0xc4>
 8018930:	7833      	ldrb	r3, [r6, #0]
 8018932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018936:	2b50      	cmp	r3, #80	; 0x50
 8018938:	d13b      	bne.n	80189b2 <__gethex+0x156>
 801893a:	7873      	ldrb	r3, [r6, #1]
 801893c:	2b2b      	cmp	r3, #43	; 0x2b
 801893e:	d02c      	beq.n	801899a <__gethex+0x13e>
 8018940:	2b2d      	cmp	r3, #45	; 0x2d
 8018942:	d02e      	beq.n	80189a2 <__gethex+0x146>
 8018944:	1c71      	adds	r1, r6, #1
 8018946:	f04f 0900 	mov.w	r9, #0
 801894a:	7808      	ldrb	r0, [r1, #0]
 801894c:	f7ff ff70 	bl	8018830 <__hexdig_fun>
 8018950:	1e43      	subs	r3, r0, #1
 8018952:	b2db      	uxtb	r3, r3
 8018954:	2b18      	cmp	r3, #24
 8018956:	d82c      	bhi.n	80189b2 <__gethex+0x156>
 8018958:	f1a0 0210 	sub.w	r2, r0, #16
 801895c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018960:	f7ff ff66 	bl	8018830 <__hexdig_fun>
 8018964:	1e43      	subs	r3, r0, #1
 8018966:	b2db      	uxtb	r3, r3
 8018968:	2b18      	cmp	r3, #24
 801896a:	d91d      	bls.n	80189a8 <__gethex+0x14c>
 801896c:	f1b9 0f00 	cmp.w	r9, #0
 8018970:	d000      	beq.n	8018974 <__gethex+0x118>
 8018972:	4252      	negs	r2, r2
 8018974:	4415      	add	r5, r2
 8018976:	f8cb 1000 	str.w	r1, [fp]
 801897a:	b1e4      	cbz	r4, 80189b6 <__gethex+0x15a>
 801897c:	9b00      	ldr	r3, [sp, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	bf14      	ite	ne
 8018982:	2700      	movne	r7, #0
 8018984:	2706      	moveq	r7, #6
 8018986:	4638      	mov	r0, r7
 8018988:	b009      	add	sp, #36	; 0x24
 801898a:	ecbd 8b02 	vpop	{d8}
 801898e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018992:	463e      	mov	r6, r7
 8018994:	4625      	mov	r5, r4
 8018996:	2401      	movs	r4, #1
 8018998:	e7ca      	b.n	8018930 <__gethex+0xd4>
 801899a:	f04f 0900 	mov.w	r9, #0
 801899e:	1cb1      	adds	r1, r6, #2
 80189a0:	e7d3      	b.n	801894a <__gethex+0xee>
 80189a2:	f04f 0901 	mov.w	r9, #1
 80189a6:	e7fa      	b.n	801899e <__gethex+0x142>
 80189a8:	230a      	movs	r3, #10
 80189aa:	fb03 0202 	mla	r2, r3, r2, r0
 80189ae:	3a10      	subs	r2, #16
 80189b0:	e7d4      	b.n	801895c <__gethex+0x100>
 80189b2:	4631      	mov	r1, r6
 80189b4:	e7df      	b.n	8018976 <__gethex+0x11a>
 80189b6:	1bf3      	subs	r3, r6, r7
 80189b8:	3b01      	subs	r3, #1
 80189ba:	4621      	mov	r1, r4
 80189bc:	2b07      	cmp	r3, #7
 80189be:	dc0b      	bgt.n	80189d8 <__gethex+0x17c>
 80189c0:	ee18 0a10 	vmov	r0, s16
 80189c4:	f000 fa82 	bl	8018ecc <_Balloc>
 80189c8:	4604      	mov	r4, r0
 80189ca:	b940      	cbnz	r0, 80189de <__gethex+0x182>
 80189cc:	4b5d      	ldr	r3, [pc, #372]	; (8018b44 <__gethex+0x2e8>)
 80189ce:	4602      	mov	r2, r0
 80189d0:	21de      	movs	r1, #222	; 0xde
 80189d2:	485d      	ldr	r0, [pc, #372]	; (8018b48 <__gethex+0x2ec>)
 80189d4:	f001 fde4 	bl	801a5a0 <__assert_func>
 80189d8:	3101      	adds	r1, #1
 80189da:	105b      	asrs	r3, r3, #1
 80189dc:	e7ee      	b.n	80189bc <__gethex+0x160>
 80189de:	f100 0914 	add.w	r9, r0, #20
 80189e2:	f04f 0b00 	mov.w	fp, #0
 80189e6:	f1ca 0301 	rsb	r3, sl, #1
 80189ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80189ee:	f8cd b000 	str.w	fp, [sp]
 80189f2:	9306      	str	r3, [sp, #24]
 80189f4:	42b7      	cmp	r7, r6
 80189f6:	d340      	bcc.n	8018a7a <__gethex+0x21e>
 80189f8:	9802      	ldr	r0, [sp, #8]
 80189fa:	9b00      	ldr	r3, [sp, #0]
 80189fc:	f840 3b04 	str.w	r3, [r0], #4
 8018a00:	eba0 0009 	sub.w	r0, r0, r9
 8018a04:	1080      	asrs	r0, r0, #2
 8018a06:	0146      	lsls	r6, r0, #5
 8018a08:	6120      	str	r0, [r4, #16]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f000 fb50 	bl	80190b0 <__hi0bits>
 8018a10:	1a30      	subs	r0, r6, r0
 8018a12:	f8d8 6000 	ldr.w	r6, [r8]
 8018a16:	42b0      	cmp	r0, r6
 8018a18:	dd63      	ble.n	8018ae2 <__gethex+0x286>
 8018a1a:	1b87      	subs	r7, r0, r6
 8018a1c:	4639      	mov	r1, r7
 8018a1e:	4620      	mov	r0, r4
 8018a20:	f000 fef4 	bl	801980c <__any_on>
 8018a24:	4682      	mov	sl, r0
 8018a26:	b1a8      	cbz	r0, 8018a54 <__gethex+0x1f8>
 8018a28:	1e7b      	subs	r3, r7, #1
 8018a2a:	1159      	asrs	r1, r3, #5
 8018a2c:	f003 021f 	and.w	r2, r3, #31
 8018a30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018a34:	f04f 0a01 	mov.w	sl, #1
 8018a38:	fa0a f202 	lsl.w	r2, sl, r2
 8018a3c:	420a      	tst	r2, r1
 8018a3e:	d009      	beq.n	8018a54 <__gethex+0x1f8>
 8018a40:	4553      	cmp	r3, sl
 8018a42:	dd05      	ble.n	8018a50 <__gethex+0x1f4>
 8018a44:	1eb9      	subs	r1, r7, #2
 8018a46:	4620      	mov	r0, r4
 8018a48:	f000 fee0 	bl	801980c <__any_on>
 8018a4c:	2800      	cmp	r0, #0
 8018a4e:	d145      	bne.n	8018adc <__gethex+0x280>
 8018a50:	f04f 0a02 	mov.w	sl, #2
 8018a54:	4639      	mov	r1, r7
 8018a56:	4620      	mov	r0, r4
 8018a58:	f7ff fe98 	bl	801878c <rshift>
 8018a5c:	443d      	add	r5, r7
 8018a5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a62:	42ab      	cmp	r3, r5
 8018a64:	da4c      	bge.n	8018b00 <__gethex+0x2a4>
 8018a66:	ee18 0a10 	vmov	r0, s16
 8018a6a:	4621      	mov	r1, r4
 8018a6c:	f000 fa6e 	bl	8018f4c <_Bfree>
 8018a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a72:	2300      	movs	r3, #0
 8018a74:	6013      	str	r3, [r2, #0]
 8018a76:	27a3      	movs	r7, #163	; 0xa3
 8018a78:	e785      	b.n	8018986 <__gethex+0x12a>
 8018a7a:	1e73      	subs	r3, r6, #1
 8018a7c:	9a05      	ldr	r2, [sp, #20]
 8018a7e:	9303      	str	r3, [sp, #12]
 8018a80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018a84:	4293      	cmp	r3, r2
 8018a86:	d019      	beq.n	8018abc <__gethex+0x260>
 8018a88:	f1bb 0f20 	cmp.w	fp, #32
 8018a8c:	d107      	bne.n	8018a9e <__gethex+0x242>
 8018a8e:	9b02      	ldr	r3, [sp, #8]
 8018a90:	9a00      	ldr	r2, [sp, #0]
 8018a92:	f843 2b04 	str.w	r2, [r3], #4
 8018a96:	9302      	str	r3, [sp, #8]
 8018a98:	2300      	movs	r3, #0
 8018a9a:	9300      	str	r3, [sp, #0]
 8018a9c:	469b      	mov	fp, r3
 8018a9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018aa2:	f7ff fec5 	bl	8018830 <__hexdig_fun>
 8018aa6:	9b00      	ldr	r3, [sp, #0]
 8018aa8:	f000 000f 	and.w	r0, r0, #15
 8018aac:	fa00 f00b 	lsl.w	r0, r0, fp
 8018ab0:	4303      	orrs	r3, r0
 8018ab2:	9300      	str	r3, [sp, #0]
 8018ab4:	f10b 0b04 	add.w	fp, fp, #4
 8018ab8:	9b03      	ldr	r3, [sp, #12]
 8018aba:	e00d      	b.n	8018ad8 <__gethex+0x27c>
 8018abc:	9b03      	ldr	r3, [sp, #12]
 8018abe:	9a06      	ldr	r2, [sp, #24]
 8018ac0:	4413      	add	r3, r2
 8018ac2:	42bb      	cmp	r3, r7
 8018ac4:	d3e0      	bcc.n	8018a88 <__gethex+0x22c>
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	9901      	ldr	r1, [sp, #4]
 8018aca:	9307      	str	r3, [sp, #28]
 8018acc:	4652      	mov	r2, sl
 8018ace:	f001 fc97 	bl	801a400 <strncmp>
 8018ad2:	9b07      	ldr	r3, [sp, #28]
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	d1d7      	bne.n	8018a88 <__gethex+0x22c>
 8018ad8:	461e      	mov	r6, r3
 8018ada:	e78b      	b.n	80189f4 <__gethex+0x198>
 8018adc:	f04f 0a03 	mov.w	sl, #3
 8018ae0:	e7b8      	b.n	8018a54 <__gethex+0x1f8>
 8018ae2:	da0a      	bge.n	8018afa <__gethex+0x29e>
 8018ae4:	1a37      	subs	r7, r6, r0
 8018ae6:	4621      	mov	r1, r4
 8018ae8:	ee18 0a10 	vmov	r0, s16
 8018aec:	463a      	mov	r2, r7
 8018aee:	f000 fc49 	bl	8019384 <__lshift>
 8018af2:	1bed      	subs	r5, r5, r7
 8018af4:	4604      	mov	r4, r0
 8018af6:	f100 0914 	add.w	r9, r0, #20
 8018afa:	f04f 0a00 	mov.w	sl, #0
 8018afe:	e7ae      	b.n	8018a5e <__gethex+0x202>
 8018b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018b04:	42a8      	cmp	r0, r5
 8018b06:	dd72      	ble.n	8018bee <__gethex+0x392>
 8018b08:	1b45      	subs	r5, r0, r5
 8018b0a:	42ae      	cmp	r6, r5
 8018b0c:	dc36      	bgt.n	8018b7c <__gethex+0x320>
 8018b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b12:	2b02      	cmp	r3, #2
 8018b14:	d02a      	beq.n	8018b6c <__gethex+0x310>
 8018b16:	2b03      	cmp	r3, #3
 8018b18:	d02c      	beq.n	8018b74 <__gethex+0x318>
 8018b1a:	2b01      	cmp	r3, #1
 8018b1c:	d11c      	bne.n	8018b58 <__gethex+0x2fc>
 8018b1e:	42ae      	cmp	r6, r5
 8018b20:	d11a      	bne.n	8018b58 <__gethex+0x2fc>
 8018b22:	2e01      	cmp	r6, #1
 8018b24:	d112      	bne.n	8018b4c <__gethex+0x2f0>
 8018b26:	9a04      	ldr	r2, [sp, #16]
 8018b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018b2c:	6013      	str	r3, [r2, #0]
 8018b2e:	2301      	movs	r3, #1
 8018b30:	6123      	str	r3, [r4, #16]
 8018b32:	f8c9 3000 	str.w	r3, [r9]
 8018b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b38:	2762      	movs	r7, #98	; 0x62
 8018b3a:	601c      	str	r4, [r3, #0]
 8018b3c:	e723      	b.n	8018986 <__gethex+0x12a>
 8018b3e:	bf00      	nop
 8018b40:	0801bcb8 	.word	0x0801bcb8
 8018b44:	0801bc40 	.word	0x0801bc40
 8018b48:	0801bc51 	.word	0x0801bc51
 8018b4c:	1e71      	subs	r1, r6, #1
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f000 fe5c 	bl	801980c <__any_on>
 8018b54:	2800      	cmp	r0, #0
 8018b56:	d1e6      	bne.n	8018b26 <__gethex+0x2ca>
 8018b58:	ee18 0a10 	vmov	r0, s16
 8018b5c:	4621      	mov	r1, r4
 8018b5e:	f000 f9f5 	bl	8018f4c <_Bfree>
 8018b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b64:	2300      	movs	r3, #0
 8018b66:	6013      	str	r3, [r2, #0]
 8018b68:	2750      	movs	r7, #80	; 0x50
 8018b6a:	e70c      	b.n	8018986 <__gethex+0x12a>
 8018b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d1f2      	bne.n	8018b58 <__gethex+0x2fc>
 8018b72:	e7d8      	b.n	8018b26 <__gethex+0x2ca>
 8018b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d1d5      	bne.n	8018b26 <__gethex+0x2ca>
 8018b7a:	e7ed      	b.n	8018b58 <__gethex+0x2fc>
 8018b7c:	1e6f      	subs	r7, r5, #1
 8018b7e:	f1ba 0f00 	cmp.w	sl, #0
 8018b82:	d131      	bne.n	8018be8 <__gethex+0x38c>
 8018b84:	b127      	cbz	r7, 8018b90 <__gethex+0x334>
 8018b86:	4639      	mov	r1, r7
 8018b88:	4620      	mov	r0, r4
 8018b8a:	f000 fe3f 	bl	801980c <__any_on>
 8018b8e:	4682      	mov	sl, r0
 8018b90:	117b      	asrs	r3, r7, #5
 8018b92:	2101      	movs	r1, #1
 8018b94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018b98:	f007 071f 	and.w	r7, r7, #31
 8018b9c:	fa01 f707 	lsl.w	r7, r1, r7
 8018ba0:	421f      	tst	r7, r3
 8018ba2:	4629      	mov	r1, r5
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	bf18      	it	ne
 8018ba8:	f04a 0a02 	orrne.w	sl, sl, #2
 8018bac:	1b76      	subs	r6, r6, r5
 8018bae:	f7ff fded 	bl	801878c <rshift>
 8018bb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018bb6:	2702      	movs	r7, #2
 8018bb8:	f1ba 0f00 	cmp.w	sl, #0
 8018bbc:	d048      	beq.n	8018c50 <__gethex+0x3f4>
 8018bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018bc2:	2b02      	cmp	r3, #2
 8018bc4:	d015      	beq.n	8018bf2 <__gethex+0x396>
 8018bc6:	2b03      	cmp	r3, #3
 8018bc8:	d017      	beq.n	8018bfa <__gethex+0x39e>
 8018bca:	2b01      	cmp	r3, #1
 8018bcc:	d109      	bne.n	8018be2 <__gethex+0x386>
 8018bce:	f01a 0f02 	tst.w	sl, #2
 8018bd2:	d006      	beq.n	8018be2 <__gethex+0x386>
 8018bd4:	f8d9 0000 	ldr.w	r0, [r9]
 8018bd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8018bdc:	f01a 0f01 	tst.w	sl, #1
 8018be0:	d10e      	bne.n	8018c00 <__gethex+0x3a4>
 8018be2:	f047 0710 	orr.w	r7, r7, #16
 8018be6:	e033      	b.n	8018c50 <__gethex+0x3f4>
 8018be8:	f04f 0a01 	mov.w	sl, #1
 8018bec:	e7d0      	b.n	8018b90 <__gethex+0x334>
 8018bee:	2701      	movs	r7, #1
 8018bf0:	e7e2      	b.n	8018bb8 <__gethex+0x35c>
 8018bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bf4:	f1c3 0301 	rsb	r3, r3, #1
 8018bf8:	9315      	str	r3, [sp, #84]	; 0x54
 8018bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d0f0      	beq.n	8018be2 <__gethex+0x386>
 8018c00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018c04:	f104 0314 	add.w	r3, r4, #20
 8018c08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018c0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018c10:	f04f 0c00 	mov.w	ip, #0
 8018c14:	4618      	mov	r0, r3
 8018c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018c1e:	d01c      	beq.n	8018c5a <__gethex+0x3fe>
 8018c20:	3201      	adds	r2, #1
 8018c22:	6002      	str	r2, [r0, #0]
 8018c24:	2f02      	cmp	r7, #2
 8018c26:	f104 0314 	add.w	r3, r4, #20
 8018c2a:	d13f      	bne.n	8018cac <__gethex+0x450>
 8018c2c:	f8d8 2000 	ldr.w	r2, [r8]
 8018c30:	3a01      	subs	r2, #1
 8018c32:	42b2      	cmp	r2, r6
 8018c34:	d10a      	bne.n	8018c4c <__gethex+0x3f0>
 8018c36:	1171      	asrs	r1, r6, #5
 8018c38:	2201      	movs	r2, #1
 8018c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c3e:	f006 061f 	and.w	r6, r6, #31
 8018c42:	fa02 f606 	lsl.w	r6, r2, r6
 8018c46:	421e      	tst	r6, r3
 8018c48:	bf18      	it	ne
 8018c4a:	4617      	movne	r7, r2
 8018c4c:	f047 0720 	orr.w	r7, r7, #32
 8018c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c52:	601c      	str	r4, [r3, #0]
 8018c54:	9b04      	ldr	r3, [sp, #16]
 8018c56:	601d      	str	r5, [r3, #0]
 8018c58:	e695      	b.n	8018986 <__gethex+0x12a>
 8018c5a:	4299      	cmp	r1, r3
 8018c5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8018c60:	d8d8      	bhi.n	8018c14 <__gethex+0x3b8>
 8018c62:	68a3      	ldr	r3, [r4, #8]
 8018c64:	459b      	cmp	fp, r3
 8018c66:	db19      	blt.n	8018c9c <__gethex+0x440>
 8018c68:	6861      	ldr	r1, [r4, #4]
 8018c6a:	ee18 0a10 	vmov	r0, s16
 8018c6e:	3101      	adds	r1, #1
 8018c70:	f000 f92c 	bl	8018ecc <_Balloc>
 8018c74:	4681      	mov	r9, r0
 8018c76:	b918      	cbnz	r0, 8018c80 <__gethex+0x424>
 8018c78:	4b1a      	ldr	r3, [pc, #104]	; (8018ce4 <__gethex+0x488>)
 8018c7a:	4602      	mov	r2, r0
 8018c7c:	2184      	movs	r1, #132	; 0x84
 8018c7e:	e6a8      	b.n	80189d2 <__gethex+0x176>
 8018c80:	6922      	ldr	r2, [r4, #16]
 8018c82:	3202      	adds	r2, #2
 8018c84:	f104 010c 	add.w	r1, r4, #12
 8018c88:	0092      	lsls	r2, r2, #2
 8018c8a:	300c      	adds	r0, #12
 8018c8c:	f7fd f8f8 	bl	8015e80 <memcpy>
 8018c90:	4621      	mov	r1, r4
 8018c92:	ee18 0a10 	vmov	r0, s16
 8018c96:	f000 f959 	bl	8018f4c <_Bfree>
 8018c9a:	464c      	mov	r4, r9
 8018c9c:	6923      	ldr	r3, [r4, #16]
 8018c9e:	1c5a      	adds	r2, r3, #1
 8018ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018ca4:	6122      	str	r2, [r4, #16]
 8018ca6:	2201      	movs	r2, #1
 8018ca8:	615a      	str	r2, [r3, #20]
 8018caa:	e7bb      	b.n	8018c24 <__gethex+0x3c8>
 8018cac:	6922      	ldr	r2, [r4, #16]
 8018cae:	455a      	cmp	r2, fp
 8018cb0:	dd0b      	ble.n	8018cca <__gethex+0x46e>
 8018cb2:	2101      	movs	r1, #1
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f7ff fd69 	bl	801878c <rshift>
 8018cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018cbe:	3501      	adds	r5, #1
 8018cc0:	42ab      	cmp	r3, r5
 8018cc2:	f6ff aed0 	blt.w	8018a66 <__gethex+0x20a>
 8018cc6:	2701      	movs	r7, #1
 8018cc8:	e7c0      	b.n	8018c4c <__gethex+0x3f0>
 8018cca:	f016 061f 	ands.w	r6, r6, #31
 8018cce:	d0fa      	beq.n	8018cc6 <__gethex+0x46a>
 8018cd0:	4453      	add	r3, sl
 8018cd2:	f1c6 0620 	rsb	r6, r6, #32
 8018cd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018cda:	f000 f9e9 	bl	80190b0 <__hi0bits>
 8018cde:	42b0      	cmp	r0, r6
 8018ce0:	dbe7      	blt.n	8018cb2 <__gethex+0x456>
 8018ce2:	e7f0      	b.n	8018cc6 <__gethex+0x46a>
 8018ce4:	0801bc40 	.word	0x0801bc40

08018ce8 <L_shift>:
 8018ce8:	f1c2 0208 	rsb	r2, r2, #8
 8018cec:	0092      	lsls	r2, r2, #2
 8018cee:	b570      	push	{r4, r5, r6, lr}
 8018cf0:	f1c2 0620 	rsb	r6, r2, #32
 8018cf4:	6843      	ldr	r3, [r0, #4]
 8018cf6:	6804      	ldr	r4, [r0, #0]
 8018cf8:	fa03 f506 	lsl.w	r5, r3, r6
 8018cfc:	432c      	orrs	r4, r5
 8018cfe:	40d3      	lsrs	r3, r2
 8018d00:	6004      	str	r4, [r0, #0]
 8018d02:	f840 3f04 	str.w	r3, [r0, #4]!
 8018d06:	4288      	cmp	r0, r1
 8018d08:	d3f4      	bcc.n	8018cf4 <L_shift+0xc>
 8018d0a:	bd70      	pop	{r4, r5, r6, pc}

08018d0c <__match>:
 8018d0c:	b530      	push	{r4, r5, lr}
 8018d0e:	6803      	ldr	r3, [r0, #0]
 8018d10:	3301      	adds	r3, #1
 8018d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d16:	b914      	cbnz	r4, 8018d1e <__match+0x12>
 8018d18:	6003      	str	r3, [r0, #0]
 8018d1a:	2001      	movs	r0, #1
 8018d1c:	bd30      	pop	{r4, r5, pc}
 8018d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018d26:	2d19      	cmp	r5, #25
 8018d28:	bf98      	it	ls
 8018d2a:	3220      	addls	r2, #32
 8018d2c:	42a2      	cmp	r2, r4
 8018d2e:	d0f0      	beq.n	8018d12 <__match+0x6>
 8018d30:	2000      	movs	r0, #0
 8018d32:	e7f3      	b.n	8018d1c <__match+0x10>

08018d34 <__hexnan>:
 8018d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d38:	680b      	ldr	r3, [r1, #0]
 8018d3a:	115e      	asrs	r6, r3, #5
 8018d3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018d40:	f013 031f 	ands.w	r3, r3, #31
 8018d44:	b087      	sub	sp, #28
 8018d46:	bf18      	it	ne
 8018d48:	3604      	addne	r6, #4
 8018d4a:	2500      	movs	r5, #0
 8018d4c:	1f37      	subs	r7, r6, #4
 8018d4e:	4690      	mov	r8, r2
 8018d50:	6802      	ldr	r2, [r0, #0]
 8018d52:	9301      	str	r3, [sp, #4]
 8018d54:	4682      	mov	sl, r0
 8018d56:	f846 5c04 	str.w	r5, [r6, #-4]
 8018d5a:	46b9      	mov	r9, r7
 8018d5c:	463c      	mov	r4, r7
 8018d5e:	9502      	str	r5, [sp, #8]
 8018d60:	46ab      	mov	fp, r5
 8018d62:	7851      	ldrb	r1, [r2, #1]
 8018d64:	1c53      	adds	r3, r2, #1
 8018d66:	9303      	str	r3, [sp, #12]
 8018d68:	b341      	cbz	r1, 8018dbc <__hexnan+0x88>
 8018d6a:	4608      	mov	r0, r1
 8018d6c:	9205      	str	r2, [sp, #20]
 8018d6e:	9104      	str	r1, [sp, #16]
 8018d70:	f7ff fd5e 	bl	8018830 <__hexdig_fun>
 8018d74:	2800      	cmp	r0, #0
 8018d76:	d14f      	bne.n	8018e18 <__hexnan+0xe4>
 8018d78:	9904      	ldr	r1, [sp, #16]
 8018d7a:	9a05      	ldr	r2, [sp, #20]
 8018d7c:	2920      	cmp	r1, #32
 8018d7e:	d818      	bhi.n	8018db2 <__hexnan+0x7e>
 8018d80:	9b02      	ldr	r3, [sp, #8]
 8018d82:	459b      	cmp	fp, r3
 8018d84:	dd13      	ble.n	8018dae <__hexnan+0x7a>
 8018d86:	454c      	cmp	r4, r9
 8018d88:	d206      	bcs.n	8018d98 <__hexnan+0x64>
 8018d8a:	2d07      	cmp	r5, #7
 8018d8c:	dc04      	bgt.n	8018d98 <__hexnan+0x64>
 8018d8e:	462a      	mov	r2, r5
 8018d90:	4649      	mov	r1, r9
 8018d92:	4620      	mov	r0, r4
 8018d94:	f7ff ffa8 	bl	8018ce8 <L_shift>
 8018d98:	4544      	cmp	r4, r8
 8018d9a:	d950      	bls.n	8018e3e <__hexnan+0x10a>
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	f1a4 0904 	sub.w	r9, r4, #4
 8018da2:	f844 3c04 	str.w	r3, [r4, #-4]
 8018da6:	f8cd b008 	str.w	fp, [sp, #8]
 8018daa:	464c      	mov	r4, r9
 8018dac:	461d      	mov	r5, r3
 8018dae:	9a03      	ldr	r2, [sp, #12]
 8018db0:	e7d7      	b.n	8018d62 <__hexnan+0x2e>
 8018db2:	2929      	cmp	r1, #41	; 0x29
 8018db4:	d156      	bne.n	8018e64 <__hexnan+0x130>
 8018db6:	3202      	adds	r2, #2
 8018db8:	f8ca 2000 	str.w	r2, [sl]
 8018dbc:	f1bb 0f00 	cmp.w	fp, #0
 8018dc0:	d050      	beq.n	8018e64 <__hexnan+0x130>
 8018dc2:	454c      	cmp	r4, r9
 8018dc4:	d206      	bcs.n	8018dd4 <__hexnan+0xa0>
 8018dc6:	2d07      	cmp	r5, #7
 8018dc8:	dc04      	bgt.n	8018dd4 <__hexnan+0xa0>
 8018dca:	462a      	mov	r2, r5
 8018dcc:	4649      	mov	r1, r9
 8018dce:	4620      	mov	r0, r4
 8018dd0:	f7ff ff8a 	bl	8018ce8 <L_shift>
 8018dd4:	4544      	cmp	r4, r8
 8018dd6:	d934      	bls.n	8018e42 <__hexnan+0x10e>
 8018dd8:	f1a8 0204 	sub.w	r2, r8, #4
 8018ddc:	4623      	mov	r3, r4
 8018dde:	f853 1b04 	ldr.w	r1, [r3], #4
 8018de2:	f842 1f04 	str.w	r1, [r2, #4]!
 8018de6:	429f      	cmp	r7, r3
 8018de8:	d2f9      	bcs.n	8018dde <__hexnan+0xaa>
 8018dea:	1b3b      	subs	r3, r7, r4
 8018dec:	f023 0303 	bic.w	r3, r3, #3
 8018df0:	3304      	adds	r3, #4
 8018df2:	3401      	adds	r4, #1
 8018df4:	3e03      	subs	r6, #3
 8018df6:	42b4      	cmp	r4, r6
 8018df8:	bf88      	it	hi
 8018dfa:	2304      	movhi	r3, #4
 8018dfc:	4443      	add	r3, r8
 8018dfe:	2200      	movs	r2, #0
 8018e00:	f843 2b04 	str.w	r2, [r3], #4
 8018e04:	429f      	cmp	r7, r3
 8018e06:	d2fb      	bcs.n	8018e00 <__hexnan+0xcc>
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	b91b      	cbnz	r3, 8018e14 <__hexnan+0xe0>
 8018e0c:	4547      	cmp	r7, r8
 8018e0e:	d127      	bne.n	8018e60 <__hexnan+0x12c>
 8018e10:	2301      	movs	r3, #1
 8018e12:	603b      	str	r3, [r7, #0]
 8018e14:	2005      	movs	r0, #5
 8018e16:	e026      	b.n	8018e66 <__hexnan+0x132>
 8018e18:	3501      	adds	r5, #1
 8018e1a:	2d08      	cmp	r5, #8
 8018e1c:	f10b 0b01 	add.w	fp, fp, #1
 8018e20:	dd06      	ble.n	8018e30 <__hexnan+0xfc>
 8018e22:	4544      	cmp	r4, r8
 8018e24:	d9c3      	bls.n	8018dae <__hexnan+0x7a>
 8018e26:	2300      	movs	r3, #0
 8018e28:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e2c:	2501      	movs	r5, #1
 8018e2e:	3c04      	subs	r4, #4
 8018e30:	6822      	ldr	r2, [r4, #0]
 8018e32:	f000 000f 	and.w	r0, r0, #15
 8018e36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018e3a:	6022      	str	r2, [r4, #0]
 8018e3c:	e7b7      	b.n	8018dae <__hexnan+0x7a>
 8018e3e:	2508      	movs	r5, #8
 8018e40:	e7b5      	b.n	8018dae <__hexnan+0x7a>
 8018e42:	9b01      	ldr	r3, [sp, #4]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d0df      	beq.n	8018e08 <__hexnan+0xd4>
 8018e48:	f04f 32ff 	mov.w	r2, #4294967295
 8018e4c:	f1c3 0320 	rsb	r3, r3, #32
 8018e50:	fa22 f303 	lsr.w	r3, r2, r3
 8018e54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018e58:	401a      	ands	r2, r3
 8018e5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8018e5e:	e7d3      	b.n	8018e08 <__hexnan+0xd4>
 8018e60:	3f04      	subs	r7, #4
 8018e62:	e7d1      	b.n	8018e08 <__hexnan+0xd4>
 8018e64:	2004      	movs	r0, #4
 8018e66:	b007      	add	sp, #28
 8018e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e6c <_localeconv_r>:
 8018e6c:	4800      	ldr	r0, [pc, #0]	; (8018e70 <_localeconv_r+0x4>)
 8018e6e:	4770      	bx	lr
 8018e70:	20000198 	.word	0x20000198

08018e74 <_lseek_r>:
 8018e74:	b538      	push	{r3, r4, r5, lr}
 8018e76:	4d07      	ldr	r5, [pc, #28]	; (8018e94 <_lseek_r+0x20>)
 8018e78:	4604      	mov	r4, r0
 8018e7a:	4608      	mov	r0, r1
 8018e7c:	4611      	mov	r1, r2
 8018e7e:	2200      	movs	r2, #0
 8018e80:	602a      	str	r2, [r5, #0]
 8018e82:	461a      	mov	r2, r3
 8018e84:	f7e9 facf 	bl	8002426 <_lseek>
 8018e88:	1c43      	adds	r3, r0, #1
 8018e8a:	d102      	bne.n	8018e92 <_lseek_r+0x1e>
 8018e8c:	682b      	ldr	r3, [r5, #0]
 8018e8e:	b103      	cbz	r3, 8018e92 <_lseek_r+0x1e>
 8018e90:	6023      	str	r3, [r4, #0]
 8018e92:	bd38      	pop	{r3, r4, r5, pc}
 8018e94:	20004130 	.word	0x20004130

08018e98 <malloc>:
 8018e98:	4b02      	ldr	r3, [pc, #8]	; (8018ea4 <malloc+0xc>)
 8018e9a:	4601      	mov	r1, r0
 8018e9c:	6818      	ldr	r0, [r3, #0]
 8018e9e:	f000 bd59 	b.w	8019954 <_malloc_r>
 8018ea2:	bf00      	nop
 8018ea4:	20000040 	.word	0x20000040

08018ea8 <__ascii_mbtowc>:
 8018ea8:	b082      	sub	sp, #8
 8018eaa:	b901      	cbnz	r1, 8018eae <__ascii_mbtowc+0x6>
 8018eac:	a901      	add	r1, sp, #4
 8018eae:	b142      	cbz	r2, 8018ec2 <__ascii_mbtowc+0x1a>
 8018eb0:	b14b      	cbz	r3, 8018ec6 <__ascii_mbtowc+0x1e>
 8018eb2:	7813      	ldrb	r3, [r2, #0]
 8018eb4:	600b      	str	r3, [r1, #0]
 8018eb6:	7812      	ldrb	r2, [r2, #0]
 8018eb8:	1e10      	subs	r0, r2, #0
 8018eba:	bf18      	it	ne
 8018ebc:	2001      	movne	r0, #1
 8018ebe:	b002      	add	sp, #8
 8018ec0:	4770      	bx	lr
 8018ec2:	4610      	mov	r0, r2
 8018ec4:	e7fb      	b.n	8018ebe <__ascii_mbtowc+0x16>
 8018ec6:	f06f 0001 	mvn.w	r0, #1
 8018eca:	e7f8      	b.n	8018ebe <__ascii_mbtowc+0x16>

08018ecc <_Balloc>:
 8018ecc:	b570      	push	{r4, r5, r6, lr}
 8018ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	460d      	mov	r5, r1
 8018ed4:	b976      	cbnz	r6, 8018ef4 <_Balloc+0x28>
 8018ed6:	2010      	movs	r0, #16
 8018ed8:	f7ff ffde 	bl	8018e98 <malloc>
 8018edc:	4602      	mov	r2, r0
 8018ede:	6260      	str	r0, [r4, #36]	; 0x24
 8018ee0:	b920      	cbnz	r0, 8018eec <_Balloc+0x20>
 8018ee2:	4b18      	ldr	r3, [pc, #96]	; (8018f44 <_Balloc+0x78>)
 8018ee4:	4818      	ldr	r0, [pc, #96]	; (8018f48 <_Balloc+0x7c>)
 8018ee6:	2166      	movs	r1, #102	; 0x66
 8018ee8:	f001 fb5a 	bl	801a5a0 <__assert_func>
 8018eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ef0:	6006      	str	r6, [r0, #0]
 8018ef2:	60c6      	str	r6, [r0, #12]
 8018ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018ef6:	68f3      	ldr	r3, [r6, #12]
 8018ef8:	b183      	cbz	r3, 8018f1c <_Balloc+0x50>
 8018efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018efc:	68db      	ldr	r3, [r3, #12]
 8018efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018f02:	b9b8      	cbnz	r0, 8018f34 <_Balloc+0x68>
 8018f04:	2101      	movs	r1, #1
 8018f06:	fa01 f605 	lsl.w	r6, r1, r5
 8018f0a:	1d72      	adds	r2, r6, #5
 8018f0c:	0092      	lsls	r2, r2, #2
 8018f0e:	4620      	mov	r0, r4
 8018f10:	f000 fc9d 	bl	801984e <_calloc_r>
 8018f14:	b160      	cbz	r0, 8018f30 <_Balloc+0x64>
 8018f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018f1a:	e00e      	b.n	8018f3a <_Balloc+0x6e>
 8018f1c:	2221      	movs	r2, #33	; 0x21
 8018f1e:	2104      	movs	r1, #4
 8018f20:	4620      	mov	r0, r4
 8018f22:	f000 fc94 	bl	801984e <_calloc_r>
 8018f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f28:	60f0      	str	r0, [r6, #12]
 8018f2a:	68db      	ldr	r3, [r3, #12]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d1e4      	bne.n	8018efa <_Balloc+0x2e>
 8018f30:	2000      	movs	r0, #0
 8018f32:	bd70      	pop	{r4, r5, r6, pc}
 8018f34:	6802      	ldr	r2, [r0, #0]
 8018f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018f40:	e7f7      	b.n	8018f32 <_Balloc+0x66>
 8018f42:	bf00      	nop
 8018f44:	0801bbce 	.word	0x0801bbce
 8018f48:	0801bccc 	.word	0x0801bccc

08018f4c <_Bfree>:
 8018f4c:	b570      	push	{r4, r5, r6, lr}
 8018f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018f50:	4605      	mov	r5, r0
 8018f52:	460c      	mov	r4, r1
 8018f54:	b976      	cbnz	r6, 8018f74 <_Bfree+0x28>
 8018f56:	2010      	movs	r0, #16
 8018f58:	f7ff ff9e 	bl	8018e98 <malloc>
 8018f5c:	4602      	mov	r2, r0
 8018f5e:	6268      	str	r0, [r5, #36]	; 0x24
 8018f60:	b920      	cbnz	r0, 8018f6c <_Bfree+0x20>
 8018f62:	4b09      	ldr	r3, [pc, #36]	; (8018f88 <_Bfree+0x3c>)
 8018f64:	4809      	ldr	r0, [pc, #36]	; (8018f8c <_Bfree+0x40>)
 8018f66:	218a      	movs	r1, #138	; 0x8a
 8018f68:	f001 fb1a 	bl	801a5a0 <__assert_func>
 8018f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f70:	6006      	str	r6, [r0, #0]
 8018f72:	60c6      	str	r6, [r0, #12]
 8018f74:	b13c      	cbz	r4, 8018f86 <_Bfree+0x3a>
 8018f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018f78:	6862      	ldr	r2, [r4, #4]
 8018f7a:	68db      	ldr	r3, [r3, #12]
 8018f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f80:	6021      	str	r1, [r4, #0]
 8018f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f86:	bd70      	pop	{r4, r5, r6, pc}
 8018f88:	0801bbce 	.word	0x0801bbce
 8018f8c:	0801bccc 	.word	0x0801bccc

08018f90 <__multadd>:
 8018f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f94:	690d      	ldr	r5, [r1, #16]
 8018f96:	4607      	mov	r7, r0
 8018f98:	460c      	mov	r4, r1
 8018f9a:	461e      	mov	r6, r3
 8018f9c:	f101 0c14 	add.w	ip, r1, #20
 8018fa0:	2000      	movs	r0, #0
 8018fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8018fa6:	b299      	uxth	r1, r3
 8018fa8:	fb02 6101 	mla	r1, r2, r1, r6
 8018fac:	0c1e      	lsrs	r6, r3, #16
 8018fae:	0c0b      	lsrs	r3, r1, #16
 8018fb0:	fb02 3306 	mla	r3, r2, r6, r3
 8018fb4:	b289      	uxth	r1, r1
 8018fb6:	3001      	adds	r0, #1
 8018fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018fbc:	4285      	cmp	r5, r0
 8018fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8018fc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018fc6:	dcec      	bgt.n	8018fa2 <__multadd+0x12>
 8018fc8:	b30e      	cbz	r6, 801900e <__multadd+0x7e>
 8018fca:	68a3      	ldr	r3, [r4, #8]
 8018fcc:	42ab      	cmp	r3, r5
 8018fce:	dc19      	bgt.n	8019004 <__multadd+0x74>
 8018fd0:	6861      	ldr	r1, [r4, #4]
 8018fd2:	4638      	mov	r0, r7
 8018fd4:	3101      	adds	r1, #1
 8018fd6:	f7ff ff79 	bl	8018ecc <_Balloc>
 8018fda:	4680      	mov	r8, r0
 8018fdc:	b928      	cbnz	r0, 8018fea <__multadd+0x5a>
 8018fde:	4602      	mov	r2, r0
 8018fe0:	4b0c      	ldr	r3, [pc, #48]	; (8019014 <__multadd+0x84>)
 8018fe2:	480d      	ldr	r0, [pc, #52]	; (8019018 <__multadd+0x88>)
 8018fe4:	21b5      	movs	r1, #181	; 0xb5
 8018fe6:	f001 fadb 	bl	801a5a0 <__assert_func>
 8018fea:	6922      	ldr	r2, [r4, #16]
 8018fec:	3202      	adds	r2, #2
 8018fee:	f104 010c 	add.w	r1, r4, #12
 8018ff2:	0092      	lsls	r2, r2, #2
 8018ff4:	300c      	adds	r0, #12
 8018ff6:	f7fc ff43 	bl	8015e80 <memcpy>
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	4638      	mov	r0, r7
 8018ffe:	f7ff ffa5 	bl	8018f4c <_Bfree>
 8019002:	4644      	mov	r4, r8
 8019004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019008:	3501      	adds	r5, #1
 801900a:	615e      	str	r6, [r3, #20]
 801900c:	6125      	str	r5, [r4, #16]
 801900e:	4620      	mov	r0, r4
 8019010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019014:	0801bc40 	.word	0x0801bc40
 8019018:	0801bccc 	.word	0x0801bccc

0801901c <__s2b>:
 801901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019020:	460c      	mov	r4, r1
 8019022:	4615      	mov	r5, r2
 8019024:	461f      	mov	r7, r3
 8019026:	2209      	movs	r2, #9
 8019028:	3308      	adds	r3, #8
 801902a:	4606      	mov	r6, r0
 801902c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019030:	2100      	movs	r1, #0
 8019032:	2201      	movs	r2, #1
 8019034:	429a      	cmp	r2, r3
 8019036:	db09      	blt.n	801904c <__s2b+0x30>
 8019038:	4630      	mov	r0, r6
 801903a:	f7ff ff47 	bl	8018ecc <_Balloc>
 801903e:	b940      	cbnz	r0, 8019052 <__s2b+0x36>
 8019040:	4602      	mov	r2, r0
 8019042:	4b19      	ldr	r3, [pc, #100]	; (80190a8 <__s2b+0x8c>)
 8019044:	4819      	ldr	r0, [pc, #100]	; (80190ac <__s2b+0x90>)
 8019046:	21ce      	movs	r1, #206	; 0xce
 8019048:	f001 faaa 	bl	801a5a0 <__assert_func>
 801904c:	0052      	lsls	r2, r2, #1
 801904e:	3101      	adds	r1, #1
 8019050:	e7f0      	b.n	8019034 <__s2b+0x18>
 8019052:	9b08      	ldr	r3, [sp, #32]
 8019054:	6143      	str	r3, [r0, #20]
 8019056:	2d09      	cmp	r5, #9
 8019058:	f04f 0301 	mov.w	r3, #1
 801905c:	6103      	str	r3, [r0, #16]
 801905e:	dd16      	ble.n	801908e <__s2b+0x72>
 8019060:	f104 0909 	add.w	r9, r4, #9
 8019064:	46c8      	mov	r8, r9
 8019066:	442c      	add	r4, r5
 8019068:	f818 3b01 	ldrb.w	r3, [r8], #1
 801906c:	4601      	mov	r1, r0
 801906e:	3b30      	subs	r3, #48	; 0x30
 8019070:	220a      	movs	r2, #10
 8019072:	4630      	mov	r0, r6
 8019074:	f7ff ff8c 	bl	8018f90 <__multadd>
 8019078:	45a0      	cmp	r8, r4
 801907a:	d1f5      	bne.n	8019068 <__s2b+0x4c>
 801907c:	f1a5 0408 	sub.w	r4, r5, #8
 8019080:	444c      	add	r4, r9
 8019082:	1b2d      	subs	r5, r5, r4
 8019084:	1963      	adds	r3, r4, r5
 8019086:	42bb      	cmp	r3, r7
 8019088:	db04      	blt.n	8019094 <__s2b+0x78>
 801908a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801908e:	340a      	adds	r4, #10
 8019090:	2509      	movs	r5, #9
 8019092:	e7f6      	b.n	8019082 <__s2b+0x66>
 8019094:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019098:	4601      	mov	r1, r0
 801909a:	3b30      	subs	r3, #48	; 0x30
 801909c:	220a      	movs	r2, #10
 801909e:	4630      	mov	r0, r6
 80190a0:	f7ff ff76 	bl	8018f90 <__multadd>
 80190a4:	e7ee      	b.n	8019084 <__s2b+0x68>
 80190a6:	bf00      	nop
 80190a8:	0801bc40 	.word	0x0801bc40
 80190ac:	0801bccc 	.word	0x0801bccc

080190b0 <__hi0bits>:
 80190b0:	0c03      	lsrs	r3, r0, #16
 80190b2:	041b      	lsls	r3, r3, #16
 80190b4:	b9d3      	cbnz	r3, 80190ec <__hi0bits+0x3c>
 80190b6:	0400      	lsls	r0, r0, #16
 80190b8:	2310      	movs	r3, #16
 80190ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80190be:	bf04      	itt	eq
 80190c0:	0200      	lsleq	r0, r0, #8
 80190c2:	3308      	addeq	r3, #8
 80190c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80190c8:	bf04      	itt	eq
 80190ca:	0100      	lsleq	r0, r0, #4
 80190cc:	3304      	addeq	r3, #4
 80190ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80190d2:	bf04      	itt	eq
 80190d4:	0080      	lsleq	r0, r0, #2
 80190d6:	3302      	addeq	r3, #2
 80190d8:	2800      	cmp	r0, #0
 80190da:	db05      	blt.n	80190e8 <__hi0bits+0x38>
 80190dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80190e0:	f103 0301 	add.w	r3, r3, #1
 80190e4:	bf08      	it	eq
 80190e6:	2320      	moveq	r3, #32
 80190e8:	4618      	mov	r0, r3
 80190ea:	4770      	bx	lr
 80190ec:	2300      	movs	r3, #0
 80190ee:	e7e4      	b.n	80190ba <__hi0bits+0xa>

080190f0 <__lo0bits>:
 80190f0:	6803      	ldr	r3, [r0, #0]
 80190f2:	f013 0207 	ands.w	r2, r3, #7
 80190f6:	4601      	mov	r1, r0
 80190f8:	d00b      	beq.n	8019112 <__lo0bits+0x22>
 80190fa:	07da      	lsls	r2, r3, #31
 80190fc:	d423      	bmi.n	8019146 <__lo0bits+0x56>
 80190fe:	0798      	lsls	r0, r3, #30
 8019100:	bf49      	itett	mi
 8019102:	085b      	lsrmi	r3, r3, #1
 8019104:	089b      	lsrpl	r3, r3, #2
 8019106:	2001      	movmi	r0, #1
 8019108:	600b      	strmi	r3, [r1, #0]
 801910a:	bf5c      	itt	pl
 801910c:	600b      	strpl	r3, [r1, #0]
 801910e:	2002      	movpl	r0, #2
 8019110:	4770      	bx	lr
 8019112:	b298      	uxth	r0, r3
 8019114:	b9a8      	cbnz	r0, 8019142 <__lo0bits+0x52>
 8019116:	0c1b      	lsrs	r3, r3, #16
 8019118:	2010      	movs	r0, #16
 801911a:	b2da      	uxtb	r2, r3
 801911c:	b90a      	cbnz	r2, 8019122 <__lo0bits+0x32>
 801911e:	3008      	adds	r0, #8
 8019120:	0a1b      	lsrs	r3, r3, #8
 8019122:	071a      	lsls	r2, r3, #28
 8019124:	bf04      	itt	eq
 8019126:	091b      	lsreq	r3, r3, #4
 8019128:	3004      	addeq	r0, #4
 801912a:	079a      	lsls	r2, r3, #30
 801912c:	bf04      	itt	eq
 801912e:	089b      	lsreq	r3, r3, #2
 8019130:	3002      	addeq	r0, #2
 8019132:	07da      	lsls	r2, r3, #31
 8019134:	d403      	bmi.n	801913e <__lo0bits+0x4e>
 8019136:	085b      	lsrs	r3, r3, #1
 8019138:	f100 0001 	add.w	r0, r0, #1
 801913c:	d005      	beq.n	801914a <__lo0bits+0x5a>
 801913e:	600b      	str	r3, [r1, #0]
 8019140:	4770      	bx	lr
 8019142:	4610      	mov	r0, r2
 8019144:	e7e9      	b.n	801911a <__lo0bits+0x2a>
 8019146:	2000      	movs	r0, #0
 8019148:	4770      	bx	lr
 801914a:	2020      	movs	r0, #32
 801914c:	4770      	bx	lr
	...

08019150 <__i2b>:
 8019150:	b510      	push	{r4, lr}
 8019152:	460c      	mov	r4, r1
 8019154:	2101      	movs	r1, #1
 8019156:	f7ff feb9 	bl	8018ecc <_Balloc>
 801915a:	4602      	mov	r2, r0
 801915c:	b928      	cbnz	r0, 801916a <__i2b+0x1a>
 801915e:	4b05      	ldr	r3, [pc, #20]	; (8019174 <__i2b+0x24>)
 8019160:	4805      	ldr	r0, [pc, #20]	; (8019178 <__i2b+0x28>)
 8019162:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019166:	f001 fa1b 	bl	801a5a0 <__assert_func>
 801916a:	2301      	movs	r3, #1
 801916c:	6144      	str	r4, [r0, #20]
 801916e:	6103      	str	r3, [r0, #16]
 8019170:	bd10      	pop	{r4, pc}
 8019172:	bf00      	nop
 8019174:	0801bc40 	.word	0x0801bc40
 8019178:	0801bccc 	.word	0x0801bccc

0801917c <__multiply>:
 801917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019180:	4691      	mov	r9, r2
 8019182:	690a      	ldr	r2, [r1, #16]
 8019184:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019188:	429a      	cmp	r2, r3
 801918a:	bfb8      	it	lt
 801918c:	460b      	movlt	r3, r1
 801918e:	460c      	mov	r4, r1
 8019190:	bfbc      	itt	lt
 8019192:	464c      	movlt	r4, r9
 8019194:	4699      	movlt	r9, r3
 8019196:	6927      	ldr	r7, [r4, #16]
 8019198:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801919c:	68a3      	ldr	r3, [r4, #8]
 801919e:	6861      	ldr	r1, [r4, #4]
 80191a0:	eb07 060a 	add.w	r6, r7, sl
 80191a4:	42b3      	cmp	r3, r6
 80191a6:	b085      	sub	sp, #20
 80191a8:	bfb8      	it	lt
 80191aa:	3101      	addlt	r1, #1
 80191ac:	f7ff fe8e 	bl	8018ecc <_Balloc>
 80191b0:	b930      	cbnz	r0, 80191c0 <__multiply+0x44>
 80191b2:	4602      	mov	r2, r0
 80191b4:	4b44      	ldr	r3, [pc, #272]	; (80192c8 <__multiply+0x14c>)
 80191b6:	4845      	ldr	r0, [pc, #276]	; (80192cc <__multiply+0x150>)
 80191b8:	f240 115d 	movw	r1, #349	; 0x15d
 80191bc:	f001 f9f0 	bl	801a5a0 <__assert_func>
 80191c0:	f100 0514 	add.w	r5, r0, #20
 80191c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80191c8:	462b      	mov	r3, r5
 80191ca:	2200      	movs	r2, #0
 80191cc:	4543      	cmp	r3, r8
 80191ce:	d321      	bcc.n	8019214 <__multiply+0x98>
 80191d0:	f104 0314 	add.w	r3, r4, #20
 80191d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80191d8:	f109 0314 	add.w	r3, r9, #20
 80191dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80191e0:	9202      	str	r2, [sp, #8]
 80191e2:	1b3a      	subs	r2, r7, r4
 80191e4:	3a15      	subs	r2, #21
 80191e6:	f022 0203 	bic.w	r2, r2, #3
 80191ea:	3204      	adds	r2, #4
 80191ec:	f104 0115 	add.w	r1, r4, #21
 80191f0:	428f      	cmp	r7, r1
 80191f2:	bf38      	it	cc
 80191f4:	2204      	movcc	r2, #4
 80191f6:	9201      	str	r2, [sp, #4]
 80191f8:	9a02      	ldr	r2, [sp, #8]
 80191fa:	9303      	str	r3, [sp, #12]
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d80c      	bhi.n	801921a <__multiply+0x9e>
 8019200:	2e00      	cmp	r6, #0
 8019202:	dd03      	ble.n	801920c <__multiply+0x90>
 8019204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019208:	2b00      	cmp	r3, #0
 801920a:	d05a      	beq.n	80192c2 <__multiply+0x146>
 801920c:	6106      	str	r6, [r0, #16]
 801920e:	b005      	add	sp, #20
 8019210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019214:	f843 2b04 	str.w	r2, [r3], #4
 8019218:	e7d8      	b.n	80191cc <__multiply+0x50>
 801921a:	f8b3 a000 	ldrh.w	sl, [r3]
 801921e:	f1ba 0f00 	cmp.w	sl, #0
 8019222:	d024      	beq.n	801926e <__multiply+0xf2>
 8019224:	f104 0e14 	add.w	lr, r4, #20
 8019228:	46a9      	mov	r9, r5
 801922a:	f04f 0c00 	mov.w	ip, #0
 801922e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019232:	f8d9 1000 	ldr.w	r1, [r9]
 8019236:	fa1f fb82 	uxth.w	fp, r2
 801923a:	b289      	uxth	r1, r1
 801923c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019240:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019244:	f8d9 2000 	ldr.w	r2, [r9]
 8019248:	4461      	add	r1, ip
 801924a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801924e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019252:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019256:	b289      	uxth	r1, r1
 8019258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801925c:	4577      	cmp	r7, lr
 801925e:	f849 1b04 	str.w	r1, [r9], #4
 8019262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019266:	d8e2      	bhi.n	801922e <__multiply+0xb2>
 8019268:	9a01      	ldr	r2, [sp, #4]
 801926a:	f845 c002 	str.w	ip, [r5, r2]
 801926e:	9a03      	ldr	r2, [sp, #12]
 8019270:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019274:	3304      	adds	r3, #4
 8019276:	f1b9 0f00 	cmp.w	r9, #0
 801927a:	d020      	beq.n	80192be <__multiply+0x142>
 801927c:	6829      	ldr	r1, [r5, #0]
 801927e:	f104 0c14 	add.w	ip, r4, #20
 8019282:	46ae      	mov	lr, r5
 8019284:	f04f 0a00 	mov.w	sl, #0
 8019288:	f8bc b000 	ldrh.w	fp, [ip]
 801928c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019290:	fb09 220b 	mla	r2, r9, fp, r2
 8019294:	4492      	add	sl, r2
 8019296:	b289      	uxth	r1, r1
 8019298:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801929c:	f84e 1b04 	str.w	r1, [lr], #4
 80192a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80192a4:	f8be 1000 	ldrh.w	r1, [lr]
 80192a8:	0c12      	lsrs	r2, r2, #16
 80192aa:	fb09 1102 	mla	r1, r9, r2, r1
 80192ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80192b2:	4567      	cmp	r7, ip
 80192b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80192b8:	d8e6      	bhi.n	8019288 <__multiply+0x10c>
 80192ba:	9a01      	ldr	r2, [sp, #4]
 80192bc:	50a9      	str	r1, [r5, r2]
 80192be:	3504      	adds	r5, #4
 80192c0:	e79a      	b.n	80191f8 <__multiply+0x7c>
 80192c2:	3e01      	subs	r6, #1
 80192c4:	e79c      	b.n	8019200 <__multiply+0x84>
 80192c6:	bf00      	nop
 80192c8:	0801bc40 	.word	0x0801bc40
 80192cc:	0801bccc 	.word	0x0801bccc

080192d0 <__pow5mult>:
 80192d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192d4:	4615      	mov	r5, r2
 80192d6:	f012 0203 	ands.w	r2, r2, #3
 80192da:	4606      	mov	r6, r0
 80192dc:	460f      	mov	r7, r1
 80192de:	d007      	beq.n	80192f0 <__pow5mult+0x20>
 80192e0:	4c25      	ldr	r4, [pc, #148]	; (8019378 <__pow5mult+0xa8>)
 80192e2:	3a01      	subs	r2, #1
 80192e4:	2300      	movs	r3, #0
 80192e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80192ea:	f7ff fe51 	bl	8018f90 <__multadd>
 80192ee:	4607      	mov	r7, r0
 80192f0:	10ad      	asrs	r5, r5, #2
 80192f2:	d03d      	beq.n	8019370 <__pow5mult+0xa0>
 80192f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80192f6:	b97c      	cbnz	r4, 8019318 <__pow5mult+0x48>
 80192f8:	2010      	movs	r0, #16
 80192fa:	f7ff fdcd 	bl	8018e98 <malloc>
 80192fe:	4602      	mov	r2, r0
 8019300:	6270      	str	r0, [r6, #36]	; 0x24
 8019302:	b928      	cbnz	r0, 8019310 <__pow5mult+0x40>
 8019304:	4b1d      	ldr	r3, [pc, #116]	; (801937c <__pow5mult+0xac>)
 8019306:	481e      	ldr	r0, [pc, #120]	; (8019380 <__pow5mult+0xb0>)
 8019308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801930c:	f001 f948 	bl	801a5a0 <__assert_func>
 8019310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019314:	6004      	str	r4, [r0, #0]
 8019316:	60c4      	str	r4, [r0, #12]
 8019318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801931c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019320:	b94c      	cbnz	r4, 8019336 <__pow5mult+0x66>
 8019322:	f240 2171 	movw	r1, #625	; 0x271
 8019326:	4630      	mov	r0, r6
 8019328:	f7ff ff12 	bl	8019150 <__i2b>
 801932c:	2300      	movs	r3, #0
 801932e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019332:	4604      	mov	r4, r0
 8019334:	6003      	str	r3, [r0, #0]
 8019336:	f04f 0900 	mov.w	r9, #0
 801933a:	07eb      	lsls	r3, r5, #31
 801933c:	d50a      	bpl.n	8019354 <__pow5mult+0x84>
 801933e:	4639      	mov	r1, r7
 8019340:	4622      	mov	r2, r4
 8019342:	4630      	mov	r0, r6
 8019344:	f7ff ff1a 	bl	801917c <__multiply>
 8019348:	4639      	mov	r1, r7
 801934a:	4680      	mov	r8, r0
 801934c:	4630      	mov	r0, r6
 801934e:	f7ff fdfd 	bl	8018f4c <_Bfree>
 8019352:	4647      	mov	r7, r8
 8019354:	106d      	asrs	r5, r5, #1
 8019356:	d00b      	beq.n	8019370 <__pow5mult+0xa0>
 8019358:	6820      	ldr	r0, [r4, #0]
 801935a:	b938      	cbnz	r0, 801936c <__pow5mult+0x9c>
 801935c:	4622      	mov	r2, r4
 801935e:	4621      	mov	r1, r4
 8019360:	4630      	mov	r0, r6
 8019362:	f7ff ff0b 	bl	801917c <__multiply>
 8019366:	6020      	str	r0, [r4, #0]
 8019368:	f8c0 9000 	str.w	r9, [r0]
 801936c:	4604      	mov	r4, r0
 801936e:	e7e4      	b.n	801933a <__pow5mult+0x6a>
 8019370:	4638      	mov	r0, r7
 8019372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019376:	bf00      	nop
 8019378:	0801be18 	.word	0x0801be18
 801937c:	0801bbce 	.word	0x0801bbce
 8019380:	0801bccc 	.word	0x0801bccc

08019384 <__lshift>:
 8019384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019388:	460c      	mov	r4, r1
 801938a:	6849      	ldr	r1, [r1, #4]
 801938c:	6923      	ldr	r3, [r4, #16]
 801938e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019392:	68a3      	ldr	r3, [r4, #8]
 8019394:	4607      	mov	r7, r0
 8019396:	4691      	mov	r9, r2
 8019398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801939c:	f108 0601 	add.w	r6, r8, #1
 80193a0:	42b3      	cmp	r3, r6
 80193a2:	db0b      	blt.n	80193bc <__lshift+0x38>
 80193a4:	4638      	mov	r0, r7
 80193a6:	f7ff fd91 	bl	8018ecc <_Balloc>
 80193aa:	4605      	mov	r5, r0
 80193ac:	b948      	cbnz	r0, 80193c2 <__lshift+0x3e>
 80193ae:	4602      	mov	r2, r0
 80193b0:	4b2a      	ldr	r3, [pc, #168]	; (801945c <__lshift+0xd8>)
 80193b2:	482b      	ldr	r0, [pc, #172]	; (8019460 <__lshift+0xdc>)
 80193b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80193b8:	f001 f8f2 	bl	801a5a0 <__assert_func>
 80193bc:	3101      	adds	r1, #1
 80193be:	005b      	lsls	r3, r3, #1
 80193c0:	e7ee      	b.n	80193a0 <__lshift+0x1c>
 80193c2:	2300      	movs	r3, #0
 80193c4:	f100 0114 	add.w	r1, r0, #20
 80193c8:	f100 0210 	add.w	r2, r0, #16
 80193cc:	4618      	mov	r0, r3
 80193ce:	4553      	cmp	r3, sl
 80193d0:	db37      	blt.n	8019442 <__lshift+0xbe>
 80193d2:	6920      	ldr	r0, [r4, #16]
 80193d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80193d8:	f104 0314 	add.w	r3, r4, #20
 80193dc:	f019 091f 	ands.w	r9, r9, #31
 80193e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80193e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80193e8:	d02f      	beq.n	801944a <__lshift+0xc6>
 80193ea:	f1c9 0e20 	rsb	lr, r9, #32
 80193ee:	468a      	mov	sl, r1
 80193f0:	f04f 0c00 	mov.w	ip, #0
 80193f4:	681a      	ldr	r2, [r3, #0]
 80193f6:	fa02 f209 	lsl.w	r2, r2, r9
 80193fa:	ea42 020c 	orr.w	r2, r2, ip
 80193fe:	f84a 2b04 	str.w	r2, [sl], #4
 8019402:	f853 2b04 	ldr.w	r2, [r3], #4
 8019406:	4298      	cmp	r0, r3
 8019408:	fa22 fc0e 	lsr.w	ip, r2, lr
 801940c:	d8f2      	bhi.n	80193f4 <__lshift+0x70>
 801940e:	1b03      	subs	r3, r0, r4
 8019410:	3b15      	subs	r3, #21
 8019412:	f023 0303 	bic.w	r3, r3, #3
 8019416:	3304      	adds	r3, #4
 8019418:	f104 0215 	add.w	r2, r4, #21
 801941c:	4290      	cmp	r0, r2
 801941e:	bf38      	it	cc
 8019420:	2304      	movcc	r3, #4
 8019422:	f841 c003 	str.w	ip, [r1, r3]
 8019426:	f1bc 0f00 	cmp.w	ip, #0
 801942a:	d001      	beq.n	8019430 <__lshift+0xac>
 801942c:	f108 0602 	add.w	r6, r8, #2
 8019430:	3e01      	subs	r6, #1
 8019432:	4638      	mov	r0, r7
 8019434:	612e      	str	r6, [r5, #16]
 8019436:	4621      	mov	r1, r4
 8019438:	f7ff fd88 	bl	8018f4c <_Bfree>
 801943c:	4628      	mov	r0, r5
 801943e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019442:	f842 0f04 	str.w	r0, [r2, #4]!
 8019446:	3301      	adds	r3, #1
 8019448:	e7c1      	b.n	80193ce <__lshift+0x4a>
 801944a:	3904      	subs	r1, #4
 801944c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019450:	f841 2f04 	str.w	r2, [r1, #4]!
 8019454:	4298      	cmp	r0, r3
 8019456:	d8f9      	bhi.n	801944c <__lshift+0xc8>
 8019458:	e7ea      	b.n	8019430 <__lshift+0xac>
 801945a:	bf00      	nop
 801945c:	0801bc40 	.word	0x0801bc40
 8019460:	0801bccc 	.word	0x0801bccc

08019464 <__mcmp>:
 8019464:	b530      	push	{r4, r5, lr}
 8019466:	6902      	ldr	r2, [r0, #16]
 8019468:	690c      	ldr	r4, [r1, #16]
 801946a:	1b12      	subs	r2, r2, r4
 801946c:	d10e      	bne.n	801948c <__mcmp+0x28>
 801946e:	f100 0314 	add.w	r3, r0, #20
 8019472:	3114      	adds	r1, #20
 8019474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801947c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019484:	42a5      	cmp	r5, r4
 8019486:	d003      	beq.n	8019490 <__mcmp+0x2c>
 8019488:	d305      	bcc.n	8019496 <__mcmp+0x32>
 801948a:	2201      	movs	r2, #1
 801948c:	4610      	mov	r0, r2
 801948e:	bd30      	pop	{r4, r5, pc}
 8019490:	4283      	cmp	r3, r0
 8019492:	d3f3      	bcc.n	801947c <__mcmp+0x18>
 8019494:	e7fa      	b.n	801948c <__mcmp+0x28>
 8019496:	f04f 32ff 	mov.w	r2, #4294967295
 801949a:	e7f7      	b.n	801948c <__mcmp+0x28>

0801949c <__mdiff>:
 801949c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194a0:	460c      	mov	r4, r1
 80194a2:	4606      	mov	r6, r0
 80194a4:	4611      	mov	r1, r2
 80194a6:	4620      	mov	r0, r4
 80194a8:	4690      	mov	r8, r2
 80194aa:	f7ff ffdb 	bl	8019464 <__mcmp>
 80194ae:	1e05      	subs	r5, r0, #0
 80194b0:	d110      	bne.n	80194d4 <__mdiff+0x38>
 80194b2:	4629      	mov	r1, r5
 80194b4:	4630      	mov	r0, r6
 80194b6:	f7ff fd09 	bl	8018ecc <_Balloc>
 80194ba:	b930      	cbnz	r0, 80194ca <__mdiff+0x2e>
 80194bc:	4b3a      	ldr	r3, [pc, #232]	; (80195a8 <__mdiff+0x10c>)
 80194be:	4602      	mov	r2, r0
 80194c0:	f240 2132 	movw	r1, #562	; 0x232
 80194c4:	4839      	ldr	r0, [pc, #228]	; (80195ac <__mdiff+0x110>)
 80194c6:	f001 f86b 	bl	801a5a0 <__assert_func>
 80194ca:	2301      	movs	r3, #1
 80194cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80194d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d4:	bfa4      	itt	ge
 80194d6:	4643      	movge	r3, r8
 80194d8:	46a0      	movge	r8, r4
 80194da:	4630      	mov	r0, r6
 80194dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80194e0:	bfa6      	itte	ge
 80194e2:	461c      	movge	r4, r3
 80194e4:	2500      	movge	r5, #0
 80194e6:	2501      	movlt	r5, #1
 80194e8:	f7ff fcf0 	bl	8018ecc <_Balloc>
 80194ec:	b920      	cbnz	r0, 80194f8 <__mdiff+0x5c>
 80194ee:	4b2e      	ldr	r3, [pc, #184]	; (80195a8 <__mdiff+0x10c>)
 80194f0:	4602      	mov	r2, r0
 80194f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80194f6:	e7e5      	b.n	80194c4 <__mdiff+0x28>
 80194f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80194fc:	6926      	ldr	r6, [r4, #16]
 80194fe:	60c5      	str	r5, [r0, #12]
 8019500:	f104 0914 	add.w	r9, r4, #20
 8019504:	f108 0514 	add.w	r5, r8, #20
 8019508:	f100 0e14 	add.w	lr, r0, #20
 801950c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019514:	f108 0210 	add.w	r2, r8, #16
 8019518:	46f2      	mov	sl, lr
 801951a:	2100      	movs	r1, #0
 801951c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019524:	fa1f f883 	uxth.w	r8, r3
 8019528:	fa11 f18b 	uxtah	r1, r1, fp
 801952c:	0c1b      	lsrs	r3, r3, #16
 801952e:	eba1 0808 	sub.w	r8, r1, r8
 8019532:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019536:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801953a:	fa1f f888 	uxth.w	r8, r8
 801953e:	1419      	asrs	r1, r3, #16
 8019540:	454e      	cmp	r6, r9
 8019542:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019546:	f84a 3b04 	str.w	r3, [sl], #4
 801954a:	d8e7      	bhi.n	801951c <__mdiff+0x80>
 801954c:	1b33      	subs	r3, r6, r4
 801954e:	3b15      	subs	r3, #21
 8019550:	f023 0303 	bic.w	r3, r3, #3
 8019554:	3304      	adds	r3, #4
 8019556:	3415      	adds	r4, #21
 8019558:	42a6      	cmp	r6, r4
 801955a:	bf38      	it	cc
 801955c:	2304      	movcc	r3, #4
 801955e:	441d      	add	r5, r3
 8019560:	4473      	add	r3, lr
 8019562:	469e      	mov	lr, r3
 8019564:	462e      	mov	r6, r5
 8019566:	4566      	cmp	r6, ip
 8019568:	d30e      	bcc.n	8019588 <__mdiff+0xec>
 801956a:	f10c 0203 	add.w	r2, ip, #3
 801956e:	1b52      	subs	r2, r2, r5
 8019570:	f022 0203 	bic.w	r2, r2, #3
 8019574:	3d03      	subs	r5, #3
 8019576:	45ac      	cmp	ip, r5
 8019578:	bf38      	it	cc
 801957a:	2200      	movcc	r2, #0
 801957c:	441a      	add	r2, r3
 801957e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019582:	b17b      	cbz	r3, 80195a4 <__mdiff+0x108>
 8019584:	6107      	str	r7, [r0, #16]
 8019586:	e7a3      	b.n	80194d0 <__mdiff+0x34>
 8019588:	f856 8b04 	ldr.w	r8, [r6], #4
 801958c:	fa11 f288 	uxtah	r2, r1, r8
 8019590:	1414      	asrs	r4, r2, #16
 8019592:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019596:	b292      	uxth	r2, r2
 8019598:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801959c:	f84e 2b04 	str.w	r2, [lr], #4
 80195a0:	1421      	asrs	r1, r4, #16
 80195a2:	e7e0      	b.n	8019566 <__mdiff+0xca>
 80195a4:	3f01      	subs	r7, #1
 80195a6:	e7ea      	b.n	801957e <__mdiff+0xe2>
 80195a8:	0801bc40 	.word	0x0801bc40
 80195ac:	0801bccc 	.word	0x0801bccc

080195b0 <__ulp>:
 80195b0:	b082      	sub	sp, #8
 80195b2:	ed8d 0b00 	vstr	d0, [sp]
 80195b6:	9b01      	ldr	r3, [sp, #4]
 80195b8:	4912      	ldr	r1, [pc, #72]	; (8019604 <__ulp+0x54>)
 80195ba:	4019      	ands	r1, r3
 80195bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80195c0:	2900      	cmp	r1, #0
 80195c2:	dd05      	ble.n	80195d0 <__ulp+0x20>
 80195c4:	2200      	movs	r2, #0
 80195c6:	460b      	mov	r3, r1
 80195c8:	ec43 2b10 	vmov	d0, r2, r3
 80195cc:	b002      	add	sp, #8
 80195ce:	4770      	bx	lr
 80195d0:	4249      	negs	r1, r1
 80195d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80195d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80195da:	f04f 0200 	mov.w	r2, #0
 80195de:	f04f 0300 	mov.w	r3, #0
 80195e2:	da04      	bge.n	80195ee <__ulp+0x3e>
 80195e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80195e8:	fa41 f300 	asr.w	r3, r1, r0
 80195ec:	e7ec      	b.n	80195c8 <__ulp+0x18>
 80195ee:	f1a0 0114 	sub.w	r1, r0, #20
 80195f2:	291e      	cmp	r1, #30
 80195f4:	bfda      	itte	le
 80195f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80195fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80195fe:	2101      	movgt	r1, #1
 8019600:	460a      	mov	r2, r1
 8019602:	e7e1      	b.n	80195c8 <__ulp+0x18>
 8019604:	7ff00000 	.word	0x7ff00000

08019608 <__b2d>:
 8019608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801960a:	6905      	ldr	r5, [r0, #16]
 801960c:	f100 0714 	add.w	r7, r0, #20
 8019610:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019614:	1f2e      	subs	r6, r5, #4
 8019616:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801961a:	4620      	mov	r0, r4
 801961c:	f7ff fd48 	bl	80190b0 <__hi0bits>
 8019620:	f1c0 0320 	rsb	r3, r0, #32
 8019624:	280a      	cmp	r0, #10
 8019626:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80196a4 <__b2d+0x9c>
 801962a:	600b      	str	r3, [r1, #0]
 801962c:	dc14      	bgt.n	8019658 <__b2d+0x50>
 801962e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019632:	fa24 f10e 	lsr.w	r1, r4, lr
 8019636:	42b7      	cmp	r7, r6
 8019638:	ea41 030c 	orr.w	r3, r1, ip
 801963c:	bf34      	ite	cc
 801963e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019642:	2100      	movcs	r1, #0
 8019644:	3015      	adds	r0, #21
 8019646:	fa04 f000 	lsl.w	r0, r4, r0
 801964a:	fa21 f10e 	lsr.w	r1, r1, lr
 801964e:	ea40 0201 	orr.w	r2, r0, r1
 8019652:	ec43 2b10 	vmov	d0, r2, r3
 8019656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019658:	42b7      	cmp	r7, r6
 801965a:	bf3a      	itte	cc
 801965c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019660:	f1a5 0608 	subcc.w	r6, r5, #8
 8019664:	2100      	movcs	r1, #0
 8019666:	380b      	subs	r0, #11
 8019668:	d017      	beq.n	801969a <__b2d+0x92>
 801966a:	f1c0 0c20 	rsb	ip, r0, #32
 801966e:	fa04 f500 	lsl.w	r5, r4, r0
 8019672:	42be      	cmp	r6, r7
 8019674:	fa21 f40c 	lsr.w	r4, r1, ip
 8019678:	ea45 0504 	orr.w	r5, r5, r4
 801967c:	bf8c      	ite	hi
 801967e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019682:	2400      	movls	r4, #0
 8019684:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019688:	fa01 f000 	lsl.w	r0, r1, r0
 801968c:	fa24 f40c 	lsr.w	r4, r4, ip
 8019690:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019694:	ea40 0204 	orr.w	r2, r0, r4
 8019698:	e7db      	b.n	8019652 <__b2d+0x4a>
 801969a:	ea44 030c 	orr.w	r3, r4, ip
 801969e:	460a      	mov	r2, r1
 80196a0:	e7d7      	b.n	8019652 <__b2d+0x4a>
 80196a2:	bf00      	nop
 80196a4:	3ff00000 	.word	0x3ff00000

080196a8 <__d2b>:
 80196a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80196ac:	4689      	mov	r9, r1
 80196ae:	2101      	movs	r1, #1
 80196b0:	ec57 6b10 	vmov	r6, r7, d0
 80196b4:	4690      	mov	r8, r2
 80196b6:	f7ff fc09 	bl	8018ecc <_Balloc>
 80196ba:	4604      	mov	r4, r0
 80196bc:	b930      	cbnz	r0, 80196cc <__d2b+0x24>
 80196be:	4602      	mov	r2, r0
 80196c0:	4b25      	ldr	r3, [pc, #148]	; (8019758 <__d2b+0xb0>)
 80196c2:	4826      	ldr	r0, [pc, #152]	; (801975c <__d2b+0xb4>)
 80196c4:	f240 310a 	movw	r1, #778	; 0x30a
 80196c8:	f000 ff6a 	bl	801a5a0 <__assert_func>
 80196cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80196d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80196d4:	bb35      	cbnz	r5, 8019724 <__d2b+0x7c>
 80196d6:	2e00      	cmp	r6, #0
 80196d8:	9301      	str	r3, [sp, #4]
 80196da:	d028      	beq.n	801972e <__d2b+0x86>
 80196dc:	4668      	mov	r0, sp
 80196de:	9600      	str	r6, [sp, #0]
 80196e0:	f7ff fd06 	bl	80190f0 <__lo0bits>
 80196e4:	9900      	ldr	r1, [sp, #0]
 80196e6:	b300      	cbz	r0, 801972a <__d2b+0x82>
 80196e8:	9a01      	ldr	r2, [sp, #4]
 80196ea:	f1c0 0320 	rsb	r3, r0, #32
 80196ee:	fa02 f303 	lsl.w	r3, r2, r3
 80196f2:	430b      	orrs	r3, r1
 80196f4:	40c2      	lsrs	r2, r0
 80196f6:	6163      	str	r3, [r4, #20]
 80196f8:	9201      	str	r2, [sp, #4]
 80196fa:	9b01      	ldr	r3, [sp, #4]
 80196fc:	61a3      	str	r3, [r4, #24]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	bf14      	ite	ne
 8019702:	2202      	movne	r2, #2
 8019704:	2201      	moveq	r2, #1
 8019706:	6122      	str	r2, [r4, #16]
 8019708:	b1d5      	cbz	r5, 8019740 <__d2b+0x98>
 801970a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801970e:	4405      	add	r5, r0
 8019710:	f8c9 5000 	str.w	r5, [r9]
 8019714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019718:	f8c8 0000 	str.w	r0, [r8]
 801971c:	4620      	mov	r0, r4
 801971e:	b003      	add	sp, #12
 8019720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019728:	e7d5      	b.n	80196d6 <__d2b+0x2e>
 801972a:	6161      	str	r1, [r4, #20]
 801972c:	e7e5      	b.n	80196fa <__d2b+0x52>
 801972e:	a801      	add	r0, sp, #4
 8019730:	f7ff fcde 	bl	80190f0 <__lo0bits>
 8019734:	9b01      	ldr	r3, [sp, #4]
 8019736:	6163      	str	r3, [r4, #20]
 8019738:	2201      	movs	r2, #1
 801973a:	6122      	str	r2, [r4, #16]
 801973c:	3020      	adds	r0, #32
 801973e:	e7e3      	b.n	8019708 <__d2b+0x60>
 8019740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019744:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019748:	f8c9 0000 	str.w	r0, [r9]
 801974c:	6918      	ldr	r0, [r3, #16]
 801974e:	f7ff fcaf 	bl	80190b0 <__hi0bits>
 8019752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019756:	e7df      	b.n	8019718 <__d2b+0x70>
 8019758:	0801bc40 	.word	0x0801bc40
 801975c:	0801bccc 	.word	0x0801bccc

08019760 <__ratio>:
 8019760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019764:	4688      	mov	r8, r1
 8019766:	4669      	mov	r1, sp
 8019768:	4681      	mov	r9, r0
 801976a:	f7ff ff4d 	bl	8019608 <__b2d>
 801976e:	a901      	add	r1, sp, #4
 8019770:	4640      	mov	r0, r8
 8019772:	ec55 4b10 	vmov	r4, r5, d0
 8019776:	f7ff ff47 	bl	8019608 <__b2d>
 801977a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801977e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019782:	eba3 0c02 	sub.w	ip, r3, r2
 8019786:	e9dd 3200 	ldrd	r3, r2, [sp]
 801978a:	1a9b      	subs	r3, r3, r2
 801978c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019790:	ec51 0b10 	vmov	r0, r1, d0
 8019794:	2b00      	cmp	r3, #0
 8019796:	bfd6      	itet	le
 8019798:	460a      	movle	r2, r1
 801979a:	462a      	movgt	r2, r5
 801979c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80197a0:	468b      	mov	fp, r1
 80197a2:	462f      	mov	r7, r5
 80197a4:	bfd4      	ite	le
 80197a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80197aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80197ae:	4620      	mov	r0, r4
 80197b0:	ee10 2a10 	vmov	r2, s0
 80197b4:	465b      	mov	r3, fp
 80197b6:	4639      	mov	r1, r7
 80197b8:	f7e7 f860 	bl	800087c <__aeabi_ddiv>
 80197bc:	ec41 0b10 	vmov	d0, r0, r1
 80197c0:	b003      	add	sp, #12
 80197c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080197c6 <__copybits>:
 80197c6:	3901      	subs	r1, #1
 80197c8:	b570      	push	{r4, r5, r6, lr}
 80197ca:	1149      	asrs	r1, r1, #5
 80197cc:	6914      	ldr	r4, [r2, #16]
 80197ce:	3101      	adds	r1, #1
 80197d0:	f102 0314 	add.w	r3, r2, #20
 80197d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80197d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80197dc:	1f05      	subs	r5, r0, #4
 80197de:	42a3      	cmp	r3, r4
 80197e0:	d30c      	bcc.n	80197fc <__copybits+0x36>
 80197e2:	1aa3      	subs	r3, r4, r2
 80197e4:	3b11      	subs	r3, #17
 80197e6:	f023 0303 	bic.w	r3, r3, #3
 80197ea:	3211      	adds	r2, #17
 80197ec:	42a2      	cmp	r2, r4
 80197ee:	bf88      	it	hi
 80197f0:	2300      	movhi	r3, #0
 80197f2:	4418      	add	r0, r3
 80197f4:	2300      	movs	r3, #0
 80197f6:	4288      	cmp	r0, r1
 80197f8:	d305      	bcc.n	8019806 <__copybits+0x40>
 80197fa:	bd70      	pop	{r4, r5, r6, pc}
 80197fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8019800:	f845 6f04 	str.w	r6, [r5, #4]!
 8019804:	e7eb      	b.n	80197de <__copybits+0x18>
 8019806:	f840 3b04 	str.w	r3, [r0], #4
 801980a:	e7f4      	b.n	80197f6 <__copybits+0x30>

0801980c <__any_on>:
 801980c:	f100 0214 	add.w	r2, r0, #20
 8019810:	6900      	ldr	r0, [r0, #16]
 8019812:	114b      	asrs	r3, r1, #5
 8019814:	4298      	cmp	r0, r3
 8019816:	b510      	push	{r4, lr}
 8019818:	db11      	blt.n	801983e <__any_on+0x32>
 801981a:	dd0a      	ble.n	8019832 <__any_on+0x26>
 801981c:	f011 011f 	ands.w	r1, r1, #31
 8019820:	d007      	beq.n	8019832 <__any_on+0x26>
 8019822:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019826:	fa24 f001 	lsr.w	r0, r4, r1
 801982a:	fa00 f101 	lsl.w	r1, r0, r1
 801982e:	428c      	cmp	r4, r1
 8019830:	d10b      	bne.n	801984a <__any_on+0x3e>
 8019832:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019836:	4293      	cmp	r3, r2
 8019838:	d803      	bhi.n	8019842 <__any_on+0x36>
 801983a:	2000      	movs	r0, #0
 801983c:	bd10      	pop	{r4, pc}
 801983e:	4603      	mov	r3, r0
 8019840:	e7f7      	b.n	8019832 <__any_on+0x26>
 8019842:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019846:	2900      	cmp	r1, #0
 8019848:	d0f5      	beq.n	8019836 <__any_on+0x2a>
 801984a:	2001      	movs	r0, #1
 801984c:	e7f6      	b.n	801983c <__any_on+0x30>

0801984e <_calloc_r>:
 801984e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019850:	fba1 2402 	umull	r2, r4, r1, r2
 8019854:	b94c      	cbnz	r4, 801986a <_calloc_r+0x1c>
 8019856:	4611      	mov	r1, r2
 8019858:	9201      	str	r2, [sp, #4]
 801985a:	f000 f87b 	bl	8019954 <_malloc_r>
 801985e:	9a01      	ldr	r2, [sp, #4]
 8019860:	4605      	mov	r5, r0
 8019862:	b930      	cbnz	r0, 8019872 <_calloc_r+0x24>
 8019864:	4628      	mov	r0, r5
 8019866:	b003      	add	sp, #12
 8019868:	bd30      	pop	{r4, r5, pc}
 801986a:	220c      	movs	r2, #12
 801986c:	6002      	str	r2, [r0, #0]
 801986e:	2500      	movs	r5, #0
 8019870:	e7f8      	b.n	8019864 <_calloc_r+0x16>
 8019872:	4621      	mov	r1, r4
 8019874:	f7fc fb12 	bl	8015e9c <memset>
 8019878:	e7f4      	b.n	8019864 <_calloc_r+0x16>
	...

0801987c <_free_r>:
 801987c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801987e:	2900      	cmp	r1, #0
 8019880:	d044      	beq.n	801990c <_free_r+0x90>
 8019882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019886:	9001      	str	r0, [sp, #4]
 8019888:	2b00      	cmp	r3, #0
 801988a:	f1a1 0404 	sub.w	r4, r1, #4
 801988e:	bfb8      	it	lt
 8019890:	18e4      	addlt	r4, r4, r3
 8019892:	f001 f889 	bl	801a9a8 <__malloc_lock>
 8019896:	4a1e      	ldr	r2, [pc, #120]	; (8019910 <_free_r+0x94>)
 8019898:	9801      	ldr	r0, [sp, #4]
 801989a:	6813      	ldr	r3, [r2, #0]
 801989c:	b933      	cbnz	r3, 80198ac <_free_r+0x30>
 801989e:	6063      	str	r3, [r4, #4]
 80198a0:	6014      	str	r4, [r2, #0]
 80198a2:	b003      	add	sp, #12
 80198a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198a8:	f001 b884 	b.w	801a9b4 <__malloc_unlock>
 80198ac:	42a3      	cmp	r3, r4
 80198ae:	d908      	bls.n	80198c2 <_free_r+0x46>
 80198b0:	6825      	ldr	r5, [r4, #0]
 80198b2:	1961      	adds	r1, r4, r5
 80198b4:	428b      	cmp	r3, r1
 80198b6:	bf01      	itttt	eq
 80198b8:	6819      	ldreq	r1, [r3, #0]
 80198ba:	685b      	ldreq	r3, [r3, #4]
 80198bc:	1949      	addeq	r1, r1, r5
 80198be:	6021      	streq	r1, [r4, #0]
 80198c0:	e7ed      	b.n	801989e <_free_r+0x22>
 80198c2:	461a      	mov	r2, r3
 80198c4:	685b      	ldr	r3, [r3, #4]
 80198c6:	b10b      	cbz	r3, 80198cc <_free_r+0x50>
 80198c8:	42a3      	cmp	r3, r4
 80198ca:	d9fa      	bls.n	80198c2 <_free_r+0x46>
 80198cc:	6811      	ldr	r1, [r2, #0]
 80198ce:	1855      	adds	r5, r2, r1
 80198d0:	42a5      	cmp	r5, r4
 80198d2:	d10b      	bne.n	80198ec <_free_r+0x70>
 80198d4:	6824      	ldr	r4, [r4, #0]
 80198d6:	4421      	add	r1, r4
 80198d8:	1854      	adds	r4, r2, r1
 80198da:	42a3      	cmp	r3, r4
 80198dc:	6011      	str	r1, [r2, #0]
 80198de:	d1e0      	bne.n	80198a2 <_free_r+0x26>
 80198e0:	681c      	ldr	r4, [r3, #0]
 80198e2:	685b      	ldr	r3, [r3, #4]
 80198e4:	6053      	str	r3, [r2, #4]
 80198e6:	4421      	add	r1, r4
 80198e8:	6011      	str	r1, [r2, #0]
 80198ea:	e7da      	b.n	80198a2 <_free_r+0x26>
 80198ec:	d902      	bls.n	80198f4 <_free_r+0x78>
 80198ee:	230c      	movs	r3, #12
 80198f0:	6003      	str	r3, [r0, #0]
 80198f2:	e7d6      	b.n	80198a2 <_free_r+0x26>
 80198f4:	6825      	ldr	r5, [r4, #0]
 80198f6:	1961      	adds	r1, r4, r5
 80198f8:	428b      	cmp	r3, r1
 80198fa:	bf04      	itt	eq
 80198fc:	6819      	ldreq	r1, [r3, #0]
 80198fe:	685b      	ldreq	r3, [r3, #4]
 8019900:	6063      	str	r3, [r4, #4]
 8019902:	bf04      	itt	eq
 8019904:	1949      	addeq	r1, r1, r5
 8019906:	6021      	streq	r1, [r4, #0]
 8019908:	6054      	str	r4, [r2, #4]
 801990a:	e7ca      	b.n	80198a2 <_free_r+0x26>
 801990c:	b003      	add	sp, #12
 801990e:	bd30      	pop	{r4, r5, pc}
 8019910:	20004128 	.word	0x20004128

08019914 <sbrk_aligned>:
 8019914:	b570      	push	{r4, r5, r6, lr}
 8019916:	4e0e      	ldr	r6, [pc, #56]	; (8019950 <sbrk_aligned+0x3c>)
 8019918:	460c      	mov	r4, r1
 801991a:	6831      	ldr	r1, [r6, #0]
 801991c:	4605      	mov	r5, r0
 801991e:	b911      	cbnz	r1, 8019926 <sbrk_aligned+0x12>
 8019920:	f000 fd26 	bl	801a370 <_sbrk_r>
 8019924:	6030      	str	r0, [r6, #0]
 8019926:	4621      	mov	r1, r4
 8019928:	4628      	mov	r0, r5
 801992a:	f000 fd21 	bl	801a370 <_sbrk_r>
 801992e:	1c43      	adds	r3, r0, #1
 8019930:	d00a      	beq.n	8019948 <sbrk_aligned+0x34>
 8019932:	1cc4      	adds	r4, r0, #3
 8019934:	f024 0403 	bic.w	r4, r4, #3
 8019938:	42a0      	cmp	r0, r4
 801993a:	d007      	beq.n	801994c <sbrk_aligned+0x38>
 801993c:	1a21      	subs	r1, r4, r0
 801993e:	4628      	mov	r0, r5
 8019940:	f000 fd16 	bl	801a370 <_sbrk_r>
 8019944:	3001      	adds	r0, #1
 8019946:	d101      	bne.n	801994c <sbrk_aligned+0x38>
 8019948:	f04f 34ff 	mov.w	r4, #4294967295
 801994c:	4620      	mov	r0, r4
 801994e:	bd70      	pop	{r4, r5, r6, pc}
 8019950:	2000412c 	.word	0x2000412c

08019954 <_malloc_r>:
 8019954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019958:	1ccd      	adds	r5, r1, #3
 801995a:	f025 0503 	bic.w	r5, r5, #3
 801995e:	3508      	adds	r5, #8
 8019960:	2d0c      	cmp	r5, #12
 8019962:	bf38      	it	cc
 8019964:	250c      	movcc	r5, #12
 8019966:	2d00      	cmp	r5, #0
 8019968:	4607      	mov	r7, r0
 801996a:	db01      	blt.n	8019970 <_malloc_r+0x1c>
 801996c:	42a9      	cmp	r1, r5
 801996e:	d905      	bls.n	801997c <_malloc_r+0x28>
 8019970:	230c      	movs	r3, #12
 8019972:	603b      	str	r3, [r7, #0]
 8019974:	2600      	movs	r6, #0
 8019976:	4630      	mov	r0, r6
 8019978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801997c:	4e2e      	ldr	r6, [pc, #184]	; (8019a38 <_malloc_r+0xe4>)
 801997e:	f001 f813 	bl	801a9a8 <__malloc_lock>
 8019982:	6833      	ldr	r3, [r6, #0]
 8019984:	461c      	mov	r4, r3
 8019986:	bb34      	cbnz	r4, 80199d6 <_malloc_r+0x82>
 8019988:	4629      	mov	r1, r5
 801998a:	4638      	mov	r0, r7
 801998c:	f7ff ffc2 	bl	8019914 <sbrk_aligned>
 8019990:	1c43      	adds	r3, r0, #1
 8019992:	4604      	mov	r4, r0
 8019994:	d14d      	bne.n	8019a32 <_malloc_r+0xde>
 8019996:	6834      	ldr	r4, [r6, #0]
 8019998:	4626      	mov	r6, r4
 801999a:	2e00      	cmp	r6, #0
 801999c:	d140      	bne.n	8019a20 <_malloc_r+0xcc>
 801999e:	6823      	ldr	r3, [r4, #0]
 80199a0:	4631      	mov	r1, r6
 80199a2:	4638      	mov	r0, r7
 80199a4:	eb04 0803 	add.w	r8, r4, r3
 80199a8:	f000 fce2 	bl	801a370 <_sbrk_r>
 80199ac:	4580      	cmp	r8, r0
 80199ae:	d13a      	bne.n	8019a26 <_malloc_r+0xd2>
 80199b0:	6821      	ldr	r1, [r4, #0]
 80199b2:	3503      	adds	r5, #3
 80199b4:	1a6d      	subs	r5, r5, r1
 80199b6:	f025 0503 	bic.w	r5, r5, #3
 80199ba:	3508      	adds	r5, #8
 80199bc:	2d0c      	cmp	r5, #12
 80199be:	bf38      	it	cc
 80199c0:	250c      	movcc	r5, #12
 80199c2:	4629      	mov	r1, r5
 80199c4:	4638      	mov	r0, r7
 80199c6:	f7ff ffa5 	bl	8019914 <sbrk_aligned>
 80199ca:	3001      	adds	r0, #1
 80199cc:	d02b      	beq.n	8019a26 <_malloc_r+0xd2>
 80199ce:	6823      	ldr	r3, [r4, #0]
 80199d0:	442b      	add	r3, r5
 80199d2:	6023      	str	r3, [r4, #0]
 80199d4:	e00e      	b.n	80199f4 <_malloc_r+0xa0>
 80199d6:	6822      	ldr	r2, [r4, #0]
 80199d8:	1b52      	subs	r2, r2, r5
 80199da:	d41e      	bmi.n	8019a1a <_malloc_r+0xc6>
 80199dc:	2a0b      	cmp	r2, #11
 80199de:	d916      	bls.n	8019a0e <_malloc_r+0xba>
 80199e0:	1961      	adds	r1, r4, r5
 80199e2:	42a3      	cmp	r3, r4
 80199e4:	6025      	str	r5, [r4, #0]
 80199e6:	bf18      	it	ne
 80199e8:	6059      	strne	r1, [r3, #4]
 80199ea:	6863      	ldr	r3, [r4, #4]
 80199ec:	bf08      	it	eq
 80199ee:	6031      	streq	r1, [r6, #0]
 80199f0:	5162      	str	r2, [r4, r5]
 80199f2:	604b      	str	r3, [r1, #4]
 80199f4:	4638      	mov	r0, r7
 80199f6:	f104 060b 	add.w	r6, r4, #11
 80199fa:	f000 ffdb 	bl	801a9b4 <__malloc_unlock>
 80199fe:	f026 0607 	bic.w	r6, r6, #7
 8019a02:	1d23      	adds	r3, r4, #4
 8019a04:	1af2      	subs	r2, r6, r3
 8019a06:	d0b6      	beq.n	8019976 <_malloc_r+0x22>
 8019a08:	1b9b      	subs	r3, r3, r6
 8019a0a:	50a3      	str	r3, [r4, r2]
 8019a0c:	e7b3      	b.n	8019976 <_malloc_r+0x22>
 8019a0e:	6862      	ldr	r2, [r4, #4]
 8019a10:	42a3      	cmp	r3, r4
 8019a12:	bf0c      	ite	eq
 8019a14:	6032      	streq	r2, [r6, #0]
 8019a16:	605a      	strne	r2, [r3, #4]
 8019a18:	e7ec      	b.n	80199f4 <_malloc_r+0xa0>
 8019a1a:	4623      	mov	r3, r4
 8019a1c:	6864      	ldr	r4, [r4, #4]
 8019a1e:	e7b2      	b.n	8019986 <_malloc_r+0x32>
 8019a20:	4634      	mov	r4, r6
 8019a22:	6876      	ldr	r6, [r6, #4]
 8019a24:	e7b9      	b.n	801999a <_malloc_r+0x46>
 8019a26:	230c      	movs	r3, #12
 8019a28:	603b      	str	r3, [r7, #0]
 8019a2a:	4638      	mov	r0, r7
 8019a2c:	f000 ffc2 	bl	801a9b4 <__malloc_unlock>
 8019a30:	e7a1      	b.n	8019976 <_malloc_r+0x22>
 8019a32:	6025      	str	r5, [r4, #0]
 8019a34:	e7de      	b.n	80199f4 <_malloc_r+0xa0>
 8019a36:	bf00      	nop
 8019a38:	20004128 	.word	0x20004128

08019a3c <__ssputs_r>:
 8019a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a40:	688e      	ldr	r6, [r1, #8]
 8019a42:	429e      	cmp	r6, r3
 8019a44:	4682      	mov	sl, r0
 8019a46:	460c      	mov	r4, r1
 8019a48:	4690      	mov	r8, r2
 8019a4a:	461f      	mov	r7, r3
 8019a4c:	d838      	bhi.n	8019ac0 <__ssputs_r+0x84>
 8019a4e:	898a      	ldrh	r2, [r1, #12]
 8019a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a54:	d032      	beq.n	8019abc <__ssputs_r+0x80>
 8019a56:	6825      	ldr	r5, [r4, #0]
 8019a58:	6909      	ldr	r1, [r1, #16]
 8019a5a:	eba5 0901 	sub.w	r9, r5, r1
 8019a5e:	6965      	ldr	r5, [r4, #20]
 8019a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a68:	3301      	adds	r3, #1
 8019a6a:	444b      	add	r3, r9
 8019a6c:	106d      	asrs	r5, r5, #1
 8019a6e:	429d      	cmp	r5, r3
 8019a70:	bf38      	it	cc
 8019a72:	461d      	movcc	r5, r3
 8019a74:	0553      	lsls	r3, r2, #21
 8019a76:	d531      	bpl.n	8019adc <__ssputs_r+0xa0>
 8019a78:	4629      	mov	r1, r5
 8019a7a:	f7ff ff6b 	bl	8019954 <_malloc_r>
 8019a7e:	4606      	mov	r6, r0
 8019a80:	b950      	cbnz	r0, 8019a98 <__ssputs_r+0x5c>
 8019a82:	230c      	movs	r3, #12
 8019a84:	f8ca 3000 	str.w	r3, [sl]
 8019a88:	89a3      	ldrh	r3, [r4, #12]
 8019a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a8e:	81a3      	strh	r3, [r4, #12]
 8019a90:	f04f 30ff 	mov.w	r0, #4294967295
 8019a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a98:	6921      	ldr	r1, [r4, #16]
 8019a9a:	464a      	mov	r2, r9
 8019a9c:	f7fc f9f0 	bl	8015e80 <memcpy>
 8019aa0:	89a3      	ldrh	r3, [r4, #12]
 8019aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019aaa:	81a3      	strh	r3, [r4, #12]
 8019aac:	6126      	str	r6, [r4, #16]
 8019aae:	6165      	str	r5, [r4, #20]
 8019ab0:	444e      	add	r6, r9
 8019ab2:	eba5 0509 	sub.w	r5, r5, r9
 8019ab6:	6026      	str	r6, [r4, #0]
 8019ab8:	60a5      	str	r5, [r4, #8]
 8019aba:	463e      	mov	r6, r7
 8019abc:	42be      	cmp	r6, r7
 8019abe:	d900      	bls.n	8019ac2 <__ssputs_r+0x86>
 8019ac0:	463e      	mov	r6, r7
 8019ac2:	6820      	ldr	r0, [r4, #0]
 8019ac4:	4632      	mov	r2, r6
 8019ac6:	4641      	mov	r1, r8
 8019ac8:	f000 ff54 	bl	801a974 <memmove>
 8019acc:	68a3      	ldr	r3, [r4, #8]
 8019ace:	1b9b      	subs	r3, r3, r6
 8019ad0:	60a3      	str	r3, [r4, #8]
 8019ad2:	6823      	ldr	r3, [r4, #0]
 8019ad4:	4433      	add	r3, r6
 8019ad6:	6023      	str	r3, [r4, #0]
 8019ad8:	2000      	movs	r0, #0
 8019ada:	e7db      	b.n	8019a94 <__ssputs_r+0x58>
 8019adc:	462a      	mov	r2, r5
 8019ade:	f000 ff6f 	bl	801a9c0 <_realloc_r>
 8019ae2:	4606      	mov	r6, r0
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	d1e1      	bne.n	8019aac <__ssputs_r+0x70>
 8019ae8:	6921      	ldr	r1, [r4, #16]
 8019aea:	4650      	mov	r0, sl
 8019aec:	f7ff fec6 	bl	801987c <_free_r>
 8019af0:	e7c7      	b.n	8019a82 <__ssputs_r+0x46>
	...

08019af4 <_svfiprintf_r>:
 8019af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af8:	4698      	mov	r8, r3
 8019afa:	898b      	ldrh	r3, [r1, #12]
 8019afc:	061b      	lsls	r3, r3, #24
 8019afe:	b09d      	sub	sp, #116	; 0x74
 8019b00:	4607      	mov	r7, r0
 8019b02:	460d      	mov	r5, r1
 8019b04:	4614      	mov	r4, r2
 8019b06:	d50e      	bpl.n	8019b26 <_svfiprintf_r+0x32>
 8019b08:	690b      	ldr	r3, [r1, #16]
 8019b0a:	b963      	cbnz	r3, 8019b26 <_svfiprintf_r+0x32>
 8019b0c:	2140      	movs	r1, #64	; 0x40
 8019b0e:	f7ff ff21 	bl	8019954 <_malloc_r>
 8019b12:	6028      	str	r0, [r5, #0]
 8019b14:	6128      	str	r0, [r5, #16]
 8019b16:	b920      	cbnz	r0, 8019b22 <_svfiprintf_r+0x2e>
 8019b18:	230c      	movs	r3, #12
 8019b1a:	603b      	str	r3, [r7, #0]
 8019b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8019b20:	e0d1      	b.n	8019cc6 <_svfiprintf_r+0x1d2>
 8019b22:	2340      	movs	r3, #64	; 0x40
 8019b24:	616b      	str	r3, [r5, #20]
 8019b26:	2300      	movs	r3, #0
 8019b28:	9309      	str	r3, [sp, #36]	; 0x24
 8019b2a:	2320      	movs	r3, #32
 8019b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b34:	2330      	movs	r3, #48	; 0x30
 8019b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019ce0 <_svfiprintf_r+0x1ec>
 8019b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b3e:	f04f 0901 	mov.w	r9, #1
 8019b42:	4623      	mov	r3, r4
 8019b44:	469a      	mov	sl, r3
 8019b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b4a:	b10a      	cbz	r2, 8019b50 <_svfiprintf_r+0x5c>
 8019b4c:	2a25      	cmp	r2, #37	; 0x25
 8019b4e:	d1f9      	bne.n	8019b44 <_svfiprintf_r+0x50>
 8019b50:	ebba 0b04 	subs.w	fp, sl, r4
 8019b54:	d00b      	beq.n	8019b6e <_svfiprintf_r+0x7a>
 8019b56:	465b      	mov	r3, fp
 8019b58:	4622      	mov	r2, r4
 8019b5a:	4629      	mov	r1, r5
 8019b5c:	4638      	mov	r0, r7
 8019b5e:	f7ff ff6d 	bl	8019a3c <__ssputs_r>
 8019b62:	3001      	adds	r0, #1
 8019b64:	f000 80aa 	beq.w	8019cbc <_svfiprintf_r+0x1c8>
 8019b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b6a:	445a      	add	r2, fp
 8019b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8019b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	f000 80a2 	beq.w	8019cbc <_svfiprintf_r+0x1c8>
 8019b78:	2300      	movs	r3, #0
 8019b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8019b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b82:	f10a 0a01 	add.w	sl, sl, #1
 8019b86:	9304      	str	r3, [sp, #16]
 8019b88:	9307      	str	r3, [sp, #28]
 8019b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8019b90:	4654      	mov	r4, sl
 8019b92:	2205      	movs	r2, #5
 8019b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b98:	4851      	ldr	r0, [pc, #324]	; (8019ce0 <_svfiprintf_r+0x1ec>)
 8019b9a:	f7e6 fb39 	bl	8000210 <memchr>
 8019b9e:	9a04      	ldr	r2, [sp, #16]
 8019ba0:	b9d8      	cbnz	r0, 8019bda <_svfiprintf_r+0xe6>
 8019ba2:	06d0      	lsls	r0, r2, #27
 8019ba4:	bf44      	itt	mi
 8019ba6:	2320      	movmi	r3, #32
 8019ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bac:	0711      	lsls	r1, r2, #28
 8019bae:	bf44      	itt	mi
 8019bb0:	232b      	movmi	r3, #43	; 0x2b
 8019bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8019bba:	2b2a      	cmp	r3, #42	; 0x2a
 8019bbc:	d015      	beq.n	8019bea <_svfiprintf_r+0xf6>
 8019bbe:	9a07      	ldr	r2, [sp, #28]
 8019bc0:	4654      	mov	r4, sl
 8019bc2:	2000      	movs	r0, #0
 8019bc4:	f04f 0c0a 	mov.w	ip, #10
 8019bc8:	4621      	mov	r1, r4
 8019bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bce:	3b30      	subs	r3, #48	; 0x30
 8019bd0:	2b09      	cmp	r3, #9
 8019bd2:	d94e      	bls.n	8019c72 <_svfiprintf_r+0x17e>
 8019bd4:	b1b0      	cbz	r0, 8019c04 <_svfiprintf_r+0x110>
 8019bd6:	9207      	str	r2, [sp, #28]
 8019bd8:	e014      	b.n	8019c04 <_svfiprintf_r+0x110>
 8019bda:	eba0 0308 	sub.w	r3, r0, r8
 8019bde:	fa09 f303 	lsl.w	r3, r9, r3
 8019be2:	4313      	orrs	r3, r2
 8019be4:	9304      	str	r3, [sp, #16]
 8019be6:	46a2      	mov	sl, r4
 8019be8:	e7d2      	b.n	8019b90 <_svfiprintf_r+0x9c>
 8019bea:	9b03      	ldr	r3, [sp, #12]
 8019bec:	1d19      	adds	r1, r3, #4
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	9103      	str	r1, [sp, #12]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	bfbb      	ittet	lt
 8019bf6:	425b      	neglt	r3, r3
 8019bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8019bfc:	9307      	strge	r3, [sp, #28]
 8019bfe:	9307      	strlt	r3, [sp, #28]
 8019c00:	bfb8      	it	lt
 8019c02:	9204      	strlt	r2, [sp, #16]
 8019c04:	7823      	ldrb	r3, [r4, #0]
 8019c06:	2b2e      	cmp	r3, #46	; 0x2e
 8019c08:	d10c      	bne.n	8019c24 <_svfiprintf_r+0x130>
 8019c0a:	7863      	ldrb	r3, [r4, #1]
 8019c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8019c0e:	d135      	bne.n	8019c7c <_svfiprintf_r+0x188>
 8019c10:	9b03      	ldr	r3, [sp, #12]
 8019c12:	1d1a      	adds	r2, r3, #4
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	9203      	str	r2, [sp, #12]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	bfb8      	it	lt
 8019c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c20:	3402      	adds	r4, #2
 8019c22:	9305      	str	r3, [sp, #20]
 8019c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019cf0 <_svfiprintf_r+0x1fc>
 8019c28:	7821      	ldrb	r1, [r4, #0]
 8019c2a:	2203      	movs	r2, #3
 8019c2c:	4650      	mov	r0, sl
 8019c2e:	f7e6 faef 	bl	8000210 <memchr>
 8019c32:	b140      	cbz	r0, 8019c46 <_svfiprintf_r+0x152>
 8019c34:	2340      	movs	r3, #64	; 0x40
 8019c36:	eba0 000a 	sub.w	r0, r0, sl
 8019c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8019c3e:	9b04      	ldr	r3, [sp, #16]
 8019c40:	4303      	orrs	r3, r0
 8019c42:	3401      	adds	r4, #1
 8019c44:	9304      	str	r3, [sp, #16]
 8019c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c4a:	4826      	ldr	r0, [pc, #152]	; (8019ce4 <_svfiprintf_r+0x1f0>)
 8019c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c50:	2206      	movs	r2, #6
 8019c52:	f7e6 fadd 	bl	8000210 <memchr>
 8019c56:	2800      	cmp	r0, #0
 8019c58:	d038      	beq.n	8019ccc <_svfiprintf_r+0x1d8>
 8019c5a:	4b23      	ldr	r3, [pc, #140]	; (8019ce8 <_svfiprintf_r+0x1f4>)
 8019c5c:	bb1b      	cbnz	r3, 8019ca6 <_svfiprintf_r+0x1b2>
 8019c5e:	9b03      	ldr	r3, [sp, #12]
 8019c60:	3307      	adds	r3, #7
 8019c62:	f023 0307 	bic.w	r3, r3, #7
 8019c66:	3308      	adds	r3, #8
 8019c68:	9303      	str	r3, [sp, #12]
 8019c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c6c:	4433      	add	r3, r6
 8019c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8019c70:	e767      	b.n	8019b42 <_svfiprintf_r+0x4e>
 8019c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c76:	460c      	mov	r4, r1
 8019c78:	2001      	movs	r0, #1
 8019c7a:	e7a5      	b.n	8019bc8 <_svfiprintf_r+0xd4>
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	3401      	adds	r4, #1
 8019c80:	9305      	str	r3, [sp, #20]
 8019c82:	4619      	mov	r1, r3
 8019c84:	f04f 0c0a 	mov.w	ip, #10
 8019c88:	4620      	mov	r0, r4
 8019c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c8e:	3a30      	subs	r2, #48	; 0x30
 8019c90:	2a09      	cmp	r2, #9
 8019c92:	d903      	bls.n	8019c9c <_svfiprintf_r+0x1a8>
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d0c5      	beq.n	8019c24 <_svfiprintf_r+0x130>
 8019c98:	9105      	str	r1, [sp, #20]
 8019c9a:	e7c3      	b.n	8019c24 <_svfiprintf_r+0x130>
 8019c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	e7f0      	b.n	8019c88 <_svfiprintf_r+0x194>
 8019ca6:	ab03      	add	r3, sp, #12
 8019ca8:	9300      	str	r3, [sp, #0]
 8019caa:	462a      	mov	r2, r5
 8019cac:	4b0f      	ldr	r3, [pc, #60]	; (8019cec <_svfiprintf_r+0x1f8>)
 8019cae:	a904      	add	r1, sp, #16
 8019cb0:	4638      	mov	r0, r7
 8019cb2:	f7fc f99b 	bl	8015fec <_printf_float>
 8019cb6:	1c42      	adds	r2, r0, #1
 8019cb8:	4606      	mov	r6, r0
 8019cba:	d1d6      	bne.n	8019c6a <_svfiprintf_r+0x176>
 8019cbc:	89ab      	ldrh	r3, [r5, #12]
 8019cbe:	065b      	lsls	r3, r3, #25
 8019cc0:	f53f af2c 	bmi.w	8019b1c <_svfiprintf_r+0x28>
 8019cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cc6:	b01d      	add	sp, #116	; 0x74
 8019cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ccc:	ab03      	add	r3, sp, #12
 8019cce:	9300      	str	r3, [sp, #0]
 8019cd0:	462a      	mov	r2, r5
 8019cd2:	4b06      	ldr	r3, [pc, #24]	; (8019cec <_svfiprintf_r+0x1f8>)
 8019cd4:	a904      	add	r1, sp, #16
 8019cd6:	4638      	mov	r0, r7
 8019cd8:	f7fc fc2c 	bl	8016534 <_printf_i>
 8019cdc:	e7eb      	b.n	8019cb6 <_svfiprintf_r+0x1c2>
 8019cde:	bf00      	nop
 8019ce0:	0801be24 	.word	0x0801be24
 8019ce4:	0801be2e 	.word	0x0801be2e
 8019ce8:	08015fed 	.word	0x08015fed
 8019cec:	08019a3d 	.word	0x08019a3d
 8019cf0:	0801be2a 	.word	0x0801be2a

08019cf4 <_sungetc_r>:
 8019cf4:	b538      	push	{r3, r4, r5, lr}
 8019cf6:	1c4b      	adds	r3, r1, #1
 8019cf8:	4614      	mov	r4, r2
 8019cfa:	d103      	bne.n	8019d04 <_sungetc_r+0x10>
 8019cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8019d00:	4628      	mov	r0, r5
 8019d02:	bd38      	pop	{r3, r4, r5, pc}
 8019d04:	8993      	ldrh	r3, [r2, #12]
 8019d06:	f023 0320 	bic.w	r3, r3, #32
 8019d0a:	8193      	strh	r3, [r2, #12]
 8019d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d0e:	6852      	ldr	r2, [r2, #4]
 8019d10:	b2cd      	uxtb	r5, r1
 8019d12:	b18b      	cbz	r3, 8019d38 <_sungetc_r+0x44>
 8019d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019d16:	4293      	cmp	r3, r2
 8019d18:	dd08      	ble.n	8019d2c <_sungetc_r+0x38>
 8019d1a:	6823      	ldr	r3, [r4, #0]
 8019d1c:	1e5a      	subs	r2, r3, #1
 8019d1e:	6022      	str	r2, [r4, #0]
 8019d20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019d24:	6863      	ldr	r3, [r4, #4]
 8019d26:	3301      	adds	r3, #1
 8019d28:	6063      	str	r3, [r4, #4]
 8019d2a:	e7e9      	b.n	8019d00 <_sungetc_r+0xc>
 8019d2c:	4621      	mov	r1, r4
 8019d2e:	f000 fbef 	bl	801a510 <__submore>
 8019d32:	2800      	cmp	r0, #0
 8019d34:	d0f1      	beq.n	8019d1a <_sungetc_r+0x26>
 8019d36:	e7e1      	b.n	8019cfc <_sungetc_r+0x8>
 8019d38:	6921      	ldr	r1, [r4, #16]
 8019d3a:	6823      	ldr	r3, [r4, #0]
 8019d3c:	b151      	cbz	r1, 8019d54 <_sungetc_r+0x60>
 8019d3e:	4299      	cmp	r1, r3
 8019d40:	d208      	bcs.n	8019d54 <_sungetc_r+0x60>
 8019d42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019d46:	42a9      	cmp	r1, r5
 8019d48:	d104      	bne.n	8019d54 <_sungetc_r+0x60>
 8019d4a:	3b01      	subs	r3, #1
 8019d4c:	3201      	adds	r2, #1
 8019d4e:	6023      	str	r3, [r4, #0]
 8019d50:	6062      	str	r2, [r4, #4]
 8019d52:	e7d5      	b.n	8019d00 <_sungetc_r+0xc>
 8019d54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8019d5e:	2303      	movs	r3, #3
 8019d60:	63a3      	str	r3, [r4, #56]	; 0x38
 8019d62:	4623      	mov	r3, r4
 8019d64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	2301      	movs	r3, #1
 8019d6c:	e7dc      	b.n	8019d28 <_sungetc_r+0x34>

08019d6e <__ssrefill_r>:
 8019d6e:	b510      	push	{r4, lr}
 8019d70:	460c      	mov	r4, r1
 8019d72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019d74:	b169      	cbz	r1, 8019d92 <__ssrefill_r+0x24>
 8019d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d7a:	4299      	cmp	r1, r3
 8019d7c:	d001      	beq.n	8019d82 <__ssrefill_r+0x14>
 8019d7e:	f7ff fd7d 	bl	801987c <_free_r>
 8019d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d84:	6063      	str	r3, [r4, #4]
 8019d86:	2000      	movs	r0, #0
 8019d88:	6360      	str	r0, [r4, #52]	; 0x34
 8019d8a:	b113      	cbz	r3, 8019d92 <__ssrefill_r+0x24>
 8019d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019d8e:	6023      	str	r3, [r4, #0]
 8019d90:	bd10      	pop	{r4, pc}
 8019d92:	6923      	ldr	r3, [r4, #16]
 8019d94:	6023      	str	r3, [r4, #0]
 8019d96:	2300      	movs	r3, #0
 8019d98:	6063      	str	r3, [r4, #4]
 8019d9a:	89a3      	ldrh	r3, [r4, #12]
 8019d9c:	f043 0320 	orr.w	r3, r3, #32
 8019da0:	81a3      	strh	r3, [r4, #12]
 8019da2:	f04f 30ff 	mov.w	r0, #4294967295
 8019da6:	e7f3      	b.n	8019d90 <__ssrefill_r+0x22>

08019da8 <__ssvfiscanf_r>:
 8019da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dac:	460c      	mov	r4, r1
 8019dae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8019db2:	2100      	movs	r1, #0
 8019db4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019db8:	49a6      	ldr	r1, [pc, #664]	; (801a054 <__ssvfiscanf_r+0x2ac>)
 8019dba:	91a0      	str	r1, [sp, #640]	; 0x280
 8019dbc:	f10d 0804 	add.w	r8, sp, #4
 8019dc0:	49a5      	ldr	r1, [pc, #660]	; (801a058 <__ssvfiscanf_r+0x2b0>)
 8019dc2:	4fa6      	ldr	r7, [pc, #664]	; (801a05c <__ssvfiscanf_r+0x2b4>)
 8019dc4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801a060 <__ssvfiscanf_r+0x2b8>
 8019dc8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019dcc:	4606      	mov	r6, r0
 8019dce:	91a1      	str	r1, [sp, #644]	; 0x284
 8019dd0:	9300      	str	r3, [sp, #0]
 8019dd2:	7813      	ldrb	r3, [r2, #0]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	f000 815a 	beq.w	801a08e <__ssvfiscanf_r+0x2e6>
 8019dda:	5dd9      	ldrb	r1, [r3, r7]
 8019ddc:	f011 0108 	ands.w	r1, r1, #8
 8019de0:	f102 0501 	add.w	r5, r2, #1
 8019de4:	d019      	beq.n	8019e1a <__ssvfiscanf_r+0x72>
 8019de6:	6863      	ldr	r3, [r4, #4]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	dd0f      	ble.n	8019e0c <__ssvfiscanf_r+0x64>
 8019dec:	6823      	ldr	r3, [r4, #0]
 8019dee:	781a      	ldrb	r2, [r3, #0]
 8019df0:	5cba      	ldrb	r2, [r7, r2]
 8019df2:	0712      	lsls	r2, r2, #28
 8019df4:	d401      	bmi.n	8019dfa <__ssvfiscanf_r+0x52>
 8019df6:	462a      	mov	r2, r5
 8019df8:	e7eb      	b.n	8019dd2 <__ssvfiscanf_r+0x2a>
 8019dfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019dfc:	3201      	adds	r2, #1
 8019dfe:	9245      	str	r2, [sp, #276]	; 0x114
 8019e00:	6862      	ldr	r2, [r4, #4]
 8019e02:	3301      	adds	r3, #1
 8019e04:	3a01      	subs	r2, #1
 8019e06:	6062      	str	r2, [r4, #4]
 8019e08:	6023      	str	r3, [r4, #0]
 8019e0a:	e7ec      	b.n	8019de6 <__ssvfiscanf_r+0x3e>
 8019e0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019e0e:	4621      	mov	r1, r4
 8019e10:	4630      	mov	r0, r6
 8019e12:	4798      	blx	r3
 8019e14:	2800      	cmp	r0, #0
 8019e16:	d0e9      	beq.n	8019dec <__ssvfiscanf_r+0x44>
 8019e18:	e7ed      	b.n	8019df6 <__ssvfiscanf_r+0x4e>
 8019e1a:	2b25      	cmp	r3, #37	; 0x25
 8019e1c:	d012      	beq.n	8019e44 <__ssvfiscanf_r+0x9c>
 8019e1e:	469a      	mov	sl, r3
 8019e20:	6863      	ldr	r3, [r4, #4]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	f340 8091 	ble.w	8019f4a <__ssvfiscanf_r+0x1a2>
 8019e28:	6822      	ldr	r2, [r4, #0]
 8019e2a:	7813      	ldrb	r3, [r2, #0]
 8019e2c:	4553      	cmp	r3, sl
 8019e2e:	f040 812e 	bne.w	801a08e <__ssvfiscanf_r+0x2e6>
 8019e32:	6863      	ldr	r3, [r4, #4]
 8019e34:	3b01      	subs	r3, #1
 8019e36:	6063      	str	r3, [r4, #4]
 8019e38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019e3a:	3201      	adds	r2, #1
 8019e3c:	3301      	adds	r3, #1
 8019e3e:	6022      	str	r2, [r4, #0]
 8019e40:	9345      	str	r3, [sp, #276]	; 0x114
 8019e42:	e7d8      	b.n	8019df6 <__ssvfiscanf_r+0x4e>
 8019e44:	9141      	str	r1, [sp, #260]	; 0x104
 8019e46:	9143      	str	r1, [sp, #268]	; 0x10c
 8019e48:	7853      	ldrb	r3, [r2, #1]
 8019e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8019e4c:	bf02      	ittt	eq
 8019e4e:	2310      	moveq	r3, #16
 8019e50:	1c95      	addeq	r5, r2, #2
 8019e52:	9341      	streq	r3, [sp, #260]	; 0x104
 8019e54:	220a      	movs	r2, #10
 8019e56:	46aa      	mov	sl, r5
 8019e58:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019e5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019e60:	2b09      	cmp	r3, #9
 8019e62:	d91d      	bls.n	8019ea0 <__ssvfiscanf_r+0xf8>
 8019e64:	487e      	ldr	r0, [pc, #504]	; (801a060 <__ssvfiscanf_r+0x2b8>)
 8019e66:	2203      	movs	r2, #3
 8019e68:	f7e6 f9d2 	bl	8000210 <memchr>
 8019e6c:	b140      	cbz	r0, 8019e80 <__ssvfiscanf_r+0xd8>
 8019e6e:	2301      	movs	r3, #1
 8019e70:	eba0 0009 	sub.w	r0, r0, r9
 8019e74:	fa03 f000 	lsl.w	r0, r3, r0
 8019e78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019e7a:	4318      	orrs	r0, r3
 8019e7c:	9041      	str	r0, [sp, #260]	; 0x104
 8019e7e:	4655      	mov	r5, sl
 8019e80:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019e84:	2b78      	cmp	r3, #120	; 0x78
 8019e86:	d806      	bhi.n	8019e96 <__ssvfiscanf_r+0xee>
 8019e88:	2b57      	cmp	r3, #87	; 0x57
 8019e8a:	d810      	bhi.n	8019eae <__ssvfiscanf_r+0x106>
 8019e8c:	2b25      	cmp	r3, #37	; 0x25
 8019e8e:	d0c6      	beq.n	8019e1e <__ssvfiscanf_r+0x76>
 8019e90:	d856      	bhi.n	8019f40 <__ssvfiscanf_r+0x198>
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d064      	beq.n	8019f60 <__ssvfiscanf_r+0x1b8>
 8019e96:	2303      	movs	r3, #3
 8019e98:	9347      	str	r3, [sp, #284]	; 0x11c
 8019e9a:	230a      	movs	r3, #10
 8019e9c:	9342      	str	r3, [sp, #264]	; 0x108
 8019e9e:	e071      	b.n	8019f84 <__ssvfiscanf_r+0x1dc>
 8019ea0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019ea2:	fb02 1103 	mla	r1, r2, r3, r1
 8019ea6:	3930      	subs	r1, #48	; 0x30
 8019ea8:	9143      	str	r1, [sp, #268]	; 0x10c
 8019eaa:	4655      	mov	r5, sl
 8019eac:	e7d3      	b.n	8019e56 <__ssvfiscanf_r+0xae>
 8019eae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019eb2:	2a20      	cmp	r2, #32
 8019eb4:	d8ef      	bhi.n	8019e96 <__ssvfiscanf_r+0xee>
 8019eb6:	a101      	add	r1, pc, #4	; (adr r1, 8019ebc <__ssvfiscanf_r+0x114>)
 8019eb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019ebc:	08019f6f 	.word	0x08019f6f
 8019ec0:	08019e97 	.word	0x08019e97
 8019ec4:	08019e97 	.word	0x08019e97
 8019ec8:	08019fcd 	.word	0x08019fcd
 8019ecc:	08019e97 	.word	0x08019e97
 8019ed0:	08019e97 	.word	0x08019e97
 8019ed4:	08019e97 	.word	0x08019e97
 8019ed8:	08019e97 	.word	0x08019e97
 8019edc:	08019e97 	.word	0x08019e97
 8019ee0:	08019e97 	.word	0x08019e97
 8019ee4:	08019e97 	.word	0x08019e97
 8019ee8:	08019fe3 	.word	0x08019fe3
 8019eec:	08019fb9 	.word	0x08019fb9
 8019ef0:	08019f47 	.word	0x08019f47
 8019ef4:	08019f47 	.word	0x08019f47
 8019ef8:	08019f47 	.word	0x08019f47
 8019efc:	08019e97 	.word	0x08019e97
 8019f00:	08019fbd 	.word	0x08019fbd
 8019f04:	08019e97 	.word	0x08019e97
 8019f08:	08019e97 	.word	0x08019e97
 8019f0c:	08019e97 	.word	0x08019e97
 8019f10:	08019e97 	.word	0x08019e97
 8019f14:	08019ff3 	.word	0x08019ff3
 8019f18:	08019fc5 	.word	0x08019fc5
 8019f1c:	08019f67 	.word	0x08019f67
 8019f20:	08019e97 	.word	0x08019e97
 8019f24:	08019e97 	.word	0x08019e97
 8019f28:	08019fef 	.word	0x08019fef
 8019f2c:	08019e97 	.word	0x08019e97
 8019f30:	08019fb9 	.word	0x08019fb9
 8019f34:	08019e97 	.word	0x08019e97
 8019f38:	08019e97 	.word	0x08019e97
 8019f3c:	08019f6f 	.word	0x08019f6f
 8019f40:	3b45      	subs	r3, #69	; 0x45
 8019f42:	2b02      	cmp	r3, #2
 8019f44:	d8a7      	bhi.n	8019e96 <__ssvfiscanf_r+0xee>
 8019f46:	2305      	movs	r3, #5
 8019f48:	e01b      	b.n	8019f82 <__ssvfiscanf_r+0x1da>
 8019f4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019f4c:	4621      	mov	r1, r4
 8019f4e:	4630      	mov	r0, r6
 8019f50:	4798      	blx	r3
 8019f52:	2800      	cmp	r0, #0
 8019f54:	f43f af68 	beq.w	8019e28 <__ssvfiscanf_r+0x80>
 8019f58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019f5a:	2800      	cmp	r0, #0
 8019f5c:	f040 808d 	bne.w	801a07a <__ssvfiscanf_r+0x2d2>
 8019f60:	f04f 30ff 	mov.w	r0, #4294967295
 8019f64:	e08f      	b.n	801a086 <__ssvfiscanf_r+0x2de>
 8019f66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019f68:	f042 0220 	orr.w	r2, r2, #32
 8019f6c:	9241      	str	r2, [sp, #260]	; 0x104
 8019f6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019f74:	9241      	str	r2, [sp, #260]	; 0x104
 8019f76:	2210      	movs	r2, #16
 8019f78:	2b6f      	cmp	r3, #111	; 0x6f
 8019f7a:	9242      	str	r2, [sp, #264]	; 0x108
 8019f7c:	bf34      	ite	cc
 8019f7e:	2303      	movcc	r3, #3
 8019f80:	2304      	movcs	r3, #4
 8019f82:	9347      	str	r3, [sp, #284]	; 0x11c
 8019f84:	6863      	ldr	r3, [r4, #4]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	dd42      	ble.n	801a010 <__ssvfiscanf_r+0x268>
 8019f8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019f8c:	0659      	lsls	r1, r3, #25
 8019f8e:	d404      	bmi.n	8019f9a <__ssvfiscanf_r+0x1f2>
 8019f90:	6823      	ldr	r3, [r4, #0]
 8019f92:	781a      	ldrb	r2, [r3, #0]
 8019f94:	5cba      	ldrb	r2, [r7, r2]
 8019f96:	0712      	lsls	r2, r2, #28
 8019f98:	d441      	bmi.n	801a01e <__ssvfiscanf_r+0x276>
 8019f9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019f9c:	2b02      	cmp	r3, #2
 8019f9e:	dc50      	bgt.n	801a042 <__ssvfiscanf_r+0x29a>
 8019fa0:	466b      	mov	r3, sp
 8019fa2:	4622      	mov	r2, r4
 8019fa4:	a941      	add	r1, sp, #260	; 0x104
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	f000 f876 	bl	801a098 <_scanf_chars>
 8019fac:	2801      	cmp	r0, #1
 8019fae:	d06e      	beq.n	801a08e <__ssvfiscanf_r+0x2e6>
 8019fb0:	2802      	cmp	r0, #2
 8019fb2:	f47f af20 	bne.w	8019df6 <__ssvfiscanf_r+0x4e>
 8019fb6:	e7cf      	b.n	8019f58 <__ssvfiscanf_r+0x1b0>
 8019fb8:	220a      	movs	r2, #10
 8019fba:	e7dd      	b.n	8019f78 <__ssvfiscanf_r+0x1d0>
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	9342      	str	r3, [sp, #264]	; 0x108
 8019fc0:	2303      	movs	r3, #3
 8019fc2:	e7de      	b.n	8019f82 <__ssvfiscanf_r+0x1da>
 8019fc4:	2308      	movs	r3, #8
 8019fc6:	9342      	str	r3, [sp, #264]	; 0x108
 8019fc8:	2304      	movs	r3, #4
 8019fca:	e7da      	b.n	8019f82 <__ssvfiscanf_r+0x1da>
 8019fcc:	4629      	mov	r1, r5
 8019fce:	4640      	mov	r0, r8
 8019fd0:	f000 f9de 	bl	801a390 <__sccl>
 8019fd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fda:	9341      	str	r3, [sp, #260]	; 0x104
 8019fdc:	4605      	mov	r5, r0
 8019fde:	2301      	movs	r3, #1
 8019fe0:	e7cf      	b.n	8019f82 <__ssvfiscanf_r+0x1da>
 8019fe2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fe8:	9341      	str	r3, [sp, #260]	; 0x104
 8019fea:	2300      	movs	r3, #0
 8019fec:	e7c9      	b.n	8019f82 <__ssvfiscanf_r+0x1da>
 8019fee:	2302      	movs	r3, #2
 8019ff0:	e7c7      	b.n	8019f82 <__ssvfiscanf_r+0x1da>
 8019ff2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019ff4:	06c3      	lsls	r3, r0, #27
 8019ff6:	f53f aefe 	bmi.w	8019df6 <__ssvfiscanf_r+0x4e>
 8019ffa:	9b00      	ldr	r3, [sp, #0]
 8019ffc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019ffe:	1d19      	adds	r1, r3, #4
 801a000:	9100      	str	r1, [sp, #0]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	f010 0f01 	tst.w	r0, #1
 801a008:	bf14      	ite	ne
 801a00a:	801a      	strhne	r2, [r3, #0]
 801a00c:	601a      	streq	r2, [r3, #0]
 801a00e:	e6f2      	b.n	8019df6 <__ssvfiscanf_r+0x4e>
 801a010:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a012:	4621      	mov	r1, r4
 801a014:	4630      	mov	r0, r6
 801a016:	4798      	blx	r3
 801a018:	2800      	cmp	r0, #0
 801a01a:	d0b6      	beq.n	8019f8a <__ssvfiscanf_r+0x1e2>
 801a01c:	e79c      	b.n	8019f58 <__ssvfiscanf_r+0x1b0>
 801a01e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a020:	3201      	adds	r2, #1
 801a022:	9245      	str	r2, [sp, #276]	; 0x114
 801a024:	6862      	ldr	r2, [r4, #4]
 801a026:	3a01      	subs	r2, #1
 801a028:	2a00      	cmp	r2, #0
 801a02a:	6062      	str	r2, [r4, #4]
 801a02c:	dd02      	ble.n	801a034 <__ssvfiscanf_r+0x28c>
 801a02e:	3301      	adds	r3, #1
 801a030:	6023      	str	r3, [r4, #0]
 801a032:	e7ad      	b.n	8019f90 <__ssvfiscanf_r+0x1e8>
 801a034:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a036:	4621      	mov	r1, r4
 801a038:	4630      	mov	r0, r6
 801a03a:	4798      	blx	r3
 801a03c:	2800      	cmp	r0, #0
 801a03e:	d0a7      	beq.n	8019f90 <__ssvfiscanf_r+0x1e8>
 801a040:	e78a      	b.n	8019f58 <__ssvfiscanf_r+0x1b0>
 801a042:	2b04      	cmp	r3, #4
 801a044:	dc0e      	bgt.n	801a064 <__ssvfiscanf_r+0x2bc>
 801a046:	466b      	mov	r3, sp
 801a048:	4622      	mov	r2, r4
 801a04a:	a941      	add	r1, sp, #260	; 0x104
 801a04c:	4630      	mov	r0, r6
 801a04e:	f000 f87d 	bl	801a14c <_scanf_i>
 801a052:	e7ab      	b.n	8019fac <__ssvfiscanf_r+0x204>
 801a054:	08019cf5 	.word	0x08019cf5
 801a058:	08019d6f 	.word	0x08019d6f
 801a05c:	0801bac1 	.word	0x0801bac1
 801a060:	0801be2a 	.word	0x0801be2a
 801a064:	4b0b      	ldr	r3, [pc, #44]	; (801a094 <__ssvfiscanf_r+0x2ec>)
 801a066:	2b00      	cmp	r3, #0
 801a068:	f43f aec5 	beq.w	8019df6 <__ssvfiscanf_r+0x4e>
 801a06c:	466b      	mov	r3, sp
 801a06e:	4622      	mov	r2, r4
 801a070:	a941      	add	r1, sp, #260	; 0x104
 801a072:	4630      	mov	r0, r6
 801a074:	f7fc fb84 	bl	8016780 <_scanf_float>
 801a078:	e798      	b.n	8019fac <__ssvfiscanf_r+0x204>
 801a07a:	89a3      	ldrh	r3, [r4, #12]
 801a07c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a080:	bf18      	it	ne
 801a082:	f04f 30ff 	movne.w	r0, #4294967295
 801a086:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a08e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a090:	e7f9      	b.n	801a086 <__ssvfiscanf_r+0x2de>
 801a092:	bf00      	nop
 801a094:	08016781 	.word	0x08016781

0801a098 <_scanf_chars>:
 801a098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a09c:	4615      	mov	r5, r2
 801a09e:	688a      	ldr	r2, [r1, #8]
 801a0a0:	4680      	mov	r8, r0
 801a0a2:	460c      	mov	r4, r1
 801a0a4:	b932      	cbnz	r2, 801a0b4 <_scanf_chars+0x1c>
 801a0a6:	698a      	ldr	r2, [r1, #24]
 801a0a8:	2a00      	cmp	r2, #0
 801a0aa:	bf0c      	ite	eq
 801a0ac:	2201      	moveq	r2, #1
 801a0ae:	f04f 32ff 	movne.w	r2, #4294967295
 801a0b2:	608a      	str	r2, [r1, #8]
 801a0b4:	6822      	ldr	r2, [r4, #0]
 801a0b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801a148 <_scanf_chars+0xb0>
 801a0ba:	06d1      	lsls	r1, r2, #27
 801a0bc:	bf5f      	itttt	pl
 801a0be:	681a      	ldrpl	r2, [r3, #0]
 801a0c0:	1d11      	addpl	r1, r2, #4
 801a0c2:	6019      	strpl	r1, [r3, #0]
 801a0c4:	6816      	ldrpl	r6, [r2, #0]
 801a0c6:	2700      	movs	r7, #0
 801a0c8:	69a0      	ldr	r0, [r4, #24]
 801a0ca:	b188      	cbz	r0, 801a0f0 <_scanf_chars+0x58>
 801a0cc:	2801      	cmp	r0, #1
 801a0ce:	d107      	bne.n	801a0e0 <_scanf_chars+0x48>
 801a0d0:	682a      	ldr	r2, [r5, #0]
 801a0d2:	7811      	ldrb	r1, [r2, #0]
 801a0d4:	6962      	ldr	r2, [r4, #20]
 801a0d6:	5c52      	ldrb	r2, [r2, r1]
 801a0d8:	b952      	cbnz	r2, 801a0f0 <_scanf_chars+0x58>
 801a0da:	2f00      	cmp	r7, #0
 801a0dc:	d031      	beq.n	801a142 <_scanf_chars+0xaa>
 801a0de:	e022      	b.n	801a126 <_scanf_chars+0x8e>
 801a0e0:	2802      	cmp	r0, #2
 801a0e2:	d120      	bne.n	801a126 <_scanf_chars+0x8e>
 801a0e4:	682b      	ldr	r3, [r5, #0]
 801a0e6:	781b      	ldrb	r3, [r3, #0]
 801a0e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a0ec:	071b      	lsls	r3, r3, #28
 801a0ee:	d41a      	bmi.n	801a126 <_scanf_chars+0x8e>
 801a0f0:	6823      	ldr	r3, [r4, #0]
 801a0f2:	06da      	lsls	r2, r3, #27
 801a0f4:	bf5e      	ittt	pl
 801a0f6:	682b      	ldrpl	r3, [r5, #0]
 801a0f8:	781b      	ldrbpl	r3, [r3, #0]
 801a0fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a0fe:	682a      	ldr	r2, [r5, #0]
 801a100:	686b      	ldr	r3, [r5, #4]
 801a102:	3201      	adds	r2, #1
 801a104:	602a      	str	r2, [r5, #0]
 801a106:	68a2      	ldr	r2, [r4, #8]
 801a108:	3b01      	subs	r3, #1
 801a10a:	3a01      	subs	r2, #1
 801a10c:	606b      	str	r3, [r5, #4]
 801a10e:	3701      	adds	r7, #1
 801a110:	60a2      	str	r2, [r4, #8]
 801a112:	b142      	cbz	r2, 801a126 <_scanf_chars+0x8e>
 801a114:	2b00      	cmp	r3, #0
 801a116:	dcd7      	bgt.n	801a0c8 <_scanf_chars+0x30>
 801a118:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a11c:	4629      	mov	r1, r5
 801a11e:	4640      	mov	r0, r8
 801a120:	4798      	blx	r3
 801a122:	2800      	cmp	r0, #0
 801a124:	d0d0      	beq.n	801a0c8 <_scanf_chars+0x30>
 801a126:	6823      	ldr	r3, [r4, #0]
 801a128:	f013 0310 	ands.w	r3, r3, #16
 801a12c:	d105      	bne.n	801a13a <_scanf_chars+0xa2>
 801a12e:	68e2      	ldr	r2, [r4, #12]
 801a130:	3201      	adds	r2, #1
 801a132:	60e2      	str	r2, [r4, #12]
 801a134:	69a2      	ldr	r2, [r4, #24]
 801a136:	b102      	cbz	r2, 801a13a <_scanf_chars+0xa2>
 801a138:	7033      	strb	r3, [r6, #0]
 801a13a:	6923      	ldr	r3, [r4, #16]
 801a13c:	443b      	add	r3, r7
 801a13e:	6123      	str	r3, [r4, #16]
 801a140:	2000      	movs	r0, #0
 801a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a146:	bf00      	nop
 801a148:	0801bac1 	.word	0x0801bac1

0801a14c <_scanf_i>:
 801a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a150:	4698      	mov	r8, r3
 801a152:	4b76      	ldr	r3, [pc, #472]	; (801a32c <_scanf_i+0x1e0>)
 801a154:	460c      	mov	r4, r1
 801a156:	4682      	mov	sl, r0
 801a158:	4616      	mov	r6, r2
 801a15a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a15e:	b087      	sub	sp, #28
 801a160:	ab03      	add	r3, sp, #12
 801a162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a166:	4b72      	ldr	r3, [pc, #456]	; (801a330 <_scanf_i+0x1e4>)
 801a168:	69a1      	ldr	r1, [r4, #24]
 801a16a:	4a72      	ldr	r2, [pc, #456]	; (801a334 <_scanf_i+0x1e8>)
 801a16c:	2903      	cmp	r1, #3
 801a16e:	bf18      	it	ne
 801a170:	461a      	movne	r2, r3
 801a172:	68a3      	ldr	r3, [r4, #8]
 801a174:	9201      	str	r2, [sp, #4]
 801a176:	1e5a      	subs	r2, r3, #1
 801a178:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a17c:	bf88      	it	hi
 801a17e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a182:	4627      	mov	r7, r4
 801a184:	bf82      	ittt	hi
 801a186:	eb03 0905 	addhi.w	r9, r3, r5
 801a18a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a18e:	60a3      	strhi	r3, [r4, #8]
 801a190:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a194:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a198:	bf98      	it	ls
 801a19a:	f04f 0900 	movls.w	r9, #0
 801a19e:	6023      	str	r3, [r4, #0]
 801a1a0:	463d      	mov	r5, r7
 801a1a2:	f04f 0b00 	mov.w	fp, #0
 801a1a6:	6831      	ldr	r1, [r6, #0]
 801a1a8:	ab03      	add	r3, sp, #12
 801a1aa:	7809      	ldrb	r1, [r1, #0]
 801a1ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a1b0:	2202      	movs	r2, #2
 801a1b2:	f7e6 f82d 	bl	8000210 <memchr>
 801a1b6:	b328      	cbz	r0, 801a204 <_scanf_i+0xb8>
 801a1b8:	f1bb 0f01 	cmp.w	fp, #1
 801a1bc:	d159      	bne.n	801a272 <_scanf_i+0x126>
 801a1be:	6862      	ldr	r2, [r4, #4]
 801a1c0:	b92a      	cbnz	r2, 801a1ce <_scanf_i+0x82>
 801a1c2:	6822      	ldr	r2, [r4, #0]
 801a1c4:	2308      	movs	r3, #8
 801a1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a1ca:	6063      	str	r3, [r4, #4]
 801a1cc:	6022      	str	r2, [r4, #0]
 801a1ce:	6822      	ldr	r2, [r4, #0]
 801a1d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a1d4:	6022      	str	r2, [r4, #0]
 801a1d6:	68a2      	ldr	r2, [r4, #8]
 801a1d8:	1e51      	subs	r1, r2, #1
 801a1da:	60a1      	str	r1, [r4, #8]
 801a1dc:	b192      	cbz	r2, 801a204 <_scanf_i+0xb8>
 801a1de:	6832      	ldr	r2, [r6, #0]
 801a1e0:	1c51      	adds	r1, r2, #1
 801a1e2:	6031      	str	r1, [r6, #0]
 801a1e4:	7812      	ldrb	r2, [r2, #0]
 801a1e6:	f805 2b01 	strb.w	r2, [r5], #1
 801a1ea:	6872      	ldr	r2, [r6, #4]
 801a1ec:	3a01      	subs	r2, #1
 801a1ee:	2a00      	cmp	r2, #0
 801a1f0:	6072      	str	r2, [r6, #4]
 801a1f2:	dc07      	bgt.n	801a204 <_scanf_i+0xb8>
 801a1f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a1f8:	4631      	mov	r1, r6
 801a1fa:	4650      	mov	r0, sl
 801a1fc:	4790      	blx	r2
 801a1fe:	2800      	cmp	r0, #0
 801a200:	f040 8085 	bne.w	801a30e <_scanf_i+0x1c2>
 801a204:	f10b 0b01 	add.w	fp, fp, #1
 801a208:	f1bb 0f03 	cmp.w	fp, #3
 801a20c:	d1cb      	bne.n	801a1a6 <_scanf_i+0x5a>
 801a20e:	6863      	ldr	r3, [r4, #4]
 801a210:	b90b      	cbnz	r3, 801a216 <_scanf_i+0xca>
 801a212:	230a      	movs	r3, #10
 801a214:	6063      	str	r3, [r4, #4]
 801a216:	6863      	ldr	r3, [r4, #4]
 801a218:	4947      	ldr	r1, [pc, #284]	; (801a338 <_scanf_i+0x1ec>)
 801a21a:	6960      	ldr	r0, [r4, #20]
 801a21c:	1ac9      	subs	r1, r1, r3
 801a21e:	f000 f8b7 	bl	801a390 <__sccl>
 801a222:	f04f 0b00 	mov.w	fp, #0
 801a226:	68a3      	ldr	r3, [r4, #8]
 801a228:	6822      	ldr	r2, [r4, #0]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d03d      	beq.n	801a2aa <_scanf_i+0x15e>
 801a22e:	6831      	ldr	r1, [r6, #0]
 801a230:	6960      	ldr	r0, [r4, #20]
 801a232:	f891 c000 	ldrb.w	ip, [r1]
 801a236:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a23a:	2800      	cmp	r0, #0
 801a23c:	d035      	beq.n	801a2aa <_scanf_i+0x15e>
 801a23e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a242:	d124      	bne.n	801a28e <_scanf_i+0x142>
 801a244:	0510      	lsls	r0, r2, #20
 801a246:	d522      	bpl.n	801a28e <_scanf_i+0x142>
 801a248:	f10b 0b01 	add.w	fp, fp, #1
 801a24c:	f1b9 0f00 	cmp.w	r9, #0
 801a250:	d003      	beq.n	801a25a <_scanf_i+0x10e>
 801a252:	3301      	adds	r3, #1
 801a254:	f109 39ff 	add.w	r9, r9, #4294967295
 801a258:	60a3      	str	r3, [r4, #8]
 801a25a:	6873      	ldr	r3, [r6, #4]
 801a25c:	3b01      	subs	r3, #1
 801a25e:	2b00      	cmp	r3, #0
 801a260:	6073      	str	r3, [r6, #4]
 801a262:	dd1b      	ble.n	801a29c <_scanf_i+0x150>
 801a264:	6833      	ldr	r3, [r6, #0]
 801a266:	3301      	adds	r3, #1
 801a268:	6033      	str	r3, [r6, #0]
 801a26a:	68a3      	ldr	r3, [r4, #8]
 801a26c:	3b01      	subs	r3, #1
 801a26e:	60a3      	str	r3, [r4, #8]
 801a270:	e7d9      	b.n	801a226 <_scanf_i+0xda>
 801a272:	f1bb 0f02 	cmp.w	fp, #2
 801a276:	d1ae      	bne.n	801a1d6 <_scanf_i+0x8a>
 801a278:	6822      	ldr	r2, [r4, #0]
 801a27a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a27e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a282:	d1bf      	bne.n	801a204 <_scanf_i+0xb8>
 801a284:	2310      	movs	r3, #16
 801a286:	6063      	str	r3, [r4, #4]
 801a288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a28c:	e7a2      	b.n	801a1d4 <_scanf_i+0x88>
 801a28e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a292:	6022      	str	r2, [r4, #0]
 801a294:	780b      	ldrb	r3, [r1, #0]
 801a296:	f805 3b01 	strb.w	r3, [r5], #1
 801a29a:	e7de      	b.n	801a25a <_scanf_i+0x10e>
 801a29c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a2a0:	4631      	mov	r1, r6
 801a2a2:	4650      	mov	r0, sl
 801a2a4:	4798      	blx	r3
 801a2a6:	2800      	cmp	r0, #0
 801a2a8:	d0df      	beq.n	801a26a <_scanf_i+0x11e>
 801a2aa:	6823      	ldr	r3, [r4, #0]
 801a2ac:	05db      	lsls	r3, r3, #23
 801a2ae:	d50d      	bpl.n	801a2cc <_scanf_i+0x180>
 801a2b0:	42bd      	cmp	r5, r7
 801a2b2:	d909      	bls.n	801a2c8 <_scanf_i+0x17c>
 801a2b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a2b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a2bc:	4632      	mov	r2, r6
 801a2be:	4650      	mov	r0, sl
 801a2c0:	4798      	blx	r3
 801a2c2:	f105 39ff 	add.w	r9, r5, #4294967295
 801a2c6:	464d      	mov	r5, r9
 801a2c8:	42bd      	cmp	r5, r7
 801a2ca:	d02d      	beq.n	801a328 <_scanf_i+0x1dc>
 801a2cc:	6822      	ldr	r2, [r4, #0]
 801a2ce:	f012 0210 	ands.w	r2, r2, #16
 801a2d2:	d113      	bne.n	801a2fc <_scanf_i+0x1b0>
 801a2d4:	702a      	strb	r2, [r5, #0]
 801a2d6:	6863      	ldr	r3, [r4, #4]
 801a2d8:	9e01      	ldr	r6, [sp, #4]
 801a2da:	4639      	mov	r1, r7
 801a2dc:	4650      	mov	r0, sl
 801a2de:	47b0      	blx	r6
 801a2e0:	6821      	ldr	r1, [r4, #0]
 801a2e2:	f8d8 3000 	ldr.w	r3, [r8]
 801a2e6:	f011 0f20 	tst.w	r1, #32
 801a2ea:	d013      	beq.n	801a314 <_scanf_i+0x1c8>
 801a2ec:	1d1a      	adds	r2, r3, #4
 801a2ee:	f8c8 2000 	str.w	r2, [r8]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	6018      	str	r0, [r3, #0]
 801a2f6:	68e3      	ldr	r3, [r4, #12]
 801a2f8:	3301      	adds	r3, #1
 801a2fa:	60e3      	str	r3, [r4, #12]
 801a2fc:	1bed      	subs	r5, r5, r7
 801a2fe:	44ab      	add	fp, r5
 801a300:	6925      	ldr	r5, [r4, #16]
 801a302:	445d      	add	r5, fp
 801a304:	6125      	str	r5, [r4, #16]
 801a306:	2000      	movs	r0, #0
 801a308:	b007      	add	sp, #28
 801a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a30e:	f04f 0b00 	mov.w	fp, #0
 801a312:	e7ca      	b.n	801a2aa <_scanf_i+0x15e>
 801a314:	1d1a      	adds	r2, r3, #4
 801a316:	f8c8 2000 	str.w	r2, [r8]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	f011 0f01 	tst.w	r1, #1
 801a320:	bf14      	ite	ne
 801a322:	8018      	strhne	r0, [r3, #0]
 801a324:	6018      	streq	r0, [r3, #0]
 801a326:	e7e6      	b.n	801a2f6 <_scanf_i+0x1aa>
 801a328:	2001      	movs	r0, #1
 801a32a:	e7ed      	b.n	801a308 <_scanf_i+0x1bc>
 801a32c:	0801ba0c 	.word	0x0801ba0c
 801a330:	0801a50d 	.word	0x0801a50d
 801a334:	08017a4d 	.word	0x08017a4d
 801a338:	0801be4e 	.word	0x0801be4e

0801a33c <_read_r>:
 801a33c:	b538      	push	{r3, r4, r5, lr}
 801a33e:	4d07      	ldr	r5, [pc, #28]	; (801a35c <_read_r+0x20>)
 801a340:	4604      	mov	r4, r0
 801a342:	4608      	mov	r0, r1
 801a344:	4611      	mov	r1, r2
 801a346:	2200      	movs	r2, #0
 801a348:	602a      	str	r2, [r5, #0]
 801a34a:	461a      	mov	r2, r3
 801a34c:	f7e8 f80b 	bl	8002366 <_read>
 801a350:	1c43      	adds	r3, r0, #1
 801a352:	d102      	bne.n	801a35a <_read_r+0x1e>
 801a354:	682b      	ldr	r3, [r5, #0]
 801a356:	b103      	cbz	r3, 801a35a <_read_r+0x1e>
 801a358:	6023      	str	r3, [r4, #0]
 801a35a:	bd38      	pop	{r3, r4, r5, pc}
 801a35c:	20004130 	.word	0x20004130

0801a360 <nan>:
 801a360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a368 <nan+0x8>
 801a364:	4770      	bx	lr
 801a366:	bf00      	nop
 801a368:	00000000 	.word	0x00000000
 801a36c:	7ff80000 	.word	0x7ff80000

0801a370 <_sbrk_r>:
 801a370:	b538      	push	{r3, r4, r5, lr}
 801a372:	4d06      	ldr	r5, [pc, #24]	; (801a38c <_sbrk_r+0x1c>)
 801a374:	2300      	movs	r3, #0
 801a376:	4604      	mov	r4, r0
 801a378:	4608      	mov	r0, r1
 801a37a:	602b      	str	r3, [r5, #0]
 801a37c:	f7e8 f860 	bl	8002440 <_sbrk>
 801a380:	1c43      	adds	r3, r0, #1
 801a382:	d102      	bne.n	801a38a <_sbrk_r+0x1a>
 801a384:	682b      	ldr	r3, [r5, #0]
 801a386:	b103      	cbz	r3, 801a38a <_sbrk_r+0x1a>
 801a388:	6023      	str	r3, [r4, #0]
 801a38a:	bd38      	pop	{r3, r4, r5, pc}
 801a38c:	20004130 	.word	0x20004130

0801a390 <__sccl>:
 801a390:	b570      	push	{r4, r5, r6, lr}
 801a392:	780b      	ldrb	r3, [r1, #0]
 801a394:	4604      	mov	r4, r0
 801a396:	2b5e      	cmp	r3, #94	; 0x5e
 801a398:	bf0b      	itete	eq
 801a39a:	784b      	ldrbeq	r3, [r1, #1]
 801a39c:	1c48      	addne	r0, r1, #1
 801a39e:	1c88      	addeq	r0, r1, #2
 801a3a0:	2200      	movne	r2, #0
 801a3a2:	bf08      	it	eq
 801a3a4:	2201      	moveq	r2, #1
 801a3a6:	1e61      	subs	r1, r4, #1
 801a3a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a3ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a3b0:	42a9      	cmp	r1, r5
 801a3b2:	d1fb      	bne.n	801a3ac <__sccl+0x1c>
 801a3b4:	b90b      	cbnz	r3, 801a3ba <__sccl+0x2a>
 801a3b6:	3801      	subs	r0, #1
 801a3b8:	bd70      	pop	{r4, r5, r6, pc}
 801a3ba:	f082 0201 	eor.w	r2, r2, #1
 801a3be:	54e2      	strb	r2, [r4, r3]
 801a3c0:	4605      	mov	r5, r0
 801a3c2:	4628      	mov	r0, r5
 801a3c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 801a3c8:	292d      	cmp	r1, #45	; 0x2d
 801a3ca:	d006      	beq.n	801a3da <__sccl+0x4a>
 801a3cc:	295d      	cmp	r1, #93	; 0x5d
 801a3ce:	d0f3      	beq.n	801a3b8 <__sccl+0x28>
 801a3d0:	b909      	cbnz	r1, 801a3d6 <__sccl+0x46>
 801a3d2:	4628      	mov	r0, r5
 801a3d4:	e7f0      	b.n	801a3b8 <__sccl+0x28>
 801a3d6:	460b      	mov	r3, r1
 801a3d8:	e7f1      	b.n	801a3be <__sccl+0x2e>
 801a3da:	786e      	ldrb	r6, [r5, #1]
 801a3dc:	2e5d      	cmp	r6, #93	; 0x5d
 801a3de:	d0fa      	beq.n	801a3d6 <__sccl+0x46>
 801a3e0:	42b3      	cmp	r3, r6
 801a3e2:	dcf8      	bgt.n	801a3d6 <__sccl+0x46>
 801a3e4:	3502      	adds	r5, #2
 801a3e6:	4619      	mov	r1, r3
 801a3e8:	3101      	adds	r1, #1
 801a3ea:	428e      	cmp	r6, r1
 801a3ec:	5462      	strb	r2, [r4, r1]
 801a3ee:	dcfb      	bgt.n	801a3e8 <__sccl+0x58>
 801a3f0:	1af1      	subs	r1, r6, r3
 801a3f2:	3901      	subs	r1, #1
 801a3f4:	1c58      	adds	r0, r3, #1
 801a3f6:	42b3      	cmp	r3, r6
 801a3f8:	bfa8      	it	ge
 801a3fa:	2100      	movge	r1, #0
 801a3fc:	1843      	adds	r3, r0, r1
 801a3fe:	e7e0      	b.n	801a3c2 <__sccl+0x32>

0801a400 <strncmp>:
 801a400:	b510      	push	{r4, lr}
 801a402:	b17a      	cbz	r2, 801a424 <strncmp+0x24>
 801a404:	4603      	mov	r3, r0
 801a406:	3901      	subs	r1, #1
 801a408:	1884      	adds	r4, r0, r2
 801a40a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a40e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a412:	4290      	cmp	r0, r2
 801a414:	d101      	bne.n	801a41a <strncmp+0x1a>
 801a416:	42a3      	cmp	r3, r4
 801a418:	d101      	bne.n	801a41e <strncmp+0x1e>
 801a41a:	1a80      	subs	r0, r0, r2
 801a41c:	bd10      	pop	{r4, pc}
 801a41e:	2800      	cmp	r0, #0
 801a420:	d1f3      	bne.n	801a40a <strncmp+0xa>
 801a422:	e7fa      	b.n	801a41a <strncmp+0x1a>
 801a424:	4610      	mov	r0, r2
 801a426:	e7f9      	b.n	801a41c <strncmp+0x1c>

0801a428 <_strtoul_l.constprop.0>:
 801a428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a42c:	4f36      	ldr	r7, [pc, #216]	; (801a508 <_strtoul_l.constprop.0+0xe0>)
 801a42e:	4686      	mov	lr, r0
 801a430:	460d      	mov	r5, r1
 801a432:	4628      	mov	r0, r5
 801a434:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a438:	5de6      	ldrb	r6, [r4, r7]
 801a43a:	f016 0608 	ands.w	r6, r6, #8
 801a43e:	d1f8      	bne.n	801a432 <_strtoul_l.constprop.0+0xa>
 801a440:	2c2d      	cmp	r4, #45	; 0x2d
 801a442:	d12f      	bne.n	801a4a4 <_strtoul_l.constprop.0+0x7c>
 801a444:	782c      	ldrb	r4, [r5, #0]
 801a446:	2601      	movs	r6, #1
 801a448:	1c85      	adds	r5, r0, #2
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d057      	beq.n	801a4fe <_strtoul_l.constprop.0+0xd6>
 801a44e:	2b10      	cmp	r3, #16
 801a450:	d109      	bne.n	801a466 <_strtoul_l.constprop.0+0x3e>
 801a452:	2c30      	cmp	r4, #48	; 0x30
 801a454:	d107      	bne.n	801a466 <_strtoul_l.constprop.0+0x3e>
 801a456:	7828      	ldrb	r0, [r5, #0]
 801a458:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a45c:	2858      	cmp	r0, #88	; 0x58
 801a45e:	d149      	bne.n	801a4f4 <_strtoul_l.constprop.0+0xcc>
 801a460:	786c      	ldrb	r4, [r5, #1]
 801a462:	2310      	movs	r3, #16
 801a464:	3502      	adds	r5, #2
 801a466:	f04f 38ff 	mov.w	r8, #4294967295
 801a46a:	2700      	movs	r7, #0
 801a46c:	fbb8 f8f3 	udiv	r8, r8, r3
 801a470:	fb03 f908 	mul.w	r9, r3, r8
 801a474:	ea6f 0909 	mvn.w	r9, r9
 801a478:	4638      	mov	r0, r7
 801a47a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a47e:	f1bc 0f09 	cmp.w	ip, #9
 801a482:	d814      	bhi.n	801a4ae <_strtoul_l.constprop.0+0x86>
 801a484:	4664      	mov	r4, ip
 801a486:	42a3      	cmp	r3, r4
 801a488:	dd22      	ble.n	801a4d0 <_strtoul_l.constprop.0+0xa8>
 801a48a:	2f00      	cmp	r7, #0
 801a48c:	db1d      	blt.n	801a4ca <_strtoul_l.constprop.0+0xa2>
 801a48e:	4580      	cmp	r8, r0
 801a490:	d31b      	bcc.n	801a4ca <_strtoul_l.constprop.0+0xa2>
 801a492:	d101      	bne.n	801a498 <_strtoul_l.constprop.0+0x70>
 801a494:	45a1      	cmp	r9, r4
 801a496:	db18      	blt.n	801a4ca <_strtoul_l.constprop.0+0xa2>
 801a498:	fb00 4003 	mla	r0, r0, r3, r4
 801a49c:	2701      	movs	r7, #1
 801a49e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a4a2:	e7ea      	b.n	801a47a <_strtoul_l.constprop.0+0x52>
 801a4a4:	2c2b      	cmp	r4, #43	; 0x2b
 801a4a6:	bf04      	itt	eq
 801a4a8:	782c      	ldrbeq	r4, [r5, #0]
 801a4aa:	1c85      	addeq	r5, r0, #2
 801a4ac:	e7cd      	b.n	801a44a <_strtoul_l.constprop.0+0x22>
 801a4ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a4b2:	f1bc 0f19 	cmp.w	ip, #25
 801a4b6:	d801      	bhi.n	801a4bc <_strtoul_l.constprop.0+0x94>
 801a4b8:	3c37      	subs	r4, #55	; 0x37
 801a4ba:	e7e4      	b.n	801a486 <_strtoul_l.constprop.0+0x5e>
 801a4bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a4c0:	f1bc 0f19 	cmp.w	ip, #25
 801a4c4:	d804      	bhi.n	801a4d0 <_strtoul_l.constprop.0+0xa8>
 801a4c6:	3c57      	subs	r4, #87	; 0x57
 801a4c8:	e7dd      	b.n	801a486 <_strtoul_l.constprop.0+0x5e>
 801a4ca:	f04f 37ff 	mov.w	r7, #4294967295
 801a4ce:	e7e6      	b.n	801a49e <_strtoul_l.constprop.0+0x76>
 801a4d0:	2f00      	cmp	r7, #0
 801a4d2:	da07      	bge.n	801a4e4 <_strtoul_l.constprop.0+0xbc>
 801a4d4:	2322      	movs	r3, #34	; 0x22
 801a4d6:	f8ce 3000 	str.w	r3, [lr]
 801a4da:	f04f 30ff 	mov.w	r0, #4294967295
 801a4de:	b932      	cbnz	r2, 801a4ee <_strtoul_l.constprop.0+0xc6>
 801a4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4e4:	b106      	cbz	r6, 801a4e8 <_strtoul_l.constprop.0+0xc0>
 801a4e6:	4240      	negs	r0, r0
 801a4e8:	2a00      	cmp	r2, #0
 801a4ea:	d0f9      	beq.n	801a4e0 <_strtoul_l.constprop.0+0xb8>
 801a4ec:	b107      	cbz	r7, 801a4f0 <_strtoul_l.constprop.0+0xc8>
 801a4ee:	1e69      	subs	r1, r5, #1
 801a4f0:	6011      	str	r1, [r2, #0]
 801a4f2:	e7f5      	b.n	801a4e0 <_strtoul_l.constprop.0+0xb8>
 801a4f4:	2430      	movs	r4, #48	; 0x30
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d1b5      	bne.n	801a466 <_strtoul_l.constprop.0+0x3e>
 801a4fa:	2308      	movs	r3, #8
 801a4fc:	e7b3      	b.n	801a466 <_strtoul_l.constprop.0+0x3e>
 801a4fe:	2c30      	cmp	r4, #48	; 0x30
 801a500:	d0a9      	beq.n	801a456 <_strtoul_l.constprop.0+0x2e>
 801a502:	230a      	movs	r3, #10
 801a504:	e7af      	b.n	801a466 <_strtoul_l.constprop.0+0x3e>
 801a506:	bf00      	nop
 801a508:	0801bac1 	.word	0x0801bac1

0801a50c <_strtoul_r>:
 801a50c:	f7ff bf8c 	b.w	801a428 <_strtoul_l.constprop.0>

0801a510 <__submore>:
 801a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a514:	460c      	mov	r4, r1
 801a516:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a51c:	4299      	cmp	r1, r3
 801a51e:	d11d      	bne.n	801a55c <__submore+0x4c>
 801a520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a524:	f7ff fa16 	bl	8019954 <_malloc_r>
 801a528:	b918      	cbnz	r0, 801a532 <__submore+0x22>
 801a52a:	f04f 30ff 	mov.w	r0, #4294967295
 801a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a536:	63a3      	str	r3, [r4, #56]	; 0x38
 801a538:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a53c:	6360      	str	r0, [r4, #52]	; 0x34
 801a53e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a542:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a546:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a54a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a54e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a552:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a556:	6020      	str	r0, [r4, #0]
 801a558:	2000      	movs	r0, #0
 801a55a:	e7e8      	b.n	801a52e <__submore+0x1e>
 801a55c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a55e:	0077      	lsls	r7, r6, #1
 801a560:	463a      	mov	r2, r7
 801a562:	f000 fa2d 	bl	801a9c0 <_realloc_r>
 801a566:	4605      	mov	r5, r0
 801a568:	2800      	cmp	r0, #0
 801a56a:	d0de      	beq.n	801a52a <__submore+0x1a>
 801a56c:	eb00 0806 	add.w	r8, r0, r6
 801a570:	4601      	mov	r1, r0
 801a572:	4632      	mov	r2, r6
 801a574:	4640      	mov	r0, r8
 801a576:	f7fb fc83 	bl	8015e80 <memcpy>
 801a57a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a57e:	f8c4 8000 	str.w	r8, [r4]
 801a582:	e7e9      	b.n	801a558 <__submore+0x48>

0801a584 <__ascii_wctomb>:
 801a584:	b149      	cbz	r1, 801a59a <__ascii_wctomb+0x16>
 801a586:	2aff      	cmp	r2, #255	; 0xff
 801a588:	bf85      	ittet	hi
 801a58a:	238a      	movhi	r3, #138	; 0x8a
 801a58c:	6003      	strhi	r3, [r0, #0]
 801a58e:	700a      	strbls	r2, [r1, #0]
 801a590:	f04f 30ff 	movhi.w	r0, #4294967295
 801a594:	bf98      	it	ls
 801a596:	2001      	movls	r0, #1
 801a598:	4770      	bx	lr
 801a59a:	4608      	mov	r0, r1
 801a59c:	4770      	bx	lr
	...

0801a5a0 <__assert_func>:
 801a5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5a2:	4614      	mov	r4, r2
 801a5a4:	461a      	mov	r2, r3
 801a5a6:	4b09      	ldr	r3, [pc, #36]	; (801a5cc <__assert_func+0x2c>)
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	4605      	mov	r5, r0
 801a5ac:	68d8      	ldr	r0, [r3, #12]
 801a5ae:	b14c      	cbz	r4, 801a5c4 <__assert_func+0x24>
 801a5b0:	4b07      	ldr	r3, [pc, #28]	; (801a5d0 <__assert_func+0x30>)
 801a5b2:	9100      	str	r1, [sp, #0]
 801a5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a5b8:	4906      	ldr	r1, [pc, #24]	; (801a5d4 <__assert_func+0x34>)
 801a5ba:	462b      	mov	r3, r5
 801a5bc:	f000 f9a6 	bl	801a90c <fiprintf>
 801a5c0:	f000 fc46 	bl	801ae50 <abort>
 801a5c4:	4b04      	ldr	r3, [pc, #16]	; (801a5d8 <__assert_func+0x38>)
 801a5c6:	461c      	mov	r4, r3
 801a5c8:	e7f3      	b.n	801a5b2 <__assert_func+0x12>
 801a5ca:	bf00      	nop
 801a5cc:	20000040 	.word	0x20000040
 801a5d0:	0801be50 	.word	0x0801be50
 801a5d4:	0801be5d 	.word	0x0801be5d
 801a5d8:	0801be8b 	.word	0x0801be8b

0801a5dc <__sflush_r>:
 801a5dc:	898a      	ldrh	r2, [r1, #12]
 801a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5e2:	4605      	mov	r5, r0
 801a5e4:	0710      	lsls	r0, r2, #28
 801a5e6:	460c      	mov	r4, r1
 801a5e8:	d458      	bmi.n	801a69c <__sflush_r+0xc0>
 801a5ea:	684b      	ldr	r3, [r1, #4]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	dc05      	bgt.n	801a5fc <__sflush_r+0x20>
 801a5f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	dc02      	bgt.n	801a5fc <__sflush_r+0x20>
 801a5f6:	2000      	movs	r0, #0
 801a5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5fe:	2e00      	cmp	r6, #0
 801a600:	d0f9      	beq.n	801a5f6 <__sflush_r+0x1a>
 801a602:	2300      	movs	r3, #0
 801a604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a608:	682f      	ldr	r7, [r5, #0]
 801a60a:	602b      	str	r3, [r5, #0]
 801a60c:	d032      	beq.n	801a674 <__sflush_r+0x98>
 801a60e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a610:	89a3      	ldrh	r3, [r4, #12]
 801a612:	075a      	lsls	r2, r3, #29
 801a614:	d505      	bpl.n	801a622 <__sflush_r+0x46>
 801a616:	6863      	ldr	r3, [r4, #4]
 801a618:	1ac0      	subs	r0, r0, r3
 801a61a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a61c:	b10b      	cbz	r3, 801a622 <__sflush_r+0x46>
 801a61e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a620:	1ac0      	subs	r0, r0, r3
 801a622:	2300      	movs	r3, #0
 801a624:	4602      	mov	r2, r0
 801a626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a628:	6a21      	ldr	r1, [r4, #32]
 801a62a:	4628      	mov	r0, r5
 801a62c:	47b0      	blx	r6
 801a62e:	1c43      	adds	r3, r0, #1
 801a630:	89a3      	ldrh	r3, [r4, #12]
 801a632:	d106      	bne.n	801a642 <__sflush_r+0x66>
 801a634:	6829      	ldr	r1, [r5, #0]
 801a636:	291d      	cmp	r1, #29
 801a638:	d82c      	bhi.n	801a694 <__sflush_r+0xb8>
 801a63a:	4a2a      	ldr	r2, [pc, #168]	; (801a6e4 <__sflush_r+0x108>)
 801a63c:	40ca      	lsrs	r2, r1
 801a63e:	07d6      	lsls	r6, r2, #31
 801a640:	d528      	bpl.n	801a694 <__sflush_r+0xb8>
 801a642:	2200      	movs	r2, #0
 801a644:	6062      	str	r2, [r4, #4]
 801a646:	04d9      	lsls	r1, r3, #19
 801a648:	6922      	ldr	r2, [r4, #16]
 801a64a:	6022      	str	r2, [r4, #0]
 801a64c:	d504      	bpl.n	801a658 <__sflush_r+0x7c>
 801a64e:	1c42      	adds	r2, r0, #1
 801a650:	d101      	bne.n	801a656 <__sflush_r+0x7a>
 801a652:	682b      	ldr	r3, [r5, #0]
 801a654:	b903      	cbnz	r3, 801a658 <__sflush_r+0x7c>
 801a656:	6560      	str	r0, [r4, #84]	; 0x54
 801a658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a65a:	602f      	str	r7, [r5, #0]
 801a65c:	2900      	cmp	r1, #0
 801a65e:	d0ca      	beq.n	801a5f6 <__sflush_r+0x1a>
 801a660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a664:	4299      	cmp	r1, r3
 801a666:	d002      	beq.n	801a66e <__sflush_r+0x92>
 801a668:	4628      	mov	r0, r5
 801a66a:	f7ff f907 	bl	801987c <_free_r>
 801a66e:	2000      	movs	r0, #0
 801a670:	6360      	str	r0, [r4, #52]	; 0x34
 801a672:	e7c1      	b.n	801a5f8 <__sflush_r+0x1c>
 801a674:	6a21      	ldr	r1, [r4, #32]
 801a676:	2301      	movs	r3, #1
 801a678:	4628      	mov	r0, r5
 801a67a:	47b0      	blx	r6
 801a67c:	1c41      	adds	r1, r0, #1
 801a67e:	d1c7      	bne.n	801a610 <__sflush_r+0x34>
 801a680:	682b      	ldr	r3, [r5, #0]
 801a682:	2b00      	cmp	r3, #0
 801a684:	d0c4      	beq.n	801a610 <__sflush_r+0x34>
 801a686:	2b1d      	cmp	r3, #29
 801a688:	d001      	beq.n	801a68e <__sflush_r+0xb2>
 801a68a:	2b16      	cmp	r3, #22
 801a68c:	d101      	bne.n	801a692 <__sflush_r+0xb6>
 801a68e:	602f      	str	r7, [r5, #0]
 801a690:	e7b1      	b.n	801a5f6 <__sflush_r+0x1a>
 801a692:	89a3      	ldrh	r3, [r4, #12]
 801a694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a698:	81a3      	strh	r3, [r4, #12]
 801a69a:	e7ad      	b.n	801a5f8 <__sflush_r+0x1c>
 801a69c:	690f      	ldr	r7, [r1, #16]
 801a69e:	2f00      	cmp	r7, #0
 801a6a0:	d0a9      	beq.n	801a5f6 <__sflush_r+0x1a>
 801a6a2:	0793      	lsls	r3, r2, #30
 801a6a4:	680e      	ldr	r6, [r1, #0]
 801a6a6:	bf08      	it	eq
 801a6a8:	694b      	ldreq	r3, [r1, #20]
 801a6aa:	600f      	str	r7, [r1, #0]
 801a6ac:	bf18      	it	ne
 801a6ae:	2300      	movne	r3, #0
 801a6b0:	eba6 0807 	sub.w	r8, r6, r7
 801a6b4:	608b      	str	r3, [r1, #8]
 801a6b6:	f1b8 0f00 	cmp.w	r8, #0
 801a6ba:	dd9c      	ble.n	801a5f6 <__sflush_r+0x1a>
 801a6bc:	6a21      	ldr	r1, [r4, #32]
 801a6be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a6c0:	4643      	mov	r3, r8
 801a6c2:	463a      	mov	r2, r7
 801a6c4:	4628      	mov	r0, r5
 801a6c6:	47b0      	blx	r6
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	dc06      	bgt.n	801a6da <__sflush_r+0xfe>
 801a6cc:	89a3      	ldrh	r3, [r4, #12]
 801a6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6d2:	81a3      	strh	r3, [r4, #12]
 801a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a6d8:	e78e      	b.n	801a5f8 <__sflush_r+0x1c>
 801a6da:	4407      	add	r7, r0
 801a6dc:	eba8 0800 	sub.w	r8, r8, r0
 801a6e0:	e7e9      	b.n	801a6b6 <__sflush_r+0xda>
 801a6e2:	bf00      	nop
 801a6e4:	20400001 	.word	0x20400001

0801a6e8 <_fflush_r>:
 801a6e8:	b538      	push	{r3, r4, r5, lr}
 801a6ea:	690b      	ldr	r3, [r1, #16]
 801a6ec:	4605      	mov	r5, r0
 801a6ee:	460c      	mov	r4, r1
 801a6f0:	b913      	cbnz	r3, 801a6f8 <_fflush_r+0x10>
 801a6f2:	2500      	movs	r5, #0
 801a6f4:	4628      	mov	r0, r5
 801a6f6:	bd38      	pop	{r3, r4, r5, pc}
 801a6f8:	b118      	cbz	r0, 801a702 <_fflush_r+0x1a>
 801a6fa:	6983      	ldr	r3, [r0, #24]
 801a6fc:	b90b      	cbnz	r3, 801a702 <_fflush_r+0x1a>
 801a6fe:	f000 f887 	bl	801a810 <__sinit>
 801a702:	4b14      	ldr	r3, [pc, #80]	; (801a754 <_fflush_r+0x6c>)
 801a704:	429c      	cmp	r4, r3
 801a706:	d11b      	bne.n	801a740 <_fflush_r+0x58>
 801a708:	686c      	ldr	r4, [r5, #4]
 801a70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d0ef      	beq.n	801a6f2 <_fflush_r+0xa>
 801a712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a714:	07d0      	lsls	r0, r2, #31
 801a716:	d404      	bmi.n	801a722 <_fflush_r+0x3a>
 801a718:	0599      	lsls	r1, r3, #22
 801a71a:	d402      	bmi.n	801a722 <_fflush_r+0x3a>
 801a71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a71e:	f000 f927 	bl	801a970 <__retarget_lock_acquire_recursive>
 801a722:	4628      	mov	r0, r5
 801a724:	4621      	mov	r1, r4
 801a726:	f7ff ff59 	bl	801a5dc <__sflush_r>
 801a72a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a72c:	07da      	lsls	r2, r3, #31
 801a72e:	4605      	mov	r5, r0
 801a730:	d4e0      	bmi.n	801a6f4 <_fflush_r+0xc>
 801a732:	89a3      	ldrh	r3, [r4, #12]
 801a734:	059b      	lsls	r3, r3, #22
 801a736:	d4dd      	bmi.n	801a6f4 <_fflush_r+0xc>
 801a738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a73a:	f000 f91a 	bl	801a972 <__retarget_lock_release_recursive>
 801a73e:	e7d9      	b.n	801a6f4 <_fflush_r+0xc>
 801a740:	4b05      	ldr	r3, [pc, #20]	; (801a758 <_fflush_r+0x70>)
 801a742:	429c      	cmp	r4, r3
 801a744:	d101      	bne.n	801a74a <_fflush_r+0x62>
 801a746:	68ac      	ldr	r4, [r5, #8]
 801a748:	e7df      	b.n	801a70a <_fflush_r+0x22>
 801a74a:	4b04      	ldr	r3, [pc, #16]	; (801a75c <_fflush_r+0x74>)
 801a74c:	429c      	cmp	r4, r3
 801a74e:	bf08      	it	eq
 801a750:	68ec      	ldreq	r4, [r5, #12]
 801a752:	e7da      	b.n	801a70a <_fflush_r+0x22>
 801a754:	0801beac 	.word	0x0801beac
 801a758:	0801becc 	.word	0x0801becc
 801a75c:	0801be8c 	.word	0x0801be8c

0801a760 <std>:
 801a760:	2300      	movs	r3, #0
 801a762:	b510      	push	{r4, lr}
 801a764:	4604      	mov	r4, r0
 801a766:	e9c0 3300 	strd	r3, r3, [r0]
 801a76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a76e:	6083      	str	r3, [r0, #8]
 801a770:	8181      	strh	r1, [r0, #12]
 801a772:	6643      	str	r3, [r0, #100]	; 0x64
 801a774:	81c2      	strh	r2, [r0, #14]
 801a776:	6183      	str	r3, [r0, #24]
 801a778:	4619      	mov	r1, r3
 801a77a:	2208      	movs	r2, #8
 801a77c:	305c      	adds	r0, #92	; 0x5c
 801a77e:	f7fb fb8d 	bl	8015e9c <memset>
 801a782:	4b05      	ldr	r3, [pc, #20]	; (801a798 <std+0x38>)
 801a784:	6263      	str	r3, [r4, #36]	; 0x24
 801a786:	4b05      	ldr	r3, [pc, #20]	; (801a79c <std+0x3c>)
 801a788:	62a3      	str	r3, [r4, #40]	; 0x28
 801a78a:	4b05      	ldr	r3, [pc, #20]	; (801a7a0 <std+0x40>)
 801a78c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a78e:	4b05      	ldr	r3, [pc, #20]	; (801a7a4 <std+0x44>)
 801a790:	6224      	str	r4, [r4, #32]
 801a792:	6323      	str	r3, [r4, #48]	; 0x30
 801a794:	bd10      	pop	{r4, pc}
 801a796:	bf00      	nop
 801a798:	08016c45 	.word	0x08016c45
 801a79c:	08016c6b 	.word	0x08016c6b
 801a7a0:	08016ca3 	.word	0x08016ca3
 801a7a4:	08016cc7 	.word	0x08016cc7

0801a7a8 <_cleanup_r>:
 801a7a8:	4901      	ldr	r1, [pc, #4]	; (801a7b0 <_cleanup_r+0x8>)
 801a7aa:	f000 b8c1 	b.w	801a930 <_fwalk_reent>
 801a7ae:	bf00      	nop
 801a7b0:	0801a6e9 	.word	0x0801a6e9

0801a7b4 <__sfmoreglue>:
 801a7b4:	b570      	push	{r4, r5, r6, lr}
 801a7b6:	2268      	movs	r2, #104	; 0x68
 801a7b8:	1e4d      	subs	r5, r1, #1
 801a7ba:	4355      	muls	r5, r2
 801a7bc:	460e      	mov	r6, r1
 801a7be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a7c2:	f7ff f8c7 	bl	8019954 <_malloc_r>
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	b140      	cbz	r0, 801a7dc <__sfmoreglue+0x28>
 801a7ca:	2100      	movs	r1, #0
 801a7cc:	e9c0 1600 	strd	r1, r6, [r0]
 801a7d0:	300c      	adds	r0, #12
 801a7d2:	60a0      	str	r0, [r4, #8]
 801a7d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a7d8:	f7fb fb60 	bl	8015e9c <memset>
 801a7dc:	4620      	mov	r0, r4
 801a7de:	bd70      	pop	{r4, r5, r6, pc}

0801a7e0 <__sfp_lock_acquire>:
 801a7e0:	4801      	ldr	r0, [pc, #4]	; (801a7e8 <__sfp_lock_acquire+0x8>)
 801a7e2:	f000 b8c5 	b.w	801a970 <__retarget_lock_acquire_recursive>
 801a7e6:	bf00      	nop
 801a7e8:	20004135 	.word	0x20004135

0801a7ec <__sfp_lock_release>:
 801a7ec:	4801      	ldr	r0, [pc, #4]	; (801a7f4 <__sfp_lock_release+0x8>)
 801a7ee:	f000 b8c0 	b.w	801a972 <__retarget_lock_release_recursive>
 801a7f2:	bf00      	nop
 801a7f4:	20004135 	.word	0x20004135

0801a7f8 <__sinit_lock_acquire>:
 801a7f8:	4801      	ldr	r0, [pc, #4]	; (801a800 <__sinit_lock_acquire+0x8>)
 801a7fa:	f000 b8b9 	b.w	801a970 <__retarget_lock_acquire_recursive>
 801a7fe:	bf00      	nop
 801a800:	20004136 	.word	0x20004136

0801a804 <__sinit_lock_release>:
 801a804:	4801      	ldr	r0, [pc, #4]	; (801a80c <__sinit_lock_release+0x8>)
 801a806:	f000 b8b4 	b.w	801a972 <__retarget_lock_release_recursive>
 801a80a:	bf00      	nop
 801a80c:	20004136 	.word	0x20004136

0801a810 <__sinit>:
 801a810:	b510      	push	{r4, lr}
 801a812:	4604      	mov	r4, r0
 801a814:	f7ff fff0 	bl	801a7f8 <__sinit_lock_acquire>
 801a818:	69a3      	ldr	r3, [r4, #24]
 801a81a:	b11b      	cbz	r3, 801a824 <__sinit+0x14>
 801a81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a820:	f7ff bff0 	b.w	801a804 <__sinit_lock_release>
 801a824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a828:	6523      	str	r3, [r4, #80]	; 0x50
 801a82a:	4b13      	ldr	r3, [pc, #76]	; (801a878 <__sinit+0x68>)
 801a82c:	4a13      	ldr	r2, [pc, #76]	; (801a87c <__sinit+0x6c>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	62a2      	str	r2, [r4, #40]	; 0x28
 801a832:	42a3      	cmp	r3, r4
 801a834:	bf04      	itt	eq
 801a836:	2301      	moveq	r3, #1
 801a838:	61a3      	streq	r3, [r4, #24]
 801a83a:	4620      	mov	r0, r4
 801a83c:	f000 f820 	bl	801a880 <__sfp>
 801a840:	6060      	str	r0, [r4, #4]
 801a842:	4620      	mov	r0, r4
 801a844:	f000 f81c 	bl	801a880 <__sfp>
 801a848:	60a0      	str	r0, [r4, #8]
 801a84a:	4620      	mov	r0, r4
 801a84c:	f000 f818 	bl	801a880 <__sfp>
 801a850:	2200      	movs	r2, #0
 801a852:	60e0      	str	r0, [r4, #12]
 801a854:	2104      	movs	r1, #4
 801a856:	6860      	ldr	r0, [r4, #4]
 801a858:	f7ff ff82 	bl	801a760 <std>
 801a85c:	68a0      	ldr	r0, [r4, #8]
 801a85e:	2201      	movs	r2, #1
 801a860:	2109      	movs	r1, #9
 801a862:	f7ff ff7d 	bl	801a760 <std>
 801a866:	68e0      	ldr	r0, [r4, #12]
 801a868:	2202      	movs	r2, #2
 801a86a:	2112      	movs	r1, #18
 801a86c:	f7ff ff78 	bl	801a760 <std>
 801a870:	2301      	movs	r3, #1
 801a872:	61a3      	str	r3, [r4, #24]
 801a874:	e7d2      	b.n	801a81c <__sinit+0xc>
 801a876:	bf00      	nop
 801a878:	0801ba30 	.word	0x0801ba30
 801a87c:	0801a7a9 	.word	0x0801a7a9

0801a880 <__sfp>:
 801a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a882:	4607      	mov	r7, r0
 801a884:	f7ff ffac 	bl	801a7e0 <__sfp_lock_acquire>
 801a888:	4b1e      	ldr	r3, [pc, #120]	; (801a904 <__sfp+0x84>)
 801a88a:	681e      	ldr	r6, [r3, #0]
 801a88c:	69b3      	ldr	r3, [r6, #24]
 801a88e:	b913      	cbnz	r3, 801a896 <__sfp+0x16>
 801a890:	4630      	mov	r0, r6
 801a892:	f7ff ffbd 	bl	801a810 <__sinit>
 801a896:	3648      	adds	r6, #72	; 0x48
 801a898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a89c:	3b01      	subs	r3, #1
 801a89e:	d503      	bpl.n	801a8a8 <__sfp+0x28>
 801a8a0:	6833      	ldr	r3, [r6, #0]
 801a8a2:	b30b      	cbz	r3, 801a8e8 <__sfp+0x68>
 801a8a4:	6836      	ldr	r6, [r6, #0]
 801a8a6:	e7f7      	b.n	801a898 <__sfp+0x18>
 801a8a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a8ac:	b9d5      	cbnz	r5, 801a8e4 <__sfp+0x64>
 801a8ae:	4b16      	ldr	r3, [pc, #88]	; (801a908 <__sfp+0x88>)
 801a8b0:	60e3      	str	r3, [r4, #12]
 801a8b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a8b6:	6665      	str	r5, [r4, #100]	; 0x64
 801a8b8:	f000 f859 	bl	801a96e <__retarget_lock_init_recursive>
 801a8bc:	f7ff ff96 	bl	801a7ec <__sfp_lock_release>
 801a8c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a8c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a8c8:	6025      	str	r5, [r4, #0]
 801a8ca:	61a5      	str	r5, [r4, #24]
 801a8cc:	2208      	movs	r2, #8
 801a8ce:	4629      	mov	r1, r5
 801a8d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a8d4:	f7fb fae2 	bl	8015e9c <memset>
 801a8d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a8dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8e4:	3468      	adds	r4, #104	; 0x68
 801a8e6:	e7d9      	b.n	801a89c <__sfp+0x1c>
 801a8e8:	2104      	movs	r1, #4
 801a8ea:	4638      	mov	r0, r7
 801a8ec:	f7ff ff62 	bl	801a7b4 <__sfmoreglue>
 801a8f0:	4604      	mov	r4, r0
 801a8f2:	6030      	str	r0, [r6, #0]
 801a8f4:	2800      	cmp	r0, #0
 801a8f6:	d1d5      	bne.n	801a8a4 <__sfp+0x24>
 801a8f8:	f7ff ff78 	bl	801a7ec <__sfp_lock_release>
 801a8fc:	230c      	movs	r3, #12
 801a8fe:	603b      	str	r3, [r7, #0]
 801a900:	e7ee      	b.n	801a8e0 <__sfp+0x60>
 801a902:	bf00      	nop
 801a904:	0801ba30 	.word	0x0801ba30
 801a908:	ffff0001 	.word	0xffff0001

0801a90c <fiprintf>:
 801a90c:	b40e      	push	{r1, r2, r3}
 801a90e:	b503      	push	{r0, r1, lr}
 801a910:	4601      	mov	r1, r0
 801a912:	ab03      	add	r3, sp, #12
 801a914:	4805      	ldr	r0, [pc, #20]	; (801a92c <fiprintf+0x20>)
 801a916:	f853 2b04 	ldr.w	r2, [r3], #4
 801a91a:	6800      	ldr	r0, [r0, #0]
 801a91c:	9301      	str	r3, [sp, #4]
 801a91e:	f000 f8a7 	bl	801aa70 <_vfiprintf_r>
 801a922:	b002      	add	sp, #8
 801a924:	f85d eb04 	ldr.w	lr, [sp], #4
 801a928:	b003      	add	sp, #12
 801a92a:	4770      	bx	lr
 801a92c:	20000040 	.word	0x20000040

0801a930 <_fwalk_reent>:
 801a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a934:	4606      	mov	r6, r0
 801a936:	4688      	mov	r8, r1
 801a938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a93c:	2700      	movs	r7, #0
 801a93e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a942:	f1b9 0901 	subs.w	r9, r9, #1
 801a946:	d505      	bpl.n	801a954 <_fwalk_reent+0x24>
 801a948:	6824      	ldr	r4, [r4, #0]
 801a94a:	2c00      	cmp	r4, #0
 801a94c:	d1f7      	bne.n	801a93e <_fwalk_reent+0xe>
 801a94e:	4638      	mov	r0, r7
 801a950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a954:	89ab      	ldrh	r3, [r5, #12]
 801a956:	2b01      	cmp	r3, #1
 801a958:	d907      	bls.n	801a96a <_fwalk_reent+0x3a>
 801a95a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a95e:	3301      	adds	r3, #1
 801a960:	d003      	beq.n	801a96a <_fwalk_reent+0x3a>
 801a962:	4629      	mov	r1, r5
 801a964:	4630      	mov	r0, r6
 801a966:	47c0      	blx	r8
 801a968:	4307      	orrs	r7, r0
 801a96a:	3568      	adds	r5, #104	; 0x68
 801a96c:	e7e9      	b.n	801a942 <_fwalk_reent+0x12>

0801a96e <__retarget_lock_init_recursive>:
 801a96e:	4770      	bx	lr

0801a970 <__retarget_lock_acquire_recursive>:
 801a970:	4770      	bx	lr

0801a972 <__retarget_lock_release_recursive>:
 801a972:	4770      	bx	lr

0801a974 <memmove>:
 801a974:	4288      	cmp	r0, r1
 801a976:	b510      	push	{r4, lr}
 801a978:	eb01 0402 	add.w	r4, r1, r2
 801a97c:	d902      	bls.n	801a984 <memmove+0x10>
 801a97e:	4284      	cmp	r4, r0
 801a980:	4623      	mov	r3, r4
 801a982:	d807      	bhi.n	801a994 <memmove+0x20>
 801a984:	1e43      	subs	r3, r0, #1
 801a986:	42a1      	cmp	r1, r4
 801a988:	d008      	beq.n	801a99c <memmove+0x28>
 801a98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a98e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a992:	e7f8      	b.n	801a986 <memmove+0x12>
 801a994:	4402      	add	r2, r0
 801a996:	4601      	mov	r1, r0
 801a998:	428a      	cmp	r2, r1
 801a99a:	d100      	bne.n	801a99e <memmove+0x2a>
 801a99c:	bd10      	pop	{r4, pc}
 801a99e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a9a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a9a6:	e7f7      	b.n	801a998 <memmove+0x24>

0801a9a8 <__malloc_lock>:
 801a9a8:	4801      	ldr	r0, [pc, #4]	; (801a9b0 <__malloc_lock+0x8>)
 801a9aa:	f7ff bfe1 	b.w	801a970 <__retarget_lock_acquire_recursive>
 801a9ae:	bf00      	nop
 801a9b0:	20004134 	.word	0x20004134

0801a9b4 <__malloc_unlock>:
 801a9b4:	4801      	ldr	r0, [pc, #4]	; (801a9bc <__malloc_unlock+0x8>)
 801a9b6:	f7ff bfdc 	b.w	801a972 <__retarget_lock_release_recursive>
 801a9ba:	bf00      	nop
 801a9bc:	20004134 	.word	0x20004134

0801a9c0 <_realloc_r>:
 801a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9c4:	4680      	mov	r8, r0
 801a9c6:	4614      	mov	r4, r2
 801a9c8:	460e      	mov	r6, r1
 801a9ca:	b921      	cbnz	r1, 801a9d6 <_realloc_r+0x16>
 801a9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9d0:	4611      	mov	r1, r2
 801a9d2:	f7fe bfbf 	b.w	8019954 <_malloc_r>
 801a9d6:	b92a      	cbnz	r2, 801a9e4 <_realloc_r+0x24>
 801a9d8:	f7fe ff50 	bl	801987c <_free_r>
 801a9dc:	4625      	mov	r5, r4
 801a9de:	4628      	mov	r0, r5
 801a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9e4:	f000 faa0 	bl	801af28 <_malloc_usable_size_r>
 801a9e8:	4284      	cmp	r4, r0
 801a9ea:	4607      	mov	r7, r0
 801a9ec:	d802      	bhi.n	801a9f4 <_realloc_r+0x34>
 801a9ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a9f2:	d812      	bhi.n	801aa1a <_realloc_r+0x5a>
 801a9f4:	4621      	mov	r1, r4
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	f7fe ffac 	bl	8019954 <_malloc_r>
 801a9fc:	4605      	mov	r5, r0
 801a9fe:	2800      	cmp	r0, #0
 801aa00:	d0ed      	beq.n	801a9de <_realloc_r+0x1e>
 801aa02:	42bc      	cmp	r4, r7
 801aa04:	4622      	mov	r2, r4
 801aa06:	4631      	mov	r1, r6
 801aa08:	bf28      	it	cs
 801aa0a:	463a      	movcs	r2, r7
 801aa0c:	f7fb fa38 	bl	8015e80 <memcpy>
 801aa10:	4631      	mov	r1, r6
 801aa12:	4640      	mov	r0, r8
 801aa14:	f7fe ff32 	bl	801987c <_free_r>
 801aa18:	e7e1      	b.n	801a9de <_realloc_r+0x1e>
 801aa1a:	4635      	mov	r5, r6
 801aa1c:	e7df      	b.n	801a9de <_realloc_r+0x1e>

0801aa1e <__sfputc_r>:
 801aa1e:	6893      	ldr	r3, [r2, #8]
 801aa20:	3b01      	subs	r3, #1
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	b410      	push	{r4}
 801aa26:	6093      	str	r3, [r2, #8]
 801aa28:	da08      	bge.n	801aa3c <__sfputc_r+0x1e>
 801aa2a:	6994      	ldr	r4, [r2, #24]
 801aa2c:	42a3      	cmp	r3, r4
 801aa2e:	db01      	blt.n	801aa34 <__sfputc_r+0x16>
 801aa30:	290a      	cmp	r1, #10
 801aa32:	d103      	bne.n	801aa3c <__sfputc_r+0x1e>
 801aa34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa38:	f000 b94a 	b.w	801acd0 <__swbuf_r>
 801aa3c:	6813      	ldr	r3, [r2, #0]
 801aa3e:	1c58      	adds	r0, r3, #1
 801aa40:	6010      	str	r0, [r2, #0]
 801aa42:	7019      	strb	r1, [r3, #0]
 801aa44:	4608      	mov	r0, r1
 801aa46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa4a:	4770      	bx	lr

0801aa4c <__sfputs_r>:
 801aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa4e:	4606      	mov	r6, r0
 801aa50:	460f      	mov	r7, r1
 801aa52:	4614      	mov	r4, r2
 801aa54:	18d5      	adds	r5, r2, r3
 801aa56:	42ac      	cmp	r4, r5
 801aa58:	d101      	bne.n	801aa5e <__sfputs_r+0x12>
 801aa5a:	2000      	movs	r0, #0
 801aa5c:	e007      	b.n	801aa6e <__sfputs_r+0x22>
 801aa5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa62:	463a      	mov	r2, r7
 801aa64:	4630      	mov	r0, r6
 801aa66:	f7ff ffda 	bl	801aa1e <__sfputc_r>
 801aa6a:	1c43      	adds	r3, r0, #1
 801aa6c:	d1f3      	bne.n	801aa56 <__sfputs_r+0xa>
 801aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa70 <_vfiprintf_r>:
 801aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa74:	460d      	mov	r5, r1
 801aa76:	b09d      	sub	sp, #116	; 0x74
 801aa78:	4614      	mov	r4, r2
 801aa7a:	4698      	mov	r8, r3
 801aa7c:	4606      	mov	r6, r0
 801aa7e:	b118      	cbz	r0, 801aa88 <_vfiprintf_r+0x18>
 801aa80:	6983      	ldr	r3, [r0, #24]
 801aa82:	b90b      	cbnz	r3, 801aa88 <_vfiprintf_r+0x18>
 801aa84:	f7ff fec4 	bl	801a810 <__sinit>
 801aa88:	4b89      	ldr	r3, [pc, #548]	; (801acb0 <_vfiprintf_r+0x240>)
 801aa8a:	429d      	cmp	r5, r3
 801aa8c:	d11b      	bne.n	801aac6 <_vfiprintf_r+0x56>
 801aa8e:	6875      	ldr	r5, [r6, #4]
 801aa90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aa92:	07d9      	lsls	r1, r3, #31
 801aa94:	d405      	bmi.n	801aaa2 <_vfiprintf_r+0x32>
 801aa96:	89ab      	ldrh	r3, [r5, #12]
 801aa98:	059a      	lsls	r2, r3, #22
 801aa9a:	d402      	bmi.n	801aaa2 <_vfiprintf_r+0x32>
 801aa9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aa9e:	f7ff ff67 	bl	801a970 <__retarget_lock_acquire_recursive>
 801aaa2:	89ab      	ldrh	r3, [r5, #12]
 801aaa4:	071b      	lsls	r3, r3, #28
 801aaa6:	d501      	bpl.n	801aaac <_vfiprintf_r+0x3c>
 801aaa8:	692b      	ldr	r3, [r5, #16]
 801aaaa:	b9eb      	cbnz	r3, 801aae8 <_vfiprintf_r+0x78>
 801aaac:	4629      	mov	r1, r5
 801aaae:	4630      	mov	r0, r6
 801aab0:	f000 f960 	bl	801ad74 <__swsetup_r>
 801aab4:	b1c0      	cbz	r0, 801aae8 <_vfiprintf_r+0x78>
 801aab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aab8:	07dc      	lsls	r4, r3, #31
 801aaba:	d50e      	bpl.n	801aada <_vfiprintf_r+0x6a>
 801aabc:	f04f 30ff 	mov.w	r0, #4294967295
 801aac0:	b01d      	add	sp, #116	; 0x74
 801aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac6:	4b7b      	ldr	r3, [pc, #492]	; (801acb4 <_vfiprintf_r+0x244>)
 801aac8:	429d      	cmp	r5, r3
 801aaca:	d101      	bne.n	801aad0 <_vfiprintf_r+0x60>
 801aacc:	68b5      	ldr	r5, [r6, #8]
 801aace:	e7df      	b.n	801aa90 <_vfiprintf_r+0x20>
 801aad0:	4b79      	ldr	r3, [pc, #484]	; (801acb8 <_vfiprintf_r+0x248>)
 801aad2:	429d      	cmp	r5, r3
 801aad4:	bf08      	it	eq
 801aad6:	68f5      	ldreq	r5, [r6, #12]
 801aad8:	e7da      	b.n	801aa90 <_vfiprintf_r+0x20>
 801aada:	89ab      	ldrh	r3, [r5, #12]
 801aadc:	0598      	lsls	r0, r3, #22
 801aade:	d4ed      	bmi.n	801aabc <_vfiprintf_r+0x4c>
 801aae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aae2:	f7ff ff46 	bl	801a972 <__retarget_lock_release_recursive>
 801aae6:	e7e9      	b.n	801aabc <_vfiprintf_r+0x4c>
 801aae8:	2300      	movs	r3, #0
 801aaea:	9309      	str	r3, [sp, #36]	; 0x24
 801aaec:	2320      	movs	r3, #32
 801aaee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aaf2:	f8cd 800c 	str.w	r8, [sp, #12]
 801aaf6:	2330      	movs	r3, #48	; 0x30
 801aaf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801acbc <_vfiprintf_r+0x24c>
 801aafc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab00:	f04f 0901 	mov.w	r9, #1
 801ab04:	4623      	mov	r3, r4
 801ab06:	469a      	mov	sl, r3
 801ab08:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab0c:	b10a      	cbz	r2, 801ab12 <_vfiprintf_r+0xa2>
 801ab0e:	2a25      	cmp	r2, #37	; 0x25
 801ab10:	d1f9      	bne.n	801ab06 <_vfiprintf_r+0x96>
 801ab12:	ebba 0b04 	subs.w	fp, sl, r4
 801ab16:	d00b      	beq.n	801ab30 <_vfiprintf_r+0xc0>
 801ab18:	465b      	mov	r3, fp
 801ab1a:	4622      	mov	r2, r4
 801ab1c:	4629      	mov	r1, r5
 801ab1e:	4630      	mov	r0, r6
 801ab20:	f7ff ff94 	bl	801aa4c <__sfputs_r>
 801ab24:	3001      	adds	r0, #1
 801ab26:	f000 80aa 	beq.w	801ac7e <_vfiprintf_r+0x20e>
 801ab2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab2c:	445a      	add	r2, fp
 801ab2e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab30:	f89a 3000 	ldrb.w	r3, [sl]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	f000 80a2 	beq.w	801ac7e <_vfiprintf_r+0x20e>
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 801ab40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab44:	f10a 0a01 	add.w	sl, sl, #1
 801ab48:	9304      	str	r3, [sp, #16]
 801ab4a:	9307      	str	r3, [sp, #28]
 801ab4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ab50:	931a      	str	r3, [sp, #104]	; 0x68
 801ab52:	4654      	mov	r4, sl
 801ab54:	2205      	movs	r2, #5
 801ab56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab5a:	4858      	ldr	r0, [pc, #352]	; (801acbc <_vfiprintf_r+0x24c>)
 801ab5c:	f7e5 fb58 	bl	8000210 <memchr>
 801ab60:	9a04      	ldr	r2, [sp, #16]
 801ab62:	b9d8      	cbnz	r0, 801ab9c <_vfiprintf_r+0x12c>
 801ab64:	06d1      	lsls	r1, r2, #27
 801ab66:	bf44      	itt	mi
 801ab68:	2320      	movmi	r3, #32
 801ab6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ab6e:	0713      	lsls	r3, r2, #28
 801ab70:	bf44      	itt	mi
 801ab72:	232b      	movmi	r3, #43	; 0x2b
 801ab74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ab78:	f89a 3000 	ldrb.w	r3, [sl]
 801ab7c:	2b2a      	cmp	r3, #42	; 0x2a
 801ab7e:	d015      	beq.n	801abac <_vfiprintf_r+0x13c>
 801ab80:	9a07      	ldr	r2, [sp, #28]
 801ab82:	4654      	mov	r4, sl
 801ab84:	2000      	movs	r0, #0
 801ab86:	f04f 0c0a 	mov.w	ip, #10
 801ab8a:	4621      	mov	r1, r4
 801ab8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ab90:	3b30      	subs	r3, #48	; 0x30
 801ab92:	2b09      	cmp	r3, #9
 801ab94:	d94e      	bls.n	801ac34 <_vfiprintf_r+0x1c4>
 801ab96:	b1b0      	cbz	r0, 801abc6 <_vfiprintf_r+0x156>
 801ab98:	9207      	str	r2, [sp, #28]
 801ab9a:	e014      	b.n	801abc6 <_vfiprintf_r+0x156>
 801ab9c:	eba0 0308 	sub.w	r3, r0, r8
 801aba0:	fa09 f303 	lsl.w	r3, r9, r3
 801aba4:	4313      	orrs	r3, r2
 801aba6:	9304      	str	r3, [sp, #16]
 801aba8:	46a2      	mov	sl, r4
 801abaa:	e7d2      	b.n	801ab52 <_vfiprintf_r+0xe2>
 801abac:	9b03      	ldr	r3, [sp, #12]
 801abae:	1d19      	adds	r1, r3, #4
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	9103      	str	r1, [sp, #12]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	bfbb      	ittet	lt
 801abb8:	425b      	neglt	r3, r3
 801abba:	f042 0202 	orrlt.w	r2, r2, #2
 801abbe:	9307      	strge	r3, [sp, #28]
 801abc0:	9307      	strlt	r3, [sp, #28]
 801abc2:	bfb8      	it	lt
 801abc4:	9204      	strlt	r2, [sp, #16]
 801abc6:	7823      	ldrb	r3, [r4, #0]
 801abc8:	2b2e      	cmp	r3, #46	; 0x2e
 801abca:	d10c      	bne.n	801abe6 <_vfiprintf_r+0x176>
 801abcc:	7863      	ldrb	r3, [r4, #1]
 801abce:	2b2a      	cmp	r3, #42	; 0x2a
 801abd0:	d135      	bne.n	801ac3e <_vfiprintf_r+0x1ce>
 801abd2:	9b03      	ldr	r3, [sp, #12]
 801abd4:	1d1a      	adds	r2, r3, #4
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	9203      	str	r2, [sp, #12]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	bfb8      	it	lt
 801abde:	f04f 33ff 	movlt.w	r3, #4294967295
 801abe2:	3402      	adds	r4, #2
 801abe4:	9305      	str	r3, [sp, #20]
 801abe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801accc <_vfiprintf_r+0x25c>
 801abea:	7821      	ldrb	r1, [r4, #0]
 801abec:	2203      	movs	r2, #3
 801abee:	4650      	mov	r0, sl
 801abf0:	f7e5 fb0e 	bl	8000210 <memchr>
 801abf4:	b140      	cbz	r0, 801ac08 <_vfiprintf_r+0x198>
 801abf6:	2340      	movs	r3, #64	; 0x40
 801abf8:	eba0 000a 	sub.w	r0, r0, sl
 801abfc:	fa03 f000 	lsl.w	r0, r3, r0
 801ac00:	9b04      	ldr	r3, [sp, #16]
 801ac02:	4303      	orrs	r3, r0
 801ac04:	3401      	adds	r4, #1
 801ac06:	9304      	str	r3, [sp, #16]
 801ac08:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac0c:	482c      	ldr	r0, [pc, #176]	; (801acc0 <_vfiprintf_r+0x250>)
 801ac0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac12:	2206      	movs	r2, #6
 801ac14:	f7e5 fafc 	bl	8000210 <memchr>
 801ac18:	2800      	cmp	r0, #0
 801ac1a:	d03f      	beq.n	801ac9c <_vfiprintf_r+0x22c>
 801ac1c:	4b29      	ldr	r3, [pc, #164]	; (801acc4 <_vfiprintf_r+0x254>)
 801ac1e:	bb1b      	cbnz	r3, 801ac68 <_vfiprintf_r+0x1f8>
 801ac20:	9b03      	ldr	r3, [sp, #12]
 801ac22:	3307      	adds	r3, #7
 801ac24:	f023 0307 	bic.w	r3, r3, #7
 801ac28:	3308      	adds	r3, #8
 801ac2a:	9303      	str	r3, [sp, #12]
 801ac2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac2e:	443b      	add	r3, r7
 801ac30:	9309      	str	r3, [sp, #36]	; 0x24
 801ac32:	e767      	b.n	801ab04 <_vfiprintf_r+0x94>
 801ac34:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac38:	460c      	mov	r4, r1
 801ac3a:	2001      	movs	r0, #1
 801ac3c:	e7a5      	b.n	801ab8a <_vfiprintf_r+0x11a>
 801ac3e:	2300      	movs	r3, #0
 801ac40:	3401      	adds	r4, #1
 801ac42:	9305      	str	r3, [sp, #20]
 801ac44:	4619      	mov	r1, r3
 801ac46:	f04f 0c0a 	mov.w	ip, #10
 801ac4a:	4620      	mov	r0, r4
 801ac4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac50:	3a30      	subs	r2, #48	; 0x30
 801ac52:	2a09      	cmp	r2, #9
 801ac54:	d903      	bls.n	801ac5e <_vfiprintf_r+0x1ee>
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d0c5      	beq.n	801abe6 <_vfiprintf_r+0x176>
 801ac5a:	9105      	str	r1, [sp, #20]
 801ac5c:	e7c3      	b.n	801abe6 <_vfiprintf_r+0x176>
 801ac5e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ac62:	4604      	mov	r4, r0
 801ac64:	2301      	movs	r3, #1
 801ac66:	e7f0      	b.n	801ac4a <_vfiprintf_r+0x1da>
 801ac68:	ab03      	add	r3, sp, #12
 801ac6a:	9300      	str	r3, [sp, #0]
 801ac6c:	462a      	mov	r2, r5
 801ac6e:	4b16      	ldr	r3, [pc, #88]	; (801acc8 <_vfiprintf_r+0x258>)
 801ac70:	a904      	add	r1, sp, #16
 801ac72:	4630      	mov	r0, r6
 801ac74:	f7fb f9ba 	bl	8015fec <_printf_float>
 801ac78:	4607      	mov	r7, r0
 801ac7a:	1c78      	adds	r0, r7, #1
 801ac7c:	d1d6      	bne.n	801ac2c <_vfiprintf_r+0x1bc>
 801ac7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ac80:	07d9      	lsls	r1, r3, #31
 801ac82:	d405      	bmi.n	801ac90 <_vfiprintf_r+0x220>
 801ac84:	89ab      	ldrh	r3, [r5, #12]
 801ac86:	059a      	lsls	r2, r3, #22
 801ac88:	d402      	bmi.n	801ac90 <_vfiprintf_r+0x220>
 801ac8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ac8c:	f7ff fe71 	bl	801a972 <__retarget_lock_release_recursive>
 801ac90:	89ab      	ldrh	r3, [r5, #12]
 801ac92:	065b      	lsls	r3, r3, #25
 801ac94:	f53f af12 	bmi.w	801aabc <_vfiprintf_r+0x4c>
 801ac98:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ac9a:	e711      	b.n	801aac0 <_vfiprintf_r+0x50>
 801ac9c:	ab03      	add	r3, sp, #12
 801ac9e:	9300      	str	r3, [sp, #0]
 801aca0:	462a      	mov	r2, r5
 801aca2:	4b09      	ldr	r3, [pc, #36]	; (801acc8 <_vfiprintf_r+0x258>)
 801aca4:	a904      	add	r1, sp, #16
 801aca6:	4630      	mov	r0, r6
 801aca8:	f7fb fc44 	bl	8016534 <_printf_i>
 801acac:	e7e4      	b.n	801ac78 <_vfiprintf_r+0x208>
 801acae:	bf00      	nop
 801acb0:	0801beac 	.word	0x0801beac
 801acb4:	0801becc 	.word	0x0801becc
 801acb8:	0801be8c 	.word	0x0801be8c
 801acbc:	0801be24 	.word	0x0801be24
 801acc0:	0801be2e 	.word	0x0801be2e
 801acc4:	08015fed 	.word	0x08015fed
 801acc8:	0801aa4d 	.word	0x0801aa4d
 801accc:	0801be2a 	.word	0x0801be2a

0801acd0 <__swbuf_r>:
 801acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acd2:	460e      	mov	r6, r1
 801acd4:	4614      	mov	r4, r2
 801acd6:	4605      	mov	r5, r0
 801acd8:	b118      	cbz	r0, 801ace2 <__swbuf_r+0x12>
 801acda:	6983      	ldr	r3, [r0, #24]
 801acdc:	b90b      	cbnz	r3, 801ace2 <__swbuf_r+0x12>
 801acde:	f7ff fd97 	bl	801a810 <__sinit>
 801ace2:	4b21      	ldr	r3, [pc, #132]	; (801ad68 <__swbuf_r+0x98>)
 801ace4:	429c      	cmp	r4, r3
 801ace6:	d12b      	bne.n	801ad40 <__swbuf_r+0x70>
 801ace8:	686c      	ldr	r4, [r5, #4]
 801acea:	69a3      	ldr	r3, [r4, #24]
 801acec:	60a3      	str	r3, [r4, #8]
 801acee:	89a3      	ldrh	r3, [r4, #12]
 801acf0:	071a      	lsls	r2, r3, #28
 801acf2:	d52f      	bpl.n	801ad54 <__swbuf_r+0x84>
 801acf4:	6923      	ldr	r3, [r4, #16]
 801acf6:	b36b      	cbz	r3, 801ad54 <__swbuf_r+0x84>
 801acf8:	6923      	ldr	r3, [r4, #16]
 801acfa:	6820      	ldr	r0, [r4, #0]
 801acfc:	1ac0      	subs	r0, r0, r3
 801acfe:	6963      	ldr	r3, [r4, #20]
 801ad00:	b2f6      	uxtb	r6, r6
 801ad02:	4283      	cmp	r3, r0
 801ad04:	4637      	mov	r7, r6
 801ad06:	dc04      	bgt.n	801ad12 <__swbuf_r+0x42>
 801ad08:	4621      	mov	r1, r4
 801ad0a:	4628      	mov	r0, r5
 801ad0c:	f7ff fcec 	bl	801a6e8 <_fflush_r>
 801ad10:	bb30      	cbnz	r0, 801ad60 <__swbuf_r+0x90>
 801ad12:	68a3      	ldr	r3, [r4, #8]
 801ad14:	3b01      	subs	r3, #1
 801ad16:	60a3      	str	r3, [r4, #8]
 801ad18:	6823      	ldr	r3, [r4, #0]
 801ad1a:	1c5a      	adds	r2, r3, #1
 801ad1c:	6022      	str	r2, [r4, #0]
 801ad1e:	701e      	strb	r6, [r3, #0]
 801ad20:	6963      	ldr	r3, [r4, #20]
 801ad22:	3001      	adds	r0, #1
 801ad24:	4283      	cmp	r3, r0
 801ad26:	d004      	beq.n	801ad32 <__swbuf_r+0x62>
 801ad28:	89a3      	ldrh	r3, [r4, #12]
 801ad2a:	07db      	lsls	r3, r3, #31
 801ad2c:	d506      	bpl.n	801ad3c <__swbuf_r+0x6c>
 801ad2e:	2e0a      	cmp	r6, #10
 801ad30:	d104      	bne.n	801ad3c <__swbuf_r+0x6c>
 801ad32:	4621      	mov	r1, r4
 801ad34:	4628      	mov	r0, r5
 801ad36:	f7ff fcd7 	bl	801a6e8 <_fflush_r>
 801ad3a:	b988      	cbnz	r0, 801ad60 <__swbuf_r+0x90>
 801ad3c:	4638      	mov	r0, r7
 801ad3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad40:	4b0a      	ldr	r3, [pc, #40]	; (801ad6c <__swbuf_r+0x9c>)
 801ad42:	429c      	cmp	r4, r3
 801ad44:	d101      	bne.n	801ad4a <__swbuf_r+0x7a>
 801ad46:	68ac      	ldr	r4, [r5, #8]
 801ad48:	e7cf      	b.n	801acea <__swbuf_r+0x1a>
 801ad4a:	4b09      	ldr	r3, [pc, #36]	; (801ad70 <__swbuf_r+0xa0>)
 801ad4c:	429c      	cmp	r4, r3
 801ad4e:	bf08      	it	eq
 801ad50:	68ec      	ldreq	r4, [r5, #12]
 801ad52:	e7ca      	b.n	801acea <__swbuf_r+0x1a>
 801ad54:	4621      	mov	r1, r4
 801ad56:	4628      	mov	r0, r5
 801ad58:	f000 f80c 	bl	801ad74 <__swsetup_r>
 801ad5c:	2800      	cmp	r0, #0
 801ad5e:	d0cb      	beq.n	801acf8 <__swbuf_r+0x28>
 801ad60:	f04f 37ff 	mov.w	r7, #4294967295
 801ad64:	e7ea      	b.n	801ad3c <__swbuf_r+0x6c>
 801ad66:	bf00      	nop
 801ad68:	0801beac 	.word	0x0801beac
 801ad6c:	0801becc 	.word	0x0801becc
 801ad70:	0801be8c 	.word	0x0801be8c

0801ad74 <__swsetup_r>:
 801ad74:	4b32      	ldr	r3, [pc, #200]	; (801ae40 <__swsetup_r+0xcc>)
 801ad76:	b570      	push	{r4, r5, r6, lr}
 801ad78:	681d      	ldr	r5, [r3, #0]
 801ad7a:	4606      	mov	r6, r0
 801ad7c:	460c      	mov	r4, r1
 801ad7e:	b125      	cbz	r5, 801ad8a <__swsetup_r+0x16>
 801ad80:	69ab      	ldr	r3, [r5, #24]
 801ad82:	b913      	cbnz	r3, 801ad8a <__swsetup_r+0x16>
 801ad84:	4628      	mov	r0, r5
 801ad86:	f7ff fd43 	bl	801a810 <__sinit>
 801ad8a:	4b2e      	ldr	r3, [pc, #184]	; (801ae44 <__swsetup_r+0xd0>)
 801ad8c:	429c      	cmp	r4, r3
 801ad8e:	d10f      	bne.n	801adb0 <__swsetup_r+0x3c>
 801ad90:	686c      	ldr	r4, [r5, #4]
 801ad92:	89a3      	ldrh	r3, [r4, #12]
 801ad94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad98:	0719      	lsls	r1, r3, #28
 801ad9a:	d42c      	bmi.n	801adf6 <__swsetup_r+0x82>
 801ad9c:	06dd      	lsls	r5, r3, #27
 801ad9e:	d411      	bmi.n	801adc4 <__swsetup_r+0x50>
 801ada0:	2309      	movs	r3, #9
 801ada2:	6033      	str	r3, [r6, #0]
 801ada4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ada8:	81a3      	strh	r3, [r4, #12]
 801adaa:	f04f 30ff 	mov.w	r0, #4294967295
 801adae:	e03e      	b.n	801ae2e <__swsetup_r+0xba>
 801adb0:	4b25      	ldr	r3, [pc, #148]	; (801ae48 <__swsetup_r+0xd4>)
 801adb2:	429c      	cmp	r4, r3
 801adb4:	d101      	bne.n	801adba <__swsetup_r+0x46>
 801adb6:	68ac      	ldr	r4, [r5, #8]
 801adb8:	e7eb      	b.n	801ad92 <__swsetup_r+0x1e>
 801adba:	4b24      	ldr	r3, [pc, #144]	; (801ae4c <__swsetup_r+0xd8>)
 801adbc:	429c      	cmp	r4, r3
 801adbe:	bf08      	it	eq
 801adc0:	68ec      	ldreq	r4, [r5, #12]
 801adc2:	e7e6      	b.n	801ad92 <__swsetup_r+0x1e>
 801adc4:	0758      	lsls	r0, r3, #29
 801adc6:	d512      	bpl.n	801adee <__swsetup_r+0x7a>
 801adc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801adca:	b141      	cbz	r1, 801adde <__swsetup_r+0x6a>
 801adcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801add0:	4299      	cmp	r1, r3
 801add2:	d002      	beq.n	801adda <__swsetup_r+0x66>
 801add4:	4630      	mov	r0, r6
 801add6:	f7fe fd51 	bl	801987c <_free_r>
 801adda:	2300      	movs	r3, #0
 801addc:	6363      	str	r3, [r4, #52]	; 0x34
 801adde:	89a3      	ldrh	r3, [r4, #12]
 801ade0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ade4:	81a3      	strh	r3, [r4, #12]
 801ade6:	2300      	movs	r3, #0
 801ade8:	6063      	str	r3, [r4, #4]
 801adea:	6923      	ldr	r3, [r4, #16]
 801adec:	6023      	str	r3, [r4, #0]
 801adee:	89a3      	ldrh	r3, [r4, #12]
 801adf0:	f043 0308 	orr.w	r3, r3, #8
 801adf4:	81a3      	strh	r3, [r4, #12]
 801adf6:	6923      	ldr	r3, [r4, #16]
 801adf8:	b94b      	cbnz	r3, 801ae0e <__swsetup_r+0x9a>
 801adfa:	89a3      	ldrh	r3, [r4, #12]
 801adfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ae00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ae04:	d003      	beq.n	801ae0e <__swsetup_r+0x9a>
 801ae06:	4621      	mov	r1, r4
 801ae08:	4630      	mov	r0, r6
 801ae0a:	f000 f84d 	bl	801aea8 <__smakebuf_r>
 801ae0e:	89a0      	ldrh	r0, [r4, #12]
 801ae10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae14:	f010 0301 	ands.w	r3, r0, #1
 801ae18:	d00a      	beq.n	801ae30 <__swsetup_r+0xbc>
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	60a3      	str	r3, [r4, #8]
 801ae1e:	6963      	ldr	r3, [r4, #20]
 801ae20:	425b      	negs	r3, r3
 801ae22:	61a3      	str	r3, [r4, #24]
 801ae24:	6923      	ldr	r3, [r4, #16]
 801ae26:	b943      	cbnz	r3, 801ae3a <__swsetup_r+0xc6>
 801ae28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ae2c:	d1ba      	bne.n	801ada4 <__swsetup_r+0x30>
 801ae2e:	bd70      	pop	{r4, r5, r6, pc}
 801ae30:	0781      	lsls	r1, r0, #30
 801ae32:	bf58      	it	pl
 801ae34:	6963      	ldrpl	r3, [r4, #20]
 801ae36:	60a3      	str	r3, [r4, #8]
 801ae38:	e7f4      	b.n	801ae24 <__swsetup_r+0xb0>
 801ae3a:	2000      	movs	r0, #0
 801ae3c:	e7f7      	b.n	801ae2e <__swsetup_r+0xba>
 801ae3e:	bf00      	nop
 801ae40:	20000040 	.word	0x20000040
 801ae44:	0801beac 	.word	0x0801beac
 801ae48:	0801becc 	.word	0x0801becc
 801ae4c:	0801be8c 	.word	0x0801be8c

0801ae50 <abort>:
 801ae50:	b508      	push	{r3, lr}
 801ae52:	2006      	movs	r0, #6
 801ae54:	f000 f898 	bl	801af88 <raise>
 801ae58:	2001      	movs	r0, #1
 801ae5a:	f7e7 fa7a 	bl	8002352 <_exit>

0801ae5e <__swhatbuf_r>:
 801ae5e:	b570      	push	{r4, r5, r6, lr}
 801ae60:	460e      	mov	r6, r1
 801ae62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae66:	2900      	cmp	r1, #0
 801ae68:	b096      	sub	sp, #88	; 0x58
 801ae6a:	4614      	mov	r4, r2
 801ae6c:	461d      	mov	r5, r3
 801ae6e:	da08      	bge.n	801ae82 <__swhatbuf_r+0x24>
 801ae70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ae74:	2200      	movs	r2, #0
 801ae76:	602a      	str	r2, [r5, #0]
 801ae78:	061a      	lsls	r2, r3, #24
 801ae7a:	d410      	bmi.n	801ae9e <__swhatbuf_r+0x40>
 801ae7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ae80:	e00e      	b.n	801aea0 <__swhatbuf_r+0x42>
 801ae82:	466a      	mov	r2, sp
 801ae84:	f000 f89c 	bl	801afc0 <_fstat_r>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	dbf1      	blt.n	801ae70 <__swhatbuf_r+0x12>
 801ae8c:	9a01      	ldr	r2, [sp, #4]
 801ae8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ae92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ae96:	425a      	negs	r2, r3
 801ae98:	415a      	adcs	r2, r3
 801ae9a:	602a      	str	r2, [r5, #0]
 801ae9c:	e7ee      	b.n	801ae7c <__swhatbuf_r+0x1e>
 801ae9e:	2340      	movs	r3, #64	; 0x40
 801aea0:	2000      	movs	r0, #0
 801aea2:	6023      	str	r3, [r4, #0]
 801aea4:	b016      	add	sp, #88	; 0x58
 801aea6:	bd70      	pop	{r4, r5, r6, pc}

0801aea8 <__smakebuf_r>:
 801aea8:	898b      	ldrh	r3, [r1, #12]
 801aeaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aeac:	079d      	lsls	r5, r3, #30
 801aeae:	4606      	mov	r6, r0
 801aeb0:	460c      	mov	r4, r1
 801aeb2:	d507      	bpl.n	801aec4 <__smakebuf_r+0x1c>
 801aeb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aeb8:	6023      	str	r3, [r4, #0]
 801aeba:	6123      	str	r3, [r4, #16]
 801aebc:	2301      	movs	r3, #1
 801aebe:	6163      	str	r3, [r4, #20]
 801aec0:	b002      	add	sp, #8
 801aec2:	bd70      	pop	{r4, r5, r6, pc}
 801aec4:	ab01      	add	r3, sp, #4
 801aec6:	466a      	mov	r2, sp
 801aec8:	f7ff ffc9 	bl	801ae5e <__swhatbuf_r>
 801aecc:	9900      	ldr	r1, [sp, #0]
 801aece:	4605      	mov	r5, r0
 801aed0:	4630      	mov	r0, r6
 801aed2:	f7fe fd3f 	bl	8019954 <_malloc_r>
 801aed6:	b948      	cbnz	r0, 801aeec <__smakebuf_r+0x44>
 801aed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aedc:	059a      	lsls	r2, r3, #22
 801aede:	d4ef      	bmi.n	801aec0 <__smakebuf_r+0x18>
 801aee0:	f023 0303 	bic.w	r3, r3, #3
 801aee4:	f043 0302 	orr.w	r3, r3, #2
 801aee8:	81a3      	strh	r3, [r4, #12]
 801aeea:	e7e3      	b.n	801aeb4 <__smakebuf_r+0xc>
 801aeec:	4b0d      	ldr	r3, [pc, #52]	; (801af24 <__smakebuf_r+0x7c>)
 801aeee:	62b3      	str	r3, [r6, #40]	; 0x28
 801aef0:	89a3      	ldrh	r3, [r4, #12]
 801aef2:	6020      	str	r0, [r4, #0]
 801aef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aef8:	81a3      	strh	r3, [r4, #12]
 801aefa:	9b00      	ldr	r3, [sp, #0]
 801aefc:	6163      	str	r3, [r4, #20]
 801aefe:	9b01      	ldr	r3, [sp, #4]
 801af00:	6120      	str	r0, [r4, #16]
 801af02:	b15b      	cbz	r3, 801af1c <__smakebuf_r+0x74>
 801af04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af08:	4630      	mov	r0, r6
 801af0a:	f000 f86b 	bl	801afe4 <_isatty_r>
 801af0e:	b128      	cbz	r0, 801af1c <__smakebuf_r+0x74>
 801af10:	89a3      	ldrh	r3, [r4, #12]
 801af12:	f023 0303 	bic.w	r3, r3, #3
 801af16:	f043 0301 	orr.w	r3, r3, #1
 801af1a:	81a3      	strh	r3, [r4, #12]
 801af1c:	89a0      	ldrh	r0, [r4, #12]
 801af1e:	4305      	orrs	r5, r0
 801af20:	81a5      	strh	r5, [r4, #12]
 801af22:	e7cd      	b.n	801aec0 <__smakebuf_r+0x18>
 801af24:	0801a7a9 	.word	0x0801a7a9

0801af28 <_malloc_usable_size_r>:
 801af28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af2c:	1f18      	subs	r0, r3, #4
 801af2e:	2b00      	cmp	r3, #0
 801af30:	bfbc      	itt	lt
 801af32:	580b      	ldrlt	r3, [r1, r0]
 801af34:	18c0      	addlt	r0, r0, r3
 801af36:	4770      	bx	lr

0801af38 <_raise_r>:
 801af38:	291f      	cmp	r1, #31
 801af3a:	b538      	push	{r3, r4, r5, lr}
 801af3c:	4604      	mov	r4, r0
 801af3e:	460d      	mov	r5, r1
 801af40:	d904      	bls.n	801af4c <_raise_r+0x14>
 801af42:	2316      	movs	r3, #22
 801af44:	6003      	str	r3, [r0, #0]
 801af46:	f04f 30ff 	mov.w	r0, #4294967295
 801af4a:	bd38      	pop	{r3, r4, r5, pc}
 801af4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801af4e:	b112      	cbz	r2, 801af56 <_raise_r+0x1e>
 801af50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801af54:	b94b      	cbnz	r3, 801af6a <_raise_r+0x32>
 801af56:	4620      	mov	r0, r4
 801af58:	f000 f830 	bl	801afbc <_getpid_r>
 801af5c:	462a      	mov	r2, r5
 801af5e:	4601      	mov	r1, r0
 801af60:	4620      	mov	r0, r4
 801af62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af66:	f000 b817 	b.w	801af98 <_kill_r>
 801af6a:	2b01      	cmp	r3, #1
 801af6c:	d00a      	beq.n	801af84 <_raise_r+0x4c>
 801af6e:	1c59      	adds	r1, r3, #1
 801af70:	d103      	bne.n	801af7a <_raise_r+0x42>
 801af72:	2316      	movs	r3, #22
 801af74:	6003      	str	r3, [r0, #0]
 801af76:	2001      	movs	r0, #1
 801af78:	e7e7      	b.n	801af4a <_raise_r+0x12>
 801af7a:	2400      	movs	r4, #0
 801af7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801af80:	4628      	mov	r0, r5
 801af82:	4798      	blx	r3
 801af84:	2000      	movs	r0, #0
 801af86:	e7e0      	b.n	801af4a <_raise_r+0x12>

0801af88 <raise>:
 801af88:	4b02      	ldr	r3, [pc, #8]	; (801af94 <raise+0xc>)
 801af8a:	4601      	mov	r1, r0
 801af8c:	6818      	ldr	r0, [r3, #0]
 801af8e:	f7ff bfd3 	b.w	801af38 <_raise_r>
 801af92:	bf00      	nop
 801af94:	20000040 	.word	0x20000040

0801af98 <_kill_r>:
 801af98:	b538      	push	{r3, r4, r5, lr}
 801af9a:	4d07      	ldr	r5, [pc, #28]	; (801afb8 <_kill_r+0x20>)
 801af9c:	2300      	movs	r3, #0
 801af9e:	4604      	mov	r4, r0
 801afa0:	4608      	mov	r0, r1
 801afa2:	4611      	mov	r1, r2
 801afa4:	602b      	str	r3, [r5, #0]
 801afa6:	f7e7 f9c4 	bl	8002332 <_kill>
 801afaa:	1c43      	adds	r3, r0, #1
 801afac:	d102      	bne.n	801afb4 <_kill_r+0x1c>
 801afae:	682b      	ldr	r3, [r5, #0]
 801afb0:	b103      	cbz	r3, 801afb4 <_kill_r+0x1c>
 801afb2:	6023      	str	r3, [r4, #0]
 801afb4:	bd38      	pop	{r3, r4, r5, pc}
 801afb6:	bf00      	nop
 801afb8:	20004130 	.word	0x20004130

0801afbc <_getpid_r>:
 801afbc:	f7e7 b9b1 	b.w	8002322 <_getpid>

0801afc0 <_fstat_r>:
 801afc0:	b538      	push	{r3, r4, r5, lr}
 801afc2:	4d07      	ldr	r5, [pc, #28]	; (801afe0 <_fstat_r+0x20>)
 801afc4:	2300      	movs	r3, #0
 801afc6:	4604      	mov	r4, r0
 801afc8:	4608      	mov	r0, r1
 801afca:	4611      	mov	r1, r2
 801afcc:	602b      	str	r3, [r5, #0]
 801afce:	f7e7 fa0f 	bl	80023f0 <_fstat>
 801afd2:	1c43      	adds	r3, r0, #1
 801afd4:	d102      	bne.n	801afdc <_fstat_r+0x1c>
 801afd6:	682b      	ldr	r3, [r5, #0]
 801afd8:	b103      	cbz	r3, 801afdc <_fstat_r+0x1c>
 801afda:	6023      	str	r3, [r4, #0]
 801afdc:	bd38      	pop	{r3, r4, r5, pc}
 801afde:	bf00      	nop
 801afe0:	20004130 	.word	0x20004130

0801afe4 <_isatty_r>:
 801afe4:	b538      	push	{r3, r4, r5, lr}
 801afe6:	4d06      	ldr	r5, [pc, #24]	; (801b000 <_isatty_r+0x1c>)
 801afe8:	2300      	movs	r3, #0
 801afea:	4604      	mov	r4, r0
 801afec:	4608      	mov	r0, r1
 801afee:	602b      	str	r3, [r5, #0]
 801aff0:	f7e7 fa0e 	bl	8002410 <_isatty>
 801aff4:	1c43      	adds	r3, r0, #1
 801aff6:	d102      	bne.n	801affe <_isatty_r+0x1a>
 801aff8:	682b      	ldr	r3, [r5, #0]
 801affa:	b103      	cbz	r3, 801affe <_isatty_r+0x1a>
 801affc:	6023      	str	r3, [r4, #0]
 801affe:	bd38      	pop	{r3, r4, r5, pc}
 801b000:	20004130 	.word	0x20004130

0801b004 <_init>:
 801b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b006:	bf00      	nop
 801b008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b00a:	bc08      	pop	{r3}
 801b00c:	469e      	mov	lr, r3
 801b00e:	4770      	bx	lr

0801b010 <_fini>:
 801b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b012:	bf00      	nop
 801b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b016:	bc08      	pop	{r3}
 801b018:	469e      	mov	lr, r3
 801b01a:	4770      	bx	lr
