
SineWave_QAT_TFMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aadc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b74  0800ac80  0800ac80  0001ac80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7f4  0800d7f4  00020f74  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7fc  0800d7fc  00020f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7fc  0800d7fc  0001d7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d800  0800d800  0001d800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f74  20000000  0800d804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  20000f80  0800e778  00020f80  2**4
                  ALLOC
 10 ._user_heap_stack 00001804  20001a54  0800e778  00021a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020f74  2**0
                  CONTENTS, READONLY
 12 .debug_info   00370f48  00000000  00000000  00020fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001865f  00000000  00000000  00391eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0005d7cd  00000000  00000000  003aa54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  00407d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000e750  00000000  00000000  00409990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df6c  00000000  00000000  004180e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005fcdd  00000000  00000000  0044604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183627  00000000  00000000  004a5d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00629350  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077cc  00000000  00000000  006293a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00630b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00630c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000f80 	.word	0x20000f80
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac64 	.word	0x0800ac64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000f84 	.word	0x20000f84
 80001dc:	0800ac64 	.word	0x0800ac64

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff2b 	bl	8000b0c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca1 	bl	8000628 <__aeabi_dmul>
 8000ce6:	f000 f97f 	bl	8000fe8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc22 	bl	8000534 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc98 	bl	8000628 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fada 	bl	80002b8 <__aeabi_dsub>
 8000d04:	f000 f970 	bl	8000fe8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_d2uiz>:
 8000fe8:	004a      	lsls	r2, r1, #1
 8000fea:	d211      	bcs.n	8001010 <__aeabi_d2uiz+0x28>
 8000fec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ff0:	d211      	bcs.n	8001016 <__aeabi_d2uiz+0x2e>
 8000ff2:	d50d      	bpl.n	8001010 <__aeabi_d2uiz+0x28>
 8000ff4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ff8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ffc:	d40e      	bmi.n	800101c <__aeabi_d2uiz+0x34>
 8000ffe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001006:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800100a:	fa23 f002 	lsr.w	r0, r3, r2
 800100e:	4770      	bx	lr
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800101a:	d102      	bne.n	8001022 <__aeabi_d2uiz+0x3a>
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	4770      	bx	lr
 8001022:	f04f 0000 	mov.w	r0, #0
 8001026:	4770      	bx	lr

08001028 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  // WARNING: This API is deprecated, GetDelegateCreators is preferred.
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return {};
 8001028:	2200      	movs	r2, #0
 800102a:	e9c0 2200 	strd	r2, r2, [r0]
 800102e:	6082      	str	r2, [r0, #8]
  }
 8001030:	4770      	bx	lr

08001032 <_ZNK6tflite10OpResolver19GetDelegateCreatorsEv>:
  // addition to the standard TfLiteRegistration lookup for graph resolution.
  //
  // Note that this method is not used (will not be called) if you are using
  // TF Lite in Google Play Services; the GetOpaqueDelegateCreators method
  // (see below) is used for that case.
  virtual TfLiteDelegateCreators GetDelegateCreators() const { return {}; }
 8001032:	2200      	movs	r2, #0
 8001034:	e9c0 2200 	strd	r2, r2, [r0]
 8001038:	6082      	str	r2, [r0, #8]
 800103a:	4770      	bx	lr

0800103c <_ZNK6tflite10OpResolver25GetOpaqueDelegateCreatorsEv>:
  // Google Play Services; if you are using regular TF Lite, GetDelegateCreators
  // (see above) is used instead.
  //
  // WARNING: Experimental interface, subject to change.
  virtual TfLiteOpaqueDelegateCreators GetOpaqueDelegateCreators() const {
    return {};
 800103c:	2200      	movs	r2, #0
 800103e:	e9c0 2200 	strd	r2, r2, [r0]
 8001042:	6082      	str	r2, [r0, #8]
  }
 8001044:	4770      	bx	lr

08001046 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 8001046:	2001      	movs	r0, #1
 8001048:	4770      	bx	lr

0800104a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
 800104a:	6803      	ldr	r3, [r0, #0]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4718      	bx	r3

08001050 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
 8001050:	6803      	ldr	r3, [r0, #0]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	4718      	bx	r3

08001056 <__tcf_0>:
  // Start timer/counter
  HAL_TIM_Base_Start(&htim4);


  // Set up logging (modify tensorflow/lite/micro/debug_log.cc)
  static tflite::MicroErrorReporter micro_error_reporter;
 8001056:	4770      	bx	lr

08001058 <_ZN6tflite22MicroMutableOpResolverILj3EED0Ev>:

namespace tflite {
TfLiteRegistration* Register_DETECTION_POSTPROCESS();

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 8001058:	4770      	bx	lr
	...

0800105c <__tcf_2>:
	  error_reporter->Report("Could not add DEQUANTIZE op");
	  while(1);
  }

  // Run an interpreter to run the model with
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800105c:	4801      	ldr	r0, [pc, #4]	; (8001064 <__tcf_2+0x8>)
 800105e:	f003 bbd3 	b.w	8004808 <_ZN6tflite16MicroInterpreterD1Ev>
 8001062:	bf00      	nop
 8001064:	2000185c 	.word	0x2000185c

08001068 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc>:
      }
    }
    return nullptr;
  }

  const TfLiteRegistration* FindOp(const char* op) const override {
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800106c:	6f07      	ldr	r7, [r0, #112]	; 0x70
  const TfLiteRegistration* FindOp(const char* op) const override {
 800106e:	4604      	mov	r4, r0
 8001070:	4688      	mov	r8, r1
 8001072:	4605      	mov	r5, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001074:	2600      	movs	r6, #0
 8001076:	42b7      	cmp	r7, r6
 8001078:	d010      	beq.n	800109c <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x34>
      const TfLiteRegistration& registration = registrations_[i];
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800107a:	69ab      	ldr	r3, [r5, #24]
 800107c:	2b20      	cmp	r3, #32
 800107e:	d10a      	bne.n	8001096 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x2e>
          (strcmp(registration.custom_name, op) == 0)) {
 8001080:	69e8      	ldr	r0, [r5, #28]
 8001082:	4641      	mov	r1, r8
 8001084:	f7ff f8ac 	bl	80001e0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001088:	b928      	cbnz	r0, 8001096 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x2e>
      const TfLiteRegistration& registration = registrations_[i];
 800108a:	2024      	movs	r0, #36	; 0x24
 800108c:	fb00 4006 	mla	r0, r0, r6, r4
 8001090:	3004      	adds	r0, #4
        return &registration;
      }
    }
    return nullptr;
  }
 8001092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001096:	3601      	adds	r6, #1
 8001098:	3524      	adds	r5, #36	; 0x24
 800109a:	e7ec      	b.n	8001076 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xe>
    return nullptr;
 800109c:	2000      	movs	r0, #0
 800109e:	e7f8      	b.n	8001092 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x2a>

080010a0 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80010a0:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 80010a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80010a4:	d010      	beq.n	80010c8 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010a6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80010a8:	2300      	movs	r3, #0
 80010aa:	2524      	movs	r5, #36	; 0x24
      if (registration.builtin_code == op) {
 80010ac:	f100 0618 	add.w	r6, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010b0:	429c      	cmp	r4, r3
 80010b2:	d009      	beq.n	80010c8 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x28>
 80010b4:	fb05 f203 	mul.w	r2, r5, r3
      if (registration.builtin_code == op) {
 80010b8:	58b7      	ldr	r7, [r6, r2]
 80010ba:	42b9      	cmp	r1, r7
 80010bc:	d102      	bne.n	80010c4 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
 80010be:	3204      	adds	r2, #4
 80010c0:	4410      	add	r0, r2
  }
 80010c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010c4:	3301      	adds	r3, #1
 80010c6:	e7f3      	b.n	80010b0 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x10>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80010c8:	2000      	movs	r0, #0
 80010ca:	e7fa      	b.n	80010c2 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x22>

080010cc <__tcf_1>:
 80010cc:	4770      	bx	lr
	...

080010d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d4:	2214      	movs	r2, #20
 80010d6:	2100      	movs	r1, #0
 80010d8:	a809      	add	r0, sp, #36	; 0x24
 80010da:	f006 fe77 	bl	8007dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010de:	2214      	movs	r2, #20
 80010e0:	2100      	movs	r1, #0
 80010e2:	a803      	add	r0, sp, #12
 80010e4:	f006 fe72 	bl	8007dcc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <_Z18SystemClock_Configv+0x94>)
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80010f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010f4:	6411      	str	r1, [r2, #64]	; 0x40
 80010f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <_Z18SystemClock_Configv+0x98>)
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800110a:	6011      	str	r1, [r2, #0]
 800110c:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001114:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001116:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111a:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 100;
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2101      	movs	r1, #1
 8001128:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112a:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001132:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001134:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f000 fd57 	bl	8001be8 <HAL_RCC_OscConfig>
 800113a:	b108      	cbz	r0, 8001140 <_Z18SystemClock_Configv+0x70>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113e:	e7fe      	b.n	800113e <_Z18SystemClock_Configv+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001150:	2103      	movs	r1, #3
 8001152:	a803      	add	r0, sp, #12
 8001154:	f000 ff60 	bl	8002018 <HAL_RCC_ClockConfig>
 8001158:	b108      	cbz	r0, 800115e <_Z18SystemClock_Configv+0x8e>
 800115a:	b672      	cpsid	i
  while (1)
 800115c:	e7fe      	b.n	800115c <_Z18SystemClock_Configv+0x8c>
}
 800115e:	b014      	add	sp, #80	; 0x50
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <DebugLog>:
extern "C" void DebugLog(const char* s){
 800116c:	b507      	push	{r0, r1, r2, lr}
 800116e:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) s, strlen(s), 100);
 8001170:	f7ff f840 	bl	80001f4 <strlen>
 8001174:	9901      	ldr	r1, [sp, #4]
 8001176:	b282      	uxth	r2, r0
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <DebugLog+0x1c>)
 800117a:	2364      	movs	r3, #100	; 0x64
}
 800117c:	b003      	add	sp, #12
 800117e:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t *) s, strlen(s), 100);
 8001182:	f001 ba37 	b.w	80025f4 <HAL_UART_Transmit>
 8001186:	bf00      	nop
 8001188:	20001960 	.word	0x20001960

0800118c <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE>:

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 800118c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001190:	2a03      	cmp	r2, #3
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001192:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001194:	d80c      	bhi.n	80011b0 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x24>
 8001196:	f100 0474 	add.w	r4, r0, #116	; 0x74
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800119a:	2300      	movs	r3, #0
 800119c:	429a      	cmp	r2, r3
 800119e:	d00d      	beq.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x30>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80011a4:	428d      	cmp	r5, r1
 80011a6:	d107      	bne.n	80011b8 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
 80011a8:	3320      	adds	r3, #32
 80011aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    }
    return nullptr;
  }
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
#if !defined(TF_LITE_MCU_DEBUG_LOG)
#include <cstdlib>
#define TFLITE_ABORT abort()
#else
inline void AbortImpl() {
  DebugLog("HALTED\n");
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x34>)
 80011b2:	f7ff ffdb 	bl	800116c <DebugLog>
  while (1) {
 80011b6:	e7fe      	b.n	80011b6 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011b8:	3301      	adds	r3, #1
 80011ba:	e7ef      	b.n	800119c <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    return nullptr;
 80011bc:	2000      	movs	r0, #0
 80011be:	e7f6      	b.n	80011ae <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x22>
 80011c0:	0800ac80 	.word	0x0800ac80

080011c4 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80011c4:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80011c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011ca:	4607      	mov	r7, r0
 80011cc:	4688      	mov	r8, r1
 80011ce:	4614      	mov	r4, r2
 80011d0:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
 80011d2:	d108      	bne.n	80011e6 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x22>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
 80011d4:	481f      	ldr	r0, [pc, #124]	; (8001254 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x90>)
 80011d6:	f003 f848 	bl	800426a <_Z11MicroPrintfPKcz>
      MicroPrintf("AddBuiltin function.");
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>)
 80011dc:	f003 f845 	bl	800426a <_Z11MicroPrintfPKcz>
    }

    if (FindOp(op) != nullptr) {
      MicroPrintf("Calling AddBuiltin with the same op more than ");
      MicroPrintf("once is not supported (Op: #%d).", op);
      return kTfLiteError;
 80011e0:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
 80011e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (FindOp(op) != nullptr) {
 80011e6:	6803      	ldr	r3, [r0, #0]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4798      	blx	r3
 80011ec:	4606      	mov	r6, r0
 80011ee:	b138      	cbz	r0, 8001200 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x3c>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
 80011f0:	481a      	ldr	r0, [pc, #104]	; (800125c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>)
 80011f2:	f003 f83a 	bl	800426a <_Z11MicroPrintfPKcz>
      MicroPrintf("once is not supported (Op: #%d).", op);
 80011f6:	481a      	ldr	r0, [pc, #104]	; (8001260 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x9c>)
 80011f8:	4641      	mov	r1, r8
 80011fa:	f003 f836 	bl	800426a <_Z11MicroPrintfPKcz>
 80011fe:	e7ef      	b.n	80011e0 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1c>
    if (registrations_len_ >= tOpCount) {
 8001200:	f8d7 c070 	ldr.w	ip, [r7, #112]	; 0x70
 8001204:	f1bc 0f02 	cmp.w	ip, #2
 8001208:	d906      	bls.n	8001218 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x54>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
 800120a:	4816      	ldr	r0, [pc, #88]	; (8001264 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa0>)
 800120c:	4641      	mov	r1, r8
 800120e:	f003 f82c 	bl	800426a <_Z11MicroPrintfPKcz>
      MicroPrintf("is too small (%d).", tOpCount);
 8001212:	4815      	ldr	r0, [pc, #84]	; (8001268 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa4>)
 8001214:	2103      	movs	r1, #3
 8001216:	e7f0      	b.n	80011fa <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x36>
    registrations_[registrations_len_] = registration;
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	f04f 0e24 	mov.w	lr, #36	; 0x24
 800121e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8001222:	f10e 0504 	add.w	r5, lr, #4
 8001226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	602b      	str	r3, [r5, #0]
    registrations_len_++;
 8001230:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
 8001234:	f8ce 8018 	str.w	r8, [lr, #24]
    registrations_len_++;
 8001238:	673b      	str	r3, [r7, #112]	; 0x70
    builtin_codes_[num_buitin_ops_] = op;
 800123a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800123e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    num_buitin_ops_++;
 8001242:	3301      	adds	r3, #1
    builtin_codes_[num_buitin_ops_] = op;
 8001244:	f8c2 8074 	str.w	r8, [r2, #116]	; 0x74
    builtin_parsers_[num_buitin_ops_] = parser;
 8001248:	f8c2 9080 	str.w	r9, [r2, #128]	; 0x80
    return kTfLiteOk;
 800124c:	4630      	mov	r0, r6
    num_buitin_ops_++;
 800124e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return kTfLiteOk;
 8001252:	e7c6      	b.n	80011e2 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1e>
 8001254:	0800ac88 	.word	0x0800ac88
 8001258:	0800acb9 	.word	0x0800acb9
 800125c:	0800acce 	.word	0x0800acce
 8001260:	0800acfd 	.word	0x0800acfd
 8001264:	0800ad1e 	.word	0x0800ad1e
 8001268:	0800ad4f 	.word	0x0800ad4f

0800126c <main>:
{
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001270:	ed2d 8b02 	vpush	{d8}
 8001274:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8001276:	f000 fafb 	bl	8001870 <HAL_Init>
  SystemClock_Config();
 800127a:	f7ff ff29 	bl	80010d0 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	2214      	movs	r2, #20
 8001280:	2100      	movs	r1, #0
 8001282:	a80d      	add	r0, sp, #52	; 0x34
 8001284:	f006 fda2 	bl	8007dcc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	2400      	movs	r4, #0
 800128a:	4b95      	ldr	r3, [pc, #596]	; (80014e0 <main+0x274>)
 800128c:	9407      	str	r4, [sp, #28]
 800128e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001290:	4894      	ldr	r0, [pc, #592]	; (80014e4 <main+0x278>)
  huart2.Init.BaudRate = 115200;
 8001292:	4d95      	ldr	r5, [pc, #596]	; (80014e8 <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	f042 0204 	orr.w	r2, r2, #4
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
 800129a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129c:	f002 0204 	and.w	r2, r2, #4
 80012a0:	9207      	str	r2, [sp, #28]
 80012a2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a4:	9408      	str	r4, [sp, #32]
 80012a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ac:	631a      	str	r2, [r3, #48]	; 0x30
 80012ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012b4:	9208      	str	r2, [sp, #32]
 80012b6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	9409      	str	r4, [sp, #36]	; 0x24
 80012ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
 80012c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c4:	f002 0201 	and.w	r2, r2, #1
 80012c8:	9209      	str	r2, [sp, #36]	; 0x24
 80012ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	940a      	str	r4, [sp, #40]	; 0x28
 80012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d0:	f042 0202 	orr.w	r2, r2, #2
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012dc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e4:	f000 fc72 	bl	8001bcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f4:	487d      	ldr	r0, [pc, #500]	; (80014ec <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	a90d      	add	r1, sp, #52	; 0x34
 80012fa:	f000 fb75 	bl	80019e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	2020      	movs	r0, #32
 8001302:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001306:	a90d      	add	r1, sp, #52	; 0x34
 8001308:	4876      	ldr	r0, [pc, #472]	; (80014e4 <main+0x278>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800130e:	f000 fb6b 	bl	80019e8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001312:	4877      	ldr	r0, [pc, #476]	; (80014f0 <main+0x284>)
  huart2.Init.BaudRate = 115200;
 8001314:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001318:	e9c0 5300 	strd	r5, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	f001 f8c9 	bl	80024c0 <HAL_UART_Init>
 800132e:	b108      	cbz	r0, 8001334 <main+0xc8>
 8001330:	b672      	cpsid	i
  while (1)
 8001332:	e7fe      	b.n	8001332 <main+0xc6>
  hcrc.Instance = CRC;
 8001334:	486f      	ldr	r0, [pc, #444]	; (80014f4 <main+0x288>)
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <main+0x28c>)
 8001338:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800133a:	f000 fb41 	bl	80019c0 <HAL_CRC_Init>
 800133e:	4605      	mov	r5, r0
 8001340:	b108      	cbz	r0, 8001346 <main+0xda>
 8001342:	b672      	cpsid	i
  while (1)
 8001344:	e7fe      	b.n	8001344 <main+0xd8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	2210      	movs	r2, #16
 8001348:	4601      	mov	r1, r0
 800134a:	a80d      	add	r0, sp, #52	; 0x34
 800134c:	f006 fd3e 	bl	8007dcc <memset>
  htim4.Instance = TIM4;
 8001350:	4c6a      	ldr	r4, [pc, #424]	; (80014fc <main+0x290>)
  htim4.Init.Prescaler = 100-1;
 8001352:	4a6b      	ldr	r2, [pc, #428]	; (8001500 <main+0x294>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 100-1;
 8001356:	2363      	movs	r3, #99	; 0x63
 8001358:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800135c:	4620      	mov	r0, r4
  htim4.Init.Period = 65535;
 800135e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001362:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800136c:	f000 ff12 	bl	8002194 <HAL_TIM_Base_Init>
 8001370:	b108      	cbz	r0, 8001376 <main+0x10a>
 8001372:	b672      	cpsid	i
  while (1)
 8001374:	e7fe      	b.n	8001374 <main+0x108>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800137a:	a90d      	add	r1, sp, #52	; 0x34
 800137c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001380:	f000 ffb6 	bl	80022f0 <HAL_TIM_ConfigClockSource>
 8001384:	b108      	cbz	r0, 800138a <main+0x11e>
 8001386:	b672      	cpsid	i
  while (1)
 8001388:	e7fe      	b.n	8001388 <main+0x11c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138e:	a90b      	add	r1, sp, #44	; 0x2c
 8001390:	4620      	mov	r0, r4
 8001392:	f001 f85d 	bl	8002450 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	b108      	cbz	r0, 800139c <main+0x130>
 8001398:	b672      	cpsid	i
  while (1)
 800139a:	e7fe      	b.n	800139a <main+0x12e>
  static tflite::MicroErrorReporter micro_error_reporter;
 800139c:	4d59      	ldr	r5, [pc, #356]	; (8001504 <main+0x298>)
  HAL_TIM_Base_Start(&htim4);
 800139e:	4620      	mov	r0, r4
 80013a0:	f000 ff76 	bl	8002290 <HAL_TIM_Base_Start>
  static tflite::MicroErrorReporter micro_error_reporter;
 80013a4:	782b      	ldrb	r3, [r5, #0]
 80013a6:	f3bf 8f5b 	dmb	ish
 80013aa:	07db      	lsls	r3, r3, #31
 80013ac:	d409      	bmi.n	80013c2 <main+0x156>
 80013ae:	4628      	mov	r0, r5
 80013b0:	f006 fbd2 	bl	8007b58 <__cxa_guard_acquire>
 80013b4:	b128      	cbz	r0, 80013c2 <main+0x156>
 80013b6:	4854      	ldr	r0, [pc, #336]	; (8001508 <main+0x29c>)
 80013b8:	f006 fc9e 	bl	8007cf8 <atexit>
 80013bc:	4628      	mov	r0, r5
 80013be:	f006 fbd7 	bl	8007b70 <__cxa_guard_release>
  error_reporter = &micro_error_reporter;
 80013c2:	4d52      	ldr	r5, [pc, #328]	; (800150c <main+0x2a0>)
 80013c4:	4852      	ldr	r0, [pc, #328]	; (8001510 <main+0x2a4>)
  error_reporter->Report("STM32 TensorFlow Lite test");
 80013c6:	4953      	ldr	r1, [pc, #332]	; (8001514 <main+0x2a8>)
  error_reporter = &micro_error_reporter;
 80013c8:	6028      	str	r0, [r5, #0]
  error_reporter->Report("STM32 TensorFlow Lite test");
 80013ca:	f001 f9d1 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80013ce:	4b52      	ldr	r3, [pc, #328]	; (8001518 <main+0x2ac>)
  model = tflite::GetModel(quantized_sine_model);
 80013d0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800155c <main+0x2f0>
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	185a      	adds	r2, r3, r1
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
 80013d8:	585b      	ldr	r3, [r3, r1]
 80013da:	f8c8 2000 	str.w	r2, [r8]
 80013de:	1ad3      	subs	r3, r2, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80013e0:	8819      	ldrh	r1, [r3, #0]
 80013e2:	2904      	cmp	r1, #4
 80013e4:	d904      	bls.n	80013f0 <main+0x184>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80013e6:	889b      	ldrh	r3, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80013e8:	b113      	cbz	r3, 80013f0 <main+0x184>
  if (model->version() != TFLITE_SCHEMA_VERSION){
 80013ea:	58d3      	ldr	r3, [r2, r3]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d004      	beq.n	80013fa <main+0x18e>
	  error_reporter->Report("Model version does not match Schema");
 80013f0:	494a      	ldr	r1, [pc, #296]	; (800151c <main+0x2b0>)
 80013f2:	6828      	ldr	r0, [r5, #0]
 80013f4:	f001 f9bc 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 80013f8:	e7fe      	b.n	80013f8 <main+0x18c>
  static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 80013fa:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001560 <main+0x2f4>
 80013fe:	4f48      	ldr	r7, [pc, #288]	; (8001520 <main+0x2b4>)
 8001400:	f899 6000 	ldrb.w	r6, [r9]
 8001404:	f3bf 8f5b 	dmb	ish
 8001408:	f016 0601 	ands.w	r6, r6, #1
 800140c:	d10e      	bne.n	800142c <main+0x1c0>
 800140e:	4648      	mov	r0, r9
 8001410:	f006 fba2 	bl	8007b58 <__cxa_guard_acquire>
 8001414:	b150      	cbz	r0, 800142c <main+0x1c0>
      : error_reporter_(error_reporter) {}
 8001416:	4b43      	ldr	r3, [pc, #268]	; (8001524 <main+0x2b8>)
 8001418:	4843      	ldr	r0, [pc, #268]	; (8001528 <main+0x2bc>)
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	e9c7 6623 	strd	r6, r6, [r7, #140]	; 0x8c
 8001420:	673e      	str	r6, [r7, #112]	; 0x70
 8001422:	f006 fc69 	bl	8007cf8 <atexit>
 8001426:	4648      	mov	r0, r9
 8001428:	f006 fba2 	bl	8007b70 <__cxa_guard_release>
    return AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(),
 800142c:	a80d      	add	r0, sp, #52	; 0x34
 800142e:	f004 f96b 	bl	8005708 <_ZN6tflite17Register_QUANTIZEEv>
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <main+0x2c0>)
 8001434:	483a      	ldr	r0, [pc, #232]	; (8001520 <main+0x2b4>)
 8001436:	aa0d      	add	r2, sp, #52	; 0x34
 8001438:	2172      	movs	r1, #114	; 0x72
 800143a:	f7ff fec3 	bl	80011c4 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (tflite_status != kTfLiteOk){
 800143e:	b120      	cbz	r0, 800144a <main+0x1de>
	  error_reporter->Report("Could not add QUANTIZE op");
 8001440:	493b      	ldr	r1, [pc, #236]	; (8001530 <main+0x2c4>)
 8001442:	6828      	ldr	r0, [r5, #0]
 8001444:	f001 f994 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 8001448:	e7fe      	b.n	8001448 <main+0x1dc>
  tflite_status = micro_op_resolver.AddFullyConnected();
 800144a:	a80d      	add	r0, sp, #52	; 0x34
 800144c:	f004 fde8 	bl	8006020 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <main+0x2c8>)
 8001452:	4833      	ldr	r0, [pc, #204]	; (8001520 <main+0x2b4>)
 8001454:	aa0d      	add	r2, sp, #52	; 0x34
 8001456:	2109      	movs	r1, #9
 8001458:	f7ff feb4 	bl	80011c4 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (tflite_status != kTfLiteOk){
 800145c:	b120      	cbz	r0, 8001468 <main+0x1fc>
	  error_reporter->Report("Could not add FULLY CONNECTED op");
 800145e:	4936      	ldr	r1, [pc, #216]	; (8001538 <main+0x2cc>)
 8001460:	6828      	ldr	r0, [r5, #0]
 8001462:	f001 f985 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 8001466:	e7fe      	b.n	8001466 <main+0x1fa>
    return AddBuiltin(BuiltinOperator_DEQUANTIZE, tflite::Register_DEQUANTIZE(),
 8001468:	a80d      	add	r0, sp, #52	; 0x34
 800146a:	f003 ffbf 	bl	80053ec <_ZN6tflite19Register_DEQUANTIZEEv>
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <main+0x2d0>)
 8001470:	482b      	ldr	r0, [pc, #172]	; (8001520 <main+0x2b4>)
 8001472:	aa0d      	add	r2, sp, #52	; 0x34
 8001474:	2106      	movs	r1, #6
 8001476:	f7ff fea5 	bl	80011c4 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (tflite_status != kTfLiteOk){
 800147a:	b120      	cbz	r0, 8001486 <main+0x21a>
	  error_reporter->Report("Could not add DEQUANTIZE op");
 800147c:	4930      	ldr	r1, [pc, #192]	; (8001540 <main+0x2d4>)
 800147e:	6828      	ldr	r0, [r5, #0]
 8001480:	f001 f976 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 8001484:	e7fe      	b.n	8001484 <main+0x218>
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001486:	4f2f      	ldr	r7, [pc, #188]	; (8001544 <main+0x2d8>)
 8001488:	783e      	ldrb	r6, [r7, #0]
 800148a:	f3bf 8f5b 	dmb	ish
 800148e:	f016 0601 	ands.w	r6, r6, #1
 8001492:	d117      	bne.n	80014c4 <main+0x258>
 8001494:	4638      	mov	r0, r7
 8001496:	f006 fb5f 	bl	8007b58 <__cxa_guard_acquire>
 800149a:	b198      	cbz	r0, 80014c4 <main+0x258>
 800149c:	e9cd 6602 	strd	r6, r6, [sp, #8]
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <main+0x2b4>)
 80014ac:	4b26      	ldr	r3, [pc, #152]	; (8001548 <main+0x2dc>)
 80014ae:	f8d8 1000 	ldr.w	r1, [r8]
 80014b2:	4826      	ldr	r0, [pc, #152]	; (800154c <main+0x2e0>)
 80014b4:	f003 f91a 	bl	80046ec <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE>
 80014b8:	4825      	ldr	r0, [pc, #148]	; (8001550 <main+0x2e4>)
 80014ba:	f006 fc1d 	bl	8007cf8 <atexit>
 80014be:	4638      	mov	r0, r7
 80014c0:	f006 fb56 	bl	8007b70 <__cxa_guard_release>
  interpreter = &static_interpreter;
 80014c4:	4f23      	ldr	r7, [pc, #140]	; (8001554 <main+0x2e8>)
 80014c6:	4821      	ldr	r0, [pc, #132]	; (800154c <main+0x2e0>)
 80014c8:	6038      	str	r0, [r7, #0]
  tflite_status = interpreter->AllocateTensors();
 80014ca:	f003 fac9 	bl	8004a60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (tflite_status != kTfLiteOk){
 80014ce:	4601      	mov	r1, r0
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d047      	beq.n	8001564 <main+0x2f8>
	  error_reporter->Report("AllocateTensors() failed");
 80014d4:	4920      	ldr	r1, [pc, #128]	; (8001558 <main+0x2ec>)
 80014d6:	6828      	ldr	r0, [r5, #0]
 80014d8:	f001 f94a 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 80014dc:	e7fe      	b.n	80014dc <main+0x270>
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40004400 	.word	0x40004400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	20001960 	.word	0x20001960
 80014f4:	20001910 	.word	0x20001910
 80014f8:	40023000 	.word	0x40023000
 80014fc:	20001918 	.word	0x20001918
 8001500:	40000800 	.word	0x40000800
 8001504:	20000fa4 	.word	0x20000fa4
 8001508:	08001057 	.word	0x08001057
 800150c:	200017c0 	.word	0x200017c0
 8001510:	20000000 	.word	0x20000000
 8001514:	0800ad62 	.word	0x0800ad62
 8001518:	20000004 	.word	0x20000004
 800151c:	0800ad7d 	.word	0x0800ad7d
 8001520:	200017c8 	.word	0x200017c8
 8001524:	0800ae68 	.word	0x0800ae68
 8001528:	080010cd 	.word	0x080010cd
 800152c:	0800287d 	.word	0x0800287d
 8001530:	0800ada1 	.word	0x0800ada1
 8001534:	080028c5 	.word	0x080028c5
 8001538:	0800adbb 	.word	0x0800adbb
 800153c:	08002879 	.word	0x08002879
 8001540:	0800addc 	.word	0x0800addc
 8001544:	20000fa0 	.word	0x20000fa0
 8001548:	20000fc0 	.word	0x20000fc0
 800154c:	2000185c 	.word	0x2000185c
 8001550:	0800105d 	.word	0x0800105d
 8001554:	20000fa8 	.word	0x20000fa8
 8001558:	0800adf8 	.word	0x0800adf8
 800155c:	200017c4 	.word	0x200017c4
 8001560:	20000f9c 	.word	0x20000f9c
  model_input = interpreter->input(0);
 8001564:	9005      	str	r0, [sp, #20]
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001630 <main+0x3c4>
  model_output = interpreter->output(0);
 800156c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001634 <main+0x3c8>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001570:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001638 <main+0x3cc>
		  model_input->data.f[i] = 3.14159f / 2.0f;
 8001574:	ed9f 8a29 	vldr	s16, [pc, #164]	; 800161c <main+0x3b0>
  model_input = interpreter->input(0);
 8001578:	f003 f90a 	bl	8004790 <_ZN6tflite16MicroInterpreter5inputEj>
  model_output = interpreter->output(0);
 800157c:	9905      	ldr	r1, [sp, #20]
  model_input = interpreter->input(0);
 800157e:	f8c8 0000 	str.w	r0, [r8]
  model_output = interpreter->output(0);
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f003 f928 	bl	80047d8 <_ZN6tflite16MicroInterpreter6outputEj>
  num_elements = model_input->bytes / sizeof(float);
 8001588:	f8d8 3000 	ldr.w	r3, [r8]
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 800158c:	4924      	ldr	r1, [pc, #144]	; (8001620 <main+0x3b4>)
  num_elements = model_input->bytes / sizeof(float);
 800158e:	699e      	ldr	r6, [r3, #24]
  model_output = interpreter->output(0);
 8001590:	f8c9 0000 	str.w	r0, [r9]
  num_elements = model_input->bytes / sizeof(float);
 8001594:	08b6      	lsrs	r6, r6, #2
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 8001596:	4632      	mov	r2, r6
 8001598:	a80d      	add	r0, sp, #52	; 0x34
 800159a:	f007 f9e3 	bl	8008964 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buf, buf_len, 100);
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	b282      	uxth	r2, r0
 80015a2:	a90d      	add	r1, sp, #52	; 0x34
 80015a4:	481f      	ldr	r0, [pc, #124]	; (8001624 <main+0x3b8>)
 80015a6:	f001 f825 	bl	80025f4 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015aa:	2120      	movs	r1, #32
 80015ac:	4650      	mov	r0, sl
 80015ae:	f000 fb11 	bl	8001bd4 <HAL_GPIO_TogglePin>
		  model_input->data.f[i] = 3.14159f / 2.0f;
 80015b2:	f8d8 1000 	ldr.w	r1, [r8]
	  for (uint32_t i=0; i<num_elements; i++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	42b3      	cmp	r3, r6
 80015ba:	d006      	beq.n	80015ca <main+0x35e>
		  model_input->data.f[i] = 3.14159f / 2.0f;
 80015bc:	690a      	ldr	r2, [r1, #16]
 80015be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80015c2:	ed82 8a00 	vstr	s16, [r2]
	  for (uint32_t i=0; i<num_elements; i++){
 80015c6:	3301      	adds	r3, #1
 80015c8:	e7f6      	b.n	80015b8 <main+0x34c>
	  timestamp = htim4.Instance->CNT;
 80015ca:	6823      	ldr	r3, [r4, #0]
	  tflite_status = interpreter->Invoke();
 80015cc:	6838      	ldr	r0, [r7, #0]
	  timestamp = htim4.Instance->CNT;
 80015ce:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
	  tflite_status = interpreter->Invoke();
 80015d2:	f003 fb2d 	bl	8004c30 <_ZN6tflite16MicroInterpreter6InvokeEv>
	  if (tflite_status != kTfLiteOk){
 80015d6:	b118      	cbz	r0, 80015e0 <main+0x374>
		  error_reporter->Report("Invoke failed");
 80015d8:	4913      	ldr	r1, [pc, #76]	; (8001628 <main+0x3bc>)
 80015da:	6828      	ldr	r0, [r5, #0]
 80015dc:	f001 f8c8 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  y_val = model_output->data.f[0];
 80015e0:	f8d9 2000 	ldr.w	r2, [r9]
	  buf_len = sprintf(buf, "Output: %f | Duration: %lu us\r\n", y_val, (htim4.Instance->CNT - timestamp));
 80015e4:	6823      	ldr	r3, [r4, #0]
	  y_val = model_output->data.f[0];
 80015e6:	6912      	ldr	r2, [r2, #16]
	  buf_len = sprintf(buf, "Output: %f | Duration: %lu us\r\n", y_val, (htim4.Instance->CNT - timestamp));
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	6810      	ldr	r0, [r2, #0]
 80015ec:	9305      	str	r3, [sp, #20]
 80015ee:	f7fe ffc3 	bl	8000578 <__aeabi_f2d>
 80015f2:	9b05      	ldr	r3, [sp, #20]
 80015f4:	eba3 030b 	sub.w	r3, r3, fp
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	a80d      	add	r0, sp, #52	; 0x34
 8001600:	490a      	ldr	r1, [pc, #40]	; (800162c <main+0x3c0>)
 8001602:	f007 f9af 	bl	8008964 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, buf_len, 100);
 8001606:	2364      	movs	r3, #100	; 0x64
 8001608:	b282      	uxth	r2, r0
 800160a:	a90d      	add	r1, sp, #52	; 0x34
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <main+0x3b8>)
 800160e:	f000 fff1 	bl	80025f4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001616:	f000 f957 	bl	80018c8 <HAL_Delay>
  }
 800161a:	e7c6      	b.n	80015aa <main+0x33e>
 800161c:	3fc90fd0 	.word	0x3fc90fd0
 8001620:	0800ae11 	.word	0x0800ae11
 8001624:	20001960 	.word	0x20001960
 8001628:	0800ae31 	.word	0x0800ae31
 800162c:	0800ae3f 	.word	0x0800ae3f
 8001630:	20000fac 	.word	0x20000fac
 8001634:	20000fb0 	.word	0x20000fb0
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_MspInit+0x38>)
 8001640:	2100      	movs	r1, #0
 8001642:	9100      	str	r1, [sp, #0]
 8001644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800164a:	645a      	str	r2, [r3, #68]	; 0x44
 800164c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800164e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	9101      	str	r1, [sp, #4]
 8001658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166a:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166e:	f000 b93d 	b.w	80018ec <HAL_NVIC_SetPriorityGrouping>
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_CRC_MspInit+0x30>)
 800167a:	6802      	ldr	r2, [r0, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d000      	beq.n	8001682 <HAL_CRC_MspInit+0xa>
 8001680:	4770      	bx	lr
{
 8001682:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001684:	2200      	movs	r2, #0
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800168c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001690:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 8001694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016a2:	b002      	add	sp, #8
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023000 	.word	0x40023000

080016ac <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_TIM_Base_MspInit+0x2c>)
 80016ae:	6802      	ldr	r2, [r0, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d000      	beq.n	80016b6 <HAL_TIM_Base_MspInit+0xa>
 80016b4:	4770      	bx	lr
{
 80016b6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80016bc:	2200      	movs	r2, #0
 80016be:	9201      	str	r2, [sp, #4]
 80016c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c2:	f042 0204 	orr.w	r2, r2, #4
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016d2:	b002      	add	sp, #8
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40000800 	.word	0x40000800
 80016dc:	00000000 	.word	0x00000000

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_UART_MspInit+0x70>)
 80016e4:	6801      	ldr	r1, [r0, #0]
{
 80016e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80016ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80016f4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f8:	b008      	add	sp, #32
 80016fa:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fc:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001704:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001708:	6410      	str	r0, [r2, #64]	; 0x40
 800170a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800170c:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8001710:	9000      	str	r0, [sp, #0]
 8001712:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001722:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001748 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001732:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001736:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f000 f954 	bl	80019e8 <HAL_GPIO_Init>
}
 8001740:	b008      	add	sp, #32
 8001742:	bd10      	pop	{r4, pc}
 8001744:	f3af 8000 	nop.w
 8001748:	0000000c 	.word	0x0000000c
 800174c:	00000002 	.word	0x00000002
 8001750:	40004400 	.word	0x40004400
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler>
 800175a:	bf00      	nop

0800175c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <HardFault_Handler>
 800175e:	bf00      	nop

08001760 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler>
 8001762:	bf00      	nop

08001764 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <BusFault_Handler>
 8001766:	bf00      	nop

08001768 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler>
 800176a:	bf00      	nop

0800176c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <DebugMon_Handler>:
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <PendSV_Handler>:
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 b894 	b.w	80018a4 <HAL_IncTick>

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177e:	4c0c      	ldr	r4, [pc, #48]	; (80017b0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <_sbrk+0x38>)
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001784:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001786:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001788:	b12a      	cbz	r2, 8001796 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4410      	add	r0, r2
 800178c:	4288      	cmp	r0, r1
 800178e:	d807      	bhi.n	80017a0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001790:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001792:	4610      	mov	r0, r2
 8001794:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <_sbrk+0x40>)
 8001798:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4410      	add	r0, r2
 800179c:	4288      	cmp	r0, r1
 800179e:	d9f7      	bls.n	8001790 <_sbrk+0x14>
    errno = ENOMEM;
 80017a0:	f006 fab0 	bl	8007d04 <__errno>
 80017a4:	230c      	movs	r3, #12
    return (void *)-1;
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80017aa:	6003      	str	r3, [r0, #0]
}
 80017ac:	4610      	mov	r0, r2
 80017ae:	bd10      	pop	{r4, pc}
 80017b0:	200019a4 	.word	0x200019a4
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00001000 	.word	0x00001000
 80017bc:	20001a58 	.word	0x20001a58

080017c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <SystemInit+0x10>)
 80017c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fe:	f7ff ffdf 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f006 fa97 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff fd31 	bl	800126c <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800180c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	20000f74 	.word	0x20000f74
  ldr r2, =_sidata
 8001818:	0800d804 	.word	0x0800d804
  ldr r2, =_sbss
 800181c:	20000f80 	.word	0x20000f80
  ldr r4, =_ebss
 8001820:	20001a54 	.word	0x20001a54

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>
	...

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_InitTick+0x3c>)
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_InitTick+0x40>)
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
{
 8001832:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001838:	fbb0 f0f2 	udiv	r0, r0, r2
 800183c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001840:	f000 f8a4 	bl	800198c <HAL_SYSTICK_Config>
 8001844:	b908      	cbnz	r0, 800184a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	2d0f      	cmp	r5, #15
 8001848:	d901      	bls.n	800184e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800184c:	bd38      	pop	{r3, r4, r5, pc}
 800184e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	4602      	mov	r2, r0
 8001852:	4629      	mov	r1, r5
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f85a 	bl	8001910 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_InitTick+0x44>)
 800185e:	4620      	mov	r0, r4
 8001860:	601d      	str	r5, [r3, #0]
}
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	20000d98 	.word	0x20000d98
 8001868:	20000d94 	.word	0x20000d94
 800186c:	20000d9c 	.word	0x20000d9c

08001870 <HAL_Init>:
{
 8001870:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_Init+0x30>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001882:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800188a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f82d 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff ffc8 	bl	8001828 <HAL_InitTick>
  HAL_MspInit();
 8001898:	f7ff fed0 	bl	800163c <HAL_MspInit>
}
 800189c:	2000      	movs	r0, #0
 800189e:	bd08      	pop	{r3, pc}
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x10>)
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_IncTick+0x14>)
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	440b      	add	r3, r1
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200019a8 	.word	0x200019a8
 80018b8:	20000d98 	.word	0x20000d98

080018bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <HAL_GetTick+0x8>)
 80018be:	6818      	ldr	r0, [r3, #0]
}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	200019a8 	.word	0x200019a8

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff fff6 	bl	80018bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80018d2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80018d4:	d002      	beq.n	80018dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_Delay+0x20>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	1b43      	subs	r3, r0, r5
 80018e2:	42a3      	cmp	r3, r4
 80018e4:	d3fa      	bcc.n	80018dc <HAL_Delay+0x14>
  {
  }
}
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	20000d98 	.word	0x20000d98

080018ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018ee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001906:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_NVIC_SetPriority+0x74>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191a:	f1c3 0e07 	rsb	lr, r3, #7
 800191e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001926:	bf28      	it	cs
 8001928:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192c:	f1bc 0f06 	cmp.w	ip, #6
 8001930:	d91b      	bls.n	800196a <HAL_NVIC_SetPriority+0x5a>
 8001932:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 3cff 	mov.w	ip, #4294967295
 8001938:	fa0c fc03 	lsl.w	ip, ip, r3
 800193c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 3cff 	mov.w	ip, #4294967295
 8001944:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001948:	ea21 010c 	bic.w	r1, r1, ip
 800194c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800194e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001954:	db0c      	blt.n	8001970 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800195a:	0109      	lsls	r1, r1, #4
 800195c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001960:	b2c9      	uxtb	r1, r1
 8001962:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001966:	f85d fb04 	ldr.w	pc, [sp], #4
 800196a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196c:	4613      	mov	r3, r2
 800196e:	e7e7      	b.n	8001940 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_NVIC_SetPriority+0x78>)
 8001972:	f000 000f 	and.w	r0, r0, #15
 8001976:	0109      	lsls	r1, r1, #4
 8001978:	4403      	add	r3, r0
 800197a:	b2c9      	uxtb	r1, r1
 800197c:	7619      	strb	r1, [r3, #24]
 800197e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	e000ecfc 	.word	0xe000ecfc

0800198c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	3801      	subs	r0, #1
 800198e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001992:	d210      	bcs.n	80019b6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001994:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	4c08      	ldr	r4, [pc, #32]	; (80019bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80019a2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019aa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80019ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	6119      	str	r1, [r3, #16]
 80019b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2001      	movs	r0, #1
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019c0:	b180      	cbz	r0, 80019e4 <HAL_CRC_Init+0x24>
{
 80019c2:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019c4:	7943      	ldrb	r3, [r0, #5]
 80019c6:	4604      	mov	r4, r0
 80019c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019cc:	b11b      	cbz	r3, 80019d6 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019ce:	2301      	movs	r3, #1
 80019d0:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80019d2:	2000      	movs	r0, #0
}
 80019d4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80019d6:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80019d8:	f7ff fe4e 	bl	8001678 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 80019dc:	2301      	movs	r3, #1
 80019de:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 80019e0:	2000      	movs	r0, #0
}
 80019e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ec:	2200      	movs	r2, #0
 80019ee:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f0:	4e70      	ldr	r6, [pc, #448]	; (8001bb4 <HAL_GPIO_Init+0x1cc>)
{
 80019f2:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f4:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80019f6:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4689      	mov	r9, r1
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	3301      	adds	r3, #1
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	f102 0202 	add.w	r2, r2, #2
 8001a06:	d078      	beq.n	8001afa <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8001a08:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0c:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001a10:	43a1      	bics	r1, r4
 8001a12:	d1f4      	bne.n	80019fe <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a14:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001a18:	f00c 0103 	and.w	r1, ip, #3
 8001a1c:	1e4d      	subs	r5, r1, #1
 8001a1e:	2d01      	cmp	r5, #1
 8001a20:	d96e      	bls.n	8001b00 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a22:	2903      	cmp	r1, #3
 8001a24:	f040 80ae 	bne.w	8001b84 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	4091      	lsls	r1, r2
 8001a2a:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001a2c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a30:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a32:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001a36:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a38:	d0e1      	beq.n	80019fe <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4d5f      	ldr	r5, [pc, #380]	; (8001bb8 <HAL_GPIO_Init+0x1d0>)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	9103      	str	r1, [sp, #12]
 8001a40:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001a42:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001a46:	6469      	str	r1, [r5, #68]	; 0x44
 8001a48:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001a4a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001a4e:	9103      	str	r1, [sp, #12]
 8001a50:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	f023 0103 	bic.w	r1, r3, #3
 8001a56:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001a5a:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5e:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a62:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a66:	00bf      	lsls	r7, r7, #2
 8001a68:	250f      	movs	r5, #15
 8001a6a:	40bd      	lsls	r5, r7
 8001a6c:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a70:	4d52      	ldr	r5, [pc, #328]	; (8001bbc <HAL_GPIO_Init+0x1d4>)
 8001a72:	42a8      	cmp	r0, r5
 8001a74:	d017      	beq.n	8001aa6 <HAL_GPIO_Init+0xbe>
 8001a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	f000 8086 	beq.w	8001b8c <HAL_GPIO_Init+0x1a4>
 8001a80:	4d4f      	ldr	r5, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x1d8>)
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_GPIO_Init+0x1ae>
 8001a88:	4d4e      	ldr	r5, [pc, #312]	; (8001bc4 <HAL_GPIO_Init+0x1dc>)
 8001a8a:	42a8      	cmp	r0, r5
 8001a8c:	f000 808a 	beq.w	8001ba4 <HAL_GPIO_Init+0x1bc>
 8001a90:	4d4d      	ldr	r5, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x1e0>)
 8001a92:	42a8      	cmp	r0, r5
 8001a94:	bf0c      	ite	eq
 8001a96:	f04f 0e04 	moveq.w	lr, #4
 8001a9a:	f04f 0e07 	movne.w	lr, #7
 8001a9e:	fa0e f707 	lsl.w	r7, lr, r7
 8001aa2:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa6:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001aaa:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab0:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	bf0c      	ite	eq
 8001ab6:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001ab8:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001abc:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001abe:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac0:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	bf0c      	ite	eq
 8001ac6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001ac8:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001acc:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001ace:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad0:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	bf0c      	ite	eq
 8001ad6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001ad8:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001adc:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ade:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae0:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae4:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	bf0c      	ite	eq
 8001aea:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001aec:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af0:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001af2:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af4:	f102 0202 	add.w	r2, r2, #2
 8001af8:	d186      	bne.n	8001a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001afa:	b005      	add	sp, #20
 8001afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b00:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001b04:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b06:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b0a:	2503      	movs	r5, #3
 8001b0c:	fa05 fe02 	lsl.w	lr, r5, r2
 8001b10:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b14:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8001b18:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b1a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b1c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001b28:	409f      	lsls	r7, r3
 8001b2a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b2e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b30:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b36:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001b3a:	4097      	lsls	r7, r2
 8001b3c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001b42:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b44:	fa01 f102 	lsl.w	r1, r1, r2
 8001b48:	f47f af70 	bne.w	8001a2c <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001b50:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b54:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001b5c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b66:	fa07 f708 	lsl.w	r7, r7, r8
 8001b6a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6c:	270f      	movs	r7, #15
 8001b6e:	fa07 f808 	lsl.w	r8, r7, r8
 8001b72:	9f00      	ldr	r7, [sp, #0]
 8001b74:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	9f01      	ldr	r7, [sp, #4]
 8001b7a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	f8ce 7020 	str.w	r7, [lr, #32]
 8001b82:	e753      	b.n	8001a2c <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	2503      	movs	r5, #3
 8001b86:	4095      	lsls	r5, r2
 8001b88:	43ed      	mvns	r5, r5
 8001b8a:	e7d1      	b.n	8001b30 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8c:	fa0a f707 	lsl.w	r7, sl, r7
 8001b90:	ea48 0807 	orr.w	r8, r8, r7
 8001b94:	e787      	b.n	8001aa6 <HAL_GPIO_Init+0xbe>
 8001b96:	f04f 0e02 	mov.w	lr, #2
 8001b9a:	fa0e f707 	lsl.w	r7, lr, r7
 8001b9e:	ea48 0807 	orr.w	r8, r8, r7
 8001ba2:	e780      	b.n	8001aa6 <HAL_GPIO_Init+0xbe>
 8001ba4:	f04f 0e03 	mov.w	lr, #3
 8001ba8:	fa0e f707 	lsl.w	r7, lr, r7
 8001bac:	ea48 0807 	orr.w	r8, r8, r7
 8001bb0:	e779      	b.n	8001aa6 <HAL_GPIO_Init+0xbe>
 8001bb2:	bf00      	nop
 8001bb4:	40013c00 	.word	0x40013c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	b902      	cbnz	r2, 8001bd0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	0409      	lsls	r1, r1, #16
 8001bd0:	6181      	str	r1, [r0, #24]
  }
}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bd4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd6:	ea01 0203 	and.w	r2, r1, r3
 8001bda:	ea21 0103 	bic.w	r1, r1, r3
 8001bde:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001be2:	6181      	str	r1, [r0, #24]
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	2800      	cmp	r0, #0
 8001bea:	f000 81a2 	beq.w	8001f32 <HAL_RCC_OscConfig+0x34a>
{
 8001bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	6803      	ldr	r3, [r0, #0]
 8001bf4:	07dd      	lsls	r5, r3, #31
{
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	d52f      	bpl.n	8001c5c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfc:	499e      	ldr	r1, [pc, #632]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001bfe:	688a      	ldr	r2, [r1, #8]
 8001c00:	f002 020c 	and.w	r2, r2, #12
 8001c04:	2a04      	cmp	r2, #4
 8001c06:	f000 80ed 	beq.w	8001de4 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	688a      	ldr	r2, [r1, #8]
 8001c0c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c10:	2a08      	cmp	r2, #8
 8001c12:	f000 80e3 	beq.w	8001ddc <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	6863      	ldr	r3, [r4, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	f000 80ec 	beq.w	8001df8 <HAL_RCC_OscConfig+0x210>
 8001c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c24:	f000 8175 	beq.w	8001f12 <HAL_RCC_OscConfig+0x32a>
 8001c28:	4d93      	ldr	r5, [pc, #588]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001c2a:	682a      	ldr	r2, [r5, #0]
 8001c2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c30:	602a      	str	r2, [r5, #0]
 8001c32:	682a      	ldr	r2, [r5, #0]
 8001c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c38:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 80e1 	bne.w	8001e02 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fe3c 	bl	80018bc <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fe38 	bl	80018bc <HAL_GetTick>
 8001c4c:	1b80      	subs	r0, r0, r6
 8001c4e:	2864      	cmp	r0, #100	; 0x64
 8001c50:	f200 8101 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	039b      	lsls	r3, r3, #14
 8001c58:	d4f6      	bmi.n	8001c48 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	079f      	lsls	r7, r3, #30
 8001c5e:	d528      	bpl.n	8001cb2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c60:	4a85      	ldr	r2, [pc, #532]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001c62:	6891      	ldr	r1, [r2, #8]
 8001c64:	f011 0f0c 	tst.w	r1, #12
 8001c68:	f000 8090 	beq.w	8001d8c <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6c:	6891      	ldr	r1, [r2, #8]
 8001c6e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	2908      	cmp	r1, #8
 8001c74:	f000 8086 	beq.w	8001d84 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	68e3      	ldr	r3, [r4, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 810e 	beq.w	8001e9c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4e7d      	ldr	r6, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c88:	f7ff fe18 	bl	80018bc <HAL_GetTick>
 8001c8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	e005      	b.n	8001c9c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff fe14 	bl	80018bc <HAL_GetTick>
 8001c94:	1b40      	subs	r0, r0, r5
 8001c96:	2802      	cmp	r0, #2
 8001c98:	f200 80dd 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	6833      	ldr	r3, [r6, #0]
 8001c9e:	0798      	lsls	r0, r3, #30
 8001ca0:	d5f6      	bpl.n	8001c90 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	6833      	ldr	r3, [r6, #0]
 8001ca4:	6922      	ldr	r2, [r4, #16]
 8001ca6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001caa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cae:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	071a      	lsls	r2, r3, #28
 8001cb4:	d451      	bmi.n	8001d5a <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb6:	0758      	lsls	r0, r3, #29
 8001cb8:	d52f      	bpl.n	8001d1a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4a6f      	ldr	r2, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001cbc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cbe:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	d07f      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8001cc4:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4e6e      	ldr	r6, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	6833      	ldr	r3, [r6, #0]
 8001cca:	05d9      	lsls	r1, r3, #23
 8001ccc:	f140 80b3 	bpl.w	8001e36 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	68a3      	ldr	r3, [r4, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	f000 80c3 	beq.w	8001e5e <HAL_RCC_OscConfig+0x276>
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	f000 812c 	beq.w	8001f36 <HAL_RCC_OscConfig+0x34e>
 8001cde:	4e66      	ldr	r6, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001ce0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	6732      	str	r2, [r6, #112]	; 0x70
 8001ce8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 80b9 	bne.w	8001e68 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fde1 	bl	80018bc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cfe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	e005      	b.n	8001d0e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fddb 	bl	80018bc <HAL_GetTick>
 8001d06:	1bc0      	subs	r0, r0, r7
 8001d08:	4540      	cmp	r0, r8
 8001d0a:	f200 80a4 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d10:	0798      	lsls	r0, r3, #30
 8001d12:	d4f6      	bmi.n	8001d02 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d14:	2d00      	cmp	r5, #0
 8001d16:	f040 8106 	bne.w	8001f26 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1a:	69a0      	ldr	r0, [r4, #24]
 8001d1c:	b1c8      	cbz	r0, 8001d52 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4d56      	ldr	r5, [pc, #344]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001d20:	68ab      	ldr	r3, [r5, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	f000 80c9 	beq.w	8001ebe <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x294>)
 8001d2e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d30:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001d32:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	f000 8109 	beq.w	8001f4a <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fdc0 	bl	80018bc <HAL_GetTick>
 8001d3c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e005      	b.n	8001d4c <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fdbc 	bl	80018bc <HAL_GetTick>
 8001d44:	1b00      	subs	r0, r0, r4
 8001d46:	2802      	cmp	r0, #2
 8001d48:	f200 8085 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	019b      	lsls	r3, r3, #6
 8001d50:	d4f6      	bmi.n	8001d40 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001d52:	2000      	movs	r0, #0
}
 8001d54:	b002      	add	sp, #8
 8001d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5a:	6963      	ldr	r3, [r4, #20]
 8001d5c:	b30b      	cbz	r3, 8001da2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d60:	4e45      	ldr	r6, [pc, #276]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8001d62:	2201      	movs	r2, #1
 8001d64:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001d68:	f7ff fda8 	bl	80018bc <HAL_GetTick>
 8001d6c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e004      	b.n	8001d7a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fda4 	bl	80018bc <HAL_GetTick>
 8001d74:	1b40      	subs	r0, r0, r5
 8001d76:	2802      	cmp	r0, #2
 8001d78:	d86d      	bhi.n	8001e56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001d7c:	079b      	lsls	r3, r3, #30
 8001d7e:	d5f7      	bpl.n	8001d70 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	e798      	b.n	8001cb6 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d84:	6852      	ldr	r2, [r2, #4]
 8001d86:	0256      	lsls	r6, r2, #9
 8001d88:	f53f af76 	bmi.w	8001c78 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	0795      	lsls	r5, r2, #30
 8001d92:	d544      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x236>
 8001d94:	68e2      	ldr	r2, [r4, #12]
 8001d96:	2a01      	cmp	r2, #1
 8001d98:	d041      	beq.n	8001e1e <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8001d9a:	2001      	movs	r0, #1
}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4a36      	ldr	r2, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4e34      	ldr	r6, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8001da6:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001daa:	f7ff fd87 	bl	80018bc <HAL_GetTick>
 8001dae:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fd83 	bl	80018bc <HAL_GetTick>
 8001db6:	1b40      	subs	r0, r0, r5
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d84c      	bhi.n	8001e56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001dbe:	079f      	lsls	r7, r3, #30
 8001dc0:	d4f7      	bmi.n	8001db2 <HAL_RCC_OscConfig+0x1ca>
 8001dc2:	e7dd      	b.n	8001d80 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001dd8:	2501      	movs	r5, #1
 8001dda:	e774      	b.n	8001cc6 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ddc:	684a      	ldr	r2, [r1, #4]
 8001dde:	0250      	lsls	r0, r2, #9
 8001de0:	f57f af19 	bpl.w	8001c16 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	0391      	lsls	r1, r2, #14
 8001dea:	f57f af37 	bpl.w	8001c5c <HAL_RCC_OscConfig+0x74>
 8001dee:	6862      	ldr	r2, [r4, #4]
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	f47f af33 	bne.w	8001c5c <HAL_RCC_OscConfig+0x74>
 8001df6:	e7d0      	b.n	8001d9a <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e02:	f7ff fd5b 	bl	80018bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4e1c      	ldr	r6, [pc, #112]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8001e08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e004      	b.n	8001e16 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fd56 	bl	80018bc <HAL_GetTick>
 8001e10:	1b40      	subs	r0, r0, r5
 8001e12:	2864      	cmp	r0, #100	; 0x64
 8001e14:	d81f      	bhi.n	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	6833      	ldr	r3, [r6, #0]
 8001e18:	039a      	lsls	r2, r3, #14
 8001e1a:	d5f7      	bpl.n	8001e0c <HAL_RCC_OscConfig+0x224>
 8001e1c:	e71d      	b.n	8001c5a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4916      	ldr	r1, [pc, #88]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001e20:	6920      	ldr	r0, [r4, #16]
 8001e22:	680a      	ldr	r2, [r1, #0]
 8001e24:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001e28:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001e2c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	071a      	lsls	r2, r3, #28
 8001e30:	f57f af41 	bpl.w	8001cb6 <HAL_RCC_OscConfig+0xce>
 8001e34:	e791      	b.n	8001d5a <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e36:	6833      	ldr	r3, [r6, #0]
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fd3d 	bl	80018bc <HAL_GetTick>
 8001e42:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	6833      	ldr	r3, [r6, #0]
 8001e46:	05da      	lsls	r2, r3, #23
 8001e48:	f53f af42 	bmi.w	8001cd0 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7ff fd36 	bl	80018bc <HAL_GetTick>
 8001e50:	1bc0      	subs	r0, r0, r7
 8001e52:	2802      	cmp	r0, #2
 8001e54:	d9f6      	bls.n	8001e44 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
}
 8001e58:	b002      	add	sp, #8
 8001e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5e:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
 8001e60:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e68:	f7ff fd28 	bl	80018bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4f02      	ldr	r7, [pc, #8]	; (8001e78 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001e6e:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x2a6>
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	42470000 	.word	0x42470000
 8001e80:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff fd1a 	bl	80018bc <HAL_GetTick>
 8001e88:	1b80      	subs	r0, r0, r6
 8001e8a:	4540      	cmp	r0, r8
 8001e8c:	d8e3      	bhi.n	8001e56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e90:	079b      	lsls	r3, r3, #30
 8001e92:	d5f7      	bpl.n	8001e84 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	f43f af40 	beq.w	8001d1a <HAL_RCC_OscConfig+0x132>
 8001e9a:	e044      	b.n	8001f26 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4e43      	ldr	r6, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8001ea0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fd0b 	bl	80018bc <HAL_GetTick>
 8001ea6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea8:	e004      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7ff fd07 	bl	80018bc <HAL_GetTick>
 8001eae:	1b40      	subs	r0, r0, r5
 8001eb0:	2802      	cmp	r0, #2
 8001eb2:	d8d0      	bhi.n	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb4:	6833      	ldr	r3, [r6, #0]
 8001eb6:	0799      	lsls	r1, r3, #30
 8001eb8:	d4f7      	bmi.n	8001eaa <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	e6f9      	b.n	8001cb2 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebe:	2801      	cmp	r0, #1
 8001ec0:	f43f af48 	beq.w	8001d54 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8001ec4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ecc:	4291      	cmp	r1, r2
 8001ece:	f47f af64 	bne.w	8001d9a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed8:	4291      	cmp	r1, r2
 8001eda:	f47f af5e 	bne.w	8001d9a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ede:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ee0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001ee4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001eea:	f47f af56 	bne.w	8001d9a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ef0:	0852      	lsrs	r2, r2, #1
 8001ef2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001ef6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001efc:	f47f af4d 	bne.w	8001d9a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f02:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f06:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8001f0a:	bf14      	ite	ne
 8001f0c:	2001      	movne	r0, #1
 8001f0e:	2000      	moveq	r0, #0
 8001f10:	e720      	b.n	8001d54 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x3c4>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f22:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	e76d      	b.n	8001e02 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x3c4>)
 8001f28:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f30:	e6f3      	b.n	8001d1a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x3c4>)
 8001f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f3a:	f042 0204 	orr.w	r2, r2, #4
 8001f3e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f48:	e78e      	b.n	8001e68 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fcb7 	bl	80018bc <HAL_GetTick>
 8001f4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f50:	e005      	b.n	8001f5e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff fcb3 	bl	80018bc <HAL_GetTick>
 8001f56:	1b80      	subs	r0, r0, r6
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	f63f af7c 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	682b      	ldr	r3, [r5, #0]
 8001f60:	0199      	lsls	r1, r3, #6
 8001f62:	d4f6      	bmi.n	8001f52 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f64:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001f68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f70:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001f74:	0852      	lsrs	r2, r2, #1
 8001f76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f7a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001f82:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f84:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f86:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001f88:	f7ff fc98 	bl	80018bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	4d07      	ldr	r5, [pc, #28]	; (8001fac <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001f8e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	e005      	b.n	8001f9e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff fc93 	bl	80018bc <HAL_GetTick>
 8001f96:	1b00      	subs	r0, r0, r4
 8001f98:	2802      	cmp	r0, #2
 8001f9a:	f63f af5c 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	019a      	lsls	r2, r3, #6
 8001fa2:	d5f6      	bpl.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
 8001fa4:	e6d5      	b.n	8001d52 <HAL_RCC_OscConfig+0x16a>
 8001fa6:	bf00      	nop
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001fb2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb4:	688b      	ldr	r3, [r1, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d01b      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x46>
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d117      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fcc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd0:	d113      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	480f      	ldr	r0, [pc, #60]	; (8002010 <HAL_RCC_GetSysClockFreq+0x60>)
 8001fd4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001fd8:	fba1 0100 	umull	r0, r1, r1, r0
 8001fdc:	f7fe fe4c 	bl	8000c78 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001fe8:	3301      	adds	r3, #1
 8001fea:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001fec:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ff0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001ff4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001ff8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <HAL_RCC_GetSysClockFreq+0x64>)
 8001ffc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002000:	2300      	movs	r3, #0
 8002002:	fba1 0100 	umull	r0, r1, r1, r0
 8002006:	f7fe fe37 	bl	8000c78 <__aeabi_uldivmod>
 800200a:	e7e9      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x30>
 800200c:	40023800 	.word	0x40023800
 8002010:	00f42400 	.word	0x00f42400
 8002014:	007a1200 	.word	0x007a1200

08002018 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002018:	2800      	cmp	r0, #0
 800201a:	f000 8087 	beq.w	800212c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201e:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_RCC_ClockConfig+0x128>)
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	428b      	cmp	r3, r1
{
 8002028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800202c:	460d      	mov	r5, r1
 800202e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	d209      	bcs.n	8002046 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	b2cb      	uxtb	r3, r1
 8002034:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	6813      	ldr	r3, [r2, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	428b      	cmp	r3, r1
 800203e:	d002      	beq.n	8002046 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002040:	2001      	movs	r0, #1
}
 8002042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	0798      	lsls	r0, r3, #30
 800204a:	d514      	bpl.n	8002076 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	0759      	lsls	r1, r3, #29
 800204e:	d504      	bpl.n	800205a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	493c      	ldr	r1, [pc, #240]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 8002052:	688a      	ldr	r2, [r1, #8]
 8002054:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002058:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	071a      	lsls	r2, r3, #28
 800205c:	d504      	bpl.n	8002068 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205e:	4939      	ldr	r1, [pc, #228]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 8002060:	688a      	ldr	r2, [r1, #8]
 8002062:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002066:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 800206a:	68a0      	ldr	r0, [r4, #8]
 800206c:	688a      	ldr	r2, [r1, #8]
 800206e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002072:	4302      	orrs	r2, r0
 8002074:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002076:	07df      	lsls	r7, r3, #31
 8002078:	d521      	bpl.n	80020be <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	6862      	ldr	r2, [r4, #4]
 800207c:	2a01      	cmp	r2, #1
 800207e:	d057      	beq.n	8002130 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002080:	1e93      	subs	r3, r2, #2
 8002082:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 8002086:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002088:	d94d      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	0799      	lsls	r1, r3, #30
 800208c:	d5d8      	bpl.n	8002040 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4e2d      	ldr	r6, [pc, #180]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 8002090:	68b3      	ldr	r3, [r6, #8]
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	4313      	orrs	r3, r2
 8002098:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800209a:	f7ff fc0f 	bl	80018bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80020a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a4:	e004      	b.n	80020b0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7ff fc09 	bl	80018bc <HAL_GetTick>
 80020aa:	1bc0      	subs	r0, r0, r7
 80020ac:	4540      	cmp	r0, r8
 80020ae:	d844      	bhi.n	800213a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b0:	68b3      	ldr	r3, [r6, #8]
 80020b2:	6862      	ldr	r2, [r4, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020bc:	d1f3      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x128>)
 80020c0:	6813      	ldr	r3, [r2, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d906      	bls.n	80020d8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	b2eb      	uxtb	r3, r5
 80020cc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	42ab      	cmp	r3, r5
 80020d6:	d1b3      	bne.n	8002040 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	075a      	lsls	r2, r3, #29
 80020dc:	d506      	bpl.n	80020ec <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020de:	4919      	ldr	r1, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 80020e0:	68e0      	ldr	r0, [r4, #12]
 80020e2:	688a      	ldr	r2, [r1, #8]
 80020e4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80020e8:	4302      	orrs	r2, r0
 80020ea:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	071b      	lsls	r3, r3, #28
 80020ee:	d507      	bpl.n	8002100 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 80020f2:	6921      	ldr	r1, [r4, #16]
 80020f4:	6893      	ldr	r3, [r2, #8]
 80020f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020fe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002100:	f7ff ff56 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 8002106:	4c10      	ldr	r4, [pc, #64]	; (8002148 <HAL_RCC_ClockConfig+0x130>)
 8002108:	6892      	ldr	r2, [r2, #8]
 800210a:	4910      	ldr	r1, [pc, #64]	; (800214c <HAL_RCC_ClockConfig+0x134>)
 800210c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002110:	4603      	mov	r3, r0
 8002112:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002114:	480e      	ldr	r0, [pc, #56]	; (8002150 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002116:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002118:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800211a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800211c:	f7ff fb84 	bl	8001828 <HAL_InitTick>
  return HAL_OK;
 8002120:	2000      	movs	r0, #0
}
 8002122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	0198      	lsls	r0, r3, #6
 8002128:	d4b1      	bmi.n	800208e <HAL_RCC_ClockConfig+0x76>
 800212a:	e789      	b.n	8002040 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800212c:	2001      	movs	r0, #1
}
 800212e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_RCC_ClockConfig+0x12c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	039e      	lsls	r6, r3, #14
 8002136:	d4aa      	bmi.n	800208e <HAL_RCC_ClockConfig+0x76>
 8002138:	e782      	b.n	8002040 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800213a:	2003      	movs	r0, #3
 800213c:	e781      	b.n	8002042 <HAL_RCC_ClockConfig+0x2a>
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00
 8002144:	40023800 	.word	0x40023800
 8002148:	0800ae94 	.word	0x0800ae94
 800214c:	20000d94 	.word	0x20000d94
 8002150:	20000d9c 	.word	0x20000d9c

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002156:	4905      	ldr	r1, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800215c:	6808      	ldr	r0, [r1, #0]
 800215e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002162:	5cd3      	ldrb	r3, [r2, r3]
}
 8002164:	40d8      	lsrs	r0, r3
 8002166:	4770      	bx	lr
 8002168:	40023800 	.word	0x40023800
 800216c:	20000d94 	.word	0x20000d94
 8002170:	0800aea4 	.word	0x0800aea4

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002176:	4905      	ldr	r1, [pc, #20]	; (800218c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800217c:	6808      	ldr	r0, [r1, #0]
 800217e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002182:	5cd3      	ldrb	r3, [r2, r3]
}
 8002184:	40d8      	lsrs	r0, r3
 8002186:	4770      	bx	lr
 8002188:	40023800 	.word	0x40023800
 800218c:	20000d94 	.word	0x20000d94
 8002190:	0800aea4 	.word	0x0800aea4

08002194 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002194:	2800      	cmp	r0, #0
 8002196:	d076      	beq.n	8002286 <HAL_TIM_Base_Init+0xf2>
{
 8002198:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800219e:	4604      	mov	r4, r0
 80021a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d055      	beq.n	8002254 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021aa:	4938      	ldr	r1, [pc, #224]	; (800228c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80021b4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b6:	d052      	beq.n	800225e <HAL_TIM_Base_Init+0xca>
 80021b8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80021bc:	d021      	beq.n	8002202 <HAL_TIM_Base_Init+0x6e>
 80021be:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d01d      	beq.n	8002202 <HAL_TIM_Base_Init+0x6e>
 80021c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021ca:	428a      	cmp	r2, r1
 80021cc:	d019      	beq.n	8002202 <HAL_TIM_Base_Init+0x6e>
 80021ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021d2:	428a      	cmp	r2, r1
 80021d4:	d015      	beq.n	8002202 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80021da:	428a      	cmp	r2, r1
 80021dc:	d015      	beq.n	800220a <HAL_TIM_Base_Init+0x76>
 80021de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021e2:	428a      	cmp	r2, r1
 80021e4:	d011      	beq.n	800220a <HAL_TIM_Base_Init+0x76>
 80021e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d00d      	beq.n	800220a <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ee:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021f6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80021f8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021fa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021fe:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002200:	e010      	b.n	8002224 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8002202:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002208:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002218:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800221c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800221e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002222:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002224:	2301      	movs	r3, #1
 8002226:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002228:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002230:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002234:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002244:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800224c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002250:	2000      	movs	r0, #0
}
 8002252:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002254:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002258:	f7ff fa28 	bl	80016ac <HAL_TIM_Base_MspInit>
 800225c:	e7a4      	b.n	80021a8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800225e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002260:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002266:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800226e:	69a1      	ldr	r1, [r4, #24]
 8002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002274:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002276:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002278:	68e3      	ldr	r3, [r4, #12]
 800227a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800227c:	6863      	ldr	r3, [r4, #4]
 800227e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002280:	6963      	ldr	r3, [r4, #20]
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	e7ce      	b.n	8002224 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8002286:	2001      	movs	r0, #1
}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000

08002290 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002290:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002294:	2b01      	cmp	r3, #1
 8002296:	d124      	bne.n	80022e2 <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002298:	6803      	ldr	r3, [r0, #0]
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a4:	d012      	beq.n	80022cc <HAL_TIM_Base_Start+0x3c>
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d00f      	beq.n	80022cc <HAL_TIM_Base_Start+0x3c>
 80022ac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00b      	beq.n	80022cc <HAL_TIM_Base_Start+0x3c>
 80022b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_Base_Start+0x3c>
 80022bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <HAL_TIM_Base_Start+0x3c>
 80022c4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d2:	2a06      	cmp	r2, #6
 80022d4:	d007      	beq.n	80022e6 <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80022dc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4770      	bx	lr
    return HAL_ERROR;
 80022e2:	2001      	movs	r0, #1
 80022e4:	4770      	bx	lr
  return HAL_OK;
 80022e6:	2000      	movs	r0, #0
}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000

080022f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80022f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d075      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xf4>
 80022f8:	4602      	mov	r2, r0
{
 80022fa:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80022fe:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002304:	2001      	movs	r0, #1
 8002306:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800230a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800230c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002310:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002314:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002316:	680b      	ldr	r3, [r1, #0]
 8002318:	2b60      	cmp	r3, #96	; 0x60
 800231a:	d065      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xf8>
 800231c:	d824      	bhi.n	8002368 <HAL_TIM_ConfigClockSource+0x78>
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d07c      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x12c>
 8002322:	d94b      	bls.n	80023bc <HAL_TIM_ConfigClockSource+0xcc>
 8002324:	2b50      	cmp	r3, #80	; 0x50
 8002326:	d117      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002328:	6848      	ldr	r0, [r1, #4]
 800232a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800232c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	6a23      	ldr	r3, [r4, #32]
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002336:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002338:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800233c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002340:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002342:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002346:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002348:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800234a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002350:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002356:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002358:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800235a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800235c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002360:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002364:	bc30      	pop	{r4, r5}
 8002366:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	d038      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0xf0>
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002372:	d110      	bne.n	8002396 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002374:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002378:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237a:	432b      	orrs	r3, r5
 800237c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002382:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002386:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002388:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800238a:	68a3      	ldr	r3, [r4, #8]
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002392:	60a3      	str	r3, [r4, #8]
      break;
 8002394:	e7e0      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002396:	2b70      	cmp	r3, #112	; 0x70
 8002398:	d1de      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800239a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800239e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a0:	432b      	orrs	r3, r5
 80023a2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80023ac:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80023ae:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80023b0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80023b8:	60a3      	str	r3, [r4, #8]
      break;
 80023ba:	e7cd      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d002      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0xd6>
 80023c0:	d90a      	bls.n	80023d8 <HAL_TIM_ConfigClockSource+0xe8>
 80023c2:	2b30      	cmp	r3, #48	; 0x30
 80023c4:	d1c8      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80023c6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023cc:	430b      	orrs	r3, r1
 80023ce:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80023d4:	60a3      	str	r3, [r4, #8]
}
 80023d6:	e7bf      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80023d8:	f033 0110 	bics.w	r1, r3, #16
 80023dc:	d1bc      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
 80023de:	e7f2      	b.n	80023c6 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2000      	movs	r0, #0
 80023e2:	e7b9      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80023e4:	2002      	movs	r0, #2
}
 80023e6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ea:	68cb      	ldr	r3, [r1, #12]
 80023ec:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ee:	f020 0010 	bic.w	r0, r0, #16
 80023f2:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f4:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023f6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023fa:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80023fe:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002400:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002406:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 800240a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800240c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002412:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002418:	60a3      	str	r3, [r4, #8]
}
 800241a:	e79d      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241c:	6848      	ldr	r0, [r1, #4]
 800241e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002420:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002422:	6a23      	ldr	r3, [r4, #32]
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800242c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002434:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002436:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800243a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800243c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800243e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002444:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800244a:	60a3      	str	r3, [r4, #8]
}
 800244c:	e784      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x68>
 800244e:	bf00      	nop

08002450 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002450:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d02f      	beq.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002458:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800245a:	2202      	movs	r2, #2
{
 800245c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800245e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002462:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002464:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002466:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002468:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800246c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800246e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d012      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d00f      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800247c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002480:	4293      	cmp	r3, r2
 8002482:	d00b      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800248c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002494:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002498:	4293      	cmp	r3, r2
 800249a:	d104      	bne.n	80024a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800249c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024a4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80024a6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	2201      	movs	r2, #1
 80024aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80024b2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80024b4:	4618      	mov	r0, r3
}
 80024b6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80024b8:	2002      	movs	r0, #2
}
 80024ba:	4770      	bx	lr
 80024bc:	40010000 	.word	0x40010000

080024c0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c0:	2800      	cmp	r0, #0
 80024c2:	f000 808f 	beq.w	80025e4 <HAL_UART_Init+0x124>
{
 80024c6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024cc:	4604      	mov	r4, r0
 80024ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8081 	beq.w	80025da <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d8:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024da:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80024dc:	2224      	movs	r2, #36	; 0x24
 80024de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ea:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ec:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80024f2:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024f4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f6:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024f8:	4302      	orrs	r2, r0
 80024fa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80024fc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024fe:	4302      	orrs	r2, r0
 8002500:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002502:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002506:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800250a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002514:	4934      	ldr	r1, [pc, #208]	; (80025e8 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002516:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800251a:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800251c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800251e:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002520:	d035      	beq.n	800258e <HAL_UART_Init+0xce>
 8002522:	4a32      	ldr	r2, [pc, #200]	; (80025ec <HAL_UART_Init+0x12c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d032      	beq.n	800258e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002528:	f7ff fe14 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800252c:	69e3      	ldr	r3, [r4, #28]
 800252e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002532:	d032      	beq.n	800259a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	2119      	movs	r1, #25
 8002538:	009a      	lsls	r2, r3, #2
 800253a:	fba0 0101 	umull	r0, r1, r0, r1
 800253e:	0f9b      	lsrs	r3, r3, #30
 8002540:	f7fe fb9a 	bl	8000c78 <__aeabi_uldivmod>
 8002544:	492a      	ldr	r1, [pc, #168]	; (80025f0 <HAL_UART_Init+0x130>)
 8002546:	fba1 3200 	umull	r3, r2, r1, r0
 800254a:	0952      	lsrs	r2, r2, #5
 800254c:	2564      	movs	r5, #100	; 0x64
 800254e:	fb05 0012 	mls	r0, r5, r2, r0
 8002552:	0100      	lsls	r0, r0, #4
 8002554:	3032      	adds	r0, #50	; 0x32
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	fba1 1000 	umull	r1, r0, r1, r0
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8002562:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800256a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002572:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002574:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002576:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002578:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800257a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800257e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002582:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002586:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800258a:	4628      	mov	r0, r5
}
 800258c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800258e:	f7ff fdf1 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002592:	69e3      	ldr	r3, [r4, #28]
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002598:	d1cc      	bne.n	8002534 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800259a:	6862      	ldr	r2, [r4, #4]
 800259c:	2119      	movs	r1, #25
 800259e:	1892      	adds	r2, r2, r2
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	415b      	adcs	r3, r3
 80025a6:	fba0 0101 	umull	r0, r1, r0, r1
 80025aa:	f7fe fb65 	bl	8000c78 <__aeabi_uldivmod>
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_UART_Init+0x130>)
 80025b0:	fba3 2100 	umull	r2, r1, r3, r0
 80025b4:	094d      	lsrs	r5, r1, #5
 80025b6:	2264      	movs	r2, #100	; 0x64
 80025b8:	fb02 0215 	mls	r2, r2, r5, r0
 80025bc:	00d2      	lsls	r2, r2, #3
 80025be:	3232      	adds	r2, #50	; 0x32
 80025c0:	fba3 3202 	umull	r3, r2, r3, r2
 80025c4:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80025c8:	0912      	lsrs	r2, r2, #4
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80025d0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80025d4:	440a      	add	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	e7c4      	b.n	8002564 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80025da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80025de:	f7ff f87f 	bl	80016e0 <HAL_UART_MspInit>
 80025e2:	e779      	b.n	80024d8 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
}
 80025e6:	4770      	bx	lr
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40011400 	.word	0x40011400
 80025f0:	51eb851f 	.word	0x51eb851f

080025f4 <HAL_UART_Transmit>:
{
 80025f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025f8:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80025fa:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80025fe:	2820      	cmp	r0, #32
 8002600:	d177      	bne.n	80026f2 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8002602:	4689      	mov	r9, r1
 8002604:	2900      	cmp	r1, #0
 8002606:	d040      	beq.n	800268a <HAL_UART_Transmit+0x96>
 8002608:	4614      	mov	r4, r2
 800260a:	2a00      	cmp	r2, #0
 800260c:	d03d      	beq.n	800268a <HAL_UART_Transmit+0x96>
 800260e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8002610:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d06c      	beq.n	80026f2 <HAL_UART_Transmit+0xfe>
 8002618:	2301      	movs	r3, #1
 800261a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261e:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002622:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002628:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800262c:	f7ff f946 	bl	80018bc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002630:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8002632:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002638:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 800263a:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263c:	d05c      	beq.n	80026f8 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 800263e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002640:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8002642:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002644:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002648:	2b00      	cmp	r3, #0
 800264a:	d07e      	beq.n	800274a <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264c:	682c      	ldr	r4, [r5, #0]
 800264e:	1c72      	adds	r2, r6, #1
 8002650:	d11e      	bne.n	8002690 <HAL_UART_Transmit+0x9c>
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	0613      	lsls	r3, r2, #24
 8002656:	d5fc      	bpl.n	8002652 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8002658:	f1b9 0f00 	cmp.w	r9, #0
 800265c:	d044      	beq.n	80026e8 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800265e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8002662:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8002664:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800266c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ec      	bne.n	800264e <HAL_UART_Transmit+0x5a>
 8002674:	1c71      	adds	r1, r6, #1
 8002676:	d145      	bne.n	8002704 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	065a      	lsls	r2, r3, #25
 800267c:	d5fc      	bpl.n	8002678 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800267e:	2320      	movs	r3, #32
 8002680:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8002684:	2000      	movs	r0, #0
}
 8002686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800268a:	2001      	movs	r0, #1
}
 800268c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	0618      	lsls	r0, r3, #24
 8002694:	d4e0      	bmi.n	8002658 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002696:	b12e      	cbz	r6, 80026a4 <HAL_UART_Transmit+0xb0>
 8002698:	f7ff f910 	bl	80018bc <HAL_GetTick>
 800269c:	1bc0      	subs	r0, r0, r7
 800269e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026a0:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026a2:	d2d4      	bcs.n	800264e <HAL_UART_Transmit+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	f104 030c 	add.w	r3, r4, #12
 80026a8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	f104 010c 	add.w	r1, r4, #12
 80026b4:	e841 3200 	strex	r2, r3, [r1]
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d1f3      	bne.n	80026a4 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	f104 0314 	add.w	r3, r4, #20
 80026c0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	f104 0114 	add.w	r1, r4, #20
 80026cc:	e841 3200 	strex	r2, r3, [r1]
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d1f3      	bne.n	80026bc <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 80026d4:	2320      	movs	r3, #32
 80026d6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80026da:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80026de:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 80026e2:	2003      	movs	r0, #3
}
 80026e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026e8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	e7b7      	b.n	8002662 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 80026f2:	2002      	movs	r0, #2
}
 80026f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f8:	692b      	ldr	r3, [r5, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d19f      	bne.n	800263e <HAL_UART_Transmit+0x4a>
 80026fe:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8002700:	4699      	mov	r9, r3
 8002702:	e79c      	b.n	800263e <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	065b      	lsls	r3, r3, #25
 8002708:	d4b9      	bmi.n	800267e <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800270a:	b12e      	cbz	r6, 8002718 <HAL_UART_Transmit+0x124>
 800270c:	f7ff f8d6 	bl	80018bc <HAL_GetTick>
 8002710:	1bc0      	subs	r0, r0, r7
 8002712:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002714:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002716:	d2ad      	bcs.n	8002674 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	f104 030c 	add.w	r3, r4, #12
 800271c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	f104 010c 	add.w	r1, r4, #12
 8002728:	e841 3200 	strex	r2, r3, [r1]
 800272c:	2a00      	cmp	r2, #0
 800272e:	d1f3      	bne.n	8002718 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	f104 0314 	add.w	r3, r4, #20
 8002734:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002738:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	f104 0114 	add.w	r1, r4, #20
 8002740:	e841 3200 	strex	r2, r3, [r1]
 8002744:	2a00      	cmp	r2, #0
 8002746:	d1f3      	bne.n	8002730 <HAL_UART_Transmit+0x13c>
 8002748:	e7c4      	b.n	80026d4 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800274a:	682c      	ldr	r4, [r5, #0]
 800274c:	e792      	b.n	8002674 <HAL_UART_Transmit+0x80>
 800274e:	bf00      	nop

08002750 <TfLiteIntArrayGetSizeInBytes>:
extern "C" {

size_t TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;

  size_t computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8002750:	3001      	adds	r0, #1
#if defined(_MSC_VER)
  // Context for why this is needed is in http://b/189926408#comment21
  computed_size -= sizeof(dummy.data[0]);
#endif
  return computed_size;
}
 8002752:	0080      	lsls	r0, r0, #2
 8002754:	4770      	bx	lr
	...

08002758 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 8002758:	2811      	cmp	r0, #17
 800275a:	bf9a      	itte	ls
 800275c:	4b02      	ldrls	r3, [pc, #8]	; (8002768 <TfLiteTypeGetName+0x10>)
 800275e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 8002762:	4802      	ldrhi	r0, [pc, #8]	; (800276c <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	0800af28 	.word	0x0800af28
 800276c:	0800aeac 	.word	0x0800aeac

08002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8002770:	b40e      	push	{r1, r2, r3}
 8002772:	b503      	push	{r0, r1, lr}
 8002774:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 8002776:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
 8002778:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 800277c:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 800277e:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 8002780:	4798      	blx	r3
  va_end(args);
  return code;
}
 8002782:	b002      	add	sp, #8
 8002784:	f85d eb04 	ldr.w	lr, [sp], #4
 8002788:	b003      	add	sp, #12
 800278a:	4770      	bx	lr

0800278c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800278c:	b40c      	push	{r2, r3}
 800278e:	b507      	push	{r0, r1, r2, lr}
 8002790:	aa04      	add	r2, sp, #16
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 8002792:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8002794:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 8002798:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 800279a:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 800279c:	4798      	blx	r3
  va_end(args);
  return code;
}
 800279e:	b003      	add	sp, #12
 80027a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027a4:	b002      	add	sp, #8
 80027a6:	4770      	bx	lr

080027a8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
        : allocator_(allocator) {}

    void operator()(void* data) { allocator_->Deallocate(data); }
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4718      	bx	r3

080027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80027b2:	8803      	ldrh	r3, [r0, #0]
 80027b4:	428b      	cmp	r3, r1
 80027b6:	bf8c      	ite	hi
 80027b8:	5a40      	ldrhhi	r0, [r0, r1]
 80027ba:	2000      	movls	r0, #0
  }
 80027bc:	4770      	bx	lr

080027be <_ZNK6tflite8Operator15builtin_optionsEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
  }
  const void *builtin_options() const {
 80027be:	b510      	push	{r4, lr}
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
 80027c0:	210c      	movs	r1, #12
 80027c2:	4604      	mov	r4, r0
 80027c4:	f7ff fff3 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80027c8:	b110      	cbz	r0, 80027d0 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
 80027ca:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80027cc:	5820      	ldr	r0, [r4, r0]
 80027ce:	4418      	add	r0, r3
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
  }
 80027d0:	bd10      	pop	{r4, pc}
	...

080027d4 <_Z9AbortImplv>:
inline void AbortImpl() {
 80027d4:	b508      	push	{r3, lr}
  DebugLog("HALTED\n");
 80027d6:	4802      	ldr	r0, [pc, #8]	; (80027e0 <_Z9AbortImplv+0xc>)
 80027d8:	f7fe fcc8 	bl	800116c <DebugLog>
  while (1) {
 80027dc:	e7fe      	b.n	80027dc <_Z9AbortImplv+0x8>
 80027de:	bf00      	nop
 80027e0:	0800ac80 	.word	0x0800ac80

080027e4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 80027e4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
 80027e6:	b908      	cbnz	r0, 80027ec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
 80027e8:	f7ff fff4 	bl	80027d4 <_Z9AbortImplv>
  TFLITE_DCHECK(error_reporter != nullptr);
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d0fb      	beq.n	80027e8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
 80027f0:	2a00      	cmp	r2, #0
 80027f2:	d0f9      	beq.n	80027e8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f7      	beq.n	80027e8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
 80027f8:	bd08      	pop	{r3, pc}
	...

080027fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80027fc:	b508      	push	{r3, lr}
 80027fe:	4603      	mov	r3, r0
 8002800:	4610      	mov	r0, r2
  switch (tensor_type) {
 8002802:	2b10      	cmp	r3, #16
 8002804:	d82e      	bhi.n	8002864 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x68>
 8002806:	e8df f003 	tbb	[pc, r3]
 800280a:	090d      	.short	0x090d
 800280c:	211d1915 	.word	0x211d1915
 8002810:	1b251123 	.word	0x1b251123
 8002814:	291f270f 	.word	0x291f270f
 8002818:	172b      	.short	0x172b
 800281a:	13          	.byte	0x13
 800281b:	00          	.byte	0x00
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 800281c:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800281e:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8002820:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
 8002822:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
 8002824:	2301      	movs	r3, #1
 8002826:	e7fa      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
 8002828:	230b      	movs	r3, #11
 800282a:	e7f8      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
 800282c:	2307      	movs	r3, #7
 800282e:	e7f6      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt16;
 8002830:	2311      	movs	r3, #17
 8002832:	e7f4      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
 8002834:	2302      	movs	r3, #2
 8002836:	e7f2      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
 8002838:	2310      	movs	r3, #16
 800283a:	e7f0      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
 800283c:	2303      	movs	r3, #3
 800283e:	e7ee      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
 8002840:	2309      	movs	r3, #9
 8002842:	e7ec      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
 8002844:	2304      	movs	r3, #4
 8002846:	e7ea      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
 8002848:	230d      	movs	r3, #13
 800284a:	e7e8      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
 800284c:	2305      	movs	r3, #5
 800284e:	e7e6      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
 8002850:	2306      	movs	r3, #6
 8002852:	e7e4      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
 8002854:	2308      	movs	r3, #8
 8002856:	e7e2      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
 8002858:	230c      	movs	r3, #12
 800285a:	e7e0      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
 800285c:	230e      	movs	r3, #14
 800285e:	e7de      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
 8002860:	230f      	movs	r3, #15
 8002862:	e7dc      	b.n	800281e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
 8002864:	2200      	movs	r2, #0
 8002866:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8002868:	4902      	ldr	r1, [pc, #8]	; (8002874 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x78>)
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff ff80 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8002870:	2001      	movs	r0, #1
 8002872:	e7d6      	b.n	8002822 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
 8002874:	0800af70 	.word	0x0800af70

08002878 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 8002878:	2000      	movs	r0, #0
 800287a:	4770      	bx	lr

0800287c <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 800287c:	2000      	movs	r0, #0
 800287e:	4770      	bx	lr

08002880 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4605      	mov	r5, r0
 8002884:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 8002886:	f7ff ff92 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800288a:	b100      	cbz	r0, 800288e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
 800288c:	5c2c      	ldrb	r4, [r5, r0]
  }
 800288e:	4620      	mov	r0, r4
 8002890:	bd38      	pop	{r3, r4, r5, pc}

08002892 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8002892:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8002894:	2200      	movs	r2, #0
 8002896:	210a      	movs	r1, #10
 8002898:	f7ff fff2 	bl	8002880 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
 800289c:	bd08      	pop	{r3, pc}

0800289e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800289e:	b538      	push	{r3, r4, r5, lr}
 80028a0:	4605      	mov	r5, r0
 80028a2:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 80028a4:	f7ff ff83 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80028a8:	b100      	cbz	r0, 80028ac <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0xe>
 80028aa:	582c      	ldr	r4, [r5, r0]
  }
 80028ac:	4620      	mov	r0, r4
 80028ae:	bd38      	pop	{r3, r4, r5, pc}

080028b0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	4605      	mov	r5, r0
 80028b4:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 80028b6:	f7ff ff7a 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80028ba:	b100      	cbz	r0, 80028be <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
 80028bc:	562c      	ldrsb	r4, [r5, r0]
  }
 80028be:	4620      	mov	r0, r4
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080028c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 80028c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c8:	4617      	mov	r7, r2
 80028ca:	4605      	mov	r5, r0
 80028cc:	4689      	mov	r9, r1
 80028ce:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80028d0:	f7ff ff88 	bl	80027e4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2104      	movs	r1, #4
 80028dc:	4638      	mov	r0, r7
 80028de:	4798      	blx	r3
    return new (allocated_memory) T();
 80028e0:	f04f 0b00 	mov.w	fp, #0
 80028e4:	f8c0 b000 	str.w	fp, [r0]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80028e8:	4604      	mov	r4, r0
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 80028ea:	4628      	mov	r0, r5
 80028ec:	f7ff ffd1 	bl	8002892 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80028f0:	2808      	cmp	r0, #8
 80028f2:	4682      	mov	sl, r0
 80028f4:	d12b      	bne.n	800294e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
 80028f6:	4628      	mov	r0, r5
 80028f8:	f7ff ff61 	bl	80027be <_ZNK6tflite8Operator15builtin_optionsEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();

  if (schema_params != nullptr) {
 80028fc:	4605      	mov	r5, r0
 80028fe:	b330      	cbz	r0, 800294e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002900:	465a      	mov	r2, fp
 8002902:	2104      	movs	r1, #4
 8002904:	f7ff ffd4 	bl	80028b0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
  switch (activation) {
 8002908:	b2c6      	uxtb	r6, r0
 800290a:	1e73      	subs	r3, r6, #1
 800290c:	2b04      	cmp	r3, #4
 800290e:	bf88      	it	hi
 8002910:	465e      	movhi	r6, fp
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8002912:	465a      	mov	r2, fp
 8002914:	4651      	mov	r1, sl
    params->activation =
 8002916:	7026      	strb	r6, [r4, #0]
 8002918:	4628      	mov	r0, r5
 800291a:	f7ff ffb1 	bl	8002880 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800291e:	ebb0 000b 	subs.w	r0, r0, fp
 8002922:	bf18      	it	ne
 8002924:	2001      	movne	r0, #1
 8002926:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8002928:	465a      	mov	r2, fp
 800292a:	210a      	movs	r1, #10
 800292c:	4628      	mov	r0, r5
 800292e:	f7ff ffa7 	bl	8002880 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8002932:	ebb0 000b 	subs.w	r0, r0, fp
 8002936:	bf18      	it	ne
 8002938:	2001      	movne	r0, #1
 800293a:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 800293c:	465a      	mov	r2, fp
 800293e:	2106      	movs	r1, #6
 8002940:	4628      	mov	r0, r5
 8002942:	f7ff ffb5 	bl	80028b0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
    params->keep_num_dims = schema_params->keep_num_dims();
    params->asymmetric_quantize_inputs =
        schema_params->asymmetric_quantize_inputs();

    switch (schema_params->weights_format()) {
 8002946:	b110      	cbz	r0, 800294e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
 8002948:	2801      	cmp	r0, #1
 800294a:	d104      	bne.n	8002956 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
        break;
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 800294c:	7060      	strb	r0, [r4, #1]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800294e:	f8c8 4000 	str.w	r4, [r8]
  return kTfLiteOk;
 8002952:	2000      	movs	r0, #0
 8002954:	e008      	b.n	8002968 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
        TF_LITE_REPORT_ERROR(error_reporter,
 8002956:	4905      	ldr	r1, [pc, #20]	; (800296c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>)
 8002958:	4648      	mov	r0, r9
 800295a:	f7ff ff09 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
 800295e:	4638      	mov	r0, r7
 8002960:	4621      	mov	r1, r4
 8002962:	f7ff ff21 	bl	80027a8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
        return kTfLiteError;
 8002966:	2001      	movs	r0, #1
}
 8002968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296c:	0800af94 	.word	0x0800af94

08002970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8002970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002974:	4698      	mov	r8, r3
 8002976:	4605      	mov	r5, r0
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
 8002978:	2300      	movs	r3, #0
 800297a:	f8c8 3000 	str.w	r3, [r8]
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800297e:	460e      	mov	r6, r1
 8002980:	4617      	mov	r7, r2
  auto builtin_code = GetBuiltinCode(opcode);
 8002982:	f004 f825 	bl	80069d0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	1aeb      	subs	r3, r5, r3
 800298a:	4604      	mov	r4, r0
 800298c:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800298e:	2908      	cmp	r1, #8
 8002990:	d90d      	bls.n	80029ae <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
 8002992:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8002994:	b15a      	cbz	r2, 80029ae <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
 8002996:	58aa      	ldr	r2, [r5, r2]
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
 8002998:	2c9e      	cmp	r4, #158	; 0x9e
 800299a:	dd0a      	ble.n	80029b2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 800299c:	491e      	ldr	r1, [pc, #120]	; (8002a18 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
 800299e:	4622      	mov	r2, r4
 80029a0:	4638      	mov	r0, r7
 80029a2:	f7ff fee5 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 80029a6:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
 80029a8:	b002      	add	sp, #8
 80029aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ae:	2201      	movs	r2, #1
 80029b0:	e7f2      	b.n	8002998 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 80029b2:	2c20      	cmp	r4, #32
 80029b4:	d016      	beq.n	80029e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x74>
    *registration = op_resolver.FindOp(builtin_code, version);
 80029b6:	6833      	ldr	r3, [r6, #0]
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4621      	mov	r1, r4
 80029be:	4630      	mov	r0, r6
 80029c0:	4798      	blx	r3
    if (*registration == nullptr) {
 80029c2:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
 80029c4:	f8c8 0000 	str.w	r0, [r8]
    if (*registration == nullptr) {
 80029c8:	bb18      	cbnz	r0, 8002a12 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
// Check 'v' is out of closed range [low; high].
// Workaround for GCC warning [-Werror=type-limits]:
// comparison is always true due to limited range of data type.
template<typename T>
inline bool IsOutRange(const T &v, const T &low, const T &high) {
  return (v < low) || (high < v);
 80029ca:	2c00      	cmp	r4, #0
  return EnumNamesBuiltinOperator()[index];
 80029cc:	bfaa      	itet	ge
 80029ce:	4b13      	ldrge	r3, [pc, #76]	; (8002a1c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_SIGN)) return "";
 80029d0:	4913      	ldrlt	r1, [pc, #76]	; (8002a20 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
  return EnumNamesBuiltinOperator()[index];
 80029d2:	f853 1024 	ldrge.w	r1, [r3, r4, lsl #2]
      TF_LITE_REPORT_ERROR(
 80029d6:	4638      	mov	r0, r7
 80029d8:	4613      	mov	r3, r2
 80029da:	460a      	mov	r2, r1
 80029dc:	4911      	ldr	r1, [pc, #68]	; (8002a24 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb4>)
 80029de:	f7ff fec7 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 80029e2:	e7e0      	b.n	80029a6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80029e4:	2906      	cmp	r1, #6
 80029e6:	d90f      	bls.n	8002a08 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x98>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80029e8:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
 80029ea:	18e9      	adds	r1, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80029ec:	b163      	cbz	r3, 8002a08 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x98>
 80029ee:	58eb      	ldr	r3, [r5, r3]
 80029f0:	4419      	add	r1, r3
    *registration = op_resolver.FindOp(name, version);
 80029f2:	6833      	ldr	r3, [r6, #0]
 80029f4:	3104      	adds	r1, #4
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4630      	mov	r0, r6
 80029fa:	4798      	blx	r3
 80029fc:	f8c8 0000 	str.w	r0, [r8]
    status = kTfLiteError;
 8002a00:	fab0 f080 	clz	r0, r0
 8002a04:	0940      	lsrs	r0, r0, #5
 8002a06:	e7cf      	b.n	80029a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
    TF_LITE_REPORT_ERROR(
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb8>)
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	f7ff feb0 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
 8002a10:	e7c9      	b.n	80029a6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
  TfLiteStatus status = kTfLiteOk;
 8002a12:	2000      	movs	r0, #0
 8002a14:	e7c8      	b.n	80029a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
 8002a16:	bf00      	nop
 8002a18:	0800afbe 	.word	0x0800afbe
 8002a1c:	0800b750 	.word	0x0800b750
 8002a20:	0800ae5e 	.word	0x0800ae5e
 8002a24:	0800b012 	.word	0x0800b012
 8002a28:	0800b0b4 	.word	0x0800b0b4

08002a2c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8002a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8002a2e:	2200      	movs	r2, #0
                        int* shift) {
 8002a30:	4606      	mov	r6, r0
 8002a32:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	ec51 0b10 	vmov	r0, r1, d0
 8002a3a:	ed8d 0b00 	vstr	d0, [sp]
 8002a3e:	f7fe f85b 	bl	8000af8 <__aeabi_dcmpeq>
 8002a42:	ed9d 0b00 	vldr	d0, [sp]
 8002a46:	4605      	mov	r5, r0
 8002a48:	b120      	cbz	r0, 8002a54 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	6033      	str	r3, [r6, #0]
    *shift = 0;
 8002a4e:	6023      	str	r3, [r4, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 8002a50:	b002      	add	sp, #8
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
 8002a54:	4620      	mov	r0, r4
 8002a56:	f005 f88f 	bl	8007b78 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
 8002a5c:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
 8002a5e:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8002a62:	f7fd fde1 	bl	8000628 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8002a66:	ec41 0b10 	vmov	d0, r0, r1
 8002a6a:	f005 f8bd 	bl	8007be8 <round>
 8002a6e:	ec51 0b10 	vmov	r0, r1, d0
 8002a72:	f7fe f919 	bl	8000ca8 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8002a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a7a:	4282      	cmp	r2, r0
 8002a7c:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8002a80:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8002a82:	da01      	bge.n	8002a88 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
 8002a84:	f7ff fea6 	bl	80027d4 <_Z9AbortImplv>
  if (q_fixed == (1LL << 31)) {
 8002a88:	42a9      	cmp	r1, r5
 8002a8a:	bf08      	it	eq
 8002a8c:	4290      	cmpeq	r0, r2
    ++*shift;
 8002a8e:	bf02      	ittt	eq
 8002a90:	6823      	ldreq	r3, [r4, #0]
 8002a92:	3301      	addeq	r3, #1
 8002a94:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 8002a96:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
 8002a98:	bf08      	it	eq
 8002a9a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
 8002a9e:	321f      	adds	r2, #31
    *shift = 0;
 8002aa0:	bfbc      	itt	lt
 8002aa2:	2300      	movlt	r3, #0
 8002aa4:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8002aa6:	6033      	str	r3, [r6, #0]
 8002aa8:	e7d2      	b.n	8002a50 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
 8002aaa:	bf00      	nop
 8002aac:	41e00000 	.word	0x41e00000

08002ab0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8002ab0:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
 8002ab2:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8002ab4:	d119      	bne.n	8002aea <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3a>
 8002ab6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8002aba:	425c      	negs	r4, r3
 8002abc:	415c      	adcs	r4, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
 8002abe:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x44>)
 8002ac6:	bfa8      	it	ge
 8002ac8:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8002acc:	b97c      	cbnz	r4, 8002aee <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8002ace:	1811      	adds	r1, r2, r0
 8002ad0:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	da04      	bge.n	8002ae2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x32>
 8002ad8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002adc:	18c9      	adds	r1, r1, r3
 8002ade:	f140 0000 	adc.w	r0, r0, #0
 8002ae2:	0fc9      	lsrs	r1, r1, #31
 8002ae4:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
 8002ae8:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8002aea:	2400      	movs	r4, #0
 8002aec:	e7e7      	b.n	8002abe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe>
 8002aee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002af2:	e7f9      	b.n	8002ae8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x38>
 8002af4:	c0000001 	.word	0xc0000001

08002af8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
 8002af8:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8002afa:	b508      	push	{r3, lr}
  assert(exponent >= 0);
 8002afc:	da06      	bge.n	8002b0c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x14>
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x3c>)
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
 8002b02:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
 8002b06:	480d      	ldr	r0, [pc, #52]	; (8002b3c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x44>)
 8002b08:	f005 f8d8 	bl	8007cbc <__assert_func>
 8002b0c:	291f      	cmp	r1, #31
 8002b0e:	dd04      	ble.n	8002b1a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x22>
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x48>)
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
 8002b14:	f240 1167 	movw	r1, #359	; 0x167
 8002b18:	e7f5      	b.n	8002b06 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	408b      	lsls	r3, r1
 8002b1e:	3b01      	subs	r3, #1
  return a & b;
 8002b20:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
 8002b24:	105b      	asrs	r3, r3, #1
  return a + b;
 8002b26:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
 8002b2a:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	bfc8      	it	gt
 8002b30:	3001      	addgt	r0, #1
 8002b32:	bd08      	pop	{r3, pc}
 8002b34:	0800b9d0 	.word	0x0800b9d0
 8002b38:	0800b9de 	.word	0x0800b9de
 8002b3c:	0800ba38 	.word	0x0800ba38
 8002b40:	0800ba7f 	.word	0x0800ba7f

08002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8002b44:	b510      	push	{r4, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
  int right_shift = shift > 0 ? 0 : -shift;
 8002b46:	2a00      	cmp	r2, #0
  int left_shift = shift > 0 ? shift : 0;
 8002b48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
 8002b4c:	bfd4      	ite	le
 8002b4e:	4254      	negle	r4, r2
 8002b50:	2400      	movgt	r4, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8002b52:	4098      	lsls	r0, r3
 8002b54:	f7ff ffac 	bl	8002ab0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8002b58:	4621      	mov	r1, r4
 8002b5a:	f7ff ffcd 	bl	8002af8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8002b5e:	bd10      	pop	{r4, pc}

08002b60 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:
}

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8002b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002b62:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002b66:	4604      	mov	r4, r0
 8002b68:	460e      	mov	r6, r1
 8002b6a:	4615      	mov	r5, r2
 8002b6c:	f005 f882 	bl	8007c74 <roundf>
  const float tmp = TfLiteRound(f / scale);
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8002b70:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002bb4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x54>
 8002b74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7c:	db0f      	blt.n	8002b9e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x3e>
 8002b7e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002bb8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x58>
 8002b82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d808      	bhi.n	8002b9e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x3e>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
 8002b8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  return kTfLiteOk;
 8002b90:	2000      	movs	r0, #0
  q = zero_point + static_cast<int32_t>(tmp);
 8002b92:	ee10 3a10 	vmov	r3, s0
 8002b96:	4433      	add	r3, r6
 8002b98:	602b      	str	r3, [r5, #0]
}
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x5c>)
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	6965      	ldr	r5, [r4, #20]
 8002ba6:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x60>)
 8002ba8:	4906      	ldr	r1, [pc, #24]	; (8002bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>)
 8002baa:	f44f 73ad 	mov.w	r3, #346	; 0x15a
 8002bae:	47a8      	blx	r5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	e7f2      	b.n	8002b9a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x3a>
 8002bb4:	cf000000 	.word	0xcf000000
 8002bb8:	4f000000 	.word	0x4f000000
 8002bbc:	0800bae6 	.word	0x0800bae6
 8002bc0:	0800ba8e 	.word	0x0800ba8e
 8002bc4:	0800bacf 	.word	0x0800bacf

08002bc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
      static_cast<double>(input->params.scale * filter->params.scale);
 8002bc8:	edd1 7a02 	vldr	s15, [r1, #8]
 8002bcc:	ed92 7a02 	vldr	s14, [r2, #8]
 8002bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
 8002bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8002bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
 8002bde:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8002be0:	da0a      	bge.n	8002bf8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	6944      	ldr	r4, [r0, #20]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 8002bea:	490f      	ldr	r1, [pc, #60]	; (8002c28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 8002bec:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 8002bf0:	47a0      	blx	r4
 8002bf2:	2001      	movs	r0, #1
}
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 8002bf8:	ee17 0a90 	vmov	r0, s15
 8002bfc:	f7fd fcbc 	bl	8000578 <__aeabi_f2d>
 8002c00:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8002c02:	68b0      	ldr	r0, [r6, #8]
  const double input_product_scale =
 8002c04:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8002c06:	f7fd fcb7 	bl	8000578 <__aeabi_f2d>
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4629      	mov	r1, r5
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7fd fe33 	bl	800087c <__aeabi_ddiv>
 8002c16:	9b06      	ldr	r3, [sp, #24]
 8002c18:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e7e9      	b.n	8002bf4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 8002c20:	0800bb0c 	.word	0x0800bb0c
 8002c24:	0800ba8e 	.word	0x0800ba8e
 8002c28:	0800bacf 	.word	0x0800bacf
 8002c2c:	00000000 	.word	0x00000000

08002c30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 8002c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8002c36:	6888      	ldr	r0, [r1, #8]
                                              double* multiplier) {
 8002c38:	4615      	mov	r5, r2
 8002c3a:	461e      	mov	r6, r3
 8002c3c:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8002c3e:	f7fd fc9b 	bl	8000578 <__aeabi_f2d>
 8002c42:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
 8002c44:	68a8      	ldr	r0, [r5, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8002c46:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
 8002c48:	f7fd fc96 	bl	8000578 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8002c50:	4640      	mov	r0, r8
 8002c52:	4649      	mov	r1, r9
 8002c54:	f7fd fce8 	bl	8000628 <__aeabi_dmul>
                                              double* multiplier) {
 8002c58:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8002c5c:	4680      	mov	r8, r0
 8002c5e:	4689      	mov	r9, r1
  if (bias) {
 8002c60:	b1d6      	cbz	r6, 8002c98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8002c62:	68b0      	ldr	r0, [r6, #8]
 8002c64:	f7fd fc88 	bl	8000578 <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	f7fd fb22 	bl	80002b8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8002c74:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
 8002c76:	68b8      	ldr	r0, [r7, #8]
 8002c78:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8002c7c:	f7fd fc7c 	bl	8000578 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8002c84:	4640      	mov	r0, r8
 8002c86:	4649      	mov	r1, r9
 8002c88:	f7fd fdf8 	bl	800087c <__aeabi_ddiv>
 8002c8c:	a311      	add	r3, pc, #68	; (adr r3, 8002cd4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd ff45 	bl	8000b20 <__aeabi_dcmple>
 8002c96:	b150      	cbz	r0, 8002cae <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8002c98:	463b      	mov	r3, r7
 8002c9a:	462a      	mov	r2, r5
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 8002ca4:	b003      	add	sp, #12
 8002ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8002caa:	f7ff bf8d 	b.w	8002bc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	6965      	ldr	r5, [r4, #20]
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
 8002cb8:	4905      	ldr	r1, [pc, #20]	; (8002cd0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
 8002cba:	f240 133f 	movw	r3, #319	; 0x13f
 8002cbe:	47a8      	blx	r5
}
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	b003      	add	sp, #12
 8002cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc8:	0800bb25 	.word	0x0800bb25
 8002ccc:	0800ba8e 	.word	0x0800ba8e
 8002cd0:	0800bacf 	.word	0x0800bacf
 8002cd4:	47ae147b 	.word	0x47ae147b
 8002cd8:	3f947ae1 	.word	0x3f947ae1

08002cdc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8002cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce0:	461f      	mov	r7, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 8002ce2:	7f13      	ldrb	r3, [r2, #28]
                                               int32_t* act_max) {
 8002ce4:	b086      	sub	sp, #24
  if (output->type == kTfLiteUInt8) {
 8002ce6:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 8002ce8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cea:	4606      	mov	r6, r0
 8002cec:	468c      	mov	ip, r1
  if (output->type == kTfLiteUInt8) {
 8002cee:	d00f      	beq.n	8002d10 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x34>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	d026      	beq.n	8002d42 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 8002cf4:	2b07      	cmp	r3, #7
 8002cf6:	d028      	beq.n	8002d4a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x6e>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 8002cf8:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	6944      	ldr	r4, [r0, #20]
 8002cfe:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
 8002d00:	4937      	ldr	r1, [pc, #220]	; (8002de0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
 8002d02:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8002d06:	47a0      	blx	r4
 8002d08:	2001      	movs	r0, #1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
 8002d0a:	b006      	add	sp, #24
 8002d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 8002d10:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 8002d12:	f04f 0800 	mov.w	r8, #0
  if (activation == kTfLiteActRelu) {
 8002d16:	f1bc 0f01 	cmp.w	ip, #1
  const auto scale = output->params.scale;
 8002d1a:	ed92 0a02 	vldr	s0, [r2, #8]
  const auto zero_point = output->params.zero_point;
 8002d1e:	68d1      	ldr	r1, [r2, #12]
  if (activation == kTfLiteActRelu) {
 8002d20:	d118      	bne.n	8002d54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x78>
    TF_LITE_ENSURE_OK(context,
 8002d22:	eddf 0a30 	vldr	s1, [pc, #192]	; 8002de4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
 8002d26:	aa05      	add	r2, sp, #20
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f7ff ff19 	bl	8002b60 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	d1eb      	bne.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 8002d32:	9b05      	ldr	r3, [sp, #20]
 8002d34:	4543      	cmp	r3, r8
 8002d36:	bfac      	ite	ge
 8002d38:	603b      	strge	r3, [r7, #0]
 8002d3a:	f8c7 8000 	strlt.w	r8, [r7]
    *act_max = qmax;
 8002d3e:	602c      	str	r4, [r5, #0]
 8002d40:	e7e3      	b.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    qmax = std::numeric_limits<int8_t>::max();
 8002d42:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 8002d44:	f06f 087f 	mvn.w	r8, #127	; 0x7f
 8002d48:	e7e5      	b.n	8002d16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
    qmin = std::numeric_limits<int16_t>::min();
 8002d4a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8002de8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    qmax = std::numeric_limits<int16_t>::max();
 8002d4e:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8002d52:	e7e0      	b.n	8002d16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
  } else if (activation == kTfLiteActRelu6) {
 8002d54:	f1bc 0f03 	cmp.w	ip, #3
 8002d58:	d121      	bne.n	8002d9e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc2>
    TF_LITE_ENSURE_OK(context,
 8002d5a:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002de4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
 8002d5e:	9103      	str	r1, [sp, #12]
 8002d60:	aa05      	add	r2, sp, #20
 8002d62:	4630      	mov	r0, r6
 8002d64:	ed8d 0a02 	vstr	s0, [sp, #8]
 8002d68:	f7ff fefa 	bl	8002b60 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d1cc      	bne.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 8002d70:	9b05      	ldr	r3, [sp, #20]
 8002d72:	4543      	cmp	r3, r8
 8002d74:	bfac      	ite	ge
 8002d76:	603b      	strge	r3, [r7, #0]
 8002d78:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
 8002d7c:	aa05      	add	r2, sp, #20
 8002d7e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
    TF_LITE_ENSURE_OK(context,
 8002d82:	9903      	ldr	r1, [sp, #12]
 8002d84:	ed9d 0a02 	vldr	s0, [sp, #8]
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f7ff fee9 	bl	8002b60 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d1bb      	bne.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_max = std::min(qmax, tmp_q);
 8002d92:	9b05      	ldr	r3, [sp, #20]
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	bfd4      	ite	le
 8002d98:	602b      	strle	r3, [r5, #0]
 8002d9a:	602c      	strgt	r4, [r5, #0]
 8002d9c:	e7b5      	b.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
  } else if (activation == kTfLiteActReluN1To1) {
 8002d9e:	f1bc 0f02 	cmp.w	ip, #2
 8002da2:	d114      	bne.n	8002dce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf2>
    TF_LITE_ENSURE_OK(context,
 8002da4:	aa05      	add	r2, sp, #20
 8002da6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002daa:	4630      	mov	r0, r6
 8002dac:	9103      	str	r1, [sp, #12]
 8002dae:	ed8d 0a02 	vstr	s0, [sp, #8]
 8002db2:	f7ff fed5 	bl	8002b60 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d1a7      	bne.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 8002dba:	9b05      	ldr	r3, [sp, #20]
 8002dbc:	4543      	cmp	r3, r8
 8002dbe:	bfac      	ite	ge
 8002dc0:	603b      	strge	r3, [r7, #0]
 8002dc2:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
 8002dc6:	aa05      	add	r2, sp, #20
 8002dc8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002dcc:	e7d9      	b.n	8002d82 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa6>
    *act_min = qmin;
 8002dce:	f8c7 8000 	str.w	r8, [r7]
  return kTfLiteOk;
 8002dd2:	2000      	movs	r0, #0
    *act_max = qmax;
 8002dd4:	602c      	str	r4, [r5, #0]
                                               output, act_min, act_max);
 8002dd6:	e798      	b.n	8002d0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
 8002dd8:	0800bb47 	.word	0x0800bb47
 8002ddc:	0800ba8e 	.word	0x0800ba8e
 8002de0:	0800bacf 	.word	0x0800bacf
 8002de4:	00000000 	.word	0x00000000
 8002de8:	ffff8000 	.word	0xffff8000

08002dec <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
 8002dec:	6803      	ldr	r3, [r0, #0]
 8002dee:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	2a0a      	cmp	r2, #10
 8002df4:	d905      	bls.n	8002e02 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x16>
 8002df6:	895b      	ldrh	r3, [r3, #10]
    auto p = data_ + field_offset;
 8002df8:	18c2      	adds	r2, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002dfa:	b113      	cbz	r3, 8002e02 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x16>
      scalar_tag;

  static FLATBUFFERS_CONSTEXPR bool is_span_observable =
      scalar_tag::value && (FLATBUFFERS_LITTLEENDIAN || sizeof(T) == 1);

  uoffset_t size() const { return EndianScalar(length_); }
 8002dfc:	58c3      	ldr	r3, [r0, r3]
 8002dfe:	58d0      	ldr	r0, [r2, r3]
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
  if (subgraph->operators() != nullptr) {
    return subgraph->operators()->size();
 8002e00:	4770      	bx	lr
  } else {
    return 0;
 8002e02:	2000      	movs	r0, #0
 8002e04:	4770      	bx	lr
	...

08002e08 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
    return data_ - ReadScalar<soffset_t>(data_);
 8002e08:	6803      	ldr	r3, [r0, #0]
 8002e0a:	1ac3      	subs	r3, r0, r3
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 8002e0c:	b510      	push	{r4, lr}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	2a08      	cmp	r2, #8
 8002e12:	d917      	bls.n	8002e44 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
 8002e14:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
 8002e16:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002e18:	b1a3      	cbz	r3, 8002e44 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
 8002e1a:	58c2      	ldr	r2, [r0, r3]
 8002e1c:	18a3      	adds	r3, r4, r2
  typedef typename IndirectHelper<T>::return_type return_type;
  typedef typename IndirectHelper<T>::mutable_return_type mutable_return_type;
  typedef return_type value_type;

  return_type Get(uoffset_t i) const {
    FLATBUFFERS_ASSERT(i < size());
 8002e1e:	58a2      	ldr	r2, [r4, r2]
 8002e20:	4291      	cmp	r1, r2
 8002e22:	d305      	bcc.n	8002e30 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x28>
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x44>)
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>)
 8002e28:	480a      	ldr	r0, [pc, #40]	; (8002e54 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>)
 8002e2a:	21aa      	movs	r1, #170	; 0xaa
 8002e2c:	f004 ff46 	bl	8007cbc <__assert_func>
    return const_cast<mutable_return_type>(IndirectHelper<T>::Read(Data(), i));
  }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const {
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8002e30:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 8002e32:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8002e36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
}
 8002e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return NumSubgraphOperators(subgraph);
 8002e3e:	4418      	add	r0, r3
 8002e40:	f7ff bfd4 	b.w	8002dec <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  uoffset_t size() const { return EndianScalar(length_); }
 8002e44:	2300      	movs	r3, #0
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	deff      	udf	#255	; 0xff
 8002e4a:	bf00      	nop
 8002e4c:	0800bb4d 	.word	0x0800bb4d
 8002e50:	0800bb58 	.word	0x0800bb58
 8002e54:	0800bc52 	.word	0x0800bc52

08002e58 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>:
  // layout as flatbuffers:Vector<int32_t>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteIntArray*>(
      reinterpret_cast<const TfLiteIntArray*>(flatbuffer_array));
}
 8002e58:	4770      	bx	lr

08002e5a <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE>:
 8002e5a:	4770      	bx	lr

08002e5c <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8002e5c:	1e4b      	subs	r3, r1, #1
 8002e5e:	4418      	add	r0, r3
 8002e60:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8002e64:	4348      	muls	r0, r1
 8002e66:	4770      	bx	lr

08002e68 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8002e68:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8002e6c:	4348      	muls	r0, r1
 8002e6e:	4770      	bx	lr

08002e70 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8002e70:	3801      	subs	r0, #1
 8002e72:	4408      	add	r0, r1
 8002e74:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
 8002e78:	4348      	muls	r0, r1
 8002e7a:	4770      	bx	lr

08002e7c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 8002e7c:	3801      	subs	r0, #1
 8002e7e:	280f      	cmp	r0, #15
 8002e80:	d815      	bhi.n	8002eae <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
 8002e82:	e8df f000 	tbb	[pc, r0]
 8002e86:	0c0c      	.short	0x0c0c
 8002e88:	10140e10 	.word	0x10140e10
 8002e8c:	08100e08 	.word	0x08100e08
 8002e90:	0c0e120e 	.word	0x0c0e120e
 8002e94:	0c14      	.short	0x0c14
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8002e96:	2302      	movs	r3, #2
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
 8002e98:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 8002e9a:	2000      	movs	r0, #0
      break;
 8002e9c:	4770      	bx	lr
      *size = sizeof(float);
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e7fa      	b.n	8002e98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	e7f8      	b.n	8002e98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e7f6      	b.n	8002e98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
 8002eaa:	2310      	movs	r3, #16
 8002eac:	e7f4      	b.n	8002e98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  switch (type) {
 8002eae:	2001      	movs	r0, #1
}
 8002eb0:	4770      	bx	lr

08002eb2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8002eb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002eb6:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8002eb8:	6801      	ldr	r1, [r0, #0]
 8002eba:	1a41      	subs	r1, r0, r1
 8002ebc:	4615      	mov	r5, r2
 8002ebe:	f8b1 c000 	ldrh.w	ip, [r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8002ec2:	f1bc 0f04 	cmp.w	ip, #4
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	d928      	bls.n	8002f1c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6a>
 8002eca:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
 8002ecc:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002ece:	b16b      	cbz	r3, 8002eec <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3a>
 8002ed0:	58c3      	ldr	r3, [r0, r3]
  int element_count = 1;
 8002ed2:	2701      	movs	r7, #1
 8002ed4:	f854 8003 	ldr.w	r8, [r4, r3]
 8002ed8:	441c      	add	r4, r3
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	4543      	cmp	r3, r8
 8002ede:	d006      	beq.n	8002eee <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8002ee0:	f854 ef04 	ldr.w	lr, [r4, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8002ee4:	3301      	adds	r3, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8002ee6:	fb0e f707 	mul.w	r7, lr, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8002eea:	e7f7      	b.n	8002edc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2a>
  int element_count = 1;
 8002eec:	2701      	movs	r7, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8002eee:	f1bc 0f06 	cmp.w	ip, #6
 8002ef2:	d914      	bls.n	8002f1e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
 8002ef4:	88cc      	ldrh	r4, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8002ef6:	b1a4      	cbz	r4, 8002f22 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
 8002ef8:	5700      	ldrsb	r0, [r0, r4]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8002efa:	f10d 0107 	add.w	r1, sp, #7
 8002efe:	f7ff fc7d 	bl	80027fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8002f02:	b940      	cbnz	r0, 8002f16 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8002f04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	f7ff ffb7 	bl	8002e7c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8002f0e:	b910      	cbnz	r0, 8002f16 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
  *bytes = element_count * (*type_size);
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	435f      	muls	r7, r3
 8002f14:	6037      	str	r7, [r6, #0]
  return kTfLiteOk;
}
 8002f16:	b002      	add	sp, #8
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
 8002f1c:	2701      	movs	r7, #1
 8002f1e:	2000      	movs	r0, #0
 8002f20:	e7eb      	b.n	8002efa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x48>
 8002f22:	4620      	mov	r0, r4
 8002f24:	e7e9      	b.n	8002efa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x48>
	...

08002f28 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8002f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	b919      	cbnz	r1, 8002f36 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0xe>
  DebugLog("HALTED\n");
 8002f2e:	480e      	ldr	r0, [pc, #56]	; (8002f68 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x40>)
 8002f30:	f7fe f91c 	bl	800116c <DebugLog>
  while (1) {
 8002f34:	e7fe      	b.n	8002f34 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0xc>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8002f36:	6843      	ldr	r3, [r0, #4]
 8002f38:	b153      	cbz	r3, 8002f50 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8002f3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8002f3e:	2100      	movs	r1, #0
  int element_count = 1;
 8002f40:	2401      	movs	r4, #1
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8002f42:	428e      	cmp	r6, r1
 8002f44:	dd05      	ble.n	8002f52 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x2a>
      element_count *= eval_tensor->dims->data[n];
 8002f46:	f853 5b04 	ldr.w	r5, [r3], #4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8002f4a:	3101      	adds	r1, #1
      element_count *= eval_tensor->dims->data[n];
 8002f4c:	436c      	muls	r4, r5
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8002f4e:	e7f8      	b.n	8002f42 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x1a>
  int element_count = 1;
 8002f50:	2401      	movs	r4, #1
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8002f52:	7a00      	ldrb	r0, [r0, #8]
 8002f54:	a901      	add	r1, sp, #4
 8002f56:	f7ff ff91 	bl	8002e7c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8002f5a:	b910      	cbnz	r0, 8002f62 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	4363      	muls	r3, r4
 8002f60:	6013      	str	r3, [r2, #0]
  return kTfLiteOk;
}
 8002f62:	b002      	add	sp, #8
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	bf00      	nop
 8002f68:	0800ac80 	.word	0x0800ac80

08002f6c <_ZNK6tflite8SubGraph7tensorsEv>:
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8002f6c:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 8002f6e:	2104      	movs	r1, #4
 8002f70:	4604      	mov	r4, r0
 8002f72:	f7ff fc1c 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002f76:	b110      	cbz	r0, 8002f7e <_ZNK6tflite8SubGraph7tensorsEv+0x12>
    auto p = data_ + field_offset;
 8002f78:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002f7a:	5820      	ldr	r0, [r4, r0]
 8002f7c:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
  }
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8002f80:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 8002f82:	2108      	movs	r1, #8
 8002f84:	4604      	mov	r4, r0
 8002f86:	f7ff fc12 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002f8a:	b110      	cbz	r0, 8002f92 <_ZNK6tflite5Model9subgraphsEv+0x12>
    auto p = data_ + field_offset;
 8002f8c:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002f8e:	5820      	ldr	r0, [r4, r0]
 8002f90:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
  }
 8002f92:	bd10      	pop	{r4, pc}

08002f94 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>:

// Mark the given Allocation info as first created at the specified allocation
// scope count. Only the first creation must be recorded since the allocation
// scope count monotonically increases throughout the lifetime marking process.
void AllocationInfoBuilder::UpdateFirstCreated(AllocationInfo* current,
                                               int allocation_scope_count) {
 8002f94:	b508      	push	{r3, lr}
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 8002f96:	688b      	ldr	r3, [r1, #8]
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	dd01      	ble.n	8002fa0 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0xc>
 8002f9c:	f7ff fc1a 	bl	80027d4 <_Z9AbortImplv>
  if (current->first_created == kUninitializedLifetime) {
 8002fa0:	3301      	adds	r3, #1
    current->first_created = allocation_scope_count;
 8002fa2:	bf08      	it	eq
 8002fa4:	608a      	streq	r2, [r1, #8]
  }
}
 8002fa6:	bd08      	pop	{r3, pc}

08002fa8 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>:
    return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus AllocationInfoBuilder::FreeAllocationInfo() {
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
  non_persistent_allocator_->DeallocateTemp(
 8002fac:	6840      	ldr	r0, [r0, #4]
 8002fae:	68e1      	ldr	r1, [r4, #12]
      reinterpret_cast<uint8_t*>(info_.allocation_info));
 8002fb0:	6803      	ldr	r3, [r0, #0]
  non_persistent_allocator_->DeallocateTemp(
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4798      	blx	r3
  non_persistent_allocator_->DeallocateTemp(
 8002fb6:	6860      	ldr	r0, [r4, #4]
 8002fb8:	6961      	ldr	r1, [r4, #20]
      reinterpret_cast<uint8_t*>(info_.subgraph_offsets));
 8002fba:	6803      	ldr	r3, [r0, #0]
  non_persistent_allocator_->DeallocateTemp(
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4798      	blx	r3
  return kTfLiteOk;
}
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	bd10      	pop	{r4, pc}

08002fc4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>:
}

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const int32_t** offline_planner_offsets) {
 8002fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8002fc8:	6804      	ldr	r4, [r0, #0]
 8002fca:	4606      	mov	r6, r0
 8002fcc:	460f      	mov	r7, r1
    auto field_offset = GetOptionalFieldOffset(field);
 8002fce:	4620      	mov	r0, r4
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	f7ff fbec 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d06c      	beq.n	80030b4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf0>
  if (model_->metadata()) {
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
      auto metadata = model_->metadata()->Get(i);
      const size_t metadata_name_size = (size_t)metadata->name()->size();

      if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8002fda:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80030d0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10c>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 8002fde:	2500      	movs	r5, #0
    auto field_offset = GetOptionalFieldOffset(field);
 8002fe0:	2110      	movs	r1, #16
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7ff fbe3 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d065      	beq.n	80030b8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf4>
 8002fec:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
 8002fee:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8002ff0:	188b      	adds	r3, r1, r2
 8002ff2:	588a      	ldr	r2, [r1, r2]
 8002ff4:	4295      	cmp	r5, r2
 8002ff6:	d25d      	bcs.n	80030b4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8002ff8:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 8002ffa:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8002ffe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003002:	4499      	add	r9, r3
    auto field_offset = GetOptionalFieldOffset(field);
 8003004:	2104      	movs	r1, #4
 8003006:	4648      	mov	r0, r9
 8003008:	f7ff fbd1 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800300c:	eb09 0200 	add.w	r2, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003010:	2800      	cmp	r0, #0
 8003012:	d051      	beq.n	80030b8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf4>
 8003014:	f859 3000 	ldr.w	r3, [r9, r0]
  uoffset_t size() const { return EndianScalar(length_); }
 8003018:	f852 a003 	ldr.w	sl, [r2, r3]
 800301c:	18d0      	adds	r0, r2, r3
      if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800301e:	4652      	mov	r2, sl
 8003020:	2a17      	cmp	r2, #23
 8003022:	bf28      	it	cs
 8003024:	2217      	movcs	r2, #23
 8003026:	4641      	mov	r1, r8
 8003028:	3004      	adds	r0, #4
 800302a:	f005 fcbb 	bl	80089a4 <strncmp>
                   std::min(metadata_name_size,
                            strlen(kOfflineMemAllocMetadata))) == 0) &&
 800302e:	2800      	cmp	r0, #0
 8003030:	d13e      	bne.n	80030b0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xec>
 8003032:	f1ba 0f17 	cmp.w	sl, #23
 8003036:	d13b      	bne.n	80030b0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xec>
    auto field_offset = GetOptionalFieldOffset(field);
 8003038:	210c      	movs	r1, #12
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff fbb7 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003040:	b1a8      	cbz	r0, 800306e <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xaa>
    auto p = data_ + field_offset;
 8003042:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003044:	5820      	ldr	r0, [r4, r0]
 8003046:	eb02 0a00 	add.w	sl, r2, r0
    auto field_offset = GetOptionalFieldOffset(field);
 800304a:	2106      	movs	r1, #6
 800304c:	4648      	mov	r0, r9
 800304e:	f7ff fbae 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003052:	4603      	mov	r3, r0
 8003054:	b108      	cbz	r0, 800305a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x96>
 8003056:	f859 3000 	ldr.w	r3, [r9, r0]
    FLATBUFFERS_ASSERT(i < size());
 800305a:	f8da 2000 	ldr.w	r2, [sl]
 800305e:	429a      	cmp	r2, r3
 8003060:	d807      	bhi.n	8003072 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xae>
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xfc>)
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x100>)
 8003066:	4818      	ldr	r0, [pc, #96]	; (80030c8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x104>)
 8003068:	21aa      	movs	r1, #170	; 0xaa
 800306a:	f004 fe27 	bl	8007cbc <__assert_func>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800306e:	4682      	mov	sl, r0
 8003070:	e7eb      	b.n	800304a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x86>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003072:	f10a 0204 	add.w	r2, sl, #4
    p += i * sizeof(uoffset_t);
 8003076:	eb02 0983 	add.w	r9, r2, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	4499      	add	r9, r3
    auto field_offset = GetOptionalFieldOffset(field);
 8003080:	2104      	movs	r1, #4
 8003082:	4648      	mov	r0, r9
 8003084:	f7ff fb93 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003088:	b1c0      	cbz	r0, 80030bc <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf8>
 800308a:	f859 2000 	ldr.w	r2, [r9, r0]
    auto p = data_ + field_offset;
 800308e:	eb09 0300 	add.w	r3, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003092:	4413      	add	r3, r2
        auto* array = buffer->data();
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8003094:	3310      	adds	r3, #16
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8003096:	f853 2c04 	ldr.w	r2, [r3, #-4]
        *offline_planner_offsets =
 800309a:	603b      	str	r3, [r7, #0]

        if (info_.tensor_count != nbr_tensors) {
 800309c:	69f3      	ldr	r3, [r6, #28]
 800309e:	4293      	cmp	r3, r2
 80030a0:	d006      	beq.n	80030b0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xec>
          TF_LITE_REPORT_ERROR(reporter_,
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x108>)
 80030a4:	68b0      	ldr	r0, [r6, #8]
 80030a6:	f7ff fb63 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, info_.tensor_count);
          return kTfLiteError;
 80030aa:	2001      	movs	r0, #1
        }
      }
    }
  }
  return kTfLiteOk;
}
 80030ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 80030b0:	3501      	adds	r5, #1
 80030b2:	e795      	b.n	8002fe0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x1c>
  return kTfLiteOk;
 80030b4:	2000      	movs	r0, #0
 80030b6:	e7f9      	b.n	80030ac <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe8>
  uoffset_t size() const { return EndianScalar(length_); }
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	deff      	udf	#255	; 0xff
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 80030bc:	68c3      	ldr	r3, [r0, #12]
 80030be:	e7fc      	b.n	80030ba <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf6>
 80030c0:	0800bb4d 	.word	0x0800bb4d
 80030c4:	0800bca1 	.word	0x0800bca1
 80030c8:	0800bc52 	.word	0x0800bc52
 80030cc:	0800bd97 	.word	0x0800bd97
 80030d0:	0800c21f 	.word	0x0800c21f

080030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80030d4:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 80030d6:	6803      	ldr	r3, [r0, #0]
 80030d8:	4299      	cmp	r1, r3
 80030da:	d305      	bcc.n	80030e8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x14>
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x1c>)
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x20>)
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x24>)
 80030e2:	21aa      	movs	r1, #170	; 0xaa
 80030e4:	f004 fdea 	bl	8007cbc <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80030e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 80030ec:	6840      	ldr	r0, [r0, #4]
 80030ee:	bd08      	pop	{r3, pc}
 80030f0:	0800bb4d 	.word	0x0800bb4d
 80030f4:	0800bde2 	.word	0x0800bde2
 80030f8:	0800bc52 	.word	0x0800bc52

080030fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80030fc:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	4299      	cmp	r1, r3
 8003102:	d305      	bcc.n	8003110 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x14>
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x24>)
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x28>)
 8003108:	4807      	ldr	r0, [pc, #28]	; (8003128 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x2c>)
 800310a:	21aa      	movs	r1, #170	; 0xaa
 800310c:	f004 fdd6 	bl	8007cbc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003110:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 8003112:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8003116:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 800311a:	4410      	add	r0, r2
 800311c:	bd08      	pop	{r3, pc}
 800311e:	bf00      	nop
 8003120:	0800bb4d 	.word	0x0800bb4d
 8003124:	0800beb0 	.word	0x0800beb0
 8003128:	0800bc52 	.word	0x0800bc52

0800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800312c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	4299      	cmp	r1, r3
 8003132:	d305      	bcc.n	8003140 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x14>
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x24>)
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x28>)
 8003138:	4807      	ldr	r0, [pc, #28]	; (8003158 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x2c>)
 800313a:	21aa      	movs	r1, #170	; 0xaa
 800313c:	f004 fdbe 	bl	8007cbc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003140:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 8003142:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8003146:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 800314a:	4410      	add	r0, r2
 800314c:	bd08      	pop	{r3, pc}
 800314e:	bf00      	nop
 8003150:	0800bb4d 	.word	0x0800bb4d
 8003154:	0800bb58 	.word	0x0800bb58
 8003158:	0800bc52 	.word	0x0800bc52

0800315c <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>:
    int scratch_buffer_request_count) {
 800315c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003160:	4604      	mov	r4, r0
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8003162:	6800      	ldr	r0, [r0, #0]
    int scratch_buffer_request_count) {
 8003164:	4688      	mov	r8, r1
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8003166:	f7ff ff0b 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 800316a:	6805      	ldr	r5, [r0, #0]
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 800316c:	6860      	ldr	r0, [r4, #4]
          subgraph_offsets_length, alignof(size_t)));
 800316e:	6803      	ldr	r3, [r0, #0]
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8003170:	00ad      	lsls	r5, r5, #2
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2204      	movs	r2, #4
 8003176:	4629      	mov	r1, r5
 8003178:	4798      	blx	r3
 800317a:	4607      	mov	r7, r0
  info_.subgraph_offsets =
 800317c:	6160      	str	r0, [r4, #20]
  if (info_.subgraph_offsets == nullptr) {
 800317e:	b338      	cbz	r0, 80031d0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x74>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8003180:	2600      	movs	r6, #0
 8003182:	f8d4 9000 	ldr.w	r9, [r4]
  size_t tensor_count = 0;
 8003186:	4635      	mov	r5, r6
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8003188:	4648      	mov	r0, r9
 800318a:	f7ff fef9 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 800318e:	6803      	ldr	r3, [r0, #0]
 8003190:	429e      	cmp	r6, r3
 8003192:	d20d      	bcs.n	80031b0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x54>
    info_.subgraph_offsets[subgraph_idx] = tensor_count;
 8003194:	f847 5026 	str.w	r5, [r7, r6, lsl #2]
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 8003198:	4648      	mov	r0, r9
 800319a:	f7ff fef1 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 800319e:	4631      	mov	r1, r6
 80031a0:	f7ff ffc4 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80031a4:	f7ff fee2 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
 80031a8:	6803      	ldr	r3, [r0, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 80031aa:	3601      	adds	r6, #1
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 80031ac:	441d      	add	r5, r3
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 80031ae:	e7eb      	b.n	8003188 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x2c>
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80031b0:	6860      	ldr	r0, [r4, #4]
  info_.scratch_buffer_count = scratch_buffer_request_count;
 80031b2:	f8c4 8020 	str.w	r8, [r4, #32]
  info_.scratch_offset = tensor_count;
 80031b6:	e9c4 5506 	strd	r5, r5, [r4, #24]
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80031ba:	6803      	ldr	r3, [r0, #0]
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 80031bc:	4445      	add	r5, r8
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 80031be:	2118      	movs	r1, #24
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 80031c0:	6125      	str	r5, [r4, #16]
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 80031c2:	434d      	muls	r5, r1
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4629      	mov	r1, r5
 80031ca:	4798      	blx	r3
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
 80031cc:	60e0      	str	r0, [r4, #12]
  if (info_.allocation_info == nullptr) {
 80031ce:	b938      	cbnz	r0, 80031e0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x84>
    TF_LITE_REPORT_ERROR(
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x88>)
 80031d2:	68a0      	ldr	r0, [r4, #8]
 80031d4:	462a      	mov	r2, r5
 80031d6:	f7ff facb 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80031da:	2001      	movs	r0, #1
}
 80031dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
 80031e0:	2000      	movs	r0, #0
 80031e2:	e7fb      	b.n	80031dc <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x80>
 80031e4:	0800bfaa 	.word	0x0800bfaa

080031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 80031ec:	f7ff fadf 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80031f0:	b110      	cbz	r0, 80031f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x10>
    auto p = data_ + field_offset;
 80031f2:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80031f4:	5820      	ldr	r0, [r4, r0]
 80031f6:	4418      	add	r0, r3
                        : nullptr;
  }
 80031f8:	bd10      	pop	{r4, pc}
	...

080031fc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 80031fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8003200:	4608      	mov	r0, r1
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 8003202:	460c      	mov	r4, r1
 8003204:	4617      	mov	r7, r2
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8003206:	f7ff fdf1 	bl	8002dec <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  for (uint32_t i = 0; i < operators_size; i++) {
 800320a:	2500      	movs	r5, #0
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 800320c:	4606      	mov	r6, r0
      size_t tensor_size = -1;
 800320e:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t i = 0; i < operators_size; i++) {
 8003212:	42b5      	cmp	r5, r6
 8003214:	d030      	beq.n	8003278 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x7c>
    auto field_offset = GetOptionalFieldOffset(field);
 8003216:	210a      	movs	r1, #10
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff fac8 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800321e:	b110      	cbz	r0, 8003226 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a>
    auto p = data_ + field_offset;
 8003220:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003222:	5820      	ldr	r0, [r4, r0]
 8003224:	4410      	add	r0, r2
    const auto op = subgraph->operators()->Get(i);
 8003226:	4629      	mov	r1, r5
 8003228:	f7ff ff68 	bl	80030fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
    for (size_t n = 0;
 800322c:	f04f 0a00 	mov.w	sl, #0
    const auto op = subgraph->operators()->Get(i);
 8003230:	4681      	mov	r9, r0
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003232:	2114      	movs	r1, #20
 8003234:	4648      	mov	r0, r9
 8003236:	f7ff ffd7 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
         op->intermediates() != nullptr && n < op->intermediates()->size();
 800323a:	b188      	cbz	r0, 8003260 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
 800323c:	6803      	ldr	r3, [r0, #0]
 800323e:	459a      	cmp	sl, r3
 8003240:	d20e      	bcs.n	8003260 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
      const int tensor_index = op->intermediates()->Get(n);
 8003242:	4651      	mov	r1, sl
 8003244:	f7ff ff46 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8003248:	230c      	movs	r3, #12
 800324a:	a901      	add	r1, sp, #4
 800324c:	fb03 7000 	mla	r0, r3, r0, r7
      size_t tensor_size = -1;
 8003250:	f8cd 8004 	str.w	r8, [sp, #4]
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8003254:	f7ff fe68 	bl	8002f28 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8003258:	b120      	cbz	r0, 8003264 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x68>
}
 800325a:	b002      	add	sp, #8
 800325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (uint32_t i = 0; i < operators_size; i++) {
 8003260:	3501      	adds	r5, #1
 8003262:	e7d6      	b.n	8003212 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x16>
      if (tensor_size != 0) {
 8003264:	9901      	ldr	r1, [sp, #4]
 8003266:	b121      	cbz	r1, 8003272 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x76>
        MicroPrintf(
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x80>)
 800326a:	f000 fffe 	bl	800426a <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800326e:	2001      	movs	r0, #1
 8003270:	e7f3      	b.n	800325a <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    for (size_t n = 0;
 8003272:	f10a 0a01 	add.w	sl, sl, #1
 8003276:	e7dc      	b.n	8003232 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
  return kTfLiteOk;
 8003278:	2000      	movs	r0, #0
 800327a:	e7ee      	b.n	800325a <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
 800327c:	0800bfeb 	.word	0x0800bfeb

08003280 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>:
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	b085      	sub	sp, #20
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8003286:	1d13      	adds	r3, r2, #4
  AllocationInfo* allocation_info = info_.allocation_info;
 8003288:	f8d0 b00c 	ldr.w	fp, [r0, #12]
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 800328c:	9101      	str	r1, [sp, #4]
 800328e:	4605      	mov	r5, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8003290:	f04f 0800 	mov.w	r8, #0
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8003294:	9302      	str	r3, [sp, #8]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8003296:	6828      	ldr	r0, [r5, #0]
 8003298:	f7ff fe72 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 800329c:	6803      	ldr	r3, [r0, #0]
 800329e:	4598      	cmp	r8, r3
 80032a0:	d259      	bcs.n	8003356 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd6>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80032a2:	4641      	mov	r1, r8
 80032a4:	f7ff ff42 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 80032a8:	9b02      	ldr	r3, [sp, #8]
 80032aa:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80032ae:	696b      	ldr	r3, [r5, #20]
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80032b0:	4681      	mov	r9, r0
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 80032b2:	4601      	mov	r1, r0
 80032b4:	4632      	mov	r2, r6
 80032b6:	4628      	mov	r0, r5
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80032b8:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 80032bc:	f7ff ff9e 	bl	80031fc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d15e      	bne.n	8003382 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x102>
 80032c4:	2318      	movs	r3, #24
 80032c6:	fb03 b404 	mla	r4, r3, r4, fp
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80032ca:	4682      	mov	sl, r0
 80032cc:	4648      	mov	r0, r9
 80032ce:	f7ff fe4d 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
 80032d2:	6802      	ldr	r2, [r0, #0]
 80032d4:	4592      	cmp	sl, r2
 80032d6:	d23b      	bcs.n	8003350 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd0>
      current->output_ptr = &(eval_tensors[i].data.data);
 80032d8:	6066      	str	r6, [r4, #4]
      TF_LITE_ENSURE_STATUS(
 80032da:	4621      	mov	r1, r4
 80032dc:	4630      	mov	r0, r6
 80032de:	f7ff fe23 	bl	8002f28 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d14d      	bne.n	8003382 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x102>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80032e6:	6837      	ldr	r7, [r6, #0]
      current->first_created = kUninitializedLifetime;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
      current->last_used = kUninitializedLifetime;
 80032ec:	e9c4 3302 	strd	r3, r3, [r4, #8]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80032f0:	b9f7      	cbnz	r7, 8003330 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xb0>
 80032f2:	4648      	mov	r0, r9
 80032f4:	f7ff fe3a 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
    FLATBUFFERS_ASSERT(i < size());
 80032f8:	6802      	ldr	r2, [r0, #0]
 80032fa:	4592      	cmp	sl, r2
 80032fc:	d305      	bcc.n	800330a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x8a>
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x108>)
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x10c>)
 8003302:	4823      	ldr	r0, [pc, #140]	; (8003390 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x110>)
 8003304:	21aa      	movs	r1, #170	; 0xaa
 8003306:	f004 fcd9 	bl	8007cbc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800330a:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 800330c:	eb00 018a 	add.w	r1, r0, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8003310:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
 8003314:	440a      	add	r2, r1
    auto field_offset = GetOptionalFieldOffset(field);
 8003316:	4610      	mov	r0, r2
 8003318:	210e      	movs	r1, #14
 800331a:	9203      	str	r2, [sp, #12]
 800331c:	f7ff fa47 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003320:	b110      	cbz	r0, 8003328 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xa8>
          (eval_tensors[i].data.data == nullptr) &&
 8003322:	9a03      	ldr	r2, [sp, #12]
 8003324:	5c12      	ldrb	r2, [r2, r0]
 8003326:	b972      	cbnz	r2, 8003346 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xc6>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	3800      	subs	r0, #0
 800332c:	bf18      	it	ne
 800332e:	2001      	movne	r0, #1
      if (offline_offsets) {
 8003330:	9b01      	ldr	r3, [sp, #4]
      current->needs_allocating =
 8003332:	7520      	strb	r0, [r4, #20]
      if (offline_offsets) {
 8003334:	b14b      	cbz	r3, 800334a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xca>
        current->offline_offset = offline_offsets[i];
 8003336:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
 800333a:	6122      	str	r2, [r4, #16]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800333c:	f10a 0a01 	add.w	sl, sl, #1
 8003340:	3418      	adds	r4, #24
 8003342:	360c      	adds	r6, #12
 8003344:	e7c2      	b.n	80032cc <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x4c>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8003346:	4638      	mov	r0, r7
 8003348:	e7f2      	b.n	8003330 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xb0>
        current->offline_offset = kOnlinePlannedBuffer;
 800334a:	f04f 32ff 	mov.w	r2, #4294967295
 800334e:	e7f4      	b.n	800333a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xba>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8003350:	f108 0801 	add.w	r8, r8, #1
 8003354:	e79f      	b.n	8003296 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x16>
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8003356:	69ab      	ldr	r3, [r5, #24]
 8003358:	6a2c      	ldr	r4, [r5, #32]
 800335a:	2218      	movs	r2, #24
 800335c:	fb02 b303 	mla	r3, r2, r3, fp
    current->first_created = kUninitializedLifetime;
 8003360:	f04f 31ff 	mov.w	r1, #4294967295
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8003364:	2200      	movs	r2, #0
    current->needs_allocating = true;
 8003366:	2001      	movs	r0, #1
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8003368:	4294      	cmp	r4, r2
 800336a:	f103 0318 	add.w	r3, r3, #24
 800336e:	d007      	beq.n	8003380 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x100>
    current->last_used = kUninitializedLifetime;
 8003370:	e943 1104 	strd	r1, r1, [r3, #-16]
    current->needs_allocating = true;
 8003374:	f803 0c04 	strb.w	r0, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
 8003378:	f843 1c08 	str.w	r1, [r3, #-8]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 800337c:	3201      	adds	r2, #1
 800337e:	e7f3      	b.n	8003368 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xe8>
  return kTfLiteOk;
 8003380:	2000      	movs	r0, #0
}
 8003382:	b005      	add	sp, #20
 8003384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003388:	0800bb4d 	.word	0x0800bb4d
 800338c:	0800c027 	.word	0x0800c027
 8003390:	0800bc52 	.word	0x0800bc52

08003394 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	ed2d 8b02 	vpush	{d8}
 800339c:	4604      	mov	r4, r0
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	4689      	mov	r9, r1
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80033a2:	6800      	ldr	r0, [r0, #0]
    SubgraphAllocations* allocations) {
 80033a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80033a8:	f7ff fdea 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 80033ac:	4649      	mov	r1, r9
 80033ae:	f7ff febd 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  AllocationInfo* allocation_info = info_.allocation_info;
 80033b2:	68e3      	ldr	r3, [r4, #12]
 80033b4:	9302      	str	r3, [sp, #8]
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80033b6:	6963      	ldr	r3, [r4, #20]
 80033b8:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
  AllocationInfo* subgraph_allocation_info =
 80033bc:	9b02      	ldr	r3, [sp, #8]
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80033be:	f04f 0818 	mov.w	r8, #24
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80033c2:	4606      	mov	r6, r0
  AllocationInfo* subgraph_allocation_info =
 80033c4:	fb08 3707 	mla	r7, r8, r7, r3
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80033c8:	f7ff fd10 	bl	8002dec <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  for (size_t i = 0;
 80033cc:	f04f 0b00 	mov.w	fp, #0
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80033d0:	9005      	str	r0, [sp, #20]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80033d2:	2106      	movs	r1, #6
 80033d4:	4630      	mov	r0, r6
 80033d6:	f7ff ff07 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 80033da:	4605      	mov	r5, r0
 80033dc:	b178      	cbz	r0, 80033fe <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6a>
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	459b      	cmp	fp, r3
 80033e2:	d20b      	bcs.n	80033fc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x68>
    const int tensor_index = subgraph->inputs()->Get(i);
 80033e4:	4659      	mov	r1, fp
 80033e6:	f7ff fe75 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
    UpdateFirstCreated(current, allocation_scope_count_);
 80033ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033ec:	fb08 7100 	mla	r1, r8, r0, r7
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7ff fdcf 	bl	8002f94 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
  for (size_t i = 0;
 80033f6:	f10b 0b01 	add.w	fp, fp, #1
 80033fa:	e7ea      	b.n	80033d2 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x3e>
 80033fc:	2500      	movs	r5, #0
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80033fe:	f04f 0b18 	mov.w	fp, #24
  for (uint32_t i = 0; i < operators_size; i++) {
 8003402:	9b05      	ldr	r3, [sp, #20]
 8003404:	429d      	cmp	r5, r3
 8003406:	f000 8093 	beq.w	8003530 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x19c>
    allocation_scope_count_++;
 800340a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800340c:	3301      	adds	r3, #1
 800340e:	6263      	str	r3, [r4, #36]	; 0x24
    auto field_offset = GetOptionalFieldOffset(field);
 8003410:	210a      	movs	r1, #10
 8003412:	4630      	mov	r0, r6
 8003414:	f7ff f9cb 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003418:	b110      	cbz	r0, 8003420 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x8c>
    auto p = data_ + field_offset;
 800341a:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800341c:	5830      	ldr	r0, [r6, r0]
 800341e:	4418      	add	r0, r3
    const auto* op = subgraph->operators()->Get(i);
 8003420:	4629      	mov	r1, r5
 8003422:	f7ff fe6b 	bl	80030fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8003426:	f04f 0a00 	mov.w	sl, #0
    const auto* op = subgraph->operators()->Get(i);
 800342a:	4680      	mov	r8, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800342c:	2108      	movs	r1, #8
 800342e:	4640      	mov	r0, r8
 8003430:	f7ff feda 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8003434:	bb10      	cbnz	r0, 800347c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe8>
    int start_allocation_scope_count = allocation_scope_count_;
 8003436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003438:	ee08 3a10 	vmov	s16, r3
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 800343c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	4641      	mov	r1, r8
 8003442:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8003446:	4620      	mov	r0, r4
 8003448:	f000 f890 	bl	800356c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 800344c:	f04f 0a00 	mov.w	sl, #0
 8003450:	2106      	movs	r1, #6
 8003452:	4640      	mov	r0, r8
 8003454:	f7ff fec8 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003458:	4603      	mov	r3, r0
 800345a:	b318      	cbz	r0, 80034a4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x110>
 800345c:	6803      	ldr	r3, [r0, #0]
 800345e:	459a      	cmp	sl, r3
 8003460:	d21f      	bcs.n	80034a2 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10e>
      const int tensor_index = op->inputs()->Get(n);
 8003462:	4651      	mov	r1, sl
 8003464:	f7ff fe36 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
      if (tensor_index >= 0) {
 8003468:	2800      	cmp	r0, #0
 800346a:	db17      	blt.n	800349c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x108>
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800346c:	fb0b 7000 	mla	r0, fp, r0, r7
        UpdateLastUsed(current, allocation_scope_count_);
 8003470:	6a63      	ldr	r3, [r4, #36]	; 0x24
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8003472:	68c1      	ldr	r1, [r0, #12]
 8003474:	428b      	cmp	r3, r1
 8003476:	da10      	bge.n	800349a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x106>
 8003478:	f7ff f9ac 	bl	80027d4 <_Z9AbortImplv>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 800347c:	6802      	ldr	r2, [r0, #0]
 800347e:	4592      	cmp	sl, r2
 8003480:	d2d9      	bcs.n	8003436 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa2>
      const int tensor_index = op->outputs()->Get(n);
 8003482:	4651      	mov	r1, sl
 8003484:	f7ff fe26 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
      UpdateFirstCreated(current, allocation_scope_count_);
 8003488:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800348a:	fb0b 7100 	mla	r1, fp, r0, r7
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff fd80 	bl	8002f94 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8003494:	f10a 0a01 	add.w	sl, sl, #1
 8003498:	e7c8      	b.n	800342c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x98>
  current->last_used = allocation_scope_count;
 800349a:	60c3      	str	r3, [r0, #12]
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 800349c:	f10a 0a01 	add.w	sl, sl, #1
 80034a0:	e7d6      	b.n	8003450 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xbc>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2108      	movs	r1, #8
 80034a6:	4640      	mov	r0, r8
 80034a8:	9306      	str	r3, [sp, #24]
 80034aa:	f7ff fe9d 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80034ae:	b118      	cbz	r0, 80034b8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x124>
 80034b0:	6802      	ldr	r2, [r0, #0]
 80034b2:	9b06      	ldr	r3, [sp, #24]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d32b      	bcc.n	8003510 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x17c>
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 80034b8:	9b02      	ldr	r3, [sp, #8]
 80034ba:	69a1      	ldr	r1, [r4, #24]
 80034bc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80034c0:	fb0b 3101 	mla	r1, fp, r1, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	6a22      	ldr	r2, [r4, #32]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d92f      	bls.n	800352c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x198>
      if (request.node_idx == static_cast<int>(i) &&
 80034cc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80034d0:	42aa      	cmp	r2, r5
 80034d2:	d118      	bne.n	8003506 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x172>
 80034d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80034d8:	4591      	cmp	r9, r2
 80034da:	d114      	bne.n	8003506 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x172>
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 80034dc:	9804      	ldr	r0, [sp, #16]
      internal::ScratchBufferRequest request =
 80034de:	f8d8 2000 	ldr.w	r2, [r8]
        UpdateFirstCreated(current, start_allocation_scope_count);
 80034e2:	9106      	str	r1, [sp, #24]
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 80034e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        current->bytes = request.bytes;
 80034e8:	e9c1 2000 	strd	r2, r0, [r1]
        UpdateFirstCreated(current, start_allocation_scope_count);
 80034ec:	ee18 2a10 	vmov	r2, s16
 80034f0:	4620      	mov	r0, r4
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 80034f2:	9307      	str	r3, [sp, #28]
        UpdateFirstCreated(current, start_allocation_scope_count);
 80034f4:	f7ff fd4e 	bl	8002f94 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 80034f8:	9906      	ldr	r1, [sp, #24]
        UpdateLastUsed(current, allocation_scope_count_);
 80034fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 80034fc:	68c8      	ldr	r0, [r1, #12]
 80034fe:	4282      	cmp	r2, r0
 8003500:	dbba      	blt.n	8003478 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe4>
  current->last_used = allocation_scope_count;
 8003502:	9b07      	ldr	r3, [sp, #28]
 8003504:	60ca      	str	r2, [r1, #12]
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 8003506:	3301      	adds	r3, #1
 8003508:	3118      	adds	r1, #24
 800350a:	f108 080c 	add.w	r8, r8, #12
 800350e:	e7da      	b.n	80034c6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x132>
      const int tensor_index = op->outputs()->Get(n);
 8003510:	4619      	mov	r1, r3
 8003512:	9306      	str	r3, [sp, #24]
 8003514:	f7ff fdde 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8003518:	fb0b 7000 	mla	r0, fp, r0, r7
      UpdateLastUsed(current, allocation_scope_count_);
 800351c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 800351e:	68c1      	ldr	r1, [r0, #12]
 8003520:	428a      	cmp	r2, r1
 8003522:	dba9      	blt.n	8003478 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe4>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8003524:	9b06      	ldr	r3, [sp, #24]
  current->last_used = allocation_scope_count;
 8003526:	60c2      	str	r2, [r0, #12]
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8003528:	3301      	adds	r3, #1
 800352a:	e7bb      	b.n	80034a4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x110>
  for (uint32_t i = 0; i < operators_size; i++) {
 800352c:	3501      	adds	r5, #1
 800352e:	e768      	b.n	8003402 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6e>
  for (size_t i = 0;
 8003530:	2500      	movs	r5, #0
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8003532:	f04f 0818 	mov.w	r8, #24
 8003536:	2108      	movs	r1, #8
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff fe55 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 800353e:	b170      	cbz	r0, 800355e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ca>
 8003540:	6803      	ldr	r3, [r0, #0]
 8003542:	429d      	cmp	r5, r3
 8003544:	d20b      	bcs.n	800355e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ca>
    const int tensor_index = subgraph->outputs()->Get(i);
 8003546:	4629      	mov	r1, r5
 8003548:	f7ff fdc4 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800354c:	fb08 7000 	mla	r0, r8, r0, r7
    UpdateLastUsed(current, allocation_scope_count_);
 8003550:	6a63      	ldr	r3, [r4, #36]	; 0x24
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8003552:	68c2      	ldr	r2, [r0, #12]
 8003554:	4293      	cmp	r3, r2
 8003556:	db8f      	blt.n	8003478 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe4>
  current->last_used = allocation_scope_count;
 8003558:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0;
 800355a:	3501      	adds	r5, #1
 800355c:	e7eb      	b.n	8003536 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1a2>
}
 800355e:	2000      	movs	r0, #0
 8003560:	b009      	add	sp, #36	; 0x24
 8003562:	ecbd 8b02 	vpop	{d8}
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800356c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 800356c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8003570:	f8d0 a000 	ldr.w	sl, [r0]
 8003574:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8003578:	4606      	mov	r6, r0
 800357a:	460d      	mov	r5, r1
    auto field_offset = GetOptionalFieldOffset(field);
 800357c:	4650      	mov	r0, sl
 800357e:	2106      	movs	r1, #6
 8003580:	4617      	mov	r7, r2
 8003582:	4698      	mov	r8, r3
 8003584:	f7ff f913 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003588:	4604      	mov	r4, r0
 800358a:	b118      	cbz	r0, 8003594 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x28>
 800358c:	f85a 4004 	ldr.w	r4, [sl, r4]
    auto p = data_ + field_offset;
 8003590:	4450      	add	r0, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003592:	4404      	add	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 8003594:	2104      	movs	r1, #4
 8003596:	4628      	mov	r0, r5
 8003598:	f7ff f909 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800359c:	b148      	cbz	r0, 80035b2 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x46>
 800359e:	582b      	ldr	r3, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d807      	bhi.n	80035b6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x4a>
 80035a6:	4b35      	ldr	r3, [pc, #212]	; (800367c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x110>)
 80035a8:	4a35      	ldr	r2, [pc, #212]	; (8003680 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x114>)
 80035aa:	4836      	ldr	r0, [pc, #216]	; (8003684 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x118>)
 80035ac:	21aa      	movs	r1, #170	; 0xaa
 80035ae:	f004 fb85 	bl	8007cbc <__assert_func>
 80035b2:	4603      	mov	r3, r0
 80035b4:	e7f4      	b.n	80035a0 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x34>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80035b6:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
 80035b8:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80035bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 80035c0:	2200      	movs	r2, #0
 80035c2:	210a      	movs	r1, #10
 80035c4:	4418      	add	r0, r3
 80035c6:	f7ff f96a 	bl	800289e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  switch (opcode->builtin_code()) {
 80035ca:	2877      	cmp	r0, #119	; 0x77
 80035cc:	d04b      	beq.n	8003666 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfa>
 80035ce:	2881      	cmp	r0, #129	; 0x81
 80035d0:	d034      	beq.n	800363c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xd0>
 80035d2:	2876      	cmp	r0, #118	; 0x76
 80035d4:	d141      	bne.n	800365a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xee>
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 80035d6:	4628      	mov	r0, r5
 80035d8:	f7ff f95b 	bl	8002892 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80035dc:	285c      	cmp	r0, #92	; 0x5c
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 80035de:	d147      	bne.n	8003670 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x104>
 80035e0:	4628      	mov	r0, r5
 80035e2:	f7ff f8ec 	bl	80027be <_ZNK6tflite8Operator15builtin_optionsEv>
 80035e6:	4605      	mov	r5, r0
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2104      	movs	r1, #4
 80035ec:	4628      	mov	r0, r5
 80035ee:	f7ff f956 	bl	800289e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 80035f2:	2200      	movs	r2, #0
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 80035f4:	4604      	mov	r4, r0
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 80035f6:	2106      	movs	r1, #6
 80035f8:	4628      	mov	r0, r5
 80035fa:	f7ff f950 	bl	800289e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  if (first_subgraph_index != -1) {
 80035fe:	1c62      	adds	r2, r4, #1
 8003600:	4605      	mov	r5, r0
 8003602:	d00b      	beq.n	800361c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xb0>
    allocation_scope_count_++;
 8003604:	6a73      	ldr	r3, [r6, #36]	; 0x24
    TF_LITE_ENSURE_STATUS(
 8003606:	f8cd 9000 	str.w	r9, [sp]
    allocation_scope_count_++;
 800360a:	3301      	adds	r3, #1
 800360c:	6273      	str	r3, [r6, #36]	; 0x24
    TF_LITE_ENSURE_STATUS(
 800360e:	463a      	mov	r2, r7
 8003610:	4643      	mov	r3, r8
 8003612:	4621      	mov	r1, r4
 8003614:	4630      	mov	r0, r6
 8003616:	f7ff febd 	bl	8003394 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 800361a:	b9f8      	cbnz	r0, 800365c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf0>
  if (second_subgraph_index != -1) {
 800361c:	1c6b      	adds	r3, r5, #1
 800361e:	d01c      	beq.n	800365a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xee>
    allocation_scope_count_++;
 8003620:	6a73      	ldr	r3, [r6, #36]	; 0x24
    TF_LITE_ENSURE_STATUS(
 8003622:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    allocation_scope_count_++;
 8003626:	3301      	adds	r3, #1
 8003628:	6273      	str	r3, [r6, #36]	; 0x24
    TF_LITE_ENSURE_STATUS(
 800362a:	463a      	mov	r2, r7
 800362c:	4643      	mov	r3, r8
 800362e:	4629      	mov	r1, r5
 8003630:	4630      	mov	r0, r6
}
 8003632:	b002      	add	sp, #8
 8003634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TF_LITE_ENSURE_STATUS(
 8003638:	f7ff beac 	b.w	8003394 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 800363c:	4628      	mov	r0, r5
 800363e:	f7ff f928 	bl	8002892 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003642:	2867      	cmp	r0, #103	; 0x67
 8003644:	d10d      	bne.n	8003662 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf6>
 8003646:	4628      	mov	r0, r5
 8003648:	f7ff f8b9 	bl	80027be <_ZNK6tflite8Operator15builtin_optionsEv>
    return GetField<int32_t>(VT_INIT_SUBGRAPH_INDEX, 0);
 800364c:	2104      	movs	r1, #4
 800364e:	2200      	movs	r2, #0
 8003650:	f7ff f925 	bl	800289e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  if (first_subgraph_index != -1) {
 8003654:	1c41      	adds	r1, r0, #1
 8003656:	4604      	mov	r4, r0
 8003658:	d10c      	bne.n	8003674 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x108>
  switch (opcode->builtin_code()) {
 800365a:	2000      	movs	r0, #0
}
 800365c:	b002      	add	sp, #8
 800365e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 8003662:	2000      	movs	r0, #0
 8003664:	e7f2      	b.n	800364c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe0>
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 8003666:	4628      	mov	r0, r5
 8003668:	f7ff f913 	bl	8002892 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800366c:	285d      	cmp	r0, #93	; 0x5d
 800366e:	e7b6      	b.n	80035de <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x72>
 8003670:	2500      	movs	r5, #0
 8003672:	e7b9      	b.n	80035e8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
  int second_subgraph_index = -1;
 8003674:	f04f 35ff 	mov.w	r5, #4294967295
 8003678:	e7c4      	b.n	8003604 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x98>
 800367a:	bf00      	nop
 800367c:	0800bb4d 	.word	0x0800bb4d
 8003680:	0800c11d 	.word	0x0800c11d
 8003684:	0800bc52 	.word	0x0800bc52

08003688 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  explicit MicroBuiltinDataAllocator(
      IPersistentBufferAllocator* persistent_allocator)
      : persistent_allocator_(persistent_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return persistent_allocator_->AllocatePersistentBuffer(size,
 8003688:	6840      	ldr	r0, [r0, #4]
                                                           alignment_hint);
 800368a:	6803      	ldr	r3, [r0, #0]
    return persistent_allocator_->AllocatePersistentBuffer(size,
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4718      	bx	r3

08003690 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8003690:	4770      	bx	lr

08003692 <_ZN6tflite14MicroAllocatorD0Ev>:
      persistent_buffer_allocator_(persistent_buffer_allocator),
      memory_planner_(memory_planner),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
 8003692:	4770      	bx	lr

08003694 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003694:	6880      	ldr	r0, [r0, #8]
      bytes, MicroArenaBufferAlignment());
 8003696:	6803      	ldr	r3, [r0, #0]
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003698:	2210      	movs	r2, #16
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4718      	bx	r3

0800369e <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  }
  return tensor;
}

TfLiteStatus MicroAllocator::ResetTempAllocations() {
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 800369e:	6840      	ldr	r0, [r0, #4]
 80036a0:	6803      	ldr	r3, [r0, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4718      	bx	r3

080036a6 <_ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv>:
}

bool MicroAllocator::IsAllTempDeallocated() {
  return non_persistent_buffer_allocator_->IsAllTempDeallocated();
 80036a6:	6840      	ldr	r0, [r0, #4]
 80036a8:	6803      	ldr	r3, [r0, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4718      	bx	r3

080036ae <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
  return reinterpret_cast<TfLiteTensor*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80036ae:	6880      	ldr	r0, [r0, #8]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 80036b0:	6803      	ldr	r3, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80036b2:	2204      	movs	r2, #4
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2120      	movs	r1, #32
 80036b8:	4718      	bx	r3

080036ba <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80036ba:	4770      	bx	lr

080036bc <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80036bc:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 80036be:	2108      	movs	r1, #8
 80036c0:	4604      	mov	r4, r0
 80036c2:	f7ff f874 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80036c6:	b110      	cbz	r0, 80036ce <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
 80036c8:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80036ca:	5820      	ldr	r0, [r4, r0]
 80036cc:	4418      	add	r0, r3
  }
 80036ce:	bd10      	pop	{r4, pc}

080036d0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 80036d0:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 80036d2:	210a      	movs	r1, #10
 80036d4:	4604      	mov	r4, r0
 80036d6:	f7ff f86a 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80036da:	b110      	cbz	r0, 80036e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
 80036dc:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80036de:	5820      	ldr	r0, [r4, r0]
 80036e0:	4418      	add	r0, r3
  }
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 80036e4:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 80036e6:	2106      	movs	r1, #6
 80036e8:	4604      	mov	r4, r0
 80036ea:	f7ff f860 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80036ee:	b100      	cbz	r0, 80036f2 <_ZNK6tflite6Tensor4typeEv+0xe>
 80036f0:	5620      	ldrsb	r0, [r4, r0]
  }
 80036f2:	bd10      	pop	{r4, pc}

080036f4 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 80036f4:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 80036f6:	210e      	movs	r1, #14
 80036f8:	4604      	mov	r4, r0
 80036fa:	f7ff f858 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80036fe:	b100      	cbz	r0, 8003702 <_ZNK6tflite6Tensor11is_variableEv+0xe>
 8003700:	5c20      	ldrb	r0, [r4, r0]
  }
 8003702:	3800      	subs	r0, #0
 8003704:	bf18      	it	ne
 8003706:	2001      	movne	r0, #1
 8003708:	bd10      	pop	{r4, pc}

0800370a <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
void MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 800370a:	b570      	push	{r4, r5, r6, lr}
 800370c:	4605      	mov	r5, r0
  TFLITE_DCHECK(tensor != nullptr);
 800370e:	460c      	mov	r4, r1
 8003710:	b909      	cbnz	r1, 8003716 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0xc>
 8003712:	f7ff f85f 	bl	80027d4 <_Z9AbortImplv>
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 8003716:	780b      	ldrb	r3, [r1, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10c      	bne.n	8003736 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x2c>
    TFLITE_DCHECK(tensor->quantization.params != nullptr);
 800371c:	684e      	ldr	r6, [r1, #4]
 800371e:	2e00      	cmp	r6, #0
 8003720:	d0f7      	beq.n	8003712 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x8>
    non_persistent_buffer_allocator_->DeallocateTemp(
 8003722:	6840      	ldr	r0, [r0, #4]
 8003724:	6871      	ldr	r1, [r6, #4]
        reinterpret_cast<uint8_t*>(quantization->zero_point));
 8003726:	6803      	ldr	r3, [r0, #0]
    non_persistent_buffer_allocator_->DeallocateTemp(
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4798      	blx	r3
    non_persistent_buffer_allocator_->DeallocateTemp(
 800372c:	6868      	ldr	r0, [r5, #4]
        reinterpret_cast<uint8_t*>(quantization));
 800372e:	6803      	ldr	r3, [r0, #0]
    non_persistent_buffer_allocator_->DeallocateTemp(
 8003730:	4631      	mov	r1, r6
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4798      	blx	r3
  tensor->quantization.type = kTfLiteNoQuantization;
 8003736:	2300      	movs	r3, #0
  non_persistent_buffer_allocator_->DeallocateTemp(
 8003738:	6868      	ldr	r0, [r5, #4]
  tensor->quantization.params = nullptr;
 800373a:	6063      	str	r3, [r4, #4]
  tensor->dims = nullptr;
 800373c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  tensor->quantization.type = kTfLiteNoQuantization;
 8003740:	7023      	strb	r3, [r4, #0]
      reinterpret_cast<uint8_t*>(tensor));
 8003742:	6803      	ldr	r3, [r0, #0]
  non_persistent_buffer_allocator_->DeallocateTemp(
 8003744:	4621      	mov	r1, r4
 8003746:	68db      	ldr	r3, [r3, #12]
}
 8003748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  non_persistent_buffer_allocator_->DeallocateTemp(
 800374c:	4718      	bx	r3

0800374e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:
          max_head_buffer_usage_, MicroArenaBufferAlignment()));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800374e:	b538      	push	{r3, r4, r5, lr}
 8003750:	4613      	mov	r3, r2
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8003752:	460c      	mov	r4, r1
 8003754:	b909      	cbnz	r1, 800375a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0xc>
 8003756:	f7ff f83d 	bl	80027d4 <_Z9AbortImplv>

  if (scratch_buffer_request_count_ == 0) {
 800375a:	69c2      	ldr	r2, [r0, #28]
 800375c:	b132      	cbz	r2, 800376c <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 800375e:	6880      	ldr	r0, [r0, #8]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8003760:	6802      	ldr	r2, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003762:	0099      	lsls	r1, r3, #2
 8003764:	6895      	ldr	r5, [r2, #8]
 8003766:	2204      	movs	r2, #4
 8003768:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800376a:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
 800376c:	2000      	movs	r0, #0
 800376e:	bd38      	pop	{r3, r4, r5, pc}

08003770 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	460c      	mov	r4, r1
    auto field_offset = GetOptionalFieldOffset(field);
 8003774:	2108      	movs	r1, #8
 8003776:	4605      	mov	r5, r0
 8003778:	f7ff f819 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800377c:	b100      	cbz	r0, 8003780 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
 800377e:	5828      	ldr	r0, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	4283      	cmp	r3, r0
 8003784:	d805      	bhi.n	8003792 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x22>
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x48>)
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x4c>)
 800378a:	480d      	ldr	r0, [pc, #52]	; (80037c0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x50>)
 800378c:	21aa      	movs	r1, #170	; 0xaa
 800378e:	f004 fa95 	bl	8007cbc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003792:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
 8003794:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8003798:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800379c:	441c      	add	r4, r3
    auto field_offset = GetOptionalFieldOffset(field);
 800379e:	2104      	movs	r1, #4
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff f804 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80037a6:	b128      	cbz	r0, 80037b4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x44>
 80037a8:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
 80037aa:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80037ac:	18d1      	adds	r1, r2, r3
      if (array->size()) {
 80037ae:	58d0      	ldr	r0, [r2, r3]
 80037b0:	b100      	cbz	r0, 80037b4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x44>
 80037b2:	1d08      	adds	r0, r1, #4
}
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
 80037b6:	bf00      	nop
 80037b8:	0800bb4d 	.word	0x0800bb4d
 80037bc:	0800bca1 	.word	0x0800bca1
 80037c0:	0800bc52 	.word	0x0800bc52

080037c4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 80037c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c6:	461c      	mov	r4, r3
  *result = {};
 80037c8:	4626      	mov	r6, r4
 80037ca:	2300      	movs	r3, #0
 80037cc:	e9c4 3300 	strd	r3, r3, [r4]
 80037d0:	f846 3f08 	str.w	r3, [r6, #8]!
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 80037d4:	460f      	mov	r7, r1
 80037d6:	9201      	str	r2, [sp, #4]
 80037d8:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80037da:	f7ff ff83 	bl	80036e4 <_ZNK6tflite6Tensor4typeEv>
 80037de:	4631      	mov	r1, r6
 80037e0:	9a01      	ldr	r2, [sp, #4]
 80037e2:	f7ff f80b 	bl	80027fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80037e6:	4606      	mov	r6, r0
 80037e8:	b978      	cbnz	r0, 800380a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 80037ea:	4639      	mov	r1, r7
 80037ec:	4628      	mov	r0, r5
 80037ee:	f7ff ffbf 	bl	8003770 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    auto field_offset = GetOptionalFieldOffset(field);
 80037f2:	2104      	movs	r1, #4
 80037f4:	6020      	str	r0, [r4, #0]
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7fe ffd9 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80037fc:	b140      	cbz	r0, 8003810 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    auto p = data_ + field_offset;
 80037fe:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003800:	5828      	ldr	r0, [r5, r0]
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8003802:	4410      	add	r0, r2
 8003804:	f7ff fb28 	bl	8002e58 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 8003808:	6060      	str	r0, [r4, #4]
}
 800380a:	4630      	mov	r0, r6
 800380c:	b003      	add	sp, #12
 800380e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8003810:	4b01      	ldr	r3, [pc, #4]	; (8003818 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>)
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	e7f9      	b.n	800380a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
 8003816:	bf00      	nop
 8003818:	0800c624 	.word	0x0800c624

0800381c <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>:
    MicroMemoryPlanner* memory_planner, ErrorReporter* error_reporter) {
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	460e      	mov	r6, r1
 8003820:	4615      	mov	r5, r2
  TFLITE_DCHECK(memory_allocator != nullptr);
 8003822:	4604      	mov	r4, r0
 8003824:	b908      	cbnz	r0, 800382a <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0xe>
 8003826:	f7fe ffd5 	bl	80027d4 <_Z9AbortImplv>
  TFLITE_DCHECK(error_reporter != nullptr);
 800382a:	2a00      	cmp	r2, #0
 800382c:	d0fb      	beq.n	8003826 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0xa>
  TFLITE_DCHECK(memory_planner != nullptr);
 800382e:	2900      	cmp	r1, #0
 8003830:	d0f9      	beq.n	8003826 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0xa>
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8003832:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocatePersistentBuffer(
 8003834:	2204      	movs	r2, #4
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	2128      	movs	r1, #40	; 0x28
 800383a:	4798      	blx	r3
      model_is_allocating_(false) {}
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x3c>)
 800383e:	e9c0 2400 	strd	r2, r4, [r0]
 8003842:	2200      	movs	r2, #0
      memory_allocator, memory_allocator, memory_planner, error_reporter);
 8003844:	3404      	adds	r4, #4
      model_is_allocating_(false) {}
 8003846:	e9c0 6504 	strd	r6, r5, [r0, #16]
 800384a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800384e:	6084      	str	r4, [r0, #8]
 8003850:	7602      	strb	r2, [r0, #24]
 8003852:	6242      	str	r2, [r0, #36]	; 0x24
}
 8003854:	bd70      	pop	{r4, r5, r6, pc}
 8003856:	bf00      	nop
 8003858:	0800c648 	.word	0x0800c648

0800385c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
 800385c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800385e:	460e      	mov	r6, r1
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 8003860:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
 8003862:	4615      	mov	r5, r2
 8003864:	4604      	mov	r4, r0
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 8003866:	f7ff faf9 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800386a:	4434      	add	r4, r6
      SingleArenaBufferAllocator::Create(error_reporter, aligned_arena,
 800386c:	1a22      	subs	r2, r4, r0
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 800386e:	4601      	mov	r1, r0
      SingleArenaBufferAllocator::Create(error_reporter, aligned_arena,
 8003870:	4628      	mov	r0, r5
 8003872:	f001 fc99 	bl	80051a8 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj>
      sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
 8003876:	6803      	ldr	r3, [r0, #0]
  uint8_t* memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8003878:	2204      	movs	r2, #4
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	212c      	movs	r1, #44	; 0x2c
      SingleArenaBufferAllocator::Create(error_reporter, aligned_arena,
 800387e:	4604      	mov	r4, r0
  uint8_t* memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8003880:	4798      	blx	r3
 8003882:	9001      	str	r0, [sp, #4]
      new (memory_planner_buffer) GreedyMemoryPlanner();
 8003884:	f002 febc 	bl	8006600 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
  return Create(memory_allocator, memory_planner, error_reporter);
 8003888:	9901      	ldr	r1, [sp, #4]
 800388a:	462a      	mov	r2, r5
 800388c:	4620      	mov	r0, r4
}
 800388e:	b002      	add	sp, #8
 8003890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return Create(memory_allocator, memory_planner, error_reporter);
 8003894:	f7ff bfc2 	b.w	800381c <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>

08003898 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8003898:	2300      	movs	r3, #0
TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800389a:	b510      	push	{r4, lr}
 800389c:	4604      	mov	r4, r0
  scratch_buffer_request_count_ = 0;
 800389e:	61c3      	str	r3, [r0, #28]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  scratch_buffer_head_ =
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 80038a0:	6840      	ldr	r0, [r0, #4]
          sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
          alignof(internal::ScratchBufferRequest));
 80038a2:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 80038a4:	2204      	movs	r2, #4
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2190      	movs	r1, #144	; 0x90
 80038aa:	4798      	blx	r3
  scratch_buffer_head_ =
 80038ac:	6220      	str	r0, [r4, #32]
  if (scratch_buffer_head_ == nullptr) {
    return kTfLiteError;
  }

  return kTfLiteOk;
}
 80038ae:	fab0 f080 	clz	r0, r0
 80038b2:	0940      	lsrs	r0, r0, #5
 80038b4:	bd10      	pop	{r4, pc}
	...

080038b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4604      	mov	r4, r0
  TFLITE_DCHECK(model != nullptr);
 80038bc:	460e      	mov	r6, r1
 80038be:	b909      	cbnz	r1, 80038c4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc>
 80038c0:	f7fe ff88 	bl	80027d4 <_Z9AbortImplv>
  if (model_is_allocating_) {
 80038c4:	7e03      	ldrb	r3, [r0, #24]
 80038c6:	b12b      	cbz	r3, 80038d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80038c8:	491d      	ldr	r1, [pc, #116]	; (8003940 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x88>)
 80038ca:	6940      	ldr	r0, [r0, #20]
 80038cc:	f7fe ff50 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 80038d0:	2500      	movs	r5, #0
 80038d2:	e021      	b.n	8003918 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x60>
  model_is_allocating_ = true;
 80038d4:	2301      	movs	r3, #1
 80038d6:	7603      	strb	r3, [r0, #24]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80038d8:	6880      	ldr	r0, [r0, #8]
          alignof(MicroBuiltinDataAllocator));
 80038da:	6803      	ldr	r3, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80038dc:	2204      	movs	r2, #4
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2108      	movs	r1, #8
 80038e2:	4798      	blx	r3
      MicroBuiltinDataAllocator(persistent_buffer_allocator_);
 80038e4:	68a3      	ldr	r3, [r4, #8]
      : persistent_allocator_(persistent_allocator) {}
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x8c>)
 80038e8:	e9c0 2300 	strd	r2, r3, [r0]
  builtin_data_allocator_ = new (data_allocator_buffer)
 80038ec:	60e0      	str	r0, [r4, #12]
  if (InitScratchBufferData() != kTfLiteOk) {
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff ffd2 	bl	8003898 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d1eb      	bne.n	80038d0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x18>
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff fb41 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80038fe:	68a5      	ldr	r5, [r4, #8]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 8003900:	6801      	ldr	r1, [r0, #0]
          alignof(SubgraphAllocations)));
 8003902:	682b      	ldr	r3, [r5, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003904:	4628      	mov	r0, r5
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2204      	movs	r2, #4
 800390a:	00c9      	lsls	r1, r1, #3
 800390c:	4798      	blx	r3
  if (output == nullptr) {
 800390e:	4605      	mov	r5, r0
 8003910:	b920      	cbnz	r0, 800391c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x64>
    MicroPrintf("Failed to allocate memory for model metadata.");
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x90>)
 8003914:	f000 fca9 	bl	800426a <_Z11MicroPrintfPKcz>
}
 8003918:	4628      	mov	r0, r5
 800391a:	bd70      	pop	{r4, r5, r6, pc}
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	4602      	mov	r2, r0
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	4631      	mov	r1, r6
 8003924:	4620      	mov	r0, r4
 8003926:	4798      	blx	r3
 8003928:	2800      	cmp	r0, #0
 800392a:	d1d1      	bne.n	80038d0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x18>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	462a      	mov	r2, r5
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4631      	mov	r1, r6
 8003934:	4620      	mov	r0, r4
 8003936:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8003938:	2800      	cmp	r0, #0
 800393a:	d0ed      	beq.n	8003918 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x60>
 800393c:	e7c8      	b.n	80038d0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x18>
 800393e:	bf00      	nop
 8003940:	0800c237 	.word	0x0800c237
 8003944:	0800c630 	.word	0x0800c630
 8003948:	0800c28c 	.word	0x0800c28c

0800394c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 800394c:	6a00      	ldr	r0, [r0, #32]
 800394e:	2104      	movs	r1, #4
 8003950:	f7ff ba84 	b.w	8002e5c <_ZN6tflite14AlignPointerUpEPhj>

08003954 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
                                                         int* buffer_idx) {
 8003954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003958:	4604      	mov	r4, r0
 800395a:	4689      	mov	r9, r1
 800395c:	4690      	mov	r8, r2
 800395e:	461f      	mov	r7, r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8003960:	f7ff fff4 	bl	800394c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8003964:	69e1      	ldr	r1, [r4, #28]
 8003966:	260c      	movs	r6, #12
 8003968:	434e      	muls	r6, r1
 800396a:	4605      	mov	r5, r0
 800396c:	eb00 0c06 	add.w	ip, r0, r6
  size_t current_node_request_count = 0;
 8003970:	2200      	movs	r2, #0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8003972:	4565      	cmp	r5, ip
 8003974:	d005      	beq.n	8003982 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8003976:	686b      	ldr	r3, [r5, #4]
 8003978:	3301      	adds	r3, #1
      ++current_node_request_count;
 800397a:	bf08      	it	eq
 800397c:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800397e:	350c      	adds	r5, #12
 8003980:	e7f7      	b.n	8003972 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8003982:	2a0b      	cmp	r2, #11
 8003984:	d907      	bls.n	8003996 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x42>
    TF_LITE_REPORT_ERROR(
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5c>)
 8003988:	6960      	ldr	r0, [r4, #20]
 800398a:	220c      	movs	r2, #12
 800398c:	f7fe fef0 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8003990:	2001      	movs	r0, #1
}
 8003992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
  current_request->bytes = bytes;
 800399a:	f840 9006 	str.w	r9, [r0, r6]
  current_request->subgraph_idx = subgraph_idx;
 800399e:	e9c5 3801 	strd	r3, r8, [r5, #4]
  *buffer_idx = scratch_buffer_request_count_;
 80039a2:	6039      	str	r1, [r7, #0]
  ++scratch_buffer_request_count_;
 80039a4:	69e3      	ldr	r3, [r4, #28]
 80039a6:	3301      	adds	r3, #1
 80039a8:	61e3      	str	r3, [r4, #28]
  return kTfLiteOk;
 80039aa:	2000      	movs	r0, #0
 80039ac:	e7f1      	b.n	8003992 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
 80039ae:	bf00      	nop
 80039b0:	0800c2ba 	.word	0x0800c2ba

080039b4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80039b4:	6803      	ldr	r3, [r0, #0]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80039b6:	b570      	push	{r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80039b8:	68db      	ldr	r3, [r3, #12]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80039ba:	4604      	mov	r4, r0
 80039bc:	460d      	mov	r5, r1
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80039be:	4798      	blx	r3
 80039c0:	b9c0      	cbnz	r0, 80039f4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x40>
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff ffc2 	bl	800394c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80039c8:	69e2      	ldr	r2, [r4, #28]
 80039ca:	230c      	movs	r3, #12
 80039cc:	435a      	muls	r2, r3
 80039ce:	1883      	adds	r3, r0, r2
 80039d0:	4298      	cmp	r0, r3
 80039d2:	d005      	beq.n	80039e0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80039d4:	6841      	ldr	r1, [r0, #4]
 80039d6:	3101      	adds	r1, #1
      requests[i].node_idx = node_id;
 80039d8:	bf08      	it	eq
 80039da:	6045      	streq	r5, [r0, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80039dc:	300c      	adds	r0, #12
 80039de:	e7f7      	b.n	80039d0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x1c>
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 80039e0:	6860      	ldr	r0, [r4, #4]
 80039e2:	6a21      	ldr	r1, [r4, #32]
 80039e4:	6803      	ldr	r3, [r0, #0]
 80039e6:	69dd      	ldr	r5, [r3, #28]
 80039e8:	3290      	adds	r2, #144	; 0x90
 80039ea:	46ac      	mov	ip, r5
 80039ec:	2304      	movs	r3, #4
}
 80039ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 80039f2:	4760      	bx	ip
}
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080039f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	4616      	mov	r6, r2
 80039fe:	b093      	sub	sp, #76	; 0x4c
                                error_reporter_);
 8003a00:	6842      	ldr	r2, [r0, #4]
    ScratchBufferHandle* scratch_buffer_handles) {
 8003a02:	461f      	mov	r7, r3
                                error_reporter_);
 8003a04:	6943      	ldr	r3, [r0, #20]
                        ErrorReporter* reporter)
      : model_(model),
        non_persistent_allocator_(non_persistent_allocator)
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
        ,
        reporter_(reporter)
 8003a06:	930a      	str	r3, [sp, #40]	; 0x28
 8003a08:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8003a0c:	2300      	movs	r3, #0
  TF_LITE_ENSURE_STATUS(
 8003a0e:	69c1      	ldr	r1, [r0, #28]
 8003a10:	9311      	str	r3, [sp, #68]	; 0x44
    ScratchBufferHandle* scratch_buffer_handles) {
 8003a12:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
 8003a14:	a808      	add	r0, sp, #32
 8003a16:	f7ff fba1 	bl	800315c <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d138      	bne.n	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
  const int32_t* offline_planner_offsets = nullptr;
 8003a20:	9006      	str	r0, [sp, #24]
  TF_LITE_ENSURE_STATUS(
 8003a22:	a906      	add	r1, sp, #24
 8003a24:	a808      	add	r0, sp, #32
 8003a26:	f7ff facd 	bl	8002fc4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d130      	bne.n	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
  TF_LITE_ENSURE_STATUS(
 8003a30:	9906      	ldr	r1, [sp, #24]
 8003a32:	4632      	mov	r2, r6
 8003a34:	a808      	add	r0, sp, #32
 8003a36:	f7ff fc23 	bl	8003280 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	bb48      	cbnz	r0, 8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
      GetScratchBufferRequests();
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7ff ff84 	bl	800394c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8003a44:	4621      	mov	r1, r4
      GetScratchBufferRequests();
 8003a46:	4602      	mov	r2, r0
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8003a48:	9600      	str	r6, [sp, #0]
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	a808      	add	r0, sp, #32
 8003a4e:	f7ff fca1 	bl	8003394 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8003a52:	4604      	mov	r4, r0
 8003a54:	b9e8      	cbnz	r0, 8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
      internal::ScratchBufferRequest* scratch_buffer_requests,
      ScratchBufferHandle* scratch_buffer_handles,
      SubgraphAllocations* allocations);

  // Returns the number of allocations.
  int AllocationCount() const { return info_.allocation_info_count; }
 8003a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8003a58:	6868      	ldr	r0, [r5, #4]
 8003a5a:	9304      	str	r3, [sp, #16]

  // Returns a pointer to the built AllocationInfo array.
  AllocationInfo* Finish() const { return info_.allocation_info; }
 8003a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a5e:	9303      	str	r3, [sp, #12]
          MicroArenaBufferAlignment());
 8003a60:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8003a62:	2110      	movs	r1, #16
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4798      	blx	r3
 8003a68:	4606      	mov	r6, r0
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8003a6a:	6868      	ldr	r0, [r5, #4]
      remaining_arena_size, MicroArenaBufferAlignment());
 8003a6c:	6803      	ldr	r3, [r0, #0]
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8003a6e:	2210      	movs	r2, #16
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4631      	mov	r1, r6
 8003a74:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8003a76:	4607      	mov	r7, r0
 8003a78:	b978      	cbnz	r0, 8003a9a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xa2>
 8003a7a:	6969      	ldr	r1, [r5, #20]
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1b4>)
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	f240 336b 	movw	r3, #875	; 0x36b
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1b8>)
 8003a88:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1bc>)
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	f7fe fe7e 	bl	800278c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003a90:	2401      	movs	r4, #1
}
 8003a92:	4620      	mov	r0, r4
 8003a94:	b013      	add	sp, #76	; 0x4c
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memory_planner_->Init(planner_arena, remaining_arena_size);
 8003a9a:	6928      	ldr	r0, [r5, #16]
 8003a9c:	6803      	ldr	r3, [r0, #0]
 8003a9e:	4632      	mov	r2, r6
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4639      	mov	r1, r7
 8003aa4:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, memory_planner_,
 8003aa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003aaa:	e9d5 9b04 	ldrd	r9, fp, [r5, #16]
 8003aae:	4646      	mov	r6, r8
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8003ab0:	46a2      	mov	sl, r4
 8003ab2:	9b04      	ldr	r3, [sp, #16]
 8003ab4:	4553      	cmp	r3, sl
 8003ab6:	d04a      	beq.n	8003b4e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x156>
    if (current->needs_allocating) {
 8003ab8:	7d33      	ldrb	r3, [r6, #20]
 8003aba:	b91b      	cbnz	r3, 8003ac4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xcc>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8003abc:	f10a 0a01 	add.w	sl, sl, #1
 8003ac0:	3618      	adds	r6, #24
 8003ac2:	e7f6      	b.n	8003ab2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xba>
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8003ac4:	2110      	movs	r1, #16
 8003ac6:	6830      	ldr	r0, [r6, #0]
 8003ac8:	f7ff f9d2 	bl	8002e70 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8003acc:	6931      	ldr	r1, [r6, #16]
 8003ace:	1c4b      	adds	r3, r1, #1
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8003ad0:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8003ad2:	f8d9 3000 	ldr.w	r3, [r9]
 8003ad6:	d10a      	bne.n	8003aee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xf6>
        TF_LITE_ENSURE_STATUS(
 8003ad8:	68f1      	ldr	r1, [r6, #12]
 8003ada:	9100      	str	r1, [sp, #0]
 8003adc:	689c      	ldr	r4, [r3, #8]
 8003ade:	68b3      	ldr	r3, [r6, #8]
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	4648      	mov	r0, r9
 8003ae4:	47a0      	blx	r4
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d0e7      	beq.n	8003abc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xc4>
 8003aec:	e7d1      	b.n	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
 8003aee:	9101      	str	r1, [sp, #4]
 8003af0:	68f1      	ldr	r1, [r6, #12]
 8003af2:	9100      	str	r1, [sp, #0]
 8003af4:	68dc      	ldr	r4, [r3, #12]
 8003af6:	68b3      	ldr	r3, [r6, #8]
 8003af8:	4659      	mov	r1, fp
 8003afa:	4648      	mov	r0, r9
 8003afc:	47a0      	blx	r4
 8003afe:	e7f2      	b.n	8003ae6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xee>
  builder.FreeAllocationInfo();
 8003b00:	a808      	add	r0, sp, #32
 8003b02:	f7ff fa51 	bl	8002fa8 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>
  non_persistent_buffer_allocator_->DeallocateTemp(planner_arena);
 8003b06:	6868      	ldr	r0, [r5, #4]
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8003b10:	6868      	ldr	r0, [r5, #4]
 8003b12:	6803      	ldr	r3, [r0, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4798      	blx	r3
 8003b18:	4604      	mov	r4, r0
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d1b9      	bne.n	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
  TF_LITE_ENSURE_STATUS(
 8003b1e:	6868      	ldr	r0, [r5, #4]
 8003b20:	6a29      	ldr	r1, [r5, #32]
 8003b22:	6803      	ldr	r3, [r0, #0]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4798      	blx	r3
 8003b28:	4604      	mov	r4, r0
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d1b1      	bne.n	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
  head_usage = memory_planner_->GetMaximumMemorySize();
 8003b2e:	6928      	ldr	r0, [r5, #16]
 8003b30:	6803      	ldr	r3, [r0, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4798      	blx	r3
  if (max_head_buffer_usage_ < head_usage) {
 8003b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b38:	4283      	cmp	r3, r0
    max_head_buffer_usage_ = head_usage;
 8003b3a:	bf38      	it	cc
 8003b3c:	6268      	strcc	r0, [r5, #36]	; 0x24
  TF_LITE_ENSURE_STATUS(
 8003b3e:	6868      	ldr	r0, [r5, #4]
 8003b40:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003b42:	6803      	ldr	r3, [r0, #0]
 8003b44:	2210      	movs	r2, #16
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	4798      	blx	r3
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	e7a1      	b.n	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
  TF_LITE_ENSURE_STATUS(
 8003b4e:	6868      	ldr	r0, [r5, #4]
 8003b50:	6803      	ldr	r3, [r0, #0]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	e9d5 9604 	ldrd	r9, r6, [r5, #16]
 8003b58:	4798      	blx	r3
 8003b5a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8003b5e:	f04f 0a18 	mov.w	sl, #24
 8003b62:	fb0a 3a02 	mla	sl, sl, r2, r3
 8003b66:	9005      	str	r0, [sp, #20]
  int planner_index = 0;
 8003b68:	2200      	movs	r2, #0
      int offset = -1;
 8003b6a:	f04f 3bff 	mov.w	fp, #4294967295
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8003b6e:	45c2      	cmp	sl, r8
 8003b70:	d0c6      	beq.n	8003b00 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x108>
    if (current->needs_allocating) {
 8003b72:	f898 3014 	ldrb.w	r3, [r8, #20]
 8003b76:	b1ab      	cbz	r3, 8003ba4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1ac>
      TF_LITE_ENSURE_STATUS(
 8003b78:	f8d9 3000 	ldr.w	r3, [r9]
      int offset = -1;
 8003b7c:	f8cd b01c 	str.w	fp, [sp, #28]
      TF_LITE_ENSURE_STATUS(
 8003b80:	699c      	ldr	r4, [r3, #24]
 8003b82:	9203      	str	r2, [sp, #12]
 8003b84:	ab07      	add	r3, sp, #28
 8003b86:	4631      	mov	r1, r6
 8003b88:	4648      	mov	r0, r9
 8003b8a:	47a0      	blx	r4
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f47f af7f 	bne.w	8003a92 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x9a>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8003b94:	9b07      	ldr	r3, [sp, #28]
 8003b96:	9a05      	ldr	r2, [sp, #20]
 8003b98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003b9c:	4413      	add	r3, r2
      ++planner_index;
 8003b9e:	9a03      	ldr	r2, [sp, #12]
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8003ba0:	6003      	str	r3, [r0, #0]
      ++planner_index;
 8003ba2:	3201      	adds	r2, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8003ba4:	f108 0818 	add.w	r8, r8, #24
 8003ba8:	e7e1      	b.n	8003b6e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x176>
 8003baa:	bf00      	nop
 8003bac:	0800c333 	.word	0x0800c333
 8003bb0:	0800bacf 	.word	0x0800bacf
 8003bb4:	0800c2f0 	.word	0x0800c2f0

08003bb8 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
 8003bb8:	68c0      	ldr	r0, [r0, #12]
 8003bba:	4770      	bx	lr

08003bbc <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8003bbc:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8003bbe:	6803      	ldr	r3, [r0, #0]
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	d305      	bcc.n	8003bd0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x14>
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <_ZNK11flatbuffers6VectorIxE3GetEm+0x20>)
 8003bc6:	4a06      	ldr	r2, [pc, #24]	; (8003be0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x24>)
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x28>)
 8003bca:	21aa      	movs	r1, #170	; 0xaa
 8003bcc:	f004 f876 	bl	8007cbc <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8003bd0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  }
 8003bd4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8003bd8:	bd08      	pop	{r3, pc}
 8003bda:	bf00      	nop
 8003bdc:	0800bb4d 	.word	0x0800bb4d
 8003be0:	0800c34c 	.word	0x0800c34c
 8003be4:	0800bc52 	.word	0x0800bc52

08003be8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8003be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	e9dd b40d 	ldrd	fp, r4, [sp, #52]	; 0x34
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	4689      	mov	r9, r1
 8003bf4:	4615      	mov	r5, r2
 8003bf6:	469a      	mov	sl, r3
  TFLITE_DCHECK(result != nullptr);
 8003bf8:	b90c      	cbnz	r4, 8003bfe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16>
 8003bfa:	f7fe fdeb 	bl	80027d4 <_Z9AbortImplv>
  *result = {};
 8003bfe:	2220      	movs	r2, #32
 8003c00:	2100      	movs	r1, #0
 8003c02:	4620      	mov	r0, r4
 8003c04:	f004 f8e2 	bl	8007dcc <memset>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8003c08:	4650      	mov	r0, sl
 8003c0a:	f7ff fd6b 	bl	80036e4 <_ZNK6tflite6Tensor4typeEv>
 8003c0e:	465a      	mov	r2, fp
 8003c10:	f104 011c 	add.w	r1, r4, #28
 8003c14:	f7fe fdf2 	bl	80027fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8003c18:	4607      	mov	r7, r0
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d15a      	bne.n	8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
  result->is_variable = flatbuffer_tensor.is_variable();
 8003c1e:	4650      	mov	r0, sl
 8003c20:	f7ff fd68 	bl	80036f4 <_ZNK6tflite6Tensor11is_variableEv>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8003c24:	990c      	ldr	r1, [sp, #48]	; 0x30
  result->is_variable = flatbuffer_tensor.is_variable();
 8003c26:	77a0      	strb	r0, [r4, #30]
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8003c28:	4650      	mov	r0, sl
 8003c2a:	f7ff fda1 	bl	8003770 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    result->allocation_type = kTfLiteMmapRo;
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	bf0c      	ite	eq
 8003c32:	2302      	moveq	r3, #2
 8003c34:	2301      	movne	r3, #1
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8003c36:	6120      	str	r0, [r4, #16]
  if (result->data.data == nullptr) {
 8003c38:	7763      	strb	r3, [r4, #29]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8003c3a:	aa01      	add	r2, sp, #4
 8003c3c:	465b      	mov	r3, fp
 8003c3e:	f104 0118 	add.w	r1, r4, #24
 8003c42:	4650      	mov	r0, sl
 8003c44:	f7ff f935 	bl	8002eb2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8003c48:	4607      	mov	r7, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d142      	bne.n	8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
    auto field_offset = GetOptionalFieldOffset(field);
 8003c4e:	2104      	movs	r1, #4
 8003c50:	4650      	mov	r0, sl
 8003c52:	f7fe fdac 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d040      	beq.n	8003cdc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    auto p = data_ + field_offset;
 8003c5a:	eb0a 0200 	add.w	r2, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003c5e:	f85a 0000 	ldr.w	r0, [sl, r0]
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8003c62:	4410      	add	r0, r2
 8003c64:	f7ff f8f8 	bl	8002e58 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 8003c68:	6160      	str	r0, [r4, #20]
    auto field_offset = GetOptionalFieldOffset(field);
 8003c6a:	210c      	movs	r1, #12
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	f7fe fd9e 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003c72:	b378      	cbz	r0, 8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
 8003c74:	f85a 3000 	ldr.w	r3, [sl, r0]
    auto p = data_ + field_offset;
 8003c78:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003c7c:	441e      	add	r6, r3
  if (src_quantization && src_quantization->scale() &&
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f7ff fd1c 	bl	80036bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8003c84:	4682      	mov	sl, r0
 8003c86:	b328      	cbz	r0, 8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
 8003c88:	6803      	ldr	r3, [r0, #0]
 8003c8a:	b31b      	cbz	r3, 8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
      src_quantization->zero_point() &&
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7ff fd1f 	bl	80036d0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
 8003c92:	b1f8      	cbz	r0, 8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
      src_quantization->zero_point() &&
 8003c94:	6803      	ldr	r3, [r0, #0]
 8003c96:	b1eb      	cbz	r3, 8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
 8003c98:	f8da 3004 	ldr.w	r3, [sl, #4]
    result->params.scale = src_quantization->scale()->Get(0);
 8003c9c:	60a3      	str	r3, [r4, #8]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff fd16 	bl	80036d0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f7ff ff89 	bl	8003bbc <_ZNK11flatbuffers6VectorIxE3GetEm>
    result->params.zero_point =
 8003caa:	60e0      	str	r0, [r4, #12]
    int channels = src_quantization->scale()->size();
 8003cac:	4630      	mov	r0, r6
 8003cae:	f7ff fd05 	bl	80036bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8003cb2:	f8d0 a000 	ldr.w	sl, [r0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8003cb6:	b1a5      	cbz	r5, 8003ce2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
                      alignof(TfLiteAffineQuantization)))
 8003cb8:	f8d9 3000 	ldr.w	r3, [r9]
                  non_persistent_buffer_allocator->AllocateTemp(
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	210c      	movs	r1, #12
 8003cc2:	4648      	mov	r0, r9
 8003cc4:	4798      	blx	r3
    if (quantization == nullptr) {
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	bb08      	cbnz	r0, 8003d0e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x126>
      TF_LITE_REPORT_ERROR(error_reporter,
 8003cca:	4930      	ldr	r1, [pc, #192]	; (8003d8c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a4>)
      TF_LITE_REPORT_ERROR(error_reporter,
 8003ccc:	4658      	mov	r0, fp
 8003cce:	f7fe fd4f 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8003cd2:	2701      	movs	r7, #1
}
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	b003      	add	sp, #12
 8003cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>)
 8003cde:	6163      	str	r3, [r4, #20]
 8003ce0:	e7c3      	b.n	8003c6a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x82>
                      alignof(TfLiteAffineQuantization)));
 8003ce2:	f8d8 3000 	ldr.w	r3, [r8]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	210c      	movs	r1, #12
 8003cec:	4640      	mov	r0, r8
 8003cee:	4798      	blx	r3
    if (quantization == nullptr) {
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d0e9      	beq.n	8003cca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
                      alignof(TfLiteIntArray)));
 8003cf6:	f8d8 3000 	ldr.w	r3, [r8]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8003cfa:	4650      	mov	r0, sl
                      alignof(TfLiteIntArray)));
 8003cfc:	f8d3 9008 	ldr.w	r9, [r3, #8]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8003d00:	f7fe fd26 	bl	8002750 <TfLiteIntArrayGetSizeInBytes>
 8003d04:	2204      	movs	r2, #4
 8003d06:	4601      	mov	r1, r0
 8003d08:	4640      	mov	r0, r8
 8003d0a:	47c8      	blx	r9
 8003d0c:	e00a      	b.n	8003d24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x13c>
                      alignof(TfLiteIntArray)))
 8003d0e:	f8d9 3000 	ldr.w	r3, [r9]
                  non_persistent_buffer_allocator->AllocateTemp(
 8003d12:	4650      	mov	r0, sl
                      alignof(TfLiteIntArray)))
 8003d14:	f8d3 8008 	ldr.w	r8, [r3, #8]
                  non_persistent_buffer_allocator->AllocateTemp(
 8003d18:	f7fe fd1a 	bl	8002750 <TfLiteIntArrayGetSizeInBytes>
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	4601      	mov	r1, r0
 8003d20:	4648      	mov	r0, r9
 8003d22:	47c0      	blx	r8
    quantization->zero_point =
 8003d24:	6068      	str	r0, [r5, #4]
    if (quantization->zero_point == nullptr) {
 8003d26:	b908      	cbnz	r0, 8003d2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
      TF_LITE_REPORT_ERROR(error_reporter,
 8003d28:	491a      	ldr	r1, [pc, #104]	; (8003d94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ac>)
 8003d2a:	e7cf      	b.n	8003ccc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe4>
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f7ff fcc5 	bl	80036bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8003d32:	f7ff f892 	bl	8002e5a <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE>
    quantization->zero_point->size = channels;
 8003d36:	686b      	ldr	r3, [r5, #4]
    quantization->scale =
 8003d38:	6028      	str	r0, [r5, #0]
    quantization->zero_point->size = channels;
 8003d3a:	4698      	mov	r8, r3
 8003d3c:	f8c3 a000 	str.w	sl, [r3]
    for (int i = 0; i < channels; i++) {
 8003d40:	f04f 0900 	mov.w	r9, #0
 8003d44:	45d1      	cmp	r9, sl
 8003d46:	da15      	bge.n	8003d74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18c>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff fcc1 	bl	80036d0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8003d4e:	4683      	mov	fp, r0
                                   src_quantization->scale()->size()
 8003d50:	4630      	mov	r0, r6
 8003d52:	f7ff fcb3 	bl	80036bc <_ZNK6tflite22QuantizationParameters5scaleEv>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8003d56:	f8db 2000 	ldr.w	r2, [fp]
 8003d5a:	6803      	ldr	r3, [r0, #0]
 8003d5c:	429a      	cmp	r2, r3
                               ? src_quantization->zero_point()->Get(i)
 8003d5e:	bf0c      	ite	eq
 8003d60:	4649      	moveq	r1, r9
                               : src_quantization->zero_point()->Get(0);
 8003d62:	2100      	movne	r1, #0
 8003d64:	4658      	mov	r0, fp
 8003d66:	f7ff ff29 	bl	8003bbc <_ZNK11flatbuffers6VectorIxE3GetEm>
    for (int i = 0; i < channels; i++) {
 8003d6a:	f109 0901 	add.w	r9, r9, #1
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8003d6e:	f848 0f04 	str.w	r0, [r8, #4]!
    for (int i = 0; i < channels; i++) {
 8003d72:	e7e7      	b.n	8003d44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15c>
    auto field_offset = GetOptionalFieldOffset(field);
 8003d74:	2110      	movs	r1, #16
 8003d76:	4630      	mov	r0, r6
 8003d78:	f7fe fd19 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003d7c:	b100      	cbz	r0, 8003d80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x198>
 8003d7e:	5830      	ldr	r0, [r6, r0]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8003d80:	60a8      	str	r0, [r5, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8003d82:	2301      	movs	r3, #1
 8003d84:	7023      	strb	r3, [r4, #0]
 8003d86:	6065      	str	r5, [r4, #4]
 8003d88:	e7a4      	b.n	8003cd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xec>
 8003d8a:	bf00      	nop
 8003d8c:	0800c424 	.word	0x0800c424
 8003d90:	0800c624 	.word	0x0800c624
 8003d94:	0800c452 	.word	0x0800c452

08003d98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8003d98:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8003d9a:	6803      	ldr	r3, [r0, #0]
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	d305      	bcc.n	8003dac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x14>
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x24>)
 8003da2:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x28>)
 8003da4:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x2c>)
 8003da6:	21aa      	movs	r1, #170	; 0xaa
 8003da8:	f003 ff88 	bl	8007cbc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003dac:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 8003dae:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8003db2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 8003db6:	4410      	add	r0, r2
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop
 8003dbc:	0800bb4d 	.word	0x0800bb4d
 8003dc0:	0800c027 	.word	0x0800c027
 8003dc4:	0800bc52 	.word	0x0800bc52

08003dc8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
 8003dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dca:	4606      	mov	r6, r0
 8003dcc:	460f      	mov	r7, r1
 8003dce:	4614      	mov	r4, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8003dd0:	2500      	movs	r5, #0
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	f7ff f8ca 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
 8003dd8:	6803      	ldr	r3, [r0, #0]
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	d21d      	bcs.n	8003e1a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x52>
    auto* tensor = subgraph->tensors()->Get(i);
 8003dde:	4629      	mov	r1, r5
 8003de0:	f7ff ffda 	bl	8003d98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    if (tensor->is_variable()) {
 8003de4:	f7ff fc86 	bl	80036f4 <_ZNK6tflite6Tensor11is_variableEv>
 8003de8:	b1a0      	cbz	r0, 8003e14 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x4c>
      TF_LITE_ENSURE_STATUS(
 8003dea:	a901      	add	r1, sp, #4
 8003dec:	4620      	mov	r0, r4
 8003dee:	f7ff f89b 	bl	8002f28 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8003df2:	b968      	cbnz	r0, 8003e10 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x48>
          persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003df4:	68b0      	ldr	r0, [r6, #8]
 8003df6:	9901      	ldr	r1, [sp, #4]
              buffer_size, MicroArenaBufferAlignment());
 8003df8:	6803      	ldr	r3, [r0, #0]
          persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4798      	blx	r3
      eval_tensors[i].data.data =
 8003e00:	6020      	str	r0, [r4, #0]
      if (eval_tensors[i].data.data == nullptr) {
 8003e02:	b938      	cbnz	r0, 8003e14 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x4c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8003e04:	9a01      	ldr	r2, [sp, #4]
 8003e06:	4906      	ldr	r1, [pc, #24]	; (8003e20 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x58>)
 8003e08:	6970      	ldr	r0, [r6, #20]
 8003e0a:	f7fe fcb1 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8003e0e:	2001      	movs	r0, #1
}
 8003e10:	b003      	add	sp, #12
 8003e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8003e14:	3501      	adds	r5, #1
 8003e16:	340c      	adds	r4, #12
 8003e18:	e7db      	b.n	8003dd2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xa>
  return kTfLiteOk;
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e7f8      	b.n	8003e10 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x48>
 8003e1e:	bf00      	nop
 8003e20:	0800c480 	.word	0x0800c480

08003e24 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
 8003e2a:	7e03      	ldrb	r3, [r0, #24]
    ScratchBufferHandle** scratch_buffer_handles) {
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	460e      	mov	r6, r1
 8003e30:	4617      	mov	r7, r2
  if (!model_is_allocating_) {
 8003e32:	b933      	cbnz	r3, 8003e42 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8003e34:	4919      	ldr	r1, [pc, #100]	; (8003e9c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x78>)
 8003e36:	6940      	ldr	r0, [r0, #20]
 8003e38:	f7fe fc9a 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8003e3c:	2001      	movs	r0, #1
}
 8003e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8003e42:	6803      	ldr	r3, [r0, #0]
 8003e44:	69c2      	ldr	r2, [r0, #28]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	4641      	mov	r1, r8
 8003e4a:	4798      	blx	r3
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d1f6      	bne.n	8003e3e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x1a>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8003e50:	4605      	mov	r5, r0
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8003e52:	f107 0904 	add.w	r9, r7, #4
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7ff f892 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8003e5c:	6803      	ldr	r3, [r0, #0]
 8003e5e:	429d      	cmp	r5, r3
 8003e60:	d210      	bcs.n	8003e84 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x60>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7ff f962 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8003e68:	4601      	mov	r1, r0
 8003e6a:	b908      	cbnz	r0, 8003e70 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x4c>
 8003e6c:	f7fe fcb2 	bl	80027d4 <_Z9AbortImplv>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f859 2035 	ldr.w	r2, [r9, r5, lsl #3]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	4620      	mov	r0, r4
 8003e7a:	4798      	blx	r3
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d1de      	bne.n	8003e3e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x1a>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8003e80:	3501      	adds	r5, #1
 8003e82:	e7e8      	b.n	8003e56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x32>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	463a      	mov	r2, r7
 8003e88:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4620      	mov	r0, r4
 8003e92:	47a8      	blx	r5
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d1d2      	bne.n	8003e3e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x1a>
  model_is_allocating_ = false;
 8003e98:	7620      	strb	r0, [r4, #24]
  return kTfLiteOk;
 8003e9a:	e7d0      	b.n	8003e3e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x1a>
 8003e9c:	0800c4ae 	.word	0x0800c4ae

08003ea0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8003ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8003ea8:	4615      	mov	r5, r2
 8003eaa:	b90a      	cbnz	r2, 8003eb0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
 8003eac:	f7fe fc92 	bl	80027d4 <_Z9AbortImplv>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8003eb0:	2400      	movs	r4, #0
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f7ff f864 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8003eb8:	6803      	ldr	r3, [r0, #0]
 8003eba:	42a3      	cmp	r3, r4
 8003ebc:	d91a      	bls.n	8003ef4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x54>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	f7ff f934 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d0f1      	beq.n	8003eac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8003ec8:	f7fe ff90 	bl	8002dec <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003ecc:	68b3      	ldr	r3, [r6, #8]
            alignof(NodeAndRegistration)));
 8003ece:	681a      	ldr	r2, [r3, #0]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8003ed0:	0141      	lsls	r1, r0, #5
 8003ed2:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	2204      	movs	r2, #4
 8003eda:	47c0      	blx	r8
    if (output == nullptr) {
 8003edc:	b930      	cbnz	r0, 8003eec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4c>
      TF_LITE_REPORT_ERROR(
 8003ede:	4906      	ldr	r1, [pc, #24]	; (8003ef8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x58>)
 8003ee0:	6970      	ldr	r0, [r6, #20]
 8003ee2:	f7fe fc45 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8003ee6:	2001      	movs	r0, #1
}
 8003ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8003eec:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8003ef0:	3401      	adds	r4, #1
 8003ef2:	e7de      	b.n	8003eb2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e7f7      	b.n	8003ee8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
 8003ef8:	0800c4f9 	.word	0x0800c4f9

08003efc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 8003efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003f04:	4606      	mov	r6, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8003f06:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
 8003f08:	4688      	mov	r8, r1
 8003f0a:	4617      	mov	r7, r2
 8003f0c:	461d      	mov	r5, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8003f0e:	f7ff f837 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8003f12:	4649      	mov	r1, r9
 8003f14:	f7ff f90a 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  TFLITE_DCHECK(subgraph != nullptr);
 8003f18:	b908      	cbnz	r0, 8003f1e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x22>
 8003f1a:	f7fe fc5b 	bl	80027d4 <_Z9AbortImplv>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8003f1e:	6833      	ldr	r3, [r6, #0]
 8003f20:	4630      	mov	r0, r6
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (PopulateTfLiteTensorFromFlatbuffer(
 8003f24:	f04f 0a00 	mov.w	sl, #0
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8003f28:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 8003f2a:	e9cd 9a00 	strd	r9, sl, [sp]
          /*allocate_temp=*/false) != kTfLiteOk) {
 8003f2e:	6833      	ldr	r3, [r6, #0]
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8003f30:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(
 8003f32:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8003f36:	4602      	mov	r2, r0
 8003f38:	462b      	mov	r3, r5
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	47d8      	blx	fp
 8003f40:	b140      	cbz	r0, 8003f54 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x58>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8003f42:	490b      	ldr	r1, [pc, #44]	; (8003f70 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>)
 8003f44:	6970      	ldr	r0, [r6, #20]
 8003f46:	f7fe fc13 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8003f4a:	4654      	mov	r4, sl
}
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	b003      	add	sp, #12
 8003f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (subgraph_allocations != nullptr) {
 8003f54:	2f00      	cmp	r7, #0
 8003f56:	d0f9      	beq.n	8003f4c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x50>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8003f58:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	435d      	muls	r5, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	195a      	adds	r2, r3, r5
    tensor->data.data =
 8003f64:	595b      	ldr	r3, [r3, r5]
 8003f66:	6123      	str	r3, [r4, #16]
    tensor->dims =
 8003f68:	6853      	ldr	r3, [r2, #4]
 8003f6a:	6163      	str	r3, [r4, #20]
 8003f6c:	e7ee      	b.n	8003f4c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x50>
 8003f6e:	bf00      	nop
 8003f70:	0800c52f 	.word	0x0800c52f

08003f74 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 8003f74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8003f7c:	4607      	mov	r7, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8003f7e:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
 8003f80:	4688      	mov	r8, r1
 8003f82:	4616      	mov	r6, r2
 8003f84:	461d      	mov	r5, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8003f86:	f7fe fffb 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	f7ff f8ce 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  TFLITE_DCHECK(subgraph != nullptr);
 8003f90:	b908      	cbnz	r0, 8003f96 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x22>
 8003f92:	f7fe fc1f 	bl	80027d4 <_Z9AbortImplv>
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8003f96:	6878      	ldr	r0, [r7, #4]
                                                     alignof(TfLiteTensor)));
 8003f98:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2120      	movs	r1, #32
 8003fa0:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	e9cd 9200 	strd	r9, r2, [sp]
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8003fa8:	683b      	ldr	r3, [r7, #0]
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8003faa:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8003fac:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47d0      	blx	sl
 8003fba:	b140      	cbz	r0, 8003fce <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x5a>
    TF_LITE_REPORT_ERROR(
 8003fbc:	490a      	ldr	r1, [pc, #40]	; (8003fe8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>)
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f7fe fbd6 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8003fc4:	2400      	movs	r4, #0
}
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	b002      	add	sp, #8
 8003fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (subgraph_allocations != nullptr) {
 8003fce:	2e00      	cmp	r6, #0
 8003fd0:	d0f9      	beq.n	8003fc6 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x52>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8003fd2:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	435d      	muls	r5, r3
 8003fda:	6873      	ldr	r3, [r6, #4]
 8003fdc:	195a      	adds	r2, r3, r5
    tensor->data.data =
 8003fde:	595b      	ldr	r3, [r3, r5]
 8003fe0:	6123      	str	r3, [r4, #16]
    tensor->dims =
 8003fe2:	6853      	ldr	r3, [r2, #4]
 8003fe4:	6163      	str	r3, [r4, #20]
 8003fe6:	e7ee      	b.n	8003fc6 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x52>
 8003fe8:	0800c579 	.word	0x0800c579

08003fec <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
 8003fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	b087      	sub	sp, #28
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8003ff2:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
    int subgraph_idx, bool allocate_temp) {
 8003ff6:	4606      	mov	r6, r0
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8003ff8:	4608      	mov	r0, r1
    int subgraph_idx, bool allocate_temp) {
 8003ffa:	461c      	mov	r4, r3
 8003ffc:	4691      	mov	r9, r2
 8003ffe:	460d      	mov	r5, r1
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8004000:	f7fe ffbe 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004004:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004006:	f7ff f891 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800400a:	f7fe ffaf 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
 800400e:	4621      	mov	r1, r4
 8004010:	f7ff fec2 	bl	8003d98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 8004014:	210c      	movs	r1, #12
 8004016:	9005      	str	r0, [sp, #20]
 8004018:	4628      	mov	r0, r5
 800401a:	f7fe fbc8 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800401e:	9b05      	ldr	r3, [sp, #20]
 8004020:	4604      	mov	r4, r0
 8004022:	b110      	cbz	r0, 800402a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3e>
 8004024:	592c      	ldr	r4, [r5, r4]
    auto p = data_ + field_offset;
 8004026:	1828      	adds	r0, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004028:	4404      	add	r4, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800402a:	6972      	ldr	r2, [r6, #20]
 800402c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004030:	e9cd 4200 	strd	r4, r2, [sp]
 8004034:	4641      	mov	r1, r8
 8004036:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800403a:	4638      	mov	r0, r7
 800403c:	f7ff fdd4 	bl	8003be8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
}
 8004040:	b007      	add	sp, #28
 8004042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004048 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	ed2d 8b02 	vpush	{d8}
 8004050:	b083      	sub	sp, #12
 8004052:	4604      	mov	r4, r0
 8004054:	460d      	mov	r5, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8004056:	9201      	str	r2, [sp, #4]
 8004058:	b90a      	cbnz	r2, 800405e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800405a:	f7fe fbbb 	bl	80027d4 <_Z9AbortImplv>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800405e:	2700      	movs	r7, #0
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8004060:	f04f 0a0c 	mov.w	sl, #12
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8004064:	4628      	mov	r0, r5
 8004066:	f7fe ff8b 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 800406a:	6803      	ldr	r3, [r0, #0]
 800406c:	42bb      	cmp	r3, r7
 800406e:	d946      	bls.n	80040fe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb6>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8004070:	4639      	mov	r1, r7
 8004072:	f7ff f85b 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8004076:	4681      	mov	r9, r0
 8004078:	2800      	cmp	r0, #0
 800407a:	d0ee      	beq.n	800405a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
    size_t alloc_count = subgraph->tensors()->size();
 800407c:	f7fe ff76 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
  uoffset_t size() const { return EndianScalar(length_); }
 8004080:	f8d0 b000 	ldr.w	fp, [r0]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8004084:	68a0      	ldr	r0, [r4, #8]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8004086:	6803      	ldr	r3, [r0, #0]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8004088:	fb0a f60b 	mul.w	r6, sl, fp
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2204      	movs	r2, #4
 8004090:	4631      	mov	r1, r6
 8004092:	4798      	blx	r3
    if (tensors == nullptr) {
 8004094:	4680      	mov	r8, r0
 8004096:	b950      	cbnz	r0, 80040ae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x66>
      TF_LITE_REPORT_ERROR(
 8004098:	491a      	ldr	r1, [pc, #104]	; (8004104 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>)
 800409a:	4632      	mov	r2, r6
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800409c:	6960      	ldr	r0, [r4, #20]
 800409e:	f7fe fb67 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 80040a2:	2001      	movs	r0, #1
}
 80040a4:	b003      	add	sp, #12
 80040a6:	ecbd 8b02 	vpop	{d8}
 80040aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t i = 0; i < alloc_count; ++i) {
 80040ae:	2600      	movs	r6, #0
 80040b0:	45b3      	cmp	fp, r6
 80040b2:	d01e      	beq.n	80040f2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
          *subgraph->tensors()->Get(i), model->buffers(), error_reporter_,
 80040b4:	4648      	mov	r0, r9
 80040b6:	f7fe ff59 	bl	8002f6c <_ZNK6tflite8SubGraph7tensorsEv>
 80040ba:	4631      	mov	r1, r6
 80040bc:	f7ff fe6c 	bl	8003d98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 80040c0:	210c      	movs	r1, #12
 80040c2:	ee08 0a10 	vmov	s16, r0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f7fe fb71 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80040cc:	b168      	cbz	r0, 80040ea <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    auto p = data_ + field_offset;
 80040ce:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80040d0:	5828      	ldr	r0, [r5, r0]
 80040d2:	4401      	add	r1, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80040d4:	6962      	ldr	r2, [r4, #20]
 80040d6:	ee18 0a10 	vmov	r0, s16
 80040da:	fb0a 8306 	mla	r3, sl, r6, r8
 80040de:	f7ff fb71 	bl	80037c4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
 80040e2:	b120      	cbz	r0, 80040ee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 80040e4:	4908      	ldr	r1, [pc, #32]	; (8004108 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>)
 80040e6:	4632      	mov	r2, r6
 80040e8:	e7d8      	b.n	800409c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x54>
 80040ea:	4601      	mov	r1, r0
 80040ec:	e7f2      	b.n	80040d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    for (size_t i = 0; i < alloc_count; ++i) {
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7de      	b.n	80040b0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x68>
    subgraph_allocations[subgraph_idx].tensors = tensors;
 80040f2:	9b01      	ldr	r3, [sp, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	f843 8037 	str.w	r8, [r3, r7, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80040fa:	3701      	adds	r7, #1
 80040fc:	e7b2      	b.n	8004064 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c>
  return kTfLiteOk;
 80040fe:	2000      	movs	r0, #0
 8004100:	e7d0      	b.n	80040a4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5c>
 8004102:	bf00      	nop
 8004104:	0800c5bd 	.word	0x0800c5bd
 8004108:	0800c604 	.word	0x0800c604

0800410c <_ZN6tflite12MicroContextD0Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
 800410c:	4770      	bx	lr

0800410e <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
 800410e:	6840      	ldr	r0, [r0, #4]
 8004110:	6803      	ldr	r3, [r0, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	4718      	bx	r3

08004116 <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
 8004116:	6903      	ldr	r3, [r0, #16]
}
 8004118:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800411c:	4770      	bx	lr

0800411e <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 800411e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8004120:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 8004124:	460b      	mov	r3, r1
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8004126:	6955      	ldr	r5, [r2, #20]
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 8004128:	6821      	ldr	r1, [r4, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 800412a:	9500      	str	r5, [sp, #0]
 800412c:	684d      	ldr	r5, [r1, #4]
 800412e:	6912      	ldr	r2, [r2, #16]
 8004130:	68c1      	ldr	r1, [r0, #12]
 8004132:	4620      	mov	r0, r4
 8004134:	47a8      	blx	r5
}
 8004136:	b003      	add	sp, #12
 8004138:	bd30      	pop	{r4, r5, pc}

0800413a <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 800413a:	6840      	ldr	r0, [r0, #4]
 800413c:	6803      	ldr	r3, [r0, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4718      	bx	r3

08004142 <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 8004142:	6882      	ldr	r2, [r0, #8]
              .tensors[tensor_idx];
 8004144:	e9d2 3004 	ldrd	r3, r0, [r2, #16]
 8004148:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
 800414c:	200c      	movs	r0, #12
              .tensors[tensor_idx];
 800414e:	685b      	ldr	r3, [r3, #4]
}
 8004150:	fb00 3001 	mla	r0, r0, r1, r3
 8004154:	4770      	bx	lr

08004156 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
 8004156:	b410      	push	{r4}
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8004158:	6884      	ldr	r4, [r0, #8]
  return allocator_.RequestScratchBufferInArena(
 800415a:	6840      	ldr	r0, [r0, #4]
                                                       int* buffer_idx) {
 800415c:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
 800415e:	6962      	ldr	r2, [r4, #20]
}
 8004160:	f85d 4b04 	ldr.w	r4, [sp], #4
  return allocator_.RequestScratchBufferInArena(
 8004164:	f7ff bbf6 	b.w	8003954 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

08004168 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 8004168:	b530      	push	{r4, r5, lr}
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 800416a:	4d04      	ldr	r5, [pc, #16]	; (800417c <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x14>)
 800416c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8004170:	2300      	movs	r3, #0
 8004172:	e9c0 5100 	strd	r5, r1, [r0]
 8004176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800417a:	bd30      	pop	{r4, r5, pc}
 800417c:	0800c68c 	.word	0x0800c68c

08004180 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:
  if (index >= 0 && index < max_size) {
 8004180:	2900      	cmp	r1, #0
 8004182:	db04      	blt.n	800418e <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
 8004184:	4291      	cmp	r1, r2
 8004186:	da02      	bge.n	800418e <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
    const int tensor_index = tensor_indices[index];
 8004188:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
 800418c:	4770      	bx	lr
  return -1;
 800418e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004192:	4770      	bx	lr

08004194 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
                                                    int index) {
 8004194:	460b      	mov	r3, r1
 8004196:	4611      	mov	r1, r2
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8004198:	681a      	ldr	r2, [r3, #0]
                                                    int index) {
 800419a:	b510      	push	{r4, lr}
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 800419c:	1d13      	adds	r3, r2, #4
 800419e:	6812      	ldr	r2, [r2, #0]
                                                    int index) {
 80041a0:	4604      	mov	r4, r0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 80041a2:	f7ff ffed 	bl	8004180 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 80041a6:	1e01      	subs	r1, r0, #0
 80041a8:	db05      	blt.n	80041b6 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	4620      	mov	r0, r4
 80041ae:	695b      	ldr	r3, [r3, #20]
}
 80041b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 80041b4:	4718      	bx	r3
}
 80041b6:	2000      	movs	r0, #0
 80041b8:	bd10      	pop	{r4, pc}

080041ba <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
                                                     int index) {
 80041ba:	460b      	mov	r3, r1
 80041bc:	4611      	mov	r1, r2
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 80041be:	685a      	ldr	r2, [r3, #4]
                                                     int index) {
 80041c0:	b510      	push	{r4, lr}
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 80041c2:	1d13      	adds	r3, r2, #4
 80041c4:	6812      	ldr	r2, [r2, #0]
                                                     int index) {
 80041c6:	4604      	mov	r4, r0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 80041c8:	f7ff ffda 	bl	8004180 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 80041cc:	1e01      	subs	r1, r0, #0
 80041ce:	db05      	blt.n	80041dc <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	4620      	mov	r0, r4
 80041d4:	695b      	ldr	r3, [r3, #20]
}
 80041d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 80041da:	4718      	bx	r3
}
 80041dc:	2000      	movs	r0, #0
 80041de:	bd10      	pop	{r4, pc}

080041e0 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
    const TfLiteNode* node, int index) {
 80041e0:	460b      	mov	r3, r1
 80041e2:	4611      	mov	r1, r2
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80041e4:	689a      	ldr	r2, [r3, #8]
    const TfLiteNode* node, int index) {
 80041e6:	b510      	push	{r4, lr}
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80041e8:	1d13      	adds	r3, r2, #4
 80041ea:	6812      	ldr	r2, [r2, #0]
    const TfLiteNode* node, int index) {
 80041ec:	4604      	mov	r4, r0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80041ee:	f7ff ffc7 	bl	8004180 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 80041f2:	1e01      	subs	r1, r0, #0
 80041f4:	db05      	blt.n	8004202 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	4620      	mov	r0, r4
 80041fa:	695b      	ldr	r3, [r3, #20]
}
 80041fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 8004200:	4718      	bx	r3
}
 8004202:	2000      	movs	r0, #0
 8004204:	bd10      	pop	{r4, pc}

08004206 <_ZN6tflite12MicroContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void MicroContext::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
  scratch_buffer_handles_ = scratch_buffer_handles;
 8004206:	6101      	str	r1, [r0, #16]
}
 8004208:	4770      	bx	lr

0800420a <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 800420a:	b40e      	push	{r1, r2, r3}
 800420c:	b50f      	push	{r0, r1, r2, r3, lr}
 800420e:	ab05      	add	r3, sp, #20
 8004210:	f853 1b04 	ldr.w	r1, [r3], #4
 8004214:	9101      	str	r1, [sp, #4]
  va_list args;
  va_start(args, format);
 8004216:	9303      	str	r3, [sp, #12]
  GetMicroErrorReporter()->Report(format, args);
 8004218:	f000 f834 	bl	8004284 <_ZN6tflite21GetMicroErrorReporterEv>
 800421c:	6803      	ldr	r3, [r0, #0]
 800421e:	9a03      	ldr	r2, [sp, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	9901      	ldr	r1, [sp, #4]
 8004224:	4798      	blx	r3
  va_end(args);
}
 8004226:	b004      	add	sp, #16
 8004228:	f85d eb04 	ldr.w	lr, [sp], #4
 800422c:	b003      	add	sp, #12
 800422e:	4770      	bx	lr

08004230 <_ZN6tflite18MicroErrorReporterD0Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8004230:	4770      	bx	lr
	...

08004234 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8004234:	b500      	push	{lr}
 8004236:	b0c1      	sub	sp, #260	; 0x104
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800423c:	4668      	mov	r0, sp
 800423e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004242:	f000 fd5b 	bl	8004cfc <MicroVsnprintf>
  DebugLog(log_buffer);
 8004246:	4668      	mov	r0, sp
 8004248:	f7fc ff90 	bl	800116c <DebugLog>
  DebugLog("\r\n");
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
 800424e:	f7fc ff8d 	bl	800116c <DebugLog>
#endif
}
 8004252:	b041      	add	sp, #260	; 0x104
 8004254:	f85d fb04 	ldr.w	pc, [sp], #4
 8004258:	0800ae5c 	.word	0x0800ae5c

0800425c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800425c:	b508      	push	{r3, lr}
 800425e:	4608      	mov	r0, r1
  Log(format, args);
 8004260:	4611      	mov	r1, r2
 8004262:	f7ff ffe7 	bl	8004234 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
 8004266:	2000      	movs	r0, #0
 8004268:	bd08      	pop	{r3, pc}

0800426a <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
 800426a:	b40f      	push	{r0, r1, r2, r3}
 800426c:	b507      	push	{r0, r1, r2, lr}
 800426e:	a904      	add	r1, sp, #16
 8004270:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
 8004274:	9101      	str	r1, [sp, #4]
  Log(format, args);
 8004276:	f7ff ffdd 	bl	8004234 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
 800427a:	b003      	add	sp, #12
 800427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004280:	b004      	add	sp, #16
 8004282:	4770      	bx	lr

08004284 <_ZN6tflite21GetMicroErrorReporterEv>:
  if (error_reporter_ == nullptr) {
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <_ZN6tflite21GetMicroErrorReporterEv+0x14>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	b91a      	cbnz	r2, 8004292 <_ZN6tflite21GetMicroErrorReporterEv+0xe>
class MicroErrorReporter : public ErrorReporter {
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <_ZN6tflite21GetMicroErrorReporterEv+0x18>)
 800428c:	4904      	ldr	r1, [pc, #16]	; (80042a0 <_ZN6tflite21GetMicroErrorReporterEv+0x1c>)
 800428e:	6011      	str	r1, [r2, #0]
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	200019ac 	.word	0x200019ac
 800429c:	200019b0 	.word	0x200019b0
 80042a0:	0800c6c0 	.word	0x0800c6c0

080042a4 <_ZN6tflite10MicroGraphD0Ev>:
  if (model != nullptr) {
    subgraphs_ = model->subgraphs();
  }
}

MicroGraph::~MicroGraph() {}
 80042a4:	4770      	bx	lr

080042a6 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 80042a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int previous_subgraph_idx = current_subgraph_index_;
 80042aa:	f8d0 9014 	ldr.w	r9, [r0, #20]
TfLiteStatus MicroGraph::InitSubgraphs() {
 80042ae:	4604      	mov	r4, r0

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80042b0:	2600      	movs	r6, #0
 80042b2:	69e3      	ldr	r3, [r4, #28]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429e      	cmp	r6, r3
 80042b8:	d220      	bcs.n	80042fc <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x56>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80042ba:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
 80042bc:	6166      	str	r6, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80042be:	4631      	mov	r1, r6
 80042c0:	f7fe fda2 	bl	8002e08 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80042c4:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 80042c8:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
 80042ca:	2700      	movs	r7, #0
 80042cc:	4547      	cmp	r7, r8
 80042ce:	d013      	beq.n	80042f8 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x52>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	f853 500a 	ldr.w	r5, [r3, sl]
 80042d6:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      const TfLiteRegistration* registration =
 80042da:	69eb      	ldr	r3, [r5, #28]
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
        init_data_size = node->custom_initial_data_size;
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 80042dc:	6929      	ldr	r1, [r5, #16]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80042de:	695a      	ldr	r2, [r3, #20]
        init_data_size = 0;
      }
      if (registration->init) {
 80042e0:	681b      	ldr	r3, [r3, #0]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80042e2:	2a20      	cmp	r2, #32
        init_data_size = node->custom_initial_data_size;
 80042e4:	bf0c      	ite	eq
 80042e6:	e9d5 1205 	ldrdeq	r1, r2, [r5, #20]
        init_data_size = 0;
 80042ea:	2200      	movne	r2, #0
      if (registration->init) {
 80042ec:	b113      	cbz	r3, 80042f4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x4e>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 80042ee:	6860      	ldr	r0, [r4, #4]
 80042f0:	4798      	blx	r3
        node->user_data =
 80042f2:	60e8      	str	r0, [r5, #12]
    for (size_t i = 0; i < operators_size; ++i) {
 80042f4:	3701      	adds	r7, #1
 80042f6:	e7e9      	b.n	80042cc <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x26>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80042f8:	3601      	adds	r6, #1
 80042fa:	e7da      	b.n	80042b2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 80042fc:	f8c4 9014 	str.w	r9, [r4, #20]

  return kTfLiteOk;
}
 8004300:	2000      	movs	r0, #0
 8004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004306 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8004306:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int previous_subgraph_idx = current_subgraph_index_;
 800430a:	f8d0 8014 	ldr.w	r8, [r0, #20]
TfLiteStatus MicroGraph::FreeSubgraphs() {
 800430e:	4604      	mov	r4, r0

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8004310:	2500      	movs	r5, #0
 8004312:	69e3      	ldr	r3, [r4, #28]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429d      	cmp	r5, r3
 8004318:	d21a      	bcs.n	8004350 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x4a>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800431a:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
 800431c:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800431e:	4629      	mov	r1, r5
 8004320:	f7fe fd72 	bl	8002e08 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8004324:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8004328:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
 800432a:	2600      	movs	r6, #0
 800432c:	42be      	cmp	r6, r7
 800432e:	d00d      	beq.n	800434c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	f853 3009 	ldr.w	r3, [r3, r9]
 8004336:	eb03 1346 	add.w	r3, r3, r6, lsl #5
      const TfLiteRegistration* registration =
 800433a:	69da      	ldr	r2, [r3, #28]
          subgraph_allocations_[subgraph_idx]
              .node_and_registrations[i]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800433c:	b122      	cbz	r2, 8004348 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x42>
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	b112      	cbz	r2, 8004348 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x42>
        registration->free(context_, node->user_data);
 8004342:	68d9      	ldr	r1, [r3, #12]
 8004344:	6860      	ldr	r0, [r4, #4]
 8004346:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
 8004348:	3601      	adds	r6, #1
 800434a:	e7ef      	b.n	800432c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x26>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800434c:	3501      	adds	r5, #1
 800434e:	e7e0      	b.n	8004312 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xc>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8004350:	f8c4 8014 	str.w	r8, [r4, #20]

  return kTfLiteOk;
}
 8004354:	2000      	movs	r0, #0
 8004356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800435c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800435c:	6943      	ldr	r3, [r0, #20]
 800435e:	2b20      	cmp	r3, #32
 8004360:	d101      	bne.n	8004366 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
 8004362:	6980      	ldr	r0, [r0, #24]
 8004364:	4770      	bx	lr
  return (v < low) || (high < v);
 8004366:	2b9e      	cmp	r3, #158	; 0x9e
  return EnumNamesBuiltinOperator()[index];
 8004368:	bf9a      	itte	ls
 800436a:	4a02      	ldrls	r2, [pc, #8]	; (8004374 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x18>)
 800436c:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_SIGN)) return "";
 8004370:	4801      	ldrhi	r0, [pc, #4]	; (8004378 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
}
 8004372:	4770      	bx	lr
 8004374:	0800b750 	.word	0x0800b750
 8004378:	0800ae5e 	.word	0x0800ae5e

0800437c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
TfLiteStatus MicroGraph::PrepareSubgraphs() {
 800437c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int previous_subgraph_idx = current_subgraph_index_;
 8004380:	f8d0 9014 	ldr.w	r9, [r0, #20]
TfLiteStatus MicroGraph::PrepareSubgraphs() {
 8004384:	4604      	mov	r4, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8004386:	2500      	movs	r5, #0
 8004388:	69e3      	ldr	r3, [r4, #28]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	429d      	cmp	r5, r3
 800438e:	d22c      	bcs.n	80043ea <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x6e>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8004390:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
 8004392:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8004394:	4629      	mov	r1, r5
 8004396:	f7fe fd37 	bl	8002e08 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800439a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 800439e:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
 80043a0:	2600      	movs	r6, #0
 80043a2:	4546      	cmp	r6, r8
 80043a4:	d01f      	beq.n	80043e6 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x6a>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80043a6:	6923      	ldr	r3, [r4, #16]
 80043a8:	f853 100a 	ldr.w	r1, [r3, sl]
 80043ac:	eb01 1146 	add.w	r1, r1, r6, lsl #5
      const TfLiteRegistration* registration =
 80043b0:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      if (registration->prepare != nullptr) {
 80043b4:	f8db 3008 	ldr.w	r3, [fp, #8]
 80043b8:	b17b      	cbz	r3, 80043da <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x5e>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 80043ba:	6860      	ldr	r0, [r4, #4]
 80043bc:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
 80043be:	4607      	mov	r7, r0
 80043c0:	b158      	cbz	r0, 80043da <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x5e>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 80043c2:	4658      	mov	r0, fp
 80043c4:	f7ff ffca 	bl	800435c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80043c8:	463b      	mov	r3, r7
 80043ca:	4601      	mov	r1, r0
 80043cc:	4632      	mov	r2, r6
 80043ce:	4809      	ldr	r0, [pc, #36]	; (80043f4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x78>)
 80043d0:	f7ff ff4b 	bl	800426a <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 80043d4:	2001      	movs	r0, #1
}
 80043d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 80043da:	4631      	mov	r1, r6
 80043dc:	68e0      	ldr	r0, [r4, #12]
 80043de:	f7ff fae9 	bl	80039b4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7dd      	b.n	80043a2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x26>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80043e6:	3501      	adds	r5, #1
 80043e8:	e7ce      	b.n	8004388 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xc>
  current_subgraph_index_ = previous_subgraph_idx;
 80043ea:	f8c4 9014 	str.w	r9, [r4, #20]
  return kTfLiteOk;
 80043ee:	2000      	movs	r0, #0
 80043f0:	e7f1      	b.n	80043d6 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x5a>
 80043f2:	bf00      	nop
 80043f4:	0800c6cc 	.word	0x0800c6cc

080043f8 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
  }

  return kTfLiteOk;
}

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 80043f8:	b508      	push	{r3, lr}
 80043fa:	6880      	ldr	r0, [r0, #8]
 80043fc:	f7fe fdc0 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004400:	6800      	ldr	r0, [r0, #0]
 8004402:	bd08      	pop	{r3, pc}

08004404 <_ZN6tflite19ScopedMicroProfilerD1Ev>:
    if (profiler_ != nullptr) {
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
 8004404:	b510      	push	{r4, lr}
 8004406:	4604      	mov	r4, r0
    if (profiler_ != nullptr) {
 8004408:	6840      	ldr	r0, [r0, #4]
 800440a:	b118      	cbz	r0, 8004414 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
 800440c:	6803      	ldr	r3, [r0, #0]
 800440e:	6821      	ldr	r1, [r4, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4798      	blx	r3
    }
  }
 8004414:	4620      	mov	r0, r4
 8004416:	bd10      	pop	{r4, pc}

08004418 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
 8004418:	69c3      	ldr	r3, [r0, #28]
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 800441a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441e:	681a      	ldr	r2, [r3, #0]
  int previous_subgraph_idx = current_subgraph_index_;
 8004420:	f8d0 a014 	ldr.w	sl, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
 8004424:	6141      	str	r1, [r0, #20]
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8004426:	4291      	cmp	r1, r2
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8004428:	4604      	mov	r4, r0
 800442a:	460f      	mov	r7, r1
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800442c:	d307      	bcc.n	800443e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x26>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800442e:	4826      	ldr	r0, [pc, #152]	; (80044c8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xb0>)
 8004430:	f7ff ff1b 	bl	800426a <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8004434:	2501      	movs	r5, #1
}
 8004436:	4628      	mov	r0, r5
 8004438:	b003      	add	sp, #12
 800443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800443e:	6880      	ldr	r0, [r0, #8]
 8004440:	f7fe fce2 	bl	8002e08 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  for (size_t i = 0; i < operators_size; ++i) {
 8004444:	2600      	movs	r6, #0
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8004446:	4680      	mov	r8, r0
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8004448:	00ff      	lsls	r7, r7, #3
      : profiler_(profiler) {
 800444a:	46b3      	mov	fp, r6
  for (size_t i = 0; i < operators_size; ++i) {
 800444c:	4546      	cmp	r6, r8
 800444e:	d037      	beq.n	80044c0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xa8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	59dd      	ldr	r5, [r3, r7]
 8004454:	eb05 1546 	add.w	r5, r5, r6, lsl #5
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8004458:	f8d5 901c 	ldr.w	r9, [r5, #28]
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800445c:	4648      	mov	r0, r9
 800445e:	f7ff ff7d 	bl	800435c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	4601      	mov	r1, r0
 8004466:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004468:	e9cd b000 	strd	fp, r0, [sp]
    if (profiler_ != nullptr) {
 800446c:	b118      	cbz	r0, 8004476 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x5e>
      event_handle_ = profiler_->BeginEvent(tag);
 800446e:	6803      	ldr	r3, [r0, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4798      	blx	r3
 8004474:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
 8004476:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800447a:	b91b      	cbnz	r3, 8004484 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x6c>
  DebugLog("HALTED\n");
 800447c:	4813      	ldr	r0, [pc, #76]	; (80044cc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xb4>)
 800447e:	f7fc fe75 	bl	800116c <DebugLog>
  while (1) {
 8004482:	e7fe      	b.n	8004482 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x6a>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 8004484:	4629      	mov	r1, r5
 8004486:	6860      	ldr	r0, [r4, #4]
 8004488:	4798      	blx	r3
 800448a:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6803      	ldr	r3, [r0, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
 8004494:	2d01      	cmp	r5, #1
 8004496:	d10c      	bne.n	80044b2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x9a>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 8004498:	4648      	mov	r0, r9
 800449a:	f7ff ff5f 	bl	800435c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800449e:	462b      	mov	r3, r5
 80044a0:	4601      	mov	r1, r0
 80044a2:	4632      	mov	r2, r6
 80044a4:	480a      	ldr	r0, [pc, #40]	; (80044d0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xb8>)
 80044a6:	f7ff fee0 	bl	800426a <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80044aa:	4668      	mov	r0, sp
 80044ac:	f7ff ffaa 	bl	8004404 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 80044b0:	e7c1      	b.n	8004436 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x1e>
    } else if (invoke_status != kTfLiteOk) {
 80044b2:	2d00      	cmp	r5, #0
 80044b4:	d1f9      	bne.n	80044aa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x92>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 80044b6:	4668      	mov	r0, sp
 80044b8:	f7ff ffa4 	bl	8004404 <_ZN6tflite19ScopedMicroProfilerD1Ev>
  for (size_t i = 0; i < operators_size; ++i) {
 80044bc:	3601      	adds	r6, #1
 80044be:	e7c5      	b.n	800444c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x34>
  current_subgraph_index_ = previous_subgraph_idx;
 80044c0:	f8c4 a014 	str.w	sl, [r4, #20]
  return kTfLiteOk;
 80044c4:	2500      	movs	r5, #0
 80044c6:	e7b6      	b.n	8004436 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x1e>
 80044c8:	0800c702 	.word	0x0800c702
 80044cc:	0800ac80 	.word	0x0800ac80
 80044d0:	0800c734 	.word	0x0800c734

080044d4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4604      	mov	r4, r0
      resource_variables_(resource_variables) {
 80044d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80044dc:	4807      	ldr	r0, [pc, #28]	; (80044fc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x28>)
 80044de:	2300      	movs	r3, #0
 80044e0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80044e4:	9b02      	ldr	r3, [sp, #8]
 80044e6:	61a3      	str	r3, [r4, #24]
 80044e8:	e9c4 0100 	strd	r0, r1, [r4]
  if (model != nullptr) {
 80044ec:	b11a      	cbz	r2, 80044f6 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x22>
    subgraphs_ = model->subgraphs();
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7fe fd46 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 80044f4:	61e0      	str	r0, [r4, #28]
}
 80044f6:	4620      	mov	r0, r4
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop
 80044fc:	0800c770 	.word	0x0800c770

08004500 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
  subgraph_allocations_ = subgraph_allocations;
 8004500:	6101      	str	r1, [r0, #16]
}
 8004502:	4770      	bx	lr

08004504 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
 8004504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004508:	4605      	mov	r5, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800450a:	2700      	movs	r7, #0
 800450c:	69e8      	ldr	r0, [r5, #28]
 800450e:	6803      	ldr	r3, [r0, #0]
 8004510:	429f      	cmp	r7, r3
 8004512:	d268      	bcs.n	80045e6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe2>
  return_type operator[](uoffset_t i) const { return Get(i); }
 8004514:	4639      	mov	r1, r7
 8004516:	f7fe fe09 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800451a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800451e:	4680      	mov	r8, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8004520:	2600      	movs	r6, #0
    auto field_offset = GetOptionalFieldOffset(field);
 8004522:	2104      	movs	r1, #4
 8004524:	4640      	mov	r0, r8
 8004526:	f7fe f942 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800452a:	2800      	cmp	r0, #0
 800452c:	d064      	beq.n	80045f8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
 800452e:	f858 3000 	ldr.w	r3, [r8, r0]
    auto p = data_ + field_offset;
 8004532:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004536:	18ca      	adds	r2, r1, r3
 8004538:	58cb      	ldr	r3, [r1, r3]
 800453a:	429e      	cmp	r6, r3
 800453c:	d251      	bcs.n	80045e2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xde>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800453e:	3204      	adds	r2, #4
    p += i * sizeof(uoffset_t);
 8004540:	eb02 0186 	add.w	r1, r2, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004544:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
 8004548:	eb01 0b03 	add.w	fp, r1, r3
    auto field_offset = GetOptionalFieldOffset(field);
 800454c:	4658      	mov	r0, fp
 800454e:	210e      	movs	r1, #14
 8004550:	f7fe f92d 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004554:	2800      	cmp	r0, #0
 8004556:	d03e      	beq.n	80045d6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd2>
      if (tensor->is_variable()) {
 8004558:	f81b 2000 	ldrb.w	r2, [fp, r0]
 800455c:	2a00      	cmp	r2, #0
 800455e:	d03a      	beq.n	80045d6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd2>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8004560:	692a      	ldr	r2, [r5, #16]
 8004562:	444a      	add	r2, r9
 8004564:	230c      	movs	r3, #12
 8004566:	6850      	ldr	r0, [r2, #4]
 8004568:	fb03 fa06 	mul.w	sl, r3, r6
 800456c:	a901      	add	r1, sp, #4
 800456e:	4450      	add	r0, sl
 8004570:	f7fe fcda 	bl	8002f28 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8004574:	4604      	mov	r4, r0
 8004576:	2800      	cmp	r0, #0
 8004578:	d13a      	bne.n	80045f0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    auto field_offset = GetOptionalFieldOffset(field);
 800457a:	2106      	movs	r1, #6
 800457c:	4658      	mov	r0, fp
 800457e:	f7fe f916 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004582:	b350      	cbz	r0, 80045da <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd6>
        if (tensor->type() == tflite::TensorType_INT8) {
 8004584:	f91b 2000 	ldrsb.w	r2, [fp, r0]
 8004588:	2a09      	cmp	r2, #9
 800458a:	d128      	bne.n	80045de <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xda>
    auto field_offset = GetOptionalFieldOffset(field);
 800458c:	210c      	movs	r1, #12
 800458e:	4658      	mov	r0, fp
 8004590:	f7fe f90d 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004594:	b1a0      	cbz	r0, 80045c0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xbc>
 8004596:	f85b 4000 	ldr.w	r4, [fp, r0]
    auto p = data_ + field_offset;
 800459a:	eb0b 0200 	add.w	r2, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800459e:	4414      	add	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 80045a0:	210a      	movs	r1, #10
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7fe f903 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80045a8:	b330      	cbz	r0, 80045f8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
 80045aa:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
 80045ac:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80045ae:	18d1      	adds	r1, r2, r3
    FLATBUFFERS_ASSERT(i < size());
 80045b0:	58d3      	ldr	r3, [r2, r3]
 80045b2:	b93b      	cbnz	r3, 80045c4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc0>
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf8>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfc>)
 80045b8:	4812      	ldr	r0, [pc, #72]	; (8004604 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x100>)
 80045ba:	21aa      	movs	r1, #170	; 0xaa
 80045bc:	f003 fb7e 	bl	8007cbc <__assert_func>
 80045c0:	4604      	mov	r4, r0
 80045c2:	e7ed      	b.n	80045a0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x9c>
          value = tensor->quantization()->zero_point()->Get(0);
 80045c4:	6849      	ldr	r1, [r1, #4]
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 80045c6:	692b      	ldr	r3, [r5, #16]
 80045c8:	9a01      	ldr	r2, [sp, #4]
 80045ca:	444b      	add	r3, r9
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f853 000a 	ldr.w	r0, [r3, sl]
 80045d2:	f003 fbfb 	bl	8007dcc <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80045d6:	3601      	adds	r6, #1
 80045d8:	e7a3      	b.n	8004522 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
        int value = 0;
 80045da:	4601      	mov	r1, r0
 80045dc:	e7f3      	b.n	80045c6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc2>
 80045de:	4621      	mov	r1, r4
 80045e0:	e7f1      	b.n	80045c6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc2>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80045e2:	3701      	adds	r7, #1
 80045e4:	e792      	b.n	800450c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x8>
  if (resource_variables_ != nullptr) {
 80045e6:	69a8      	ldr	r0, [r5, #24]
 80045e8:	b108      	cbz	r0, 80045ee <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xea>
    resource_variables_->ResetAll();
 80045ea:	f000 fb3d 	bl	8004c68 <_ZN6tflite22MicroResourceVariables8ResetAllEv>
  return kTfLiteOk;
 80045ee:	2400      	movs	r4, #0
}
 80045f0:	4620      	mov	r0, r4
 80045f2:	b003      	add	sp, #12
 80045f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 80045f8:	6803      	ldr	r3, [r0, #0]
 80045fa:	deff      	udf	#255	; 0xff
 80045fc:	0800bb4d 	.word	0x0800bb4d
 8004600:	0800c34c 	.word	0x0800c34c
 8004604:	0800bc52 	.word	0x0800bc52

08004608 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4605      	mov	r5, r0
 800460c:	460c      	mov	r4, r1
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800460e:	6880      	ldr	r0, [r0, #8]
                                               int input_idx) {
 8004610:	4616      	mov	r6, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8004612:	f7fe fcb5 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004616:	4621      	mov	r1, r4
 8004618:	f7fe fd88 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800461c:	2106      	movs	r1, #6
 800461e:	f7fe fde3 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004622:	4631      	mov	r1, r6
 8004624:	f7fe fd56 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8004628:	6929      	ldr	r1, [r5, #16]
 800462a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
}
 800462e:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8004630:	6863      	ldr	r3, [r4, #4]
}
 8004632:	fb02 3000 	mla	r0, r2, r0, r3
 8004636:	bd70      	pop	{r4, r5, r6, pc}

08004638 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4605      	mov	r5, r0
 800463c:	460c      	mov	r4, r1
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800463e:	6880      	ldr	r0, [r0, #8]
                                                int output_idx) {
 8004640:	4616      	mov	r6, r2
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 8004642:	f7fe fc9d 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004646:	4621      	mov	r1, r4
 8004648:	f7fe fd70 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800464c:	2108      	movs	r1, #8
 800464e:	f7fe fdcb 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004652:	4631      	mov	r1, r6
 8004654:	f7fe fd3e 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8004658:	6929      	ldr	r1, [r5, #16]
 800465a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
}
 800465e:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8004660:	6863      	ldr	r3, [r4, #4]
}
 8004662:	fb02 3000 	mla	r0, r2, r0, r3
 8004666:	bd70      	pop	{r4, r5, r6, pc}

08004668 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 8004668:	b507      	push	{r0, r1, r2, lr}
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800466a:	6880      	ldr	r0, [r0, #8]
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 800466c:	9101      	str	r1, [sp, #4]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800466e:	f7fe fc87 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004672:	9901      	ldr	r1, [sp, #4]
 8004674:	f7fe fd5a 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8004678:	2108      	movs	r1, #8
 800467a:	f7fe fdb5 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
}
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	b003      	add	sp, #12
 8004682:	f85d fb04 	ldr.w	pc, [sp], #4

08004686 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 8004686:	b507      	push	{r0, r1, r2, lr}
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 8004688:	6880      	ldr	r0, [r0, #8]
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800468a:	9101      	str	r1, [sp, #4]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800468c:	f7fe fc78 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004690:	9901      	ldr	r1, [sp, #4]
 8004692:	f7fe fd4b 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8004696:	2106      	movs	r1, #6
 8004698:	f7fe fda6 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
}
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	b003      	add	sp, #12
 80046a0:	f85d fb04 	ldr.w	pc, [sp], #4

080046a4 <_ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj>:

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
 80046a4:	68c0      	ldr	r0, [r0, #12]
// TODO(b/213010668): migrate all existing kernels to use MicroContext, delete
// these functions, and remove corresponding members from the TfLiteContext
// struct for TFLM.
inline void* MicroContextAllocatePersistentBuffer(TfLiteContext* ctx,
                                                  size_t bytes) {
  return GetMicroContext(ctx)->AllocatePersistentBuffer(bytes);
 80046a6:	6803      	ldr	r3, [r0, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	4718      	bx	r3

080046ac <_ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 80046ac:	68c0      	ldr	r0, [r0, #12]
}
inline TfLiteStatus MicroContextRequestScratchBufferInArena(TfLiteContext* ctx,
                                                            size_t bytes,
                                                            int* buffer_idx) {
  return GetMicroContext(ctx)->RequestScratchBufferInArena(bytes, buffer_idx);
 80046ae:	6803      	ldr	r3, [r0, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4718      	bx	r3

080046b4 <_ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 80046b4:	68c0      	ldr	r0, [r0, #12]
}
inline void* MicroContextGetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  return GetMicroContext(ctx)->GetScratchBuffer(buffer_idx);
 80046b6:	6803      	ldr	r3, [r0, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	4718      	bx	r3

080046bc <_ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 80046bc:	68c0      	ldr	r0, [r0, #12]
}
inline TfLiteTensor* MicroContextGetTensor(const struct TfLiteContext* context,
                                           int tensor_idx) {
  return GetMicroContext(context)->AllocateTempTfLiteTensor(tensor_idx);
 80046be:	6803      	ldr	r3, [r0, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4718      	bx	r3

080046c4 <_ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 80046c4:	68c0      	ldr	r0, [r0, #12]
}
inline TfLiteEvalTensor* MicroContextGetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  return GetMicroContext(context)->GetEvalTensor(tensor_idx);
 80046c6:	6803      	ldr	r3, [r0, #0]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	4718      	bx	r3

080046cc <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType>:
  void* external_context() { return external_context_payload_; }
 80046cc:	68c3      	ldr	r3, [r0, #12]
}
inline TfLiteExternalContext* MicroContextGetExternalContext(
    TfLiteContext* context, TfLiteExternalContextType unused) {
  return reinterpret_cast<TfLiteExternalContext*>(
      GetMicroContext(context)->external_context());
}
 80046ce:	6958      	ldr	r0, [r3, #20]
 80046d0:	4770      	bx	lr
	...

080046d4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
 80046d4:	289e      	cmp	r0, #158	; 0x9e
  return EnumNamesBuiltinOperator()[index];
 80046d6:	bf9a      	itte	ls
 80046d8:	4b02      	ldrls	r3, [pc, #8]	; (80046e4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x10>)
 80046da:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_SIGN)) return "";
 80046de:	4802      	ldrhi	r0, [pc, #8]	; (80046e8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x14>)
}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	0800b750 	.word	0x0800b750
 80046e8:	0800ae5e 	.word	0x0800ae5e

080046ec <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 80046ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
 80046f2:	6087      	str	r7, [r0, #8]
 80046f4:	f100 080c 	add.w	r8, r0, #12
MicroInterpreter::MicroInterpreter(const Model* model,
 80046f8:	4604      	mov	r4, r0
 80046fa:	461e      	mov	r6, r3
      micro_context_(&allocator_, model_, &graph_) {
 80046fc:	e9c0 1200 	strd	r1, r2, [r0]
MicroInterpreter::MicroInterpreter(const Model* model,
 8004700:	460d      	mov	r5, r1
      micro_context_(&allocator_, model_, &graph_) {
 8004702:	225c      	movs	r2, #92	; 0x5c
 8004704:	2100      	movs	r1, #0
 8004706:	4640      	mov	r0, r8
 8004708:	f003 fb60 	bl	8007dcc <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800470c:	9908      	ldr	r1, [sp, #32]
 800470e:	463a      	mov	r2, r7
 8004710:	4630      	mov	r0, r6
 8004712:	f7ff f8a3 	bl	800385c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      micro_context_(&allocator_, model_, &graph_) {
 8004716:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 800471a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800471c:	66a0      	str	r0, [r4, #104]	; 0x68
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800471e:	4603      	mov	r3, r0
      micro_context_(&allocator_, model_, &graph_) {
 8004720:	9200      	str	r2, [sp, #0]
 8004722:	4641      	mov	r1, r8
 8004724:	462a      	mov	r2, r5
 8004726:	4638      	mov	r0, r7
 8004728:	f7ff fed4 	bl	80044d4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
 800472c:	4626      	mov	r6, r4
 800472e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004732:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8004736:	f856 2b9c 	ldr.w	r2, [r6], #156
 800473a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800473c:	2500      	movs	r5, #0
 800473e:	463b      	mov	r3, r7
 8004740:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8004744:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8004748:	4630      	mov	r0, r6
 800474a:	f7ff fd0d 	bl	8004168 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(&micro_context_);
  context_.ReportError = MicroContextReportOpError;
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE+0x80>)
 8004750:	6223      	str	r3, [r4, #32]
  context_.GetTensor = MicroContextGetTensor;
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE+0x84>)
 8004754:	65e3      	str	r3, [r4, #92]	; 0x5c
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE+0x88>)
 8004758:	6623      	str	r3, [r4, #96]	; 0x60
  context_.profiler = profiler;
 800475a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  context_.impl_ = static_cast<void*>(&micro_context_);
 800475c:	61a6      	str	r6, [r4, #24]
}
 800475e:	4620      	mov	r0, r4
  context_.profiler = profiler;
 8004760:	6423      	str	r3, [r4, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 8004762:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
}
 8004766:	b002      	add	sp, #8
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476c:	0800420b 	.word	0x0800420b
 8004770:	080046bd 	.word	0x080046bd
 8004774:	080046c5 	.word	0x080046c5

08004778 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>:
  // pointer should be at least as long as this interpreter. TFLM supports only
  // one external context.
  TfLiteStatus SetMicroExternalContext(void* external_context_payload);

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8004778:	b508      	push	{r3, lr}
    return model_->subgraphs()->Get(0)->inputs()->size();
 800477a:	f7fe fc01 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 800477e:	2100      	movs	r1, #0
 8004780:	f7fe fcd4 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8004784:	2106      	movs	r1, #6
 8004786:	f7fe fd2f 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  }
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	bd08      	pop	{r3, pc}
	...

08004790 <_ZN6tflite16MicroInterpreter5inputEj>:
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
  }
  return graph_.InvokeSubgraph(0);
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4605      	mov	r5, r0
  const size_t length = inputs_size();
 8004794:	6800      	ldr	r0, [r0, #0]
TfLiteTensor* MicroInterpreter::input(size_t index) {
 8004796:	460c      	mov	r4, r1
  const size_t length = inputs_size();
 8004798:	f7ff ffee 	bl	8004778 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  if (index >= length) {
 800479c:	42a0      	cmp	r0, r4
  const size_t length = inputs_size();
 800479e:	4603      	mov	r3, r0
  if (index >= length) {
 80047a0:	d806      	bhi.n	80047b0 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80047a2:	4906      	ldr	r1, [pc, #24]	; (80047bc <_ZN6tflite16MicroInterpreter5inputEj+0x2c>)
 80047a4:	68a8      	ldr	r0, [r5, #8]
 80047a6:	4622      	mov	r2, r4
 80047a8:	f7fd ffe2 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 80047ac:	2000      	movs	r0, #0
  }
  return input_tensors_[index];
}
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
  return input_tensors_[index];
 80047b0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80047b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047b8:	e7f9      	b.n	80047ae <_ZN6tflite16MicroInterpreter5inputEj+0x1e>
 80047ba:	bf00      	nop
 80047bc:	0800c7a0 	.word	0x0800c7a0

080047c0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 80047c0:	b508      	push	{r3, lr}
    return model_->subgraphs()->Get(0)->outputs()->size();
 80047c2:	f7fe fbdd 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 80047c6:	2100      	movs	r1, #0
 80047c8:	f7fe fcb0 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80047cc:	2108      	movs	r1, #8
 80047ce:	f7fe fd0b 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  }
 80047d2:	6800      	ldr	r0, [r0, #0]
 80047d4:	bd08      	pop	{r3, pc}
	...

080047d8 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4605      	mov	r5, r0
  const size_t length = outputs_size();
 80047dc:	6800      	ldr	r0, [r0, #0]
TfLiteTensor* MicroInterpreter::output(size_t index) {
 80047de:	460c      	mov	r4, r1
  const size_t length = outputs_size();
 80047e0:	f7ff ffee 	bl	80047c0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  if (index >= length) {
 80047e4:	42a0      	cmp	r0, r4
  const size_t length = outputs_size();
 80047e6:	4603      	mov	r3, r0
  if (index >= length) {
 80047e8:	d806      	bhi.n	80047f8 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80047ea:	4906      	ldr	r1, [pc, #24]	; (8004804 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>)
 80047ec:	68a8      	ldr	r0, [r5, #8]
 80047ee:	4622      	mov	r2, r4
 80047f0:	f7fd ffbe 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 80047f4:	2000      	movs	r0, #0
  }
  return output_tensors_[index];
}
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
  return output_tensors_[index];
 80047f8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80047fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004800:	e7f9      	b.n	80047f6 <_ZN6tflite16MicroInterpreter6outputEj+0x1e>
 8004802:	bf00      	nop
 8004804:	0800c7cb 	.word	0x0800c7cb

08004808 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
 8004808:	b538      	push	{r3, r4, r5, lr}
  if (graph_.GetAllocations() != nullptr) {
 800480a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
MicroInterpreter::~MicroInterpreter() {
 800480c:	4604      	mov	r4, r0
    graph_.FreeSubgraphs();
 800480e:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  if (graph_.GetAllocations() != nullptr) {
 8004812:	b113      	cbz	r3, 800481a <_ZN6tflite16MicroInterpreterD1Ev+0x12>
    graph_.FreeSubgraphs();
 8004814:	4628      	mov	r0, r5
 8004816:	f7ff fd76 	bl	8004306 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800481a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 800481e:	f7ff fc75 	bl	800410c <_ZN6tflite12MicroContextD0Ev>
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff fd3e 	bl	80042a4 <_ZN6tflite10MicroGraphD0Ev>
}
 8004828:	4620      	mov	r0, r4
 800482a:	bd38      	pop	{r3, r4, r5, pc}

0800482c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	ed2d 8b02 	vpush	{d8}
 8004834:	4604      	mov	r4, r0
 8004836:	b08b      	sub	sp, #44	; 0x2c
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8004838:	f04f 0a00 	mov.w	sl, #0
 800483c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8004840:	f7ff fdda 	bl	80043f8 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 8004844:	4550      	cmp	r0, sl
 8004846:	f340 80f4 	ble.w	8004a32 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800484a:	6826      	ldr	r6, [r4, #0]
 800484c:	4630      	mov	r0, r6
 800484e:	f7fe fb97 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004852:	4651      	mov	r1, sl
 8004854:	f7fe fc6a 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8004858:	4680      	mov	r8, r0
 800485a:	b918      	cbnz	r0, 8004864 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x38>
  DebugLog("HALTED\n");
 800485c:	4877      	ldr	r0, [pc, #476]	; (8004a3c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x210>)
 800485e:	f7fc fc85 	bl	800116c <DebugLog>
  while (1) {
 8004862:	e7fe      	b.n	8004862 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
 8004864:	2106      	movs	r1, #6
 8004866:	4630      	mov	r0, r6
 8004868:	f7fd ffa1 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800486c:	b340      	cbz	r0, 80048c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x94>
 800486e:	5835      	ldr	r5, [r6, r0]
    auto p = data_ + field_offset;
 8004870:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004872:	441d      	add	r5, r3
        allocator_.GetBuiltinDataAllocator();
 8004874:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004876:	f7ff f99f 	bl	8003bb8 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800487a:	ee08 0a10 	vmov	s16, r0
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800487e:	4640      	mov	r0, r8
 8004880:	f7fe fab4 	bl	8002dec <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8004884:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004888:	9004      	str	r0, [sp, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	2700      	movs	r7, #0
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	429f      	cmp	r7, r3
 8004892:	f000 80cb 	beq.w	8004a2c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x200>
    auto field_offset = GetOptionalFieldOffset(field);
 8004896:	210a      	movs	r1, #10
 8004898:	4640      	mov	r0, r8
 800489a:	f7fd ff88 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800489e:	2800      	cmp	r0, #0
 80048a0:	f000 80c9 	beq.w	8004a36 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20a>
 80048a4:	f858 2000 	ldr.w	r2, [r8, r0]
    auto p = data_ + field_offset;
 80048a8:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80048ac:	188b      	adds	r3, r1, r2
    FLATBUFFERS_ASSERT(i < size());
 80048ae:	588a      	ldr	r2, [r1, r2]
 80048b0:	4297      	cmp	r7, r2
 80048b2:	d307      	bcc.n	80048c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
 80048b4:	4b62      	ldr	r3, [pc, #392]	; (8004a40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x214>)
 80048b6:	4a63      	ldr	r2, [pc, #396]	; (8004a44 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x218>)
 80048b8:	4863      	ldr	r0, [pc, #396]	; (8004a48 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21c>)
 80048ba:	21aa      	movs	r1, #170	; 0xaa
 80048bc:	f003 f9fe 	bl	8007cbc <__assert_func>
 80048c0:	4605      	mov	r5, r0
 80048c2:	e7d7      	b.n	8004874 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x48>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80048c4:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 80048c6:	eb03 0687 	add.w	r6, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048ca:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80048ce:	441e      	add	r6, r3
    auto field_offset = GetOptionalFieldOffset(field);
 80048d0:	2104      	movs	r1, #4
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7fd ff6b 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80048d8:	b150      	cbz	r0, 80048f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc4>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80048da:	f856 9000 	ldr.w	r9, [r6, r0]
      if (index >= opcodes->size()) {
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	454b      	cmp	r3, r9
 80048e2:	d807      	bhi.n	80048f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 80048e4:	4859      	ldr	r0, [pc, #356]	; (8004a4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x220>)
 80048e6:	4649      	mov	r1, r9
          MicroPrintf("Did not find a parser for %s",
 80048e8:	f7ff fcbf 	bl	800426a <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e020      	b.n	8004932 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x106>
 80048f0:	4681      	mov	r9, r0
 80048f2:	e7f4      	b.n	80048de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb2>
 80048f4:	1d2b      	adds	r3, r5, #4
    p += i * sizeof(uoffset_t);
 80048f6:	eb03 0b89 	add.w	fp, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048fa:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
                                          .node_and_registrations[i]
 80048fe:	9a01      	ldr	r2, [sp, #4]
 8004900:	449b      	add	fp, r3

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8004902:	017b      	lsls	r3, r7, #5
 8004904:	9303      	str	r3, [sp, #12]
 8004906:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004908:	589b      	ldr	r3, [r3, r2]
 800490a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800490e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8004912:	331c      	adds	r3, #28
 8004914:	4658      	mov	r0, fp
 8004916:	f7fe f82b 	bl	8002970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
 800491a:	b180      	cbz	r0, 800493e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x112>
 800491c:	9001      	str	r0, [sp, #4]
        MicroPrintf("Failed to get registration from op code %s\n ",
 800491e:	4658      	mov	r0, fp
 8004920:	f002 f856 	bl	80069d0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8004924:	f7ff fed6 	bl	80046d4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8004928:	4601      	mov	r1, r0
 800492a:	4849      	ldr	r0, [pc, #292]	; (8004a50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x224>)
 800492c:	f7ff fc9d 	bl	800426a <_Z11MicroPrintfPKcz>
        return status;
 8004930:	9b01      	ldr	r3, [sp, #4]
}
 8004932:	4618      	mov	r0, r3
 8004934:	b00b      	add	sp, #44	; 0x2c
 8004936:	ecbd 8b02 	vpop	{d8}
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     .registration;
 800493e:	9901      	ldr	r1, [sp, #4]
                                     .node_and_registrations[i]
 8004940:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
                                     .registration;
 8004942:	5852      	ldr	r2, [r2, r1]
 8004944:	0179      	lsls	r1, r7, #5
 8004946:	440a      	add	r2, r1
 8004948:	69d2      	ldr	r2, [r2, #28]
      if (registration == nullptr) {
 800494a:	b912      	cbnz	r2, 8004952 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800494c:	4841      	ldr	r0, [pc, #260]	; (8004a54 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x228>)
 800494e:	4649      	mov	r1, r9
 8004950:	e7ca      	b.n	80048e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xbc>
      BuiltinOperator op_type =
 8004952:	f8d2 b014 	ldr.w	fp, [r2, #20]
      unsigned char* builtin_data = nullptr;
 8004956:	9009      	str	r0, [sp, #36]	; 0x24
      if (op_type == BuiltinOperator_CUSTOM) {
 8004958:	f1bb 0f20 	cmp.w	fp, #32
    auto field_offset = GetOptionalFieldOffset(field);
 800495c:	f04f 010e 	mov.w	r1, #14
 8004960:	4630      	mov	r0, r6
 8004962:	d143      	bne.n	80049ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c0>
 8004964:	f7fd ff23 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004968:	2800      	cmp	r0, #0
 800496a:	d137      	bne.n	80049dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1b0>
      size_t custom_data_size = 0;
 800496c:	f04f 0b00 	mov.w	fp, #0
      const char* custom_data = nullptr;
 8004970:	f8cd b008 	str.w	fp, [sp, #8]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004974:	2106      	movs	r1, #6
 8004976:	4630      	mov	r0, r6
 8004978:	f7fe fc36 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          FlatBufferVectorToTfLiteTypeArray(op->inputs());
 800497c:	f7fe fa6c 	bl	8002e58 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 8004980:	2108      	movs	r1, #8
 8004982:	9005      	str	r0, [sp, #20]
 8004984:	4630      	mov	r0, r6
 8004986:	f7fe fc2f 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 800498a:	f7fe fa65 	bl	8002e58 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800498e:	9a01      	ldr	r2, [sp, #4]
 8004990:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 8004992:	9006      	str	r0, [sp, #24]
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8004994:	589b      	ldr	r3, [r3, r2]
 8004996:	9a03      	ldr	r2, [sp, #12]
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	eb03 0902 	add.w	r9, r3, r2
      *node = {};
 800499e:	2100      	movs	r1, #0
 80049a0:	221c      	movs	r2, #28
 80049a2:	4648      	mov	r0, r9
 80049a4:	f003 fa12 	bl	8007dcc <memset>
      node->inputs = inputs_array;
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	9a03      	ldr	r2, [sp, #12]
 80049ac:	9905      	ldr	r1, [sp, #20]
 80049ae:	5099      	str	r1, [r3, r2]
      node->outputs = outputs_array;
 80049b0:	9b06      	ldr	r3, [sp, #24]
 80049b2:	f8c9 3004 	str.w	r3, [r9, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 80049b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b8:	f8c9 3010 	str.w	r3, [r9, #16]
      node->custom_initial_data = custom_data;
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	2114      	movs	r1, #20
      node->custom_initial_data_size = custom_data_size;
 80049c0:	e9c9 3b05 	strd	r3, fp, [r9, #20]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7fe fc0f 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 80049ca:	b128      	cbz	r0, 80049d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
 80049cc:	6803      	ldr	r3, [r0, #0]
 80049ce:	b11b      	cbz	r3, 80049d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
            FlatBufferVectorToTfLiteTypeArray(op->intermediates());
 80049d0:	f7fe fa42 	bl	8002e58 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
        node->intermediates =
 80049d4:	f8c9 0008 	str.w	r0, [r9, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 80049d8:	3701      	adds	r7, #1
 80049da:	e758      	b.n	800488e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x62>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049dc:	5833      	ldr	r3, [r6, r0]
    auto p = data_ + field_offset;
 80049de:	1832      	adds	r2, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049e0:	18d1      	adds	r1, r2, r3
 80049e2:	3104      	adds	r1, #4
  uoffset_t size() const { return EndianScalar(length_); }
 80049e4:	f852 b003 	ldr.w	fp, [r2, r3]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80049e8:	9102      	str	r1, [sp, #8]
  uoffset_t size() const { return EndianScalar(length_); }
 80049ea:	e7c3      	b.n	8004974 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x148>
    auto field_offset = GetOptionalFieldOffset(field);
 80049ec:	f7fd fedf 	bl	80027ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049f0:	b128      	cbz	r0, 80049fe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d2>
          MicroPrintf(
 80049f2:	4658      	mov	r0, fp
 80049f4:	f7ff fe6e 	bl	80046d4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80049f8:	4601      	mov	r1, r0
 80049fa:	4817      	ldr	r0, [pc, #92]	; (8004a58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>)
 80049fc:	e774      	b.n	80048e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xbc>
            op_resolver_.GetOpDataParser(op_type);
 80049fe:	6860      	ldr	r0, [r4, #4]
 8004a00:	6803      	ldr	r3, [r0, #0]
 8004a02:	4659      	mov	r1, fp
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	4798      	blx	r3
        if (parser == nullptr) {
 8004a08:	4681      	mov	r9, r0
 8004a0a:	b928      	cbnz	r0, 8004a18 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>
          MicroPrintf("Did not find a parser for %s",
 8004a0c:	4658      	mov	r0, fp
 8004a0e:	f7ff fe61 	bl	80046d4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8004a12:	4601      	mov	r1, r0
 8004a14:	4811      	ldr	r0, [pc, #68]	; (8004a5c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x230>)
 8004a16:	e767      	b.n	80048e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xbc>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 8004a18:	ab09      	add	r3, sp, #36	; 0x24
 8004a1a:	ee18 2a10 	vmov	r2, s16
 8004a1e:	68a1      	ldr	r1, [r4, #8]
 8004a20:	4630      	mov	r0, r6
 8004a22:	47c8      	blx	r9
 8004a24:	4603      	mov	r3, r0
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d0a0      	beq.n	800496c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x140>
 8004a2a:	e782      	b.n	8004932 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x106>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8004a2c:	f10a 0a01 	add.w	sl, sl, #1
 8004a30:	e704      	b.n	800483c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10>
  return kTfLiteOk;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e77d      	b.n	8004932 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x106>
 8004a36:	6803      	ldr	r3, [r0, #0]
 8004a38:	deff      	udf	#255	; 0xff
 8004a3a:	bf00      	nop
 8004a3c:	0800ac80 	.word	0x0800ac80
 8004a40:	0800bb4d 	.word	0x0800bb4d
 8004a44:	0800beb0 	.word	0x0800beb0
 8004a48:	0800bc52 	.word	0x0800bc52
 8004a4c:	0800c7f7 	.word	0x0800c7f7
 8004a50:	0800c821 	.word	0x0800c821
 8004a54:	0800c84e 	.word	0x0800c84e
 8004a58:	0800c86f 	.word	0x0800c86f
 8004a5c:	0800c8b5 	.word	0x0800c8b5

08004a60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
 8004a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8004a64:	6801      	ldr	r1, [r0, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
 8004a66:	4604      	mov	r4, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8004a68:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004a6a:	f7fe ff25 	bl	80038b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
 8004a6e:	4601      	mov	r1, r0
 8004a70:	b958      	cbnz	r0, 8004a8a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004a72:	4966      	ldr	r1, [pc, #408]	; (8004c0c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>)
 8004a74:	68a0      	ldr	r0, [r4, #8]
 8004a76:	f7fd fe7b 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    return kTfLiteError;
 8004a80:	2501      	movs	r5, #1
}
 8004a82:	4628      	mov	r0, r5
 8004a84:	b003      	add	sp, #12
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  graph_.SetSubgraphAllocations(allocations);
 8004a8a:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff fd36 	bl	8004500 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff fec9 	bl	800482c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d1f0      	bne.n	8004a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22>
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 8004aa0:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>)
  context_.GetExternalContext = nullptr;
 8004aa2:	6360      	str	r0, [r4, #52]	; 0x34
  context_.GetScratchBuffer = nullptr;
 8004aa4:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 8004aa8:	6463      	str	r3, [r4, #68]	; 0x44
  TF_LITE_ENSURE_STATUS(graph_.InitSubgraphs());
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff fbfb 	bl	80042a6 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d1e5      	bne.n	8004a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22>
  context_.RequestScratchBufferInArena =
 8004ab6:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b4>)
 8004ab8:	64e3      	str	r3, [r4, #76]	; 0x4c
  context_.GetExternalContext = MicroContextGetExternalContext;
 8004aba:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b8>)
 8004abc:	6363      	str	r3, [r4, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs());
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f7ff fc5c 	bl	800437c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d1db      	bne.n	8004a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22>
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 8004aca:	4b54      	ldr	r3, [pc, #336]	; (8004c1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1bc>)
  context_.AllocatePersistentBuffer = nullptr;
 8004acc:	6460      	str	r0, [r4, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8004ace:	64e0      	str	r0, [r4, #76]	; 0x4c
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 8004ad0:	6523      	str	r3, [r4, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8004ad2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004ad4:	6821      	ldr	r1, [r4, #0]
 8004ad6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004ad8:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8004adc:	f7ff f9a2 	bl	8003e24 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d1cd      	bne.n	8004a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22>
  micro_context_.SetScratchBufferHandles(scratch_buffer_handles_);
 8004ae6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004aea:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 8004aee:	f7ff fb8a 	bl	8004206 <_ZN6tflite12MicroContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8004af2:	6ea7      	ldr	r7, [r4, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	f7ff fe3f 	bl	8004778 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
 8004afa:	683b      	ldr	r3, [r7, #0]
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8004afc:	0081      	lsls	r1, r0, #2
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	4638      	mov	r0, r7
 8004b02:	4798      	blx	r3
  input_tensors_ =
 8004b04:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
  if (input_tensors_ == nullptr) {
 8004b08:	b940      	cbnz	r0, 8004b1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbc>
    TF_LITE_REPORT_ERROR(
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	f7ff fe34 	bl	8004778 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
 8004b10:	4943      	ldr	r1, [pc, #268]	; (8004c20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c0>)
 8004b12:	0082      	lsls	r2, r0, #2
 8004b14:	68a0      	ldr	r0, [r4, #8]
 8004b16:	f7fd fe2b 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8004b1a:	e7b1      	b.n	8004a80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20>
    return *model_->subgraphs()->Get(0)->inputs();
 8004b1c:	46aa      	mov	sl, r5
  for (size_t i = 0; i < inputs_size(); ++i) {
 8004b1e:	6827      	ldr	r7, [r4, #0]
 8004b20:	4638      	mov	r0, r7
 8004b22:	f7ff fe29 	bl	8004778 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004b26:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  for (size_t i = 0; i < inputs_size(); ++i) {
 8004b2a:	42a8      	cmp	r0, r5
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8004b2c:	f8d8 9000 	ldr.w	r9, [r8]
 8004b30:	4638      	mov	r0, r7
  for (size_t i = 0; i < inputs_size(); ++i) {
 8004b32:	d921      	bls.n	8004b78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
 8004b34:	f7fe fa24 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f7fe faf7 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004b3e:	2106      	movs	r1, #6
 8004b40:	f7fe fb52 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8004b44:	4629      	mov	r1, r5
 8004b46:	f7fe fac5 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004b4a:	f8cd a000 	str.w	sl, [sp]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8004b4e:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004b50:	f8d9 9000 	ldr.w	r9, [r9]
 8004b54:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004b56:	f8d4 b094 	ldr.w	fp, [r4, #148]	; 0x94
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	47c8      	blx	r9
    if (input_tensors_[i] == nullptr) {
 8004b60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004b64:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
    if (input_tensors_[i] == nullptr) {
 8004b68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004b6c:	b913      	cbnz	r3, 8004b74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x114>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004b6e:	492d      	ldr	r1, [pc, #180]	; (8004c24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c4>)
 8004b70:	462a      	mov	r2, r5
 8004b72:	e7cf      	b.n	8004b14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb4>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8004b74:	3501      	adds	r5, #1
 8004b76:	e7d2      	b.n	8004b1e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
          sizeof(TfLiteTensor*) * outputs_size()));
 8004b78:	f7ff fe22 	bl	80047c0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8004b7c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004b80:	0081      	lsls	r1, r0, #2
 8004b82:	4640      	mov	r0, r8
 8004b84:	4798      	blx	r3
  output_tensors_ =
 8004b86:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  if (output_tensors_ == nullptr) {
 8004b8a:	b928      	cbnz	r0, 8004b98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    TF_LITE_REPORT_ERROR(
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	f7ff fe17 	bl	80047c0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
 8004b92:	4925      	ldr	r1, [pc, #148]	; (8004c28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>)
 8004b94:	0082      	lsls	r2, r0, #2
 8004b96:	e7bd      	b.n	8004b14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb4>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8004b98:	2500      	movs	r5, #0
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
 8004b9a:	46a9      	mov	r9, r5
 8004b9c:	6827      	ldr	r7, [r4, #0]
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff fe0e 	bl	80047c0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
 8004ba4:	42a8      	cmp	r0, r5
 8004ba6:	d926      	bls.n	8004bf6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x196>
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f7fe f9e9 	bl	8002f80 <_ZNK6tflite5Model9subgraphsEv>
 8004bae:	2100      	movs	r1, #0
 8004bb0:	f7fe fabc 	bl	800312c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8004bb4:	2108      	movs	r1, #8
 8004bb6:	f7fe fb17 	bl	80031e8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004bba:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fe fa88 	bl	80030d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8004bc4:	f8d8 2000 	ldr.w	r2, [r8]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004bc8:	f8cd 9000 	str.w	r9, [sp]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8004bcc:	4603      	mov	r3, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004bce:	f8d2 b000 	ldr.w	fp, [r2]
 8004bd2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004bd4:	f8d4 a098 	ldr.w	sl, [r4, #152]	; 0x98
 8004bd8:	4639      	mov	r1, r7
 8004bda:	4640      	mov	r0, r8
 8004bdc:	47d8      	blx	fp
    if (output_tensors_[i] == nullptr) {
 8004bde:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8004be2:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
    if (output_tensors_[i] == nullptr) {
 8004be6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004bea:	b913      	cbnz	r3, 8004bf2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x192>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004bec:	490f      	ldr	r1, [pc, #60]	; (8004c2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1cc>)
 8004bee:	462a      	mov	r2, r5
 8004bf0:	e790      	b.n	8004b14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb4>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	e7d2      	b.n	8004b9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13c>
  return graph_.ResetVariableTensors();
}

// TODO: remove this API completely in favor of MicroInterpreter::Reset
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f7ff fc84 	bl	8004504 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	f47f af3f 	bne.w	8004a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22>
  tensors_allocated_ = true;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
  return kTfLiteOk;
 8004c0a:	e73a      	b.n	8004a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22>
 8004c0c:	0800c8d2 	.word	0x0800c8d2
 8004c10:	080046a5 	.word	0x080046a5
 8004c14:	080046ad 	.word	0x080046ad
 8004c18:	080046cd 	.word	0x080046cd
 8004c1c:	080046b5 	.word	0x080046b5
 8004c20:	0800c8f5 	.word	0x0800c8f5
 8004c24:	0800c93e 	.word	0x0800c93e
 8004c28:	0800c963 	.word	0x0800c963
 8004c2c:	0800c9ad 	.word	0x0800c9ad

08004c30 <_ZN6tflite16MicroInterpreter6InvokeEv>:
  if (initialization_status_ != kTfLiteOk) {
 8004c30:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
TfLiteStatus MicroInterpreter::Invoke() {
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
 8004c38:	b12b      	cbz	r3, 8004c46 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004c3a:	490a      	ldr	r1, [pc, #40]	; (8004c64 <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>)
 8004c3c:	6880      	ldr	r0, [r0, #8]
 8004c3e:	f7fd fd97 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8004c42:	2001      	movs	r0, #1
}
 8004c44:	bd10      	pop	{r4, pc}
  if (!tensors_allocated_) {
 8004c46:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8004c4a:	b133      	cbz	r3, 8004c5a <_ZN6tflite16MicroInterpreter6InvokeEv+0x2a>
  return graph_.InvokeSubgraph(0);
 8004c4c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8004c50:	2100      	movs	r1, #0
}
 8004c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.InvokeSubgraph(0);
 8004c56:	f7ff bbdf 	b.w	8004418 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8004c5a:	f7ff ff01 	bl	8004a60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d0f4      	beq.n	8004c4c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c>
 8004c62:	e7ef      	b.n	8004c44 <_ZN6tflite16MicroInterpreter6InvokeEv+0x14>
 8004c64:	0800c9d3 	.word	0x0800c9d3

08004c68 <_ZN6tflite22MicroResourceVariables8ResetAllEv>:
  TFLITE_DCHECK(EvalTensorBytes(tensor) == variable.bytes);
  memcpy(variable.resource_buffer, tensor->data.raw, variable.bytes);
  return kTfLiteOk;
}

TfLiteStatus MicroResourceVariables::ResetAll() {
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
  for (int i = 0; i < num_resource_variables_; i++) {
 8004c6c:	2400      	movs	r4, #0
 8004c6e:	68ab      	ldr	r3, [r5, #8]
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	dd09      	ble.n	8004c88 <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x20>
    MicroResourceVariable variable = resource_variables_[i];
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    memset(variable.resource_buffer, 0, variable.bytes);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	6898      	ldr	r0, [r3, #8]
 8004c80:	f003 f8a4 	bl	8007dcc <memset>
  for (int i = 0; i < num_resource_variables_; i++) {
 8004c84:	3401      	adds	r4, #1
 8004c86:	e7f2      	b.n	8004c6e <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x6>
  }
  return kTfLiteOk;
}
 8004c88:	2000      	movs	r0, #0
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}

08004c8c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
  return start;
}

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8004c8c:	b530      	push	{r4, r5, lr}
 8004c8e:	4603      	mov	r3, r0
  char* current = main;
 8004c90:	4604      	mov	r4, r0
 8004c92:	4620      	mov	r0, r4
  while (*current != 0) {
 8004c94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	d1fa      	bne.n	8004c92 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
    ++current;
  }
  char* current_end = main + (main_max_length - 1);
 8004c9c:	3901      	subs	r1, #1
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
 8004ca2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004ca6:	b121      	cbz	r1, 8004cb2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	d202      	bcs.n	8004cb2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
 8004cac:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
 8004cb0:	e7f7      	b.n	8004ca2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
    ++current;
    ++to_append;
  }
  *current = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	7003      	strb	r3, [r0, #0]
  return current;
}
 8004cb6:	bd30      	pop	{r4, r5, pc}

08004cb8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	460c      	mov	r4, r1
  char* start = buffer;
  do {
    int32_t digit = i % base;
 8004cbc:	fbb0 f6f2 	udiv	r6, r0, r2
 8004cc0:	fb02 0516 	mls	r5, r2, r6, r0
    char character;
    if (digit < 10) {
      character = '0' + digit;
 8004cc4:	b2eb      	uxtb	r3, r5
    if (digit < 10) {
 8004cc6:	2d09      	cmp	r5, #9
      character = '0' + digit;
 8004cc8:	bf94      	ite	ls
 8004cca:	3330      	addls	r3, #48	; 0x30
    } else {
      character = 'a' + (digit - 10);
 8004ccc:	3357      	addhi	r3, #87	; 0x57
    }
    *buffer++ = character;
 8004cce:	4625      	mov	r5, r4
      character = 'a' + (digit - 10);
 8004cd0:	b2db      	uxtb	r3, r3
    i /= base;
  } while (i > 0);
 8004cd2:	4282      	cmp	r2, r0
    *buffer++ = character;
 8004cd4:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
 8004cd8:	d90a      	bls.n	8004cf0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
  *buffer = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
 8004cde:	42a1      	cmp	r1, r4
 8004ce0:	d209      	bcs.n	8004cf6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x3e>
    char tmp = *p1;
 8004ce2:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
 8004ce4:	7822      	ldrb	r2, [r4, #0]
 8004ce6:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
 8004cea:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
 8004cee:	e7f6      	b.n	8004cde <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x26>
 8004cf0:	462c      	mov	r4, r5
    i /= base;
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	e7e2      	b.n	8004cbc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x4>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cfc <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	b095      	sub	sp, #84	; 0x54
 8004d02:	4690      	mov	r8, r2
 8004d04:	9002      	str	r0, [sp, #8]
 8004d06:	461d      	mov	r5, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8004d08:	f101 39ff 	add.w	r9, r1, #4294967295
  int output_index = 0;
 8004d0c:	2400      	movs	r4, #0
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
            output[output_index++] = '\0';
 8004d0e:	9a02      	ldr	r2, [sp, #8]
  while (*current != '\0' && output_index < usable_length) {
 8004d10:	f898 3000 	ldrb.w	r3, [r8]
            output[output_index++] = '\0';
 8004d14:	4621      	mov	r1, r4
 8004d16:	1916      	adds	r6, r2, r4
  while (*current != '\0' && output_index < usable_length) {
 8004d18:	b36b      	cbz	r3, 8004d76 <MicroVsnprintf+0x7a>
 8004d1a:	454c      	cmp	r4, r9
 8004d1c:	da2b      	bge.n	8004d76 <MicroVsnprintf+0x7a>
    if (*current == '%') {
 8004d1e:	2b25      	cmp	r3, #37	; 0x25
      current++;
 8004d20:	f108 0201 	add.w	r2, r8, #1
    if (*current == '%') {
 8004d24:	f040 8116 	bne.w	8004f54 <MicroVsnprintf+0x258>
      switch (*current) {
 8004d28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004d2c:	2b66      	cmp	r3, #102	; 0x66
 8004d2e:	d05b      	beq.n	8004de8 <MicroVsnprintf+0xec>
 8004d30:	d809      	bhi.n	8004d46 <MicroVsnprintf+0x4a>
 8004d32:	2b63      	cmp	r3, #99	; 0x63
 8004d34:	f000 8111 	beq.w	8004f5a <MicroVsnprintf+0x25e>
 8004d38:	2b64      	cmp	r3, #100	; 0x64
 8004d3a:	d018      	beq.n	8004d6e <MicroVsnprintf+0x72>
 8004d3c:	2b25      	cmp	r3, #37	; 0x25
 8004d3e:	f000 8107 	beq.w	8004f50 <MicroVsnprintf+0x254>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8004d42:	4690      	mov	r8, r2
 8004d44:	e7e3      	b.n	8004d0e <MicroVsnprintf+0x12>
      switch (*current) {
 8004d46:	2b75      	cmp	r3, #117	; 0x75
 8004d48:	d028      	beq.n	8004d9c <MicroVsnprintf+0xa0>
 8004d4a:	2b78      	cmp	r3, #120	; 0x78
 8004d4c:	d02f      	beq.n	8004dae <MicroVsnprintf+0xb2>
 8004d4e:	2b73      	cmp	r3, #115	; 0x73
 8004d50:	d1f7      	bne.n	8004d42 <MicroVsnprintf+0x46>
          current++;
          break;
        case 's':
          char* string = va_arg(args, char*);
          int string_idx = 0;
          while (string_idx + output_index < usable_length &&
 8004d52:	f855 2b04 	ldr.w	r2, [r5], #4
 8004d56:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
 8004d58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
 8004d5c:	b1db      	cbz	r3, 8004d96 <MicroVsnprintf+0x9a>
 8004d5e:	3102      	adds	r1, #2
 8004d60:	4589      	cmp	r9, r1
            output[output_index++] = string[string_idx++];
 8004d62:	f806 3b01 	strb.w	r3, [r6], #1
 8004d66:	f104 0401 	add.w	r4, r4, #1
          while (string_idx + output_index < usable_length &&
 8004d6a:	dcf5      	bgt.n	8004d58 <MicroVsnprintf+0x5c>
 8004d6c:	e013      	b.n	8004d96 <MicroVsnprintf+0x9a>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8004d6e:	eba9 0304 	sub.w	r3, r9, r4
 8004d72:	2b0a      	cmp	r3, #10
 8004d74:	dc01      	bgt.n	8004d7a <MicroVsnprintf+0x7e>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
 8004d76:	3401      	adds	r4, #1
 8004d78:	e0f5      	b.n	8004f66 <MicroVsnprintf+0x26a>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8004d7a:	f855 0b04 	ldr.w	r0, [r5], #4
    *buffer++ = '-';
 8004d7e:	4631      	mov	r1, r6
  if (i < 0) {
 8004d80:	2800      	cmp	r0, #0
    *buffer++ = '-';
 8004d82:	bfbe      	ittt	lt
 8004d84:	232d      	movlt	r3, #45	; 0x2d
 8004d86:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
 8004d8a:	4240      	neglt	r0, r0
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8004d8c:	220a      	movs	r2, #10
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8004d8e:	f7ff ff93 	bl	8004cb8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8004d92:	1b80      	subs	r0, r0, r6
          output_index +=
 8004d94:	4404      	add	r4, r0
          current++;
 8004d96:	f108 0202 	add.w	r2, r8, #2
 8004d9a:	e7d2      	b.n	8004d42 <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8004d9c:	eba9 0304 	sub.w	r3, r9, r4
 8004da0:	2b0a      	cmp	r3, #10
 8004da2:	dde8      	ble.n	8004d76 <MicroVsnprintf+0x7a>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8004da4:	f855 0b04 	ldr.w	r0, [r5], #4
 8004da8:	220a      	movs	r2, #10
 8004daa:	4631      	mov	r1, r6
 8004dac:	e7ef      	b.n	8004d8e <MicroVsnprintf+0x92>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8004dae:	eba9 0104 	sub.w	r1, r9, r4
 8004db2:	2909      	cmp	r1, #9
            output[output_index++] = '\0';
 8004db4:	f104 0201 	add.w	r2, r4, #1
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8004db8:	dc06      	bgt.n	8004dc8 <MicroVsnprintf+0xcc>
            output[output_index++] = '\0';
 8004dba:	2300      	movs	r3, #0
 8004dbc:	7033      	strb	r3, [r6, #0]
            output[output_index++] = '\0';
 8004dbe:	4614      	mov	r4, r2
  return output_index;
}
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	b015      	add	sp, #84	; 0x54
 8004dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          output[output_index++] = '0';
 8004dc8:	f04f 0130 	mov.w	r1, #48	; 0x30
 8004dcc:	7031      	strb	r1, [r6, #0]
          output[output_index++] = 'x';
 8004dce:	9902      	ldr	r1, [sp, #8]
 8004dd0:	1ca6      	adds	r6, r4, #2
 8004dd2:	548b      	strb	r3, [r1, r2]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8004dd4:	198c      	adds	r4, r1, r6
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	f855 0b04 	ldr.w	r0, [r5], #4
 8004ddc:	2210      	movs	r2, #16
 8004dde:	f7ff ff6b 	bl	8004cb8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8004de2:	1b00      	subs	r0, r0, r4
          output_index +=
 8004de4:	1984      	adds	r4, r0, r6
          current++;
 8004de6:	e7d6      	b.n	8004d96 <MicroVsnprintf+0x9a>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8004de8:	eba9 0304 	sub.w	r3, r9, r4
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e00:	d4b9      	bmi.n	8004d76 <MicroVsnprintf+0x7a>
              FormatFloat(&output[output_index], va_arg(args, double));
 8004e02:	3507      	adds	r5, #7
 8004e04:	f025 0507 	bic.w	r5, r5, #7
 8004e08:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  char* current_end = buffer + (kFastToBufferSize - 1);
 8004e0c:	f106 032f 	add.w	r3, r6, #47	; 0x2f
 8004e10:	9301      	str	r3, [sp, #4]
              FormatFloat(&output[output_index], va_arg(args, double));
 8004e12:	f7fb fee1 	bl	8000bd8 <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8004e16:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
 8004e1a:	2800      	cmp	r0, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8004e1c:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
 8004e20:	9303      	str	r3, [sp, #12]
    *current = '-';
 8004e22:	4633      	mov	r3, r6
 8004e24:	bfbc      	itt	lt
 8004e26:	222d      	movlt	r2, #45	; 0x2d
 8004e28:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
 8004e2c:	2200      	movs	r2, #0
  if (exponent == 128) {
 8004e2e:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
  const uint32_t fraction = (u & fraction_mask);
 8004e32:	f3c0 0e16 	ubfx	lr, r0, #0, #23
  *current = 0;
 8004e36:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
 8004e38:	d10e      	bne.n	8004e58 <MicroVsnprintf+0x15c>
      current = StrCatStr(current, (current_end - current), "Inf");
 8004e3a:	9a01      	ldr	r2, [sp, #4]
 8004e3c:	1ad1      	subs	r1, r2, r3
    if (fraction == 0) {
 8004e3e:	f1be 0f00 	cmp.w	lr, #0
 8004e42:	d107      	bne.n	8004e54 <MicroVsnprintf+0x158>
      current = StrCatStr(current, (current_end - current), "Inf");
 8004e44:	4a4b      	ldr	r2, [pc, #300]	; (8004f74 <MicroVsnprintf+0x278>)
      current = StrCatStr(current, (current_end - current), "NaN");
 8004e46:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
 8004e48:	f7ff ff20 	bl	8004c8c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8004e4c:	4607      	mov	r7, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8004e4e:	1bbe      	subs	r6, r7, r6
          output_index +=
 8004e50:	4434      	add	r4, r6
          current++;
 8004e52:	e7a0      	b.n	8004d96 <MicroVsnprintf+0x9a>
      current = StrCatStr(current, (current_end - current), "NaN");
 8004e54:	4a48      	ldr	r2, [pc, #288]	; (8004f78 <MicroVsnprintf+0x27c>)
 8004e56:	e7f6      	b.n	8004e46 <MicroVsnprintf+0x14a>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8004e58:	4a48      	ldr	r2, [pc, #288]	; (8004f7c <MicroVsnprintf+0x280>)
 8004e5a:	af04      	add	r7, sp, #16
 8004e5c:	f102 0b08 	add.w	fp, r2, #8
 8004e60:	6810      	ldr	r0, [r2, #0]
 8004e62:	6851      	ldr	r1, [r2, #4]
 8004e64:	46bc      	mov	ip, r7
 8004e66:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004e6a:	3208      	adds	r2, #8
 8004e6c:	455a      	cmp	r2, fp
 8004e6e:	4667      	mov	r7, ip
 8004e70:	d1f6      	bne.n	8004e60 <MicroVsnprintf+0x164>
 8004e72:	6810      	ldr	r0, [r2, #0]
 8004e74:	7912      	ldrb	r2, [r2, #4]
 8004e76:	f8cc 0000 	str.w	r0, [ip]
 8004e7a:	f88c 2004 	strb.w	r2, [ip, #4]
  for (int i = 0; i < scale_shifts_size; ++i) {
 8004e7e:	af04      	add	r7, sp, #16
  uint32_t scaled_fraction = fraction;
 8004e80:	4670      	mov	r0, lr
  for (int i = 0; i < scale_shifts_size; ++i) {
 8004e82:	2200      	movs	r2, #0
    scaled_fraction += (fraction >> scale_shifts[i]);
 8004e84:	f917 1b01 	ldrsb.w	r1, [r7], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
 8004e88:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
 8004e8a:	fa2e f101 	lsr.w	r1, lr, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
 8004e8e:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
 8004e90:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
 8004e92:	d1f7      	bne.n	8004e84 <MicroVsnprintf+0x188>
  *current = '1';
 8004e94:	2231      	movs	r2, #49	; 0x31
 8004e96:	701a      	strb	r2, [r3, #0]
  *current = '.';
 8004e98:	222e      	movs	r2, #46	; 0x2e
 8004e9a:	705a      	strb	r2, [r3, #1]
  *current = 0;
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	709a      	strb	r2, [r3, #2]
  if (current_end - current <= kMaxFractionalDigits) {
 8004ea0:	9a01      	ldr	r2, [sp, #4]
  current += 1;
 8004ea2:	1c9f      	adds	r7, r3, #2
  if (current_end - current <= kMaxFractionalDigits) {
 8004ea4:	eba2 0b07 	sub.w	fp, r2, r7
 8004ea8:	f1bb 0f07 	cmp.w	fp, #7
 8004eac:	ddcf      	ble.n	8004e4e <MicroVsnprintf+0x152>
    *(current + i) = '0';
 8004eae:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
 8004eb2:	f8c3 2003 	str.w	r2, [r3, #3]
 8004eb6:	f8a3 2007 	strh.w	r2, [r3, #7]
  FastUInt32ToBufferLeft(number, number_string, base);
 8004eba:	a908      	add	r1, sp, #32
 8004ebc:	220a      	movs	r2, #10
 8004ebe:	f7ff fefb 	bl	8004cb8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8004ec2:	aa08      	add	r2, sp, #32
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f7ff fee0 	bl	8004c8c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  int fraction_digits = current - previous;
 8004ecc:	1bc3      	subs	r3, r0, r7
  *current = '0';
 8004ece:	f04f 0230 	mov.w	r2, #48	; 0x30
  if (leading_zeros != 0) {
 8004ed2:	f1d3 0107 	rsbs	r1, r3, #7
  *current = '0';
 8004ed6:	7002      	strb	r2, [r0, #0]
  if (leading_zeros != 0) {
 8004ed8:	d012      	beq.n	8004f00 <MicroVsnprintf+0x204>
 8004eda:	4602      	mov	r2, r0
    for (int i = 0; i < fraction_digits; i++) {
 8004edc:	eba0 0c02 	sub.w	ip, r0, r2
 8004ee0:	4563      	cmp	r3, ip
 8004ee2:	dd08      	ble.n	8004ef6 <MicroVsnprintf+0x1fa>
      *(current + leading_zeros) = *current;
 8004ee4:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 8004ee8:	f802 c001 	strb.w	ip, [r2, r1]
      *current = '0';
 8004eec:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004ef0:	f882 c000 	strb.w	ip, [r2]
    for (int i = 0; i < fraction_digits; i++) {
 8004ef4:	e7f2      	b.n	8004edc <MicroVsnprintf+0x1e0>
    current += kMaxFractionalDigits;
 8004ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004efa:	f1c3 0307 	rsb	r3, r3, #7
 8004efe:	4418      	add	r0, r3
 8004f00:	4603      	mov	r3, r0
 8004f02:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8004f04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f08:	2a30      	cmp	r2, #48	; 0x30
 8004f0a:	d101      	bne.n	8004f10 <MicroVsnprintf+0x214>
 8004f0c:	429f      	cmp	r7, r3
 8004f0e:	d3f8      	bcc.n	8004f02 <MicroVsnprintf+0x206>
  *current = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <MicroVsnprintf+0x284>)
 8004f18:	1a19      	subs	r1, r3, r0
 8004f1a:	f7ff feb7 	bl	8004c8c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
 8004f1e:	9b01      	ldr	r3, [sp, #4]
  if (i < 0) {
 8004f20:	f1ba 0f00 	cmp.w	sl, #0
  current = StrCatInt32(current, (current_end - current), exponent);
 8004f24:	eba3 0b00 	sub.w	fp, r3, r0
    *buffer++ = '-';
 8004f28:	bfbf      	itttt	lt
 8004f2a:	232d      	movlt	r3, #45	; 0x2d
 8004f2c:	f88d 3020 	strblt.w	r3, [sp, #32]
    u = -u;
 8004f30:	9b03      	ldrlt	r3, [sp, #12]
 8004f32:	f1c3 0a7f 	rsblt	sl, r3, #127	; 0x7f
  current = StrCatStr(current, (current_end - current), "*2^");
 8004f36:	4607      	mov	r7, r0
    *buffer++ = '-';
 8004f38:	bfb4      	ite	lt
 8004f3a:	f10d 0121 	addlt.w	r1, sp, #33	; 0x21
 8004f3e:	a908      	addge	r1, sp, #32
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8004f40:	220a      	movs	r2, #10
 8004f42:	4650      	mov	r0, sl
 8004f44:	f7ff feb8 	bl	8004cb8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8004f48:	aa08      	add	r2, sp, #32
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	e77b      	b.n	8004e48 <MicroVsnprintf+0x14c>
          output[output_index++] = *current++;
 8004f50:	f108 0202 	add.w	r2, r8, #2
      output[output_index++] = *current++;
 8004f54:	3401      	adds	r4, #1
 8004f56:	7033      	strb	r3, [r6, #0]
 8004f58:	e6f3      	b.n	8004d42 <MicroVsnprintf+0x46>
          if (usable_length - output_index < 1) {
 8004f5a:	eba9 0304 	sub.w	r3, r9, r4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f104 0401 	add.w	r4, r4, #1
 8004f64:	dc02      	bgt.n	8004f6c <MicroVsnprintf+0x270>
  output[output_index++] = '\0';
 8004f66:	2300      	movs	r3, #0
 8004f68:	7033      	strb	r3, [r6, #0]
  return output_index;
 8004f6a:	e729      	b.n	8004dc0 <MicroVsnprintf+0xc4>
          output[output_index++] = va_arg(args, int32_t);
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	7033      	strb	r3, [r6, #0]
          current++;
 8004f72:	e710      	b.n	8004d96 <MicroVsnprintf+0x9a>
 8004f74:	0800ca00 	.word	0x0800ca00
 8004f78:	0800ca04 	.word	0x0800ca04
 8004f7c:	0800ca0c 	.word	0x0800ca0c
 8004f80:	0800ca08 	.word	0x0800ca08

08004f84 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 8004f84:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 8004f86:	f850 4b04 	ldr.w	r4, [r0], #4
 8004f8a:	2200      	movs	r2, #0
  int result = 1;
 8004f8c:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
 8004f8e:	4294      	cmp	r4, r2
 8004f90:	dd04      	ble.n	8004f9c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
 8004f92:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
 8004f96:	3201      	adds	r2, #1
    result *= dims.data[i];
 8004f98:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
 8004f9a:	e7f8      	b.n	8004f8e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd10      	pop	{r4, pc}

08004fa0 <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>:
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
}

SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 8004fa0:	4770      	bx	lr

08004fa2 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh>:
  return nullptr;
}

TfLiteStatus SingleArenaBufferAllocator::DeallocateResizableBuffer(
    uint8_t* resizable_buf) {
  return ResizeBuffer(resizable_buf, 0, 1);
 8004fa2:	6803      	ldr	r3, [r0, #0]
    uint8_t* resizable_buf) {
 8004fa4:	b410      	push	{r4}
  return ResizeBuffer(resizable_buf, 0, 1);
 8004fa6:	69dc      	ldr	r4, [r3, #28]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	46a4      	mov	ip, r4
 8004fac:	2301      	movs	r3, #1
}
 8004fae:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ResizeBuffer(resizable_buf, 0, 1);
 8004fb2:	4760      	bx	ip

08004fb4 <_ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh>:
  temp_buffer_count_++;
  return aligned_result;
}

void SingleArenaBufferAllocator::DeallocateTemp(uint8_t* temp_buf) {
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 8004fb4:	6a03      	ldr	r3, [r0, #32]
 8004fb6:	4059      	eors	r1, r3
  temp_buffer_count_--;
 8004fb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 8004fba:	6201      	str	r1, [r0, #32]
  temp_buffer_count_--;
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	6243      	str	r3, [r0, #36]	; 0x24
}
 8004fc0:	4770      	bx	lr

08004fc2 <_ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv>:
  return kTfLiteOk;
}

uint8_t* SingleArenaBufferAllocator::GetOverlayMemoryAddress() const {
  return buffer_head_;
}
 8004fc2:	68c0      	ldr	r0, [r0, #12]
 8004fc4:	4770      	bx	lr

08004fc6 <_ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const {
  return std::max(head_ - buffer_head_, temp_ - buffer_head_);
 8004fc6:	6942      	ldr	r2, [r0, #20]
 8004fc8:	68c3      	ldr	r3, [r0, #12]
 8004fca:	69c0      	ldr	r0, [r0, #28]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004fcc:	4282      	cmp	r2, r0
 8004fce:	bf34      	ite	cc
 8004fd0:	1ac0      	subcc	r0, r0, r3
 8004fd2:	1ad0      	subcs	r0, r2, r3
}
 8004fd4:	4770      	bx	lr

08004fd6 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetPersistentUsedBytes() const {
  return buffer_tail_ - tail_;
 8004fd6:	6902      	ldr	r2, [r0, #16]
 8004fd8:	6980      	ldr	r0, [r0, #24]
}
 8004fda:	1a10      	subs	r0, r2, r0
 8004fdc:	4770      	bx	lr

08004fde <_ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

  // Returns the size of the head section in bytes.
  size_t GetNonPersistentUsedBytes() const override;

  // Returns the size of all allocations in the tail section in bytes.
  size_t GetPersistentUsedBytes() const override;
 8004fde:	f1a0 0004 	sub.w	r0, r0, #4
 8004fe2:	f7ff bff8 	b.w	8004fd6 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>

08004fe6 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj>:
                                                             size_t alignment) {
 8004fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460e      	mov	r6, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8004fec:	68c0      	ldr	r0, [r0, #12]
 8004fee:	9201      	str	r2, [sp, #4]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	f7fd ff33 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	9b01      	ldr	r3, [sp, #4]
 8004ffa:	69d7      	ldr	r7, [r2, #28]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8004ffc:	4605      	mov	r5, r0
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8004ffe:	4601      	mov	r1, r0
 8005000:	4632      	mov	r2, r6
 8005002:	4620      	mov	r0, r4
 8005004:	47b8      	blx	r7
  return nullptr;
 8005006:	2800      	cmp	r0, #0
}
 8005008:	bf0c      	ite	eq
 800500a:	4628      	moveq	r0, r5
 800500c:	2000      	movne	r0, #0
 800500e:	b003      	add	sp, #12
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005012 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj>:
    size_t size, size_t alignment) {
 8005012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	460d      	mov	r5, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8005018:	68c0      	ldr	r0, [r0, #12]
 800501a:	9201      	str	r2, [sp, #4]
 800501c:	4611      	mov	r1, r2
 800501e:	f7fd ff1d 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	69d6      	ldr	r6, [r2, #28]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8005028:	4601      	mov	r1, r0
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 800502a:	462a      	mov	r2, r5
 800502c:	4620      	mov	r0, r4
 800502e:	46b4      	mov	ip, r6
}
 8005030:	b002      	add	sp, #8
 8005032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8005036:	4760      	bx	ip

08005038 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj>:
                                                  size_t alignment) {
 8005038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800503a:	4604      	mov	r4, r0
 800503c:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800503e:	69c0      	ldr	r0, [r0, #28]
 8005040:	4611      	mov	r1, r2
 8005042:	f7fd ff0b 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8005046:	69a3      	ldr	r3, [r4, #24]
 8005048:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 800504a:	42ab      	cmp	r3, r5
 800504c:	d209      	bcs.n	8005062 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800504e:	1aea      	subs	r2, r5, r3
 8005050:	9200      	str	r2, [sp, #0]
 8005052:	4908      	ldr	r1, [pc, #32]	; (8005074 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x3c>)
 8005054:	68a0      	ldr	r0, [r4, #8]
 8005056:	462a      	mov	r2, r5
 8005058:	f7fd fb8a 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 800505c:	2000      	movs	r0, #0
}
 800505e:	b003      	add	sp, #12
 8005060:	bd30      	pop	{r4, r5, pc}
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 8005062:	6a23      	ldr	r3, [r4, #32]
 8005064:	4043      	eors	r3, r0
 8005066:	6223      	str	r3, [r4, #32]
  temp_buffer_count_++;
 8005068:	6a63      	ldr	r3, [r4, #36]	; 0x24
  temp_ = aligned_result + size;
 800506a:	4405      	add	r5, r0
  temp_buffer_count_++;
 800506c:	3301      	adds	r3, #1
  temp_ = aligned_result + size;
 800506e:	61e5      	str	r5, [r4, #28]
  temp_buffer_count_++;
 8005070:	6263      	str	r3, [r4, #36]	; 0x24
  return aligned_result;
 8005072:	e7f4      	b.n	800505e <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x26>
 8005074:	0800ca1a 	.word	0x0800ca1a

08005078 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
    size_t size, size_t alignment) {
 8005078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800507a:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800507c:	6980      	ldr	r0, [r0, #24]
    size_t size, size_t alignment) {
 800507e:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8005080:	1b40      	subs	r0, r0, r5
 8005082:	4611      	mov	r1, r2
 8005084:	f7fd fef0 	bl	8002e68 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 8005088:	6963      	ldr	r3, [r4, #20]
 800508a:	4283      	cmp	r3, r0
 800508c:	d90a      	bls.n	80050a4 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
 800508e:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4905      	ldr	r1, [pc, #20]	; (80050a8 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x30>)
 8005094:	68a0      	ldr	r0, [r4, #8]
 8005096:	1aeb      	subs	r3, r5, r3
 8005098:	462a      	mov	r2, r5
 800509a:	f7fd fb69 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 800509e:	2000      	movs	r0, #0
}
 80050a0:	b003      	add	sp, #12
 80050a2:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
 80050a4:	61a0      	str	r0, [r4, #24]
  return aligned_result;
 80050a6:	e7fb      	b.n	80050a0 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x28>
 80050a8:	0800ca63 	.word	0x0800ca63

080050ac <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
  virtual uint8_t* AllocatePersistentBuffer(size_t size,
 80050ac:	f1a0 0004 	sub.w	r0, r0, #4
 80050b0:	f7ff bfe2 	b.w	8005078 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>

080050b4 <_ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj>:

size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4604      	mov	r4, r0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 80050b8:	69c0      	ldr	r0, [r0, #28]
size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 80050ba:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 80050bc:	f7fd fece 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 80050c0:	4631      	mov	r1, r6
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 80050c2:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 80050c4:	69a0      	ldr	r0, [r4, #24]
 80050c6:	f7fd fecf 	bl	8002e68 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
 80050ca:	1b40      	subs	r0, r0, r5
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080050d0 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv>:
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 80050d0:	e9d0 2108 	ldrd	r2, r1, [r0, #32]
bool SingleArenaBufferAllocator::IsAllTempDeallocated() {
 80050d4:	b508      	push	{r3, lr}
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 80050d6:	ea51 0302 	orrs.w	r3, r1, r2
 80050da:	d007      	beq.n	80050ec <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x1c>
    MicroPrintf(
 80050dc:	fab2 f282 	clz	r2, r2
 80050e0:	4803      	ldr	r0, [pc, #12]	; (80050f0 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x20>)
 80050e2:	0952      	lsrs	r2, r2, #5
 80050e4:	f7ff f8c1 	bl	800426a <_Z11MicroPrintfPKcz>
    return false;
 80050e8:	2000      	movs	r0, #0
}
 80050ea:	bd08      	pop	{r3, pc}
  return true;
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7fc      	b.n	80050ea <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x1a>
 80050f0:	0800caac 	.word	0x0800caac

080050f4 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv>:
  if (!IsAllTempDeallocated()) {
 80050f4:	6803      	ldr	r3, [r0, #0]
TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 80050f6:	b510      	push	{r4, lr}
  if (!IsAllTempDeallocated()) {
 80050f8:	691b      	ldr	r3, [r3, #16]
TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 80050fa:	4604      	mov	r4, r0
  if (!IsAllTempDeallocated()) {
 80050fc:	4798      	blx	r3
 80050fe:	b920      	cbnz	r0, 800510a <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x16>
    MicroPrintf(
 8005100:	4804      	ldr	r0, [pc, #16]	; (8005114 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x20>)
 8005102:	f7ff f8b2 	bl	800426a <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8005106:	2001      	movs	r0, #1
}
 8005108:	bd10      	pop	{r4, pc}
  temp_ = head_;
 800510a:	6963      	ldr	r3, [r4, #20]
 800510c:	61e3      	str	r3, [r4, #28]
  return kTfLiteOk;
 800510e:	2000      	movs	r0, #0
 8005110:	e7fa      	b.n	8005108 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x14>
 8005112:	bf00      	nop
 8005114:	0800caee 	.word	0x0800caee

08005118 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj>:
                                                      size_t alignment) {
 8005118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800511a:	4604      	mov	r4, r0
 800511c:	460e      	mov	r6, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 800511e:	68c0      	ldr	r0, [r0, #12]
 8005120:	9303      	str	r3, [sp, #12]
                                                      size_t alignment) {
 8005122:	4619      	mov	r1, r3
 8005124:	4615      	mov	r5, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8005126:	f7fd fe99 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 800512a:	6962      	ldr	r2, [r4, #20]
 800512c:	69e3      	ldr	r3, [r4, #28]
 800512e:	429a      	cmp	r2, r3
 8005130:	d102      	bne.n	8005138 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x20>
 8005132:	42b0      	cmp	r0, r6
 8005134:	9903      	ldr	r1, [sp, #12]
 8005136:	d006      	beq.n	8005146 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x2e>
    TF_LITE_REPORT_ERROR(
 8005138:	490d      	ldr	r1, [pc, #52]	; (8005170 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x58>)
 800513a:	68a0      	ldr	r0, [r4, #8]
 800513c:	f7fd fb18 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8005140:	2001      	movs	r0, #1
}
 8005142:	b004      	add	sp, #16
 8005144:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8005146:	68e0      	ldr	r0, [r4, #12]
 8005148:	f7fd fe88 	bl	8002e5c <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 800514c:	69a3      	ldr	r3, [r4, #24]
 800514e:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 8005150:	429d      	cmp	r5, r3
 8005152:	d907      	bls.n	8005164 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x4c>
    TF_LITE_REPORT_ERROR(
 8005154:	1aea      	subs	r2, r5, r3
 8005156:	9200      	str	r2, [sp, #0]
 8005158:	4906      	ldr	r1, [pc, #24]	; (8005174 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x5c>)
 800515a:	68a0      	ldr	r0, [r4, #8]
 800515c:	462a      	mov	r2, r5
 800515e:	f7fd fb07 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8005162:	e7ed      	b.n	8005140 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x28>
  head_ = aligned_result + size;
 8005164:	4428      	add	r0, r5
 8005166:	6160      	str	r0, [r4, #20]
  temp_ = head_;
 8005168:	61e0      	str	r0, [r4, #28]
  return kTfLiteOk;
 800516a:	2000      	movs	r0, #0
 800516c:	e7e9      	b.n	8005142 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x2a>
 800516e:	bf00      	nop
 8005170:	0800cb33 	.word	0x0800cb33
 8005174:	0800cba1 	.word	0x0800cba1

08005178 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev>:
 8005178:	3804      	subs	r0, #4
 800517a:	4770      	bx	lr

0800517c <_ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev>:
 800517c:	3804      	subs	r0, #4
 800517e:	4770      	bx	lr

08005180 <_ZN6tflite26SingleArenaBufferAllocatorC1EPNS_13ErrorReporterEPhj>:
SingleArenaBufferAllocator::SingleArenaBufferAllocator(
 8005180:	b570      	push	{r4, r5, r6, lr}
      temp_(buffer_head_) {
 8005182:	4d08      	ldr	r5, [pc, #32]	; (80051a4 <_ZN6tflite26SingleArenaBufferAllocatorC1EPNS_13ErrorReporterEPhj+0x24>)
 8005184:	61c2      	str	r2, [r0, #28]
    : SingleArenaBufferAllocator(error_reporter, buffer, buffer + buffer_size) {
 8005186:	4413      	add	r3, r2
      temp_(buffer_head_) {
 8005188:	f105 0608 	add.w	r6, r5, #8
 800518c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8005190:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8005194:	354c      	adds	r5, #76	; 0x4c
 8005196:	2300      	movs	r3, #0
 8005198:	e9c0 5101 	strd	r5, r1, [r0, #4]
 800519c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80051a0:	6006      	str	r6, [r0, #0]
}
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	0800cbe4 	.word	0x0800cbe4

080051a8 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 80051a8:	b500      	push	{lr}
 80051aa:	4613      	mov	r3, r2
 80051ac:	b08b      	sub	sp, #44	; 0x2c
  TFLITE_DCHECK(error_reporter != nullptr);
 80051ae:	b918      	cbnz	r0, 80051b8 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0x10>
  DebugLog("HALTED\n");
 80051b0:	4814      	ldr	r0, [pc, #80]	; (8005204 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0x5c>)
 80051b2:	f7fb ffdb 	bl	800116c <DebugLog>
  while (1) {
 80051b6:	e7fe      	b.n	80051b6 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0xe>
  TFLITE_DCHECK(buffer_head != nullptr);
 80051b8:	b919      	cbnz	r1, 80051c2 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0x1a>
  DebugLog("HALTED\n");
 80051ba:	4812      	ldr	r0, [pc, #72]	; (8005204 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0x5c>)
 80051bc:	f7fb ffd6 	bl	800116c <DebugLog>
  while (1) {
 80051c0:	e7fe      	b.n	80051c0 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0x18>
      SingleArenaBufferAllocator(error_reporter, buffer_head, buffer_size);
 80051c2:	460a      	mov	r2, r1
 80051c4:	4601      	mov	r1, r0
 80051c6:	4668      	mov	r0, sp
 80051c8:	f7ff ffda 	bl	8005180 <_ZN6tflite26SingleArenaBufferAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocatePersistentBuffer(
 80051cc:	2204      	movs	r2, #4
 80051ce:	2128      	movs	r1, #40	; 0x28
 80051d0:	4668      	mov	r0, sp
 80051d2:	f7ff ff51 	bl	8005078 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>
class SingleArenaBufferAllocator : public INonPersistentBufferAllocator,
 80051d6:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPNS_13ErrorReporterEPhj+0x60>)
 80051d8:	6002      	str	r2, [r0, #0]
 80051da:	3244      	adds	r2, #68	; 0x44
 80051dc:	6042      	str	r2, [r0, #4]
 80051de:	9a02      	ldr	r2, [sp, #8]
 80051e0:	6082      	str	r2, [r0, #8]
 80051e2:	9a03      	ldr	r2, [sp, #12]
 80051e4:	60c2      	str	r2, [r0, #12]
 80051e6:	9a04      	ldr	r2, [sp, #16]
 80051e8:	6102      	str	r2, [r0, #16]
 80051ea:	9a05      	ldr	r2, [sp, #20]
 80051ec:	6142      	str	r2, [r0, #20]
 80051ee:	9a06      	ldr	r2, [sp, #24]
 80051f0:	6182      	str	r2, [r0, #24]
 80051f2:	9a07      	ldr	r2, [sp, #28]
 80051f4:	61c2      	str	r2, [r0, #28]
 80051f6:	9a08      	ldr	r2, [sp, #32]
 80051f8:	6202      	str	r2, [r0, #32]
 80051fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fc:	6242      	str	r2, [r0, #36]	; 0x24
}
 80051fe:	b00b      	add	sp, #44	; 0x2c
 8005200:	f85d fb04 	ldr.w	pc, [sp], #4
 8005204:	0800ac80 	.word	0x0800ac80
 8005208:	0800cbec 	.word	0x0800cbec

0800520c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 800520c:	b538      	push	{r3, r4, r5, lr}
               0;
  }

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
 800520e:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8005210:	680b      	ldr	r3, [r1, #0]
 8005212:	429c      	cmp	r4, r3
 8005214:	d001      	beq.n	800521a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0xe>
 8005216:	f7fd fadd 	bl	80027d4 <_Z9AbortImplv>
 800521a:	2301      	movs	r3, #1
  int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
    TFLITE_DCHECK_LT(i, size_);
    return dims_[i];
 800521c:	3904      	subs	r1, #4
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	4294      	cmp	r4, r2
 8005222:	dd07      	ble.n	8005234 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x28>
 8005224:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8005228:	3301      	adds	r3, #1
 800522a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800522e:	4295      	cmp	r5, r2
 8005230:	d0f5      	beq.n	800521e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x12>
 8005232:	e7f0      	b.n	8005216 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0xa>
  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 8005234:	1d03      	adds	r3, r0, #4
 8005236:	2200      	movs	r2, #0
    int buffer_size = 1;
 8005238:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
 800523a:	4294      	cmp	r4, r2
 800523c:	dd04      	ble.n	8005248 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x3c>
      buffer_size *= dims_data[i];
 800523e:	f853 1b04 	ldr.w	r1, [r3], #4
    for (int i = 0; i < size_; i++) {
 8005242:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 8005244:	4348      	muls	r0, r1
    for (int i = 0; i < size_; i++) {
 8005246:	e7f8      	b.n	800523a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
}
 8005248:	bd38      	pop	{r3, r4, r5, pc}

0800524a <_ZNK6tflite12RuntimeShape4DimsEi>:
    TFLITE_DCHECK_GE(i, 0);
 800524a:	2900      	cmp	r1, #0
  int32_t Dims(int i) const {
 800524c:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 800524e:	da01      	bge.n	8005254 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 8005250:	f7fd fac0 	bl	80027d4 <_Z9AbortImplv>
    TFLITE_DCHECK_LT(i, size_);
 8005254:	6803      	ldr	r3, [r0, #0]
 8005256:	428b      	cmp	r3, r1
 8005258:	ddfa      	ble.n	8005250 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return dims_[i];
 800525a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 800525e:	6840      	ldr	r0, [r0, #4]
 8005260:	bd08      	pop	{r3, pc}

08005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8005262:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
 8005264:	b908      	cbnz	r0, 800526a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
 8005266:	f7fd fab5 	bl	80027d4 <_Z9AbortImplv>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	bd08      	pop	{r3, pc}

0800526e <_ZN6tflite14DequantizeInitEP13TfLiteContextPKcj>:

namespace tflite {

void* DequantizeInit(TfLiteContext* context, const char* buffer,
                     size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800526e:	6b83      	ldr	r3, [r0, #56]	; 0x38
                     size_t length) {
 8005270:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8005272:	b90b      	cbnz	r3, 8005278 <_ZN6tflite14DequantizeInitEP13TfLiteContextPKcj+0xa>
 8005274:	f7fd faae 	bl	80027d4 <_Z9AbortImplv>
  return context->AllocatePersistentBuffer(context, sizeof(DequantizeOpData));
}
 8005278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(DequantizeOpData));
 800527c:	2120      	movs	r1, #32
 800527e:	4718      	bx	r3

08005280 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DequantizeEval(TfLiteContext* context, TfLiteNode* node) {
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8005284:	68ce      	ldr	r6, [r1, #12]
TfLiteStatus DequantizeEval(TfLiteContext* context, TfLiteNode* node) {
 8005286:	b08e      	sub	sp, #56	; 0x38
 8005288:	4607      	mov	r7, r0
 800528a:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800528c:	b90e      	cbnz	r6, 8005292 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x12>
 800528e:	f7fd faa1 	bl	80027d4 <_Z9AbortImplv>
  DequantizeOpData* data = static_cast<DequantizeOpData*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8005292:	2200      	movs	r2, #0
 8005294:	f000 f9f0 	bl	8005678 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8005298:	4621      	mov	r1, r4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800529a:	4605      	mov	r5, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800529c:	2200      	movs	r2, #0
 800529e:	4638      	mov	r0, r7
 80052a0:	f000 f9ec 	bl	800567c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  if (output->type == kTfLiteFloat32) {
 80052a4:	7a07      	ldrb	r7, [r0, #8]
 80052a6:	2f01      	cmp	r7, #1
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 80052a8:	4604      	mov	r4, r0
  if (output->type == kTfLiteFloat32) {
 80052aa:	7a28      	ldrb	r0, [r5, #8]
 80052ac:	f040 808f 	bne.w	80053ce <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x14e>
    switch (input->type) {
 80052b0:	2807      	cmp	r0, #7
 80052b2:	d053      	beq.n	800535c <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0xdc>
 80052b4:	2809      	cmp	r0, #9
 80052b6:	d029      	beq.n	800530c <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x8c>
 80052b8:	2803      	cmp	r0, #3
 80052ba:	d17c      	bne.n	80053b6 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x136>
                                  tflite::micro::GetTensorShape(output),
                                  tflite::micro::GetTensorData<float>(output));
        break;
      case kTfLiteUInt8:
        reference_ops::Dequantize(data->quantization_params,
                                  tflite::micro::GetTensorShape(input),
 80052bc:	4629      	mov	r1, r5
 80052be:	a802      	add	r0, sp, #8
 80052c0:	f000 f9ea 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                  tflite::micro::GetTensorData<uint8_t>(input),
                                  tflite::micro::GetTensorShape(output),
 80052c4:	4621      	mov	r1, r4
 80052c6:	a808      	add	r0, sp, #32
  return reinterpret_cast<const T*>(tensor->data.raw);
 80052c8:	f8d5 9000 	ldr.w	r9, [r5]
 80052cc:	f000 f9e4 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32_t zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80052d0:	a908      	add	r1, sp, #32
 80052d2:	a802      	add	r0, sp, #8
 80052d4:	f7ff ff9a 	bl	800520c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  int32_t zero_point = op_params.zero_point;
 80052d8:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80052dc:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
 80052e0:	e9d6 6700 	ldrd	r6, r7, [r6]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80052e4:	4605      	mov	r5, r0

  for (int i = 0; i < flat_size; i++) {
 80052e6:	2400      	movs	r4, #0
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	dd5f      	ble.n	80053ac <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    const int32_t val = input_data[i];
 80052ec:	f819 0004 	ldrb.w	r0, [r9, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 80052f0:	eba0 0008 	sub.w	r0, r0, r8
 80052f4:	f7fb f92e 	bl	8000554 <__aeabi_i2d>
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	f7fb f994 	bl	8000628 <__aeabi_dmul>
 8005300:	f7fb fc6a 	bl	8000bd8 <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
 8005304:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8005306:	f84a 0b04 	str.w	r0, [sl], #4
  for (int i = 0; i < flat_size; i++) {
 800530a:	e7ed      	b.n	80052e8 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x68>
                                  tflite::micro::GetTensorShape(input),
 800530c:	4629      	mov	r1, r5
 800530e:	a802      	add	r0, sp, #8
 8005310:	f000 f9c2 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                  tflite::micro::GetTensorShape(output),
 8005314:	4621      	mov	r1, r4
 8005316:	a808      	add	r0, sp, #32
 8005318:	f8d5 9000 	ldr.w	r9, [r5]
 800531c:	f000 f9bc 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8005320:	a908      	add	r1, sp, #32
 8005322:	a802      	add	r0, sp, #8
 8005324:	f7ff ff72 	bl	800520c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  int32_t zero_point = op_params.zero_point;
 8005328:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800532c:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
 8005330:	e9d6 6700 	ldrd	r6, r7, [r6]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8005334:	4605      	mov	r5, r0
  for (int i = 0; i < flat_size; i++) {
 8005336:	2400      	movs	r4, #0
 8005338:	42a5      	cmp	r5, r4
 800533a:	dd37      	ble.n	80053ac <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    const int32_t val = input_data[i];
 800533c:	f919 0004 	ldrsb.w	r0, [r9, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8005340:	eba0 0008 	sub.w	r0, r0, r8
 8005344:	f7fb f906 	bl	8000554 <__aeabi_i2d>
 8005348:	4632      	mov	r2, r6
 800534a:	463b      	mov	r3, r7
 800534c:	f7fb f96c 	bl	8000628 <__aeabi_dmul>
 8005350:	f7fb fc42 	bl	8000bd8 <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
 8005354:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8005356:	f84a 0b04 	str.w	r0, [sl], #4
  for (int i = 0; i < flat_size; i++) {
 800535a:	e7ed      	b.n	8005338 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0xb8>
                                  tflite::micro::GetTensorShape(input),
 800535c:	4629      	mov	r1, r5
 800535e:	a802      	add	r0, sp, #8
 8005360:	f000 f99a 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                  tflite::micro::GetTensorShape(output),
 8005364:	4621      	mov	r1, r4
 8005366:	a808      	add	r0, sp, #32
 8005368:	f8d5 9000 	ldr.w	r9, [r5]
 800536c:	f000 f994 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8005370:	a908      	add	r1, sp, #32
 8005372:	a802      	add	r0, sp, #8
 8005374:	f7ff ff4a 	bl	800520c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  int32_t zero_point = op_params.zero_point;
 8005378:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800537c:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
 8005380:	e9d6 6700 	ldrd	r6, r7, [r6]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8005384:	4605      	mov	r5, r0
  for (int i = 0; i < flat_size; i++) {
 8005386:	2400      	movs	r4, #0
 8005388:	42a5      	cmp	r5, r4
 800538a:	dd0f      	ble.n	80053ac <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    const int32_t val = input_data[i];
 800538c:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8005390:	eba0 0008 	sub.w	r0, r0, r8
 8005394:	f7fb f8de 	bl	8000554 <__aeabi_i2d>
 8005398:	4632      	mov	r2, r6
 800539a:	463b      	mov	r3, r7
 800539c:	f7fb f944 	bl	8000628 <__aeabi_dmul>
 80053a0:	f7fb fc1a 	bl	8000bd8 <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
 80053a4:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 80053a6:	f84a 0b04 	str.w	r0, [sl], #4
  for (int i = 0; i < flat_size; i++) {
 80053aa:	e7ed      	b.n	8005388 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x108>
                TfLiteTypeGetName(input->type),
                TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
 80053ac:	2700      	movs	r7, #0
}
 80053ae:	4638      	mov	r0, r7
 80053b0:	b00e      	add	sp, #56	; 0x38
 80053b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MicroPrintf("Input %s, output %s not supported.",
 80053b6:	f7fd f9cf 	bl	8002758 <TfLiteTypeGetName>
 80053ba:	9001      	str	r0, [sp, #4]
 80053bc:	7a20      	ldrb	r0, [r4, #8]
 80053be:	f7fd f9cb 	bl	8002758 <TfLiteTypeGetName>
 80053c2:	9901      	ldr	r1, [sp, #4]
 80053c4:	4602      	mov	r2, r0
 80053c6:	4808      	ldr	r0, [pc, #32]	; (80053e8 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x168>)
 80053c8:	f7fe ff4f 	bl	800426a <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 80053cc:	e7ef      	b.n	80053ae <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x12e>
    MicroPrintf("Input %s, output %s not supported.",
 80053ce:	f7fd f9c3 	bl	8002758 <TfLiteTypeGetName>
 80053d2:	9001      	str	r0, [sp, #4]
 80053d4:	7a20      	ldrb	r0, [r4, #8]
 80053d6:	f7fd f9bf 	bl	8002758 <TfLiteTypeGetName>
 80053da:	9901      	ldr	r1, [sp, #4]
 80053dc:	4602      	mov	r2, r0
 80053de:	4802      	ldr	r0, [pc, #8]	; (80053e8 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x168>)
 80053e0:	f7fe ff43 	bl	800426a <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80053e4:	2701      	movs	r7, #1
 80053e6:	e7e2      	b.n	80053ae <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x12e>
 80053e8:	0800cc40 	.word	0x0800cc40

080053ec <_ZN6tflite19Register_DEQUANTIZEEv>:

TfLiteRegistration Register_DEQUANTIZE() {
 80053ec:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(DequantizeInit, DequantizePrepare,
                                   DequantizeEval);
 80053ee:	2300      	movs	r3, #0
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <_ZN6tflite19Register_DEQUANTIZEEv+0x18>)
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <_ZN6tflite19Register_DEQUANTIZEEv+0x1c>)
 80053f6:	4905      	ldr	r1, [pc, #20]	; (800540c <_ZN6tflite19Register_DEQUANTIZEEv+0x20>)
TfLiteRegistration Register_DEQUANTIZE() {
 80053f8:	4604      	mov	r4, r0
                                   DequantizeEval);
 80053fa:	f000 f915 	bl	8005628 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
 80053fe:	4620      	mov	r0, r4
 8005400:	b002      	add	sp, #8
 8005402:	bd10      	pop	{r4, pc}
 8005404:	08005411 	.word	0x08005411
 8005408:	08005281 	.word	0x08005281
 800540c:	0800526f 	.word	0x0800526f

08005410 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/kernels/dequantize.h"
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {

TfLiteStatus DequantizePrepare(TfLiteContext* context, TfLiteNode* node) {
 8005410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8005414:	f8d1 900c 	ldr.w	r9, [r1, #12]
TfLiteStatus DequantizePrepare(TfLiteContext* context, TfLiteNode* node) {
 8005418:	b085      	sub	sp, #20
 800541a:	4605      	mov	r5, r0
 800541c:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800541e:	f1b9 0f00 	cmp.w	r9, #0
 8005422:	d103      	bne.n	800542c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x1c>
  DebugLog("HALTED\n");
 8005424:	483e      	ldr	r0, [pc, #248]	; (8005520 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x110>)
 8005426:	f7fb fea1 	bl	800116c <DebugLog>
  while (1) {
 800542a:	e7fe      	b.n	800542a <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x1a>
  DequantizeOpData* data = static_cast<DequantizeOpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800542c:	680b      	ldr	r3, [r1, #0]
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800542e:	b113      	cbz	r3, 8005436 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d010      	beq.n	8005458 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8005436:	2401      	movs	r4, #1
 8005438:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x114>)
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x118>)
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	696e      	ldr	r6, [r5, #20]
 8005446:	4a39      	ldr	r2, [pc, #228]	; (800552c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
 8005448:	4939      	ldr	r1, [pc, #228]	; (8005530 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x120>)
 800544a:	2321      	movs	r3, #33	; 0x21
 800544c:	4628      	mov	r0, r5
 800544e:	47b0      	blx	r6

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 8005450:	4620      	mov	r0, r4
 8005452:	b005      	add	sp, #20
 8005454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8005458:	684c      	ldr	r4, [r1, #4]
}
inline int NumOutputs(const TfLiteNode* node) {
  return node->outputs == nullptr ? 0 : node->outputs->size;
 800545a:	b114      	cbz	r4, 8005462 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x52>
 800545c:	6824      	ldr	r4, [r4, #0]
 800545e:	2c01      	cmp	r4, #1
 8005460:	d00e      	beq.n	8005480 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x70>
 8005462:	4b30      	ldr	r3, [pc, #192]	; (8005524 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x114>)
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	2601      	movs	r6, #1
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x124>)
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8005470:	4a2e      	ldr	r2, [pc, #184]	; (800552c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
 8005472:	696c      	ldr	r4, [r5, #20]
 8005474:	492e      	ldr	r1, [pc, #184]	; (8005530 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x120>)
 8005476:	2322      	movs	r3, #34	; 0x22
 8005478:	4628      	mov	r0, r5
 800547a:	47a0      	blx	r4
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
 800547c:	2401      	movs	r4, #1
 800547e:	e7e7      	b.n	8005450 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x40>
  return reinterpret_cast<MicroContext*>(context->impl_);
 8005480:	68c6      	ldr	r6, [r0, #12]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	2200      	movs	r2, #0
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	4630      	mov	r0, r6
 800548a:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
 800548c:	4607      	mov	r7, r0
 800548e:	b940      	cbnz	r0, 80054a2 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x92>
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x128>)
 8005492:	696e      	ldr	r6, [r5, #20]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2328      	movs	r3, #40	; 0x28
  TF_LITE_ENSURE(context, output != nullptr);
 8005498:	4a24      	ldr	r2, [pc, #144]	; (800552c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
 800549a:	4928      	ldr	r1, [pc, #160]	; (800553c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
 800549c:	4628      	mov	r0, r5
 800549e:	47b0      	blx	r6
 80054a0:	e7d6      	b.n	8005450 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x40>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80054a2:	6833      	ldr	r3, [r6, #0]
 80054a4:	4641      	mov	r1, r8
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2200      	movs	r2, #0
 80054aa:	4630      	mov	r0, r6
 80054ac:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
 80054ae:	4680      	mov	r8, r0
 80054b0:	b920      	cbnz	r0, 80054bc <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xac>
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	696e      	ldr	r6, [r5, #20]
 80054b8:	232a      	movs	r3, #42	; 0x2a
 80054ba:	e7ed      	b.n	8005498 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x88>
  TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||
 80054bc:	7f3b      	ldrb	r3, [r7, #28]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d008      	beq.n	80054d4 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80054c2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d004      	beq.n	80054d4 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	696e      	ldr	r6, [r5, #20]
 80054d0:	232c      	movs	r3, #44	; 0x2c
 80054d2:	e7e1      	b.n	8005498 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x88>
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
 80054d4:	f898 301c 	ldrb.w	r3, [r8, #28]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d008      	beq.n	80054ee <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xde>
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	696c      	ldr	r4, [r5, #20]
 80054e2:	4a12      	ldr	r2, [pc, #72]	; (800552c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
 80054e4:	4915      	ldr	r1, [pc, #84]	; (800553c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
 80054e6:	232f      	movs	r3, #47	; 0x2f
 80054e8:	4628      	mov	r0, r5
 80054ea:	47a0      	blx	r4
 80054ec:	e7c6      	b.n	800547c <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
  data->quantization_params.zero_point = input->params.zero_point;
 80054ee:	68fb      	ldr	r3, [r7, #12]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 80054f0:	68b8      	ldr	r0, [r7, #8]
  data->quantization_params.zero_point = input->params.zero_point;
 80054f2:	f8c9 3008 	str.w	r3, [r9, #8]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 80054f6:	f7fb f83f 	bl	8000578 <__aeabi_f2d>
  data->output_zero_point = output->params.zero_point;
 80054fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054fe:	f8c9 3018 	str.w	r3, [r9, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
 8005502:	6833      	ldr	r3, [r6, #0]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 8005504:	e9c9 0100 	strd	r0, r1, [r9]
  micro_context->DeallocateTempTfLiteTensor(input);
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	4639      	mov	r1, r7
 800550c:	4630      	mov	r0, r6
 800550e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	4641      	mov	r1, r8
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	4630      	mov	r0, r6
 8005518:	4798      	blx	r3
  return kTfLiteOk;
 800551a:	2400      	movs	r4, #0
 800551c:	e798      	b.n	8005450 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x40>
 800551e:	bf00      	nop
 8005520:	0800ac80 	.word	0x0800ac80
 8005524:	0800ce6a 	.word	0x0800ce6a
 8005528:	0800ccca 	.word	0x0800ccca
 800552c:	0800cc63 	.word	0x0800cc63
 8005530:	0800ccb0 	.word	0x0800ccb0
 8005534:	0800ccda 	.word	0x0800ccda
 8005538:	0800cceb 	.word	0x0800cceb
 800553c:	0800bacf 	.word	0x0800bacf
 8005540:	0800ccfc 	.word	0x0800ccfc
 8005544:	0800cd0e 	.word	0x0800cd0e
 8005548:	0800cd67 	.word	0x0800cd67

0800554c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800554c:	b510      	push	{r4, lr}
 800554e:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 8005550:	b911      	cbnz	r1, 8005558 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 8005552:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 8005554:	4620      	mov	r0, r4
 8005556:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 8005558:	6949      	ldr	r1, [r1, #20]
 800555a:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 800555e:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	f002 fc0a 	bl	8007d7c <memcpy>
  }
 8005568:	e7f4      	b.n	8005554 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
	...

0800556c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800556c:	2901      	cmp	r1, #1
 800556e:	d103      	bne.n	8005578 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
 8005570:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 8005572:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
 8005576:	e004      	b.n	8005582 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
 8005578:	2903      	cmp	r1, #3
 800557a:	d104      	bne.n	8005586 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
 8005582:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
 8005584:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
 8005586:	2902      	cmp	r1, #2
 8005588:	d104      	bne.n	8005594 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
 800558c:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
 800558e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005592:	e7f6      	b.n	8005582 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
 8005594:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8005598:	e7eb      	b.n	8005572 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
 800559a:	bf00      	nop
 800559c:	7f7fffff 	.word	0x7f7fffff
 80055a0:	40c00000 	.word	0x40c00000
 80055a4:	bf800000 	.word	0xbf800000

080055a8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  if (data_type != kTfLiteFloat32) {
 80055ac:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 80055ae:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 80055b2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055b6:	4607      	mov	r7, r0
 80055b8:	4688      	mov	r8, r1
 80055ba:	461e      	mov	r6, r3
  if (data_type != kTfLiteFloat32) {
 80055bc:	d02f      	beq.n	800561e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
    double real_multiplier = 0.0;
 80055be:	2200      	movs	r2, #0
 80055c0:	2300      	movs	r3, #0
 80055c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80055c6:	ab02      	add	r3, sp, #8
 80055c8:	e9cd 9300 	strd	r9, r3, [sp]
 80055cc:	4652      	mov	r2, sl
 80055ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d0:	4631      	mov	r1, r6
 80055d2:	f7fd fb2d 	bl	8002c30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80055d6:	4604      	mov	r4, r0
 80055d8:	b9e8      	cbnz	r0, 8005616 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6e>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80055da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80055de:	1d29      	adds	r1, r5, #4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f7fd fa23 	bl	8002a2c <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80055e6:	68f3      	ldr	r3, [r6, #12]
 80055e8:	616b      	str	r3, [r5, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 80055ea:	f8da 300c 	ldr.w	r3, [sl, #12]
 80055ee:	b11b      	cbz	r3, 80055f8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x50>
  DebugLog("HALTED\n");
 80055f0:	480c      	ldr	r0, [pc, #48]	; (8005624 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x7c>)
 80055f2:	f7fb fdbb 	bl	800116c <DebugLog>
  while (1) {
 80055f6:	e7fe      	b.n	80055f6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x4e>
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;
 80055f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80055fc:	61eb      	str	r3, [r5, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80055fe:	f105 030c 	add.w	r3, r5, #12
    data->filter_zero_point = filter->params.zero_point;
 8005602:	61ac      	str	r4, [r5, #24]
    return CalculateActivationRangeQuantized(context, activation, output,
 8005604:	464a      	mov	r2, r9
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4641      	mov	r1, r8
 800560a:	f105 0308 	add.w	r3, r5, #8
 800560e:	4638      	mov	r0, r7
 8005610:	f7fd fb64 	bl	8002cdc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8005614:	4604      	mov	r4, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
 8005616:	4620      	mov	r0, r4
 8005618:	b004      	add	sp, #16
 800561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return kTfLiteOk;
 800561e:	2400      	movs	r4, #0
 8005620:	e7f9      	b.n	8005616 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6e>
 8005622:	bf00      	nop
 8005624:	0800ac80 	.word	0x0800ac80

08005628 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8005628:	b510      	push	{r4, lr}
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 800562a:	6001      	str	r1, [r0, #0]
 800562c:	9902      	ldr	r1, [sp, #8]
 800562e:	60c3      	str	r3, [r0, #12]
 8005630:	2300      	movs	r3, #0
 8005632:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800563a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800563e:	6203      	str	r3, [r0, #32]
}
 8005640:	bd10      	pop	{r4, pc}

08005642 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 8005642:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(context != nullptr);
 8005644:	b908      	cbnz	r0, 800564a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 8005646:	f7fd f8c5 	bl	80027d4 <_Z9AbortImplv>
  TFLITE_DCHECK(node != nullptr);
 800564a:	2900      	cmp	r1, #0
 800564c:	d0fb      	beq.n	8005646 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800564e:	680b      	ldr	r3, [r1, #0]
  const int tensor_index = ValidateTensorIndexing(
 8005650:	4619      	mov	r1, r3
  if (index >= 0 && index < max_size) {
 8005652:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 8005654:	f851 5b04 	ldr.w	r5, [r1], #4
  if (index >= 0 && index < max_size) {
 8005658:	db0c      	blt.n	8005674 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
 800565a:	4295      	cmp	r5, r2
 800565c:	dd0a      	ble.n	8005674 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>

  if (tensor_index < 0) {
 800565e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005662:	2900      	cmp	r1, #0
 8005664:	db06      	blt.n	8005674 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    return nullptr;
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 8005666:	eb03 0282 	add.w	r2, r3, r2, lsl #2
}
 800566a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800566e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005670:	6851      	ldr	r1, [r2, #4]
 8005672:	4718      	bx	r3
}
 8005674:	2000      	movs	r0, #0
 8005676:	bd70      	pop	{r4, r5, r6, pc}

08005678 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
 8005678:	f7ff bfe3 	b.w	8005642 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>

0800567c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 800567c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 800567e:	b908      	cbnz	r0, 8005684 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 8005680:	f7fd f8a8 	bl	80027d4 <_Z9AbortImplv>
  TFLITE_DCHECK(node != nullptr);
 8005684:	2900      	cmp	r1, #0
 8005686:	d0fb      	beq.n	8005680 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8005688:	6849      	ldr	r1, [r1, #4]
 800568a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800568c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
 8005690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8005694:	6851      	ldr	r1, [r2, #4]
 8005696:	4718      	bx	r3

08005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8005698:	b510      	push	{r4, lr}
 800569a:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 800569c:	b109      	cbz	r1, 80056a2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 800569e:	6849      	ldr	r1, [r1, #4]
 80056a0:	b919      	cbnz	r1, 80056aa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 80056a2:	2300      	movs	r3, #0
 80056a4:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 80056a6:	4620      	mov	r0, r4
 80056a8:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 80056aa:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 80056ae:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	f002 fb62 	bl	8007d7c <memcpy>
  }
 80056b8:	e7f5      	b.n	80056a6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>

080056ba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80056ba:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 80056bc:	b538      	push	{r3, r4, r5, lr}
  int32_t DimensionsCount() const { return size_; }
 80056be:	6805      	ldr	r5, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80056c0:	db01      	blt.n	80056c6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
 80056c2:	42a9      	cmp	r1, r5
 80056c4:	db01      	blt.n	80056ca <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
 80056c6:	f7fd f885 	bl	80027d4 <_Z9AbortImplv>
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
 80056ca:	2200      	movs	r2, #0
  int flat_size = 1;
 80056cc:	2401      	movs	r4, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80056ce:	1d03      	adds	r3, r0, #4
 80056d0:	4291      	cmp	r1, r2
 80056d2:	bf18      	it	ne
 80056d4:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 80056d8:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80056dc:	bf08      	it	eq
 80056de:	2001      	moveq	r0, #1
  for (int i = 0; i < dims_count; ++i) {
 80056e0:	4295      	cmp	r5, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80056e2:	fb00 f404 	mul.w	r4, r0, r4
  for (int i = 0; i < dims_count; ++i) {
 80056e6:	dcf3      	bgt.n	80056d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x16>
  }
  return flat_size;
}
 80056e8:	4620      	mov	r0, r4
 80056ea:	bd38      	pop	{r3, r4, r5, pc}

080056ec <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80056ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80056ee:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80056f0:	b91b      	cbnz	r3, 80056fa <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xe>
  DebugLog("HALTED\n");
 80056f2:	4804      	ldr	r0, [pc, #16]	; (8005704 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>)
 80056f4:	f7fb fd3a 	bl	800116c <DebugLog>
  while (1) {
 80056f8:	e7fe      	b.n	80056f8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataQuantizeReference));
}
 80056fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context,
 80056fe:	2120      	movs	r1, #32
 8005700:	4718      	bx	r3
 8005702:	bf00      	nop
 8005704:	0800ac80 	.word	0x0800ac80

08005708 <_ZN6tflite17Register_QUANTIZEEv>:

}  // namespace

TfLiteRegistration Register_QUANTIZE() {
 8005708:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(Init, PrepareQuantizeReference,
                                   EvalQuantizeReference);
 800570a:	2300      	movs	r3, #0
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <_ZN6tflite17Register_QUANTIZEEv+0x18>)
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <_ZN6tflite17Register_QUANTIZEEv+0x1c>)
 8005712:	4905      	ldr	r1, [pc, #20]	; (8005728 <_ZN6tflite17Register_QUANTIZEEv+0x20>)
TfLiteRegistration Register_QUANTIZE() {
 8005714:	4604      	mov	r4, r0
                                   EvalQuantizeReference);
 8005716:	f7ff ff87 	bl	8005628 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
 800571a:	4620      	mov	r0, r4
 800571c:	b002      	add	sp, #8
 800571e:	bd10      	pop	{r4, pc}
 8005720:	0800572d 	.word	0x0800572d
 8005724:	08005945 	.word	0x08005945
 8005728:	080056ed 	.word	0x080056ed

0800572c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {

TfLiteStatus PrepareQuantizeReference(TfLiteContext* context,
                                      TfLiteNode* node) {
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8005730:	f8d1 900c 	ldr.w	r9, [r1, #12]
                                      TfLiteNode* node) {
 8005734:	b085      	sub	sp, #20
 8005736:	4604      	mov	r4, r0
 8005738:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800573a:	f1b9 0f00 	cmp.w	r9, #0
 800573e:	d101      	bne.n	8005744 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x18>
 8005740:	f7fd f848 	bl	80027d4 <_Z9AbortImplv>
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8005744:	680b      	ldr	r3, [r1, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8005746:	b113      	cbz	r3, 800574e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22>
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d010      	beq.n	8005770 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44>
 800574e:	2501      	movs	r5, #1
 8005750:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8005754:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	4b6c      	ldr	r3, [pc, #432]	; (800590c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	6966      	ldr	r6, [r4, #20]
 800575e:	2324      	movs	r3, #36	; 0x24
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8005760:	4a6b      	ldr	r2, [pc, #428]	; (8005910 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8005762:	496c      	ldr	r1, [pc, #432]	; (8005914 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e8>)
 8005764:	4620      	mov	r0, r4
 8005766:	47b0      	blx	r6
  data->input_zero_point = input->params.zero_point;

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 8005768:	4628      	mov	r0, r5
 800576a:	b005      	add	sp, #20
 800576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8005770:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8005772:	b173      	cbz	r3, 8005792 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x66>
 8005774:	f8d3 a000 	ldr.w	sl, [r3]
 8005778:	f1ba 0f01 	cmp.w	sl, #1
 800577c:	d00b      	beq.n	8005796 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a>
 800577e:	2501      	movs	r5, #1
 8005780:	4b61      	ldr	r3, [pc, #388]	; (8005908 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	e9cd a502 	strd	sl, r5, [sp, #8]
 8005788:	4b63      	ldr	r3, [pc, #396]	; (8005918 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1ec>)
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	6966      	ldr	r6, [r4, #20]
 800578e:	2325      	movs	r3, #37	; 0x25
 8005790:	e7e6      	b.n	8005760 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x34>
 8005792:	469a      	mov	sl, r3
 8005794:	e7f3      	b.n	800577e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x52>
 8005796:	68c7      	ldr	r7, [r0, #12]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	4638      	mov	r0, r7
 80057a0:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
 80057a2:	4680      	mov	r8, r0
 80057a4:	b948      	cbnz	r0, 80057ba <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8e>
 80057a6:	4b5d      	ldr	r3, [pc, #372]	; (800591c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f0>)
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	6965      	ldr	r5, [r4, #20]
 80057ac:	232a      	movs	r3, #42	; 0x2a
  TF_LITE_ENSURE(context, output != nullptr);
 80057ae:	4a58      	ldr	r2, [pc, #352]	; (8005910 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e4>)
 80057b0:	495b      	ldr	r1, [pc, #364]	; (8005920 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80057b2:	4620      	mov	r0, r4
 80057b4:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
 80057b6:	4655      	mov	r5, sl
 80057b8:	e7d6      	b.n	8005768 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3c>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
 80057c6:	4606      	mov	r6, r0
 80057c8:	b920      	cbnz	r0, 80057d4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa8>
 80057ca:	4b56      	ldr	r3, [pc, #344]	; (8005924 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f8>)
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	6965      	ldr	r5, [r4, #20]
 80057d0:	232c      	movs	r3, #44	; 0x2c
 80057d2:	e7ec      	b.n	80057ae <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x82>
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
 80057d4:	7805      	ldrb	r5, [r0, #0]
 80057d6:	2d01      	cmp	r5, #1
 80057d8:	d00c      	beq.n	80057f4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc8>
 80057da:	e9cd 5a02 	strd	r5, sl, [sp, #8]
 80057de:	4b52      	ldr	r3, [pc, #328]	; (8005928 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1fc>)
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	4b52      	ldr	r3, [pc, #328]	; (800592c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x200>)
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6965      	ldr	r5, [r4, #20]
 80057e8:	4a49      	ldr	r2, [pc, #292]	; (8005910 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e4>)
 80057ea:	494a      	ldr	r1, [pc, #296]	; (8005914 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e8>)
 80057ec:	2330      	movs	r3, #48	; 0x30
 80057ee:	4620      	mov	r0, r4
 80057f0:	47a8      	blx	r5
 80057f2:	e7e0      	b.n	80057b6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8a>
  const auto* affine_quantization =
 80057f4:	6843      	ldr	r3, [r0, #4]
  TF_LITE_ENSURE(context, affine_quantization);
 80057f6:	b943      	cbnz	r3, 800580a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xde>
 80057f8:	4b4d      	ldr	r3, [pc, #308]	; (8005930 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x204>)
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	6966      	ldr	r6, [r4, #20]
 80057fe:	2334      	movs	r3, #52	; 0x34
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
 8005800:	4a43      	ldr	r2, [pc, #268]	; (8005910 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8005802:	4947      	ldr	r1, [pc, #284]	; (8005920 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8005804:	4620      	mov	r0, r4
 8005806:	47b0      	blx	r6
 8005808:	e7ae      	b.n	8005768 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	b923      	cbnz	r3, 8005818 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xec>
 800580e:	4b49      	ldr	r3, [pc, #292]	; (8005934 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x208>)
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6966      	ldr	r6, [r4, #20]
 8005814:	2335      	movs	r3, #53	; 0x35
 8005816:	e7f3      	b.n	8005800 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d004      	beq.n	8005828 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xfc>
 800581e:	4b46      	ldr	r3, [pc, #280]	; (8005938 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20c>)
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6966      	ldr	r6, [r4, #20]
 8005824:	2336      	movs	r3, #54	; 0x36
 8005826:	e7eb      	b.n	8005800 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>
  TF_LITE_ENSURE(
 8005828:	f898 201c 	ldrb.w	r2, [r8, #28]
 800582c:	1e53      	subs	r3, r2, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b08      	cmp	r3, #8
 8005832:	d805      	bhi.n	8005840 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x114>
 8005834:	f240 1147 	movw	r1, #327	; 0x147
 8005838:	fa21 f303 	lsr.w	r3, r1, r3
 800583c:	07db      	lsls	r3, r3, #31
 800583e:	d404      	bmi.n	800584a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x11e>
 8005840:	4b3e      	ldr	r3, [pc, #248]	; (800593c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x210>)
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	6966      	ldr	r6, [r4, #20]
 8005846:	2338      	movs	r3, #56	; 0x38
 8005848:	e7da      	b.n	8005800 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
 800584a:	7f03      	ldrb	r3, [r0, #28]
 800584c:	2b09      	cmp	r3, #9
 800584e:	d009      	beq.n	8005864 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x138>
 8005850:	2b07      	cmp	r3, #7
 8005852:	d029      	beq.n	80058a8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x17c>
 8005854:	1e99      	subs	r1, r3, #2
 8005856:	2901      	cmp	r1, #1
 8005858:	d926      	bls.n	80058a8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x17c>
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x214>)
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	6966      	ldr	r6, [r4, #20]
 8005860:	233c      	movs	r3, #60	; 0x3c
 8005862:	e7cd      	b.n	8005800 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 8005864:	2a07      	cmp	r2, #7
 8005866:	d140      	bne.n	80058ea <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1be>
    double effective_scale = static_cast<double>(input->params.scale) /
 8005868:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800586c:	f7fa fe84 	bl	8000578 <__aeabi_f2d>
 8005870:	4604      	mov	r4, r0
                             static_cast<double>(output->params.scale);
 8005872:	68b0      	ldr	r0, [r6, #8]
    double effective_scale = static_cast<double>(input->params.scale) /
 8005874:	460d      	mov	r5, r1
                             static_cast<double>(output->params.scale);
 8005876:	f7fa fe7f 	bl	8000578 <__aeabi_f2d>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
    double effective_scale = static_cast<double>(input->params.scale) /
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fa fffb 	bl	800087c <__aeabi_ddiv>
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 8005886:	f109 0b14 	add.w	fp, r9, #20
 800588a:	f109 0a10 	add.w	sl, r9, #16
    double effective_scale = static_cast<double>(input->params.scale) /
 800588e:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 8005892:	4659      	mov	r1, fp
 8005894:	4650      	mov	r0, sl
 8005896:	f7fd f8c9 	bl	8002a2c <_ZN6tflite18QuantizeMultiplierEdPlPi>
 800589a:	e00e      	b.n	80058ba <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x18e>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32) ||
 800589c:	2a02      	cmp	r2, #2
 800589e:	d10c      	bne.n	80058ba <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x18e>
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt8) ||
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d0e1      	beq.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt16)) {
 80058a4:	2b07      	cmp	r3, #7
 80058a6:	e02c      	b.n	8005902 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d6>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 80058a8:	2a07      	cmp	r2, #7
 80058aa:	d027      	beq.n	80058fc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>
 80058ac:	2a09      	cmp	r2, #9
 80058ae:	d121      	bne.n	80058f4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	d0d9      	beq.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
 80058b4:	3b02      	subs	r3, #2
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d9d6      	bls.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
  data->quantization_params.zero_point = output->params.zero_point;
 80058ba:	68f3      	ldr	r3, [r6, #12]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 80058bc:	68b0      	ldr	r0, [r6, #8]
  data->quantization_params.zero_point = output->params.zero_point;
 80058be:	f8c9 3000 	str.w	r3, [r9]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 80058c2:	f7fa fe59 	bl	8000578 <__aeabi_f2d>
  data->input_zero_point = input->params.zero_point;
 80058c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80058ca:	f8c9 3018 	str.w	r3, [r9, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
 80058ce:	683b      	ldr	r3, [r7, #0]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 80058d0:	e9c9 0102 	strd	r0, r1, [r9, #8]
  micro_context->DeallocateTempTfLiteTensor(input);
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	4641      	mov	r1, r8
 80058d8:	4638      	mov	r0, r7
 80058da:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	4631      	mov	r1, r6
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	4638      	mov	r0, r7
 80058e4:	4798      	blx	r3
  return kTfLiteOk;
 80058e6:	2500      	movs	r5, #0
 80058e8:	e73e      	b.n	8005768 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3c>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 80058ea:	2a09      	cmp	r2, #9
 80058ec:	d0bc      	beq.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
      (input->type == kTfLiteInt8 && output->type == kTfLiteUInt8) ||
 80058ee:	2a03      	cmp	r2, #3
 80058f0:	d102      	bne.n	80058f8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>
 80058f2:	e7b9      	b.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
 80058f4:	2a03      	cmp	r2, #3
 80058f6:	d0e0      	beq.n	80058ba <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x18e>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
 80058f8:	2a07      	cmp	r2, #7
 80058fa:	d1cf      	bne.n	800589c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x170>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
 80058fc:	2b07      	cmp	r3, #7
 80058fe:	d0b3      	beq.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32) ||
 8005900:	2b02      	cmp	r3, #2
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt16)) {
 8005902:	d1da      	bne.n	80058ba <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x18e>
 8005904:	e7b0      	b.n	8005868 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x13c>
 8005906:	bf00      	nop
 8005908:	0800ce6a 	.word	0x0800ce6a
 800590c:	0800ccca 	.word	0x0800ccca
 8005910:	0800cd98 	.word	0x0800cd98
 8005914:	0800ccb0 	.word	0x0800ccb0
 8005918:	0800ccda 	.word	0x0800ccda
 800591c:	0800cceb 	.word	0x0800cceb
 8005920:	0800bacf 	.word	0x0800bacf
 8005924:	0800ccfc 	.word	0x0800ccfc
 8005928:	0800cde3 	.word	0x0800cde3
 800592c:	0800cdfd 	.word	0x0800cdfd
 8005930:	0800ce17 	.word	0x0800ce17
 8005934:	0800ce2b 	.word	0x0800ce2b
 8005938:	0800ce46 	.word	0x0800ce46
 800593c:	0800ce6c 	.word	0x0800ce6c
 8005940:	0800cf05 	.word	0x0800cf05

08005944 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
 800594c:	68cc      	ldr	r4, [r1, #12]
TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
 800594e:	b08f      	sub	sp, #60	; 0x3c
 8005950:	4607      	mov	r7, r0
 8005952:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 8005954:	b90c      	cbnz	r4, 800595a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16>
 8005956:	f7fc ff3d 	bl	80027d4 <_Z9AbortImplv>
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800595a:	2200      	movs	r2, #0
 800595c:	f7ff fe8c 	bl	8005678 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8005960:	4606      	mov	r6, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8005962:	4629      	mov	r1, r5
 8005964:	4638      	mov	r0, r7
 8005966:	2200      	movs	r2, #0
 8005968:	f7ff fe88 	bl	800567c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  if (input->type == kTfLiteFloat32) {
 800596c:	7a37      	ldrb	r7, [r6, #8]
 800596e:	2f01      	cmp	r7, #1
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8005970:	4605      	mov	r5, r0
  if (input->type == kTfLiteFloat32) {
 8005972:	f040 8083 	bne.w	8005a7c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x138>
    switch (output->type) {
 8005976:	7a03      	ldrb	r3, [r0, #8]
 8005978:	2b07      	cmp	r3, #7
 800597a:	d034      	beq.n	80059e6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa2>
 800597c:	2b09      	cmp	r3, #9
 800597e:	d16b      	bne.n	8005a58 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x114>
      case kTfLiteInt8:
        reference_ops::AffineQuantize(
            data->quantization_params, tflite::micro::GetTensorShape(input),
 8005980:	4631      	mov	r1, r6
 8005982:	a802      	add	r0, sp, #8
 8005984:	f7ff fe88 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorData<float>(input),
            tflite::micro::GetTensorShape(output),
 8005988:	4629      	mov	r1, r5
 800598a:	a808      	add	r0, sp, #32
 800598c:	f8d6 9000 	ldr.w	r9, [r6]
 8005990:	f7ff fe82 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32_t zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8005994:	a908      	add	r1, sp, #32
 8005996:	a802      	add	r0, sp, #8
 8005998:	f7ff fc38 	bl	800520c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  return reinterpret_cast<T*>(tensor->data.raw);
 800599c:	682d      	ldr	r5, [r5, #0]
  const int32_t zero_point = op_params.zero_point;
 800599e:	f8d4 8000 	ldr.w	r8, [r4]
  const double scale = op_params.scale;
 80059a2:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80059a6:	4682      	mov	sl, r0
  static constexpr int32_t min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32_t max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
 80059a8:	2400      	movs	r4, #0
    const InputT val = input_data[i];
    int32_t unclamped =
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
 80059aa:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
 80059ae:	45a2      	cmp	sl, r4
 80059b0:	dd7e      	ble.n	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 80059b2:	4639      	mov	r1, r7
 80059b4:	4630      	mov	r0, r6
 80059b6:	f7fb f90f 	bl	8000bd8 <__aeabi_d2f>
    const InputT val = input_data[i];
 80059ba:	ecb9 8a01 	vldmia	r9!, {s16}
 80059be:	ee07 0a90 	vmov	s15, r0
 80059c2:	ee88 0a27 	vdiv.f32	s0, s16, s15
 80059c6:	f002 f955 	bl	8007c74 <roundf>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 80059ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80059ce:	ee17 3a90 	vmov	r3, s15
 80059d2:	4443      	add	r3, r8
    output_data[i] = clamped;
 80059d4:	2b7f      	cmp	r3, #127	; 0x7f
 80059d6:	bfa8      	it	ge
 80059d8:	237f      	movge	r3, #127	; 0x7f
 80059da:	455b      	cmp	r3, fp
 80059dc:	bfb8      	it	lt
 80059de:	465b      	movlt	r3, fp
 80059e0:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < flat_size; i++) {
 80059e2:	3401      	adds	r4, #1
 80059e4:	e7e3      	b.n	80059ae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a>
            tflite::micro::GetTensorData<int8_t>(output));
        break;
      case kTfLiteInt16:
        reference_ops::AffineQuantize(
            data->quantization_params, tflite::micro::GetTensorShape(input),
 80059e6:	4631      	mov	r1, r6
 80059e8:	a802      	add	r0, sp, #8
 80059ea:	f7ff fe55 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorData<float>(input),
            tflite::micro::GetTensorShape(output),
 80059ee:	4629      	mov	r1, r5
 80059f0:	a808      	add	r0, sp, #32
  return reinterpret_cast<const T*>(tensor->data.raw);
 80059f2:	f8d6 b000 	ldr.w	fp, [r6]
 80059f6:	f7ff fe4f 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 80059fa:	682b      	ldr	r3, [r5, #0]
 80059fc:	9300      	str	r3, [sp, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80059fe:	a908      	add	r1, sp, #32
 8005a00:	a802      	add	r0, sp, #8
 8005a02:	f7ff fc03 	bl	800520c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8005a06:	465d      	mov	r5, fp
    output_data[i] = clamped;
 8005a08:	f8df b388 	ldr.w	fp, [pc, #904]	; 8005d94 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x450>
  const int32_t zero_point = op_params.zero_point;
 8005a0c:	f8d4 9000 	ldr.w	r9, [r4]
  const double scale = op_params.scale;
 8005a10:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8005a14:	4682      	mov	sl, r0
  for (int i = 0; i < flat_size; i++) {
 8005a16:	2400      	movs	r4, #0
    output_data[i] = clamped;
 8005a18:	f647 78ff 	movw	r8, #32767	; 0x7fff
  for (int i = 0; i < flat_size; i++) {
 8005a1c:	45a2      	cmp	sl, r4
 8005a1e:	dd47      	ble.n	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 8005a20:	4639      	mov	r1, r7
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7fb f8d8 	bl	8000bd8 <__aeabi_d2f>
    const InputT val = input_data[i];
 8005a28:	ecb5 8a01 	vldmia	r5!, {s16}
 8005a2c:	ee07 0a90 	vmov	s15, r0
 8005a30:	ee88 0a27 	vdiv.f32	s0, s16, s15
 8005a34:	f002 f91e 	bl	8007c74 <roundf>
    output_data[i] = clamped;
 8005a38:	9a00      	ldr	r2, [sp, #0]
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 8005a3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005a3e:	ee17 3a90 	vmov	r3, s15
 8005a42:	444b      	add	r3, r9
    output_data[i] = clamped;
 8005a44:	4543      	cmp	r3, r8
 8005a46:	bfa8      	it	ge
 8005a48:	4643      	movge	r3, r8
 8005a4a:	455b      	cmp	r3, fp
 8005a4c:	bfb8      	it	lt
 8005a4e:	465b      	movlt	r3, fp
 8005a50:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  for (int i = 0; i < flat_size; i++) {
 8005a54:	3401      	adds	r4, #1
 8005a56:	e7e1      	b.n	8005a1c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>
            tflite::micro::GetTensorData<int16_t>(output));
        return kTfLiteOk;
      default:
        MicroPrintf("Input %s, output %s not supported.",
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7fc fe7d 	bl	8002758 <TfLiteTypeGetName>
 8005a5e:	9000      	str	r0, [sp, #0]
 8005a60:	7a28      	ldrb	r0, [r5, #8]
 8005a62:	f7fc fe79 	bl	8002758 <TfLiteTypeGetName>
 8005a66:	9900      	ldr	r1, [sp, #0]
 8005a68:	4602      	mov	r2, r0
 8005a6a:	48c9      	ldr	r0, [pc, #804]	; (8005d90 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44c>)
 8005a6c:	f7fe fbfd 	bl	800426a <_Z11MicroPrintfPKcz>
                TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
}
 8005a70:	4638      	mov	r0, r7
 8005a72:	b00f      	add	sp, #60	; 0x3c
 8005a74:	ecbd 8b02 	vpop	{d8}
 8005a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt32) {
 8005a7c:	2f02      	cmp	r7, #2
 8005a7e:	d151      	bne.n	8005b24 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>
    size_t size = ElementCount(*input->dims);
 8005a80:	6870      	ldr	r0, [r6, #4]
 8005a82:	f7ff fa7f 	bl	8004f84 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 8005a86:	7a2b      	ldrb	r3, [r5, #8]
 8005a88:	2b07      	cmp	r3, #7
    size_t size = ElementCount(*input->dims);
 8005a8a:	4607      	mov	r7, r0
    switch (output->type) {
 8005a8c:	d025      	beq.n	8005ada <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x196>
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	f040 819a 	bne.w	8005dc8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x484>
 8005a94:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005a96:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005a9a:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8005a9e:	f8d4 8000 	ldr.w	r8, [r4]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005aa2:	e9d4 1b04 	ldrd	r1, fp, [r4, #16]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
                                      effective_scale_shift) +
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
 8005aa6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
  return reinterpret_cast<T*>(tensor->data.raw);
 8005aaa:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005aac:	42a7      	cmp	r7, r4
 8005aae:	dc01      	bgt.n	8005ab4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x170>
  return kTfLiteOk;
 8005ab0:	2700      	movs	r7, #0
 8005ab2:	e7dd      	b.n	8005a70 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x12c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005ab4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005ab8:	9100      	str	r1, [sp, #0]
 8005aba:	465a      	mov	r2, fp
 8005abc:	eba0 0009 	sub.w	r0, r0, r9
 8005ac0:	f7fd f840 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005ac4:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 8005ac6:	42b0      	cmp	r0, r6
 8005ac8:	bfb8      	it	lt
 8005aca:	4630      	movlt	r0, r6
 8005acc:	287f      	cmp	r0, #127	; 0x7f
 8005ace:	bfa8      	it	ge
 8005ad0:	207f      	movge	r0, #127	; 0x7f
 8005ad2:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
 8005ad4:	9900      	ldr	r1, [sp, #0]
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	e7e8      	b.n	8005aac <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x168>
 8005ada:	682d      	ldr	r5, [r5, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8005adc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8005d94 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x450>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005ae0:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005ae4:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8005ae8:	f8d4 b000 	ldr.w	fp, [r4]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005aec:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8005af0:	f647 76ff 	movw	r6, #32767	; 0x7fff
  return reinterpret_cast<T*>(tensor->data.raw);
 8005af4:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005af6:	42a7      	cmp	r7, r4
 8005af8:	ddda      	ble.n	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005afa:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005afe:	eba0 0009 	sub.w	r0, r0, r9
 8005b02:	e9cd 1200 	strd	r1, r2, [sp]
 8005b06:	f7fd f81d 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005b0a:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 8005b0c:	4540      	cmp	r0, r8
 8005b0e:	bfb8      	it	lt
 8005b10:	4640      	movlt	r0, r8
 8005b12:	42b0      	cmp	r0, r6
 8005b14:	bfa8      	it	ge
 8005b16:	4630      	movge	r0, r6
 8005b18:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
  for (int i = 0; i < size; ++i) {
 8005b1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b20:	3401      	adds	r4, #1
 8005b22:	e7e8      	b.n	8005af6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b2>
  } else if (input->type == kTfLiteInt16) {
 8005b24:	2f07      	cmp	r7, #7
 8005b26:	d16a      	bne.n	8005bfe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2ba>
    size_t size = ElementCount(*input->dims);
 8005b28:	6870      	ldr	r0, [r6, #4]
 8005b2a:	f7ff fa2b 	bl	8004f84 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 8005b2e:	7a2b      	ldrb	r3, [r5, #8]
 8005b30:	2b07      	cmp	r3, #7
    size_t size = ElementCount(*input->dims);
 8005b32:	4607      	mov	r7, r0
    switch (output->type) {
 8005b34:	d03d      	beq.n	8005bb2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x26e>
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d01a      	beq.n	8005b70 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	f040 8144 	bne.w	8005dc8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x484>
 8005b40:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005b42:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005b46:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8005b4a:	6826      	ldr	r6, [r4, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005b4c:	e9d4 9b04 	ldrd	r9, fp, [r4, #16]
  return reinterpret_cast<T*>(tensor->data.raw);
 8005b50:	2400      	movs	r4, #0
 8005b52:	42a7      	cmp	r7, r4
 8005b54:	ddac      	ble.n	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005b56:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005b5a:	465a      	mov	r2, fp
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	eba0 0008 	sub.w	r0, r0, r8
 8005b62:	f7fc ffef 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005b66:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
 8005b68:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
 8005b6c:	3401      	adds	r4, #1
 8005b6e:	e7f0      	b.n	8005b52 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20e>
 8005b70:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005b72:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005b76:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8005b7a:	f8d4 8000 	ldr.w	r8, [r4]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005b7e:	e9d4 1b04 	ldrd	r1, fp, [r4, #16]
    output_data[i] = static_cast<output_type>(clamped_output);
 8005b82:	f06f 067f 	mvn.w	r6, #127	; 0x7f
  return reinterpret_cast<T*>(tensor->data.raw);
 8005b86:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005b88:	42a7      	cmp	r7, r4
 8005b8a:	dd91      	ble.n	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005b8c:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005b90:	9100      	str	r1, [sp, #0]
 8005b92:	465a      	mov	r2, fp
 8005b94:	eba0 0009 	sub.w	r0, r0, r9
 8005b98:	f7fc ffd4 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005b9c:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 8005b9e:	42b0      	cmp	r0, r6
 8005ba0:	bfb8      	it	lt
 8005ba2:	4630      	movlt	r0, r6
 8005ba4:	287f      	cmp	r0, #127	; 0x7f
 8005ba6:	bfa8      	it	ge
 8005ba8:	207f      	movge	r0, #127	; 0x7f
 8005baa:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
 8005bac:	9900      	ldr	r1, [sp, #0]
 8005bae:	3401      	adds	r4, #1
 8005bb0:	e7ea      	b.n	8005b88 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>
 8005bb2:	682d      	ldr	r5, [r5, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8005bb4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8005d94 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x450>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005bb8:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005bbc:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8005bc0:	f8d4 b000 	ldr.w	fp, [r4]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005bc4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8005bc8:	f647 76ff 	movw	r6, #32767	; 0x7fff
  return reinterpret_cast<T*>(tensor->data.raw);
 8005bcc:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005bce:	42a7      	cmp	r7, r4
 8005bd0:	f77f af6e 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005bd4:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005bd8:	eba0 0009 	sub.w	r0, r0, r9
 8005bdc:	e9cd 1200 	strd	r1, r2, [sp]
 8005be0:	f7fc ffb0 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005be4:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 8005be6:	4540      	cmp	r0, r8
 8005be8:	bfb8      	it	lt
 8005bea:	4640      	movlt	r0, r8
 8005bec:	42b0      	cmp	r0, r6
 8005bee:	bfa8      	it	ge
 8005bf0:	4630      	movge	r0, r6
 8005bf2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
  for (int i = 0; i < size; ++i) {
 8005bf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	e7e7      	b.n	8005bce <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x28a>
  } else if (input->type == kTfLiteInt8) {
 8005bfe:	2f09      	cmp	r7, #9
 8005c00:	f040 809f 	bne.w	8005d42 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3fe>
    size_t size = ElementCount(*input->dims);
 8005c04:	6870      	ldr	r0, [r6, #4]
 8005c06:	f7ff f9bd 	bl	8004f84 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 8005c0a:	7a2b      	ldrb	r3, [r5, #8]
 8005c0c:	3b02      	subs	r3, #2
    size_t size = ElementCount(*input->dims);
 8005c0e:	4607      	mov	r7, r0
    switch (output->type) {
 8005c10:	2b07      	cmp	r3, #7
 8005c12:	f200 80d9 	bhi.w	8005dc8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x484>
 8005c16:	e8df f003 	tbb	[pc, r3]
 8005c1a:	267b      	.short	0x267b
 8005c1c:	55d7d7d7 	.word	0x55d7d7d7
 8005c20:	04d7      	.short	0x04d7
 8005c22:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005c24:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005c28:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8005c2c:	f8d4 8000 	ldr.w	r8, [r4]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005c30:	e9d4 1b04 	ldrd	r1, fp, [r4, #16]
    output_data[i] = static_cast<output_type>(clamped_output);
 8005c34:	f06f 067f 	mvn.w	r6, #127	; 0x7f
  return reinterpret_cast<T*>(tensor->data.raw);
 8005c38:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005c3a:	42a7      	cmp	r7, r4
 8005c3c:	f77f af38 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005c40:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005c44:	9100      	str	r1, [sp, #0]
 8005c46:	465a      	mov	r2, fp
 8005c48:	eba0 0009 	sub.w	r0, r0, r9
 8005c4c:	f7fc ff7a 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005c50:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 8005c52:	42b0      	cmp	r0, r6
 8005c54:	bfb8      	it	lt
 8005c56:	4630      	movlt	r0, r6
 8005c58:	287f      	cmp	r0, #127	; 0x7f
 8005c5a:	bfa8      	it	ge
 8005c5c:	207f      	movge	r0, #127	; 0x7f
 8005c5e:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
 8005c60:	9900      	ldr	r1, [sp, #0]
 8005c62:	3401      	adds	r4, #1
 8005c64:	e7e9      	b.n	8005c3a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2f6>
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005c66:	e9d4 9b04 	ldrd	r9, fp, [r4, #16]
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 8005c6a:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005c6e:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005c72:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8005c76:	6826      	ldr	r6, [r4, #0]
  return reinterpret_cast<T*>(tensor->data.raw);
 8005c78:	682d      	ldr	r5, [r5, #0]
 8005c7a:	d111      	bne.n	8005ca0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x35c>
 8005c7c:	f1bb 0f01 	cmp.w	fp, #1
 8005c80:	d10e      	bne.n	8005ca0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x35c>
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 8005c82:	eba8 0306 	sub.w	r3, r8, r6
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 8005c86:	3380      	adds	r3, #128	; 0x80
 8005c88:	d10a      	bne.n	8005ca0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x35c>
      for (int i = 0; i < size; ++i) {
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	429f      	cmp	r7, r3
 8005c8e:	f77f af0f 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
        output_data[i] = input_data[i] ^ 0x80;
 8005c92:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8005c96:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8005c9a:	54ea      	strb	r2, [r5, r3]
      for (int i = 0; i < size; ++i) {
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	e7f5      	b.n	8005c8c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x348>
 8005ca0:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005ca2:	42a7      	cmp	r7, r4
 8005ca4:	f77f af04 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005ca8:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005cac:	465a      	mov	r2, fp
 8005cae:	4649      	mov	r1, r9
 8005cb0:	eba0 0008 	sub.w	r0, r0, r8
 8005cb4:	f7fc ff46 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005cb8:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
 8005cba:	f380 0008 	usat	r0, #8, r0
 8005cbe:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	e7ee      	b.n	8005ca2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x35e>
 8005cc4:	682d      	ldr	r5, [r5, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8005cc6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005d94 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x450>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005cca:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005cce:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8005cd2:	f8d4 b000 	ldr.w	fp, [r4]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005cd6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8005cda:	f647 76ff 	movw	r6, #32767	; 0x7fff
  return reinterpret_cast<T*>(tensor->data.raw);
 8005cde:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005ce0:	42a7      	cmp	r7, r4
 8005ce2:	f77f aee5 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005ce6:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005cea:	eba0 0009 	sub.w	r0, r0, r9
 8005cee:	e9cd 1200 	strd	r1, r2, [sp]
 8005cf2:	f7fc ff27 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005cf6:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 8005cf8:	4540      	cmp	r0, r8
 8005cfa:	bfb8      	it	lt
 8005cfc:	4640      	movlt	r0, r8
 8005cfe:	42b0      	cmp	r0, r6
 8005d00:	bfa8      	it	ge
 8005d02:	4630      	movge	r0, r6
 8005d04:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
  for (int i = 0; i < size; ++i) {
 8005d08:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	e7e7      	b.n	8005ce0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x39c>
 8005d10:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005d12:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005d16:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8005d1a:	6826      	ldr	r6, [r4, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005d1c:	e9d4 9b04 	ldrd	r9, fp, [r4, #16]
  return reinterpret_cast<T*>(tensor->data.raw);
 8005d20:	2400      	movs	r4, #0
 8005d22:	42a7      	cmp	r7, r4
 8005d24:	f77f aec4 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005d28:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005d2c:	465a      	mov	r2, fp
 8005d2e:	4649      	mov	r1, r9
 8005d30:	eba0 0008 	sub.w	r0, r0, r8
 8005d34:	f7fc ff06 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8005d38:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
 8005d3a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
 8005d3e:	3401      	adds	r4, #1
 8005d40:	e7ef      	b.n	8005d22 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3de>
  } else if (input->type == kTfLiteUInt8) {
 8005d42:	2f03      	cmp	r7, #3
 8005d44:	d14e      	bne.n	8005de4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4a0>
    size_t size = ElementCount(*input->dims);
 8005d46:	6870      	ldr	r0, [r6, #4]
 8005d48:	f7ff f91c 	bl	8004f84 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 8005d4c:	7a2b      	ldrb	r3, [r5, #8]
 8005d4e:	2b09      	cmp	r3, #9
    size_t size = ElementCount(*input->dims);
 8005d50:	4607      	mov	r7, r0
    switch (output->type) {
 8005d52:	d139      	bne.n	8005dc8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x484>
            data->requantize_output_multiplier, data->requantize_output_shift,
 8005d54:	e9d4 9b04 	ldrd	r9, fp, [r4, #16]
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 8005d58:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
  return reinterpret_cast<const T*>(tensor->data.raw);
 8005d5c:	f8d6 a000 	ldr.w	sl, [r6]
        reference_ops::Requantize(
 8005d60:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8005d64:	6826      	ldr	r6, [r4, #0]
  return reinterpret_cast<T*>(tensor->data.raw);
 8005d66:	682d      	ldr	r5, [r5, #0]
 8005d68:	d116      	bne.n	8005d98 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x454>
 8005d6a:	f1bb 0f01 	cmp.w	fp, #1
 8005d6e:	d113      	bne.n	8005d98 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x454>
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 8005d70:	eba8 0306 	sub.w	r3, r8, r6
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d10f      	bne.n	8005d98 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x454>
      for (int i = 0; i < size; ++i) {
 8005d78:	2300      	movs	r3, #0
 8005d7a:	429f      	cmp	r7, r3
 8005d7c:	f77f ae98 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
        output_data[i] = input_data[i] ^ 0x80;
 8005d80:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8005d84:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8005d88:	54ea      	strb	r2, [r5, r3]
      for (int i = 0; i < size; ++i) {
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	e7f5      	b.n	8005d7a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x436>
 8005d8e:	bf00      	nop
 8005d90:	0800cc40 	.word	0x0800cc40
 8005d94:	ffff8000 	.word	0xffff8000
 8005d98:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005d9a:	42a7      	cmp	r7, r4
 8005d9c:	f77f ae88 	ble.w	8005ab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    const int32_t input = input_data[i] - input_zeropoint;
 8005da0:	f81a 0004 	ldrb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8005da4:	465a      	mov	r2, fp
 8005da6:	4649      	mov	r1, r9
 8005da8:	eba0 0008 	sub.w	r0, r0, r8
 8005dac:	f7fc feca 	bl	8002b44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
    output_data[i] = static_cast<output_type>(clamped_output);
 8005db0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
                                      effective_scale_shift) +
 8005db4:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
 8005db6:	4298      	cmp	r0, r3
 8005db8:	bfb8      	it	lt
 8005dba:	4618      	movlt	r0, r3
 8005dbc:	287f      	cmp	r0, #127	; 0x7f
 8005dbe:	bfa8      	it	ge
 8005dc0:	207f      	movge	r0, #127	; 0x7f
 8005dc2:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
 8005dc4:	3401      	adds	r4, #1
 8005dc6:	e7e8      	b.n	8005d9a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x456>
        MicroPrintf("Input %s, output %s not supported.",
 8005dc8:	7a30      	ldrb	r0, [r6, #8]
    MicroPrintf("Input %s, output %s not supported.",
 8005dca:	f7fc fcc5 	bl	8002758 <TfLiteTypeGetName>
 8005dce:	9000      	str	r0, [sp, #0]
 8005dd0:	7a28      	ldrb	r0, [r5, #8]
 8005dd2:	f7fc fcc1 	bl	8002758 <TfLiteTypeGetName>
 8005dd6:	9900      	ldr	r1, [sp, #0]
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4803      	ldr	r0, [pc, #12]	; (8005de8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4a4>)
 8005ddc:	f7fe fa45 	bl	800426a <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8005de0:	2701      	movs	r7, #1
 8005de2:	e645      	b.n	8005a70 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x12c>
    MicroPrintf("Input %s, output %s not supported.",
 8005de4:	4638      	mov	r0, r7
 8005de6:	e7f0      	b.n	8005dca <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x486>
 8005de8:	0800cc40 	.word	0x0800cc40

08005dec <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8005dec:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8005dee:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8005df0:	b90b      	cbnz	r3, 8005df6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 8005df2:	f7fc fcef 	bl	80027d4 <_Z9AbortImplv>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}
 8005df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8005dfa:	2138      	movs	r1, #56	; 0x38
 8005dfc:	4718      	bx	r3
	...

08005e00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8005e04:	68ce      	ldr	r6, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8005e06:	b0a3      	sub	sp, #140	; 0x8c
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4689      	mov	r9, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 8005e0c:	b90e      	cbnz	r6, 8005e12 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
 8005e0e:	f7fc fce1 	bl	80027d4 <_Z9AbortImplv>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	9306      	str	r3, [sp, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f9      	beq.n	8005e0e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
 8005e1a:	68c5      	ldr	r5, [r0, #12]
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 8005e1c:	4a74      	ldr	r2, [pc, #464]	; (8005ff0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 8005e1e:	682b      	ldr	r3, [r5, #0]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	4628      	mov	r0, r5
 8005e26:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
 8005e28:	4680      	mov	r8, r0
 8005e2a:	b960      	cbnz	r0, 8005e46 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x46>
 8005e2c:	4b71      	ldr	r3, [pc, #452]	; (8005ff4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8005e2e:	6965      	ldr	r5, [r4, #20]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2340      	movs	r3, #64	; 0x40
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 8005e34:	4a70      	ldr	r2, [pc, #448]	; (8005ff8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8005e36:	4971      	ldr	r1, [pc, #452]	; (8005ffc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 8005e38:	4620      	mov	r0, r4
 8005e3a:	47a8      	blx	r5
 8005e3c:	2701      	movs	r7, #1
  if (bias != nullptr) {
    micro_context->DeallocateTempTfLiteTensor(bias);
  }

  return kTfLiteOk;
}
 8005e3e:	4638      	mov	r0, r7
 8005e40:	b023      	add	sp, #140	; 0x8c
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      node, kFullyConnectedWeightsTensor);
 8005e46:	682b      	ldr	r3, [r5, #0]
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8005e48:	4a6d      	ldr	r2, [pc, #436]	; (8006000 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4628      	mov	r0, r5
 8005e52:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
 8005e54:	4682      	mov	sl, r0
 8005e56:	b920      	cbnz	r0, 8005e62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
 8005e58:	4b6a      	ldr	r3, [pc, #424]	; (8006004 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	6965      	ldr	r5, [r4, #20]
 8005e5e:	2343      	movs	r3, #67	; 0x43
 8005e60:	e7e8      	b.n	8005e34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	4a68      	ldr	r2, [pc, #416]	; (8006008 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	4798      	blx	r3
      node, kFullyConnectedOutputTensor);
 8005e70:	682b      	ldr	r3, [r5, #0]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8005e72:	4a66      	ldr	r2, [pc, #408]	; (800600c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	4649      	mov	r1, r9
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8005e7a:	4683      	mov	fp, r0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
 8005e80:	4681      	mov	r9, r0
 8005e82:	b920      	cbnz	r0, 8005e8e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 8005e84:	4b62      	ldr	r3, [pc, #392]	; (8006010 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	6965      	ldr	r5, [r4, #20]
 8005e8a:	2348      	movs	r3, #72	; 0x48
 8005e8c:	e7d2      	b.n	8005e34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8005e8e:	f898 001c 	ldrb.w	r0, [r8, #28]
 8005e92:	f899 301c 	ldrb.w	r3, [r9, #28]
 8005e96:	4283      	cmp	r3, r0
 8005e98:	d013      	beq.n	8005ec2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 8005e9a:	6966      	ldr	r6, [r4, #20]
 8005e9c:	f7fc fc5c 	bl	8002758 <TfLiteTypeGetName>
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	f899 001c 	ldrb.w	r0, [r9, #28]
 8005ea6:	f7fc fc57 	bl	8002758 <TfLiteTypeGetName>
 8005eaa:	4b5a      	ldr	r3, [pc, #360]	; (8006014 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	4b5a      	ldr	r3, [pc, #360]	; (8006018 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8005eb6:	4a50      	ldr	r2, [pc, #320]	; (8005ff8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8005eb8:	4958      	ldr	r1, [pc, #352]	; (800601c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 8005eba:	234a      	movs	r3, #74	; 0x4a
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	47b0      	blx	r6
 8005ec0:	e7bc      	b.n	8005e3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  const RuntimeShape filter_shape = GetTensorShape(filter);
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	a810      	add	r0, sp, #64	; 0x40
 8005ec6:	f7ff fb41 	bl	800554c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8005eca:	4649      	mov	r1, r9
 8005ecc:	a816      	add	r0, sp, #88	; 0x58
 8005ece:	f7ff fb3d 	bl	800554c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8005ed2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ed4:	9305      	str	r3, [sp, #20]
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8005ed6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	4619      	mov	r1, r3
 8005edc:	a810      	add	r0, sp, #64	; 0x40
 8005ede:	9307      	str	r3, [sp, #28]
 8005ee0:	f7ff f9b3 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8005ee4:	9b05      	ldr	r3, [sp, #20]
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8005ee6:	9008      	str	r0, [sp, #32]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8005ee8:	1e5f      	subs	r7, r3, #1
  filter_dims.h = 1;
 8005eea:	2201      	movs	r2, #1
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8005eec:	4639      	mov	r1, r7
 8005eee:	a816      	add	r0, sp, #88	; 0x58
  filter_dims.w = 1;
 8005ef0:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8005ef4:	f7ff f9a9 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8005ef8:	9b07      	ldr	r3, [sp, #28]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8005efa:	900b      	str	r0, [sp, #44]	; 0x2c
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8005efc:	4619      	mov	r1, r3
 8005efe:	a810      	add	r0, sp, #64	; 0x40
 8005f00:	f7ff f9a3 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8005f04:	4639      	mov	r1, r7
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8005f06:	6330      	str	r0, [r6, #48]	; 0x30
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8005f08:	a816      	add	r0, sp, #88	; 0x58
 8005f0a:	f7ff fbd6 	bl	80056ba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8005f0e:	4639      	mov	r1, r7
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8005f10:	62f0      	str	r0, [r6, #44]	; 0x2c
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8005f12:	a816      	add	r0, sp, #88	; 0x58
 8005f14:	f7ff f999 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
  data->buffer_idx = -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	62b3      	str	r3, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8005f1e:	9b06      	ldr	r3, [sp, #24]
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8005f20:	6370      	str	r0, [r6, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8005f22:	7819      	ldrb	r1, [r3, #0]
 8005f24:	f898 201c 	ldrb.w	r2, [r8, #28]
 8005f28:	4643      	mov	r3, r8
 8005f2a:	e9cd 9602 	strd	r9, r6, [sp, #8]
 8005f2e:	e9cd ab00 	strd	sl, fp, [sp]
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7ff fb38 	bl	80055a8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8005f38:	4607      	mov	r7, r0
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f47f af7f 	bne.w	8005e3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  if (input->type == kTfLiteInt16) {
 8005f40:	f898 301c 	ldrb.w	r3, [r8, #28]
 8005f44:	2b07      	cmp	r3, #7
 8005f46:	d10d      	bne.n	8005f64 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
 8005f48:	a808      	add	r0, sp, #32
 8005f4a:	f000 fde3 	bl	8006b14 <arm_fully_connected_s16_get_buffer_size>
  if (buf_size > 0) {
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	dd0a      	ble.n	8005f68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8005f52:	4601      	mov	r1, r0
 8005f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f56:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4798      	blx	r3
 8005f5e:	b118      	cbz	r0, 8005f68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8005f60:	4607      	mov	r7, r0
  ~RuntimeShape() {}
 8005f62:	e76c      	b.n	8005e3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  } else if (input->type == kTfLiteInt8) {
 8005f64:	2b09      	cmp	r3, #9
 8005f66:	d018      	beq.n	8005f9a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
  micro_context->DeallocateTempTfLiteTensor(output);
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	4628      	mov	r0, r5
 8005f70:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8005f72:	682b      	ldr	r3, [r5, #0]
 8005f74:	4641      	mov	r1, r8
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	4628      	mov	r0, r5
 8005f7a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	4651      	mov	r1, sl
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	4628      	mov	r0, r5
 8005f84:	4798      	blx	r3
  if (bias != nullptr) {
 8005f86:	f1bb 0f00 	cmp.w	fp, #0
 8005f8a:	f43f af58 	beq.w	8005e3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	4659      	mov	r1, fp
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4628      	mov	r0, r5
 8005f96:	4798      	blx	r3
 8005f98:	e751      	b.n	8005e3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    const RuntimeShape input_shape = GetTensorShape(input);
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	a81c      	add	r0, sp, #112	; 0x70
 8005f9e:	f7ff fad5 	bl	800554c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_GE(output_dim_count, 2);
 8005fa2:	9b05      	ldr	r3, [sp, #20]
 8005fa4:	3b02      	subs	r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	f63f af31 	bhi.w	8005e0e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    if (output_dim_count > 2 && data->accum_depth % 4 == 0) {
 8005fac:	9b05      	ldr	r3, [sp, #20]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d019      	beq.n	8005fe6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e6>
 8005fb2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005fb4:	079b      	lsls	r3, r3, #30
 8005fb6:	d116      	bne.n	8005fe6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e6>
              context, data->output_depth * sizeof(int32_t)));
 8005fb8:	6b71      	ldr	r1, [r6, #52]	; 0x34
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8005fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fbc:	0089      	lsls	r1, r1, #2
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4798      	blx	r3
              context, data->output_depth * sizeof(int32_t)));
 8005fc2:	6b71      	ldr	r1, [r6, #52]	; 0x34
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8005fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      data->per_channel_output_multiplier =
 8005fc6:	6230      	str	r0, [r6, #32]
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8005fc8:	0089      	lsls	r1, r1, #2
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4798      	blx	r3
      input_dims.n = data->batches;
 8005fce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005fd0:	930c      	str	r3, [sp, #48]	; 0x30
      input_dims.h = 1;
 8005fd2:	2301      	movs	r3, #1
      input_dims.w = 1;
 8005fd4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
      data->per_channel_output_shift =
 8005fd8:	6270      	str	r0, [r6, #36]	; 0x24
      input_dims.c = data->accum_depth;
 8005fda:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005fdc:	930f      	str	r3, [sp, #60]	; 0x3c
      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 8005fde:	a80c      	add	r0, sp, #48	; 0x30
 8005fe0:	f000 fd56 	bl	8006a90 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8005fe4:	e7b3      	b.n	8005f4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8005fe6:	a808      	add	r0, sp, #32
 8005fe8:	f000 fdd2 	bl	8006b90 <arm_fully_connected_s8_get_buffer_size>
 8005fec:	e7af      	b.n	8005f4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
 8005fee:	bf00      	nop
 8005ff0:	0800cd8c 	.word	0x0800cd8c
 8005ff4:	0800cceb 	.word	0x0800cceb
 8005ff8:	0800cf81 	.word	0x0800cf81
 8005ffc:	0800bacf 	.word	0x0800bacf
 8006000:	0800cd94 	.word	0x0800cd94
 8006004:	0800cfd5 	.word	0x0800cfd5
 8006008:	0800cd88 	.word	0x0800cd88
 800600c:	0800cd90 	.word	0x0800cd90
 8006010:	0800ccfc 	.word	0x0800ccfc
 8006014:	0800d001 	.word	0x0800d001
 8006018:	0800d00e 	.word	0x0800d00e
 800601c:	0800cfe7 	.word	0x0800cfe7

08006020 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8006020:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 8006022:	2300      	movs	r3, #0
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4a04      	ldr	r2, [pc, #16]	; (8006038 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x18>)
 8006028:	4b04      	ldr	r3, [pc, #16]	; (800603c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
 800602a:	4905      	ldr	r1, [pc, #20]	; (8006040 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x20>)
TfLiteRegistration Register_FULLY_CONNECTED() {
 800602c:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 800602e:	f7ff fafb 	bl	8005628 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
 8006032:	4620      	mov	r0, r4
 8006034:	b002      	add	sp, #8
 8006036:	bd10      	pop	{r4, pc}
 8006038:	08005e01 	.word	0x08005e01
 800603c:	08006351 	.word	0x08006351
 8006040:	08005ded 	.word	0x08005ded

08006044 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	460e      	mov	r6, r1
 800604a:	b0a3      	sub	sp, #140	; 0x8c
 800604c:	4615      	mov	r5, r2
  input_dims.c = data.accum_depth;
 800604e:	6b32      	ldr	r2, [r6, #48]	; 0x30
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 8006050:	4699      	mov	r9, r3
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8006052:	680b      	ldr	r3, [r1, #0]
 8006054:	9309      	str	r3, [sp, #36]	; 0x24
  filter_dims.n = data.accum_depth;
 8006056:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
  quant_params.shift = data.reference_op_data.output_shift;
 800605a:	684b      	ldr	r3, [r1, #4]
  filter_dims.c = data.output_depth;
 800605c:	6b72      	ldr	r2, [r6, #52]	; 0x34
  input_dims.n = data.batches;
 800605e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  quant_params.shift = data.reference_op_data.output_shift;
 8006060:	930a      	str	r3, [sp, #40]	; 0x28
  output_dims.n = data.batches;
 8006062:	e9cd 2118 	strd	r2, r1, [sp, #96]	; 0x60
  input_dims.h = 1;
 8006066:	2301      	movs	r3, #1
  input_dims.n = data.batches;
 8006068:	910d      	str	r1, [sp, #52]	; 0x34
  if (data.buffer_idx > -1) {
 800606a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  output_dims.c = data.output_depth;
 800606c:	921c      	str	r2, [sp, #112]	; 0x70
  input_dims.w = 1;
 800606e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  filter_dims.w = 1;
 8006072:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  bias_dims.n = 1;
 8006076:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  bias_dims.w = 1;
 800607a:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  output_dims.w = 1;
 800607e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  ctx.buf = nullptr;
 8006082:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 8006084:	4299      	cmp	r1, r3
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 8006086:	e9dd 8a2c 	ldrd	r8, sl, [sp, #176]	; 0xb0
  ctx.size = 0;
 800608a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 800608e:	4604      	mov	r4, r0
  if (data.buffer_idx > -1) {
 8006090:	db02      	blt.n	8006098 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x54>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8006092:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006094:	4798      	blx	r3
 8006096:	900b      	str	r0, [sp, #44]	; 0x2c
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
 8006098:	f1b8 0f00 	cmp.w	r8, #0
 800609c:	d001      	beq.n	80060a2 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x5e>
 800609e:	f8d8 8000 	ldr.w	r8, [r8]
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 80060a2:	6973      	ldr	r3, [r6, #20]
 80060a4:	425b      	negs	r3, r3
 80060a6:	931d      	str	r3, [sp, #116]	; 0x74
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 80060a8:	69f3      	ldr	r3, [r6, #28]
 80060aa:	931f      	str	r3, [sp, #124]	; 0x7c
  fc_params.filter_offset = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	931e      	str	r3, [sp, #120]	; 0x78
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 80060b0:	68b3      	ldr	r3, [r6, #8]
 80060b2:	9320      	str	r3, [sp, #128]	; 0x80
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 80060b4:	68f3      	ldr	r3, [r6, #12]
 80060b6:	9321      	str	r3, [sp, #132]	; 0x84
  TFLITE_DCHECK(tensor != nullptr);
 80060b8:	b90d      	cbnz	r5, 80060be <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x7a>
 80060ba:	f7fc fb8b 	bl	80027d4 <_Z9AbortImplv>
  TF_LITE_ENSURE_EQ(
 80060be:	4648      	mov	r0, r9
  return reinterpret_cast<const T*>(tensor->data.raw);
 80060c0:	f8d5 b000 	ldr.w	fp, [r5]
 80060c4:	f7ff f8cd 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 80060c8:	f1ba 0f00 	cmp.w	sl, #0
 80060cc:	d0f5      	beq.n	80060ba <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x76>
 80060ce:	f8da 3000 	ldr.w	r3, [sl]
 80060d2:	9306      	str	r3, [sp, #24]
 80060d4:	af19      	add	r7, sp, #100	; 0x64
 80060d6:	ab11      	add	r3, sp, #68	; 0x44
 80060d8:	ae15      	add	r6, sp, #84	; 0x54
 80060da:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80060de:	e9cd b300 	strd	fp, r3, [sp]
 80060e2:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80060e6:	ab0d      	add	r3, sp, #52	; 0x34
 80060e8:	aa09      	add	r2, sp, #36	; 0x24
 80060ea:	a91d      	add	r1, sp, #116	; 0x74
 80060ec:	a80b      	add	r0, sp, #44	; 0x2c
 80060ee:	f000 fcd1 	bl	8006a94 <arm_fully_connected_s16>
 80060f2:	b318      	cbz	r0, 800613c <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xf8>
 80060f4:	4648      	mov	r0, r9
 80060f6:	f7ff f8b4 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80060fa:	f8da 3000 	ldr.w	r3, [sl]
 80060fe:	9002      	str	r0, [sp, #8]
 8006100:	e9cd 7305 	strd	r7, r3, [sp, #20]
 8006104:	ab11      	add	r3, sp, #68	; 0x44
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	aa09      	add	r2, sp, #36	; 0x24
 800610e:	ab0d      	add	r3, sp, #52	; 0x34
 8006110:	a91d      	add	r1, sp, #116	; 0x74
 8006112:	e9cd 6803 	strd	r6, r8, [sp, #12]
 8006116:	a80b      	add	r0, sp, #44	; 0x2c
 8006118:	f8d4 b014 	ldr.w	fp, [r4, #20]
 800611c:	f000 fcba 	bl	8006a94 <arm_fully_connected_s16>
 8006120:	2300      	movs	r3, #0
 8006122:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x100>)
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x104>)
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	4620      	mov	r0, r4
 8006130:	4a06      	ldr	r2, [pc, #24]	; (800614c <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x108>)
 8006132:	4907      	ldr	r1, [pc, #28]	; (8006150 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10c>)
 8006134:	f44f 738b 	mov.w	r3, #278	; 0x116
 8006138:	47d8      	blx	fp
 800613a:	2001      	movs	r0, #1
}
 800613c:	b023      	add	sp, #140	; 0x8c
 800613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006142:	bf00      	nop
 8006144:	0800d01a 	.word	0x0800d01a
 8006148:	0800d02f 	.word	0x0800d02f
 800614c:	0800cf81 	.word	0x0800cf81
 8006150:	0800ccb0 	.word	0x0800ccb0

08006154 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	b0b7      	sub	sp, #220	; 0xdc
 800615a:	e9dd 8940 	ldrd	r8, r9, [sp, #256]	; 0x100
 800615e:	4604      	mov	r4, r0
 8006160:	460d      	mov	r5, r1
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8006162:	a826      	add	r0, sp, #152	; 0x98
 8006164:	4649      	mov	r1, r9
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 8006166:	469a      	mov	sl, r3
 8006168:	4693      	mov	fp, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800616a:	f7ff fa95 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 800616e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  TFLITE_DCHECK_GE(output_dim_count, 2);
 8006170:	1eb3      	subs	r3, r6, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x26>
 8006176:	f7fc fb2d 	bl	80027d4 <_Z9AbortImplv>
  input_dims.c = data.accum_depth;
 800617a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  input_dims.n = data.batches;
 800617c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 800617e:	682b      	ldr	r3, [r5, #0]
 8006180:	930b      	str	r3, [sp, #44]	; 0x2c
  filter_dims.n = data.accum_depth;
 8006182:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  filter_dims.c = data.output_depth;
 8006186:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  quant_params.shift = data.reference_op_data.output_shift;
 8006188:	686b      	ldr	r3, [r5, #4]
 800618a:	930c      	str	r3, [sp, #48]	; 0x30
  output_dims.n = data.batches;
 800618c:	e9cd 211c 	strd	r2, r1, [sp, #112]	; 0x70
  input_dims.h = 1;
 8006190:	2301      	movs	r3, #1
  input_dims.n = data.batches;
 8006192:	9111      	str	r1, [sp, #68]	; 0x44
  if (data.buffer_idx > -1) {
 8006194:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  output_dims.c = data.output_depth;
 8006196:	9220      	str	r2, [sp, #128]	; 0x80
  input_dims.w = 1;
 8006198:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  filter_dims.w = 1;
 800619c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  bias_dims.n = 1;
 80061a0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  bias_dims.w = 1;
 80061a4:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  output_dims.w = 1;
 80061a8:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  ctx.buf = nullptr;
 80061ac:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 80061ae:	4299      	cmp	r1, r3
  ctx.size = 0;
 80061b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (data.buffer_idx > -1) {
 80061b4:	db03      	blt.n	80061be <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x6a>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80061b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061b8:	4620      	mov	r0, r4
 80061ba:	4798      	blx	r3
 80061bc:	900d      	str	r0, [sp, #52]	; 0x34
  return tensor == nullptr ? nullptr
 80061be:	f1b8 0f00 	cmp.w	r8, #0
 80061c2:	d001      	beq.n	80061c8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x74>
 80061c4:	f8d8 8000 	ldr.w	r8, [r8]
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80061c8:	696a      	ldr	r2, [r5, #20]
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 80061ca:	f8d5 c01c 	ldr.w	ip, [r5, #28]
  if (output_dim_count > 2 && data.accum_depth % 4 == 0) {
 80061ce:	2e02      	cmp	r6, #2
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80061d0:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80061d4:	f1c2 0200 	rsb	r2, r2, #0
  if (output_dim_count > 2 && data.accum_depth % 4 == 0) {
 80061d8:	d065      	beq.n	80062a6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x152>
 80061da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80061dc:	f013 0303 	ands.w	r3, r3, #3
 80061e0:	d161      	bne.n	80062a6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x152>
    conv_params.dilation.h = 1;
 80061e2:	2101      	movs	r1, #1
    conv_params.padding.w = 0;
 80061e4:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80061e8:	e9cd 7034 	strd	r7, r0, [sp, #208]	; 0xd0
    conv_params.dilation.w = 1;
 80061ec:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 80061f0:	e9cd 2c2c 	strd	r2, ip, [sp, #176]	; 0xb0
    conv_params.stride.w = 1;
 80061f4:	e9cd 112e 	strd	r1, r1, [sp, #184]	; 0xb8
        const_cast<int32_t*>(data.per_channel_output_shift);
 80061f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        const_cast<int32_t*>(data.per_channel_output_multiplier);
 80061fa:	6a29      	ldr	r1, [r5, #32]
    per_channel_quant_params.multiplier =
 80061fc:	910f      	str	r1, [sp, #60]	; 0x3c
    per_channel_quant_params.shift =
 80061fe:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < data.output_depth; i++) {
 8006200:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006202:	4298      	cmp	r0, r3
 8006204:	dd07      	ble.n	8006216 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xc2>
      per_channel_quant_params.multiplier[i] = quant_params.multiplier;
 8006206:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006208:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      per_channel_quant_params.shift[i] = quant_params.shift;
 800620c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800620e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < data.output_depth; i++) {
 8006212:	3301      	adds	r3, #1
 8006214:	e7f4      	b.n	8006200 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xac>
    TF_LITE_ENSURE_EQ(
 8006216:	4658      	mov	r0, fp
 8006218:	f7ff f823 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800621c:	9009      	str	r0, [sp, #36]	; 0x24
 800621e:	4650      	mov	r0, sl
 8006220:	f7ff f81f 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8006224:	f1b9 0f00 	cmp.w	r9, #0
 8006228:	d0a5      	beq.n	8006176 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>
 800622a:	f8d9 2000 	ldr.w	r2, [r9]
 800622e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006230:	9206      	str	r2, [sp, #24]
 8006232:	af1d      	add	r7, sp, #116	; 0x74
 8006234:	ae19      	add	r6, sp, #100	; 0x64
 8006236:	ad15      	add	r5, sp, #84	; 0x54
 8006238:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	e9cd 8704 	strd	r8, r7, [sp, #16]
 8006242:	9501      	str	r5, [sp, #4]
 8006244:	ab11      	add	r3, sp, #68	; 0x44
 8006246:	aa0f      	add	r2, sp, #60	; 0x3c
 8006248:	a92c      	add	r1, sp, #176	; 0xb0
 800624a:	a80d      	add	r0, sp, #52	; 0x34
 800624c:	f000 fbe0 	bl	8006a10 <arm_convolve_1x1_s8_fast>
 8006250:	b330      	cbz	r0, 80062a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14c>
 8006252:	6963      	ldr	r3, [r4, #20]
 8006254:	9309      	str	r3, [sp, #36]	; 0x24
 8006256:	4658      	mov	r0, fp
 8006258:	f7ff f803 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800625c:	4683      	mov	fp, r0
 800625e:	4650      	mov	r0, sl
 8006260:	f7fe ffff 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8006264:	f8d9 3000 	ldr.w	r3, [r9]
 8006268:	f8cd b000 	str.w	fp, [sp]
 800626c:	e9cd 7305 	strd	r7, r3, [sp, #20]
 8006270:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006274:	ab11      	add	r3, sp, #68	; 0x44
 8006276:	aa0f      	add	r2, sp, #60	; 0x3c
 8006278:	a92c      	add	r1, sp, #176	; 0xb0
 800627a:	e9cd 6803 	strd	r6, r8, [sp, #12]
 800627e:	a80d      	add	r0, sp, #52	; 0x34
 8006280:	f000 fbc6 	bl	8006a10 <arm_convolve_1x1_s8_fast>
 8006284:	2300      	movs	r3, #0
 8006286:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800628a:	4b2c      	ldr	r3, [pc, #176]	; (800633c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1e8>)
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	4b2c      	ldr	r3, [pc, #176]	; (8006340 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1ec>)
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4620      	mov	r0, r4
 8006294:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f0>)
 8006296:	492c      	ldr	r1, [pc, #176]	; (8006348 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f4>)
 8006298:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800629a:	23e0      	movs	r3, #224	; 0xe0
 800629c:	47a0      	blx	r4
    TF_LITE_ENSURE_EQ(
 800629e:	2001      	movs	r0, #1
}
 80062a0:	b037      	add	sp, #220	; 0xdc
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc_params.activation.max = data.reference_op_data.output_activation_max;
 80062a6:	e9cd 7024 	strd	r7, r0, [sp, #144]	; 0x90
    fc_params.filter_offset = 0;
 80062aa:	2300      	movs	r3, #0
    TF_LITE_ENSURE_EQ(
 80062ac:	4658      	mov	r0, fp
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
 80062ae:	9221      	str	r2, [sp, #132]	; 0x84
    fc_params.output_offset = data.reference_op_data.output_zero_point;
 80062b0:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
    fc_params.filter_offset = 0;
 80062b4:	9322      	str	r3, [sp, #136]	; 0x88
    TF_LITE_ENSURE_EQ(
 80062b6:	f7fe ffd4 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80062ba:	4607      	mov	r7, r0
 80062bc:	4650      	mov	r0, sl
 80062be:	f7fe ffd0 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80062c2:	f1b9 0f00 	cmp.w	r9, #0
 80062c6:	f43f af56 	beq.w	8006176 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>
 80062ca:	f8d9 3000 	ldr.w	r3, [r9]
 80062ce:	9306      	str	r3, [sp, #24]
 80062d0:	ad1d      	add	r5, sp, #116	; 0x74
 80062d2:	ab15      	add	r3, sp, #84	; 0x54
 80062d4:	ae19      	add	r6, sp, #100	; 0x64
 80062d6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80062da:	e9cd 7300 	strd	r7, r3, [sp]
 80062de:	e9cd 8504 	strd	r8, r5, [sp, #16]
 80062e2:	ab11      	add	r3, sp, #68	; 0x44
 80062e4:	aa0b      	add	r2, sp, #44	; 0x2c
 80062e6:	a921      	add	r1, sp, #132	; 0x84
 80062e8:	a80d      	add	r0, sp, #52	; 0x34
 80062ea:	f000 fc15 	bl	8006b18 <arm_fully_connected_s8>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d0d6      	beq.n	80062a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14c>
 80062f2:	4658      	mov	r0, fp
 80062f4:	f7fe ffb5 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80062f8:	4683      	mov	fp, r0
 80062fa:	4650      	mov	r0, sl
 80062fc:	f7fe ffb1 	bl	8005262 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8006300:	f8d9 3000 	ldr.w	r3, [r9]
 8006304:	6967      	ldr	r7, [r4, #20]
 8006306:	9002      	str	r0, [sp, #8]
 8006308:	e9cd 5305 	strd	r5, r3, [sp, #20]
 800630c:	ab15      	add	r3, sp, #84	; 0x54
 800630e:	e9cd b300 	strd	fp, r3, [sp]
 8006312:	aa0b      	add	r2, sp, #44	; 0x2c
 8006314:	ab11      	add	r3, sp, #68	; 0x44
 8006316:	a921      	add	r1, sp, #132	; 0x84
 8006318:	e9cd 6803 	strd	r6, r8, [sp, #12]
 800631c:	a80d      	add	r0, sp, #52	; 0x34
 800631e:	f000 fbfb 	bl	8006b18 <arm_fully_connected_s8>
 8006322:	2300      	movs	r3, #0
 8006324:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1e8>)
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f8>)
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f0>)
 8006332:	4905      	ldr	r1, [pc, #20]	; (8006348 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f4>)
 8006334:	23f0      	movs	r3, #240	; 0xf0
 8006336:	4620      	mov	r0, r4
 8006338:	47b8      	blx	r7
 800633a:	e7b0      	b.n	800629e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14a>
 800633c:	0800d01a 	.word	0x0800d01a
 8006340:	0800d150 	.word	0x0800d150
 8006344:	0800cf81 	.word	0x0800cf81
 8006348:	0800ccb0 	.word	0x0800ccb0
 800634c:	0800d262 	.word	0x0800d262

08006350 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8006358:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800635c:	b0a9      	sub	sp, #164	; 0xa4
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8006362:	f1b9 0f00 	cmp.w	r9, #0
 8006366:	d101      	bne.n	800636c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 8006368:	f7fc fa34 	bl	80027d4 <_Z9AbortImplv>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800636c:	4b67      	ldr	r3, [pc, #412]	; (800650c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	f7ff f982 	bl	8005678 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8006374:	4b66      	ldr	r3, [pc, #408]	; (8006510 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8006376:	4639      	mov	r1, r7
 8006378:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800637a:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff f97b 	bl	8005678 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8006382:	4a64      	ldr	r2, [pc, #400]	; (8006514 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8006384:	9003      	str	r0, [sp, #12]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	4639      	mov	r1, r7
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff f974 	bl	8005678 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8006390:	4a61      	ldr	r2, [pc, #388]	; (8006518 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
 8006392:	4639      	mov	r1, r7
 8006394:	6812      	ldr	r2, [r2, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8006396:	4605      	mov	r5, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff f96f 	bl	800567c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800639e:	68f9      	ldr	r1, [r7, #12]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80063a0:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d0e0      	beq.n	8006368 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  switch (input->type) {
 80063a6:	7a20      	ldrb	r0, [r4, #8]
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	2807      	cmp	r0, #7
 80063ac:	f000 809e 	beq.w	80064ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 80063b0:	2809      	cmp	r0, #9
 80063b2:	f000 8094 	beq.w	80064de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18e>
 80063b6:	2801      	cmp	r0, #1
 80063b8:	f040 809f 	bne.w	80064fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
  return tensor == nullptr ? nullptr
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d064      	beq.n	800648a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
 80063c0:	682e      	ldr	r6, [r5, #0]
          FullyConnectedParamsFloat(params->activation),
 80063c2:	f899 1000 	ldrb.w	r1, [r9]
 80063c6:	9303      	str	r3, [sp, #12]
 80063c8:	a81e      	add	r0, sp, #120	; 0x78
 80063ca:	f7ff f8cf 	bl	800556c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 80063ce:	4621      	mov	r1, r4
 80063d0:	a806      	add	r0, sp, #24
 80063d2:	f7ff f961 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	9305      	str	r3, [sp, #20]
          tflite::micro::GetTensorShape(filter),
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	a80c      	add	r0, sp, #48	; 0x30
 80063de:	4619      	mov	r1, r3
 80063e0:	f7ff f95a 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0be      	beq.n	8006368 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80063ea:	681b      	ldr	r3, [r3, #0]
          tflite::micro::GetTensorShape(bias), bias_data,
 80063ec:	4629      	mov	r1, r5
 80063ee:	a812      	add	r0, sp, #72	; 0x48
 80063f0:	461f      	mov	r7, r3
 80063f2:	f7ff f951 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 80063f6:	4641      	mov	r1, r8
 80063f8:	a818      	add	r0, sp, #96	; 0x60
 80063fa:	f7ff f94d 	bl	8005698 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 80063fe:	f1b8 0f00 	cmp.w	r8, #0
 8006402:	d0b1      	beq.n	8006368 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8006404:	9c18      	ldr	r4, [sp, #96]	; 0x60
  return reinterpret_cast<T*>(tensor->data.raw);
 8006406:	f8d8 3000 	ldr.w	r3, [r8]
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	3c01      	subs	r4, #1
 800640e:	4621      	mov	r1, r4
 8006410:	a818      	add	r0, sp, #96	; 0x60
 8006412:	f7ff f952 	bl	80056ba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8006416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006418:	9003      	str	r0, [sp, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800641a:	1ea9      	subs	r1, r5, #2
 800641c:	a80c      	add	r0, sp, #48	; 0x30
 800641e:	f7fe ff14 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
 8006422:	4621      	mov	r1, r4
 8006424:	4680      	mov	r8, r0
 8006426:	a818      	add	r0, sp, #96	; 0x60
 8006428:	f7fe ff0f 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
 800642c:	4580      	cmp	r8, r0
  const float output_activation_min = params.float_activation_min;
 800642e:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
  const float output_activation_max = params.float_activation_max;
 8006432:	eddd 8a26 	vldr	s17, [sp, #152]	; 0x98
 8006436:	4604      	mov	r4, r0
 8006438:	d196      	bne.n	8006368 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800643a:	1e69      	subs	r1, r5, #1
 800643c:	a80c      	add	r0, sp, #48	; 0x30
 800643e:	f7fe ff04 	bl	800524a <_ZNK6tflite12RuntimeShape4DimsEi>
 8006442:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
 8006444:	eddf 6a35 	vldr	s13, [pc, #212]	; 800651c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8006448:	461d      	mov	r5, r3
  for (int b = 0; b < batches; ++b) {
 800644a:	469c      	mov	ip, r3
 800644c:	9a03      	ldr	r2, [sp, #12]
 800644e:	4562      	cmp	r2, ip
 8006450:	dd3f      	ble.n	80064d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8006452:	9a04      	ldr	r2, [sp, #16]
 8006454:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8006458:	9a05      	ldr	r2, [sp, #20]
 800645a:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 800645e:	2200      	movs	r2, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8006460:	4611      	mov	r1, r2
 8006462:	42a1      	cmp	r1, r4
 8006464:	da30      	bge.n	80064c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      float total = 0.f;
 8006466:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800651c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
 800646a:	eb07 0982 	add.w	r9, r7, r2, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800646e:	46da      	mov	sl, fp
      for (int d = 0; d < accum_depth; ++d) {
 8006470:	f04f 0e00 	mov.w	lr, #0
 8006474:	4570      	cmp	r0, lr
 8006476:	dd0a      	ble.n	800648e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
        total += input_data[b * accum_depth + d] *
 8006478:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
 800647c:	ecb9 7a01 	vldmia	r9!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
 8006480:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
 8006484:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
 8006488:	e7f4      	b.n	8006474 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x124>
  return tensor == nullptr ? nullptr
 800648a:	462e      	mov	r6, r5
 800648c:	e799      	b.n	80063c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
      if (bias_data) {
 800648e:	b1c6      	cbz	r6, 80064c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
        bias_value = bias_data[out_c];
 8006490:	eb06 0e81 	add.w	lr, r6, r1, lsl #2
 8006494:	ed9e 7a00 	vldr	s14, [lr]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8006498:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800649c:	3101      	adds	r1, #1
	return __b;
 800649e:	eeb4 8a67 	vcmp.f32	s16, s15
 80064a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a6:	bfc8      	it	gt
 80064a8:	eef0 7a48 	vmovgt.f32	s15, s16
	return __b;
 80064ac:	eef4 8a67 	vcmp.f32	s17, s15
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	bf48      	it	mi
 80064b6:	eef0 7a68 	vmovmi.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 80064ba:	ece8 7a01 	vstmia	r8!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80064be:	4402      	add	r2, r0
 80064c0:	e7cf      	b.n	8006462 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x112>
      float bias_value = 0.0f;
 80064c2:	eeb0 7a66 	vmov.f32	s14, s13
 80064c6:	e7e7      	b.n	8006498 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
  for (int b = 0; b < batches; ++b) {
 80064c8:	f10c 0c01 	add.w	ip, ip, #1
 80064cc:	4425      	add	r5, r4
 80064ce:	4403      	add	r3, r0
 80064d0:	e7bc      	b.n	800644c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>
  return kTfLiteOk;
 80064d2:	2000      	movs	r0, #0
}
 80064d4:	b029      	add	sp, #164	; 0xa4
 80064d6:	ecbd 8b02 	vpop	{d8}
 80064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 80064de:	e9cd 5800 	strd	r5, r8, [sp]
 80064e2:	4622      	mov	r2, r4
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff fe35 	bl	8006154 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
                               output);
 80064ea:	e7f3      	b.n	80064d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>
      return EvalQuantizedInt16(context, node, data, input, filter, bias,
 80064ec:	e9cd 5800 	strd	r5, r8, [sp]
 80064f0:	4622      	mov	r2, r4
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff fda6 	bl	8006044 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
                                output);
 80064f8:	e7ec      	b.n	80064d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 80064fa:	f7fc f92d 	bl	8002758 <TfLiteTypeGetName>
 80064fe:	7a22      	ldrb	r2, [r4, #8]
 8006500:	4601      	mov	r1, r0
 8006502:	4807      	ldr	r0, [pc, #28]	; (8006520 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>)
 8006504:	f7fd feb1 	bl	800426a <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8006508:	2001      	movs	r0, #1
 800650a:	e7e3      	b.n	80064d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>
 800650c:	0800cd8c 	.word	0x0800cd8c
 8006510:	0800cd94 	.word	0x0800cd94
 8006514:	0800cd88 	.word	0x0800cd88
 8006518:	0800cd90 	.word	0x0800cd90
 800651c:	00000000 	.word	0x00000000
 8006520:	0800d134 	.word	0x0800d134

08006524 <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:
}

GreedyMemoryPlanner::GreedyMemoryPlanner() {}

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 8006524:	b510      	push	{r4, lr}
  // Reset internal states
  buffer_count_ = 0;
  need_to_calculate_offsets_ = true;
 8006526:	2401      	movs	r4, #1
 8006528:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();

  unsigned char* next_free = scratch_buffer;
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800652c:	60c1      	str	r1, [r0, #12]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800652e:	2428      	movs	r4, #40	; 0x28
 8006530:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8006534:	eb01 1102 	add.w	r1, r1, r2, lsl #4

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8006538:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800653a:	eb01 0182 	add.w	r1, r1, r2, lsl #2

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800653e:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8006540:	240c      	movs	r4, #12
  next_free += sizeof(int) * max_buffer_count_;
 8006542:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_count_ = 0;
 8006546:	2300      	movs	r3, #0
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8006548:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800654a:	fb04 1102 	mla	r1, r4, r2, r1
  buffer_count_ = 0;
 800654e:	6083      	str	r3, [r0, #8]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8006550:	6042      	str	r2, [r0, #4]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8006552:	6241      	str	r1, [r0, #36]	; 0x24
  return kTfLiteOk;
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd10      	pop	{r4, pc}

08006558 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8006558:	4770      	bx	lr

0800655a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
  return kTfLiteOk;
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800655a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800655c:	9f08      	ldr	r7, [sp, #32]
 800655e:	6804      	ldr	r4, [r0, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8006560:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8006564:	9700      	str	r7, [sp, #0]
 8006566:	68a4      	ldr	r4, [r4, #8]
 8006568:	47a0      	blx	r4
 800656a:	b928      	cbnz	r0, 8006578 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
      kTfLiteOk) {
    return kTfLiteError;
  }
  current->offline_offset = offline_offset;
 800656c:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 8006570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006572:	606b      	str	r3, [r5, #4]
  return kTfLiteOk;
}
 8006574:	b003      	add	sp, #12
 8006576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
 8006578:	2001      	movs	r0, #1
 800657a:	e7fb      	b.n	8006574 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

0800657c <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800657c:	6880      	ldr	r0, [r0, #8]
 800657e:	4770      	bx	lr

08006580 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
 8006586:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 800658a:	428d      	cmp	r5, r1
 800658c:	db05      	blt.n	800659a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800658e:	460a      	mov	r2, r1
 8006590:	490b      	ldr	r1, [pc, #44]	; (80065c0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
 8006592:	f7fc f8ed 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8006596:	2001      	movs	r0, #1
}
 8006598:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	012e      	lsls	r6, r5, #4
 800659e:	eb00 1105 	add.w	r1, r0, r5, lsl #4
  current->size = size;
 80065a2:	5182      	str	r2, [r0, r6]
  current->first_time_used = first_time_used;
 80065a4:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 80065aa:	f04f 33ff 	mov.w	r3, #4294967295
 80065ae:	604b      	str	r3, [r1, #4]
  ++buffer_count_;
 80065b0:	3501      	adds	r5, #1
  need_to_calculate_offsets_ = true;
 80065b2:	2301      	movs	r3, #1
  ++buffer_count_;
 80065b4:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
 80065b6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
 80065ba:	2000      	movs	r0, #0
 80065bc:	e7ec      	b.n	8006598 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
 80065be:	bf00      	nop
 80065c0:	0800d364 	.word	0x0800d364

080065c4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
 80065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
 80065c6:	4604      	mov	r4, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	2501      	movs	r5, #1
    any_swapped = false;
 80065cc:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
 80065ce:	4295      	cmp	r5, r2
 80065d0:	da12      	bge.n	80065f8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
 80065d2:	e9d4 7c00 	ldrd	r7, ip, [r4]
 80065d6:	4567      	cmp	r7, ip
        values[i] = value_temp;
 80065d8:	bfbc      	itt	lt
 80065da:	e9c4 c700 	strdlt	ip, r7, [r4]
        ids[i - 1] = ids[i];
 80065de:	e9d3 6700 	ldrdlt	r6, r7, [r3]
    for (int i = 1; i < size; ++i) {
 80065e2:	f105 0501 	add.w	r5, r5, #1
        ids[i] = id_temp;
 80065e6:	bfb8      	it	lt
 80065e8:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
 80065ec:	f104 0404 	add.w	r4, r4, #4
 80065f0:	bfb8      	it	lt
 80065f2:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
 80065f4:	3304      	adds	r3, #4
 80065f6:	e7ea      	b.n	80065ce <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	d1e4      	bne.n	80065c6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
 80065fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006600 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:
GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 8006600:	4b01      	ldr	r3, [pc, #4]	; (8006608 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x8>)
 8006602:	6003      	str	r3, [r0, #0]
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	0800d3fc 	.word	0x0800d3fc

0800660c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
 800660c:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
 800660e:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
 8006610:	68c1      	ldr	r1, [r0, #12]
 8006612:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 8006616:	6888      	ldr	r0, [r1, #8]
 8006618:	4298      	cmp	r0, r3
 800661a:	dc05      	bgt.n	8006628 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
 800661c:	68c8      	ldr	r0, [r1, #12]
 800661e:	4290      	cmp	r0, r2
 8006620:	bfb4      	ite	lt
 8006622:	2000      	movlt	r0, #0
 8006624:	2001      	movge	r0, #1
}
 8006626:	bd10      	pop	{r4, pc}
    return false;
 8006628:	2000      	movs	r0, #0
 800662a:	e7fc      	b.n	8006626 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

0800662c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	4605      	mov	r5, r0
  if (start == nullptr) {
 8006630:	b989      	cbnz	r1, 8006656 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8006632:	6a01      	ldr	r1, [r0, #32]
 8006634:	69ac      	ldr	r4, [r5, #24]
 8006636:	200c      	movs	r0, #12
 8006638:	fb00 4401 	mla	r4, r0, r1, r4
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800663c:	260c      	movs	r6, #12
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800663e:	4621      	mov	r1, r4
 8006640:	4628      	mov	r0, r5
 8006642:	f7ff ffe3 	bl	800660c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8006646:	b950      	cbnz	r0, 800665e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
 8006648:	68a1      	ldr	r1, [r4, #8]
 800664a:	1c4c      	adds	r4, r1, #1
 800664c:	d009      	beq.n	8006662 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
 800664e:	69ac      	ldr	r4, [r5, #24]
 8006650:	fb06 4401 	mla	r4, r6, r1, r4
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8006654:	e7f3      	b.n	800663e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
 8006656:	6889      	ldr	r1, [r1, #8]
 8006658:	1c4e      	adds	r6, r1, #1
 800665a:	d1eb      	bne.n	8006634 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
 800665c:	2400      	movs	r4, #0
}
 800665e:	4620      	mov	r0, r4
 8006660:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
 8006662:	4604      	mov	r4, r0
 8006664:	e7fb      	b.n	800665e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

08006666 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8006666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800666a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800666e:	b085      	sub	sp, #20
 8006670:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80ae 	beq.w	80067d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
 8006678:	6885      	ldr	r5, [r0, #8]
 800667a:	2d00      	cmp	r5, #0
 800667c:	f000 80aa 	beq.w	80067d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
      buffer_ids_sorted_[idx_from_tail] = i;
 8006680:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
  need_to_calculate_offsets_ = false;
 8006684:	2300      	movs	r3, #0
 8006686:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  int idx_from_head = 0;
 800668a:	461a      	mov	r2, r3
  for (int i = 0; i < buffer_count_; ++i) {
 800668c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8006690:	459c      	cmp	ip, r3
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8006692:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8006696:	eb07 0082 	add.w	r0, r7, r2, lsl #2
      buffer_ids_sorted_[idx_from_head] = i;
 800669a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
  for (int i = 0; i < buffer_count_; ++i) {
 800669e:	dd1e      	ble.n	80066de <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80066a0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80066a4:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
 80066a8:	0119      	lsls	r1, r3, #4
 80066aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80066ae:	f85c c001 	ldr.w	ip, [ip, r1]
      buffer_offsets_[i] = -1;
 80066b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80066b4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80066b8:	d108      	bne.n	80066cc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
 80066ba:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80066bc:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
 80066c0:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
 80066c4:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
 80066c8:	3301      	adds	r3, #1
 80066ca:	e7df      	b.n	800668c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 80066cc:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
 80066d0:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 80066d4:	6840      	ldr	r0, [r0, #4]
 80066d6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
 80066da:	3201      	adds	r2, #1
 80066dc:	e7f4      	b.n	80066c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80066de:	ebac 0202 	sub.w	r2, ip, r2
 80066e2:	f7ff ff6f 	bl	80065c4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80066e6:	69a6      	ldr	r6, [r4, #24]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80066e8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80066ec:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  next_free_entry_ = 1;
 80066f0:	2301      	movs	r3, #1
 80066f2:	2200      	movs	r2, #0
 80066f4:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
 80066fe:	6963      	ldr	r3, [r4, #20]
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
 8006704:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8006706:	eb08 1103 	add.w	r1, r8, r3, lsl #4
  first_entry->offset = buffer_offsets_[buffer_id];
 800670a:	46b2      	mov	sl, r6
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800670c:	6849      	ldr	r1, [r1, #4]
 800670e:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
 8006710:	bf08      	it	eq
 8006712:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
 8006716:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800671a:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
 800671c:	2701      	movs	r7, #1
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	42bb      	cmp	r3, r7
 8006722:	dd57      	ble.n	80067d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800672a:	eb08 1309 	add.w	r3, r8, r9, lsl #4
 800672e:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8006732:	685d      	ldr	r5, [r3, #4]
 8006734:	1c69      	adds	r1, r5, #1
 8006736:	d120      	bne.n	800677a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
    const int wanted_size = wanted_requirements->size;
 8006738:	f858 2002 	ldr.w	r2, [r8, r2]
 800673c:	9202      	str	r2, [sp, #8]
      ListEntry* prior_entry = nullptr;
 800673e:	2000      	movs	r0, #0
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8006740:	689a      	ldr	r2, [r3, #8]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8006742:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
 8006746:	4605      	mov	r5, r0
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 8006748:	4601      	mov	r1, r0
 800674a:	9003      	str	r0, [sp, #12]
 800674c:	ee17 3a90 	vmov	r3, s15
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff ff6b 	bl	800662c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
 8006756:	9903      	ldr	r1, [sp, #12]
 8006758:	b149      	cbz	r1, 800676e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x108>
              prior_entry->offset + candidate_requirements->size;
 800675a:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
 800675c:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
 800675e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
 8006762:	f858 c00c 	ldr.w	ip, [r8, ip]
 8006766:	448c      	add	ip, r1
 8006768:	4565      	cmp	r5, ip
 800676a:	bfb8      	it	lt
 800676c:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
 800676e:	b120      	cbz	r0, 800677a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
 8006770:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
 8006772:	9b02      	ldr	r3, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
 8006774:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
 8006776:	428b      	cmp	r3, r1
 8006778:	dce6      	bgt.n	8006748 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    buffer_offsets_[buffer_id] = candidate_offset;
 800677a:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800677e:	69e3      	ldr	r3, [r4, #28]
 8006780:	220c      	movs	r2, #12
 8006782:	fb02 f103 	mul.w	r1, r2, r3
 8006786:	1872      	adds	r2, r6, r1
    new_entry->offset = candidate_offset;
 8006788:	5075      	str	r5, [r6, r1]
    ++next_free_entry_;
 800678a:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
 800678c:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
 8006790:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
 8006792:	f8da 1000 	ldr.w	r1, [sl]
 8006796:	42a9      	cmp	r1, r5
 8006798:	dd05      	ble.n	80067a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
      first_entry->next_entry_index = first_entry_index_;
 800679a:	6a21      	ldr	r1, [r4, #32]
 800679c:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
 800679e:	4692      	mov	sl, r2
 80067a0:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
 80067a2:	3701      	adds	r7, #1
 80067a4:	e7bb      	b.n	800671e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
 80067a6:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
 80067a8:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
 80067aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067ae:	d104      	bne.n	80067ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          current_entry->next_entry_index = new_entry_index;
 80067b0:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
 80067b2:	6090      	str	r0, [r2, #8]
          break;
 80067b4:	e7f5      	b.n	80067a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
 80067b6:	4671      	mov	r1, lr
 80067b8:	e7f6      	b.n	80067a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80067ba:	f04f 0c0c 	mov.w	ip, #12
 80067be:	fb0c fc00 	mul.w	ip, ip, r0
 80067c2:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
 80067c6:	f856 c00c 	ldr.w	ip, [r6, ip]
 80067ca:	45ac      	cmp	ip, r5
 80067cc:	ddf3      	ble.n	80067b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
          new_entry->next_entry_index = current_entry->next_entry_index;
 80067ce:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
 80067d0:	608b      	str	r3, [r1, #8]
          break;
 80067d2:	e7e6      	b.n	80067a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
}
 80067d4:	b005      	add	sp, #20
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067da <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80067da:	b570      	push	{r4, r5, r6, lr}
 80067dc:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
 80067de:	f7ff ff42 	bl	8006666 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80067e2:	68a0      	ldr	r0, [r4, #8]
 80067e4:	b1a8      	cbz	r0, 8006812 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80067e6:	69a1      	ldr	r1, [r4, #24]
 80067e8:	6a23      	ldr	r3, [r4, #32]
 80067ea:	250c      	movs	r5, #12
 80067ec:	fb05 1303 	mla	r3, r5, r3, r1
  size_t max_size = 0;
 80067f0:	2000      	movs	r0, #0
  while (entry) {
 80067f2:	b173      	cbz	r3, 8006812 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
 80067f4:	685a      	ldr	r2, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
 80067f6:	68e6      	ldr	r6, [r4, #12]
 80067f8:	0112      	lsls	r2, r2, #4
 80067fa:	58b2      	ldr	r2, [r6, r2]
 80067fc:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
 80067fe:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
 8006800:	4432      	add	r2, r6
 8006802:	4290      	cmp	r0, r2
 8006804:	bf38      	it	cc
 8006806:	4610      	movcc	r0, r2
    if (entry->next_entry_index == -1) {
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	d002      	beq.n	8006812 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800680c:	fb05 1303 	mla	r3, r5, r3, r1
  while (entry) {
 8006810:	e7ef      	b.n	80067f2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
 8006812:	bd70      	pop	{r4, r5, r6, pc}

08006814 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv>:
void GreedyMemoryPlanner::PrintMemoryPlan() {
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	b09d      	sub	sp, #116	; 0x74
 800681a:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
 800681c:	f7ff ff23 	bl	8006666 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 8006820:	4e59      	ldr	r6, [pc, #356]	; (8006988 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x174>)
  for (int i = 0; i < buffer_count_; ++i) {
 8006822:	2500      	movs	r5, #0
 8006824:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8006828:	45ac      	cmp	ip, r5
 800682a:	dd23      	ble.n	8006874 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x60>
  if (i < 10) {
 800682c:	2d09      	cmp	r5, #9
 800682e:	dc15      	bgt.n	800685c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x48>
    return '0' + i;
 8006830:	f105 0130 	add.w	r1, r5, #48	; 0x30
    return 'A' + (i - 36);
 8006834:	b2c9      	uxtb	r1, r1
                GetOrdinalCharacter(i), i, requirements_[i].size,
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	eb03 1205 	add.w	r2, r3, r5, lsl #4
 800683c:	0128      	lsls	r0, r5, #4
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 800683e:	68d7      	ldr	r7, [r2, #12]
 8006840:	9702      	str	r7, [sp, #8]
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	9201      	str	r2, [sp, #4]
 8006846:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006848:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800684c:	9200      	str	r2, [sp, #0]
 800684e:	581b      	ldr	r3, [r3, r0]
 8006850:	462a      	mov	r2, r5
 8006852:	4630      	mov	r0, r6
 8006854:	f7fd fd09 	bl	800426a <_Z11MicroPrintfPKcz>
  for (int i = 0; i < buffer_count_; ++i) {
 8006858:	3501      	adds	r5, #1
 800685a:	e7e3      	b.n	8006824 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x10>
  } else if (i < 36) {
 800685c:	2d23      	cmp	r5, #35	; 0x23
 800685e:	dc02      	bgt.n	8006866 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x52>
    return 'a' + (i - 10);
 8006860:	f105 0157 	add.w	r1, r5, #87	; 0x57
 8006864:	e7e6      	b.n	8006834 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x20>
  } else if (i < 62) {
 8006866:	2d3d      	cmp	r5, #61	; 0x3d
 8006868:	dc02      	bgt.n	8006870 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x5c>
    return 'A' + (i - 36);
 800686a:	f105 011d 	add.w	r1, r5, #29
 800686e:	e7e1      	b.n	8006834 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x20>
  return '*';
 8006870:	212a      	movs	r1, #42	; 0x2a
 8006872:	e7e0      	b.n	8006836 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x22>
  for (int i = 0; i < buffer_count_; ++i) {
 8006874:	2300      	movs	r3, #0
  int max_time = 0;
 8006876:	461f      	mov	r7, r3
  int max_size = kLineWidth;
 8006878:	2650      	movs	r6, #80	; 0x50
  for (int i = 0; i < buffer_count_; ++i) {
 800687a:	459c      	cmp	ip, r3
 800687c:	dd11      	ble.n	80068a2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x8e>
    BufferRequirements* requirements = &requirements_[i];
 800687e:	68e1      	ldr	r1, [r4, #12]
    const int offset = buffer_offsets_[i];
 8006880:	6a62      	ldr	r2, [r4, #36]	; 0x24
    BufferRequirements* requirements = &requirements_[i];
 8006882:	011d      	lsls	r5, r3, #4
 8006884:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    const int size = offset + requirements->size;
 8006888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800688c:	5949      	ldr	r1, [r1, r5]
 800688e:	440a      	add	r2, r1
 8006890:	4296      	cmp	r6, r2
 8006892:	bfb8      	it	lt
 8006894:	4616      	movlt	r6, r2
    if (last_time_used > max_time) {
 8006896:	68c2      	ldr	r2, [r0, #12]
 8006898:	4297      	cmp	r7, r2
 800689a:	bfb8      	it	lt
 800689c:	4617      	movlt	r7, r2
  for (int i = 0; i < buffer_count_; ++i) {
 800689e:	3301      	adds	r3, #1
 80068a0:	e7eb      	b.n	800687a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x66>
  for (int t = 0; t <= max_time; ++t) {
 80068a2:	2500      	movs	r5, #0
      line[c] = '.';
 80068a4:	f04f 0850 	mov.w	r8, #80	; 0x50
 80068a8:	2250      	movs	r2, #80	; 0x50
 80068aa:	212e      	movs	r1, #46	; 0x2e
 80068ac:	a807      	add	r0, sp, #28
 80068ae:	f001 fa8d 	bl	8007dcc <memset>
    for (int i = 0; i < buffer_count_; ++i) {
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	9305      	str	r3, [sp, #20]
 80068b6:	2300      	movs	r3, #0
    int memory_use = 0;
 80068b8:	469c      	mov	ip, r3
    for (int i = 0; i < buffer_count_; ++i) {
 80068ba:	9a05      	ldr	r2, [sp, #20]
 80068bc:	429a      	cmp	r2, r3
 80068be:	dd48      	ble.n	8006952 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x13e>
      BufferRequirements* requirements = &requirements_[i];
 80068c0:	68e1      	ldr	r1, [r4, #12]
 80068c2:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
 80068c6:	0118      	lsls	r0, r3, #4
      if ((t < requirements->first_time_used) ||
 80068c8:	f8de 2008 	ldr.w	r2, [lr, #8]
 80068cc:	42aa      	cmp	r2, r5
 80068ce:	dc3e      	bgt.n	800694e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x13a>
 80068d0:	f8de 200c 	ldr.w	r2, [lr, #12]
 80068d4:	42aa      	cmp	r2, r5
 80068d6:	db3a      	blt.n	800694e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x13a>
      const int offset = buffer_offsets_[i];
 80068d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      if (offset == -1) {
 80068de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80068e2:	d034      	beq.n	800694e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x13a>
      const int size = requirements->size;
 80068e4:	5808      	ldr	r0, [r1, r0]
    return 'A' + (i - 36);
 80068e6:	f103 0e1d 	add.w	lr, r3, #29
      const int line_start = (offset * kLineWidth) / max_size;
 80068ea:	fb08 f102 	mul.w	r1, r8, r2
      memory_use += size;
 80068ee:	4484      	add	ip, r0
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 80068f0:	4402      	add	r2, r0
    return 'a' + (i - 10);
 80068f2:	f103 0957 	add.w	r9, r3, #87	; 0x57
 80068f6:	a807      	add	r0, sp, #28
    return '0' + i;
 80068f8:	f103 0a30 	add.w	sl, r3, #48	; 0x30
      const int line_start = (offset * kLineWidth) / max_size;
 80068fc:	fb91 f1f6 	sdiv	r1, r1, r6
    return 'A' + (i - 36);
 8006900:	fa5f fe8e 	uxtb.w	lr, lr
 8006904:	4408      	add	r0, r1
    return 'a' + (i - 10);
 8006906:	fa5f f989 	uxtb.w	r9, r9
    return '0' + i;
 800690a:	fa5f fa8a 	uxtb.w	sl, sl
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800690e:	fb08 f202 	mul.w	r2, r8, r2
 8006912:	fb92 f2f6 	sdiv	r2, r2, r6
      for (int n = line_start; n < line_end; ++n) {
 8006916:	4291      	cmp	r1, r2
 8006918:	da19      	bge.n	800694e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x13a>
        if (line[n] == '.') {
 800691a:	f890 b000 	ldrb.w	fp, [r0]
 800691e:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 8006922:	d111      	bne.n	8006948 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x134>
  if (i < 10) {
 8006924:	2b09      	cmp	r3, #9
 8006926:	dc05      	bgt.n	8006934 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x120>
    return '0' + i;
 8006928:	46d3      	mov	fp, sl
          line[n] = '!';
 800692a:	f880 b000 	strb.w	fp, [r0]
      for (int n = line_start; n < line_end; ++n) {
 800692e:	3101      	adds	r1, #1
 8006930:	3001      	adds	r0, #1
 8006932:	e7f0      	b.n	8006916 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x102>
  } else if (i < 36) {
 8006934:	2b23      	cmp	r3, #35	; 0x23
 8006936:	dc01      	bgt.n	800693c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x128>
    return 'a' + (i - 10);
 8006938:	46cb      	mov	fp, r9
 800693a:	e7f6      	b.n	800692a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x116>
  } else if (i < 62) {
 800693c:	2b3d      	cmp	r3, #61	; 0x3d
    return 'A' + (i - 36);
 800693e:	bfd4      	ite	le
 8006940:	46f3      	movle	fp, lr
 8006942:	f04f 0b2a 	movgt.w	fp, #42	; 0x2a
 8006946:	e7f0      	b.n	800692a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x116>
          line[n] = '!';
 8006948:	f04f 0b21 	mov.w	fp, #33	; 0x21
 800694c:	e7ed      	b.n	800692a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x116>
    for (int i = 0; i < buffer_count_; ++i) {
 800694e:	3301      	adds	r3, #1
 8006950:	e7b3      	b.n	80068ba <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xa6>
    line[kLineWidth] = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 8006958:	490c      	ldr	r1, [pc, #48]	; (800698c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x178>)
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x17c>)
 800695c:	480d      	ldr	r0, [pc, #52]	; (8006994 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x180>)
 800695e:	2d09      	cmp	r5, #9
 8006960:	bfd8      	it	le
 8006962:	4619      	movle	r1, r3
                (memory_use + 1023) / 1024);
 8006964:	f20c 33ff 	addw	r3, ip, #1023	; 0x3ff
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 8006968:	2b00      	cmp	r3, #0
 800696a:	bfb8      	it	lt
 800696c:	f20c 73fe 	addwlt	r3, ip, #2046	; 0x7fe
 8006970:	129b      	asrs	r3, r3, #10
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	462a      	mov	r2, r5
 8006976:	ab07      	add	r3, sp, #28
  for (int t = 0; t <= max_time; ++t) {
 8006978:	3501      	adds	r5, #1
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 800697a:	f7fd fc76 	bl	800426a <_Z11MicroPrintfPKcz>
  for (int t = 0; t <= max_time; ++t) {
 800697e:	42af      	cmp	r7, r5
 8006980:	da92      	bge.n	80068a8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x94>
}
 8006982:	b01d      	add	sp, #116	; 0x74
 8006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006988:	0800d381 	.word	0x0800d381
 800698c:	0800ae5e 	.word	0x0800ae5e
 8006990:	0800c84c 	.word	0x0800c84c
 8006994:	0800d3bc 	.word	0x0800d3bc

08006998 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	4614      	mov	r4, r2
 800699c:	4605      	mov	r5, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
 80069a2:	f7ff fe60 	bl	8006666 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80069a6:	2c00      	cmp	r4, #0
 80069a8:	db02      	blt.n	80069b0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
 80069aa:	68ab      	ldr	r3, [r5, #8]
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	dc07      	bgt.n	80069c0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
 80069b0:	68ab      	ldr	r3, [r5, #8]
 80069b2:	4906      	ldr	r1, [pc, #24]	; (80069cc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
 80069b4:	4622      	mov	r2, r4
 80069b6:	4638      	mov	r0, r7
 80069b8:	f7fb feda 	bl	8002770 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 80069bc:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
 80069be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
 80069c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80069c6:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 80069c8:	2000      	movs	r0, #0
 80069ca:	e7f8      	b.n	80069be <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
 80069cc:	0800d3cb 	.word	0x0800d3cb

080069d0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 80069d0:	b508      	push	{r3, lr}
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 80069d2:	b918      	cbnz	r0, 80069dc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0xc>
  DebugLog("HALTED\n");
 80069d4:	480d      	ldr	r0, [pc, #52]	; (8006a0c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x3c>)
 80069d6:	f7fa fbc9 	bl	800116c <DebugLog>
  while (1) {
 80069da:	e7fe      	b.n	80069da <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0xa>
    return data_ - ReadScalar<soffset_t>(data_);
 80069dc:	6803      	ldr	r3, [r0, #0]
 80069de:	1ac3      	subs	r3, r0, r3
 80069e0:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80069e2:	2a0a      	cmp	r2, #10
 80069e4:	d909      	bls.n	80069fa <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x2a>
 80069e6:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80069e8:	b102      	cbz	r2, 80069ec <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1c>
 80069ea:	5882      	ldr	r2, [r0, r2]
 80069ec:	889b      	ldrh	r3, [r3, #4]
 80069ee:	b153      	cbz	r3, 8006a06 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x36>
 80069f0:	56c0      	ldrsb	r0, [r0, r3]

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 80069f2:	4290      	cmp	r0, r2
 80069f4:	bfb8      	it	lt
 80069f6:	4610      	movlt	r0, r2
}
 80069f8:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80069fa:	2a04      	cmp	r2, #4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80069fc:	f04f 0200 	mov.w	r2, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006a00:	d8f4      	bhi.n	80069ec <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8006a02:	4610      	mov	r0, r2
 8006a04:	e7f5      	b.n	80069f2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x22>
 8006a06:	4618      	mov	r0, r3
 8006a08:	e7f3      	b.n	80069f2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x22>
 8006a0a:	bf00      	nop
 8006a0c:	0800ac80 	.word	0x0800ac80

08006a10 <arm_convolve_1x1_s8_fast>:
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q7_t *output_data)
{
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8006a10:	68d8      	ldr	r0, [r3, #12]
 8006a12:	f010 0f03 	tst.w	r0, #3
 8006a16:	d138      	bne.n	8006a8a <arm_convolve_1x1_s8_fast+0x7a>
 8006a18:	468c      	mov	ip, r1
 8006a1a:	6909      	ldr	r1, [r1, #16]
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d134      	bne.n	8006a8a <arm_convolve_1x1_s8_fast+0x7a>
{
 8006a20:	b510      	push	{r4, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8006a22:	f8dc 4014 	ldr.w	r4, [ip, #20]
{
 8006a26:	b08a      	sub	sp, #40	; 0x28
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8006a28:	bb64      	cbnz	r4, 8006a84 <arm_convolve_1x1_s8_fast+0x74>
 8006a2a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006a2e:	2901      	cmp	r1, #1
 8006a30:	d128      	bne.n	8006a84 <arm_convolve_1x1_s8_fast+0x74>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8006a32:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8006a36:	2901      	cmp	r1, #1
 8006a38:	d124      	bne.n	8006a84 <arm_convolve_1x1_s8_fast+0x74>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 8006a3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a3c:	9004      	str	r0, [sp, #16]
 8006a3e:	68c9      	ldr	r1, [r1, #12]
 8006a40:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 8006a42:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	fb00 f101 	mul.w	r1, r0, r1
 8006a4c:	fb03 f101 	mul.w	r1, r3, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
 8006a50:	e9d2 3000 	ldrd	r3, r0, [r2]
 8006a54:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 8006a5e:	9008      	str	r0, [sp, #32]
 8006a60:	f8dc 0020 	ldr.w	r0, [ip, #32]
 8006a64:	9007      	str	r0, [sp, #28]
 8006a66:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006a6a:	9006      	str	r0, [sp, #24]
 8006a6c:	f8dc 0000 	ldr.w	r0, [ip]
 8006a70:	9005      	str	r0, [sp, #20]
 8006a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a76:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a7a:	f000 f88b 	bl	8006b94 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 8006a7e:	4620      	mov	r0, r4
}
 8006a80:	b00a      	add	sp, #40	; 0x28
 8006a82:	bd10      	pop	{r4, pc}
        return ARM_CMSIS_NN_ARG_ERROR;
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	e7fa      	b.n	8006a80 <arm_convolve_1x1_s8_fast+0x70>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a8e:	4770      	bx	lr

08006a90 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 8006a90:	2000      	movs	r0, #0
 8006a92:	4770      	bx	lr

08006a94 <arm_fully_connected_s16>:
                                            const q7_t *kernel,
                                            const cmsis_nn_dims *bias_dims,
                                            const int64_t *bias,
                                            const cmsis_nn_dims *output_dims,
                                            q15_t *output)
{
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)bias_dims;
    (void)ctx;
    (void)fc_params->filter_offset;

    int32_t batch_cnt = input_dims->n;
 8006a98:	681c      	ldr	r4, [r3, #0]

    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 8006a9a:	6813      	ldr	r3, [r2, #0]
{
 8006a9c:	460f      	mov	r7, r1
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 8006a9e:	491c      	ldr	r1, [pc, #112]	; (8006b10 <arm_fully_connected_s16+0x7c>)
{
 8006aa0:	b087      	sub	sp, #28
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 8006aa2:	428b      	cmp	r3, r1
 8006aa4:	bfd8      	it	le
 8006aa6:	f503 4800 	addle.w	r8, r3, #32768	; 0x8000
{
 8006aaa:	4691      	mov	r9, r2
 8006aac:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
 8006ab0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8006ab4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ab6:	9e16      	ldr	r6, [sp, #88]	; 0x58
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 8006ab8:	bfd4      	ite	le
 8006aba:	ea4f 4828 	movle.w	r8, r8, asr #16
 8006abe:	f647 78ff 	movwgt	r8, #32767	; 0x7fff

    while (batch_cnt)
 8006ac2:	b304      	cbz	r4, 8006b06 <arm_fully_connected_s16+0x72>
    {
        arm_nn_vec_mat_mult_t_s16(input,
 8006ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ac6:	f8da 1000 	ldr.w	r1, [sl]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8006ad0:	9303      	str	r3, [sp, #12]
 8006ad2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8006ad6:	9102      	str	r1, [sp, #8]
 8006ad8:	f8cd c014 	str.w	ip, [sp, #20]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	e9cd 8000 	strd	r8, r0, [sp]
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	4659      	mov	r1, fp
 8006ae8:	4628      	mov	r0, r5
 8006aea:	9214      	str	r2, [sp, #80]	; 0x50
 8006aec:	f000 fd1c 	bl	8007528 <arm_nn_vec_mat_mult_t_s16>
                                  filter_dims->n, /* col_dim or accum_depth */
                                  output_dims->c, /* row_dim or output_depth */
                                  fc_params->activation.min,
                                  fc_params->activation.max);
        input += filter_dims->n;
        output += output_dims->c;
 8006af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
        input += filter_dims->n;
 8006af2:	f8da 1000 	ldr.w	r1, [sl]
        output += output_dims->c;
 8006af6:	68db      	ldr	r3, [r3, #12]
    while (batch_cnt)
 8006af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006afa:	3c01      	subs	r4, #1
        input += filter_dims->n;
 8006afc:	eb05 0541 	add.w	r5, r5, r1, lsl #1
        output += output_dims->c;
 8006b00:	eb06 0643 	add.w	r6, r6, r3, lsl #1
    while (batch_cnt)
 8006b04:	d1e2      	bne.n	8006acc <arm_fully_connected_s16+0x38>
        batch_cnt--;
    }

    return (ARM_CMSIS_NN_SUCCESS);
}
 8006b06:	2000      	movs	r0, #0
 8006b08:	b007      	add	sp, #28
 8006b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	bf00      	nop
 8006b10:	7ffeffff 	.word	0x7ffeffff

08006b14 <arm_fully_connected_s16_get_buffer_size>:

int32_t arm_fully_connected_s16_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 8006b14:	2000      	movs	r0, #0
 8006b16:	4770      	bx	lr

08006b18 <arm_fully_connected_s8>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int32_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q7_t *output)
{
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)bias_dims;
    (void)ctx;
    (void)fc_params->filter_offset;

    int32_t batch_cnt = input_dims->n;
 8006b1c:	681d      	ldr	r5, [r3, #0]
{
 8006b1e:	b08b      	sub	sp, #44	; 0x2c
 8006b20:	460c      	mov	r4, r1
 8006b22:	4617      	mov	r7, r2
 8006b24:	e9dd 6914 	ldrd	r6, r9, [sp, #80]	; 0x50
 8006b28:	e9dd 2818 	ldrd	r2, r8, [sp, #96]	; 0x60
 8006b2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b2e:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68

    while (batch_cnt)
 8006b32:	b345      	cbz	r5, 8006b86 <arm_fully_connected_s8+0x6e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8006b34:	f8d9 c000 	ldr.w	ip, [r9]
 8006b38:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006b3c:	4689      	mov	r9, r1
 8006b3e:	f04f 0b01 	mov.w	fp, #1
 8006b42:	4661      	mov	r1, ip
 8006b44:	9006      	str	r0, [sp, #24]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	9105      	str	r1, [sp, #20]
 8006b4c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68a1      	ldr	r1, [r4, #8]
 8006b54:	9218      	str	r2, [sp, #96]	; 0x60
 8006b56:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8006b5a:	6821      	ldr	r1, [r4, #0]
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e9cd 1000 	strd	r1, r0, [sp]
 8006b62:	6921      	ldr	r1, [r4, #16]
 8006b64:	9108      	str	r1, [sp, #32]
 8006b66:	68e1      	ldr	r1, [r4, #12]
 8006b68:	9107      	str	r1, [sp, #28]
 8006b6a:	4653      	mov	r3, sl
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	f000 fe60 	bl	8007834 <arm_nn_vec_mat_mult_t_s8>
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max,
                                 1L);
        input += filter_dims->n;
 8006b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
        output += output_dims->c;
 8006b76:	f8d8 000c 	ldr.w	r0, [r8, #12]
        input += filter_dims->n;
 8006b7a:	6819      	ldr	r1, [r3, #0]
    while (batch_cnt)
 8006b7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b7e:	3d01      	subs	r5, #1
        input += filter_dims->n;
 8006b80:	440e      	add	r6, r1
        output += output_dims->c;
 8006b82:	4482      	add	sl, r0
    while (batch_cnt)
 8006b84:	d1de      	bne.n	8006b44 <arm_fully_connected_s8+0x2c>
        batch_cnt--;
    }
    return (ARM_CMSIS_NN_SUCCESS);
}
 8006b86:	2000      	movs	r0, #0
 8006b88:	b00b      	add	sp, #44	; 0x2c
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	bf00      	nop

08006b90 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 8006b90:	2000      	movs	r0, #0
 8006b92:	4770      	bx	lr

08006b94 <arm_nn_mat_mult_nt_t_s8>:
                                            const int32_t rhs_cols,
                                            const int32_t lhs_offset,
                                            const int32_t dst_offset,
                                            const int32_t activation_min,
                                            const int32_t activation_max)
{
 8006b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	b09f      	sub	sp, #124	; 0x7c
 8006b9a:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 8006b9e:	9016      	str	r0, [sp, #88]	; 0x58
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8006ba0:	982b      	ldr	r0, [sp, #172]	; 0xac
{
 8006ba2:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 8006ba6:	911c      	str	r1, [sp, #112]	; 0x70
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8006ba8:	1e42      	subs	r2, r0, #1
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	9219      	str	r2, [sp, #100]	; 0x64
 8006bae:	f340 81fc 	ble.w	8006faa <arm_nn_mat_mult_nt_t_s8+0x416>
 8006bb2:	4604      	mov	r4, r0
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 8006bb4:	982a      	ldr	r0, [sp, #168]	; 0xa8

        rhs += 2 * rhs_cols;
        dst += 2;
    }

    if (rhs_rows % 2)
 8006bb6:	910c      	str	r1, [sp, #48]	; 0x30
 8006bb8:	461d      	mov	r5, r3
 8006bba:	f1aa 0310 	sub.w	r3, sl, #16
        int32_t lhs_rows_idx = lhs_rows >> 1;
 8006bbe:	1042      	asrs	r2, r0, #1
 8006bc0:	f023 030f 	bic.w	r3, r3, #15
 8006bc4:	f103 0010 	add.w	r0, r3, #16
 8006bc8:	fb04 f302 	mul.w	r3, r4, r2
 8006bcc:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 8006bd0:	941a      	str	r4, [sp, #104]	; 0x68
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8006bd2:	2400      	movs	r4, #0
 8006bd4:	9411      	str	r4, [sp, #68]	; 0x44
 8006bd6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
        int32_t lhs_rows_idx = lhs_rows >> 1;
 8006bd8:	9218      	str	r2, [sp, #96]	; 0x60
 8006bda:	1c63      	adds	r3, r4, #1
 8006bdc:	462a      	mov	r2, r5
 8006bde:	441a      	add	r2, r3
 8006be0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006be2:	f06f 0203 	mvn.w	r2, #3
 8006be6:	eba2 020a 	sub.w	r2, r2, sl
 8006bea:	921d      	str	r2, [sp, #116]	; 0x74
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8006bec:	f1aa 020f 	sub.w	r2, sl, #15
 8006bf0:	920d      	str	r2, [sp, #52]	; 0x34
        if (lhs_rows % 2)
 8006bf2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006bf4:	9009      	str	r0, [sp, #36]	; 0x24
 8006bf6:	f002 0201 	and.w	r2, r2, #1
 8006bfa:	f10a 30ff 	add.w	r0, sl, #4294967295
 8006bfe:	9217      	str	r2, [sp, #92]	; 0x5c
        rhs += 2 * rhs_cols;
 8006c00:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8006c04:	9215      	str	r2, [sp, #84]	; 0x54
 8006c06:	180a      	adds	r2, r1, r0
 8006c08:	9212      	str	r2, [sp, #72]	; 0x48
 8006c0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006c0c:	9010      	str	r0, [sp, #64]	; 0x40
 8006c0e:	3204      	adds	r2, #4
 8006c10:	9205      	str	r2, [sp, #20]
 8006c12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006c14:	3204      	adds	r2, #4
 8006c16:	9204      	str	r2, [sp, #16]
 8006c18:	0062      	lsls	r2, r4, #1
 8006c1a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c1c:	46d4      	mov	ip, sl
 8006c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c20:	9a11      	ldr	r2, [sp, #68]	; 0x44
        for (int32_t x = 0; x < rhs_cols; ++x)
 8006c22:	f1bc 0f00 	cmp.w	ip, #0
 8006c26:	4413      	add	r3, r2
 8006c28:	9306      	str	r3, [sp, #24]
 8006c2a:	f340 8471 	ble.w	8007510 <arm_nn_mat_mult_nt_t_s8+0x97c>
 8006c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c30:	9d12      	ldr	r5, [sp, #72]	; 0x48
        q31_t lhs_offset_contribution1 = 0;
 8006c32:	2200      	movs	r2, #0
 8006c34:	3b01      	subs	r3, #1
        for (int32_t x = 0; x < rhs_cols; ++x)
 8006c36:	4629      	mov	r1, r5
        q31_t lhs_offset_contribution0 = 0;
 8006c38:	4614      	mov	r4, r2
            lhs_offset_contribution0 += rhs[x];
 8006c3a:	f913 0f01 	ldrsb.w	r0, [r3, #1]!
 8006c3e:	4404      	add	r4, r0
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8006c40:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
        for (int32_t x = 0; x < rhs_cols; ++x)
 8006c44:	429d      	cmp	r5, r3
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8006c46:	4402      	add	r2, r0
        for (int32_t x = 0; x < rhs_cols; ++x)
 8006c48:	d1f7      	bne.n	8006c3a <arm_nn_mat_mult_nt_t_s8+0xa6>
        lhs_offset_contribution0 *= lhs_offset;
 8006c4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8006c4c:	fb04 f303 	mul.w	r3, r4, r3
 8006c50:	930a      	str	r3, [sp, #40]	; 0x28
        lhs_offset_contribution1 *= lhs_offset;
 8006c52:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	930b      	str	r3, [sp, #44]	; 0x2c
        if (bias)
 8006c5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c5c:	b15a      	cbz	r2, 8006c76 <arm_nn_mat_mult_nt_t_s8+0xe2>
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 8006c5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c62:	1d13      	adds	r3, r2, #4
 8006c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c68:	4418      	add	r0, r3
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 8006c6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 8006c70:	900b      	str	r0, [sp, #44]	; 0x2c
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 8006c72:	441a      	add	r2, r3
 8006c74:	920a      	str	r2, [sp, #40]	; 0x28
        while (lhs_rows_idx)
 8006c76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8447 	beq.w	800750c <arm_nn_mat_mult_nt_t_s8+0x978>
 8006c7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
    *in_q7 += 4;
 8006c82:	9307      	str	r3, [sp, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f10c 0304 	add.w	r3, ip, #4
 8006c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c8c:	9208      	str	r2, [sp, #32]
 8006c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	f10c 0308 	add.w	r3, ip, #8
 8006c96:	440a      	add	r2, r1
 8006c98:	9301      	str	r3, [sp, #4]
        const q7_t *lhs_ptr = &lhs[0];
 8006c9a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8006c9c:	920f      	str	r2, [sp, #60]	; 0x3c
 8006c9e:	f1ac 0304 	sub.w	r3, ip, #4
 8006ca2:	9302      	str	r3, [sp, #8]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8006ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f340 8237 	ble.w	800711a <arm_nn_mat_mult_nt_t_s8+0x586>
 8006cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
            q31_t res10 = lhs_offset_contribution0;
 8006cae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006cb0:	18f3      	adds	r3, r6, r3
 8006cb2:	9303      	str	r3, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
 8006cb4:	e9dd 370b 	ldrd	r3, r7, [sp, #44]	; 0x2c
            q31_t res10 = lhs_offset_contribution0;
 8006cb8:	462a      	mov	r2, r5
            q31_t res11 = lhs_offset_contribution1;
 8006cba:	4619      	mov	r1, r3
    memcpy(&val, *in_q7, 4);
 8006cbc:	f8d7 e000 	ldr.w	lr, [r7]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006cc0:	f8d6 8000 	ldr.w	r8, [r6]
 8006cc4:	f857 000c 	ldr.w	r0, [r7, ip]
 8006cc8:	fa2f f98e 	sxtb16	r9, lr
 8006ccc:	fa2f f488 	sxtb16	r4, r8

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006cd0:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 8006cd4:	fa2f f898 	sxtb16	r8, r8, ror #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006cd8:	fb24 5509 	smlad	r5, r4, r9, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006cdc:	fa2f fa80 	sxtb16	sl, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006ce0:	fb28 550e 	smlad	r5, r8, lr, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006ce4:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006ce8:	fb24 330a 	smlad	r3, r4, sl, r3
 8006cec:	fb28 3300 	smlad	r3, r8, r0, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 8006cf0:	f856 400c 	ldr.w	r4, [r6, ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006cf4:	fa2f f884 	sxtb16	r8, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006cf8:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006cfc:	fb28 2909 	smlad	r9, r8, r9, r2
 8006d00:	fb28 110a 	smlad	r1, r8, sl, r1
 8006d04:	fb24 990e 	smlad	r9, r4, lr, r9
    memcpy(&val, *in_q7, 4);
 8006d08:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8006d0c:	fb24 1100 	smlad	r1, r4, r0, r1
    memcpy(&val, in_q7, 4);
 8006d10:	9a00      	ldr	r2, [sp, #0]
 8006d12:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8006d16:	58ba      	ldr	r2, [r7, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d18:	fa2f fa8e 	sxtb16	sl, lr
 8006d1c:	fa2f fb88 	sxtb16	fp, r8
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006d20:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 8006d24:	fa2f f898 	sxtb16	r8, r8, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d28:	fb2b 550a 	smlad	r5, fp, sl, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d2c:	fa2f f082 	sxtb16	r0, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d30:	fb28 550e 	smlad	r5, r8, lr, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006d34:	fa2f f492 	sxtb16	r4, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d38:	fb2b 3300 	smlad	r3, fp, r0, r3
 8006d3c:	fb28 3804 	smlad	r8, r8, r4, r3
 8006d40:	9a00      	ldr	r2, [sp, #0]
 8006d42:	58b2      	ldr	r2, [r6, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d44:	fa2f f382 	sxtb16	r3, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006d48:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d4c:	fb23 990a 	smlad	r9, r3, sl, r9
 8006d50:	fb23 1100 	smlad	r1, r3, r0, r1
 8006d54:	fb22 990e 	smlad	r9, r2, lr, r9
    memcpy(&val, *in_q7, 4);
 8006d58:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8006d5c:	fb22 1204 	smlad	r2, r2, r4, r1
    memcpy(&val, in_q7, 4);
 8006d60:	9901      	ldr	r1, [sp, #4]
 8006d62:	68b3      	ldr	r3, [r6, #8]
 8006d64:	5878      	ldr	r0, [r7, r1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d66:	fa2f fa8e 	sxtb16	sl, lr
 8006d6a:	fa2f fb83 	sxtb16	fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006d6e:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 8006d72:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d76:	fb2b 550a 	smlad	r5, fp, sl, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d7a:	fa2f f180 	sxtb16	r1, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d7e:	fb23 550e 	smlad	r5, r3, lr, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006d82:	fa2f f490 	sxtb16	r4, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d86:	fb2b 8801 	smlad	r8, fp, r1, r8
 8006d8a:	fb23 8804 	smlad	r8, r3, r4, r8
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	58f0      	ldr	r0, [r6, r3]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d92:	fa2f f380 	sxtb16	r3, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006d96:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d9a:	fb23 990a 	smlad	r9, r3, sl, r9
 8006d9e:	fb23 2101 	smlad	r1, r3, r1, r2
 8006da2:	fb20 9e0e 	smlad	lr, r0, lr, r9
    memcpy(&val, *in_q7, 4);
 8006da6:	68fa      	ldr	r2, [r7, #12]
    *in_q7 += 4;
 8006da8:	3710      	adds	r7, #16
 8006daa:	fb20 1004 	smlad	r0, r0, r4, r1
    memcpy(&val, in_q7, 4);
 8006dae:	9902      	ldr	r1, [sp, #8]
 8006db0:	68f3      	ldr	r3, [r6, #12]
 8006db2:	5879      	ldr	r1, [r7, r1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006db4:	fa2f f982 	sxtb16	r9, r2
    *in_q7 += 4;
 8006db8:	3610      	adds	r6, #16
 8006dba:	fa2f fa83 	sxtb16	sl, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006dbe:	fa2f f292 	sxtb16	r2, r2, ror #8
 8006dc2:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006dc6:	fb2a 5509 	smlad	r5, sl, r9, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006dca:	fa2f fb81 	sxtb16	fp, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006dce:	fb23 5502 	smlad	r5, r3, r2, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006dd2:	fa2f f491 	sxtb16	r4, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006dd6:	fb2a 880b 	smlad	r8, sl, fp, r8
 8006dda:	fb23 8304 	smlad	r3, r3, r4, r8
    memcpy(&val, in_q7, 4);
 8006dde:	9902      	ldr	r1, [sp, #8]
 8006de0:	5871      	ldr	r1, [r6, r1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006de2:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8006de6:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006dea:	fb28 ee09 	smlad	lr, r8, r9, lr
 8006dee:	fb28 000b 	smlad	r0, r8, fp, r0
 8006df2:	fb21 e202 	smlad	r2, r1, r2, lr
 8006df6:	fb21 0104 	smlad	r1, r1, r4, r0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8006dfa:	9803      	ldr	r0, [sp, #12]
 8006dfc:	4286      	cmp	r6, r0
 8006dfe:	f47f af5d 	bne.w	8006cbc <arm_nn_mat_mult_nt_t_s8+0x128>
    *in_q7 += 4;
 8006e02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006e04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8006e08:	45e1      	cmp	r9, ip
 8006e0a:	da1e      	bge.n	8006e4a <arm_nn_mat_mult_nt_t_s8+0x2b6>
 8006e0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006e0e:	eb00 0804 	add.w	r8, r0, r4
 8006e12:	9c03      	ldr	r4, [sp, #12]
 8006e14:	3801      	subs	r0, #1
 8006e16:	eba8 0809 	sub.w	r8, r8, r9
 8006e1a:	3c01      	subs	r4, #1
                q7_t rhs_value0 = rhs_ptr[0];
 8006e1c:	f910 ef01 	ldrsb.w	lr, [r0, #1]!
                q7_t lhs_value = lhs_ptr[0];
 8006e20:	f914 6f01 	ldrsb.w	r6, [r4, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8006e24:	f910 700c 	ldrsb.w	r7, [r0, ip]
                res00 += lhs_value * rhs_value0;
 8006e28:	fb16 550e 	smlabb	r5, r6, lr, r5
                res01 += lhs_value * rhs_value1;
 8006e2c:	fb16 3307 	smlabb	r3, r6, r7, r3
                lhs_value = lhs_ptr[rhs_cols];
 8006e30:	f914 600c 	ldrsb.w	r6, [r4, ip]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8006e34:	4580      	cmp	r8, r0
                res10 += lhs_value * rhs_value0;
 8006e36:	fb1e 2206 	smlabb	r2, lr, r6, r2
                res11 += lhs_value * rhs_value1;
 8006e3a:	fb17 1106 	smlabb	r1, r7, r6, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8006e3e:	d1ed      	bne.n	8006e1c <arm_nn_mat_mult_nt_t_s8+0x288>
                ++lhs_ptr;
 8006e40:	9803      	ldr	r0, [sp, #12]
 8006e42:	ebac 0909 	sub.w	r9, ip, r9
 8006e46:	4448      	add	r0, r9
 8006e48:	9003      	str	r0, [sp, #12]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8006e4a:	9804      	ldr	r0, [sp, #16]
 8006e4c:	9c05      	ldr	r4, [sp, #20]
 8006e4e:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8006e52:	f854 6c04 	ldr.w	r6, [r4, #-4]
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006e56:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 8006e5a:	40a5      	lsls	r5, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006e5c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8006e60:	f04f 0900 	mov.w	r9, #0
 8006e64:	fbc5 7906 	smlal	r7, r9, r5, r6
    result = (int32_t)(mult.long_long >> 31);
 8006e68:	0fff      	lsrs	r7, r7, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006e6a:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8006e6c:	ea47 0949 	orr.w	r9, r7, r9, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006e70:	f340 8124 	ble.w	80070bc <arm_nn_mat_mult_nt_t_s8+0x528>
    if (result < 0)
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006e78:	fa02 f404 	lsl.w	r4, r2, r4
    if (result < 0)
 8006e7c:	f2c0 8141 	blt.w	8007102 <arm_nn_mat_mult_nt_t_s8+0x56e>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006e80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e84:	2500      	movs	r5, #0
 8006e86:	fbc6 0504 	smlal	r0, r5, r6, r4
    result = (int32_t)(mult.long_long >> 31);
 8006e8a:	0fc2      	lsrs	r2, r0, #31
 8006e8c:	f04f 0b00 	mov.w	fp, #0
 8006e90:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 8006e94:	46da      	mov	sl, fp
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8006e96:	9804      	ldr	r0, [sp, #16]
 8006e98:	6805      	ldr	r5, [r0, #0]
 8006e9a:	9805      	ldr	r0, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006e9c:	ea25 74e5 	bic.w	r4, r5, r5, asr #31
 8006ea0:	6806      	ldr	r6, [r0, #0]
 8006ea2:	40a3      	lsls	r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006ea4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ea8:	2700      	movs	r7, #0
 8006eaa:	fbc3 0706 	smlal	r0, r7, r3, r6
    result = (int32_t)(mult.long_long >> 31);
 8006eae:	0fc0      	lsrs	r0, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006eb0:	2d00      	cmp	r5, #0
    result = (int32_t)(mult.long_long >> 31);
 8006eb2:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006eb6:	f340 80e4 	ble.w	8007082 <arm_nn_mat_mult_nt_t_s8+0x4ee>
 8006eba:	40a1      	lsls	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006ebc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	fbc6 5301 	smlal	r5, r3, r6, r1
    result = (int32_t)(mult.long_long >> 31);
 8006ec6:	0fec      	lsrs	r4, r5, #31
 8006ec8:	2500      	movs	r5, #0
 8006eca:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    q31_t threshold = remainder_mask >> 1;
 8006ece:	462f      	mov	r7, r5
    if (result < 0)
 8006ed0:	2a00      	cmp	r2, #0
        threshold++;
 8006ed2:	bfb8      	it	lt
 8006ed4:	f10a 0a01 	addlt.w	sl, sl, #1
    if (remainder > threshold)
 8006ed8:	45da      	cmp	sl, fp
        result++;
 8006eda:	bfb8      	it	lt
 8006edc:	3201      	addlt	r2, #1
    if (result < 0)
 8006ede:	2c00      	cmp	r4, #0
        threshold++;
 8006ee0:	bfb8      	it	lt
 8006ee2:	3701      	addlt	r7, #1
            res00 += dst_offset;
 8006ee4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
            res01 = MIN(res01, activation_max);
 8006ee6:	9930      	ldr	r1, [sp, #192]	; 0xc0
            lhs_ptr += rhs_cols;
 8006ee8:	9e03      	ldr	r6, [sp, #12]
    if (remainder > threshold)
 8006eea:	42af      	cmp	r7, r5
        result++;
 8006eec:	bfb8      	it	lt
 8006eee:	3401      	addlt	r4, #1
            res10 += dst_offset;
 8006ef0:	441a      	add	r2, r3
            res00 += dst_offset;
 8006ef2:	4499      	add	r9, r3
            res01 += dst_offset;
 8006ef4:	4418      	add	r0, r3
            res11 += dst_offset;
 8006ef6:	441c      	add	r4, r3
            res00 = MAX(res00, activation_min);
 8006ef8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8006efa:	4599      	cmp	r9, r3
 8006efc:	bfb8      	it	lt
 8006efe:	4699      	movlt	r9, r3
            res01 = MAX(res01, activation_min);
 8006f00:	4298      	cmp	r0, r3
 8006f02:	bfb8      	it	lt
 8006f04:	4618      	movlt	r0, r3
            res10 = MAX(res10, activation_min);
 8006f06:	429a      	cmp	r2, r3
 8006f08:	bfb8      	it	lt
 8006f0a:	461a      	movlt	r2, r3
            res11 = MAX(res11, activation_min);
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	bfb8      	it	lt
 8006f10:	461c      	movlt	r4, r3
            res00 = MIN(res00, activation_max);
 8006f12:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8006f14:	4599      	cmp	r9, r3
 8006f16:	bfa8      	it	ge
 8006f18:	4699      	movge	r9, r3
            res01 = MIN(res01, activation_max);
 8006f1a:	4288      	cmp	r0, r1
 8006f1c:	bfa8      	it	ge
 8006f1e:	4608      	movge	r0, r1
            res10 = MIN(res10, activation_max);
 8006f20:	428a      	cmp	r2, r1
            dst_ptr[0] = (q7_t)res00;
 8006f22:	9b06      	ldr	r3, [sp, #24]
            res10 = MIN(res10, activation_max);
 8006f24:	bfa8      	it	ge
 8006f26:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res10;
 8006f28:	9908      	ldr	r1, [sp, #32]
            dst_ptr[0] = (q7_t)res00;
 8006f2a:	f883 9000 	strb.w	r9, [r3]
            dst_ptr[1] = (q7_t)res01;
 8006f2e:	7058      	strb	r0, [r3, #1]
            dst_ptr[0] = (q7_t)res10;
 8006f30:	f801 2c01 	strb.w	r2, [r1, #-1]
            res11 = MIN(res11, activation_max);
 8006f34:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8006f36:	4294      	cmp	r4, r2
 8006f38:	bfa8      	it	ge
 8006f3a:	4614      	movge	r4, r2
            dst_ptr[1] = (q7_t)res11;
 8006f3c:	700c      	strb	r4, [r1, #0]
 8006f3e:	460a      	mov	r2, r1
 8006f40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006f42:	440b      	add	r3, r1
 8006f44:	9306      	str	r3, [sp, #24]
        while (lhs_rows_idx)
 8006f46:	1853      	adds	r3, r2, r1
 8006f48:	9308      	str	r3, [sp, #32]
 8006f4a:	9b07      	ldr	r3, [sp, #28]
 8006f4c:	3b01      	subs	r3, #1
            lhs_ptr += rhs_cols;
 8006f4e:	4466      	add	r6, ip
        while (lhs_rows_idx)
 8006f50:	9307      	str	r3, [sp, #28]
 8006f52:	f47f aea7 	bne.w	8006ca4 <arm_nn_mat_mult_nt_t_s8+0x110>
 8006f56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006f58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f5a:	4413      	add	r3, r2
 8006f5c:	9306      	str	r3, [sp, #24]
        if (lhs_rows % 2)
 8006f5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 80e3 	bne.w	800712c <arm_nn_mat_mult_nt_t_s8+0x598>
        rhs += 2 * rhs_cols;
 8006f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f68:	9915      	ldr	r1, [sp, #84]	; 0x54
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8006f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
        rhs += 2 * rhs_cols;
 8006f6c:	440a      	add	r2, r1
 8006f6e:	920c      	str	r2, [sp, #48]	; 0x30
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8006f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f72:	440a      	add	r2, r1
 8006f74:	9212      	str	r2, [sp, #72]	; 0x48
 8006f76:	9a05      	ldr	r2, [sp, #20]
 8006f78:	3208      	adds	r2, #8
 8006f7a:	9205      	str	r2, [sp, #20]
 8006f7c:	9a04      	ldr	r2, [sp, #16]
 8006f7e:	3208      	adds	r2, #8
 8006f80:	9204      	str	r2, [sp, #16]
 8006f82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f84:	3302      	adds	r3, #2
 8006f86:	4293      	cmp	r3, r2
 8006f88:	9311      	str	r3, [sp, #68]	; 0x44
 8006f8a:	f6ff ae48 	blt.w	8006c1e <arm_nn_mat_mult_nt_t_s8+0x8a>
 8006f8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8006f90:	3b02      	subs	r3, #2
 8006f92:	085b      	lsrs	r3, r3, #1
        rhs += 2 * rhs_cols;
 8006f94:	fb03 1201 	mla	r2, r3, r1, r1
 8006f98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f9a:	4411      	add	r1, r2
        dst += 2;
 8006f9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
        rhs += 2 * rhs_cols;
 8006f9e:	911c      	str	r1, [sp, #112]	; 0x70
 8006fa0:	3301      	adds	r3, #1
        dst += 2;
 8006fa2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006fa6:	46e2      	mov	sl, ip
 8006fa8:	9314      	str	r3, [sp, #80]	; 0x50
    if (rhs_rows % 2)
 8006faa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8006fac:	07db      	lsls	r3, r3, #31
 8006fae:	d564      	bpl.n	800707a <arm_nn_mat_mult_nt_t_s8+0x4e6>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8006fb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd61      	ble.n	800707a <arm_nn_mat_mult_nt_t_s8+0x4e6>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 8006fb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006fb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fba:	f103 4880 	add.w	r8, r3, #1073741824	; 0x40000000
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8006fbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
                res00 = bias[rhs_rows - 1];
 8006fc0:	f108 38ff 	add.w	r8, r8, #4294967295
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8006fc4:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8006fc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006fca:	eb03 0788 	add.w	r7, r3, r8, lsl #2
                res00 = bias[rhs_rows - 1];
 8006fce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fd0:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8006fd4:	e9cd 7800 	strd	r7, r8, [sp]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8006fd8:	2400      	movs	r4, #0
 8006fda:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006fde:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006fe0:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8006fe4:	46a6      	mov	lr, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006fe6:	f04f 0901 	mov.w	r9, #1
            if (bias)
 8006fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8294 	beq.w	800751a <arm_nn_mat_mult_nt_t_s8+0x986>
                res00 = bias[rhs_rows - 1];
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	6819      	ldr	r1, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8006ff6:	f1ba 0f00 	cmp.w	sl, #0
 8006ffa:	dd0c      	ble.n	8007016 <arm_nn_mat_mult_nt_t_s8+0x482>
 8006ffc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006ffe:	eb02 0b0a 	add.w	fp, r2, sl
 8007002:	1e58      	subs	r0, r3, #1
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8007004:	f912 3b01 	ldrsb.w	r3, [r2], #1
                q31_t rhs_value = rhs_ptr[0];
 8007008:	f910 6f01 	ldrsb.w	r6, [r0, #1]!
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800700c:	443b      	add	r3, r7
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800700e:	455a      	cmp	r2, fp
                res00 += lhs_value * rhs_value;
 8007010:	fb06 1103 	mla	r1, r6, r3, r1
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007014:	d1f6      	bne.n	8007004 <arm_nn_mat_mult_nt_t_s8+0x470>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	681e      	ldr	r6, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800701a:	682b      	ldr	r3, [r5, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800701c:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
 8007020:	fa01 f000 	lsl.w	r0, r1, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007024:	46f3      	mov	fp, lr
 8007026:	4661      	mov	r1, ip
 8007028:	fbc0 1b03 	smlal	r1, fp, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800702c:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800702e:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 8007030:	ea41 0b4b 	orr.w	fp, r1, fp, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007034:	dc0f      	bgt.n	8007056 <arm_nn_mat_mult_nt_t_s8+0x4c2>
 8007036:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007038:	fa09 f306 	lsl.w	r3, r9, r6
 800703c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800703e:	ea0b 0103 	and.w	r1, fp, r3
    if (result < 0)
 8007042:	fa5b fb06 	asrs.w	fp, fp, r6
    q31_t threshold = remainder_mask >> 1;
 8007046:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800704a:	bf48      	it	mi
 800704c:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800704e:	4299      	cmp	r1, r3
        result++;
 8007050:	bfc8      	it	gt
 8007052:	f10b 0b01 	addgt.w	fp, fp, #1

            // Add offset
            res00 += dst_offset;
 8007056:	9b2e      	ldr	r3, [sp, #184]	; 0xb8

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8007058:	992f      	ldr	r1, [sp, #188]	; 0xbc
            res00 += dst_offset;
 800705a:	445b      	add	r3, fp
            res00 = MAX(res00, activation_min);
 800705c:	428b      	cmp	r3, r1
 800705e:	bfb8      	it	lt
 8007060:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
 8007062:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8007064:	428b      	cmp	r3, r1
 8007066:	bfa8      	it	ge
 8007068:	460b      	movge	r3, r1

            dst_ptr[0] = (q7_t)res00;
 800706a:	f888 3000 	strb.w	r3, [r8]
            dst_ptr += rhs_rows;
 800706e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007070:	4498      	add	r8, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8007072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007074:	3401      	adds	r4, #1
 8007076:	42a3      	cmp	r3, r4
 8007078:	d1b7      	bne.n	8006fea <arm_nn_mat_mult_nt_t_s8+0x456>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
 800707a:	2000      	movs	r0, #0
 800707c:	b01f      	add	sp, #124	; 0x7c
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007082:	426b      	negs	r3, r5
 8007084:	40a1      	lsls	r1, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007086:	2501      	movs	r5, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007088:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800708c:	f04f 0e00 	mov.w	lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007090:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007092:	fbc6 4e01 	smlal	r4, lr, r6, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007096:	3d01      	subs	r5, #1
    result = (int32_t)(mult.long_long >> 31);
 8007098:	0fe4      	lsrs	r4, r4, #31
    int32_t remainder = remainder_mask & dividend;
 800709a:	ea00 0805 	and.w	r8, r0, r5
    q31_t threshold = remainder_mask >> 1;
 800709e:	106f      	asrs	r7, r5, #1
    if (result < 0)
 80070a0:	4118      	asrs	r0, r3
    result = (int32_t)(mult.long_long >> 31);
 80070a2:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
 80070a6:	ea05 0504 	and.w	r5, r5, r4
    result = dividend >> exponent;
 80070aa:	fa44 f403 	asr.w	r4, r4, r3
    q31_t threshold = remainder_mask >> 1;
 80070ae:	bf54      	ite	pl
 80070b0:	463b      	movpl	r3, r7
        threshold++;
 80070b2:	1c7b      	addmi	r3, r7, #1
    if (remainder > threshold)
 80070b4:	4598      	cmp	r8, r3
        result++;
 80070b6:	bfc8      	it	gt
 80070b8:	3001      	addgt	r0, #1
 80070ba:	e709      	b.n	8006ed0 <arm_nn_mat_mult_nt_t_s8+0x33c>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80070bc:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80070be:	2501      	movs	r5, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80070c0:	fa02 f404 	lsl.w	r4, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80070c4:	f04f 0e00 	mov.w	lr, #0
 80070c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    const q31_t remainder_mask = (1 << exponent) - 1;
 80070cc:	fa05 f700 	lsl.w	r7, r5, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80070d0:	fbc6 2e04 	smlal	r2, lr, r6, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 80070d4:	3f01      	subs	r7, #1
    result = (int32_t)(mult.long_long >> 31);
 80070d6:	0fd2      	lsrs	r2, r2, #31
    int32_t remainder = remainder_mask & dividend;
 80070d8:	ea09 0507 	and.w	r5, r9, r7
    q31_t threshold = remainder_mask >> 1;
 80070dc:	ea4f 0a67 	mov.w	sl, r7, asr #1
    if (result < 0)
 80070e0:	fa59 f900 	asrs.w	r9, r9, r0
    result = (int32_t)(mult.long_long >> 31);
 80070e4:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
 80070e8:	ea07 0b02 	and.w	fp, r7, r2
    result = dividend >> exponent;
 80070ec:	fa42 f200 	asr.w	r2, r2, r0
    q31_t threshold = remainder_mask >> 1;
 80070f0:	bf54      	ite	pl
 80070f2:	4650      	movpl	r0, sl
        threshold++;
 80070f4:	f10a 0001 	addmi.w	r0, sl, #1
    if (remainder > threshold)
 80070f8:	4285      	cmp	r5, r0
        result++;
 80070fa:	bfc8      	it	gt
 80070fc:	f109 0901 	addgt.w	r9, r9, #1
 8007100:	e6c9      	b.n	8006e96 <arm_nn_mat_mult_nt_t_s8+0x302>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007106:	2000      	movs	r0, #0
 8007108:	fbc6 2004 	smlal	r2, r0, r6, r4
    result = (int32_t)(mult.long_long >> 31);
 800710c:	0fd2      	lsrs	r2, r2, #31
 800710e:	f04f 0b00 	mov.w	fp, #0
 8007112:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    q31_t threshold = remainder_mask >> 1;
 8007116:	46da      	mov	sl, fp
 8007118:	e6bd      	b.n	8006e96 <arm_nn_mat_mult_nt_t_s8+0x302>
            q31_t res11 = lhs_offset_contribution1;
 800711a:	e9dd 300b 	ldrd	r3, r0, [sp, #44]	; 0x2c
            q31_t res10 = lhs_offset_contribution0;
 800711e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8007120:	9603      	str	r6, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
 8007122:	4619      	mov	r1, r3
            q31_t res10 = lhs_offset_contribution0;
 8007124:	462a      	mov	r2, r5
            int32_t rhs_cols_idx = 0;
 8007126:	f04f 0900 	mov.w	r9, #0
 800712a:	e66d      	b.n	8006e08 <arm_nn_mat_mult_nt_t_s8+0x274>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	f340 81f5 	ble.w	800751e <arm_nn_mat_mult_nt_t_s8+0x98a>
 8007134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007136:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007138:	981d      	ldr	r0, [sp, #116]	; 0x74
 800713a:	eb06 0902 	add.w	r9, r6, r2
 800713e:	e9dd 520a 	ldrd	r5, r2, [sp, #40]	; 0x28
 8007142:	3305      	adds	r3, #5
 8007144:	f850 8003 	ldr.w	r8, [r0, r3]
 8007148:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800714c:	6831      	ldr	r1, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800714e:	fa2f fb88 	sxtb16	fp, r8
 8007152:	18c7      	adds	r7, r0, r3
 8007154:	fa2f fe81 	sxtb16	lr, r1
 8007158:	fa2f fa84 	sxtb16	sl, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800715c:	fa2f f898 	sxtb16	r8, r8, ror #8
 8007160:	fa2f f191 	sxtb16	r1, r1, ror #8
 8007164:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007168:	fb2e 550b 	smlad	r5, lr, fp, r5
 800716c:	fb21 5508 	smlad	r5, r1, r8, r5
 8007170:	fb2e 220a 	smlad	r2, lr, sl, r2
 8007174:	fb21 2104 	smlad	r1, r1, r4, r2
    memcpy(&val, *in_q7, 4);
 8007178:	f8d7 8004 	ldr.w	r8, [r7, #4]
    memcpy(&val, in_q7, 4);
 800717c:	681c      	ldr	r4, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800717e:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007180:	fa2f fb88 	sxtb16	fp, r8
 8007184:	fa2f fa82 	sxtb16	sl, r2
 8007188:	fa2f fe84 	sxtb16	lr, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800718c:	fa2f f898 	sxtb16	r8, r8, ror #8
 8007190:	fa2f f292 	sxtb16	r2, r2, ror #8
 8007194:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007198:	fb2a 550b 	smlad	r5, sl, fp, r5
 800719c:	fb22 5808 	smlad	r8, r2, r8, r5
 80071a0:	fb2a 110e 	smlad	r1, sl, lr, r1
 80071a4:	fb22 1204 	smlad	r2, r2, r4, r1
 80071a8:	f8d7 e008 	ldr.w	lr, [r7, #8]
    memcpy(&val, in_q7, 4);
 80071ac:	685c      	ldr	r4, [r3, #4]
    memcpy(&val, *in_q7, 4);
 80071ae:	68b1      	ldr	r1, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071b0:	fa2f fb8e 	sxtb16	fp, lr
 80071b4:	fa2f fa81 	sxtb16	sl, r1
 80071b8:	fa2f f584 	sxtb16	r5, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80071bc:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 80071c0:	fa2f f191 	sxtb16	r1, r1, ror #8
 80071c4:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80071c8:	fb2a 880b 	smlad	r8, sl, fp, r8
 80071cc:	fb21 8e0e 	smlad	lr, r1, lr, r8
 80071d0:	fb2a 2205 	smlad	r2, sl, r5, r2
 80071d4:	fb21 2404 	smlad	r4, r1, r4, r2
 80071d8:	68fd      	ldr	r5, [r7, #12]
    memcpy(&val, in_q7, 4);
 80071da:	68f1      	ldr	r1, [r6, #12]
 80071dc:	689f      	ldr	r7, [r3, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071de:	fa2f fa85 	sxtb16	sl, r5
 80071e2:	3610      	adds	r6, #16
 80071e4:	fa2f f281 	sxtb16	r2, r1
 80071e8:	fa2f f887 	sxtb16	r8, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80071ec:	fa2f f595 	sxtb16	r5, r5, ror #8
 80071f0:	fa2f f191 	sxtb16	r1, r1, ror #8
 80071f4:	fa2f f797 	sxtb16	r7, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80071f8:	fb22 ee0a 	smlad	lr, r2, sl, lr
 80071fc:	fb21 e505 	smlad	r5, r1, r5, lr
 8007200:	fb22 4208 	smlad	r2, r2, r8, r4
 8007204:	fb21 2207 	smlad	r2, r1, r7, r2
 8007208:	454e      	cmp	r6, r9
 800720a:	f103 0310 	add.w	r3, r3, #16
 800720e:	d199      	bne.n	8007144 <arm_nn_mat_mult_nt_t_s8+0x5b0>
    *in_q7 += 4;
 8007210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007214:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
 8007218:	1819      	adds	r1, r3, r0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800721a:	4584      	cmp	ip, r0
 800721c:	f340 811c 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 8007220:	f999 3000 	ldrsb.w	r3, [r9]
                res00 += lhs_value * rhs_value0;
 8007224:	f991 2000 	ldrsb.w	r2, [r1]
 8007228:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                res01 += lhs_value * rhs_value1;
 800722a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 800722c:	fb13 4402 	smlabb	r4, r3, r2, r4
                res01 += lhs_value * rhs_value1;
 8007230:	f911 200c 	ldrsb.w	r2, [r1, ip]
                res00 += lhs_value * rhs_value0;
 8007234:	940a      	str	r4, [sp, #40]	; 0x28
                res01 += lhs_value * rhs_value1;
 8007236:	fb13 5502 	smlabb	r5, r3, r2, r5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	459c      	cmp	ip, r3
                res01 += lhs_value * rhs_value1;
 800723e:	950b      	str	r5, [sp, #44]	; 0x2c
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007240:	f340 810a 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8007244:	eb01 030c 	add.w	r3, r1, ip
                res01 += lhs_value * rhs_value1;
 8007248:	f993 2001 	ldrsb.w	r2, [r3, #1]
                q7_t lhs_value = lhs_ptr[0];
 800724c:	f999 3001 	ldrsb.w	r3, [r9, #1]
                res01 += lhs_value * rhs_value1;
 8007250:	fb13 5502 	smlabb	r5, r3, r2, r5
                res00 += lhs_value * rhs_value0;
 8007254:	f991 2001 	ldrsb.w	r2, [r1, #1]
                res01 += lhs_value * rhs_value1;
 8007258:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 800725a:	fb13 4402 	smlabb	r4, r3, r2, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800725e:	1c83      	adds	r3, r0, #2
 8007260:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 8007262:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 8007264:	f101 0202 	add.w	r2, r1, #2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007268:	f340 80f6 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 800726c:	f999 3002 	ldrsb.w	r3, [r9, #2]
                res01 += lhs_value * rhs_value1;
 8007270:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007274:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 8007278:	f991 2002 	ldrsb.w	r2, [r1, #2]
                res01 += lhs_value * rhs_value1;
 800727c:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 800727e:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007282:	1cc3      	adds	r3, r0, #3
 8007284:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 8007286:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 8007288:	f101 0203 	add.w	r2, r1, #3
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800728c:	f340 80e4 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 8007290:	f999 3003 	ldrsb.w	r3, [r9, #3]
                res01 += lhs_value * rhs_value1;
 8007294:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007298:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800729c:	f991 2003 	ldrsb.w	r2, [r1, #3]
                res01 += lhs_value * rhs_value1;
 80072a0:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 80072a2:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80072a6:	1d03      	adds	r3, r0, #4
 80072a8:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 80072aa:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 80072ac:	f101 0204 	add.w	r2, r1, #4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80072b0:	f340 80d2 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 80072b4:	f999 3004 	ldrsb.w	r3, [r9, #4]
                res01 += lhs_value * rhs_value1;
 80072b8:	f912 200c 	ldrsb.w	r2, [r2, ip]
 80072bc:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 80072c0:	f991 2004 	ldrsb.w	r2, [r1, #4]
                res01 += lhs_value * rhs_value1;
 80072c4:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 80072c6:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80072ca:	1d43      	adds	r3, r0, #5
 80072cc:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 80072ce:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 80072d0:	f101 0205 	add.w	r2, r1, #5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80072d4:	f340 80c0 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 80072d8:	f999 3005 	ldrsb.w	r3, [r9, #5]
                res01 += lhs_value * rhs_value1;
 80072dc:	f912 200c 	ldrsb.w	r2, [r2, ip]
 80072e0:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 80072e4:	f991 2005 	ldrsb.w	r2, [r1, #5]
                res01 += lhs_value * rhs_value1;
 80072e8:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 80072ea:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80072ee:	1d83      	adds	r3, r0, #6
 80072f0:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 80072f2:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 80072f4:	f101 0206 	add.w	r2, r1, #6
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80072f8:	f340 80ae 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 80072fc:	f999 3006 	ldrsb.w	r3, [r9, #6]
                res01 += lhs_value * rhs_value1;
 8007300:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007304:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 8007308:	f991 2006 	ldrsb.w	r2, [r1, #6]
                res01 += lhs_value * rhs_value1;
 800730c:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 800730e:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007312:	1dc3      	adds	r3, r0, #7
 8007314:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 8007316:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 8007318:	f101 0207 	add.w	r2, r1, #7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800731c:	f340 809c 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 8007320:	f999 3007 	ldrsb.w	r3, [r9, #7]
                res01 += lhs_value * rhs_value1;
 8007324:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007328:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800732c:	f991 2007 	ldrsb.w	r2, [r1, #7]
                res01 += lhs_value * rhs_value1;
 8007330:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 8007332:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007336:	f100 0308 	add.w	r3, r0, #8
 800733a:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 800733c:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 800733e:	f101 0208 	add.w	r2, r1, #8
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007342:	f340 8089 	ble.w	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 8007346:	f999 3008 	ldrsb.w	r3, [r9, #8]
                res01 += lhs_value * rhs_value1;
 800734a:	f912 200c 	ldrsb.w	r2, [r2, ip]
 800734e:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 8007352:	f991 2008 	ldrsb.w	r2, [r1, #8]
                res01 += lhs_value * rhs_value1;
 8007356:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 8007358:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800735c:	f100 0309 	add.w	r3, r0, #9
 8007360:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 8007362:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 8007364:	f101 0209 	add.w	r2, r1, #9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007368:	dd76      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 800736a:	f999 3009 	ldrsb.w	r3, [r9, #9]
                res01 += lhs_value * rhs_value1;
 800736e:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007372:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 8007376:	f991 2009 	ldrsb.w	r2, [r1, #9]
                res01 += lhs_value * rhs_value1;
 800737a:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 800737c:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007380:	f100 030a 	add.w	r3, r0, #10
 8007384:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 8007386:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 8007388:	f101 020a 	add.w	r2, r1, #10
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800738c:	dd64      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 800738e:	f999 300a 	ldrsb.w	r3, [r9, #10]
                res01 += lhs_value * rhs_value1;
 8007392:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007396:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800739a:	f991 200a 	ldrsb.w	r2, [r1, #10]
                res01 += lhs_value * rhs_value1;
 800739e:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 80073a0:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80073a4:	f100 030b 	add.w	r3, r0, #11
 80073a8:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 80073aa:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 80073ac:	f101 020b 	add.w	r2, r1, #11
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80073b0:	dd52      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 80073b2:	f999 300b 	ldrsb.w	r3, [r9, #11]
                res01 += lhs_value * rhs_value1;
 80073b6:	f912 200c 	ldrsb.w	r2, [r2, ip]
 80073ba:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 80073be:	f991 200b 	ldrsb.w	r2, [r1, #11]
                res01 += lhs_value * rhs_value1;
 80073c2:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 80073c4:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80073c8:	f100 030c 	add.w	r3, r0, #12
 80073cc:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 80073ce:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 80073d0:	f101 020c 	add.w	r2, r1, #12
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80073d4:	dd40      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 80073d6:	f999 300c 	ldrsb.w	r3, [r9, #12]
                res01 += lhs_value * rhs_value1;
 80073da:	f912 200c 	ldrsb.w	r2, [r2, ip]
 80073de:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 80073e2:	f991 200c 	ldrsb.w	r2, [r1, #12]
                res01 += lhs_value * rhs_value1;
 80073e6:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 80073e8:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80073ec:	f100 030d 	add.w	r3, r0, #13
 80073f0:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 80073f2:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 80073f4:	f101 020d 	add.w	r2, r1, #13
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80073f8:	dd2e      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 80073fa:	f999 300d 	ldrsb.w	r3, [r9, #13]
                res01 += lhs_value * rhs_value1;
 80073fe:	f912 200c 	ldrsb.w	r2, [r2, ip]
 8007402:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 8007406:	f991 200d 	ldrsb.w	r2, [r1, #13]
                res01 += lhs_value * rhs_value1;
 800740a:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
 800740c:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007410:	f100 030e 	add.w	r3, r0, #14
 8007414:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
 8007416:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
 8007418:	f101 020e 	add.w	r2, r1, #14
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800741c:	dd1c      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                res01 += lhs_value * rhs_value1;
 800741e:	f912 200c 	ldrsb.w	r2, [r2, ip]
                q7_t lhs_value = lhs_ptr[0];
 8007422:	f999 300e 	ldrsb.w	r3, [r9, #14]
                res01 += lhs_value * rhs_value1;
 8007426:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800742a:	f991 200e 	ldrsb.w	r2, [r1, #14]
                res01 += lhs_value * rhs_value1;
 800742e:	950b      	str	r5, [sp, #44]	; 0x2c
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007430:	300f      	adds	r0, #15
                res00 += lhs_value * rhs_value0;
 8007432:	fb12 4603 	smlabb	r6, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8007436:	4584      	cmp	ip, r0
                res00 += lhs_value * rhs_value0;
 8007438:	960a      	str	r6, [sp, #40]	; 0x28
                ++rhs_ptr;
 800743a:	f101 040f 	add.w	r4, r1, #15
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800743e:	dd0b      	ble.n	8007458 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
 8007440:	f999 300f 	ldrsb.w	r3, [r9, #15]
                res00 += lhs_value * rhs_value0;
 8007444:	f991 200f 	ldrsb.w	r2, [r1, #15]
 8007448:	fb13 6202 	smlabb	r2, r3, r2, r6
 800744c:	920a      	str	r2, [sp, #40]	; 0x28
                res01 += lhs_value * rhs_value1;
 800744e:	f914 200c 	ldrsb.w	r2, [r4, ip]
 8007452:	fb13 5302 	smlabb	r3, r3, r2, r5
 8007456:	930b      	str	r3, [sp, #44]	; 0x2c
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8007458:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800745a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800745c:	f853 2c04 	ldr.w	r2, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007460:	9b05      	ldr	r3, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007462:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 8007466:	40a1      	lsls	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007468:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800746c:	460c      	mov	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800746e:	2000      	movs	r0, #0
 8007470:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007474:	fbc4 1003 	smlal	r1, r0, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 8007478:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800747a:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
 800747c:	ea41 0540 	orr.w	r5, r1, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007480:	dc0d      	bgt.n	800749e <arm_nn_mat_mult_nt_t_s8+0x90a>
 8007482:	4252      	negs	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007484:	2301      	movs	r3, #1
 8007486:	4093      	lsls	r3, r2
 8007488:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800748a:	ea05 0103 	and.w	r1, r5, r3
    if (result < 0)
 800748e:	4115      	asrs	r5, r2
    q31_t threshold = remainder_mask >> 1;
 8007490:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8007494:	bf48      	it	mi
 8007496:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8007498:	4299      	cmp	r1, r3
        result++;
 800749a:	bfc8      	it	gt
 800749c:	3501      	addgt	r5, #1
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800749e:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80074a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074a2:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80074a4:	9b05      	ldr	r3, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80074a6:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 80074aa:	408a      	lsls	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80074ac:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80074ae:	4611      	mov	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80074b0:	2400      	movs	r4, #0
 80074b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074b6:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 80074ba:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80074bc:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 80074be:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80074c2:	dc0d      	bgt.n	80074e0 <arm_nn_mat_mult_nt_t_s8+0x94c>
 80074c4:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80074c6:	2301      	movs	r3, #1
 80074c8:	4083      	lsls	r3, r0
 80074ca:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80074cc:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 80074d0:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 80074d2:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80074d6:	bf48      	it	mi
 80074d8:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80074da:	429a      	cmp	r2, r3
        result++;
 80074dc:	bfc8      	it	gt
 80074de:	3401      	addgt	r4, #1
            res00 += dst_offset;
 80074e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
            res01 = MIN(res01, activation_max);
 80074e2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            res00 += dst_offset;
 80074e4:	1959      	adds	r1, r3, r5
            res01 += dst_offset;
 80074e6:	441c      	add	r4, r3
            res00 = MAX(res00, activation_min);
 80074e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80074ea:	4299      	cmp	r1, r3
 80074ec:	bfb8      	it	lt
 80074ee:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
 80074f0:	429c      	cmp	r4, r3
 80074f2:	bfb8      	it	lt
 80074f4:	461c      	movlt	r4, r3
            res00 = MIN(res00, activation_max);
 80074f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80074f8:	4299      	cmp	r1, r3
 80074fa:	bfa8      	it	ge
 80074fc:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
 80074fe:	9b06      	ldr	r3, [sp, #24]
            res01 = MIN(res01, activation_max);
 8007500:	4294      	cmp	r4, r2
 8007502:	bfa8      	it	ge
 8007504:	4614      	movge	r4, r2
            dst_ptr[0] = (q7_t)res00;
 8007506:	7019      	strb	r1, [r3, #0]
            dst_ptr[1] = (q7_t)res01;
 8007508:	705c      	strb	r4, [r3, #1]
 800750a:	e52c      	b.n	8006f66 <arm_nn_mat_mult_nt_t_s8+0x3d2>
        const q7_t *lhs_ptr = &lhs[0];
 800750c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800750e:	e526      	b.n	8006f5e <arm_nn_mat_mult_nt_t_s8+0x3ca>
        for (int32_t x = 0; x < rhs_cols; ++x)
 8007510:	2300      	movs	r3, #0
 8007512:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8007516:	f7ff bba0 	b.w	8006c5a <arm_nn_mat_mult_nt_t_s8+0xc6>
 800751a:	4619      	mov	r1, r3
 800751c:	e56b      	b.n	8006ff6 <arm_nn_mat_mult_nt_t_s8+0x462>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800751e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007520:	46b1      	mov	r9, r6
            int32_t rhs_cols_idx = 0;
 8007522:	2000      	movs	r0, #0
 8007524:	e679      	b.n	800721a <arm_nn_mat_mult_nt_t_s8+0x686>
 8007526:	bf00      	nop

08007528 <arm_nn_vec_mat_mult_t_s16>:
                                              const int32_t dst_shift,
                                              const int32_t rhs_cols,
                                              const int32_t rhs_rows,
                                              const int32_t activation_min,
                                              const int32_t activation_max)
{
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	b095      	sub	sp, #84	; 0x54
 800752e:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    const int32_t row_loop_cnt = rhs_rows / 2;
 8007532:	9b21      	ldr	r3, [sp, #132]	; 0x84
    if (rhs_cols > 512)
    {
        rhs_cols_fast = 512;
    }

    for (int32_t i = 0; i < row_loop_cnt; i++)
 8007534:	9921      	ldr	r1, [sp, #132]	; 0x84
{
 8007536:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t row_loop_cnt = rhs_rows / 2;
 8007538:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800753c:	105b      	asrs	r3, r3, #1
 800753e:	930c      	str	r3, [sp, #48]	; 0x30
    if (rhs_cols > 512)
 8007540:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007546:	bfa8      	it	ge
 8007548:	f44f 7300 	movge.w	r3, #512	; 0x200
    for (int32_t i = 0; i < row_loop_cnt; i++)
 800754c:	2901      	cmp	r1, #1
 800754e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007550:	f340 80f9 	ble.w	8007746 <arm_nn_vec_mat_mult_t_s16+0x21e>
        q63_t acc_64_0 = 0;
        q63_t acc_64_1 = 0;
        int32_t acc_0 = 0;
        int32_t acc_1 = 0;

        const int32_t col_loop_cnt = rhs_cols_fast / 4;
 8007554:	2b00      	cmp	r3, #0
 8007556:	bfb8      	it	lt
 8007558:	3303      	addlt	r3, #3
        }

        acc_64_0 += acc_0;
        acc_64_1 += acc_1;

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 800755a:	f023 0103 	bic.w	r1, r3, #3
        const int32_t col_loop_cnt = rhs_cols_fast / 4;
 800755e:	1098      	asrs	r0, r3, #2
        rhs += 2 * rhs_cols;
 8007560:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007562:	9e11      	ldr	r6, [sp, #68]	; 0x44
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007564:	910e      	str	r1, [sp, #56]	; 0x38
        rhs += 2 * rhs_cols;
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	9304      	str	r3, [sp, #16]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize_s64(const q63_t val, const q31_t reduced_multiplier, const q31_t shift)
{
    const q63_t new_val = val * reduced_multiplier;
 800756a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        const int32_t col_loop_cnt = rhs_cols_fast / 4;
 800756c:	900d      	str	r0, [sp, #52]	; 0x34
 800756e:	17db      	asrs	r3, r3, #31
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007574:	9309      	str	r3, [sp, #36]	; 0x24

    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 8007576:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    *in_q15 += 2;
 8007578:	9605      	str	r6, [sp, #20]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 800757a:	f1c3 030e 	rsb	r3, r3, #14
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007582:	3304      	adds	r3, #4
 8007584:	9302      	str	r3, [sp, #8]
 8007586:	460b      	mov	r3, r1
 8007588:	1871      	adds	r1, r6, r1
 800758a:	9103      	str	r1, [sp, #12]
    *in_q15 += 2;
 800758c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800758e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007592:	910f      	str	r1, [sp, #60]	; 0x3c
    for (int32_t i = 0; i < row_loop_cnt; i++)
 8007594:	2100      	movs	r1, #0
 8007596:	9106      	str	r1, [sp, #24]
 8007598:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800759a:	3112      	adds	r1, #18
 800759c:	910a      	str	r1, [sp, #40]	; 0x28
 800759e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80075a0:	1acb      	subs	r3, r1, r3
 80075a2:	9310      	str	r3, [sp, #64]	; 0x40
        const int8_t *rhs_1 = rhs + rhs_cols;
 80075a4:	9b05      	ldr	r3, [sp, #20]
 80075a6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80075a8:	185f      	adds	r7, r3, r1
        rhs += 2 * rhs_cols;
 80075aa:	9904      	ldr	r1, [sp, #16]
 80075ac:	461e      	mov	r6, r3
 80075ae:	440b      	add	r3, r1
 80075b0:	9305      	str	r3, [sp, #20]
        for (int j = col_loop_cnt; j != 0; j--)
 80075b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8132 	beq.w	800781e <arm_nn_vec_mat_mult_t_s16+0x2f6>
        int32_t acc_1 = 0;
 80075ba:	2100      	movs	r1, #0
        const int16_t *lhs_vec = lhs;
 80075bc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
        for (int j = col_loop_cnt; j != 0; j--)
 80075c0:	469e      	mov	lr, r3
        int32_t acc_0 = 0;
 80075c2:	4608      	mov	r0, r1
    memcpy(&val, *in_q15, 4);
 80075c4:	f8dc a000 	ldr.w	sl, [ip]
 80075c8:	f8dc 9004 	ldr.w	r9, [ip, #4]
    *in_q15 += 2;
 80075cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80075d0:	f10c 0c08 	add.w	ip, ip, #8
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80075d4:	fa2f fb98 	sxtb16	fp, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80075d8:	fa2f f888 	sxtb16	r8, r8
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80075dc:	eacb 4328 	pkhtb	r3, fp, r8, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80075e0:	eac8 480b 	pkhbt	r8, r8, fp, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80075e4:	fb28 000a 	smlad	r0, r8, sl, r0
 80075e8:	fb23 0009 	smlad	r0, r3, r9, r0
    memcpy(&val, *in_q7, 4);
 80075ec:	f857 3b04 	ldr.w	r3, [r7], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80075f0:	fa2f fb93 	sxtb16	fp, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80075f4:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80075f8:	eacb 4823 	pkhtb	r8, fp, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80075fc:	eac3 430b 	pkhbt	r3, r3, fp, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007600:	fb23 130a 	smlad	r3, r3, sl, r1
 8007604:	fb28 3109 	smlad	r1, r8, r9, r3
        for (int j = col_loop_cnt; j != 0; j--)
 8007608:	f1be 0e01 	subs.w	lr, lr, #1
 800760c:	d1da      	bne.n	80075c4 <arm_nn_vec_mat_mult_t_s16+0x9c>
        acc_64_0 += acc_0;
 800760e:	17c3      	asrs	r3, r0, #31
 8007610:	9e03      	ldr	r6, [sp, #12]
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007616:	9000      	str	r0, [sp, #0]
        acc_64_1 += acc_1;
 8007618:	460c      	mov	r4, r1
 800761a:	17cd      	asrs	r5, r1, #31
    *in_q15 += 2;
 800761c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800761e:	199f      	adds	r7, r3, r6
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007620:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007622:	4283      	cmp	r3, r0
 8007624:	dd12      	ble.n	800764c <arm_nn_vec_mat_mult_t_s16+0x124>
 8007626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007628:	e9dd 8900 	ldrd	r8, r9, [sp]
 800762c:	eb06 0c03 	add.w	ip, r6, r3
        {
            const int32_t lhs_temp = (*lhs_vec);
            lhs_vec++;
            acc_64_0 += lhs_temp * (*rhs_0);
 8007630:	f916 0b01 	ldrsb.w	r0, [r6], #1
            const int32_t lhs_temp = (*lhs_vec);
 8007634:	f931 3b02 	ldrsh.w	r3, [r1], #2
            acc_64_0 += lhs_temp * (*rhs_0);
 8007638:	fbc3 8980 	smlalbb	r8, r9, r3, r0
            rhs_0++;
            acc_64_1 += lhs_temp * (*rhs_1);
 800763c:	f917 0b01 	ldrsb.w	r0, [r7], #1
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007640:	4566      	cmp	r6, ip
            acc_64_1 += lhs_temp * (*rhs_1);
 8007642:	fbc3 4580 	smlalbb	r4, r5, r3, r0
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007646:	d1f3      	bne.n	8007630 <arm_nn_vec_mat_mult_t_s16+0x108>
 8007648:	e9cd 8900 	strd	r8, r9, [sp]
            rhs_1++;
        }

        if (bias)
 800764c:	b182      	cbz	r2, 8007670 <arm_nn_vec_mat_mult_t_s16+0x148>
        {
            acc_64_0 += *bias++;
 800764e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007652:	6813      	ldr	r3, [r2, #0]
 8007654:	6851      	ldr	r1, [r2, #4]
 8007656:	18f3      	adds	r3, r6, r3
 8007658:	eb41 0107 	adc.w	r1, r1, r7
 800765c:	e9cd 3100 	strd	r3, r1, [sp]
            acc_64_1 += *bias++;
 8007660:	6893      	ldr	r3, [r2, #8]
 8007662:	68d1      	ldr	r1, [r2, #12]
 8007664:	18e3      	adds	r3, r4, r3
 8007666:	eb41 0105 	adc.w	r1, r1, r5
 800766a:	461c      	mov	r4, r3
 800766c:	460d      	mov	r5, r1
 800766e:	3210      	adds	r2, #16
    const q63_t new_val = val * reduced_multiplier;
 8007670:	e9dd 8900 	ldrd	r8, r9, [sp]
 8007674:	9908      	ldr	r1, [sp, #32]
 8007676:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007678:	9e09      	ldr	r6, [sp, #36]	; 0x24
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 800767a:	9f07      	ldr	r7, [sp, #28]
    const q63_t new_val = val * reduced_multiplier;
 800767c:	fb01 f108 	mul.w	r1, r1, r8
 8007680:	fba8 3606 	umull	r3, r6, r8, r6
 8007684:	fb00 1109 	mla	r1, r0, r9, r1
 8007688:	4431      	add	r1, r6
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 800768a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800768c:	f1b7 0020 	subs.w	r0, r7, #32
 8007690:	fa01 f606 	lsl.w	r6, r1, r6
 8007694:	fa23 f307 	lsr.w	r3, r3, r7
 8007698:	bf58      	it	pl
 800769a:	fa41 f000 	asrpl.w	r0, r1, r0
 800769e:	ea43 0306 	orr.w	r3, r3, r6
 80076a2:	bf58      	it	pl
 80076a4:	4303      	orrpl	r3, r0
        }
        q31_t tmp;
        tmp = arm_nn_requantize_s64(acc_64_0, dst_multiplier, dst_shift);
        tmp = MAX(tmp, activation_min);
 80076a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076a8:	9f07      	ldr	r7, [sp, #28]
    result = (result + 1) >> 1;             // Last shift position and insert round
 80076aa:	3301      	adds	r3, #1
 80076ac:	105b      	asrs	r3, r3, #1
 80076ae:	428b      	cmp	r3, r1
 80076b0:	bfb8      	it	lt
 80076b2:	460b      	movlt	r3, r1
        tmp = MIN(tmp, activation_max);
 80076b4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80076b6:	428b      	cmp	r3, r1
 80076b8:	bfa8      	it	ge
 80076ba:	460b      	movge	r3, r1
        *dst++ = (q15_t)tmp;
 80076bc:	9902      	ldr	r1, [sp, #8]
 80076be:	f821 3c04 	strh.w	r3, [r1, #-4]
    const q63_t new_val = val * reduced_multiplier;
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	fb03 f104 	mul.w	r1, r3, r4
 80076c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076ca:	fb03 1105 	mla	r1, r3, r5, r1
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	fba4 3603 	umull	r3, r6, r4, r3
 80076d4:	4431      	add	r1, r6
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 80076d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80076d8:	f1b7 0020 	subs.w	r0, r7, #32
 80076dc:	fa01 f606 	lsl.w	r6, r1, r6
 80076e0:	fa23 f307 	lsr.w	r3, r3, r7
 80076e4:	bf58      	it	pl
 80076e6:	fa41 f000 	asrpl.w	r0, r1, r0
 80076ea:	ea43 0306 	orr.w	r3, r3, r6
 80076ee:	bf58      	it	pl
 80076f0:	4303      	orrpl	r3, r0

        tmp = arm_nn_requantize_s64(acc_64_1, dst_multiplier, dst_shift);
        tmp = MAX(tmp, activation_min);
 80076f2:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (result + 1) >> 1;             // Last shift position and insert round
 80076f4:	3301      	adds	r3, #1
 80076f6:	105b      	asrs	r3, r3, #1
 80076f8:	428b      	cmp	r3, r1
 80076fa:	bfb8      	it	lt
 80076fc:	460b      	movlt	r3, r1
        tmp = MIN(tmp, activation_max);
 80076fe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007700:	428b      	cmp	r3, r1
 8007702:	bfa8      	it	ge
 8007704:	460b      	movge	r3, r1
        *dst++ = (q15_t)tmp;
 8007706:	9902      	ldr	r1, [sp, #8]
 8007708:	f821 3c02 	strh.w	r3, [r1, #-2]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 800770c:	3104      	adds	r1, #4
 800770e:	9102      	str	r1, [sp, #8]
 8007710:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8007714:	9b06      	ldr	r3, [sp, #24]
 8007716:	4401      	add	r1, r0
 8007718:	9103      	str	r1, [sp, #12]
 800771a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800771c:	3301      	adds	r3, #1
 800771e:	4299      	cmp	r1, r3
 8007720:	9306      	str	r3, [sp, #24]
 8007722:	f73f af3f 	bgt.w	80075a4 <arm_nn_vec_mat_mult_t_s16+0x7c>
        rhs += 2 * rhs_cols;
 8007726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007728:	4604      	mov	r4, r0
 800772a:	2b01      	cmp	r3, #1
 800772c:	9811      	ldr	r0, [sp, #68]	; 0x44
        *dst++ = (q15_t)tmp;
 800772e:	ea4f 0381 	mov.w	r3, r1, lsl #2
        rhs += 2 * rhs_cols;
 8007732:	bfd8      	it	le
 8007734:	2101      	movle	r1, #1
 8007736:	fb04 0101 	mla	r1, r4, r1, r0
 800773a:	9111      	str	r1, [sp, #68]	; 0x44
        *dst++ = (q15_t)tmp;
 800773c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800773e:	bfd8      	it	le
 8007740:	2304      	movle	r3, #4
 8007742:	4419      	add	r1, r3
 8007744:	9112      	str	r1, [sp, #72]	; 0x48
    }

    if (rhs_rows & 0x1)
 8007746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	d564      	bpl.n	8007816 <arm_nn_vec_mat_mult_t_s16+0x2ee>
    {
        q63_t acc_64_0 = 0;
        int32_t acc_0 = 0;
        const int32_t col_loop_cnt = rhs_cols_fast / 4;
 800774c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800774e:	2e00      	cmp	r6, #0
 8007750:	bfb8      	it	lt
 8007752:	3603      	addlt	r6, #3

        const int16_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;

        for (int i = col_loop_cnt; i != 0; i--)
 8007754:	10b6      	asrs	r6, r6, #2
 8007756:	d069      	beq.n	800782c <arm_nn_vec_mat_mult_t_s16+0x304>
        const int16_t *lhs_vec = lhs;
 8007758:	990b      	ldr	r1, [sp, #44]	; 0x2c
        for (int i = col_loop_cnt; i != 0; i--)
 800775a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800775c:	4630      	mov	r0, r6
        int32_t acc_0 = 0;
 800775e:	2400      	movs	r4, #0
    memcpy(&val, *in_q7, 4);
 8007760:	f857 3b04 	ldr.w	r3, [r7], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8007764:	fa2f f593 	sxtb16	r5, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007768:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800776c:	f8d1 e000 	ldr.w	lr, [r1]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8007770:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8007774:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8007778:	fb23 430e 	smlad	r3, r3, lr, r4
    memcpy(&val, *in_q15, 4);
 800777c:	684c      	ldr	r4, [r1, #4]
    *in_q15 += 2;
 800777e:	3108      	adds	r1, #8
 8007780:	fb2c 3404 	smlad	r4, ip, r4, r3
        for (int i = col_loop_cnt; i != 0; i--)
 8007784:	3801      	subs	r0, #1
 8007786:	d1eb      	bne.n	8007760 <arm_nn_vec_mat_mult_t_s16+0x238>
 8007788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800778e:	930b      	str	r3, [sp, #44]	; 0x2c
    *in_q7 += 4;
 8007790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007792:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007796:	9311      	str	r3, [sp, #68]	; 0x44

            vec = arm_nn_read_q15x2_ia(&lhs_vec);
            acc_0 = __SMLAD(ker_1, vec, acc_0);
        }

        acc_64_0 += acc_0;
 8007798:	4620      	mov	r0, r4
 800779a:	00b3      	lsls	r3, r6, #2
 800779c:	17e1      	asrs	r1, r4, #31

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 800779e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80077a0:	429c      	cmp	r4, r3
 80077a2:	dd0b      	ble.n	80077bc <arm_nn_vec_mat_mult_t_s16+0x294>
 80077a4:	1ae3      	subs	r3, r4, r3
 80077a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80077a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80077aa:	4423      	add	r3, r4
        {
            const int32_t lhs_temp = (*lhs_vec);
            lhs_vec++;
            acc_64_0 += lhs_temp * (*rhs_0);
 80077ac:	f914 6b01 	ldrsb.w	r6, [r4], #1
            const int32_t lhs_temp = (*lhs_vec);
 80077b0:	f935 7b02 	ldrsh.w	r7, [r5], #2
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 80077b4:	429c      	cmp	r4, r3
            acc_64_0 += lhs_temp * (*rhs_0);
 80077b6:	fbc7 0186 	smlalbb	r0, r1, r7, r6
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 80077ba:	d1f7      	bne.n	80077ac <arm_nn_vec_mat_mult_t_s16+0x284>
            rhs_0++;
        }

        if (bias)
 80077bc:	b132      	cbz	r2, 80077cc <arm_nn_vec_mat_mult_t_s16+0x2a4>
        {
            acc_64_0 += *bias++;
 80077be:	e9d2 3200 	ldrd	r3, r2, [r2]
 80077c2:	18c3      	adds	r3, r0, r3
 80077c4:	eb42 0201 	adc.w	r2, r2, r1
 80077c8:	4618      	mov	r0, r3
 80077ca:	4611      	mov	r1, r2
    const q63_t new_val = val * reduced_multiplier;
 80077cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077d0:	17db      	asrs	r3, r3, #31
 80077d2:	fb02 f201 	mul.w	r2, r2, r1
 80077d6:	fb03 2200 	mla	r2, r3, r0, r2
 80077da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077dc:	fba3 3000 	umull	r3, r0, r3, r0
 80077e0:	4410      	add	r0, r2
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 80077e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80077e4:	f1c2 010e 	rsb	r1, r2, #14
 80077e8:	3212      	adds	r2, #18
 80077ea:	40cb      	lsrs	r3, r1
 80077ec:	fa00 f202 	lsl.w	r2, r0, r2
 80077f0:	3920      	subs	r1, #32
 80077f2:	ea43 0302 	orr.w	r3, r3, r2
 80077f6:	bf5c      	itt	pl
 80077f8:	fa40 f101 	asrpl.w	r1, r0, r1
 80077fc:	430b      	orrpl	r3, r1
        }
        q31_t tmp;
        tmp = arm_nn_requantize_s64(acc_64_0, dst_multiplier, dst_shift);
        tmp = MAX(tmp, activation_min);
 80077fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
    result = (result + 1) >> 1;             // Last shift position and insert round
 8007800:	3301      	adds	r3, #1
 8007802:	105b      	asrs	r3, r3, #1
 8007804:	4293      	cmp	r3, r2
 8007806:	bfb8      	it	lt
 8007808:	4613      	movlt	r3, r2
        tmp = MIN(tmp, activation_max);
 800780a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800780c:	4293      	cmp	r3, r2
 800780e:	bfa8      	it	ge
 8007810:	4613      	movge	r3, r2
        *dst++ = (q15_t)tmp;
 8007812:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007814:	8013      	strh	r3, [r2, #0]
        rhs += rhs_cols;
    }
#endif

    return ARM_CMSIS_NN_SUCCESS;
}
 8007816:	2000      	movs	r0, #0
 8007818:	b015      	add	sp, #84	; 0x54
 800781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int j = col_loop_cnt; j != 0; j--)
 800781e:	2400      	movs	r4, #0
 8007820:	2500      	movs	r5, #0
 8007822:	e9cd 4500 	strd	r4, r5, [sp]
        const int16_t *lhs_vec = lhs;
 8007826:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007828:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800782a:	e6f9      	b.n	8007620 <arm_nn_vec_mat_mult_t_s16+0xf8>
 800782c:	4633      	mov	r3, r6
        for (int i = col_loop_cnt; i != 0; i--)
 800782e:	2000      	movs	r0, #0
 8007830:	2100      	movs	r1, #0
 8007832:	e7b4      	b.n	800779e <arm_nn_vec_mat_mult_t_s16+0x276>

08007834 <arm_nn_vec_mat_mult_t_s8>:
                                             const int32_t rhs_cols,
                                             const int32_t rhs_rows,
                                             const int32_t activation_min,
                                             const int32_t activation_max,
                                             const int32_t address_offset)
{
 8007834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	b093      	sub	sp, #76	; 0x4c
 800783a:	9310      	str	r3, [sp, #64]	; 0x40
        *dst = MIN(acc_0, activation_max);
        dst += address_offset;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t row_loop_cnt = rhs_rows / 2;
 800783c:	9b22      	ldr	r3, [sp, #136]	; 0x88
{
 800783e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8007840:	9005      	str	r0, [sp, #20]
    const int32_t row_loop_cnt = rhs_rows / 2;
 8007842:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007846:	105b      	asrs	r3, r3, #1
 8007848:	9306      	str	r3, [sp, #24]
    const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);

    for (int32_t i = 0; i < row_loop_cnt; i++)
 800784a:	9b22      	ldr	r3, [sp, #136]	; 0x88
{
 800784c:	910f      	str	r1, [sp, #60]	; 0x3c
    for (int32_t i = 0; i < row_loop_cnt; i++)
 800784e:	2b01      	cmp	r3, #1
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8007850:	fa0f f887 	sxth.w	r8, r7
{
 8007854:	9201      	str	r2, [sp, #4]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8007856:	eac8 4808 	pkhbt	r8, r8, r8, lsl #16
    for (int32_t i = 0; i < row_loop_cnt; i++)
 800785a:	f340 8103 	ble.w	8007a64 <arm_nn_vec_mat_mult_t_s8+0x230>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800785e:	9a20      	ldr	r2, [sp, #128]	; 0x80
        {
            acc_0 = *bias++;
            acc_1 = *bias++;
        }

        const int32_t col_loop_cnt = rhs_cols / 4;
 8007860:	9b21      	ldr	r3, [sp, #132]	; 0x84
    *in_q7 += 4;
 8007862:	9805      	ldr	r0, [sp, #20]
 8007864:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007868:	4252      	negs	r2, r2
 800786a:	4611      	mov	r1, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	920d      	str	r2, [sp, #52]	; 0x34
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007870:	f04f 0201 	mov.w	r2, #1
 8007874:	bfb8      	it	lt
 8007876:	3303      	addlt	r3, #3
 8007878:	408a      	lsls	r2, r1
 800787a:	1e51      	subs	r1, r2, #1

            acc_1 = __SMLAD(ker_1, vec_1, acc_1);
            acc_1 = __SMLAD(ker_0, vec_0, acc_1);
        }

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 800787c:	f023 0203 	bic.w	r2, r3, #3
        const int32_t col_loop_cnt = rhs_cols / 4;
 8007880:	109b      	asrs	r3, r3, #2
 8007882:	910e      	str	r1, [sp, #56]	; 0x38
 8007884:	9308      	str	r3, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
 8007886:	104b      	asrs	r3, r1, #1
    for (int32_t i = 0; i < row_loop_cnt; i++)
 8007888:	2100      	movs	r1, #0
 800788a:	9102      	str	r1, [sp, #8]
        rhs += 2 * rhs_cols;
 800788c:	9921      	ldr	r1, [sp, #132]	; 0x84
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 800788e:	9209      	str	r2, [sp, #36]	; 0x24
        rhs += 2 * rhs_cols;
 8007890:	0049      	lsls	r1, r1, #1
 8007892:	9100      	str	r1, [sp, #0]
        acc_0 = MIN(acc_0, activation_max);
        acc_1 = MAX(acc_1, activation_min);
        acc_1 = MIN(acc_1, activation_max);
        *dst = (int8_t)acc_0;
        *(dst + address_offset) = (int8_t)acc_1;
        dst += 2 * address_offset;
 8007894:	9925      	ldr	r1, [sp, #148]	; 0x94
 8007896:	930c      	str	r3, [sp, #48]	; 0x30
 8007898:	0049      	lsls	r1, r1, #1
 800789a:	9107      	str	r1, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800789c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800789e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80078a2:	9104      	str	r1, [sp, #16]
 80078a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078a6:	eb01 0b02 	add.w	fp, r1, r2
    *in_q7 += 4;
 80078aa:	468e      	mov	lr, r1
        if (bias)
 80078ac:	9921      	ldr	r1, [sp, #132]	; 0x84
 80078ae:	4410      	add	r0, r2
 80078b0:	1a8a      	subs	r2, r1, r2
 80078b2:	9901      	ldr	r1, [sp, #4]
 80078b4:	900a      	str	r0, [sp, #40]	; 0x28
        threshold++;
 80078b6:	3301      	adds	r3, #1
 80078b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80078ba:	9311      	str	r3, [sp, #68]	; 0x44
 80078bc:	2900      	cmp	r1, #0
 80078be:	f000 8085 	beq.w	80079cc <arm_nn_vec_mat_mult_t_s8+0x198>
            acc_1 = *bias++;
 80078c2:	684a      	ldr	r2, [r1, #4]
            acc_0 = *bias++;
 80078c4:	f851 3b08 	ldr.w	r3, [r1], #8
            acc_1 = *bias++;
 80078c8:	9101      	str	r1, [sp, #4]
        const int8_t *rhs_1 = rhs + rhs_cols;
 80078ca:	9921      	ldr	r1, [sp, #132]	; 0x84
        for (int j = col_loop_cnt; j != 0; j--)
 80078cc:	9e08      	ldr	r6, [sp, #32]
 80078ce:	eb0e 0501 	add.w	r5, lr, r1
        rhs += 2 * rhs_cols;
 80078d2:	9900      	ldr	r1, [sp, #0]
 80078d4:	4471      	add	r1, lr
 80078d6:	9103      	str	r1, [sp, #12]
        for (int j = col_loop_cnt; j != 0; j--)
 80078d8:	2e00      	cmp	r6, #0
 80078da:	f000 8137 	beq.w	8007b4c <arm_nn_vec_mat_mult_t_s8+0x318>
        const int8_t *lhs_vec = lhs;
 80078de:	f8dd 9014 	ldr.w	r9, [sp, #20]
    memcpy(&val, *in_q7, 4);
 80078e2:	f859 1b04 	ldr.w	r1, [r9], #4
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
 80078e6:	fa28 f491 	sxtab16	r4, r8, r1, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80078ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078ee:	fa28 f181 	sxtab16	r1, r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80078f2:	fa2f fc90 	sxtb16	ip, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80078f6:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80078fa:	fb2c 3304 	smlad	r3, ip, r4, r3
 80078fe:	fb20 3301 	smlad	r3, r0, r1, r3
 8007902:	f855 0b04 	ldr.w	r0, [r5], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8007906:	fa2f fc90 	sxtb16	ip, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800790a:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800790e:	fb2c 2204 	smlad	r2, ip, r4, r2
 8007912:	fb20 2201 	smlad	r2, r0, r1, r2
        for (int j = col_loop_cnt; j != 0; j--)
 8007916:	3e01      	subs	r6, #1
 8007918:	d1e3      	bne.n	80078e2 <arm_nn_vec_mat_mult_t_s8+0xae>
 800791a:	9921      	ldr	r1, [sp, #132]	; 0x84
    *in_q7 += 4;
 800791c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800791e:	46de      	mov	lr, fp
 8007920:	eb01 050b 	add.w	r5, r1, fp
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007924:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007926:	42a1      	cmp	r1, r4
 8007928:	dd0e      	ble.n	8007948 <arm_nn_vec_mat_mult_t_s8+0x114>
 800792a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800792c:	1846      	adds	r6, r0, r1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 800792e:	f910 1b01 	ldrsb.w	r1, [r0], #1
            acc_0 += lhs_temp * (*rhs_0);
 8007932:	f91e 4b01 	ldrsb.w	r4, [lr], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 8007936:	4439      	add	r1, r7
            acc_0 += lhs_temp * (*rhs_0);
 8007938:	fb01 3304 	mla	r3, r1, r4, r3
            acc_1 += lhs_temp * (*rhs_1);
 800793c:	f915 4b01 	ldrsb.w	r4, [r5], #1
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007940:	42b0      	cmp	r0, r6
            acc_1 += lhs_temp * (*rhs_1);
 8007942:	fb01 2204 	mla	r2, r1, r4, r2
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8007946:	d1f2      	bne.n	800792e <arm_nn_vec_mat_mult_t_s8+0xfa>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007948:	9c04      	ldr	r4, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800794a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800794c:	40a3      	lsls	r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800794e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007952:	2000      	movs	r0, #0
 8007954:	fbc3 1005 	smlal	r1, r0, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 8007958:	0fcb      	lsrs	r3, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800795a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800795c:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800795e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007962:	dd36      	ble.n	80079d2 <arm_nn_vec_mat_mult_t_s8+0x19e>
 8007964:	40a2      	lsls	r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007966:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800796c:	2000      	movs	r0, #0
 800796e:	fbc4 1002 	smlal	r1, r0, r4, r2
    if (result < 0)
 8007972:	2b00      	cmp	r3, #0
    result = (int32_t)(mult.long_long >> 31);
 8007974:	ea4f 72d1 	mov.w	r2, r1, lsr #31
    if (result < 0)
 8007978:	db4f      	blt.n	8007a1a <arm_nn_vec_mat_mult_t_s8+0x1e6>
 800797a:	ea52 0240 	orrs.w	r2, r2, r0, lsl #1
 800797e:	d448      	bmi.n	8007a12 <arm_nn_vec_mat_mult_t_s8+0x1de>
        acc_0 += dst_offset;
 8007980:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007982:	440b      	add	r3, r1
        acc_1 += dst_offset;
 8007984:	440a      	add	r2, r1
        acc_0 = MAX(acc_0, activation_min);
 8007986:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007988:	428b      	cmp	r3, r1
 800798a:	bfb8      	it	lt
 800798c:	460b      	movlt	r3, r1
        acc_1 = MAX(acc_1, activation_min);
 800798e:	428a      	cmp	r2, r1
 8007990:	bfb8      	it	lt
 8007992:	460a      	movlt	r2, r1
        acc_0 = MIN(acc_0, activation_max);
 8007994:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007996:	428b      	cmp	r3, r1
 8007998:	bfa8      	it	ge
 800799a:	460b      	movge	r3, r1
        *dst = (int8_t)acc_0;
 800799c:	f88a 3000 	strb.w	r3, [sl]
        acc_1 = MIN(acc_1, activation_max);
 80079a0:	428a      	cmp	r2, r1
        *(dst + address_offset) = (int8_t)acc_1;
 80079a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
        acc_1 = MIN(acc_1, activation_max);
 80079a4:	bfa8      	it	ge
 80079a6:	460a      	movge	r2, r1
        *(dst + address_offset) = (int8_t)acc_1;
 80079a8:	f80a 2003 	strb.w	r2, [sl, r3]
        dst += 2 * address_offset;
 80079ac:	9a07      	ldr	r2, [sp, #28]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 80079ae:	9b02      	ldr	r3, [sp, #8]
        dst += 2 * address_offset;
 80079b0:	4492      	add	sl, r2
    for (int32_t i = 0; i < row_loop_cnt; i++)
 80079b2:	9a00      	ldr	r2, [sp, #0]
 80079b4:	4493      	add	fp, r2
 80079b6:	9a06      	ldr	r2, [sp, #24]
 80079b8:	3301      	adds	r3, #1
 80079ba:	429a      	cmp	r2, r3
 80079bc:	9302      	str	r3, [sp, #8]
 80079be:	dd42      	ble.n	8007a46 <arm_nn_vec_mat_mult_t_s8+0x212>
        if (bias)
 80079c0:	9901      	ldr	r1, [sp, #4]
        rhs += 2 * rhs_cols;
 80079c2:	f8dd e00c 	ldr.w	lr, [sp, #12]
        if (bias)
 80079c6:	2900      	cmp	r1, #0
 80079c8:	f47f af7b 	bne.w	80078c2 <arm_nn_vec_mat_mult_t_s8+0x8e>
 80079cc:	460b      	mov	r3, r1
        int32_t acc_1 = 0;
 80079ce:	460a      	mov	r2, r1
 80079d0:	e77b      	b.n	80078ca <arm_nn_vec_mat_mult_t_s8+0x96>
    int32_t remainder = remainder_mask & dividend;
 80079d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if (result < 0)
 80079d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    int32_t remainder = remainder_mask & dividend;
 80079d6:	ea03 0105 	and.w	r1, r3, r5
    if (result < 0)
 80079da:	4133      	asrs	r3, r6
 80079dc:	d422      	bmi.n	8007a24 <arm_nn_vec_mat_mult_t_s8+0x1f0>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80079de:	fa02 f404 	lsl.w	r4, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80079e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80079e4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80079e8:	2000      	movs	r0, #0
 80079ea:	fbc2 c004 	smlal	ip, r0, r2, r4
 80079ee:	4662      	mov	r2, ip
    result = (int32_t)(mult.long_long >> 31);
 80079f0:	0fd2      	lsrs	r2, r2, #31
 80079f2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    q31_t threshold = remainder_mask >> 1;
 80079f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int32_t remainder = remainder_mask & dividend;
 80079f8:	ea05 0002 	and.w	r0, r5, r2
    result = dividend >> exponent;
 80079fc:	4132      	asrs	r2, r6
    if (remainder > threshold)
 80079fe:	42a1      	cmp	r1, r4
        result++;
 8007a00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a02:	bfc8      	it	gt
 8007a04:	3301      	addgt	r3, #1
    if (result < 0)
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	db05      	blt.n	8007a16 <arm_nn_vec_mat_mult_t_s8+0x1e2>
    if (remainder > threshold)
 8007a0a:	4288      	cmp	r0, r1
        result++;
 8007a0c:	bfc8      	it	gt
 8007a0e:	3201      	addgt	r2, #1
 8007a10:	e7b6      	b.n	8007980 <arm_nn_vec_mat_mult_t_s8+0x14c>
    if (result < 0)
 8007a12:	2000      	movs	r0, #0
    q31_t threshold = remainder_mask >> 1;
 8007a14:	4601      	mov	r1, r0
        threshold++;
 8007a16:	3101      	adds	r1, #1
 8007a18:	e7f7      	b.n	8007a0a <arm_nn_vec_mat_mult_t_s8+0x1d6>
    result = (int32_t)(mult.long_long >> 31);
 8007a1a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007a1e:	2000      	movs	r0, #0
    q31_t threshold = remainder_mask >> 1;
 8007a20:	4601      	mov	r1, r0
 8007a22:	e7f0      	b.n	8007a06 <arm_nn_vec_mat_mult_t_s8+0x1d2>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007a24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007a26:	fa02 f004 	lsl.w	r0, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a2e:	2400      	movs	r4, #0
 8007a30:	fbc5 2400 	smlal	r2, r4, r5, r0
    result = (int32_t)(mult.long_long >> 31);
 8007a34:	0fd2      	lsrs	r2, r2, #31
    int32_t remainder = remainder_mask & dividend;
 8007a36:	980e      	ldr	r0, [sp, #56]	; 0x38
    result = dividend >> exponent;
 8007a38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    result = (int32_t)(mult.long_long >> 31);
 8007a3a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
 8007a3e:	4010      	ands	r0, r2
        threshold++;
 8007a40:	9c11      	ldr	r4, [sp, #68]	; 0x44
    result = dividend >> exponent;
 8007a42:	412a      	asrs	r2, r5
        threshold++;
 8007a44:	e7db      	b.n	80079fe <arm_nn_vec_mat_mult_t_s8+0x1ca>
 8007a46:	9b22      	ldr	r3, [sp, #136]	; 0x88
        rhs += 2 * rhs_cols;
 8007a48:	9900      	ldr	r1, [sp, #0]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a50:	bfd8      	it	le
 8007a52:	2301      	movle	r3, #1
 8007a54:	fb03 2201 	mla	r2, r3, r1, r2
 8007a58:	920f      	str	r2, [sp, #60]	; 0x3c
        dst += 2 * address_offset;
 8007a5a:	9907      	ldr	r1, [sp, #28]
 8007a5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a5e:	fb03 2301 	mla	r3, r3, r1, r2
 8007a62:	9310      	str	r3, [sp, #64]	; 0x40
    }

    if (rhs_rows & 0x1)
 8007a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d56c      	bpl.n	8007b44 <arm_nn_vec_mat_mult_t_s8+0x310>
    {
        int32_t acc_0 = 0;
        if (bias)
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d070      	beq.n	8007b52 <arm_nn_vec_mat_mult_t_s8+0x31e>
        {
            acc_0 = *bias++;
 8007a70:	681a      	ldr	r2, [r3, #0]
        }
        const int32_t col_loop_cnt = rhs_cols / 4;
 8007a72:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 8007a76:	4673      	mov	r3, lr
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfb8      	it	lt
 8007a7c:	f10e 0e03 	addlt.w	lr, lr, #3

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;

        for (int i = col_loop_cnt; i != 0; i--)
 8007a80:	ea5f 0eae 	movs.w	lr, lr, asr #2
 8007a84:	d01e      	beq.n	8007ac4 <arm_nn_vec_mat_mult_t_s8+0x290>
 8007a86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
        const int8_t *lhs_vec = lhs;
 8007a88:	9d05      	ldr	r5, [sp, #20]
        for (int i = col_loop_cnt; i != 0; i--)
 8007a8a:	4674      	mov	r4, lr
    memcpy(&val, *in_q7, 4);
 8007a8c:	f855 3b04 	ldr.w	r3, [r5], #4
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
 8007a90:	fa28 fc93 	sxtab16	ip, r8, r3, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007a94:	fa28 f183 	sxtab16	r1, r8, r3
 8007a98:	f856 3b04 	ldr.w	r3, [r6], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8007a9c:	fa2f f093 	sxtb16	r0, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007aa0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007aa4:	fb20 220c 	smlad	r2, r0, ip, r2
 8007aa8:	fb23 2201 	smlad	r2, r3, r1, r2
 8007aac:	3c01      	subs	r4, #1
 8007aae:	d1ed      	bne.n	8007a8c <arm_nn_vec_mat_mult_t_s8+0x258>
    *in_q7 += 4;
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aba:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8007abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

            acc_0 = __SMLAD(ker_1, vec_1, acc_0);
            acc_0 = __SMLAD(ker_0, vec_0, acc_0);
        }

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 8007ac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac6:	4573      	cmp	r3, lr
 8007ac8:	dd12      	ble.n	8007af0 <arm_nn_vec_mat_mult_t_s8+0x2bc>
 8007aca:	4259      	negs	r1, r3
 8007acc:	9805      	ldr	r0, [sp, #20]
 8007ace:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007ad0:	f001 0103 	and.w	r1, r1, #3
 8007ad4:	f003 0303 	and.w	r3, r3, #3
 8007ad8:	bf58      	it	pl
 8007ada:	424b      	negpl	r3, r1
 8007adc:	4403      	add	r3, r0
        {
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 8007ade:	f910 1b01 	ldrsb.w	r1, [r0], #1
            lhs_vec++;
            acc_0 += lhs_temp * (*rhs_0);
 8007ae2:	f914 5b01 	ldrsb.w	r5, [r4], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 8007ae6:	4439      	add	r1, r7
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 8007ae8:	4298      	cmp	r0, r3
            acc_0 += lhs_temp * (*rhs_0);
 8007aea:	fb01 2205 	mla	r2, r1, r5, r2
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 8007aee:	d1f6      	bne.n	8007ade <arm_nn_vec_mat_mult_t_s8+0x2aa>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007af0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007af2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007af6:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007af8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007afa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007afe:	2000      	movs	r0, #0
 8007b00:	fbc2 1003 	smlal	r1, r0, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 8007b04:	0fcb      	lsrs	r3, r1, #31
 8007b06:	ea43 0240 	orr.w	r2, r3, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007b0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc0d      	bgt.n	8007b2c <arm_nn_vec_mat_mult_t_s8+0x2f8>
 8007b10:	425b      	negs	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007b12:	2101      	movs	r1, #1
 8007b14:	4099      	lsls	r1, r3
 8007b16:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 8007b18:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
 8007b1c:	411a      	asrs	r2, r3
    q31_t threshold = remainder_mask >> 1;
 8007b1e:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 8007b22:	bf48      	it	mi
 8007b24:	3101      	addmi	r1, #1
    if (remainder > threshold)
 8007b26:	4288      	cmp	r0, r1
        result++;
 8007b28:	bfc8      	it	gt
 8007b2a:	3201      	addgt	r2, #1
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);

        // Add offset
        acc_0 += dst_offset;
 8007b2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b2e:	4413      	add	r3, r2
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 8007b30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007b32:	4293      	cmp	r3, r2
 8007b34:	bfb8      	it	lt
 8007b36:	4613      	movlt	r3, r2
        acc_0 = MIN(acc_0, activation_max);
 8007b38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bfa8      	it	ge
 8007b3e:	4613      	movge	r3, r2
        *dst = (int8_t)acc_0;
 8007b40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b42:	7013      	strb	r3, [r2, #0]
        dst += address_offset;
        rhs += rhs_cols;
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
 8007b44:	2000      	movs	r0, #0
 8007b46:	b013      	add	sp, #76	; 0x4c
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const int8_t *lhs_vec = lhs;
 8007b4c:	9805      	ldr	r0, [sp, #20]
 8007b4e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007b50:	e6e8      	b.n	8007924 <arm_nn_vec_mat_mult_t_s8+0xf0>
 8007b52:	461a      	mov	r2, r3
 8007b54:	e78d      	b.n	8007a72 <arm_nn_vec_mat_mult_t_s8+0x23e>
 8007b56:	bf00      	nop

08007b58 <__cxa_guard_acquire>:
 8007b58:	6803      	ldr	r3, [r0, #0]
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d406      	bmi.n	8007b6c <__cxa_guard_acquire+0x14>
 8007b5e:	7843      	ldrb	r3, [r0, #1]
 8007b60:	b103      	cbz	r3, 8007b64 <__cxa_guard_acquire+0xc>
 8007b62:	deff      	udf	#255	; 0xff
 8007b64:	2301      	movs	r3, #1
 8007b66:	7043      	strb	r3, [r0, #1]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	4770      	bx	lr
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4770      	bx	lr

08007b70 <__cxa_guard_release>:
 8007b70:	2301      	movs	r3, #1
 8007b72:	6003      	str	r3, [r0, #0]
 8007b74:	4770      	bx	lr
	...

08007b78 <frexp>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	ec55 4b10 	vmov	r4, r5, d0
 8007b80:	6001      	str	r1, [r0, #0]
 8007b82:	4916      	ldr	r1, [pc, #88]	; (8007bdc <frexp+0x64>)
 8007b84:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	dc22      	bgt.n	8007bd6 <frexp+0x5e>
 8007b90:	ee10 1a10 	vmov	r1, s0
 8007b94:	4311      	orrs	r1, r2
 8007b96:	d01e      	beq.n	8007bd6 <frexp+0x5e>
 8007b98:	4911      	ldr	r1, [pc, #68]	; (8007be0 <frexp+0x68>)
 8007b9a:	4029      	ands	r1, r5
 8007b9c:	b969      	cbnz	r1, 8007bba <frexp+0x42>
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <frexp+0x6c>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	ee10 0a10 	vmov	r0, s0
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fd3e 	bl	8000628 <__aeabi_dmul>
 8007bac:	460b      	mov	r3, r1
 8007bae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007bb2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	6031      	str	r1, [r6, #0]
 8007bba:	6831      	ldr	r1, [r6, #0]
 8007bbc:	1512      	asrs	r2, r2, #20
 8007bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bc2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8007bc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bca:	440a      	add	r2, r1
 8007bcc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8007bd0:	6032      	str	r2, [r6, #0]
 8007bd2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8007bd6:	ec45 4b10 	vmov	d0, r4, r5
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	7fefffff 	.word	0x7fefffff
 8007be0:	7ff00000 	.word	0x7ff00000
 8007be4:	43500000 	.word	0x43500000

08007be8 <round>:
 8007be8:	ec51 0b10 	vmov	r0, r1, d0
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007bf2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007bf6:	2c13      	cmp	r4, #19
 8007bf8:	ee10 2a10 	vmov	r2, s0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	dc19      	bgt.n	8007c34 <round+0x4c>
 8007c00:	2c00      	cmp	r4, #0
 8007c02:	da09      	bge.n	8007c18 <round+0x30>
 8007c04:	3401      	adds	r4, #1
 8007c06:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007c0a:	d103      	bne.n	8007c14 <round+0x2c>
 8007c0c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c14:	2200      	movs	r2, #0
 8007c16:	e028      	b.n	8007c6a <round+0x82>
 8007c18:	4d15      	ldr	r5, [pc, #84]	; (8007c70 <round+0x88>)
 8007c1a:	4125      	asrs	r5, r4
 8007c1c:	ea01 0605 	and.w	r6, r1, r5
 8007c20:	4332      	orrs	r2, r6
 8007c22:	d00e      	beq.n	8007c42 <round+0x5a>
 8007c24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c28:	fa42 f404 	asr.w	r4, r2, r4
 8007c2c:	4423      	add	r3, r4
 8007c2e:	ea23 0305 	bic.w	r3, r3, r5
 8007c32:	e7ef      	b.n	8007c14 <round+0x2c>
 8007c34:	2c33      	cmp	r4, #51	; 0x33
 8007c36:	dd07      	ble.n	8007c48 <round+0x60>
 8007c38:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007c3c:	d101      	bne.n	8007c42 <round+0x5a>
 8007c3e:	f7f8 fb3d 	bl	80002bc <__adddf3>
 8007c42:	ec41 0b10 	vmov	d0, r0, r1
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007c4c:	f04f 35ff 	mov.w	r5, #4294967295
 8007c50:	40f5      	lsrs	r5, r6
 8007c52:	4228      	tst	r0, r5
 8007c54:	d0f5      	beq.n	8007c42 <round+0x5a>
 8007c56:	2101      	movs	r1, #1
 8007c58:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007c5c:	fa01 f404 	lsl.w	r4, r1, r4
 8007c60:	1912      	adds	r2, r2, r4
 8007c62:	bf28      	it	cs
 8007c64:	185b      	addcs	r3, r3, r1
 8007c66:	ea22 0205 	bic.w	r2, r2, r5
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	e7e8      	b.n	8007c42 <round+0x5a>
 8007c70:	000fffff 	.word	0x000fffff

08007c74 <roundf>:
 8007c74:	ee10 0a10 	vmov	r0, s0
 8007c78:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007c7c:	3a7f      	subs	r2, #127	; 0x7f
 8007c7e:	2a16      	cmp	r2, #22
 8007c80:	dc15      	bgt.n	8007cae <roundf+0x3a>
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	da08      	bge.n	8007c98 <roundf+0x24>
 8007c86:	3201      	adds	r2, #1
 8007c88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c8c:	d101      	bne.n	8007c92 <roundf+0x1e>
 8007c8e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8007c92:	ee00 3a10 	vmov	s0, r3
 8007c96:	4770      	bx	lr
 8007c98:	4907      	ldr	r1, [pc, #28]	; (8007cb8 <roundf+0x44>)
 8007c9a:	4111      	asrs	r1, r2
 8007c9c:	4208      	tst	r0, r1
 8007c9e:	d0fa      	beq.n	8007c96 <roundf+0x22>
 8007ca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ca4:	4113      	asrs	r3, r2
 8007ca6:	4403      	add	r3, r0
 8007ca8:	ea23 0301 	bic.w	r3, r3, r1
 8007cac:	e7f1      	b.n	8007c92 <roundf+0x1e>
 8007cae:	2a80      	cmp	r2, #128	; 0x80
 8007cb0:	d1f1      	bne.n	8007c96 <roundf+0x22>
 8007cb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007cb6:	4770      	bx	lr
 8007cb8:	007fffff 	.word	0x007fffff

08007cbc <__assert_func>:
 8007cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cbe:	4614      	mov	r4, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <__assert_func+0x2c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	68d8      	ldr	r0, [r3, #12]
 8007cca:	b14c      	cbz	r4, 8007ce0 <__assert_func+0x24>
 8007ccc:	4b07      	ldr	r3, [pc, #28]	; (8007cec <__assert_func+0x30>)
 8007cce:	9100      	str	r1, [sp, #0]
 8007cd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cd4:	4906      	ldr	r1, [pc, #24]	; (8007cf0 <__assert_func+0x34>)
 8007cd6:	462b      	mov	r3, r5
 8007cd8:	f000 f81a 	bl	8007d10 <fiprintf>
 8007cdc:	f000 ff98 	bl	8008c10 <abort>
 8007ce0:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <__assert_func+0x38>)
 8007ce2:	461c      	mov	r4, r3
 8007ce4:	e7f3      	b.n	8007cce <__assert_func+0x12>
 8007ce6:	bf00      	nop
 8007ce8:	20000da0 	.word	0x20000da0
 8007cec:	0800d420 	.word	0x0800d420
 8007cf0:	0800d42d 	.word	0x0800d42d
 8007cf4:	0800ae5e 	.word	0x0800ae5e

08007cf8 <atexit>:
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 bf24 	b.w	8008b4c <__register_exitproc>

08007d04 <__errno>:
 8007d04:	4b01      	ldr	r3, [pc, #4]	; (8007d0c <__errno+0x8>)
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20000da0 	.word	0x20000da0

08007d10 <fiprintf>:
 8007d10:	b40e      	push	{r1, r2, r3}
 8007d12:	b503      	push	{r0, r1, lr}
 8007d14:	4601      	mov	r1, r0
 8007d16:	ab03      	add	r3, sp, #12
 8007d18:	4805      	ldr	r0, [pc, #20]	; (8007d30 <fiprintf+0x20>)
 8007d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1e:	6800      	ldr	r0, [r0, #0]
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	f000 f885 	bl	8007e30 <_vfiprintf_r>
 8007d26:	b002      	add	sp, #8
 8007d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d2c:	b003      	add	sp, #12
 8007d2e:	4770      	bx	lr
 8007d30:	20000da0 	.word	0x20000da0

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	; (8007d78 <__libc_init_array+0x44>)
 8007d48:	f002 ff8c 	bl	800ac64 <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	0800d7fc 	.word	0x0800d7fc
 8007d70:	0800d7fc 	.word	0x0800d7fc
 8007d74:	0800d7fc 	.word	0x0800d7fc
 8007d78:	0800d800 	.word	0x0800d800

08007d7c <memcpy>:
 8007d7c:	440a      	add	r2, r1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	4770      	bx	lr
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d1f9      	bne.n	8007d8a <memcpy+0xe>
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <memmove>:
 8007d98:	4288      	cmp	r0, r1
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	eb01 0402 	add.w	r4, r1, r2
 8007da0:	d902      	bls.n	8007da8 <memmove+0x10>
 8007da2:	4284      	cmp	r4, r0
 8007da4:	4623      	mov	r3, r4
 8007da6:	d807      	bhi.n	8007db8 <memmove+0x20>
 8007da8:	1e43      	subs	r3, r0, #1
 8007daa:	42a1      	cmp	r1, r4
 8007dac:	d008      	beq.n	8007dc0 <memmove+0x28>
 8007dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007db6:	e7f8      	b.n	8007daa <memmove+0x12>
 8007db8:	4402      	add	r2, r0
 8007dba:	4601      	mov	r1, r0
 8007dbc:	428a      	cmp	r2, r1
 8007dbe:	d100      	bne.n	8007dc2 <memmove+0x2a>
 8007dc0:	bd10      	pop	{r4, pc}
 8007dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dca:	e7f7      	b.n	8007dbc <memmove+0x24>

08007dcc <memset>:
 8007dcc:	4402      	add	r2, r0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d100      	bne.n	8007dd6 <memset+0xa>
 8007dd4:	4770      	bx	lr
 8007dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dda:	e7f9      	b.n	8007dd0 <memset+0x4>

08007ddc <__sfputc_r>:
 8007ddc:	6893      	ldr	r3, [r2, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	b410      	push	{r4}
 8007de4:	6093      	str	r3, [r2, #8]
 8007de6:	da08      	bge.n	8007dfa <__sfputc_r+0x1e>
 8007de8:	6994      	ldr	r4, [r2, #24]
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	db01      	blt.n	8007df2 <__sfputc_r+0x16>
 8007dee:	290a      	cmp	r1, #10
 8007df0:	d103      	bne.n	8007dfa <__sfputc_r+0x1e>
 8007df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df6:	f000 bde9 	b.w	80089cc <__swbuf_r>
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	1c58      	adds	r0, r3, #1
 8007dfe:	6010      	str	r0, [r2, #0]
 8007e00:	7019      	strb	r1, [r3, #0]
 8007e02:	4608      	mov	r0, r1
 8007e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <__sfputs_r>:
 8007e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	4614      	mov	r4, r2
 8007e12:	18d5      	adds	r5, r2, r3
 8007e14:	42ac      	cmp	r4, r5
 8007e16:	d101      	bne.n	8007e1c <__sfputs_r+0x12>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e007      	b.n	8007e2c <__sfputs_r+0x22>
 8007e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e20:	463a      	mov	r2, r7
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffda 	bl	8007ddc <__sfputc_r>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d1f3      	bne.n	8007e14 <__sfputs_r+0xa>
 8007e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e30 <_vfiprintf_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	460d      	mov	r5, r1
 8007e36:	b09d      	sub	sp, #116	; 0x74
 8007e38:	4614      	mov	r4, r2
 8007e3a:	4698      	mov	r8, r3
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	b118      	cbz	r0, 8007e48 <_vfiprintf_r+0x18>
 8007e40:	6983      	ldr	r3, [r0, #24]
 8007e42:	b90b      	cbnz	r3, 8007e48 <_vfiprintf_r+0x18>
 8007e44:	f001 fe80 	bl	8009b48 <__sinit>
 8007e48:	4b89      	ldr	r3, [pc, #548]	; (8008070 <_vfiprintf_r+0x240>)
 8007e4a:	429d      	cmp	r5, r3
 8007e4c:	d11b      	bne.n	8007e86 <_vfiprintf_r+0x56>
 8007e4e:	6875      	ldr	r5, [r6, #4]
 8007e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e52:	07d9      	lsls	r1, r3, #31
 8007e54:	d405      	bmi.n	8007e62 <_vfiprintf_r+0x32>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	059a      	lsls	r2, r3, #22
 8007e5a:	d402      	bmi.n	8007e62 <_vfiprintf_r+0x32>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e5e:	f001 ff16 	bl	8009c8e <__retarget_lock_acquire_recursive>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	071b      	lsls	r3, r3, #28
 8007e66:	d501      	bpl.n	8007e6c <_vfiprintf_r+0x3c>
 8007e68:	692b      	ldr	r3, [r5, #16]
 8007e6a:	b9eb      	cbnz	r3, 8007ea8 <_vfiprintf_r+0x78>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f000 fdfe 	bl	8008a70 <__swsetup_r>
 8007e74:	b1c0      	cbz	r0, 8007ea8 <_vfiprintf_r+0x78>
 8007e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e78:	07dc      	lsls	r4, r3, #31
 8007e7a:	d50e      	bpl.n	8007e9a <_vfiprintf_r+0x6a>
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	b01d      	add	sp, #116	; 0x74
 8007e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e86:	4b7b      	ldr	r3, [pc, #492]	; (8008074 <_vfiprintf_r+0x244>)
 8007e88:	429d      	cmp	r5, r3
 8007e8a:	d101      	bne.n	8007e90 <_vfiprintf_r+0x60>
 8007e8c:	68b5      	ldr	r5, [r6, #8]
 8007e8e:	e7df      	b.n	8007e50 <_vfiprintf_r+0x20>
 8007e90:	4b79      	ldr	r3, [pc, #484]	; (8008078 <_vfiprintf_r+0x248>)
 8007e92:	429d      	cmp	r5, r3
 8007e94:	bf08      	it	eq
 8007e96:	68f5      	ldreq	r5, [r6, #12]
 8007e98:	e7da      	b.n	8007e50 <_vfiprintf_r+0x20>
 8007e9a:	89ab      	ldrh	r3, [r5, #12]
 8007e9c:	0598      	lsls	r0, r3, #22
 8007e9e:	d4ed      	bmi.n	8007e7c <_vfiprintf_r+0x4c>
 8007ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ea2:	f001 fef6 	bl	8009c92 <__retarget_lock_release_recursive>
 8007ea6:	e7e9      	b.n	8007e7c <_vfiprintf_r+0x4c>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8007eac:	2320      	movs	r3, #32
 8007eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb6:	2330      	movs	r3, #48	; 0x30
 8007eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800807c <_vfiprintf_r+0x24c>
 8007ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec0:	f04f 0901 	mov.w	r9, #1
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	469a      	mov	sl, r3
 8007ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ecc:	b10a      	cbz	r2, 8007ed2 <_vfiprintf_r+0xa2>
 8007ece:	2a25      	cmp	r2, #37	; 0x25
 8007ed0:	d1f9      	bne.n	8007ec6 <_vfiprintf_r+0x96>
 8007ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ed6:	d00b      	beq.n	8007ef0 <_vfiprintf_r+0xc0>
 8007ed8:	465b      	mov	r3, fp
 8007eda:	4622      	mov	r2, r4
 8007edc:	4629      	mov	r1, r5
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f7ff ff93 	bl	8007e0a <__sfputs_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f000 80aa 	beq.w	800803e <_vfiprintf_r+0x20e>
 8007eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eec:	445a      	add	r2, fp
 8007eee:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80a2 	beq.w	800803e <_vfiprintf_r+0x20e>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f04f 32ff 	mov.w	r2, #4294967295
 8007f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f04:	f10a 0a01 	add.w	sl, sl, #1
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	9307      	str	r3, [sp, #28]
 8007f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f10:	931a      	str	r3, [sp, #104]	; 0x68
 8007f12:	4654      	mov	r4, sl
 8007f14:	2205      	movs	r2, #5
 8007f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1a:	4858      	ldr	r0, [pc, #352]	; (800807c <_vfiprintf_r+0x24c>)
 8007f1c:	f7f8 f978 	bl	8000210 <memchr>
 8007f20:	9a04      	ldr	r2, [sp, #16]
 8007f22:	b9d8      	cbnz	r0, 8007f5c <_vfiprintf_r+0x12c>
 8007f24:	06d1      	lsls	r1, r2, #27
 8007f26:	bf44      	itt	mi
 8007f28:	2320      	movmi	r3, #32
 8007f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2e:	0713      	lsls	r3, r2, #28
 8007f30:	bf44      	itt	mi
 8007f32:	232b      	movmi	r3, #43	; 0x2b
 8007f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f38:	f89a 3000 	ldrb.w	r3, [sl]
 8007f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3e:	d015      	beq.n	8007f6c <_vfiprintf_r+0x13c>
 8007f40:	9a07      	ldr	r2, [sp, #28]
 8007f42:	4654      	mov	r4, sl
 8007f44:	2000      	movs	r0, #0
 8007f46:	f04f 0c0a 	mov.w	ip, #10
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f50:	3b30      	subs	r3, #48	; 0x30
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d94e      	bls.n	8007ff4 <_vfiprintf_r+0x1c4>
 8007f56:	b1b0      	cbz	r0, 8007f86 <_vfiprintf_r+0x156>
 8007f58:	9207      	str	r2, [sp, #28]
 8007f5a:	e014      	b.n	8007f86 <_vfiprintf_r+0x156>
 8007f5c:	eba0 0308 	sub.w	r3, r0, r8
 8007f60:	fa09 f303 	lsl.w	r3, r9, r3
 8007f64:	4313      	orrs	r3, r2
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	46a2      	mov	sl, r4
 8007f6a:	e7d2      	b.n	8007f12 <_vfiprintf_r+0xe2>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	1d19      	adds	r1, r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	9103      	str	r1, [sp, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bfbb      	ittet	lt
 8007f78:	425b      	neglt	r3, r3
 8007f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f7e:	9307      	strge	r3, [sp, #28]
 8007f80:	9307      	strlt	r3, [sp, #28]
 8007f82:	bfb8      	it	lt
 8007f84:	9204      	strlt	r2, [sp, #16]
 8007f86:	7823      	ldrb	r3, [r4, #0]
 8007f88:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8a:	d10c      	bne.n	8007fa6 <_vfiprintf_r+0x176>
 8007f8c:	7863      	ldrb	r3, [r4, #1]
 8007f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f90:	d135      	bne.n	8007ffe <_vfiprintf_r+0x1ce>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	1d1a      	adds	r2, r3, #4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	9203      	str	r2, [sp, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bfb8      	it	lt
 8007f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fa2:	3402      	adds	r4, #2
 8007fa4:	9305      	str	r3, [sp, #20]
 8007fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800808c <_vfiprintf_r+0x25c>
 8007faa:	7821      	ldrb	r1, [r4, #0]
 8007fac:	2203      	movs	r2, #3
 8007fae:	4650      	mov	r0, sl
 8007fb0:	f7f8 f92e 	bl	8000210 <memchr>
 8007fb4:	b140      	cbz	r0, 8007fc8 <_vfiprintf_r+0x198>
 8007fb6:	2340      	movs	r3, #64	; 0x40
 8007fb8:	eba0 000a 	sub.w	r0, r0, sl
 8007fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8007fc0:	9b04      	ldr	r3, [sp, #16]
 8007fc2:	4303      	orrs	r3, r0
 8007fc4:	3401      	adds	r4, #1
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fcc:	482c      	ldr	r0, [pc, #176]	; (8008080 <_vfiprintf_r+0x250>)
 8007fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fd2:	2206      	movs	r2, #6
 8007fd4:	f7f8 f91c 	bl	8000210 <memchr>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d03f      	beq.n	800805c <_vfiprintf_r+0x22c>
 8007fdc:	4b29      	ldr	r3, [pc, #164]	; (8008084 <_vfiprintf_r+0x254>)
 8007fde:	bb1b      	cbnz	r3, 8008028 <_vfiprintf_r+0x1f8>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	3308      	adds	r3, #8
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fee:	443b      	add	r3, r7
 8007ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff2:	e767      	b.n	8007ec4 <_vfiprintf_r+0x94>
 8007ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	e7a5      	b.n	8007f4a <_vfiprintf_r+0x11a>
 8007ffe:	2300      	movs	r3, #0
 8008000:	3401      	adds	r4, #1
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	4619      	mov	r1, r3
 8008006:	f04f 0c0a 	mov.w	ip, #10
 800800a:	4620      	mov	r0, r4
 800800c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008010:	3a30      	subs	r2, #48	; 0x30
 8008012:	2a09      	cmp	r2, #9
 8008014:	d903      	bls.n	800801e <_vfiprintf_r+0x1ee>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0c5      	beq.n	8007fa6 <_vfiprintf_r+0x176>
 800801a:	9105      	str	r1, [sp, #20]
 800801c:	e7c3      	b.n	8007fa6 <_vfiprintf_r+0x176>
 800801e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008022:	4604      	mov	r4, r0
 8008024:	2301      	movs	r3, #1
 8008026:	e7f0      	b.n	800800a <_vfiprintf_r+0x1da>
 8008028:	ab03      	add	r3, sp, #12
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	462a      	mov	r2, r5
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <_vfiprintf_r+0x258>)
 8008030:	a904      	add	r1, sp, #16
 8008032:	4630      	mov	r0, r6
 8008034:	f000 f8cc 	bl	80081d0 <_printf_float>
 8008038:	4607      	mov	r7, r0
 800803a:	1c78      	adds	r0, r7, #1
 800803c:	d1d6      	bne.n	8007fec <_vfiprintf_r+0x1bc>
 800803e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008040:	07d9      	lsls	r1, r3, #31
 8008042:	d405      	bmi.n	8008050 <_vfiprintf_r+0x220>
 8008044:	89ab      	ldrh	r3, [r5, #12]
 8008046:	059a      	lsls	r2, r3, #22
 8008048:	d402      	bmi.n	8008050 <_vfiprintf_r+0x220>
 800804a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800804c:	f001 fe21 	bl	8009c92 <__retarget_lock_release_recursive>
 8008050:	89ab      	ldrh	r3, [r5, #12]
 8008052:	065b      	lsls	r3, r3, #25
 8008054:	f53f af12 	bmi.w	8007e7c <_vfiprintf_r+0x4c>
 8008058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800805a:	e711      	b.n	8007e80 <_vfiprintf_r+0x50>
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	462a      	mov	r2, r5
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <_vfiprintf_r+0x258>)
 8008064:	a904      	add	r1, sp, #16
 8008066:	4630      	mov	r0, r6
 8008068:	f000 fb56 	bl	8008718 <_printf_i>
 800806c:	e7e4      	b.n	8008038 <_vfiprintf_r+0x208>
 800806e:	bf00      	nop
 8008070:	0800d650 	.word	0x0800d650
 8008074:	0800d670 	.word	0x0800d670
 8008078:	0800d630 	.word	0x0800d630
 800807c:	0800d460 	.word	0x0800d460
 8008080:	0800d46a 	.word	0x0800d46a
 8008084:	080081d1 	.word	0x080081d1
 8008088:	08007e0b 	.word	0x08007e0b
 800808c:	0800d466 	.word	0x0800d466

08008090 <__cvt>:
 8008090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	ec55 4b10 	vmov	r4, r5, d0
 8008098:	2d00      	cmp	r5, #0
 800809a:	460e      	mov	r6, r1
 800809c:	4619      	mov	r1, r3
 800809e:	462b      	mov	r3, r5
 80080a0:	bfbb      	ittet	lt
 80080a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080a6:	461d      	movlt	r5, r3
 80080a8:	2300      	movge	r3, #0
 80080aa:	232d      	movlt	r3, #45	; 0x2d
 80080ac:	700b      	strb	r3, [r1, #0]
 80080ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080b4:	4691      	mov	r9, r2
 80080b6:	f023 0820 	bic.w	r8, r3, #32
 80080ba:	bfbc      	itt	lt
 80080bc:	4622      	movlt	r2, r4
 80080be:	4614      	movlt	r4, r2
 80080c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080c4:	d005      	beq.n	80080d2 <__cvt+0x42>
 80080c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ca:	d100      	bne.n	80080ce <__cvt+0x3e>
 80080cc:	3601      	adds	r6, #1
 80080ce:	2102      	movs	r1, #2
 80080d0:	e000      	b.n	80080d4 <__cvt+0x44>
 80080d2:	2103      	movs	r1, #3
 80080d4:	ab03      	add	r3, sp, #12
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	ab02      	add	r3, sp, #8
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	ec45 4b10 	vmov	d0, r4, r5
 80080e0:	4653      	mov	r3, sl
 80080e2:	4632      	mov	r2, r6
 80080e4:	f000 fe28 	bl	8008d38 <_dtoa_r>
 80080e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080ec:	4607      	mov	r7, r0
 80080ee:	d102      	bne.n	80080f6 <__cvt+0x66>
 80080f0:	f019 0f01 	tst.w	r9, #1
 80080f4:	d022      	beq.n	800813c <__cvt+0xac>
 80080f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080fa:	eb07 0906 	add.w	r9, r7, r6
 80080fe:	d110      	bne.n	8008122 <__cvt+0x92>
 8008100:	783b      	ldrb	r3, [r7, #0]
 8008102:	2b30      	cmp	r3, #48	; 0x30
 8008104:	d10a      	bne.n	800811c <__cvt+0x8c>
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 fcf3 	bl	8000af8 <__aeabi_dcmpeq>
 8008112:	b918      	cbnz	r0, 800811c <__cvt+0x8c>
 8008114:	f1c6 0601 	rsb	r6, r6, #1
 8008118:	f8ca 6000 	str.w	r6, [sl]
 800811c:	f8da 3000 	ldr.w	r3, [sl]
 8008120:	4499      	add	r9, r3
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fce5 	bl	8000af8 <__aeabi_dcmpeq>
 800812e:	b108      	cbz	r0, 8008134 <__cvt+0xa4>
 8008130:	f8cd 900c 	str.w	r9, [sp, #12]
 8008134:	2230      	movs	r2, #48	; 0x30
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	454b      	cmp	r3, r9
 800813a:	d307      	bcc.n	800814c <__cvt+0xbc>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008140:	1bdb      	subs	r3, r3, r7
 8008142:	4638      	mov	r0, r7
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	b004      	add	sp, #16
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	1c59      	adds	r1, r3, #1
 800814e:	9103      	str	r1, [sp, #12]
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e7f0      	b.n	8008136 <__cvt+0xa6>

08008154 <__exponent>:
 8008154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008156:	4603      	mov	r3, r0
 8008158:	2900      	cmp	r1, #0
 800815a:	bfb8      	it	lt
 800815c:	4249      	neglt	r1, r1
 800815e:	f803 2b02 	strb.w	r2, [r3], #2
 8008162:	bfb4      	ite	lt
 8008164:	222d      	movlt	r2, #45	; 0x2d
 8008166:	222b      	movge	r2, #43	; 0x2b
 8008168:	2909      	cmp	r1, #9
 800816a:	7042      	strb	r2, [r0, #1]
 800816c:	dd2a      	ble.n	80081c4 <__exponent+0x70>
 800816e:	f10d 0407 	add.w	r4, sp, #7
 8008172:	46a4      	mov	ip, r4
 8008174:	270a      	movs	r7, #10
 8008176:	46a6      	mov	lr, r4
 8008178:	460a      	mov	r2, r1
 800817a:	fb91 f6f7 	sdiv	r6, r1, r7
 800817e:	fb07 1516 	mls	r5, r7, r6, r1
 8008182:	3530      	adds	r5, #48	; 0x30
 8008184:	2a63      	cmp	r2, #99	; 0x63
 8008186:	f104 34ff 	add.w	r4, r4, #4294967295
 800818a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800818e:	4631      	mov	r1, r6
 8008190:	dcf1      	bgt.n	8008176 <__exponent+0x22>
 8008192:	3130      	adds	r1, #48	; 0x30
 8008194:	f1ae 0502 	sub.w	r5, lr, #2
 8008198:	f804 1c01 	strb.w	r1, [r4, #-1]
 800819c:	1c44      	adds	r4, r0, #1
 800819e:	4629      	mov	r1, r5
 80081a0:	4561      	cmp	r1, ip
 80081a2:	d30a      	bcc.n	80081ba <__exponent+0x66>
 80081a4:	f10d 0209 	add.w	r2, sp, #9
 80081a8:	eba2 020e 	sub.w	r2, r2, lr
 80081ac:	4565      	cmp	r5, ip
 80081ae:	bf88      	it	hi
 80081b0:	2200      	movhi	r2, #0
 80081b2:	4413      	add	r3, r2
 80081b4:	1a18      	subs	r0, r3, r0
 80081b6:	b003      	add	sp, #12
 80081b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081c2:	e7ed      	b.n	80081a0 <__exponent+0x4c>
 80081c4:	2330      	movs	r3, #48	; 0x30
 80081c6:	3130      	adds	r1, #48	; 0x30
 80081c8:	7083      	strb	r3, [r0, #2]
 80081ca:	70c1      	strb	r1, [r0, #3]
 80081cc:	1d03      	adds	r3, r0, #4
 80081ce:	e7f1      	b.n	80081b4 <__exponent+0x60>

080081d0 <_printf_float>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	ed2d 8b02 	vpush	{d8}
 80081d8:	b08d      	sub	sp, #52	; 0x34
 80081da:	460c      	mov	r4, r1
 80081dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081e0:	4616      	mov	r6, r2
 80081e2:	461f      	mov	r7, r3
 80081e4:	4605      	mov	r5, r0
 80081e6:	f001 fd4d 	bl	8009c84 <_localeconv_r>
 80081ea:	f8d0 a000 	ldr.w	sl, [r0]
 80081ee:	4650      	mov	r0, sl
 80081f0:	f7f8 f800 	bl	80001f4 <strlen>
 80081f4:	2300      	movs	r3, #0
 80081f6:	930a      	str	r3, [sp, #40]	; 0x28
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008200:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008204:	3307      	adds	r3, #7
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	f103 0208 	add.w	r2, r3, #8
 800820e:	f8c8 2000 	str.w	r2, [r8]
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800821a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800821e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008222:	9307      	str	r3, [sp, #28]
 8008224:	f8cd 8018 	str.w	r8, [sp, #24]
 8008228:	ee08 0a10 	vmov	s16, r0
 800822c:	4b9f      	ldr	r3, [pc, #636]	; (80084ac <_printf_float+0x2dc>)
 800822e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008232:	f04f 32ff 	mov.w	r2, #4294967295
 8008236:	f7f8 fc91 	bl	8000b5c <__aeabi_dcmpun>
 800823a:	bb88      	cbnz	r0, 80082a0 <_printf_float+0xd0>
 800823c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008240:	4b9a      	ldr	r3, [pc, #616]	; (80084ac <_printf_float+0x2dc>)
 8008242:	f04f 32ff 	mov.w	r2, #4294967295
 8008246:	f7f8 fc6b 	bl	8000b20 <__aeabi_dcmple>
 800824a:	bb48      	cbnz	r0, 80082a0 <_printf_float+0xd0>
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 fc5a 	bl	8000b0c <__aeabi_dcmplt>
 8008258:	b110      	cbz	r0, 8008260 <_printf_float+0x90>
 800825a:	232d      	movs	r3, #45	; 0x2d
 800825c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008260:	4b93      	ldr	r3, [pc, #588]	; (80084b0 <_printf_float+0x2e0>)
 8008262:	4894      	ldr	r0, [pc, #592]	; (80084b4 <_printf_float+0x2e4>)
 8008264:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008268:	bf94      	ite	ls
 800826a:	4698      	movls	r8, r3
 800826c:	4680      	movhi	r8, r0
 800826e:	2303      	movs	r3, #3
 8008270:	6123      	str	r3, [r4, #16]
 8008272:	9b05      	ldr	r3, [sp, #20]
 8008274:	f023 0204 	bic.w	r2, r3, #4
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	f04f 0900 	mov.w	r9, #0
 800827e:	9700      	str	r7, [sp, #0]
 8008280:	4633      	mov	r3, r6
 8008282:	aa0b      	add	r2, sp, #44	; 0x2c
 8008284:	4621      	mov	r1, r4
 8008286:	4628      	mov	r0, r5
 8008288:	f000 f9d8 	bl	800863c <_printf_common>
 800828c:	3001      	adds	r0, #1
 800828e:	f040 8090 	bne.w	80083b2 <_printf_float+0x1e2>
 8008292:	f04f 30ff 	mov.w	r0, #4294967295
 8008296:	b00d      	add	sp, #52	; 0x34
 8008298:	ecbd 8b02 	vpop	{d8}
 800829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a0:	4642      	mov	r2, r8
 80082a2:	464b      	mov	r3, r9
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 fc58 	bl	8000b5c <__aeabi_dcmpun>
 80082ac:	b140      	cbz	r0, 80082c0 <_printf_float+0xf0>
 80082ae:	464b      	mov	r3, r9
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfbc      	itt	lt
 80082b4:	232d      	movlt	r3, #45	; 0x2d
 80082b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082ba:	487f      	ldr	r0, [pc, #508]	; (80084b8 <_printf_float+0x2e8>)
 80082bc:	4b7f      	ldr	r3, [pc, #508]	; (80084bc <_printf_float+0x2ec>)
 80082be:	e7d1      	b.n	8008264 <_printf_float+0x94>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082c6:	9206      	str	r2, [sp, #24]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	d13f      	bne.n	800834c <_printf_float+0x17c>
 80082cc:	2306      	movs	r3, #6
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	6861      	ldr	r1, [r4, #4]
 80082d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082d8:	2300      	movs	r3, #0
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	ab0a      	add	r3, sp, #40	; 0x28
 80082de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082e2:	ab09      	add	r3, sp, #36	; 0x24
 80082e4:	ec49 8b10 	vmov	d0, r8, r9
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	6022      	str	r2, [r4, #0]
 80082ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082f0:	4628      	mov	r0, r5
 80082f2:	f7ff fecd 	bl	8008090 <__cvt>
 80082f6:	9b06      	ldr	r3, [sp, #24]
 80082f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082fa:	2b47      	cmp	r3, #71	; 0x47
 80082fc:	4680      	mov	r8, r0
 80082fe:	d108      	bne.n	8008312 <_printf_float+0x142>
 8008300:	1cc8      	adds	r0, r1, #3
 8008302:	db02      	blt.n	800830a <_printf_float+0x13a>
 8008304:	6863      	ldr	r3, [r4, #4]
 8008306:	4299      	cmp	r1, r3
 8008308:	dd41      	ble.n	800838e <_printf_float+0x1be>
 800830a:	f1ab 0b02 	sub.w	fp, fp, #2
 800830e:	fa5f fb8b 	uxtb.w	fp, fp
 8008312:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008316:	d820      	bhi.n	800835a <_printf_float+0x18a>
 8008318:	3901      	subs	r1, #1
 800831a:	465a      	mov	r2, fp
 800831c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008320:	9109      	str	r1, [sp, #36]	; 0x24
 8008322:	f7ff ff17 	bl	8008154 <__exponent>
 8008326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008328:	1813      	adds	r3, r2, r0
 800832a:	2a01      	cmp	r2, #1
 800832c:	4681      	mov	r9, r0
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	dc02      	bgt.n	8008338 <_printf_float+0x168>
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	07d2      	lsls	r2, r2, #31
 8008336:	d501      	bpl.n	800833c <_printf_float+0x16c>
 8008338:	3301      	adds	r3, #1
 800833a:	6123      	str	r3, [r4, #16]
 800833c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008340:	2b00      	cmp	r3, #0
 8008342:	d09c      	beq.n	800827e <_printf_float+0xae>
 8008344:	232d      	movs	r3, #45	; 0x2d
 8008346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834a:	e798      	b.n	800827e <_printf_float+0xae>
 800834c:	9a06      	ldr	r2, [sp, #24]
 800834e:	2a47      	cmp	r2, #71	; 0x47
 8008350:	d1be      	bne.n	80082d0 <_printf_float+0x100>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1bc      	bne.n	80082d0 <_printf_float+0x100>
 8008356:	2301      	movs	r3, #1
 8008358:	e7b9      	b.n	80082ce <_printf_float+0xfe>
 800835a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800835e:	d118      	bne.n	8008392 <_printf_float+0x1c2>
 8008360:	2900      	cmp	r1, #0
 8008362:	6863      	ldr	r3, [r4, #4]
 8008364:	dd0b      	ble.n	800837e <_printf_float+0x1ae>
 8008366:	6121      	str	r1, [r4, #16]
 8008368:	b913      	cbnz	r3, 8008370 <_printf_float+0x1a0>
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	07d0      	lsls	r0, r2, #31
 800836e:	d502      	bpl.n	8008376 <_printf_float+0x1a6>
 8008370:	3301      	adds	r3, #1
 8008372:	440b      	add	r3, r1
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	65a1      	str	r1, [r4, #88]	; 0x58
 8008378:	f04f 0900 	mov.w	r9, #0
 800837c:	e7de      	b.n	800833c <_printf_float+0x16c>
 800837e:	b913      	cbnz	r3, 8008386 <_printf_float+0x1b6>
 8008380:	6822      	ldr	r2, [r4, #0]
 8008382:	07d2      	lsls	r2, r2, #31
 8008384:	d501      	bpl.n	800838a <_printf_float+0x1ba>
 8008386:	3302      	adds	r3, #2
 8008388:	e7f4      	b.n	8008374 <_printf_float+0x1a4>
 800838a:	2301      	movs	r3, #1
 800838c:	e7f2      	b.n	8008374 <_printf_float+0x1a4>
 800838e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008394:	4299      	cmp	r1, r3
 8008396:	db05      	blt.n	80083a4 <_printf_float+0x1d4>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	6121      	str	r1, [r4, #16]
 800839c:	07d8      	lsls	r0, r3, #31
 800839e:	d5ea      	bpl.n	8008376 <_printf_float+0x1a6>
 80083a0:	1c4b      	adds	r3, r1, #1
 80083a2:	e7e7      	b.n	8008374 <_printf_float+0x1a4>
 80083a4:	2900      	cmp	r1, #0
 80083a6:	bfd4      	ite	le
 80083a8:	f1c1 0202 	rsble	r2, r1, #2
 80083ac:	2201      	movgt	r2, #1
 80083ae:	4413      	add	r3, r2
 80083b0:	e7e0      	b.n	8008374 <_printf_float+0x1a4>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	055a      	lsls	r2, r3, #21
 80083b6:	d407      	bmi.n	80083c8 <_printf_float+0x1f8>
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	4642      	mov	r2, r8
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	d12c      	bne.n	8008420 <_printf_float+0x250>
 80083c6:	e764      	b.n	8008292 <_printf_float+0xc2>
 80083c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083cc:	f240 80e0 	bls.w	8008590 <_printf_float+0x3c0>
 80083d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	f7f8 fb8e 	bl	8000af8 <__aeabi_dcmpeq>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d034      	beq.n	800844a <_printf_float+0x27a>
 80083e0:	4a37      	ldr	r2, [pc, #220]	; (80084c0 <_printf_float+0x2f0>)
 80083e2:	2301      	movs	r3, #1
 80083e4:	4631      	mov	r1, r6
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b8      	blx	r7
 80083ea:	3001      	adds	r0, #1
 80083ec:	f43f af51 	beq.w	8008292 <_printf_float+0xc2>
 80083f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f4:	429a      	cmp	r2, r3
 80083f6:	db02      	blt.n	80083fe <_printf_float+0x22e>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	07d8      	lsls	r0, r3, #31
 80083fc:	d510      	bpl.n	8008420 <_printf_float+0x250>
 80083fe:	ee18 3a10 	vmov	r3, s16
 8008402:	4652      	mov	r2, sl
 8008404:	4631      	mov	r1, r6
 8008406:	4628      	mov	r0, r5
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	f43f af41 	beq.w	8008292 <_printf_float+0xc2>
 8008410:	f04f 0800 	mov.w	r8, #0
 8008414:	f104 091a 	add.w	r9, r4, #26
 8008418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841a:	3b01      	subs	r3, #1
 800841c:	4543      	cmp	r3, r8
 800841e:	dc09      	bgt.n	8008434 <_printf_float+0x264>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	079b      	lsls	r3, r3, #30
 8008424:	f100 8105 	bmi.w	8008632 <_printf_float+0x462>
 8008428:	68e0      	ldr	r0, [r4, #12]
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	4298      	cmp	r0, r3
 800842e:	bfb8      	it	lt
 8008430:	4618      	movlt	r0, r3
 8008432:	e730      	b.n	8008296 <_printf_float+0xc6>
 8008434:	2301      	movs	r3, #1
 8008436:	464a      	mov	r2, r9
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f af27 	beq.w	8008292 <_printf_float+0xc2>
 8008444:	f108 0801 	add.w	r8, r8, #1
 8008448:	e7e6      	b.n	8008418 <_printf_float+0x248>
 800844a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	dc39      	bgt.n	80084c4 <_printf_float+0x2f4>
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <_printf_float+0x2f0>)
 8008452:	2301      	movs	r3, #1
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f af19 	beq.w	8008292 <_printf_float+0xc2>
 8008460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008464:	4313      	orrs	r3, r2
 8008466:	d102      	bne.n	800846e <_printf_float+0x29e>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	07d9      	lsls	r1, r3, #31
 800846c:	d5d8      	bpl.n	8008420 <_printf_float+0x250>
 800846e:	ee18 3a10 	vmov	r3, s16
 8008472:	4652      	mov	r2, sl
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f af09 	beq.w	8008292 <_printf_float+0xc2>
 8008480:	f04f 0900 	mov.w	r9, #0
 8008484:	f104 0a1a 	add.w	sl, r4, #26
 8008488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848a:	425b      	negs	r3, r3
 800848c:	454b      	cmp	r3, r9
 800848e:	dc01      	bgt.n	8008494 <_printf_float+0x2c4>
 8008490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008492:	e792      	b.n	80083ba <_printf_float+0x1ea>
 8008494:	2301      	movs	r3, #1
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f aef7 	beq.w	8008292 <_printf_float+0xc2>
 80084a4:	f109 0901 	add.w	r9, r9, #1
 80084a8:	e7ee      	b.n	8008488 <_printf_float+0x2b8>
 80084aa:	bf00      	nop
 80084ac:	7fefffff 	.word	0x7fefffff
 80084b0:	0800d471 	.word	0x0800d471
 80084b4:	0800d475 	.word	0x0800d475
 80084b8:	0800d47d 	.word	0x0800d47d
 80084bc:	0800d479 	.word	0x0800d479
 80084c0:	0800bb23 	.word	0x0800bb23
 80084c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084c8:	429a      	cmp	r2, r3
 80084ca:	bfa8      	it	ge
 80084cc:	461a      	movge	r2, r3
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	4691      	mov	r9, r2
 80084d2:	dc37      	bgt.n	8008544 <_printf_float+0x374>
 80084d4:	f04f 0b00 	mov.w	fp, #0
 80084d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084dc:	f104 021a 	add.w	r2, r4, #26
 80084e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084e2:	9305      	str	r3, [sp, #20]
 80084e4:	eba3 0309 	sub.w	r3, r3, r9
 80084e8:	455b      	cmp	r3, fp
 80084ea:	dc33      	bgt.n	8008554 <_printf_float+0x384>
 80084ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f0:	429a      	cmp	r2, r3
 80084f2:	db3b      	blt.n	800856c <_printf_float+0x39c>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	07da      	lsls	r2, r3, #31
 80084f8:	d438      	bmi.n	800856c <_printf_float+0x39c>
 80084fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fc:	9a05      	ldr	r2, [sp, #20]
 80084fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008500:	1a9a      	subs	r2, r3, r2
 8008502:	eba3 0901 	sub.w	r9, r3, r1
 8008506:	4591      	cmp	r9, r2
 8008508:	bfa8      	it	ge
 800850a:	4691      	movge	r9, r2
 800850c:	f1b9 0f00 	cmp.w	r9, #0
 8008510:	dc35      	bgt.n	800857e <_printf_float+0x3ae>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800851a:	f104 0a1a 	add.w	sl, r4, #26
 800851e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	eba3 0309 	sub.w	r3, r3, r9
 8008528:	4543      	cmp	r3, r8
 800852a:	f77f af79 	ble.w	8008420 <_printf_float+0x250>
 800852e:	2301      	movs	r3, #1
 8008530:	4652      	mov	r2, sl
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	f43f aeaa 	beq.w	8008292 <_printf_float+0xc2>
 800853e:	f108 0801 	add.w	r8, r8, #1
 8008542:	e7ec      	b.n	800851e <_printf_float+0x34e>
 8008544:	4613      	mov	r3, r2
 8008546:	4631      	mov	r1, r6
 8008548:	4642      	mov	r2, r8
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	d1c0      	bne.n	80084d4 <_printf_float+0x304>
 8008552:	e69e      	b.n	8008292 <_printf_float+0xc2>
 8008554:	2301      	movs	r3, #1
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	9205      	str	r2, [sp, #20]
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f ae97 	beq.w	8008292 <_printf_float+0xc2>
 8008564:	9a05      	ldr	r2, [sp, #20]
 8008566:	f10b 0b01 	add.w	fp, fp, #1
 800856a:	e7b9      	b.n	80084e0 <_printf_float+0x310>
 800856c:	ee18 3a10 	vmov	r3, s16
 8008570:	4652      	mov	r2, sl
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	d1be      	bne.n	80084fa <_printf_float+0x32a>
 800857c:	e689      	b.n	8008292 <_printf_float+0xc2>
 800857e:	9a05      	ldr	r2, [sp, #20]
 8008580:	464b      	mov	r3, r9
 8008582:	4442      	add	r2, r8
 8008584:	4631      	mov	r1, r6
 8008586:	4628      	mov	r0, r5
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	d1c1      	bne.n	8008512 <_printf_float+0x342>
 800858e:	e680      	b.n	8008292 <_printf_float+0xc2>
 8008590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008592:	2a01      	cmp	r2, #1
 8008594:	dc01      	bgt.n	800859a <_printf_float+0x3ca>
 8008596:	07db      	lsls	r3, r3, #31
 8008598:	d538      	bpl.n	800860c <_printf_float+0x43c>
 800859a:	2301      	movs	r3, #1
 800859c:	4642      	mov	r2, r8
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f ae74 	beq.w	8008292 <_printf_float+0xc2>
 80085aa:	ee18 3a10 	vmov	r3, s16
 80085ae:	4652      	mov	r2, sl
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f ae6b 	beq.w	8008292 <_printf_float+0xc2>
 80085bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	f7f8 fa98 	bl	8000af8 <__aeabi_dcmpeq>
 80085c8:	b9d8      	cbnz	r0, 8008602 <_printf_float+0x432>
 80085ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085cc:	f108 0201 	add.w	r2, r8, #1
 80085d0:	3b01      	subs	r3, #1
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b8      	blx	r7
 80085d8:	3001      	adds	r0, #1
 80085da:	d10e      	bne.n	80085fa <_printf_float+0x42a>
 80085dc:	e659      	b.n	8008292 <_printf_float+0xc2>
 80085de:	2301      	movs	r3, #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	4631      	mov	r1, r6
 80085e4:	4628      	mov	r0, r5
 80085e6:	47b8      	blx	r7
 80085e8:	3001      	adds	r0, #1
 80085ea:	f43f ae52 	beq.w	8008292 <_printf_float+0xc2>
 80085ee:	f108 0801 	add.w	r8, r8, #1
 80085f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4543      	cmp	r3, r8
 80085f8:	dcf1      	bgt.n	80085de <_printf_float+0x40e>
 80085fa:	464b      	mov	r3, r9
 80085fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008600:	e6dc      	b.n	80083bc <_printf_float+0x1ec>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	f104 0a1a 	add.w	sl, r4, #26
 800860a:	e7f2      	b.n	80085f2 <_printf_float+0x422>
 800860c:	2301      	movs	r3, #1
 800860e:	4642      	mov	r2, r8
 8008610:	e7df      	b.n	80085d2 <_printf_float+0x402>
 8008612:	2301      	movs	r3, #1
 8008614:	464a      	mov	r2, r9
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f ae38 	beq.w	8008292 <_printf_float+0xc2>
 8008622:	f108 0801 	add.w	r8, r8, #1
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800862a:	1a5b      	subs	r3, r3, r1
 800862c:	4543      	cmp	r3, r8
 800862e:	dcf0      	bgt.n	8008612 <_printf_float+0x442>
 8008630:	e6fa      	b.n	8008428 <_printf_float+0x258>
 8008632:	f04f 0800 	mov.w	r8, #0
 8008636:	f104 0919 	add.w	r9, r4, #25
 800863a:	e7f4      	b.n	8008626 <_printf_float+0x456>

0800863c <_printf_common>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	4616      	mov	r6, r2
 8008642:	4699      	mov	r9, r3
 8008644:	688a      	ldr	r2, [r1, #8]
 8008646:	690b      	ldr	r3, [r1, #16]
 8008648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800864c:	4293      	cmp	r3, r2
 800864e:	bfb8      	it	lt
 8008650:	4613      	movlt	r3, r2
 8008652:	6033      	str	r3, [r6, #0]
 8008654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008658:	4607      	mov	r7, r0
 800865a:	460c      	mov	r4, r1
 800865c:	b10a      	cbz	r2, 8008662 <_printf_common+0x26>
 800865e:	3301      	adds	r3, #1
 8008660:	6033      	str	r3, [r6, #0]
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	0699      	lsls	r1, r3, #26
 8008666:	bf42      	ittt	mi
 8008668:	6833      	ldrmi	r3, [r6, #0]
 800866a:	3302      	addmi	r3, #2
 800866c:	6033      	strmi	r3, [r6, #0]
 800866e:	6825      	ldr	r5, [r4, #0]
 8008670:	f015 0506 	ands.w	r5, r5, #6
 8008674:	d106      	bne.n	8008684 <_printf_common+0x48>
 8008676:	f104 0a19 	add.w	sl, r4, #25
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	6832      	ldr	r2, [r6, #0]
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	42ab      	cmp	r3, r5
 8008682:	dc26      	bgt.n	80086d2 <_printf_common+0x96>
 8008684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008688:	1e13      	subs	r3, r2, #0
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	bf18      	it	ne
 800868e:	2301      	movne	r3, #1
 8008690:	0692      	lsls	r2, r2, #26
 8008692:	d42b      	bmi.n	80086ec <_printf_common+0xb0>
 8008694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008698:	4649      	mov	r1, r9
 800869a:	4638      	mov	r0, r7
 800869c:	47c0      	blx	r8
 800869e:	3001      	adds	r0, #1
 80086a0:	d01e      	beq.n	80086e0 <_printf_common+0xa4>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	68e5      	ldr	r5, [r4, #12]
 80086a6:	6832      	ldr	r2, [r6, #0]
 80086a8:	f003 0306 	and.w	r3, r3, #6
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	bf08      	it	eq
 80086b0:	1aad      	subeq	r5, r5, r2
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	6922      	ldr	r2, [r4, #16]
 80086b6:	bf0c      	ite	eq
 80086b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086bc:	2500      	movne	r5, #0
 80086be:	4293      	cmp	r3, r2
 80086c0:	bfc4      	itt	gt
 80086c2:	1a9b      	subgt	r3, r3, r2
 80086c4:	18ed      	addgt	r5, r5, r3
 80086c6:	2600      	movs	r6, #0
 80086c8:	341a      	adds	r4, #26
 80086ca:	42b5      	cmp	r5, r6
 80086cc:	d11a      	bne.n	8008704 <_printf_common+0xc8>
 80086ce:	2000      	movs	r0, #0
 80086d0:	e008      	b.n	80086e4 <_printf_common+0xa8>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4652      	mov	r2, sl
 80086d6:	4649      	mov	r1, r9
 80086d8:	4638      	mov	r0, r7
 80086da:	47c0      	blx	r8
 80086dc:	3001      	adds	r0, #1
 80086de:	d103      	bne.n	80086e8 <_printf_common+0xac>
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	3501      	adds	r5, #1
 80086ea:	e7c6      	b.n	800867a <_printf_common+0x3e>
 80086ec:	18e1      	adds	r1, r4, r3
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	2030      	movs	r0, #48	; 0x30
 80086f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086f6:	4422      	add	r2, r4
 80086f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008700:	3302      	adds	r3, #2
 8008702:	e7c7      	b.n	8008694 <_printf_common+0x58>
 8008704:	2301      	movs	r3, #1
 8008706:	4622      	mov	r2, r4
 8008708:	4649      	mov	r1, r9
 800870a:	4638      	mov	r0, r7
 800870c:	47c0      	blx	r8
 800870e:	3001      	adds	r0, #1
 8008710:	d0e6      	beq.n	80086e0 <_printf_common+0xa4>
 8008712:	3601      	adds	r6, #1
 8008714:	e7d9      	b.n	80086ca <_printf_common+0x8e>
	...

08008718 <_printf_i>:
 8008718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	7e0f      	ldrb	r7, [r1, #24]
 800871e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008720:	2f78      	cmp	r7, #120	; 0x78
 8008722:	4691      	mov	r9, r2
 8008724:	4680      	mov	r8, r0
 8008726:	460c      	mov	r4, r1
 8008728:	469a      	mov	sl, r3
 800872a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800872e:	d807      	bhi.n	8008740 <_printf_i+0x28>
 8008730:	2f62      	cmp	r7, #98	; 0x62
 8008732:	d80a      	bhi.n	800874a <_printf_i+0x32>
 8008734:	2f00      	cmp	r7, #0
 8008736:	f000 80d8 	beq.w	80088ea <_printf_i+0x1d2>
 800873a:	2f58      	cmp	r7, #88	; 0x58
 800873c:	f000 80a3 	beq.w	8008886 <_printf_i+0x16e>
 8008740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008748:	e03a      	b.n	80087c0 <_printf_i+0xa8>
 800874a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800874e:	2b15      	cmp	r3, #21
 8008750:	d8f6      	bhi.n	8008740 <_printf_i+0x28>
 8008752:	a101      	add	r1, pc, #4	; (adr r1, 8008758 <_printf_i+0x40>)
 8008754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087c5 	.word	0x080087c5
 8008760:	08008741 	.word	0x08008741
 8008764:	08008741 	.word	0x08008741
 8008768:	08008741 	.word	0x08008741
 800876c:	08008741 	.word	0x08008741
 8008770:	080087c5 	.word	0x080087c5
 8008774:	08008741 	.word	0x08008741
 8008778:	08008741 	.word	0x08008741
 800877c:	08008741 	.word	0x08008741
 8008780:	08008741 	.word	0x08008741
 8008784:	080088d1 	.word	0x080088d1
 8008788:	080087f5 	.word	0x080087f5
 800878c:	080088b3 	.word	0x080088b3
 8008790:	08008741 	.word	0x08008741
 8008794:	08008741 	.word	0x08008741
 8008798:	080088f3 	.word	0x080088f3
 800879c:	08008741 	.word	0x08008741
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	08008741 	.word	0x08008741
 80087a8:	08008741 	.word	0x08008741
 80087ac:	080088bb 	.word	0x080088bb
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	602a      	str	r2, [r5, #0]
 80087b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c0:	2301      	movs	r3, #1
 80087c2:	e0a3      	b.n	800890c <_printf_i+0x1f4>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	6829      	ldr	r1, [r5, #0]
 80087c8:	0606      	lsls	r6, r0, #24
 80087ca:	f101 0304 	add.w	r3, r1, #4
 80087ce:	d50a      	bpl.n	80087e6 <_printf_i+0xce>
 80087d0:	680e      	ldr	r6, [r1, #0]
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	2e00      	cmp	r6, #0
 80087d6:	da03      	bge.n	80087e0 <_printf_i+0xc8>
 80087d8:	232d      	movs	r3, #45	; 0x2d
 80087da:	4276      	negs	r6, r6
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e0:	485e      	ldr	r0, [pc, #376]	; (800895c <_printf_i+0x244>)
 80087e2:	230a      	movs	r3, #10
 80087e4:	e019      	b.n	800881a <_printf_i+0x102>
 80087e6:	680e      	ldr	r6, [r1, #0]
 80087e8:	602b      	str	r3, [r5, #0]
 80087ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087ee:	bf18      	it	ne
 80087f0:	b236      	sxthne	r6, r6
 80087f2:	e7ef      	b.n	80087d4 <_printf_i+0xbc>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	1d19      	adds	r1, r3, #4
 80087fa:	6029      	str	r1, [r5, #0]
 80087fc:	0601      	lsls	r1, r0, #24
 80087fe:	d501      	bpl.n	8008804 <_printf_i+0xec>
 8008800:	681e      	ldr	r6, [r3, #0]
 8008802:	e002      	b.n	800880a <_printf_i+0xf2>
 8008804:	0646      	lsls	r6, r0, #25
 8008806:	d5fb      	bpl.n	8008800 <_printf_i+0xe8>
 8008808:	881e      	ldrh	r6, [r3, #0]
 800880a:	4854      	ldr	r0, [pc, #336]	; (800895c <_printf_i+0x244>)
 800880c:	2f6f      	cmp	r7, #111	; 0x6f
 800880e:	bf0c      	ite	eq
 8008810:	2308      	moveq	r3, #8
 8008812:	230a      	movne	r3, #10
 8008814:	2100      	movs	r1, #0
 8008816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881a:	6865      	ldr	r5, [r4, #4]
 800881c:	60a5      	str	r5, [r4, #8]
 800881e:	2d00      	cmp	r5, #0
 8008820:	bfa2      	ittt	ge
 8008822:	6821      	ldrge	r1, [r4, #0]
 8008824:	f021 0104 	bicge.w	r1, r1, #4
 8008828:	6021      	strge	r1, [r4, #0]
 800882a:	b90e      	cbnz	r6, 8008830 <_printf_i+0x118>
 800882c:	2d00      	cmp	r5, #0
 800882e:	d04d      	beq.n	80088cc <_printf_i+0x1b4>
 8008830:	4615      	mov	r5, r2
 8008832:	fbb6 f1f3 	udiv	r1, r6, r3
 8008836:	fb03 6711 	mls	r7, r3, r1, r6
 800883a:	5dc7      	ldrb	r7, [r0, r7]
 800883c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008840:	4637      	mov	r7, r6
 8008842:	42bb      	cmp	r3, r7
 8008844:	460e      	mov	r6, r1
 8008846:	d9f4      	bls.n	8008832 <_printf_i+0x11a>
 8008848:	2b08      	cmp	r3, #8
 800884a:	d10b      	bne.n	8008864 <_printf_i+0x14c>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	07de      	lsls	r6, r3, #31
 8008850:	d508      	bpl.n	8008864 <_printf_i+0x14c>
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	6861      	ldr	r1, [r4, #4]
 8008856:	4299      	cmp	r1, r3
 8008858:	bfde      	ittt	le
 800885a:	2330      	movle	r3, #48	; 0x30
 800885c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008864:	1b52      	subs	r2, r2, r5
 8008866:	6122      	str	r2, [r4, #16]
 8008868:	f8cd a000 	str.w	sl, [sp]
 800886c:	464b      	mov	r3, r9
 800886e:	aa03      	add	r2, sp, #12
 8008870:	4621      	mov	r1, r4
 8008872:	4640      	mov	r0, r8
 8008874:	f7ff fee2 	bl	800863c <_printf_common>
 8008878:	3001      	adds	r0, #1
 800887a:	d14c      	bne.n	8008916 <_printf_i+0x1fe>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	b004      	add	sp, #16
 8008882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008886:	4835      	ldr	r0, [pc, #212]	; (800895c <_printf_i+0x244>)
 8008888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800888c:	6829      	ldr	r1, [r5, #0]
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	f851 6b04 	ldr.w	r6, [r1], #4
 8008894:	6029      	str	r1, [r5, #0]
 8008896:	061d      	lsls	r5, r3, #24
 8008898:	d514      	bpl.n	80088c4 <_printf_i+0x1ac>
 800889a:	07df      	lsls	r7, r3, #31
 800889c:	bf44      	itt	mi
 800889e:	f043 0320 	orrmi.w	r3, r3, #32
 80088a2:	6023      	strmi	r3, [r4, #0]
 80088a4:	b91e      	cbnz	r6, 80088ae <_printf_i+0x196>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	f023 0320 	bic.w	r3, r3, #32
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	2310      	movs	r3, #16
 80088b0:	e7b0      	b.n	8008814 <_printf_i+0xfc>
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	f043 0320 	orr.w	r3, r3, #32
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	2378      	movs	r3, #120	; 0x78
 80088bc:	4828      	ldr	r0, [pc, #160]	; (8008960 <_printf_i+0x248>)
 80088be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088c2:	e7e3      	b.n	800888c <_printf_i+0x174>
 80088c4:	0659      	lsls	r1, r3, #25
 80088c6:	bf48      	it	mi
 80088c8:	b2b6      	uxthmi	r6, r6
 80088ca:	e7e6      	b.n	800889a <_printf_i+0x182>
 80088cc:	4615      	mov	r5, r2
 80088ce:	e7bb      	b.n	8008848 <_printf_i+0x130>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	6826      	ldr	r6, [r4, #0]
 80088d4:	6961      	ldr	r1, [r4, #20]
 80088d6:	1d18      	adds	r0, r3, #4
 80088d8:	6028      	str	r0, [r5, #0]
 80088da:	0635      	lsls	r5, r6, #24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	d501      	bpl.n	80088e4 <_printf_i+0x1cc>
 80088e0:	6019      	str	r1, [r3, #0]
 80088e2:	e002      	b.n	80088ea <_printf_i+0x1d2>
 80088e4:	0670      	lsls	r0, r6, #25
 80088e6:	d5fb      	bpl.n	80088e0 <_printf_i+0x1c8>
 80088e8:	8019      	strh	r1, [r3, #0]
 80088ea:	2300      	movs	r3, #0
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	4615      	mov	r5, r2
 80088f0:	e7ba      	b.n	8008868 <_printf_i+0x150>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	1d1a      	adds	r2, r3, #4
 80088f6:	602a      	str	r2, [r5, #0]
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	6862      	ldr	r2, [r4, #4]
 80088fc:	2100      	movs	r1, #0
 80088fe:	4628      	mov	r0, r5
 8008900:	f7f7 fc86 	bl	8000210 <memchr>
 8008904:	b108      	cbz	r0, 800890a <_printf_i+0x1f2>
 8008906:	1b40      	subs	r0, r0, r5
 8008908:	6060      	str	r0, [r4, #4]
 800890a:	6863      	ldr	r3, [r4, #4]
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	2300      	movs	r3, #0
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008914:	e7a8      	b.n	8008868 <_printf_i+0x150>
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	462a      	mov	r2, r5
 800891a:	4649      	mov	r1, r9
 800891c:	4640      	mov	r0, r8
 800891e:	47d0      	blx	sl
 8008920:	3001      	adds	r0, #1
 8008922:	d0ab      	beq.n	800887c <_printf_i+0x164>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	079b      	lsls	r3, r3, #30
 8008928:	d413      	bmi.n	8008952 <_printf_i+0x23a>
 800892a:	68e0      	ldr	r0, [r4, #12]
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	4298      	cmp	r0, r3
 8008930:	bfb8      	it	lt
 8008932:	4618      	movlt	r0, r3
 8008934:	e7a4      	b.n	8008880 <_printf_i+0x168>
 8008936:	2301      	movs	r3, #1
 8008938:	4632      	mov	r2, r6
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	47d0      	blx	sl
 8008940:	3001      	adds	r0, #1
 8008942:	d09b      	beq.n	800887c <_printf_i+0x164>
 8008944:	3501      	adds	r5, #1
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	9903      	ldr	r1, [sp, #12]
 800894a:	1a5b      	subs	r3, r3, r1
 800894c:	42ab      	cmp	r3, r5
 800894e:	dcf2      	bgt.n	8008936 <_printf_i+0x21e>
 8008950:	e7eb      	b.n	800892a <_printf_i+0x212>
 8008952:	2500      	movs	r5, #0
 8008954:	f104 0619 	add.w	r6, r4, #25
 8008958:	e7f5      	b.n	8008946 <_printf_i+0x22e>
 800895a:	bf00      	nop
 800895c:	0800d481 	.word	0x0800d481
 8008960:	0800d492 	.word	0x0800d492

08008964 <siprintf>:
 8008964:	b40e      	push	{r1, r2, r3}
 8008966:	b500      	push	{lr}
 8008968:	b09c      	sub	sp, #112	; 0x70
 800896a:	ab1d      	add	r3, sp, #116	; 0x74
 800896c:	9002      	str	r0, [sp, #8]
 800896e:	9006      	str	r0, [sp, #24]
 8008970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <siprintf+0x38>)
 8008976:	9107      	str	r1, [sp, #28]
 8008978:	9104      	str	r1, [sp, #16]
 800897a:	4909      	ldr	r1, [pc, #36]	; (80089a0 <siprintf+0x3c>)
 800897c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008980:	9105      	str	r1, [sp, #20]
 8008982:	6800      	ldr	r0, [r0, #0]
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	a902      	add	r1, sp, #8
 8008988:	f001 fef6 	bl	800a778 <_svfiprintf_r>
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	2200      	movs	r2, #0
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	b01c      	add	sp, #112	; 0x70
 8008994:	f85d eb04 	ldr.w	lr, [sp], #4
 8008998:	b003      	add	sp, #12
 800899a:	4770      	bx	lr
 800899c:	20000da0 	.word	0x20000da0
 80089a0:	ffff0208 	.word	0xffff0208

080089a4 <strncmp>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	b17a      	cbz	r2, 80089c8 <strncmp+0x24>
 80089a8:	4603      	mov	r3, r0
 80089aa:	3901      	subs	r1, #1
 80089ac:	1884      	adds	r4, r0, r2
 80089ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089b6:	4290      	cmp	r0, r2
 80089b8:	d101      	bne.n	80089be <strncmp+0x1a>
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	d101      	bne.n	80089c2 <strncmp+0x1e>
 80089be:	1a80      	subs	r0, r0, r2
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d1f3      	bne.n	80089ae <strncmp+0xa>
 80089c6:	e7fa      	b.n	80089be <strncmp+0x1a>
 80089c8:	4610      	mov	r0, r2
 80089ca:	e7f9      	b.n	80089c0 <strncmp+0x1c>

080089cc <__swbuf_r>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	460e      	mov	r6, r1
 80089d0:	4614      	mov	r4, r2
 80089d2:	4605      	mov	r5, r0
 80089d4:	b118      	cbz	r0, 80089de <__swbuf_r+0x12>
 80089d6:	6983      	ldr	r3, [r0, #24]
 80089d8:	b90b      	cbnz	r3, 80089de <__swbuf_r+0x12>
 80089da:	f001 f8b5 	bl	8009b48 <__sinit>
 80089de:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <__swbuf_r+0x98>)
 80089e0:	429c      	cmp	r4, r3
 80089e2:	d12b      	bne.n	8008a3c <__swbuf_r+0x70>
 80089e4:	686c      	ldr	r4, [r5, #4]
 80089e6:	69a3      	ldr	r3, [r4, #24]
 80089e8:	60a3      	str	r3, [r4, #8]
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	071a      	lsls	r2, r3, #28
 80089ee:	d52f      	bpl.n	8008a50 <__swbuf_r+0x84>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	b36b      	cbz	r3, 8008a50 <__swbuf_r+0x84>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	6820      	ldr	r0, [r4, #0]
 80089f8:	1ac0      	subs	r0, r0, r3
 80089fa:	6963      	ldr	r3, [r4, #20]
 80089fc:	b2f6      	uxtb	r6, r6
 80089fe:	4283      	cmp	r3, r0
 8008a00:	4637      	mov	r7, r6
 8008a02:	dc04      	bgt.n	8008a0e <__swbuf_r+0x42>
 8008a04:	4621      	mov	r1, r4
 8008a06:	4628      	mov	r0, r5
 8008a08:	f001 f80a 	bl	8009a20 <_fflush_r>
 8008a0c:	bb30      	cbnz	r0, 8008a5c <__swbuf_r+0x90>
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	60a3      	str	r3, [r4, #8]
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	6022      	str	r2, [r4, #0]
 8008a1a:	701e      	strb	r6, [r3, #0]
 8008a1c:	6963      	ldr	r3, [r4, #20]
 8008a1e:	3001      	adds	r0, #1
 8008a20:	4283      	cmp	r3, r0
 8008a22:	d004      	beq.n	8008a2e <__swbuf_r+0x62>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	07db      	lsls	r3, r3, #31
 8008a28:	d506      	bpl.n	8008a38 <__swbuf_r+0x6c>
 8008a2a:	2e0a      	cmp	r6, #10
 8008a2c:	d104      	bne.n	8008a38 <__swbuf_r+0x6c>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	f000 fff5 	bl	8009a20 <_fflush_r>
 8008a36:	b988      	cbnz	r0, 8008a5c <__swbuf_r+0x90>
 8008a38:	4638      	mov	r0, r7
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <__swbuf_r+0x9c>)
 8008a3e:	429c      	cmp	r4, r3
 8008a40:	d101      	bne.n	8008a46 <__swbuf_r+0x7a>
 8008a42:	68ac      	ldr	r4, [r5, #8]
 8008a44:	e7cf      	b.n	80089e6 <__swbuf_r+0x1a>
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <__swbuf_r+0xa0>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	bf08      	it	eq
 8008a4c:	68ec      	ldreq	r4, [r5, #12]
 8008a4e:	e7ca      	b.n	80089e6 <__swbuf_r+0x1a>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 f80c 	bl	8008a70 <__swsetup_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d0cb      	beq.n	80089f4 <__swbuf_r+0x28>
 8008a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a60:	e7ea      	b.n	8008a38 <__swbuf_r+0x6c>
 8008a62:	bf00      	nop
 8008a64:	0800d650 	.word	0x0800d650
 8008a68:	0800d670 	.word	0x0800d670
 8008a6c:	0800d630 	.word	0x0800d630

08008a70 <__swsetup_r>:
 8008a70:	4b32      	ldr	r3, [pc, #200]	; (8008b3c <__swsetup_r+0xcc>)
 8008a72:	b570      	push	{r4, r5, r6, lr}
 8008a74:	681d      	ldr	r5, [r3, #0]
 8008a76:	4606      	mov	r6, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	b125      	cbz	r5, 8008a86 <__swsetup_r+0x16>
 8008a7c:	69ab      	ldr	r3, [r5, #24]
 8008a7e:	b913      	cbnz	r3, 8008a86 <__swsetup_r+0x16>
 8008a80:	4628      	mov	r0, r5
 8008a82:	f001 f861 	bl	8009b48 <__sinit>
 8008a86:	4b2e      	ldr	r3, [pc, #184]	; (8008b40 <__swsetup_r+0xd0>)
 8008a88:	429c      	cmp	r4, r3
 8008a8a:	d10f      	bne.n	8008aac <__swsetup_r+0x3c>
 8008a8c:	686c      	ldr	r4, [r5, #4]
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a94:	0719      	lsls	r1, r3, #28
 8008a96:	d42c      	bmi.n	8008af2 <__swsetup_r+0x82>
 8008a98:	06dd      	lsls	r5, r3, #27
 8008a9a:	d411      	bmi.n	8008ac0 <__swsetup_r+0x50>
 8008a9c:	2309      	movs	r3, #9
 8008a9e:	6033      	str	r3, [r6, #0]
 8008aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aa4:	81a3      	strh	r3, [r4, #12]
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aaa:	e03e      	b.n	8008b2a <__swsetup_r+0xba>
 8008aac:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <__swsetup_r+0xd4>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <__swsetup_r+0x46>
 8008ab2:	68ac      	ldr	r4, [r5, #8]
 8008ab4:	e7eb      	b.n	8008a8e <__swsetup_r+0x1e>
 8008ab6:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <__swsetup_r+0xd8>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	bf08      	it	eq
 8008abc:	68ec      	ldreq	r4, [r5, #12]
 8008abe:	e7e6      	b.n	8008a8e <__swsetup_r+0x1e>
 8008ac0:	0758      	lsls	r0, r3, #29
 8008ac2:	d512      	bpl.n	8008aea <__swsetup_r+0x7a>
 8008ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac6:	b141      	cbz	r1, 8008ada <__swsetup_r+0x6a>
 8008ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008acc:	4299      	cmp	r1, r3
 8008ace:	d002      	beq.n	8008ad6 <__swsetup_r+0x66>
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f001 fce7 	bl	800a4a4 <_free_r>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	f043 0308 	orr.w	r3, r3, #8
 8008af0:	81a3      	strh	r3, [r4, #12]
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	b94b      	cbnz	r3, 8008b0a <__swsetup_r+0x9a>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b00:	d003      	beq.n	8008b0a <__swsetup_r+0x9a>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4630      	mov	r0, r6
 8008b06:	f001 f8eb 	bl	8009ce0 <__smakebuf_r>
 8008b0a:	89a0      	ldrh	r0, [r4, #12]
 8008b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b10:	f010 0301 	ands.w	r3, r0, #1
 8008b14:	d00a      	beq.n	8008b2c <__swsetup_r+0xbc>
 8008b16:	2300      	movs	r3, #0
 8008b18:	60a3      	str	r3, [r4, #8]
 8008b1a:	6963      	ldr	r3, [r4, #20]
 8008b1c:	425b      	negs	r3, r3
 8008b1e:	61a3      	str	r3, [r4, #24]
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	b943      	cbnz	r3, 8008b36 <__swsetup_r+0xc6>
 8008b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b28:	d1ba      	bne.n	8008aa0 <__swsetup_r+0x30>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	0781      	lsls	r1, r0, #30
 8008b2e:	bf58      	it	pl
 8008b30:	6963      	ldrpl	r3, [r4, #20]
 8008b32:	60a3      	str	r3, [r4, #8]
 8008b34:	e7f4      	b.n	8008b20 <__swsetup_r+0xb0>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e7f7      	b.n	8008b2a <__swsetup_r+0xba>
 8008b3a:	bf00      	nop
 8008b3c:	20000da0 	.word	0x20000da0
 8008b40:	0800d650 	.word	0x0800d650
 8008b44:	0800d670 	.word	0x0800d670
 8008b48:	0800d630 	.word	0x0800d630

08008b4c <__register_exitproc>:
 8008b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8008c0c <__register_exitproc+0xc0>
 8008b54:	4606      	mov	r6, r0
 8008b56:	f8d8 0000 	ldr.w	r0, [r8]
 8008b5a:	461f      	mov	r7, r3
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	4691      	mov	r9, r2
 8008b60:	f001 f895 	bl	8009c8e <__retarget_lock_acquire_recursive>
 8008b64:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <__register_exitproc+0xb0>)
 8008b66:	681c      	ldr	r4, [r3, #0]
 8008b68:	b934      	cbnz	r4, 8008b78 <__register_exitproc+0x2c>
 8008b6a:	4c25      	ldr	r4, [pc, #148]	; (8008c00 <__register_exitproc+0xb4>)
 8008b6c:	601c      	str	r4, [r3, #0]
 8008b6e:	4b25      	ldr	r3, [pc, #148]	; (8008c04 <__register_exitproc+0xb8>)
 8008b70:	b113      	cbz	r3, 8008b78 <__register_exitproc+0x2c>
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	2b1f      	cmp	r3, #31
 8008b7c:	dd07      	ble.n	8008b8e <__register_exitproc+0x42>
 8008b7e:	f8d8 0000 	ldr.w	r0, [r8]
 8008b82:	f001 f886 	bl	8009c92 <__retarget_lock_release_recursive>
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8e:	b34e      	cbz	r6, 8008be4 <__register_exitproc+0x98>
 8008b90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008b94:	b988      	cbnz	r0, 8008bba <__register_exitproc+0x6e>
 8008b96:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <__register_exitproc+0xbc>)
 8008b98:	b923      	cbnz	r3, 8008ba4 <__register_exitproc+0x58>
 8008b9a:	f8d8 0000 	ldr.w	r0, [r8]
 8008b9e:	f001 f877 	bl	8009c90 <__retarget_lock_release>
 8008ba2:	e7f0      	b.n	8008b86 <__register_exitproc+0x3a>
 8008ba4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008ba8:	f001 f8da 	bl	8009d60 <malloc>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d0f4      	beq.n	8008b9a <__register_exitproc+0x4e>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8008bb6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008bba:	6863      	ldr	r3, [r4, #4]
 8008bbc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	409a      	lsls	r2, r3
 8008bc4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008bc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008bd2:	2e02      	cmp	r6, #2
 8008bd4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8008bd8:	bf02      	ittt	eq
 8008bda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8008bde:	4313      	orreq	r3, r2
 8008be0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8008be4:	6863      	ldr	r3, [r4, #4]
 8008be6:	f8d8 0000 	ldr.w	r0, [r8]
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	3302      	adds	r3, #2
 8008bee:	6062      	str	r2, [r4, #4]
 8008bf0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8008bf4:	f001 f84d 	bl	8009c92 <__retarget_lock_release_recursive>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e7c6      	b.n	8008b8a <__register_exitproc+0x3e>
 8008bfc:	20001a40 	.word	0x20001a40
 8008c00:	200019b4 	.word	0x200019b4
 8008c04:	00000000 	.word	0x00000000
 8008c08:	08009d61 	.word	0x08009d61
 8008c0c:	20000e04 	.word	0x20000e04

08008c10 <abort>:
 8008c10:	b508      	push	{r3, lr}
 8008c12:	2006      	movs	r0, #6
 8008c14:	f001 fee8 	bl	800a9e8 <raise>
 8008c18:	2001      	movs	r0, #1
 8008c1a:	f002 f821 	bl	800ac60 <_exit>

08008c1e <quorem>:
 8008c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c22:	6903      	ldr	r3, [r0, #16]
 8008c24:	690c      	ldr	r4, [r1, #16]
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	4607      	mov	r7, r0
 8008c2a:	f2c0 8081 	blt.w	8008d30 <quorem+0x112>
 8008c2e:	3c01      	subs	r4, #1
 8008c30:	f101 0814 	add.w	r8, r1, #20
 8008c34:	f100 0514 	add.w	r5, r0, #20
 8008c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c46:	3301      	adds	r3, #1
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c52:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c56:	d331      	bcc.n	8008cbc <quorem+0x9e>
 8008c58:	f04f 0e00 	mov.w	lr, #0
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	46ac      	mov	ip, r5
 8008c60:	46f2      	mov	sl, lr
 8008c62:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c66:	b293      	uxth	r3, r2
 8008c68:	fb06 e303 	mla	r3, r6, r3, lr
 8008c6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ebaa 0303 	sub.w	r3, sl, r3
 8008c76:	f8dc a000 	ldr.w	sl, [ip]
 8008c7a:	0c12      	lsrs	r2, r2, #16
 8008c7c:	fa13 f38a 	uxtah	r3, r3, sl
 8008c80:	fb06 e202 	mla	r2, r6, r2, lr
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c8c:	b292      	uxth	r2, r2
 8008c8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c96:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c9a:	4581      	cmp	r9, r0
 8008c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ca0:	f84c 3b04 	str.w	r3, [ip], #4
 8008ca4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ca8:	d2db      	bcs.n	8008c62 <quorem+0x44>
 8008caa:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cae:	b92b      	cbnz	r3, 8008cbc <quorem+0x9e>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	429d      	cmp	r5, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	d32e      	bcc.n	8008d18 <quorem+0xfa>
 8008cba:	613c      	str	r4, [r7, #16]
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f001 fad9 	bl	800a274 <__mcmp>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	db24      	blt.n	8008d10 <quorem+0xf2>
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f04f 0c00 	mov.w	ip, #0
 8008cce:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cd2:	f8d0 e000 	ldr.w	lr, [r0]
 8008cd6:	b293      	uxth	r3, r2
 8008cd8:	ebac 0303 	sub.w	r3, ip, r3
 8008cdc:	0c12      	lsrs	r2, r2, #16
 8008cde:	fa13 f38e 	uxtah	r3, r3, lr
 8008ce2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ce6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cf0:	45c1      	cmp	r9, r8
 8008cf2:	f840 3b04 	str.w	r3, [r0], #4
 8008cf6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cfa:	d2e8      	bcs.n	8008cce <quorem+0xb0>
 8008cfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d04:	b922      	cbnz	r2, 8008d10 <quorem+0xf2>
 8008d06:	3b04      	subs	r3, #4
 8008d08:	429d      	cmp	r5, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	d30a      	bcc.n	8008d24 <quorem+0x106>
 8008d0e:	613c      	str	r4, [r7, #16]
 8008d10:	4630      	mov	r0, r6
 8008d12:	b003      	add	sp, #12
 8008d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	3b04      	subs	r3, #4
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	d1cc      	bne.n	8008cba <quorem+0x9c>
 8008d20:	3c01      	subs	r4, #1
 8008d22:	e7c7      	b.n	8008cb4 <quorem+0x96>
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	3b04      	subs	r3, #4
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d1f0      	bne.n	8008d0e <quorem+0xf0>
 8008d2c:	3c01      	subs	r4, #1
 8008d2e:	e7eb      	b.n	8008d08 <quorem+0xea>
 8008d30:	2000      	movs	r0, #0
 8008d32:	e7ee      	b.n	8008d12 <quorem+0xf4>
 8008d34:	0000      	movs	r0, r0
	...

08008d38 <_dtoa_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	ed2d 8b04 	vpush	{d8-d9}
 8008d40:	ec57 6b10 	vmov	r6, r7, d0
 8008d44:	b093      	sub	sp, #76	; 0x4c
 8008d46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d4c:	9106      	str	r1, [sp, #24]
 8008d4e:	ee10 aa10 	vmov	sl, s0
 8008d52:	4604      	mov	r4, r0
 8008d54:	9209      	str	r2, [sp, #36]	; 0x24
 8008d56:	930c      	str	r3, [sp, #48]	; 0x30
 8008d58:	46bb      	mov	fp, r7
 8008d5a:	b975      	cbnz	r5, 8008d7a <_dtoa_r+0x42>
 8008d5c:	2010      	movs	r0, #16
 8008d5e:	f000 ffff 	bl	8009d60 <malloc>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6260      	str	r0, [r4, #36]	; 0x24
 8008d66:	b920      	cbnz	r0, 8008d72 <_dtoa_r+0x3a>
 8008d68:	4ba7      	ldr	r3, [pc, #668]	; (8009008 <_dtoa_r+0x2d0>)
 8008d6a:	21ea      	movs	r1, #234	; 0xea
 8008d6c:	48a7      	ldr	r0, [pc, #668]	; (800900c <_dtoa_r+0x2d4>)
 8008d6e:	f7fe ffa5 	bl	8007cbc <__assert_func>
 8008d72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d76:	6005      	str	r5, [r0, #0]
 8008d78:	60c5      	str	r5, [r0, #12]
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	6819      	ldr	r1, [r3, #0]
 8008d7e:	b151      	cbz	r1, 8008d96 <_dtoa_r+0x5e>
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	604a      	str	r2, [r1, #4]
 8008d84:	2301      	movs	r3, #1
 8008d86:	4093      	lsls	r3, r2
 8008d88:	608b      	str	r3, [r1, #8]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f001 f830 	bl	8009df0 <_Bfree>
 8008d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	1e3b      	subs	r3, r7, #0
 8008d98:	bfaa      	itet	ge
 8008d9a:	2300      	movge	r3, #0
 8008d9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008da0:	f8c8 3000 	strge.w	r3, [r8]
 8008da4:	4b9a      	ldr	r3, [pc, #616]	; (8009010 <_dtoa_r+0x2d8>)
 8008da6:	bfbc      	itt	lt
 8008da8:	2201      	movlt	r2, #1
 8008daa:	f8c8 2000 	strlt.w	r2, [r8]
 8008dae:	ea33 030b 	bics.w	r3, r3, fp
 8008db2:	d11b      	bne.n	8008dec <_dtoa_r+0xb4>
 8008db4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008db6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dc0:	4333      	orrs	r3, r6
 8008dc2:	f000 8592 	beq.w	80098ea <_dtoa_r+0xbb2>
 8008dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc8:	b963      	cbnz	r3, 8008de4 <_dtoa_r+0xac>
 8008dca:	4b92      	ldr	r3, [pc, #584]	; (8009014 <_dtoa_r+0x2dc>)
 8008dcc:	e022      	b.n	8008e14 <_dtoa_r+0xdc>
 8008dce:	4b92      	ldr	r3, [pc, #584]	; (8009018 <_dtoa_r+0x2e0>)
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	b013      	add	sp, #76	; 0x4c
 8008ddc:	ecbd 8b04 	vpop	{d8-d9}
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de4:	4b8b      	ldr	r3, [pc, #556]	; (8009014 <_dtoa_r+0x2dc>)
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	3303      	adds	r3, #3
 8008dea:	e7f3      	b.n	8008dd4 <_dtoa_r+0x9c>
 8008dec:	2200      	movs	r2, #0
 8008dee:	2300      	movs	r3, #0
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	f7f7 fe80 	bl	8000af8 <__aeabi_dcmpeq>
 8008df8:	ec4b ab19 	vmov	d9, sl, fp
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	b158      	cbz	r0, 8008e18 <_dtoa_r+0xe0>
 8008e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e02:	2301      	movs	r3, #1
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 856b 	beq.w	80098e4 <_dtoa_r+0xbac>
 8008e0e:	4883      	ldr	r0, [pc, #524]	; (800901c <_dtoa_r+0x2e4>)
 8008e10:	6018      	str	r0, [r3, #0]
 8008e12:	1e43      	subs	r3, r0, #1
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	e7df      	b.n	8008dd8 <_dtoa_r+0xa0>
 8008e18:	ec4b ab10 	vmov	d0, sl, fp
 8008e1c:	aa10      	add	r2, sp, #64	; 0x40
 8008e1e:	a911      	add	r1, sp, #68	; 0x44
 8008e20:	4620      	mov	r0, r4
 8008e22:	f001 facd 	bl	800a3c0 <__d2b>
 8008e26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008e2a:	ee08 0a10 	vmov	s16, r0
 8008e2e:	2d00      	cmp	r5, #0
 8008e30:	f000 8084 	beq.w	8008f3c <_dtoa_r+0x204>
 8008e34:	ee19 3a90 	vmov	r3, s19
 8008e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e40:	4656      	mov	r6, sl
 8008e42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e4e:	4b74      	ldr	r3, [pc, #464]	; (8009020 <_dtoa_r+0x2e8>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fa2f 	bl	80002b8 <__aeabi_dsub>
 8008e5a:	a365      	add	r3, pc, #404	; (adr r3, 8008ff0 <_dtoa_r+0x2b8>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fbe2 	bl	8000628 <__aeabi_dmul>
 8008e64:	a364      	add	r3, pc, #400	; (adr r3, 8008ff8 <_dtoa_r+0x2c0>)
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f7f7 fa27 	bl	80002bc <__adddf3>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	4628      	mov	r0, r5
 8008e72:	460f      	mov	r7, r1
 8008e74:	f7f7 fb6e 	bl	8000554 <__aeabi_i2d>
 8008e78:	a361      	add	r3, pc, #388	; (adr r3, 8009000 <_dtoa_r+0x2c8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fbd3 	bl	8000628 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4630      	mov	r0, r6
 8008e88:	4639      	mov	r1, r7
 8008e8a:	f7f7 fa17 	bl	80002bc <__adddf3>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	f7f7 fe79 	bl	8000b88 <__aeabi_d2iz>
 8008e96:	2200      	movs	r2, #0
 8008e98:	9000      	str	r0, [sp, #0]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 fe34 	bl	8000b0c <__aeabi_dcmplt>
 8008ea4:	b150      	cbz	r0, 8008ebc <_dtoa_r+0x184>
 8008ea6:	9800      	ldr	r0, [sp, #0]
 8008ea8:	f7f7 fb54 	bl	8000554 <__aeabi_i2d>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	f7f7 fe22 	bl	8000af8 <__aeabi_dcmpeq>
 8008eb4:	b910      	cbnz	r0, 8008ebc <_dtoa_r+0x184>
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	2b16      	cmp	r3, #22
 8008ec0:	d85a      	bhi.n	8008f78 <_dtoa_r+0x240>
 8008ec2:	9a00      	ldr	r2, [sp, #0]
 8008ec4:	4b57      	ldr	r3, [pc, #348]	; (8009024 <_dtoa_r+0x2ec>)
 8008ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	ec51 0b19 	vmov	r0, r1, d9
 8008ed2:	f7f7 fe1b 	bl	8000b0c <__aeabi_dcmplt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d050      	beq.n	8008f7c <_dtoa_r+0x244>
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ee6:	1b5d      	subs	r5, r3, r5
 8008ee8:	1e6b      	subs	r3, r5, #1
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	bf45      	ittet	mi
 8008eee:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ef2:	9304      	strmi	r3, [sp, #16]
 8008ef4:	2300      	movpl	r3, #0
 8008ef6:	2300      	movmi	r3, #0
 8008ef8:	bf4c      	ite	mi
 8008efa:	9305      	strmi	r3, [sp, #20]
 8008efc:	9304      	strpl	r3, [sp, #16]
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	db3d      	blt.n	8008f80 <_dtoa_r+0x248>
 8008f04:	9b05      	ldr	r3, [sp, #20]
 8008f06:	9a00      	ldr	r2, [sp, #0]
 8008f08:	920a      	str	r2, [sp, #40]	; 0x28
 8008f0a:	4413      	add	r3, r2
 8008f0c:	9305      	str	r3, [sp, #20]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9307      	str	r3, [sp, #28]
 8008f12:	9b06      	ldr	r3, [sp, #24]
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	f200 8089 	bhi.w	800902c <_dtoa_r+0x2f4>
 8008f1a:	2b05      	cmp	r3, #5
 8008f1c:	bfc4      	itt	gt
 8008f1e:	3b04      	subgt	r3, #4
 8008f20:	9306      	strgt	r3, [sp, #24]
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	f1a3 0302 	sub.w	r3, r3, #2
 8008f28:	bfcc      	ite	gt
 8008f2a:	2500      	movgt	r5, #0
 8008f2c:	2501      	movle	r5, #1
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	f200 8087 	bhi.w	8009042 <_dtoa_r+0x30a>
 8008f34:	e8df f003 	tbb	[pc, r3]
 8008f38:	59383a2d 	.word	0x59383a2d
 8008f3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f40:	441d      	add	r5, r3
 8008f42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	bfc1      	itttt	gt
 8008f4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f52:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f5a:	bfda      	itte	le
 8008f5c:	f1c3 0320 	rsble	r3, r3, #32
 8008f60:	fa06 f003 	lslle.w	r0, r6, r3
 8008f64:	4318      	orrgt	r0, r3
 8008f66:	f7f7 fae5 	bl	8000534 <__aeabi_ui2d>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f72:	3d01      	subs	r5, #1
 8008f74:	930e      	str	r3, [sp, #56]	; 0x38
 8008f76:	e76a      	b.n	8008e4e <_dtoa_r+0x116>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e7b2      	b.n	8008ee2 <_dtoa_r+0x1aa>
 8008f7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f7e:	e7b1      	b.n	8008ee4 <_dtoa_r+0x1ac>
 8008f80:	9b04      	ldr	r3, [sp, #16]
 8008f82:	9a00      	ldr	r2, [sp, #0]
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	4253      	negs	r3, r2
 8008f8a:	9307      	str	r3, [sp, #28]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f90:	e7bf      	b.n	8008f12 <_dtoa_r+0x1da>
 8008f92:	2300      	movs	r3, #0
 8008f94:	9308      	str	r3, [sp, #32]
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dc55      	bgt.n	8009048 <_dtoa_r+0x310>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa6:	e00c      	b.n	8008fc2 <_dtoa_r+0x28a>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e7f3      	b.n	8008f94 <_dtoa_r+0x25c>
 8008fac:	2300      	movs	r3, #0
 8008fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb0:	9308      	str	r3, [sp, #32]
 8008fb2:	9b00      	ldr	r3, [sp, #0]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	9302      	str	r3, [sp, #8]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	bfb8      	it	lt
 8008fc0:	2301      	movlt	r3, #1
 8008fc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	6042      	str	r2, [r0, #4]
 8008fc8:	2204      	movs	r2, #4
 8008fca:	f102 0614 	add.w	r6, r2, #20
 8008fce:	429e      	cmp	r6, r3
 8008fd0:	6841      	ldr	r1, [r0, #4]
 8008fd2:	d93d      	bls.n	8009050 <_dtoa_r+0x318>
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 fecb 	bl	8009d70 <_Balloc>
 8008fda:	9001      	str	r0, [sp, #4]
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d13b      	bne.n	8009058 <_dtoa_r+0x320>
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <_dtoa_r+0x2f0>)
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fe8:	e6c0      	b.n	8008d6c <_dtoa_r+0x34>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e7df      	b.n	8008fae <_dtoa_r+0x276>
 8008fee:	bf00      	nop
 8008ff0:	636f4361 	.word	0x636f4361
 8008ff4:	3fd287a7 	.word	0x3fd287a7
 8008ff8:	8b60c8b3 	.word	0x8b60c8b3
 8008ffc:	3fc68a28 	.word	0x3fc68a28
 8009000:	509f79fb 	.word	0x509f79fb
 8009004:	3fd34413 	.word	0x3fd34413
 8009008:	0800d5ad 	.word	0x0800d5ad
 800900c:	0800d5c4 	.word	0x0800d5c4
 8009010:	7ff00000 	.word	0x7ff00000
 8009014:	0800ca04 	.word	0x0800ca04
 8009018:	0800d5a4 	.word	0x0800d5a4
 800901c:	0800bb24 	.word	0x0800bb24
 8009020:	3ff80000 	.word	0x3ff80000
 8009024:	0800d718 	.word	0x0800d718
 8009028:	0800d61f 	.word	0x0800d61f
 800902c:	2501      	movs	r5, #1
 800902e:	2300      	movs	r3, #0
 8009030:	9306      	str	r3, [sp, #24]
 8009032:	9508      	str	r5, [sp, #32]
 8009034:	f04f 33ff 	mov.w	r3, #4294967295
 8009038:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800903c:	2200      	movs	r2, #0
 800903e:	2312      	movs	r3, #18
 8009040:	e7b0      	b.n	8008fa4 <_dtoa_r+0x26c>
 8009042:	2301      	movs	r3, #1
 8009044:	9308      	str	r3, [sp, #32]
 8009046:	e7f5      	b.n	8009034 <_dtoa_r+0x2fc>
 8009048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800904e:	e7b8      	b.n	8008fc2 <_dtoa_r+0x28a>
 8009050:	3101      	adds	r1, #1
 8009052:	6041      	str	r1, [r0, #4]
 8009054:	0052      	lsls	r2, r2, #1
 8009056:	e7b8      	b.n	8008fca <_dtoa_r+0x292>
 8009058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800905a:	9a01      	ldr	r2, [sp, #4]
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	2b0e      	cmp	r3, #14
 8009062:	f200 809d 	bhi.w	80091a0 <_dtoa_r+0x468>
 8009066:	2d00      	cmp	r5, #0
 8009068:	f000 809a 	beq.w	80091a0 <_dtoa_r+0x468>
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd32      	ble.n	80090d8 <_dtoa_r+0x3a0>
 8009072:	4ab7      	ldr	r2, [pc, #732]	; (8009350 <_dtoa_r+0x618>)
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800907c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009080:	9b00      	ldr	r3, [sp, #0]
 8009082:	05d8      	lsls	r0, r3, #23
 8009084:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009088:	d516      	bpl.n	80090b8 <_dtoa_r+0x380>
 800908a:	4bb2      	ldr	r3, [pc, #712]	; (8009354 <_dtoa_r+0x61c>)
 800908c:	ec51 0b19 	vmov	r0, r1, d9
 8009090:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009094:	f7f7 fbf2 	bl	800087c <__aeabi_ddiv>
 8009098:	f007 070f 	and.w	r7, r7, #15
 800909c:	4682      	mov	sl, r0
 800909e:	468b      	mov	fp, r1
 80090a0:	2503      	movs	r5, #3
 80090a2:	4eac      	ldr	r6, [pc, #688]	; (8009354 <_dtoa_r+0x61c>)
 80090a4:	b957      	cbnz	r7, 80090bc <_dtoa_r+0x384>
 80090a6:	4642      	mov	r2, r8
 80090a8:	464b      	mov	r3, r9
 80090aa:	4650      	mov	r0, sl
 80090ac:	4659      	mov	r1, fp
 80090ae:	f7f7 fbe5 	bl	800087c <__aeabi_ddiv>
 80090b2:	4682      	mov	sl, r0
 80090b4:	468b      	mov	fp, r1
 80090b6:	e028      	b.n	800910a <_dtoa_r+0x3d2>
 80090b8:	2502      	movs	r5, #2
 80090ba:	e7f2      	b.n	80090a2 <_dtoa_r+0x36a>
 80090bc:	07f9      	lsls	r1, r7, #31
 80090be:	d508      	bpl.n	80090d2 <_dtoa_r+0x39a>
 80090c0:	4640      	mov	r0, r8
 80090c2:	4649      	mov	r1, r9
 80090c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090c8:	f7f7 faae 	bl	8000628 <__aeabi_dmul>
 80090cc:	3501      	adds	r5, #1
 80090ce:	4680      	mov	r8, r0
 80090d0:	4689      	mov	r9, r1
 80090d2:	107f      	asrs	r7, r7, #1
 80090d4:	3608      	adds	r6, #8
 80090d6:	e7e5      	b.n	80090a4 <_dtoa_r+0x36c>
 80090d8:	f000 809b 	beq.w	8009212 <_dtoa_r+0x4da>
 80090dc:	9b00      	ldr	r3, [sp, #0]
 80090de:	4f9d      	ldr	r7, [pc, #628]	; (8009354 <_dtoa_r+0x61c>)
 80090e0:	425e      	negs	r6, r3
 80090e2:	4b9b      	ldr	r3, [pc, #620]	; (8009350 <_dtoa_r+0x618>)
 80090e4:	f006 020f 	and.w	r2, r6, #15
 80090e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	ec51 0b19 	vmov	r0, r1, d9
 80090f4:	f7f7 fa98 	bl	8000628 <__aeabi_dmul>
 80090f8:	1136      	asrs	r6, r6, #4
 80090fa:	4682      	mov	sl, r0
 80090fc:	468b      	mov	fp, r1
 80090fe:	2300      	movs	r3, #0
 8009100:	2502      	movs	r5, #2
 8009102:	2e00      	cmp	r6, #0
 8009104:	d17a      	bne.n	80091fc <_dtoa_r+0x4c4>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1d3      	bne.n	80090b2 <_dtoa_r+0x37a>
 800910a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8082 	beq.w	8009216 <_dtoa_r+0x4de>
 8009112:	4b91      	ldr	r3, [pc, #580]	; (8009358 <_dtoa_r+0x620>)
 8009114:	2200      	movs	r2, #0
 8009116:	4650      	mov	r0, sl
 8009118:	4659      	mov	r1, fp
 800911a:	f7f7 fcf7 	bl	8000b0c <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	d079      	beq.n	8009216 <_dtoa_r+0x4de>
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d076      	beq.n	8009216 <_dtoa_r+0x4de>
 8009128:	9b02      	ldr	r3, [sp, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dd36      	ble.n	800919c <_dtoa_r+0x464>
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	4650      	mov	r0, sl
 8009132:	4659      	mov	r1, fp
 8009134:	1e5f      	subs	r7, r3, #1
 8009136:	2200      	movs	r2, #0
 8009138:	4b88      	ldr	r3, [pc, #544]	; (800935c <_dtoa_r+0x624>)
 800913a:	f7f7 fa75 	bl	8000628 <__aeabi_dmul>
 800913e:	9e02      	ldr	r6, [sp, #8]
 8009140:	4682      	mov	sl, r0
 8009142:	468b      	mov	fp, r1
 8009144:	3501      	adds	r5, #1
 8009146:	4628      	mov	r0, r5
 8009148:	f7f7 fa04 	bl	8000554 <__aeabi_i2d>
 800914c:	4652      	mov	r2, sl
 800914e:	465b      	mov	r3, fp
 8009150:	f7f7 fa6a 	bl	8000628 <__aeabi_dmul>
 8009154:	4b82      	ldr	r3, [pc, #520]	; (8009360 <_dtoa_r+0x628>)
 8009156:	2200      	movs	r2, #0
 8009158:	f7f7 f8b0 	bl	80002bc <__adddf3>
 800915c:	46d0      	mov	r8, sl
 800915e:	46d9      	mov	r9, fp
 8009160:	4682      	mov	sl, r0
 8009162:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009166:	2e00      	cmp	r6, #0
 8009168:	d158      	bne.n	800921c <_dtoa_r+0x4e4>
 800916a:	4b7e      	ldr	r3, [pc, #504]	; (8009364 <_dtoa_r+0x62c>)
 800916c:	2200      	movs	r2, #0
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 f8a1 	bl	80002b8 <__aeabi_dsub>
 8009176:	4652      	mov	r2, sl
 8009178:	465b      	mov	r3, fp
 800917a:	4680      	mov	r8, r0
 800917c:	4689      	mov	r9, r1
 800917e:	f7f7 fce3 	bl	8000b48 <__aeabi_dcmpgt>
 8009182:	2800      	cmp	r0, #0
 8009184:	f040 8295 	bne.w	80096b2 <_dtoa_r+0x97a>
 8009188:	4652      	mov	r2, sl
 800918a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fcbb 	bl	8000b0c <__aeabi_dcmplt>
 8009196:	2800      	cmp	r0, #0
 8009198:	f040 8289 	bne.w	80096ae <_dtoa_r+0x976>
 800919c:	ec5b ab19 	vmov	sl, fp, d9
 80091a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f2c0 8148 	blt.w	8009438 <_dtoa_r+0x700>
 80091a8:	9a00      	ldr	r2, [sp, #0]
 80091aa:	2a0e      	cmp	r2, #14
 80091ac:	f300 8144 	bgt.w	8009438 <_dtoa_r+0x700>
 80091b0:	4b67      	ldr	r3, [pc, #412]	; (8009350 <_dtoa_r+0x618>)
 80091b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f280 80d5 	bge.w	800936c <_dtoa_r+0x634>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f300 80d1 	bgt.w	800936c <_dtoa_r+0x634>
 80091ca:	f040 826f 	bne.w	80096ac <_dtoa_r+0x974>
 80091ce:	4b65      	ldr	r3, [pc, #404]	; (8009364 <_dtoa_r+0x62c>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	f7f7 fa27 	bl	8000628 <__aeabi_dmul>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	f7f7 fca9 	bl	8000b34 <__aeabi_dcmpge>
 80091e2:	9e03      	ldr	r6, [sp, #12]
 80091e4:	4637      	mov	r7, r6
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f040 8245 	bne.w	8009676 <_dtoa_r+0x93e>
 80091ec:	9d01      	ldr	r5, [sp, #4]
 80091ee:	2331      	movs	r3, #49	; 0x31
 80091f0:	f805 3b01 	strb.w	r3, [r5], #1
 80091f4:	9b00      	ldr	r3, [sp, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	e240      	b.n	800967e <_dtoa_r+0x946>
 80091fc:	07f2      	lsls	r2, r6, #31
 80091fe:	d505      	bpl.n	800920c <_dtoa_r+0x4d4>
 8009200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009204:	f7f7 fa10 	bl	8000628 <__aeabi_dmul>
 8009208:	3501      	adds	r5, #1
 800920a:	2301      	movs	r3, #1
 800920c:	1076      	asrs	r6, r6, #1
 800920e:	3708      	adds	r7, #8
 8009210:	e777      	b.n	8009102 <_dtoa_r+0x3ca>
 8009212:	2502      	movs	r5, #2
 8009214:	e779      	b.n	800910a <_dtoa_r+0x3d2>
 8009216:	9f00      	ldr	r7, [sp, #0]
 8009218:	9e03      	ldr	r6, [sp, #12]
 800921a:	e794      	b.n	8009146 <_dtoa_r+0x40e>
 800921c:	9901      	ldr	r1, [sp, #4]
 800921e:	4b4c      	ldr	r3, [pc, #304]	; (8009350 <_dtoa_r+0x618>)
 8009220:	4431      	add	r1, r6
 8009222:	910d      	str	r1, [sp, #52]	; 0x34
 8009224:	9908      	ldr	r1, [sp, #32]
 8009226:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800922a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800922e:	2900      	cmp	r1, #0
 8009230:	d043      	beq.n	80092ba <_dtoa_r+0x582>
 8009232:	494d      	ldr	r1, [pc, #308]	; (8009368 <_dtoa_r+0x630>)
 8009234:	2000      	movs	r0, #0
 8009236:	f7f7 fb21 	bl	800087c <__aeabi_ddiv>
 800923a:	4652      	mov	r2, sl
 800923c:	465b      	mov	r3, fp
 800923e:	f7f7 f83b 	bl	80002b8 <__aeabi_dsub>
 8009242:	9d01      	ldr	r5, [sp, #4]
 8009244:	4682      	mov	sl, r0
 8009246:	468b      	mov	fp, r1
 8009248:	4649      	mov	r1, r9
 800924a:	4640      	mov	r0, r8
 800924c:	f7f7 fc9c 	bl	8000b88 <__aeabi_d2iz>
 8009250:	4606      	mov	r6, r0
 8009252:	f7f7 f97f 	bl	8000554 <__aeabi_i2d>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4640      	mov	r0, r8
 800925c:	4649      	mov	r1, r9
 800925e:	f7f7 f82b 	bl	80002b8 <__aeabi_dsub>
 8009262:	3630      	adds	r6, #48	; 0x30
 8009264:	f805 6b01 	strb.w	r6, [r5], #1
 8009268:	4652      	mov	r2, sl
 800926a:	465b      	mov	r3, fp
 800926c:	4680      	mov	r8, r0
 800926e:	4689      	mov	r9, r1
 8009270:	f7f7 fc4c 	bl	8000b0c <__aeabi_dcmplt>
 8009274:	2800      	cmp	r0, #0
 8009276:	d163      	bne.n	8009340 <_dtoa_r+0x608>
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	4936      	ldr	r1, [pc, #216]	; (8009358 <_dtoa_r+0x620>)
 800927e:	2000      	movs	r0, #0
 8009280:	f7f7 f81a 	bl	80002b8 <__aeabi_dsub>
 8009284:	4652      	mov	r2, sl
 8009286:	465b      	mov	r3, fp
 8009288:	f7f7 fc40 	bl	8000b0c <__aeabi_dcmplt>
 800928c:	2800      	cmp	r0, #0
 800928e:	f040 80b5 	bne.w	80093fc <_dtoa_r+0x6c4>
 8009292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009294:	429d      	cmp	r5, r3
 8009296:	d081      	beq.n	800919c <_dtoa_r+0x464>
 8009298:	4b30      	ldr	r3, [pc, #192]	; (800935c <_dtoa_r+0x624>)
 800929a:	2200      	movs	r2, #0
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	f7f7 f9c2 	bl	8000628 <__aeabi_dmul>
 80092a4:	4b2d      	ldr	r3, [pc, #180]	; (800935c <_dtoa_r+0x624>)
 80092a6:	4682      	mov	sl, r0
 80092a8:	468b      	mov	fp, r1
 80092aa:	4640      	mov	r0, r8
 80092ac:	4649      	mov	r1, r9
 80092ae:	2200      	movs	r2, #0
 80092b0:	f7f7 f9ba 	bl	8000628 <__aeabi_dmul>
 80092b4:	4680      	mov	r8, r0
 80092b6:	4689      	mov	r9, r1
 80092b8:	e7c6      	b.n	8009248 <_dtoa_r+0x510>
 80092ba:	4650      	mov	r0, sl
 80092bc:	4659      	mov	r1, fp
 80092be:	f7f7 f9b3 	bl	8000628 <__aeabi_dmul>
 80092c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c4:	9d01      	ldr	r5, [sp, #4]
 80092c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	4649      	mov	r1, r9
 80092ce:	4640      	mov	r0, r8
 80092d0:	f7f7 fc5a 	bl	8000b88 <__aeabi_d2iz>
 80092d4:	4606      	mov	r6, r0
 80092d6:	f7f7 f93d 	bl	8000554 <__aeabi_i2d>
 80092da:	3630      	adds	r6, #48	; 0x30
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f6 ffe8 	bl	80002b8 <__aeabi_dsub>
 80092e8:	f805 6b01 	strb.w	r6, [r5], #1
 80092ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ee:	429d      	cmp	r5, r3
 80092f0:	4680      	mov	r8, r0
 80092f2:	4689      	mov	r9, r1
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	d124      	bne.n	8009344 <_dtoa_r+0x60c>
 80092fa:	4b1b      	ldr	r3, [pc, #108]	; (8009368 <_dtoa_r+0x630>)
 80092fc:	4650      	mov	r0, sl
 80092fe:	4659      	mov	r1, fp
 8009300:	f7f6 ffdc 	bl	80002bc <__adddf3>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4640      	mov	r0, r8
 800930a:	4649      	mov	r1, r9
 800930c:	f7f7 fc1c 	bl	8000b48 <__aeabi_dcmpgt>
 8009310:	2800      	cmp	r0, #0
 8009312:	d173      	bne.n	80093fc <_dtoa_r+0x6c4>
 8009314:	4652      	mov	r2, sl
 8009316:	465b      	mov	r3, fp
 8009318:	4913      	ldr	r1, [pc, #76]	; (8009368 <_dtoa_r+0x630>)
 800931a:	2000      	movs	r0, #0
 800931c:	f7f6 ffcc 	bl	80002b8 <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	f7f7 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800932c:	2800      	cmp	r0, #0
 800932e:	f43f af35 	beq.w	800919c <_dtoa_r+0x464>
 8009332:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009334:	1e6b      	subs	r3, r5, #1
 8009336:	930f      	str	r3, [sp, #60]	; 0x3c
 8009338:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800933c:	2b30      	cmp	r3, #48	; 0x30
 800933e:	d0f8      	beq.n	8009332 <_dtoa_r+0x5fa>
 8009340:	9700      	str	r7, [sp, #0]
 8009342:	e049      	b.n	80093d8 <_dtoa_r+0x6a0>
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <_dtoa_r+0x624>)
 8009346:	f7f7 f96f 	bl	8000628 <__aeabi_dmul>
 800934a:	4680      	mov	r8, r0
 800934c:	4689      	mov	r9, r1
 800934e:	e7bd      	b.n	80092cc <_dtoa_r+0x594>
 8009350:	0800d718 	.word	0x0800d718
 8009354:	0800d6f0 	.word	0x0800d6f0
 8009358:	3ff00000 	.word	0x3ff00000
 800935c:	40240000 	.word	0x40240000
 8009360:	401c0000 	.word	0x401c0000
 8009364:	40140000 	.word	0x40140000
 8009368:	3fe00000 	.word	0x3fe00000
 800936c:	9d01      	ldr	r5, [sp, #4]
 800936e:	4656      	mov	r6, sl
 8009370:	465f      	mov	r7, fp
 8009372:	4642      	mov	r2, r8
 8009374:	464b      	mov	r3, r9
 8009376:	4630      	mov	r0, r6
 8009378:	4639      	mov	r1, r7
 800937a:	f7f7 fa7f 	bl	800087c <__aeabi_ddiv>
 800937e:	f7f7 fc03 	bl	8000b88 <__aeabi_d2iz>
 8009382:	4682      	mov	sl, r0
 8009384:	f7f7 f8e6 	bl	8000554 <__aeabi_i2d>
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	f7f7 f94c 	bl	8000628 <__aeabi_dmul>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4630      	mov	r0, r6
 8009396:	4639      	mov	r1, r7
 8009398:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800939c:	f7f6 ff8c 	bl	80002b8 <__aeabi_dsub>
 80093a0:	f805 6b01 	strb.w	r6, [r5], #1
 80093a4:	9e01      	ldr	r6, [sp, #4]
 80093a6:	9f03      	ldr	r7, [sp, #12]
 80093a8:	1bae      	subs	r6, r5, r6
 80093aa:	42b7      	cmp	r7, r6
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	d135      	bne.n	800941e <_dtoa_r+0x6e6>
 80093b2:	f7f6 ff83 	bl	80002bc <__adddf3>
 80093b6:	4642      	mov	r2, r8
 80093b8:	464b      	mov	r3, r9
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	f7f7 fbc3 	bl	8000b48 <__aeabi_dcmpgt>
 80093c2:	b9d0      	cbnz	r0, 80093fa <_dtoa_r+0x6c2>
 80093c4:	4642      	mov	r2, r8
 80093c6:	464b      	mov	r3, r9
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f7 fb94 	bl	8000af8 <__aeabi_dcmpeq>
 80093d0:	b110      	cbz	r0, 80093d8 <_dtoa_r+0x6a0>
 80093d2:	f01a 0f01 	tst.w	sl, #1
 80093d6:	d110      	bne.n	80093fa <_dtoa_r+0x6c2>
 80093d8:	4620      	mov	r0, r4
 80093da:	ee18 1a10 	vmov	r1, s16
 80093de:	f000 fd07 	bl	8009df0 <_Bfree>
 80093e2:	2300      	movs	r3, #0
 80093e4:	9800      	ldr	r0, [sp, #0]
 80093e6:	702b      	strb	r3, [r5, #0]
 80093e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ea:	3001      	adds	r0, #1
 80093ec:	6018      	str	r0, [r3, #0]
 80093ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f43f acf1 	beq.w	8008dd8 <_dtoa_r+0xa0>
 80093f6:	601d      	str	r5, [r3, #0]
 80093f8:	e4ee      	b.n	8008dd8 <_dtoa_r+0xa0>
 80093fa:	9f00      	ldr	r7, [sp, #0]
 80093fc:	462b      	mov	r3, r5
 80093fe:	461d      	mov	r5, r3
 8009400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009404:	2a39      	cmp	r2, #57	; 0x39
 8009406:	d106      	bne.n	8009416 <_dtoa_r+0x6de>
 8009408:	9a01      	ldr	r2, [sp, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d1f7      	bne.n	80093fe <_dtoa_r+0x6c6>
 800940e:	9901      	ldr	r1, [sp, #4]
 8009410:	2230      	movs	r2, #48	; 0x30
 8009412:	3701      	adds	r7, #1
 8009414:	700a      	strb	r2, [r1, #0]
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	3201      	adds	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e790      	b.n	8009340 <_dtoa_r+0x608>
 800941e:	4ba6      	ldr	r3, [pc, #664]	; (80096b8 <_dtoa_r+0x980>)
 8009420:	2200      	movs	r2, #0
 8009422:	f7f7 f901 	bl	8000628 <__aeabi_dmul>
 8009426:	2200      	movs	r2, #0
 8009428:	2300      	movs	r3, #0
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	f7f7 fb63 	bl	8000af8 <__aeabi_dcmpeq>
 8009432:	2800      	cmp	r0, #0
 8009434:	d09d      	beq.n	8009372 <_dtoa_r+0x63a>
 8009436:	e7cf      	b.n	80093d8 <_dtoa_r+0x6a0>
 8009438:	9a08      	ldr	r2, [sp, #32]
 800943a:	2a00      	cmp	r2, #0
 800943c:	f000 80d7 	beq.w	80095ee <_dtoa_r+0x8b6>
 8009440:	9a06      	ldr	r2, [sp, #24]
 8009442:	2a01      	cmp	r2, #1
 8009444:	f300 80ba 	bgt.w	80095bc <_dtoa_r+0x884>
 8009448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800944a:	2a00      	cmp	r2, #0
 800944c:	f000 80b2 	beq.w	80095b4 <_dtoa_r+0x87c>
 8009450:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009454:	9e07      	ldr	r6, [sp, #28]
 8009456:	9d04      	ldr	r5, [sp, #16]
 8009458:	9a04      	ldr	r2, [sp, #16]
 800945a:	441a      	add	r2, r3
 800945c:	9204      	str	r2, [sp, #16]
 800945e:	9a05      	ldr	r2, [sp, #20]
 8009460:	2101      	movs	r1, #1
 8009462:	441a      	add	r2, r3
 8009464:	4620      	mov	r0, r4
 8009466:	9205      	str	r2, [sp, #20]
 8009468:	f000 fd7a 	bl	8009f60 <__i2b>
 800946c:	4607      	mov	r7, r0
 800946e:	2d00      	cmp	r5, #0
 8009470:	dd0c      	ble.n	800948c <_dtoa_r+0x754>
 8009472:	9b05      	ldr	r3, [sp, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dd09      	ble.n	800948c <_dtoa_r+0x754>
 8009478:	42ab      	cmp	r3, r5
 800947a:	9a04      	ldr	r2, [sp, #16]
 800947c:	bfa8      	it	ge
 800947e:	462b      	movge	r3, r5
 8009480:	1ad2      	subs	r2, r2, r3
 8009482:	9204      	str	r2, [sp, #16]
 8009484:	9a05      	ldr	r2, [sp, #20]
 8009486:	1aed      	subs	r5, r5, r3
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	9305      	str	r3, [sp, #20]
 800948c:	9b07      	ldr	r3, [sp, #28]
 800948e:	b31b      	cbz	r3, 80094d8 <_dtoa_r+0x7a0>
 8009490:	9b08      	ldr	r3, [sp, #32]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80af 	beq.w	80095f6 <_dtoa_r+0x8be>
 8009498:	2e00      	cmp	r6, #0
 800949a:	dd13      	ble.n	80094c4 <_dtoa_r+0x78c>
 800949c:	4639      	mov	r1, r7
 800949e:	4632      	mov	r2, r6
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 fe1d 	bl	800a0e0 <__pow5mult>
 80094a6:	ee18 2a10 	vmov	r2, s16
 80094aa:	4601      	mov	r1, r0
 80094ac:	4607      	mov	r7, r0
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 fd6c 	bl	8009f8c <__multiply>
 80094b4:	ee18 1a10 	vmov	r1, s16
 80094b8:	4680      	mov	r8, r0
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fc98 	bl	8009df0 <_Bfree>
 80094c0:	ee08 8a10 	vmov	s16, r8
 80094c4:	9b07      	ldr	r3, [sp, #28]
 80094c6:	1b9a      	subs	r2, r3, r6
 80094c8:	d006      	beq.n	80094d8 <_dtoa_r+0x7a0>
 80094ca:	ee18 1a10 	vmov	r1, s16
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fe06 	bl	800a0e0 <__pow5mult>
 80094d4:	ee08 0a10 	vmov	s16, r0
 80094d8:	2101      	movs	r1, #1
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fd40 	bl	8009f60 <__i2b>
 80094e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	4606      	mov	r6, r0
 80094e6:	f340 8088 	ble.w	80095fa <_dtoa_r+0x8c2>
 80094ea:	461a      	mov	r2, r3
 80094ec:	4601      	mov	r1, r0
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fdf6 	bl	800a0e0 <__pow5mult>
 80094f4:	9b06      	ldr	r3, [sp, #24]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	4606      	mov	r6, r0
 80094fa:	f340 8081 	ble.w	8009600 <_dtoa_r+0x8c8>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	6933      	ldr	r3, [r6, #16]
 8009504:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009508:	6918      	ldr	r0, [r3, #16]
 800950a:	f000 fcd9 	bl	8009ec0 <__hi0bits>
 800950e:	f1c0 0020 	rsb	r0, r0, #32
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	4418      	add	r0, r3
 8009516:	f010 001f 	ands.w	r0, r0, #31
 800951a:	f000 8092 	beq.w	8009642 <_dtoa_r+0x90a>
 800951e:	f1c0 0320 	rsb	r3, r0, #32
 8009522:	2b04      	cmp	r3, #4
 8009524:	f340 808a 	ble.w	800963c <_dtoa_r+0x904>
 8009528:	f1c0 001c 	rsb	r0, r0, #28
 800952c:	9b04      	ldr	r3, [sp, #16]
 800952e:	4403      	add	r3, r0
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	9b05      	ldr	r3, [sp, #20]
 8009534:	4403      	add	r3, r0
 8009536:	4405      	add	r5, r0
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	dd07      	ble.n	8009550 <_dtoa_r+0x818>
 8009540:	ee18 1a10 	vmov	r1, s16
 8009544:	461a      	mov	r2, r3
 8009546:	4620      	mov	r0, r4
 8009548:	f000 fe24 	bl	800a194 <__lshift>
 800954c:	ee08 0a10 	vmov	s16, r0
 8009550:	9b05      	ldr	r3, [sp, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	dd05      	ble.n	8009562 <_dtoa_r+0x82a>
 8009556:	4631      	mov	r1, r6
 8009558:	461a      	mov	r2, r3
 800955a:	4620      	mov	r0, r4
 800955c:	f000 fe1a 	bl	800a194 <__lshift>
 8009560:	4606      	mov	r6, r0
 8009562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d06e      	beq.n	8009646 <_dtoa_r+0x90e>
 8009568:	ee18 0a10 	vmov	r0, s16
 800956c:	4631      	mov	r1, r6
 800956e:	f000 fe81 	bl	800a274 <__mcmp>
 8009572:	2800      	cmp	r0, #0
 8009574:	da67      	bge.n	8009646 <_dtoa_r+0x90e>
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	3b01      	subs	r3, #1
 800957a:	ee18 1a10 	vmov	r1, s16
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	220a      	movs	r2, #10
 8009582:	2300      	movs	r3, #0
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fc55 	bl	8009e34 <__multadd>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	ee08 0a10 	vmov	s16, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 81b1 	beq.w	80098f8 <_dtoa_r+0xbc0>
 8009596:	2300      	movs	r3, #0
 8009598:	4639      	mov	r1, r7
 800959a:	220a      	movs	r2, #10
 800959c:	4620      	mov	r0, r4
 800959e:	f000 fc49 	bl	8009e34 <__multadd>
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	4607      	mov	r7, r0
 80095a8:	f300 808e 	bgt.w	80096c8 <_dtoa_r+0x990>
 80095ac:	9b06      	ldr	r3, [sp, #24]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	dc51      	bgt.n	8009656 <_dtoa_r+0x91e>
 80095b2:	e089      	b.n	80096c8 <_dtoa_r+0x990>
 80095b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095ba:	e74b      	b.n	8009454 <_dtoa_r+0x71c>
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	1e5e      	subs	r6, r3, #1
 80095c0:	9b07      	ldr	r3, [sp, #28]
 80095c2:	42b3      	cmp	r3, r6
 80095c4:	bfbf      	itttt	lt
 80095c6:	9b07      	ldrlt	r3, [sp, #28]
 80095c8:	9607      	strlt	r6, [sp, #28]
 80095ca:	1af2      	sublt	r2, r6, r3
 80095cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095ce:	bfb6      	itet	lt
 80095d0:	189b      	addlt	r3, r3, r2
 80095d2:	1b9e      	subge	r6, r3, r6
 80095d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	bfb8      	it	lt
 80095da:	2600      	movlt	r6, #0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bfb7      	itett	lt
 80095e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80095e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095e8:	1a9d      	sublt	r5, r3, r2
 80095ea:	2300      	movlt	r3, #0
 80095ec:	e734      	b.n	8009458 <_dtoa_r+0x720>
 80095ee:	9e07      	ldr	r6, [sp, #28]
 80095f0:	9d04      	ldr	r5, [sp, #16]
 80095f2:	9f08      	ldr	r7, [sp, #32]
 80095f4:	e73b      	b.n	800946e <_dtoa_r+0x736>
 80095f6:	9a07      	ldr	r2, [sp, #28]
 80095f8:	e767      	b.n	80094ca <_dtoa_r+0x792>
 80095fa:	9b06      	ldr	r3, [sp, #24]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	dc18      	bgt.n	8009632 <_dtoa_r+0x8fa>
 8009600:	f1ba 0f00 	cmp.w	sl, #0
 8009604:	d115      	bne.n	8009632 <_dtoa_r+0x8fa>
 8009606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800960a:	b993      	cbnz	r3, 8009632 <_dtoa_r+0x8fa>
 800960c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009610:	0d1b      	lsrs	r3, r3, #20
 8009612:	051b      	lsls	r3, r3, #20
 8009614:	b183      	cbz	r3, 8009638 <_dtoa_r+0x900>
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	3301      	adds	r3, #1
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	9b05      	ldr	r3, [sp, #20]
 800961e:	3301      	adds	r3, #1
 8009620:	9305      	str	r3, [sp, #20]
 8009622:	f04f 0801 	mov.w	r8, #1
 8009626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f af6a 	bne.w	8009502 <_dtoa_r+0x7ca>
 800962e:	2001      	movs	r0, #1
 8009630:	e76f      	b.n	8009512 <_dtoa_r+0x7da>
 8009632:	f04f 0800 	mov.w	r8, #0
 8009636:	e7f6      	b.n	8009626 <_dtoa_r+0x8ee>
 8009638:	4698      	mov	r8, r3
 800963a:	e7f4      	b.n	8009626 <_dtoa_r+0x8ee>
 800963c:	f43f af7d 	beq.w	800953a <_dtoa_r+0x802>
 8009640:	4618      	mov	r0, r3
 8009642:	301c      	adds	r0, #28
 8009644:	e772      	b.n	800952c <_dtoa_r+0x7f4>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc37      	bgt.n	80096bc <_dtoa_r+0x984>
 800964c:	9b06      	ldr	r3, [sp, #24]
 800964e:	2b02      	cmp	r3, #2
 8009650:	dd34      	ble.n	80096bc <_dtoa_r+0x984>
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	9302      	str	r3, [sp, #8]
 8009656:	9b02      	ldr	r3, [sp, #8]
 8009658:	b96b      	cbnz	r3, 8009676 <_dtoa_r+0x93e>
 800965a:	4631      	mov	r1, r6
 800965c:	2205      	movs	r2, #5
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fbe8 	bl	8009e34 <__multadd>
 8009664:	4601      	mov	r1, r0
 8009666:	4606      	mov	r6, r0
 8009668:	ee18 0a10 	vmov	r0, s16
 800966c:	f000 fe02 	bl	800a274 <__mcmp>
 8009670:	2800      	cmp	r0, #0
 8009672:	f73f adbb 	bgt.w	80091ec <_dtoa_r+0x4b4>
 8009676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009678:	9d01      	ldr	r5, [sp, #4]
 800967a:	43db      	mvns	r3, r3
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	f04f 0800 	mov.w	r8, #0
 8009682:	4631      	mov	r1, r6
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fbb3 	bl	8009df0 <_Bfree>
 800968a:	2f00      	cmp	r7, #0
 800968c:	f43f aea4 	beq.w	80093d8 <_dtoa_r+0x6a0>
 8009690:	f1b8 0f00 	cmp.w	r8, #0
 8009694:	d005      	beq.n	80096a2 <_dtoa_r+0x96a>
 8009696:	45b8      	cmp	r8, r7
 8009698:	d003      	beq.n	80096a2 <_dtoa_r+0x96a>
 800969a:	4641      	mov	r1, r8
 800969c:	4620      	mov	r0, r4
 800969e:	f000 fba7 	bl	8009df0 <_Bfree>
 80096a2:	4639      	mov	r1, r7
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fba3 	bl	8009df0 <_Bfree>
 80096aa:	e695      	b.n	80093d8 <_dtoa_r+0x6a0>
 80096ac:	2600      	movs	r6, #0
 80096ae:	4637      	mov	r7, r6
 80096b0:	e7e1      	b.n	8009676 <_dtoa_r+0x93e>
 80096b2:	9700      	str	r7, [sp, #0]
 80096b4:	4637      	mov	r7, r6
 80096b6:	e599      	b.n	80091ec <_dtoa_r+0x4b4>
 80096b8:	40240000 	.word	0x40240000
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 80ca 	beq.w	8009858 <_dtoa_r+0xb20>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	2d00      	cmp	r5, #0
 80096ca:	dd05      	ble.n	80096d8 <_dtoa_r+0x9a0>
 80096cc:	4639      	mov	r1, r7
 80096ce:	462a      	mov	r2, r5
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fd5f 	bl	800a194 <__lshift>
 80096d6:	4607      	mov	r7, r0
 80096d8:	f1b8 0f00 	cmp.w	r8, #0
 80096dc:	d05b      	beq.n	8009796 <_dtoa_r+0xa5e>
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fb45 	bl	8009d70 <_Balloc>
 80096e6:	4605      	mov	r5, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <_dtoa_r+0x9be>
 80096ea:	4b87      	ldr	r3, [pc, #540]	; (8009908 <_dtoa_r+0xbd0>)
 80096ec:	4602      	mov	r2, r0
 80096ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096f2:	f7ff bb3b 	b.w	8008d6c <_dtoa_r+0x34>
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	3202      	adds	r2, #2
 80096fa:	0092      	lsls	r2, r2, #2
 80096fc:	f107 010c 	add.w	r1, r7, #12
 8009700:	300c      	adds	r0, #12
 8009702:	f7fe fb3b 	bl	8007d7c <memcpy>
 8009706:	2201      	movs	r2, #1
 8009708:	4629      	mov	r1, r5
 800970a:	4620      	mov	r0, r4
 800970c:	f000 fd42 	bl	800a194 <__lshift>
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	f103 0901 	add.w	r9, r3, #1
 8009716:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800971a:	4413      	add	r3, r2
 800971c:	9305      	str	r3, [sp, #20]
 800971e:	f00a 0301 	and.w	r3, sl, #1
 8009722:	46b8      	mov	r8, r7
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	4607      	mov	r7, r0
 8009728:	4631      	mov	r1, r6
 800972a:	ee18 0a10 	vmov	r0, s16
 800972e:	f7ff fa76 	bl	8008c1e <quorem>
 8009732:	4641      	mov	r1, r8
 8009734:	9002      	str	r0, [sp, #8]
 8009736:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800973a:	ee18 0a10 	vmov	r0, s16
 800973e:	f000 fd99 	bl	800a274 <__mcmp>
 8009742:	463a      	mov	r2, r7
 8009744:	9003      	str	r0, [sp, #12]
 8009746:	4631      	mov	r1, r6
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fdaf 	bl	800a2ac <__mdiff>
 800974e:	68c2      	ldr	r2, [r0, #12]
 8009750:	f109 3bff 	add.w	fp, r9, #4294967295
 8009754:	4605      	mov	r5, r0
 8009756:	bb02      	cbnz	r2, 800979a <_dtoa_r+0xa62>
 8009758:	4601      	mov	r1, r0
 800975a:	ee18 0a10 	vmov	r0, s16
 800975e:	f000 fd89 	bl	800a274 <__mcmp>
 8009762:	4602      	mov	r2, r0
 8009764:	4629      	mov	r1, r5
 8009766:	4620      	mov	r0, r4
 8009768:	9207      	str	r2, [sp, #28]
 800976a:	f000 fb41 	bl	8009df0 <_Bfree>
 800976e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009772:	ea43 0102 	orr.w	r1, r3, r2
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	430b      	orrs	r3, r1
 800977a:	464d      	mov	r5, r9
 800977c:	d10f      	bne.n	800979e <_dtoa_r+0xa66>
 800977e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009782:	d02a      	beq.n	80097da <_dtoa_r+0xaa2>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	dd02      	ble.n	8009790 <_dtoa_r+0xa58>
 800978a:	9b02      	ldr	r3, [sp, #8]
 800978c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009790:	f88b a000 	strb.w	sl, [fp]
 8009794:	e775      	b.n	8009682 <_dtoa_r+0x94a>
 8009796:	4638      	mov	r0, r7
 8009798:	e7ba      	b.n	8009710 <_dtoa_r+0x9d8>
 800979a:	2201      	movs	r2, #1
 800979c:	e7e2      	b.n	8009764 <_dtoa_r+0xa2c>
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	db04      	blt.n	80097ae <_dtoa_r+0xa76>
 80097a4:	9906      	ldr	r1, [sp, #24]
 80097a6:	430b      	orrs	r3, r1
 80097a8:	9904      	ldr	r1, [sp, #16]
 80097aa:	430b      	orrs	r3, r1
 80097ac:	d122      	bne.n	80097f4 <_dtoa_r+0xabc>
 80097ae:	2a00      	cmp	r2, #0
 80097b0:	ddee      	ble.n	8009790 <_dtoa_r+0xa58>
 80097b2:	ee18 1a10 	vmov	r1, s16
 80097b6:	2201      	movs	r2, #1
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fceb 	bl	800a194 <__lshift>
 80097be:	4631      	mov	r1, r6
 80097c0:	ee08 0a10 	vmov	s16, r0
 80097c4:	f000 fd56 	bl	800a274 <__mcmp>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	dc03      	bgt.n	80097d4 <_dtoa_r+0xa9c>
 80097cc:	d1e0      	bne.n	8009790 <_dtoa_r+0xa58>
 80097ce:	f01a 0f01 	tst.w	sl, #1
 80097d2:	d0dd      	beq.n	8009790 <_dtoa_r+0xa58>
 80097d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097d8:	d1d7      	bne.n	800978a <_dtoa_r+0xa52>
 80097da:	2339      	movs	r3, #57	; 0x39
 80097dc:	f88b 3000 	strb.w	r3, [fp]
 80097e0:	462b      	mov	r3, r5
 80097e2:	461d      	mov	r5, r3
 80097e4:	3b01      	subs	r3, #1
 80097e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097ea:	2a39      	cmp	r2, #57	; 0x39
 80097ec:	d071      	beq.n	80098d2 <_dtoa_r+0xb9a>
 80097ee:	3201      	adds	r2, #1
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	e746      	b.n	8009682 <_dtoa_r+0x94a>
 80097f4:	2a00      	cmp	r2, #0
 80097f6:	dd07      	ble.n	8009808 <_dtoa_r+0xad0>
 80097f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097fc:	d0ed      	beq.n	80097da <_dtoa_r+0xaa2>
 80097fe:	f10a 0301 	add.w	r3, sl, #1
 8009802:	f88b 3000 	strb.w	r3, [fp]
 8009806:	e73c      	b.n	8009682 <_dtoa_r+0x94a>
 8009808:	9b05      	ldr	r3, [sp, #20]
 800980a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800980e:	4599      	cmp	r9, r3
 8009810:	d047      	beq.n	80098a2 <_dtoa_r+0xb6a>
 8009812:	ee18 1a10 	vmov	r1, s16
 8009816:	2300      	movs	r3, #0
 8009818:	220a      	movs	r2, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fb0a 	bl	8009e34 <__multadd>
 8009820:	45b8      	cmp	r8, r7
 8009822:	ee08 0a10 	vmov	s16, r0
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	f04f 020a 	mov.w	r2, #10
 800982e:	4641      	mov	r1, r8
 8009830:	4620      	mov	r0, r4
 8009832:	d106      	bne.n	8009842 <_dtoa_r+0xb0a>
 8009834:	f000 fafe 	bl	8009e34 <__multadd>
 8009838:	4680      	mov	r8, r0
 800983a:	4607      	mov	r7, r0
 800983c:	f109 0901 	add.w	r9, r9, #1
 8009840:	e772      	b.n	8009728 <_dtoa_r+0x9f0>
 8009842:	f000 faf7 	bl	8009e34 <__multadd>
 8009846:	4639      	mov	r1, r7
 8009848:	4680      	mov	r8, r0
 800984a:	2300      	movs	r3, #0
 800984c:	220a      	movs	r2, #10
 800984e:	4620      	mov	r0, r4
 8009850:	f000 faf0 	bl	8009e34 <__multadd>
 8009854:	4607      	mov	r7, r0
 8009856:	e7f1      	b.n	800983c <_dtoa_r+0xb04>
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	9d01      	ldr	r5, [sp, #4]
 800985e:	ee18 0a10 	vmov	r0, s16
 8009862:	4631      	mov	r1, r6
 8009864:	f7ff f9db 	bl	8008c1e <quorem>
 8009868:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	f805 ab01 	strb.w	sl, [r5], #1
 8009872:	1aea      	subs	r2, r5, r3
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	4293      	cmp	r3, r2
 8009878:	dd09      	ble.n	800988e <_dtoa_r+0xb56>
 800987a:	ee18 1a10 	vmov	r1, s16
 800987e:	2300      	movs	r3, #0
 8009880:	220a      	movs	r2, #10
 8009882:	4620      	mov	r0, r4
 8009884:	f000 fad6 	bl	8009e34 <__multadd>
 8009888:	ee08 0a10 	vmov	s16, r0
 800988c:	e7e7      	b.n	800985e <_dtoa_r+0xb26>
 800988e:	9b02      	ldr	r3, [sp, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfc8      	it	gt
 8009894:	461d      	movgt	r5, r3
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	bfd8      	it	le
 800989a:	2501      	movle	r5, #1
 800989c:	441d      	add	r5, r3
 800989e:	f04f 0800 	mov.w	r8, #0
 80098a2:	ee18 1a10 	vmov	r1, s16
 80098a6:	2201      	movs	r2, #1
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fc73 	bl	800a194 <__lshift>
 80098ae:	4631      	mov	r1, r6
 80098b0:	ee08 0a10 	vmov	s16, r0
 80098b4:	f000 fcde 	bl	800a274 <__mcmp>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	dc91      	bgt.n	80097e0 <_dtoa_r+0xaa8>
 80098bc:	d102      	bne.n	80098c4 <_dtoa_r+0xb8c>
 80098be:	f01a 0f01 	tst.w	sl, #1
 80098c2:	d18d      	bne.n	80097e0 <_dtoa_r+0xaa8>
 80098c4:	462b      	mov	r3, r5
 80098c6:	461d      	mov	r5, r3
 80098c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098cc:	2a30      	cmp	r2, #48	; 0x30
 80098ce:	d0fa      	beq.n	80098c6 <_dtoa_r+0xb8e>
 80098d0:	e6d7      	b.n	8009682 <_dtoa_r+0x94a>
 80098d2:	9a01      	ldr	r2, [sp, #4]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d184      	bne.n	80097e2 <_dtoa_r+0xaaa>
 80098d8:	9b00      	ldr	r3, [sp, #0]
 80098da:	3301      	adds	r3, #1
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	2331      	movs	r3, #49	; 0x31
 80098e0:	7013      	strb	r3, [r2, #0]
 80098e2:	e6ce      	b.n	8009682 <_dtoa_r+0x94a>
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <_dtoa_r+0xbd4>)
 80098e6:	f7ff ba95 	b.w	8008e14 <_dtoa_r+0xdc>
 80098ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f47f aa6e 	bne.w	8008dce <_dtoa_r+0x96>
 80098f2:	4b07      	ldr	r3, [pc, #28]	; (8009910 <_dtoa_r+0xbd8>)
 80098f4:	f7ff ba8e 	b.w	8008e14 <_dtoa_r+0xdc>
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	dcae      	bgt.n	800985c <_dtoa_r+0xb24>
 80098fe:	9b06      	ldr	r3, [sp, #24]
 8009900:	2b02      	cmp	r3, #2
 8009902:	f73f aea8 	bgt.w	8009656 <_dtoa_r+0x91e>
 8009906:	e7a9      	b.n	800985c <_dtoa_r+0xb24>
 8009908:	0800d61f 	.word	0x0800d61f
 800990c:	0800bb23 	.word	0x0800bb23
 8009910:	0800d5a4 	.word	0x0800d5a4

08009914 <__sflush_r>:
 8009914:	898a      	ldrh	r2, [r1, #12]
 8009916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	4605      	mov	r5, r0
 800991c:	0710      	lsls	r0, r2, #28
 800991e:	460c      	mov	r4, r1
 8009920:	d458      	bmi.n	80099d4 <__sflush_r+0xc0>
 8009922:	684b      	ldr	r3, [r1, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	dc05      	bgt.n	8009934 <__sflush_r+0x20>
 8009928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	dc02      	bgt.n	8009934 <__sflush_r+0x20>
 800992e:	2000      	movs	r0, #0
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009936:	2e00      	cmp	r6, #0
 8009938:	d0f9      	beq.n	800992e <__sflush_r+0x1a>
 800993a:	2300      	movs	r3, #0
 800993c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009940:	682f      	ldr	r7, [r5, #0]
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	d032      	beq.n	80099ac <__sflush_r+0x98>
 8009946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	075a      	lsls	r2, r3, #29
 800994c:	d505      	bpl.n	800995a <__sflush_r+0x46>
 800994e:	6863      	ldr	r3, [r4, #4]
 8009950:	1ac0      	subs	r0, r0, r3
 8009952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009954:	b10b      	cbz	r3, 800995a <__sflush_r+0x46>
 8009956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009958:	1ac0      	subs	r0, r0, r3
 800995a:	2300      	movs	r3, #0
 800995c:	4602      	mov	r2, r0
 800995e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009960:	6a21      	ldr	r1, [r4, #32]
 8009962:	4628      	mov	r0, r5
 8009964:	47b0      	blx	r6
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	d106      	bne.n	800997a <__sflush_r+0x66>
 800996c:	6829      	ldr	r1, [r5, #0]
 800996e:	291d      	cmp	r1, #29
 8009970:	d82c      	bhi.n	80099cc <__sflush_r+0xb8>
 8009972:	4a2a      	ldr	r2, [pc, #168]	; (8009a1c <__sflush_r+0x108>)
 8009974:	40ca      	lsrs	r2, r1
 8009976:	07d6      	lsls	r6, r2, #31
 8009978:	d528      	bpl.n	80099cc <__sflush_r+0xb8>
 800997a:	2200      	movs	r2, #0
 800997c:	6062      	str	r2, [r4, #4]
 800997e:	04d9      	lsls	r1, r3, #19
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	6022      	str	r2, [r4, #0]
 8009984:	d504      	bpl.n	8009990 <__sflush_r+0x7c>
 8009986:	1c42      	adds	r2, r0, #1
 8009988:	d101      	bne.n	800998e <__sflush_r+0x7a>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b903      	cbnz	r3, 8009990 <__sflush_r+0x7c>
 800998e:	6560      	str	r0, [r4, #84]	; 0x54
 8009990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009992:	602f      	str	r7, [r5, #0]
 8009994:	2900      	cmp	r1, #0
 8009996:	d0ca      	beq.n	800992e <__sflush_r+0x1a>
 8009998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800999c:	4299      	cmp	r1, r3
 800999e:	d002      	beq.n	80099a6 <__sflush_r+0x92>
 80099a0:	4628      	mov	r0, r5
 80099a2:	f000 fd7f 	bl	800a4a4 <_free_r>
 80099a6:	2000      	movs	r0, #0
 80099a8:	6360      	str	r0, [r4, #52]	; 0x34
 80099aa:	e7c1      	b.n	8009930 <__sflush_r+0x1c>
 80099ac:	6a21      	ldr	r1, [r4, #32]
 80099ae:	2301      	movs	r3, #1
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b0      	blx	r6
 80099b4:	1c41      	adds	r1, r0, #1
 80099b6:	d1c7      	bne.n	8009948 <__sflush_r+0x34>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0c4      	beq.n	8009948 <__sflush_r+0x34>
 80099be:	2b1d      	cmp	r3, #29
 80099c0:	d001      	beq.n	80099c6 <__sflush_r+0xb2>
 80099c2:	2b16      	cmp	r3, #22
 80099c4:	d101      	bne.n	80099ca <__sflush_r+0xb6>
 80099c6:	602f      	str	r7, [r5, #0]
 80099c8:	e7b1      	b.n	800992e <__sflush_r+0x1a>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d0:	81a3      	strh	r3, [r4, #12]
 80099d2:	e7ad      	b.n	8009930 <__sflush_r+0x1c>
 80099d4:	690f      	ldr	r7, [r1, #16]
 80099d6:	2f00      	cmp	r7, #0
 80099d8:	d0a9      	beq.n	800992e <__sflush_r+0x1a>
 80099da:	0793      	lsls	r3, r2, #30
 80099dc:	680e      	ldr	r6, [r1, #0]
 80099de:	bf08      	it	eq
 80099e0:	694b      	ldreq	r3, [r1, #20]
 80099e2:	600f      	str	r7, [r1, #0]
 80099e4:	bf18      	it	ne
 80099e6:	2300      	movne	r3, #0
 80099e8:	eba6 0807 	sub.w	r8, r6, r7
 80099ec:	608b      	str	r3, [r1, #8]
 80099ee:	f1b8 0f00 	cmp.w	r8, #0
 80099f2:	dd9c      	ble.n	800992e <__sflush_r+0x1a>
 80099f4:	6a21      	ldr	r1, [r4, #32]
 80099f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099f8:	4643      	mov	r3, r8
 80099fa:	463a      	mov	r2, r7
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b0      	blx	r6
 8009a00:	2800      	cmp	r0, #0
 8009a02:	dc06      	bgt.n	8009a12 <__sflush_r+0xfe>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e78e      	b.n	8009930 <__sflush_r+0x1c>
 8009a12:	4407      	add	r7, r0
 8009a14:	eba8 0800 	sub.w	r8, r8, r0
 8009a18:	e7e9      	b.n	80099ee <__sflush_r+0xda>
 8009a1a:	bf00      	nop
 8009a1c:	20400001 	.word	0x20400001

08009a20 <_fflush_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	690b      	ldr	r3, [r1, #16]
 8009a24:	4605      	mov	r5, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	b913      	cbnz	r3, 8009a30 <_fflush_r+0x10>
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	b118      	cbz	r0, 8009a3a <_fflush_r+0x1a>
 8009a32:	6983      	ldr	r3, [r0, #24]
 8009a34:	b90b      	cbnz	r3, 8009a3a <_fflush_r+0x1a>
 8009a36:	f000 f887 	bl	8009b48 <__sinit>
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <_fflush_r+0x6c>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d11b      	bne.n	8009a78 <_fflush_r+0x58>
 8009a40:	686c      	ldr	r4, [r5, #4]
 8009a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0ef      	beq.n	8009a2a <_fflush_r+0xa>
 8009a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a4c:	07d0      	lsls	r0, r2, #31
 8009a4e:	d404      	bmi.n	8009a5a <_fflush_r+0x3a>
 8009a50:	0599      	lsls	r1, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_fflush_r+0x3a>
 8009a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a56:	f000 f91a 	bl	8009c8e <__retarget_lock_acquire_recursive>
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	f7ff ff59 	bl	8009914 <__sflush_r>
 8009a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a64:	07da      	lsls	r2, r3, #31
 8009a66:	4605      	mov	r5, r0
 8009a68:	d4e0      	bmi.n	8009a2c <_fflush_r+0xc>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	059b      	lsls	r3, r3, #22
 8009a6e:	d4dd      	bmi.n	8009a2c <_fflush_r+0xc>
 8009a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a72:	f000 f90e 	bl	8009c92 <__retarget_lock_release_recursive>
 8009a76:	e7d9      	b.n	8009a2c <_fflush_r+0xc>
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <_fflush_r+0x70>)
 8009a7a:	429c      	cmp	r4, r3
 8009a7c:	d101      	bne.n	8009a82 <_fflush_r+0x62>
 8009a7e:	68ac      	ldr	r4, [r5, #8]
 8009a80:	e7df      	b.n	8009a42 <_fflush_r+0x22>
 8009a82:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <_fflush_r+0x74>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	bf08      	it	eq
 8009a88:	68ec      	ldreq	r4, [r5, #12]
 8009a8a:	e7da      	b.n	8009a42 <_fflush_r+0x22>
 8009a8c:	0800d650 	.word	0x0800d650
 8009a90:	0800d670 	.word	0x0800d670
 8009a94:	0800d630 	.word	0x0800d630

08009a98 <std>:
 8009a98:	2300      	movs	r3, #0
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8009aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aa6:	6083      	str	r3, [r0, #8]
 8009aa8:	8181      	strh	r1, [r0, #12]
 8009aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8009aac:	81c2      	strh	r2, [r0, #14]
 8009aae:	6183      	str	r3, [r0, #24]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	305c      	adds	r0, #92	; 0x5c
 8009ab6:	f7fe f989 	bl	8007dcc <memset>
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <std+0x38>)
 8009abc:	6263      	str	r3, [r4, #36]	; 0x24
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <std+0x3c>)
 8009ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x40>)
 8009ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <std+0x44>)
 8009ac8:	6224      	str	r4, [r4, #32]
 8009aca:	6323      	str	r3, [r4, #48]	; 0x30
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	bf00      	nop
 8009ad0:	0800aa21 	.word	0x0800aa21
 8009ad4:	0800aa43 	.word	0x0800aa43
 8009ad8:	0800aa7b 	.word	0x0800aa7b
 8009adc:	0800aa9f 	.word	0x0800aa9f

08009ae0 <_cleanup_r>:
 8009ae0:	4901      	ldr	r1, [pc, #4]	; (8009ae8 <_cleanup_r+0x8>)
 8009ae2:	f000 b8af 	b.w	8009c44 <_fwalk_reent>
 8009ae6:	bf00      	nop
 8009ae8:	08009a21 	.word	0x08009a21

08009aec <__sfmoreglue>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	2268      	movs	r2, #104	; 0x68
 8009af0:	1e4d      	subs	r5, r1, #1
 8009af2:	4355      	muls	r5, r2
 8009af4:	460e      	mov	r6, r1
 8009af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009afa:	f000 fd3f 	bl	800a57c <_malloc_r>
 8009afe:	4604      	mov	r4, r0
 8009b00:	b140      	cbz	r0, 8009b14 <__sfmoreglue+0x28>
 8009b02:	2100      	movs	r1, #0
 8009b04:	e9c0 1600 	strd	r1, r6, [r0]
 8009b08:	300c      	adds	r0, #12
 8009b0a:	60a0      	str	r0, [r4, #8]
 8009b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b10:	f7fe f95c 	bl	8007dcc <memset>
 8009b14:	4620      	mov	r0, r4
 8009b16:	bd70      	pop	{r4, r5, r6, pc}

08009b18 <__sfp_lock_acquire>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sfp_lock_acquire+0x8>)
 8009b1a:	f000 b8b8 	b.w	8009c8e <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20001a46 	.word	0x20001a46

08009b24 <__sfp_lock_release>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__sfp_lock_release+0x8>)
 8009b26:	f000 b8b4 	b.w	8009c92 <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20001a46 	.word	0x20001a46

08009b30 <__sinit_lock_acquire>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__sinit_lock_acquire+0x8>)
 8009b32:	f000 b8ac 	b.w	8009c8e <__retarget_lock_acquire_recursive>
 8009b36:	bf00      	nop
 8009b38:	20001a47 	.word	0x20001a47

08009b3c <__sinit_lock_release>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__sinit_lock_release+0x8>)
 8009b3e:	f000 b8a8 	b.w	8009c92 <__retarget_lock_release_recursive>
 8009b42:	bf00      	nop
 8009b44:	20001a47 	.word	0x20001a47

08009b48 <__sinit>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	f7ff fff0 	bl	8009b30 <__sinit_lock_acquire>
 8009b50:	69a3      	ldr	r3, [r4, #24]
 8009b52:	b11b      	cbz	r3, 8009b5c <__sinit+0x14>
 8009b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b58:	f7ff bff0 	b.w	8009b3c <__sinit_lock_release>
 8009b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b60:	6523      	str	r3, [r4, #80]	; 0x50
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <__sinit+0x68>)
 8009b64:	4a13      	ldr	r2, [pc, #76]	; (8009bb4 <__sinit+0x6c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	bf04      	itt	eq
 8009b6e:	2301      	moveq	r3, #1
 8009b70:	61a3      	streq	r3, [r4, #24]
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f820 	bl	8009bb8 <__sfp>
 8009b78:	6060      	str	r0, [r4, #4]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 f81c 	bl	8009bb8 <__sfp>
 8009b80:	60a0      	str	r0, [r4, #8]
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 f818 	bl	8009bb8 <__sfp>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	60e0      	str	r0, [r4, #12]
 8009b8c:	2104      	movs	r1, #4
 8009b8e:	6860      	ldr	r0, [r4, #4]
 8009b90:	f7ff ff82 	bl	8009a98 <std>
 8009b94:	68a0      	ldr	r0, [r4, #8]
 8009b96:	2201      	movs	r2, #1
 8009b98:	2109      	movs	r1, #9
 8009b9a:	f7ff ff7d 	bl	8009a98 <std>
 8009b9e:	68e0      	ldr	r0, [r4, #12]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	2112      	movs	r1, #18
 8009ba4:	f7ff ff78 	bl	8009a98 <std>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	61a3      	str	r3, [r4, #24]
 8009bac:	e7d2      	b.n	8009b54 <__sinit+0xc>
 8009bae:	bf00      	nop
 8009bb0:	0800d45c 	.word	0x0800d45c
 8009bb4:	08009ae1 	.word	0x08009ae1

08009bb8 <__sfp>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	4607      	mov	r7, r0
 8009bbc:	f7ff ffac 	bl	8009b18 <__sfp_lock_acquire>
 8009bc0:	4b1e      	ldr	r3, [pc, #120]	; (8009c3c <__sfp+0x84>)
 8009bc2:	681e      	ldr	r6, [r3, #0]
 8009bc4:	69b3      	ldr	r3, [r6, #24]
 8009bc6:	b913      	cbnz	r3, 8009bce <__sfp+0x16>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ffbd 	bl	8009b48 <__sinit>
 8009bce:	3648      	adds	r6, #72	; 0x48
 8009bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	d503      	bpl.n	8009be0 <__sfp+0x28>
 8009bd8:	6833      	ldr	r3, [r6, #0]
 8009bda:	b30b      	cbz	r3, 8009c20 <__sfp+0x68>
 8009bdc:	6836      	ldr	r6, [r6, #0]
 8009bde:	e7f7      	b.n	8009bd0 <__sfp+0x18>
 8009be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009be4:	b9d5      	cbnz	r5, 8009c1c <__sfp+0x64>
 8009be6:	4b16      	ldr	r3, [pc, #88]	; (8009c40 <__sfp+0x88>)
 8009be8:	60e3      	str	r3, [r4, #12]
 8009bea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bee:	6665      	str	r5, [r4, #100]	; 0x64
 8009bf0:	f000 f84c 	bl	8009c8c <__retarget_lock_init_recursive>
 8009bf4:	f7ff ff96 	bl	8009b24 <__sfp_lock_release>
 8009bf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c00:	6025      	str	r5, [r4, #0]
 8009c02:	61a5      	str	r5, [r4, #24]
 8009c04:	2208      	movs	r2, #8
 8009c06:	4629      	mov	r1, r5
 8009c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c0c:	f7fe f8de 	bl	8007dcc <memset>
 8009c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c18:	4620      	mov	r0, r4
 8009c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1c:	3468      	adds	r4, #104	; 0x68
 8009c1e:	e7d9      	b.n	8009bd4 <__sfp+0x1c>
 8009c20:	2104      	movs	r1, #4
 8009c22:	4638      	mov	r0, r7
 8009c24:	f7ff ff62 	bl	8009aec <__sfmoreglue>
 8009c28:	4604      	mov	r4, r0
 8009c2a:	6030      	str	r0, [r6, #0]
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d1d5      	bne.n	8009bdc <__sfp+0x24>
 8009c30:	f7ff ff78 	bl	8009b24 <__sfp_lock_release>
 8009c34:	230c      	movs	r3, #12
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	e7ee      	b.n	8009c18 <__sfp+0x60>
 8009c3a:	bf00      	nop
 8009c3c:	0800d45c 	.word	0x0800d45c
 8009c40:	ffff0001 	.word	0xffff0001

08009c44 <_fwalk_reent>:
 8009c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c48:	4606      	mov	r6, r0
 8009c4a:	4688      	mov	r8, r1
 8009c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c50:	2700      	movs	r7, #0
 8009c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c56:	f1b9 0901 	subs.w	r9, r9, #1
 8009c5a:	d505      	bpl.n	8009c68 <_fwalk_reent+0x24>
 8009c5c:	6824      	ldr	r4, [r4, #0]
 8009c5e:	2c00      	cmp	r4, #0
 8009c60:	d1f7      	bne.n	8009c52 <_fwalk_reent+0xe>
 8009c62:	4638      	mov	r0, r7
 8009c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c68:	89ab      	ldrh	r3, [r5, #12]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d907      	bls.n	8009c7e <_fwalk_reent+0x3a>
 8009c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c72:	3301      	adds	r3, #1
 8009c74:	d003      	beq.n	8009c7e <_fwalk_reent+0x3a>
 8009c76:	4629      	mov	r1, r5
 8009c78:	4630      	mov	r0, r6
 8009c7a:	47c0      	blx	r8
 8009c7c:	4307      	orrs	r7, r0
 8009c7e:	3568      	adds	r5, #104	; 0x68
 8009c80:	e7e9      	b.n	8009c56 <_fwalk_reent+0x12>
	...

08009c84 <_localeconv_r>:
 8009c84:	4800      	ldr	r0, [pc, #0]	; (8009c88 <_localeconv_r+0x4>)
 8009c86:	4770      	bx	lr
 8009c88:	20000ef8 	.word	0x20000ef8

08009c8c <__retarget_lock_init_recursive>:
 8009c8c:	4770      	bx	lr

08009c8e <__retarget_lock_acquire_recursive>:
 8009c8e:	4770      	bx	lr

08009c90 <__retarget_lock_release>:
 8009c90:	4770      	bx	lr

08009c92 <__retarget_lock_release_recursive>:
 8009c92:	4770      	bx	lr

08009c94 <__swhatbuf_r>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	460e      	mov	r6, r1
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	b096      	sub	sp, #88	; 0x58
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	461d      	mov	r5, r3
 8009ca4:	da08      	bge.n	8009cb8 <__swhatbuf_r+0x24>
 8009ca6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	602a      	str	r2, [r5, #0]
 8009cae:	061a      	lsls	r2, r3, #24
 8009cb0:	d410      	bmi.n	8009cd4 <__swhatbuf_r+0x40>
 8009cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb6:	e00e      	b.n	8009cd6 <__swhatbuf_r+0x42>
 8009cb8:	466a      	mov	r2, sp
 8009cba:	f000 ff17 	bl	800aaec <_fstat_r>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	dbf1      	blt.n	8009ca6 <__swhatbuf_r+0x12>
 8009cc2:	9a01      	ldr	r2, [sp, #4]
 8009cc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ccc:	425a      	negs	r2, r3
 8009cce:	415a      	adcs	r2, r3
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	e7ee      	b.n	8009cb2 <__swhatbuf_r+0x1e>
 8009cd4:	2340      	movs	r3, #64	; 0x40
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	b016      	add	sp, #88	; 0x58
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ce0 <__smakebuf_r>:
 8009ce0:	898b      	ldrh	r3, [r1, #12]
 8009ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ce4:	079d      	lsls	r5, r3, #30
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460c      	mov	r4, r1
 8009cea:	d507      	bpl.n	8009cfc <__smakebuf_r+0x1c>
 8009cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	6123      	str	r3, [r4, #16]
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	6163      	str	r3, [r4, #20]
 8009cf8:	b002      	add	sp, #8
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	ab01      	add	r3, sp, #4
 8009cfe:	466a      	mov	r2, sp
 8009d00:	f7ff ffc8 	bl	8009c94 <__swhatbuf_r>
 8009d04:	9900      	ldr	r1, [sp, #0]
 8009d06:	4605      	mov	r5, r0
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 fc37 	bl	800a57c <_malloc_r>
 8009d0e:	b948      	cbnz	r0, 8009d24 <__smakebuf_r+0x44>
 8009d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d14:	059a      	lsls	r2, r3, #22
 8009d16:	d4ef      	bmi.n	8009cf8 <__smakebuf_r+0x18>
 8009d18:	f023 0303 	bic.w	r3, r3, #3
 8009d1c:	f043 0302 	orr.w	r3, r3, #2
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7e3      	b.n	8009cec <__smakebuf_r+0xc>
 8009d24:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <__smakebuf_r+0x7c>)
 8009d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	6020      	str	r0, [r4, #0]
 8009d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	9b00      	ldr	r3, [sp, #0]
 8009d34:	6163      	str	r3, [r4, #20]
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	6120      	str	r0, [r4, #16]
 8009d3a:	b15b      	cbz	r3, 8009d54 <__smakebuf_r+0x74>
 8009d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 fee5 	bl	800ab10 <_isatty_r>
 8009d46:	b128      	cbz	r0, 8009d54 <__smakebuf_r+0x74>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	89a0      	ldrh	r0, [r4, #12]
 8009d56:	4305      	orrs	r5, r0
 8009d58:	81a5      	strh	r5, [r4, #12]
 8009d5a:	e7cd      	b.n	8009cf8 <__smakebuf_r+0x18>
 8009d5c:	08009ae1 	.word	0x08009ae1

08009d60 <malloc>:
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <malloc+0xc>)
 8009d62:	4601      	mov	r1, r0
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f000 bc09 	b.w	800a57c <_malloc_r>
 8009d6a:	bf00      	nop
 8009d6c:	20000da0 	.word	0x20000da0

08009d70 <_Balloc>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	b976      	cbnz	r6, 8009d98 <_Balloc+0x28>
 8009d7a:	2010      	movs	r0, #16
 8009d7c:	f7ff fff0 	bl	8009d60 <malloc>
 8009d80:	4602      	mov	r2, r0
 8009d82:	6260      	str	r0, [r4, #36]	; 0x24
 8009d84:	b920      	cbnz	r0, 8009d90 <_Balloc+0x20>
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <_Balloc+0x78>)
 8009d88:	4818      	ldr	r0, [pc, #96]	; (8009dec <_Balloc+0x7c>)
 8009d8a:	2166      	movs	r1, #102	; 0x66
 8009d8c:	f7fd ff96 	bl	8007cbc <__assert_func>
 8009d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d94:	6006      	str	r6, [r0, #0]
 8009d96:	60c6      	str	r6, [r0, #12]
 8009d98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d9a:	68f3      	ldr	r3, [r6, #12]
 8009d9c:	b183      	cbz	r3, 8009dc0 <_Balloc+0x50>
 8009d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009da6:	b9b8      	cbnz	r0, 8009dd8 <_Balloc+0x68>
 8009da8:	2101      	movs	r1, #1
 8009daa:	fa01 f605 	lsl.w	r6, r1, r5
 8009dae:	1d72      	adds	r2, r6, #5
 8009db0:	0092      	lsls	r2, r2, #2
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fb60 	bl	800a478 <_calloc_r>
 8009db8:	b160      	cbz	r0, 8009dd4 <_Balloc+0x64>
 8009dba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dbe:	e00e      	b.n	8009dde <_Balloc+0x6e>
 8009dc0:	2221      	movs	r2, #33	; 0x21
 8009dc2:	2104      	movs	r1, #4
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fb57 	bl	800a478 <_calloc_r>
 8009dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dcc:	60f0      	str	r0, [r6, #12]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e4      	bne.n	8009d9e <_Balloc+0x2e>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	6802      	ldr	r2, [r0, #0]
 8009dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dde:	2300      	movs	r3, #0
 8009de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de4:	e7f7      	b.n	8009dd6 <_Balloc+0x66>
 8009de6:	bf00      	nop
 8009de8:	0800d5ad 	.word	0x0800d5ad
 8009dec:	0800d690 	.word	0x0800d690

08009df0 <_Bfree>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b976      	cbnz	r6, 8009e18 <_Bfree+0x28>
 8009dfa:	2010      	movs	r0, #16
 8009dfc:	f7ff ffb0 	bl	8009d60 <malloc>
 8009e00:	4602      	mov	r2, r0
 8009e02:	6268      	str	r0, [r5, #36]	; 0x24
 8009e04:	b920      	cbnz	r0, 8009e10 <_Bfree+0x20>
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <_Bfree+0x3c>)
 8009e08:	4809      	ldr	r0, [pc, #36]	; (8009e30 <_Bfree+0x40>)
 8009e0a:	218a      	movs	r1, #138	; 0x8a
 8009e0c:	f7fd ff56 	bl	8007cbc <__assert_func>
 8009e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e14:	6006      	str	r6, [r0, #0]
 8009e16:	60c6      	str	r6, [r0, #12]
 8009e18:	b13c      	cbz	r4, 8009e2a <_Bfree+0x3a>
 8009e1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e1c:	6862      	ldr	r2, [r4, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e24:	6021      	str	r1, [r4, #0]
 8009e26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	0800d5ad 	.word	0x0800d5ad
 8009e30:	0800d690 	.word	0x0800d690

08009e34 <__multadd>:
 8009e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	690d      	ldr	r5, [r1, #16]
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	461e      	mov	r6, r3
 8009e40:	f101 0c14 	add.w	ip, r1, #20
 8009e44:	2000      	movs	r0, #0
 8009e46:	f8dc 3000 	ldr.w	r3, [ip]
 8009e4a:	b299      	uxth	r1, r3
 8009e4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009e50:	0c1e      	lsrs	r6, r3, #16
 8009e52:	0c0b      	lsrs	r3, r1, #16
 8009e54:	fb02 3306 	mla	r3, r2, r6, r3
 8009e58:	b289      	uxth	r1, r1
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e60:	4285      	cmp	r5, r0
 8009e62:	f84c 1b04 	str.w	r1, [ip], #4
 8009e66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e6a:	dcec      	bgt.n	8009e46 <__multadd+0x12>
 8009e6c:	b30e      	cbz	r6, 8009eb2 <__multadd+0x7e>
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	42ab      	cmp	r3, r5
 8009e72:	dc19      	bgt.n	8009ea8 <__multadd+0x74>
 8009e74:	6861      	ldr	r1, [r4, #4]
 8009e76:	4638      	mov	r0, r7
 8009e78:	3101      	adds	r1, #1
 8009e7a:	f7ff ff79 	bl	8009d70 <_Balloc>
 8009e7e:	4680      	mov	r8, r0
 8009e80:	b928      	cbnz	r0, 8009e8e <__multadd+0x5a>
 8009e82:	4602      	mov	r2, r0
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <__multadd+0x84>)
 8009e86:	480d      	ldr	r0, [pc, #52]	; (8009ebc <__multadd+0x88>)
 8009e88:	21b5      	movs	r1, #181	; 0xb5
 8009e8a:	f7fd ff17 	bl	8007cbc <__assert_func>
 8009e8e:	6922      	ldr	r2, [r4, #16]
 8009e90:	3202      	adds	r2, #2
 8009e92:	f104 010c 	add.w	r1, r4, #12
 8009e96:	0092      	lsls	r2, r2, #2
 8009e98:	300c      	adds	r0, #12
 8009e9a:	f7fd ff6f 	bl	8007d7c <memcpy>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <_Bfree>
 8009ea6:	4644      	mov	r4, r8
 8009ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eac:	3501      	adds	r5, #1
 8009eae:	615e      	str	r6, [r3, #20]
 8009eb0:	6125      	str	r5, [r4, #16]
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	0800d61f 	.word	0x0800d61f
 8009ebc:	0800d690 	.word	0x0800d690

08009ec0 <__hi0bits>:
 8009ec0:	0c03      	lsrs	r3, r0, #16
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	b9d3      	cbnz	r3, 8009efc <__hi0bits+0x3c>
 8009ec6:	0400      	lsls	r0, r0, #16
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ece:	bf04      	itt	eq
 8009ed0:	0200      	lsleq	r0, r0, #8
 8009ed2:	3308      	addeq	r3, #8
 8009ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ed8:	bf04      	itt	eq
 8009eda:	0100      	lsleq	r0, r0, #4
 8009edc:	3304      	addeq	r3, #4
 8009ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ee2:	bf04      	itt	eq
 8009ee4:	0080      	lsleq	r0, r0, #2
 8009ee6:	3302      	addeq	r3, #2
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db05      	blt.n	8009ef8 <__hi0bits+0x38>
 8009eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ef0:	f103 0301 	add.w	r3, r3, #1
 8009ef4:	bf08      	it	eq
 8009ef6:	2320      	moveq	r3, #32
 8009ef8:	4618      	mov	r0, r3
 8009efa:	4770      	bx	lr
 8009efc:	2300      	movs	r3, #0
 8009efe:	e7e4      	b.n	8009eca <__hi0bits+0xa>

08009f00 <__lo0bits>:
 8009f00:	6803      	ldr	r3, [r0, #0]
 8009f02:	f013 0207 	ands.w	r2, r3, #7
 8009f06:	4601      	mov	r1, r0
 8009f08:	d00b      	beq.n	8009f22 <__lo0bits+0x22>
 8009f0a:	07da      	lsls	r2, r3, #31
 8009f0c:	d423      	bmi.n	8009f56 <__lo0bits+0x56>
 8009f0e:	0798      	lsls	r0, r3, #30
 8009f10:	bf49      	itett	mi
 8009f12:	085b      	lsrmi	r3, r3, #1
 8009f14:	089b      	lsrpl	r3, r3, #2
 8009f16:	2001      	movmi	r0, #1
 8009f18:	600b      	strmi	r3, [r1, #0]
 8009f1a:	bf5c      	itt	pl
 8009f1c:	600b      	strpl	r3, [r1, #0]
 8009f1e:	2002      	movpl	r0, #2
 8009f20:	4770      	bx	lr
 8009f22:	b298      	uxth	r0, r3
 8009f24:	b9a8      	cbnz	r0, 8009f52 <__lo0bits+0x52>
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	2010      	movs	r0, #16
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	b90a      	cbnz	r2, 8009f32 <__lo0bits+0x32>
 8009f2e:	3008      	adds	r0, #8
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	071a      	lsls	r2, r3, #28
 8009f34:	bf04      	itt	eq
 8009f36:	091b      	lsreq	r3, r3, #4
 8009f38:	3004      	addeq	r0, #4
 8009f3a:	079a      	lsls	r2, r3, #30
 8009f3c:	bf04      	itt	eq
 8009f3e:	089b      	lsreq	r3, r3, #2
 8009f40:	3002      	addeq	r0, #2
 8009f42:	07da      	lsls	r2, r3, #31
 8009f44:	d403      	bmi.n	8009f4e <__lo0bits+0x4e>
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	f100 0001 	add.w	r0, r0, #1
 8009f4c:	d005      	beq.n	8009f5a <__lo0bits+0x5a>
 8009f4e:	600b      	str	r3, [r1, #0]
 8009f50:	4770      	bx	lr
 8009f52:	4610      	mov	r0, r2
 8009f54:	e7e9      	b.n	8009f2a <__lo0bits+0x2a>
 8009f56:	2000      	movs	r0, #0
 8009f58:	4770      	bx	lr
 8009f5a:	2020      	movs	r0, #32
 8009f5c:	4770      	bx	lr
	...

08009f60 <__i2b>:
 8009f60:	b510      	push	{r4, lr}
 8009f62:	460c      	mov	r4, r1
 8009f64:	2101      	movs	r1, #1
 8009f66:	f7ff ff03 	bl	8009d70 <_Balloc>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	b928      	cbnz	r0, 8009f7a <__i2b+0x1a>
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <__i2b+0x24>)
 8009f70:	4805      	ldr	r0, [pc, #20]	; (8009f88 <__i2b+0x28>)
 8009f72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f76:	f7fd fea1 	bl	8007cbc <__assert_func>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	6144      	str	r4, [r0, #20]
 8009f7e:	6103      	str	r3, [r0, #16]
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	bf00      	nop
 8009f84:	0800d61f 	.word	0x0800d61f
 8009f88:	0800d690 	.word	0x0800d690

08009f8c <__multiply>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	4691      	mov	r9, r2
 8009f92:	690a      	ldr	r2, [r1, #16]
 8009f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	bfb8      	it	lt
 8009f9c:	460b      	movlt	r3, r1
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	bfbc      	itt	lt
 8009fa2:	464c      	movlt	r4, r9
 8009fa4:	4699      	movlt	r9, r3
 8009fa6:	6927      	ldr	r7, [r4, #16]
 8009fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	6861      	ldr	r1, [r4, #4]
 8009fb0:	eb07 060a 	add.w	r6, r7, sl
 8009fb4:	42b3      	cmp	r3, r6
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	bfb8      	it	lt
 8009fba:	3101      	addlt	r1, #1
 8009fbc:	f7ff fed8 	bl	8009d70 <_Balloc>
 8009fc0:	b930      	cbnz	r0, 8009fd0 <__multiply+0x44>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4b44      	ldr	r3, [pc, #272]	; (800a0d8 <__multiply+0x14c>)
 8009fc6:	4845      	ldr	r0, [pc, #276]	; (800a0dc <__multiply+0x150>)
 8009fc8:	f240 115d 	movw	r1, #349	; 0x15d
 8009fcc:	f7fd fe76 	bl	8007cbc <__assert_func>
 8009fd0:	f100 0514 	add.w	r5, r0, #20
 8009fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fd8:	462b      	mov	r3, r5
 8009fda:	2200      	movs	r2, #0
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	d321      	bcc.n	800a024 <__multiply+0x98>
 8009fe0:	f104 0314 	add.w	r3, r4, #20
 8009fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fe8:	f109 0314 	add.w	r3, r9, #20
 8009fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	1b3a      	subs	r2, r7, r4
 8009ff4:	3a15      	subs	r2, #21
 8009ff6:	f022 0203 	bic.w	r2, r2, #3
 8009ffa:	3204      	adds	r2, #4
 8009ffc:	f104 0115 	add.w	r1, r4, #21
 800a000:	428f      	cmp	r7, r1
 800a002:	bf38      	it	cc
 800a004:	2204      	movcc	r2, #4
 800a006:	9201      	str	r2, [sp, #4]
 800a008:	9a02      	ldr	r2, [sp, #8]
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d80c      	bhi.n	800a02a <__multiply+0x9e>
 800a010:	2e00      	cmp	r6, #0
 800a012:	dd03      	ble.n	800a01c <__multiply+0x90>
 800a014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d05a      	beq.n	800a0d2 <__multiply+0x146>
 800a01c:	6106      	str	r6, [r0, #16]
 800a01e:	b005      	add	sp, #20
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	f843 2b04 	str.w	r2, [r3], #4
 800a028:	e7d8      	b.n	8009fdc <__multiply+0x50>
 800a02a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a02e:	f1ba 0f00 	cmp.w	sl, #0
 800a032:	d024      	beq.n	800a07e <__multiply+0xf2>
 800a034:	f104 0e14 	add.w	lr, r4, #20
 800a038:	46a9      	mov	r9, r5
 800a03a:	f04f 0c00 	mov.w	ip, #0
 800a03e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a042:	f8d9 1000 	ldr.w	r1, [r9]
 800a046:	fa1f fb82 	uxth.w	fp, r2
 800a04a:	b289      	uxth	r1, r1
 800a04c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a054:	f8d9 2000 	ldr.w	r2, [r9]
 800a058:	4461      	add	r1, ip
 800a05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a05e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a066:	b289      	uxth	r1, r1
 800a068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a06c:	4577      	cmp	r7, lr
 800a06e:	f849 1b04 	str.w	r1, [r9], #4
 800a072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a076:	d8e2      	bhi.n	800a03e <__multiply+0xb2>
 800a078:	9a01      	ldr	r2, [sp, #4]
 800a07a:	f845 c002 	str.w	ip, [r5, r2]
 800a07e:	9a03      	ldr	r2, [sp, #12]
 800a080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a084:	3304      	adds	r3, #4
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	d020      	beq.n	800a0ce <__multiply+0x142>
 800a08c:	6829      	ldr	r1, [r5, #0]
 800a08e:	f104 0c14 	add.w	ip, r4, #20
 800a092:	46ae      	mov	lr, r5
 800a094:	f04f 0a00 	mov.w	sl, #0
 800a098:	f8bc b000 	ldrh.w	fp, [ip]
 800a09c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a0a4:	4492      	add	sl, r2
 800a0a6:	b289      	uxth	r1, r1
 800a0a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0ac:	f84e 1b04 	str.w	r1, [lr], #4
 800a0b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a0b8:	0c12      	lsrs	r2, r2, #16
 800a0ba:	fb09 1102 	mla	r1, r9, r2, r1
 800a0be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0c2:	4567      	cmp	r7, ip
 800a0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0c8:	d8e6      	bhi.n	800a098 <__multiply+0x10c>
 800a0ca:	9a01      	ldr	r2, [sp, #4]
 800a0cc:	50a9      	str	r1, [r5, r2]
 800a0ce:	3504      	adds	r5, #4
 800a0d0:	e79a      	b.n	800a008 <__multiply+0x7c>
 800a0d2:	3e01      	subs	r6, #1
 800a0d4:	e79c      	b.n	800a010 <__multiply+0x84>
 800a0d6:	bf00      	nop
 800a0d8:	0800d61f 	.word	0x0800d61f
 800a0dc:	0800d690 	.word	0x0800d690

0800a0e0 <__pow5mult>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	f012 0203 	ands.w	r2, r2, #3
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	d007      	beq.n	800a100 <__pow5mult+0x20>
 800a0f0:	4c25      	ldr	r4, [pc, #148]	; (800a188 <__pow5mult+0xa8>)
 800a0f2:	3a01      	subs	r2, #1
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0fa:	f7ff fe9b 	bl	8009e34 <__multadd>
 800a0fe:	4607      	mov	r7, r0
 800a100:	10ad      	asrs	r5, r5, #2
 800a102:	d03d      	beq.n	800a180 <__pow5mult+0xa0>
 800a104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a106:	b97c      	cbnz	r4, 800a128 <__pow5mult+0x48>
 800a108:	2010      	movs	r0, #16
 800a10a:	f7ff fe29 	bl	8009d60 <malloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	6270      	str	r0, [r6, #36]	; 0x24
 800a112:	b928      	cbnz	r0, 800a120 <__pow5mult+0x40>
 800a114:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <__pow5mult+0xac>)
 800a116:	481e      	ldr	r0, [pc, #120]	; (800a190 <__pow5mult+0xb0>)
 800a118:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a11c:	f7fd fdce 	bl	8007cbc <__assert_func>
 800a120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a124:	6004      	str	r4, [r0, #0]
 800a126:	60c4      	str	r4, [r0, #12]
 800a128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a130:	b94c      	cbnz	r4, 800a146 <__pow5mult+0x66>
 800a132:	f240 2171 	movw	r1, #625	; 0x271
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ff12 	bl	8009f60 <__i2b>
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a142:	4604      	mov	r4, r0
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	f04f 0900 	mov.w	r9, #0
 800a14a:	07eb      	lsls	r3, r5, #31
 800a14c:	d50a      	bpl.n	800a164 <__pow5mult+0x84>
 800a14e:	4639      	mov	r1, r7
 800a150:	4622      	mov	r2, r4
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ff1a 	bl	8009f8c <__multiply>
 800a158:	4639      	mov	r1, r7
 800a15a:	4680      	mov	r8, r0
 800a15c:	4630      	mov	r0, r6
 800a15e:	f7ff fe47 	bl	8009df0 <_Bfree>
 800a162:	4647      	mov	r7, r8
 800a164:	106d      	asrs	r5, r5, #1
 800a166:	d00b      	beq.n	800a180 <__pow5mult+0xa0>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	b938      	cbnz	r0, 800a17c <__pow5mult+0x9c>
 800a16c:	4622      	mov	r2, r4
 800a16e:	4621      	mov	r1, r4
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff ff0b 	bl	8009f8c <__multiply>
 800a176:	6020      	str	r0, [r4, #0]
 800a178:	f8c0 9000 	str.w	r9, [r0]
 800a17c:	4604      	mov	r4, r0
 800a17e:	e7e4      	b.n	800a14a <__pow5mult+0x6a>
 800a180:	4638      	mov	r0, r7
 800a182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a186:	bf00      	nop
 800a188:	0800d7e0 	.word	0x0800d7e0
 800a18c:	0800d5ad 	.word	0x0800d5ad
 800a190:	0800d690 	.word	0x0800d690

0800a194 <__lshift>:
 800a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	6849      	ldr	r1, [r1, #4]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4691      	mov	r9, r2
 800a1a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1ac:	f108 0601 	add.w	r6, r8, #1
 800a1b0:	42b3      	cmp	r3, r6
 800a1b2:	db0b      	blt.n	800a1cc <__lshift+0x38>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fddb 	bl	8009d70 <_Balloc>
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	b948      	cbnz	r0, 800a1d2 <__lshift+0x3e>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b2a      	ldr	r3, [pc, #168]	; (800a26c <__lshift+0xd8>)
 800a1c2:	482b      	ldr	r0, [pc, #172]	; (800a270 <__lshift+0xdc>)
 800a1c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1c8:	f7fd fd78 	bl	8007cbc <__assert_func>
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	e7ee      	b.n	800a1b0 <__lshift+0x1c>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f100 0114 	add.w	r1, r0, #20
 800a1d8:	f100 0210 	add.w	r2, r0, #16
 800a1dc:	4618      	mov	r0, r3
 800a1de:	4553      	cmp	r3, sl
 800a1e0:	db37      	blt.n	800a252 <__lshift+0xbe>
 800a1e2:	6920      	ldr	r0, [r4, #16]
 800a1e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1e8:	f104 0314 	add.w	r3, r4, #20
 800a1ec:	f019 091f 	ands.w	r9, r9, #31
 800a1f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1f8:	d02f      	beq.n	800a25a <__lshift+0xc6>
 800a1fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a1fe:	468a      	mov	sl, r1
 800a200:	f04f 0c00 	mov.w	ip, #0
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	fa02 f209 	lsl.w	r2, r2, r9
 800a20a:	ea42 020c 	orr.w	r2, r2, ip
 800a20e:	f84a 2b04 	str.w	r2, [sl], #4
 800a212:	f853 2b04 	ldr.w	r2, [r3], #4
 800a216:	4298      	cmp	r0, r3
 800a218:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a21c:	d8f2      	bhi.n	800a204 <__lshift+0x70>
 800a21e:	1b03      	subs	r3, r0, r4
 800a220:	3b15      	subs	r3, #21
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	3304      	adds	r3, #4
 800a228:	f104 0215 	add.w	r2, r4, #21
 800a22c:	4290      	cmp	r0, r2
 800a22e:	bf38      	it	cc
 800a230:	2304      	movcc	r3, #4
 800a232:	f841 c003 	str.w	ip, [r1, r3]
 800a236:	f1bc 0f00 	cmp.w	ip, #0
 800a23a:	d001      	beq.n	800a240 <__lshift+0xac>
 800a23c:	f108 0602 	add.w	r6, r8, #2
 800a240:	3e01      	subs	r6, #1
 800a242:	4638      	mov	r0, r7
 800a244:	612e      	str	r6, [r5, #16]
 800a246:	4621      	mov	r1, r4
 800a248:	f7ff fdd2 	bl	8009df0 <_Bfree>
 800a24c:	4628      	mov	r0, r5
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	f842 0f04 	str.w	r0, [r2, #4]!
 800a256:	3301      	adds	r3, #1
 800a258:	e7c1      	b.n	800a1de <__lshift+0x4a>
 800a25a:	3904      	subs	r1, #4
 800a25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a260:	f841 2f04 	str.w	r2, [r1, #4]!
 800a264:	4298      	cmp	r0, r3
 800a266:	d8f9      	bhi.n	800a25c <__lshift+0xc8>
 800a268:	e7ea      	b.n	800a240 <__lshift+0xac>
 800a26a:	bf00      	nop
 800a26c:	0800d61f 	.word	0x0800d61f
 800a270:	0800d690 	.word	0x0800d690

0800a274 <__mcmp>:
 800a274:	b530      	push	{r4, r5, lr}
 800a276:	6902      	ldr	r2, [r0, #16]
 800a278:	690c      	ldr	r4, [r1, #16]
 800a27a:	1b12      	subs	r2, r2, r4
 800a27c:	d10e      	bne.n	800a29c <__mcmp+0x28>
 800a27e:	f100 0314 	add.w	r3, r0, #20
 800a282:	3114      	adds	r1, #20
 800a284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a28c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a294:	42a5      	cmp	r5, r4
 800a296:	d003      	beq.n	800a2a0 <__mcmp+0x2c>
 800a298:	d305      	bcc.n	800a2a6 <__mcmp+0x32>
 800a29a:	2201      	movs	r2, #1
 800a29c:	4610      	mov	r0, r2
 800a29e:	bd30      	pop	{r4, r5, pc}
 800a2a0:	4283      	cmp	r3, r0
 800a2a2:	d3f3      	bcc.n	800a28c <__mcmp+0x18>
 800a2a4:	e7fa      	b.n	800a29c <__mcmp+0x28>
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	e7f7      	b.n	800a29c <__mcmp+0x28>

0800a2ac <__mdiff>:
 800a2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4690      	mov	r8, r2
 800a2ba:	f7ff ffdb 	bl	800a274 <__mcmp>
 800a2be:	1e05      	subs	r5, r0, #0
 800a2c0:	d110      	bne.n	800a2e4 <__mdiff+0x38>
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff fd53 	bl	8009d70 <_Balloc>
 800a2ca:	b930      	cbnz	r0, 800a2da <__mdiff+0x2e>
 800a2cc:	4b3a      	ldr	r3, [pc, #232]	; (800a3b8 <__mdiff+0x10c>)
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f240 2132 	movw	r1, #562	; 0x232
 800a2d4:	4839      	ldr	r0, [pc, #228]	; (800a3bc <__mdiff+0x110>)
 800a2d6:	f7fd fcf1 	bl	8007cbc <__assert_func>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e4:	bfa4      	itt	ge
 800a2e6:	4643      	movge	r3, r8
 800a2e8:	46a0      	movge	r8, r4
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2f0:	bfa6      	itte	ge
 800a2f2:	461c      	movge	r4, r3
 800a2f4:	2500      	movge	r5, #0
 800a2f6:	2501      	movlt	r5, #1
 800a2f8:	f7ff fd3a 	bl	8009d70 <_Balloc>
 800a2fc:	b920      	cbnz	r0, 800a308 <__mdiff+0x5c>
 800a2fe:	4b2e      	ldr	r3, [pc, #184]	; (800a3b8 <__mdiff+0x10c>)
 800a300:	4602      	mov	r2, r0
 800a302:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a306:	e7e5      	b.n	800a2d4 <__mdiff+0x28>
 800a308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a30c:	6926      	ldr	r6, [r4, #16]
 800a30e:	60c5      	str	r5, [r0, #12]
 800a310:	f104 0914 	add.w	r9, r4, #20
 800a314:	f108 0514 	add.w	r5, r8, #20
 800a318:	f100 0e14 	add.w	lr, r0, #20
 800a31c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a324:	f108 0210 	add.w	r2, r8, #16
 800a328:	46f2      	mov	sl, lr
 800a32a:	2100      	movs	r1, #0
 800a32c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a334:	fa1f f883 	uxth.w	r8, r3
 800a338:	fa11 f18b 	uxtah	r1, r1, fp
 800a33c:	0c1b      	lsrs	r3, r3, #16
 800a33e:	eba1 0808 	sub.w	r8, r1, r8
 800a342:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a346:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a34a:	fa1f f888 	uxth.w	r8, r8
 800a34e:	1419      	asrs	r1, r3, #16
 800a350:	454e      	cmp	r6, r9
 800a352:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a356:	f84a 3b04 	str.w	r3, [sl], #4
 800a35a:	d8e7      	bhi.n	800a32c <__mdiff+0x80>
 800a35c:	1b33      	subs	r3, r6, r4
 800a35e:	3b15      	subs	r3, #21
 800a360:	f023 0303 	bic.w	r3, r3, #3
 800a364:	3304      	adds	r3, #4
 800a366:	3415      	adds	r4, #21
 800a368:	42a6      	cmp	r6, r4
 800a36a:	bf38      	it	cc
 800a36c:	2304      	movcc	r3, #4
 800a36e:	441d      	add	r5, r3
 800a370:	4473      	add	r3, lr
 800a372:	469e      	mov	lr, r3
 800a374:	462e      	mov	r6, r5
 800a376:	4566      	cmp	r6, ip
 800a378:	d30e      	bcc.n	800a398 <__mdiff+0xec>
 800a37a:	f10c 0203 	add.w	r2, ip, #3
 800a37e:	1b52      	subs	r2, r2, r5
 800a380:	f022 0203 	bic.w	r2, r2, #3
 800a384:	3d03      	subs	r5, #3
 800a386:	45ac      	cmp	ip, r5
 800a388:	bf38      	it	cc
 800a38a:	2200      	movcc	r2, #0
 800a38c:	441a      	add	r2, r3
 800a38e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a392:	b17b      	cbz	r3, 800a3b4 <__mdiff+0x108>
 800a394:	6107      	str	r7, [r0, #16]
 800a396:	e7a3      	b.n	800a2e0 <__mdiff+0x34>
 800a398:	f856 8b04 	ldr.w	r8, [r6], #4
 800a39c:	fa11 f288 	uxtah	r2, r1, r8
 800a3a0:	1414      	asrs	r4, r2, #16
 800a3a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3a6:	b292      	uxth	r2, r2
 800a3a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3ac:	f84e 2b04 	str.w	r2, [lr], #4
 800a3b0:	1421      	asrs	r1, r4, #16
 800a3b2:	e7e0      	b.n	800a376 <__mdiff+0xca>
 800a3b4:	3f01      	subs	r7, #1
 800a3b6:	e7ea      	b.n	800a38e <__mdiff+0xe2>
 800a3b8:	0800d61f 	.word	0x0800d61f
 800a3bc:	0800d690 	.word	0x0800d690

0800a3c0 <__d2b>:
 800a3c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	ec57 6b10 	vmov	r6, r7, d0
 800a3cc:	4690      	mov	r8, r2
 800a3ce:	f7ff fccf 	bl	8009d70 <_Balloc>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	b930      	cbnz	r0, 800a3e4 <__d2b+0x24>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b25      	ldr	r3, [pc, #148]	; (800a470 <__d2b+0xb0>)
 800a3da:	4826      	ldr	r0, [pc, #152]	; (800a474 <__d2b+0xb4>)
 800a3dc:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e0:	f7fd fc6c 	bl	8007cbc <__assert_func>
 800a3e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3ec:	bb35      	cbnz	r5, 800a43c <__d2b+0x7c>
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	d028      	beq.n	800a446 <__d2b+0x86>
 800a3f4:	4668      	mov	r0, sp
 800a3f6:	9600      	str	r6, [sp, #0]
 800a3f8:	f7ff fd82 	bl	8009f00 <__lo0bits>
 800a3fc:	9900      	ldr	r1, [sp, #0]
 800a3fe:	b300      	cbz	r0, 800a442 <__d2b+0x82>
 800a400:	9a01      	ldr	r2, [sp, #4]
 800a402:	f1c0 0320 	rsb	r3, r0, #32
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	430b      	orrs	r3, r1
 800a40c:	40c2      	lsrs	r2, r0
 800a40e:	6163      	str	r3, [r4, #20]
 800a410:	9201      	str	r2, [sp, #4]
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	61a3      	str	r3, [r4, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf14      	ite	ne
 800a41a:	2202      	movne	r2, #2
 800a41c:	2201      	moveq	r2, #1
 800a41e:	6122      	str	r2, [r4, #16]
 800a420:	b1d5      	cbz	r5, 800a458 <__d2b+0x98>
 800a422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a426:	4405      	add	r5, r0
 800a428:	f8c9 5000 	str.w	r5, [r9]
 800a42c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a430:	f8c8 0000 	str.w	r0, [r8]
 800a434:	4620      	mov	r0, r4
 800a436:	b003      	add	sp, #12
 800a438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a43c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a440:	e7d5      	b.n	800a3ee <__d2b+0x2e>
 800a442:	6161      	str	r1, [r4, #20]
 800a444:	e7e5      	b.n	800a412 <__d2b+0x52>
 800a446:	a801      	add	r0, sp, #4
 800a448:	f7ff fd5a 	bl	8009f00 <__lo0bits>
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	6163      	str	r3, [r4, #20]
 800a450:	2201      	movs	r2, #1
 800a452:	6122      	str	r2, [r4, #16]
 800a454:	3020      	adds	r0, #32
 800a456:	e7e3      	b.n	800a420 <__d2b+0x60>
 800a458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a45c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a460:	f8c9 0000 	str.w	r0, [r9]
 800a464:	6918      	ldr	r0, [r3, #16]
 800a466:	f7ff fd2b 	bl	8009ec0 <__hi0bits>
 800a46a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a46e:	e7df      	b.n	800a430 <__d2b+0x70>
 800a470:	0800d61f 	.word	0x0800d61f
 800a474:	0800d690 	.word	0x0800d690

0800a478 <_calloc_r>:
 800a478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47a:	fba1 2402 	umull	r2, r4, r1, r2
 800a47e:	b94c      	cbnz	r4, 800a494 <_calloc_r+0x1c>
 800a480:	4611      	mov	r1, r2
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	f000 f87a 	bl	800a57c <_malloc_r>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	4605      	mov	r5, r0
 800a48c:	b930      	cbnz	r0, 800a49c <_calloc_r+0x24>
 800a48e:	4628      	mov	r0, r5
 800a490:	b003      	add	sp, #12
 800a492:	bd30      	pop	{r4, r5, pc}
 800a494:	220c      	movs	r2, #12
 800a496:	6002      	str	r2, [r0, #0]
 800a498:	2500      	movs	r5, #0
 800a49a:	e7f8      	b.n	800a48e <_calloc_r+0x16>
 800a49c:	4621      	mov	r1, r4
 800a49e:	f7fd fc95 	bl	8007dcc <memset>
 800a4a2:	e7f4      	b.n	800a48e <_calloc_r+0x16>

0800a4a4 <_free_r>:
 800a4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d044      	beq.n	800a534 <_free_r+0x90>
 800a4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ae:	9001      	str	r0, [sp, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4b6:	bfb8      	it	lt
 800a4b8:	18e4      	addlt	r4, r4, r3
 800a4ba:	f000 fb5d 	bl	800ab78 <__malloc_lock>
 800a4be:	4a1e      	ldr	r2, [pc, #120]	; (800a538 <_free_r+0x94>)
 800a4c0:	9801      	ldr	r0, [sp, #4]
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	b933      	cbnz	r3, 800a4d4 <_free_r+0x30>
 800a4c6:	6063      	str	r3, [r4, #4]
 800a4c8:	6014      	str	r4, [r2, #0]
 800a4ca:	b003      	add	sp, #12
 800a4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d0:	f000 bb58 	b.w	800ab84 <__malloc_unlock>
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d908      	bls.n	800a4ea <_free_r+0x46>
 800a4d8:	6825      	ldr	r5, [r4, #0]
 800a4da:	1961      	adds	r1, r4, r5
 800a4dc:	428b      	cmp	r3, r1
 800a4de:	bf01      	itttt	eq
 800a4e0:	6819      	ldreq	r1, [r3, #0]
 800a4e2:	685b      	ldreq	r3, [r3, #4]
 800a4e4:	1949      	addeq	r1, r1, r5
 800a4e6:	6021      	streq	r1, [r4, #0]
 800a4e8:	e7ed      	b.n	800a4c6 <_free_r+0x22>
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b10b      	cbz	r3, 800a4f4 <_free_r+0x50>
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x46>
 800a4f4:	6811      	ldr	r1, [r2, #0]
 800a4f6:	1855      	adds	r5, r2, r1
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x70>
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	4421      	add	r1, r4
 800a500:	1854      	adds	r4, r2, r1
 800a502:	42a3      	cmp	r3, r4
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	d1e0      	bne.n	800a4ca <_free_r+0x26>
 800a508:	681c      	ldr	r4, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6053      	str	r3, [r2, #4]
 800a50e:	4421      	add	r1, r4
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	e7da      	b.n	800a4ca <_free_r+0x26>
 800a514:	d902      	bls.n	800a51c <_free_r+0x78>
 800a516:	230c      	movs	r3, #12
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	e7d6      	b.n	800a4ca <_free_r+0x26>
 800a51c:	6825      	ldr	r5, [r4, #0]
 800a51e:	1961      	adds	r1, r4, r5
 800a520:	428b      	cmp	r3, r1
 800a522:	bf04      	itt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	6054      	str	r4, [r2, #4]
 800a532:	e7ca      	b.n	800a4ca <_free_r+0x26>
 800a534:	b003      	add	sp, #12
 800a536:	bd30      	pop	{r4, r5, pc}
 800a538:	20001a48 	.word	0x20001a48

0800a53c <sbrk_aligned>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4e0e      	ldr	r6, [pc, #56]	; (800a578 <sbrk_aligned+0x3c>)
 800a540:	460c      	mov	r4, r1
 800a542:	6831      	ldr	r1, [r6, #0]
 800a544:	4605      	mov	r5, r0
 800a546:	b911      	cbnz	r1, 800a54e <sbrk_aligned+0x12>
 800a548:	f000 fa16 	bl	800a978 <_sbrk_r>
 800a54c:	6030      	str	r0, [r6, #0]
 800a54e:	4621      	mov	r1, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f000 fa11 	bl	800a978 <_sbrk_r>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d00a      	beq.n	800a570 <sbrk_aligned+0x34>
 800a55a:	1cc4      	adds	r4, r0, #3
 800a55c:	f024 0403 	bic.w	r4, r4, #3
 800a560:	42a0      	cmp	r0, r4
 800a562:	d007      	beq.n	800a574 <sbrk_aligned+0x38>
 800a564:	1a21      	subs	r1, r4, r0
 800a566:	4628      	mov	r0, r5
 800a568:	f000 fa06 	bl	800a978 <_sbrk_r>
 800a56c:	3001      	adds	r0, #1
 800a56e:	d101      	bne.n	800a574 <sbrk_aligned+0x38>
 800a570:	f04f 34ff 	mov.w	r4, #4294967295
 800a574:	4620      	mov	r0, r4
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	20001a4c 	.word	0x20001a4c

0800a57c <_malloc_r>:
 800a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a580:	1ccd      	adds	r5, r1, #3
 800a582:	f025 0503 	bic.w	r5, r5, #3
 800a586:	3508      	adds	r5, #8
 800a588:	2d0c      	cmp	r5, #12
 800a58a:	bf38      	it	cc
 800a58c:	250c      	movcc	r5, #12
 800a58e:	2d00      	cmp	r5, #0
 800a590:	4607      	mov	r7, r0
 800a592:	db01      	blt.n	800a598 <_malloc_r+0x1c>
 800a594:	42a9      	cmp	r1, r5
 800a596:	d905      	bls.n	800a5a4 <_malloc_r+0x28>
 800a598:	230c      	movs	r3, #12
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	2600      	movs	r6, #0
 800a59e:	4630      	mov	r0, r6
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	4e2e      	ldr	r6, [pc, #184]	; (800a660 <_malloc_r+0xe4>)
 800a5a6:	f000 fae7 	bl	800ab78 <__malloc_lock>
 800a5aa:	6833      	ldr	r3, [r6, #0]
 800a5ac:	461c      	mov	r4, r3
 800a5ae:	bb34      	cbnz	r4, 800a5fe <_malloc_r+0x82>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f7ff ffc2 	bl	800a53c <sbrk_aligned>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	d14d      	bne.n	800a65a <_malloc_r+0xde>
 800a5be:	6834      	ldr	r4, [r6, #0]
 800a5c0:	4626      	mov	r6, r4
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	d140      	bne.n	800a648 <_malloc_r+0xcc>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	eb04 0803 	add.w	r8, r4, r3
 800a5d0:	f000 f9d2 	bl	800a978 <_sbrk_r>
 800a5d4:	4580      	cmp	r8, r0
 800a5d6:	d13a      	bne.n	800a64e <_malloc_r+0xd2>
 800a5d8:	6821      	ldr	r1, [r4, #0]
 800a5da:	3503      	adds	r5, #3
 800a5dc:	1a6d      	subs	r5, r5, r1
 800a5de:	f025 0503 	bic.w	r5, r5, #3
 800a5e2:	3508      	adds	r5, #8
 800a5e4:	2d0c      	cmp	r5, #12
 800a5e6:	bf38      	it	cc
 800a5e8:	250c      	movcc	r5, #12
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff ffa5 	bl	800a53c <sbrk_aligned>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d02b      	beq.n	800a64e <_malloc_r+0xd2>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	442b      	add	r3, r5
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	e00e      	b.n	800a61c <_malloc_r+0xa0>
 800a5fe:	6822      	ldr	r2, [r4, #0]
 800a600:	1b52      	subs	r2, r2, r5
 800a602:	d41e      	bmi.n	800a642 <_malloc_r+0xc6>
 800a604:	2a0b      	cmp	r2, #11
 800a606:	d916      	bls.n	800a636 <_malloc_r+0xba>
 800a608:	1961      	adds	r1, r4, r5
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	6025      	str	r5, [r4, #0]
 800a60e:	bf18      	it	ne
 800a610:	6059      	strne	r1, [r3, #4]
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	bf08      	it	eq
 800a616:	6031      	streq	r1, [r6, #0]
 800a618:	5162      	str	r2, [r4, r5]
 800a61a:	604b      	str	r3, [r1, #4]
 800a61c:	4638      	mov	r0, r7
 800a61e:	f104 060b 	add.w	r6, r4, #11
 800a622:	f000 faaf 	bl	800ab84 <__malloc_unlock>
 800a626:	f026 0607 	bic.w	r6, r6, #7
 800a62a:	1d23      	adds	r3, r4, #4
 800a62c:	1af2      	subs	r2, r6, r3
 800a62e:	d0b6      	beq.n	800a59e <_malloc_r+0x22>
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	50a3      	str	r3, [r4, r2]
 800a634:	e7b3      	b.n	800a59e <_malloc_r+0x22>
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	42a3      	cmp	r3, r4
 800a63a:	bf0c      	ite	eq
 800a63c:	6032      	streq	r2, [r6, #0]
 800a63e:	605a      	strne	r2, [r3, #4]
 800a640:	e7ec      	b.n	800a61c <_malloc_r+0xa0>
 800a642:	4623      	mov	r3, r4
 800a644:	6864      	ldr	r4, [r4, #4]
 800a646:	e7b2      	b.n	800a5ae <_malloc_r+0x32>
 800a648:	4634      	mov	r4, r6
 800a64a:	6876      	ldr	r6, [r6, #4]
 800a64c:	e7b9      	b.n	800a5c2 <_malloc_r+0x46>
 800a64e:	230c      	movs	r3, #12
 800a650:	603b      	str	r3, [r7, #0]
 800a652:	4638      	mov	r0, r7
 800a654:	f000 fa96 	bl	800ab84 <__malloc_unlock>
 800a658:	e7a1      	b.n	800a59e <_malloc_r+0x22>
 800a65a:	6025      	str	r5, [r4, #0]
 800a65c:	e7de      	b.n	800a61c <_malloc_r+0xa0>
 800a65e:	bf00      	nop
 800a660:	20001a48 	.word	0x20001a48

0800a664 <_realloc_r>:
 800a664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a668:	4680      	mov	r8, r0
 800a66a:	4614      	mov	r4, r2
 800a66c:	460e      	mov	r6, r1
 800a66e:	b921      	cbnz	r1, 800a67a <_realloc_r+0x16>
 800a670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a674:	4611      	mov	r1, r2
 800a676:	f7ff bf81 	b.w	800a57c <_malloc_r>
 800a67a:	b92a      	cbnz	r2, 800a688 <_realloc_r+0x24>
 800a67c:	f7ff ff12 	bl	800a4a4 <_free_r>
 800a680:	4625      	mov	r5, r4
 800a682:	4628      	mov	r0, r5
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a688:	f000 fa82 	bl	800ab90 <_malloc_usable_size_r>
 800a68c:	4284      	cmp	r4, r0
 800a68e:	4607      	mov	r7, r0
 800a690:	d802      	bhi.n	800a698 <_realloc_r+0x34>
 800a692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a696:	d812      	bhi.n	800a6be <_realloc_r+0x5a>
 800a698:	4621      	mov	r1, r4
 800a69a:	4640      	mov	r0, r8
 800a69c:	f7ff ff6e 	bl	800a57c <_malloc_r>
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d0ed      	beq.n	800a682 <_realloc_r+0x1e>
 800a6a6:	42bc      	cmp	r4, r7
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	bf28      	it	cs
 800a6ae:	463a      	movcs	r2, r7
 800a6b0:	f7fd fb64 	bl	8007d7c <memcpy>
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	f7ff fef4 	bl	800a4a4 <_free_r>
 800a6bc:	e7e1      	b.n	800a682 <_realloc_r+0x1e>
 800a6be:	4635      	mov	r5, r6
 800a6c0:	e7df      	b.n	800a682 <_realloc_r+0x1e>

0800a6c2 <__ssputs_r>:
 800a6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c6:	688e      	ldr	r6, [r1, #8]
 800a6c8:	429e      	cmp	r6, r3
 800a6ca:	4682      	mov	sl, r0
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	4690      	mov	r8, r2
 800a6d0:	461f      	mov	r7, r3
 800a6d2:	d838      	bhi.n	800a746 <__ssputs_r+0x84>
 800a6d4:	898a      	ldrh	r2, [r1, #12]
 800a6d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6da:	d032      	beq.n	800a742 <__ssputs_r+0x80>
 800a6dc:	6825      	ldr	r5, [r4, #0]
 800a6de:	6909      	ldr	r1, [r1, #16]
 800a6e0:	eba5 0901 	sub.w	r9, r5, r1
 800a6e4:	6965      	ldr	r5, [r4, #20]
 800a6e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	444b      	add	r3, r9
 800a6f2:	106d      	asrs	r5, r5, #1
 800a6f4:	429d      	cmp	r5, r3
 800a6f6:	bf38      	it	cc
 800a6f8:	461d      	movcc	r5, r3
 800a6fa:	0553      	lsls	r3, r2, #21
 800a6fc:	d531      	bpl.n	800a762 <__ssputs_r+0xa0>
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7ff ff3c 	bl	800a57c <_malloc_r>
 800a704:	4606      	mov	r6, r0
 800a706:	b950      	cbnz	r0, 800a71e <__ssputs_r+0x5c>
 800a708:	230c      	movs	r3, #12
 800a70a:	f8ca 3000 	str.w	r3, [sl]
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71e:	6921      	ldr	r1, [r4, #16]
 800a720:	464a      	mov	r2, r9
 800a722:	f7fd fb2b 	bl	8007d7c <memcpy>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	6126      	str	r6, [r4, #16]
 800a734:	6165      	str	r5, [r4, #20]
 800a736:	444e      	add	r6, r9
 800a738:	eba5 0509 	sub.w	r5, r5, r9
 800a73c:	6026      	str	r6, [r4, #0]
 800a73e:	60a5      	str	r5, [r4, #8]
 800a740:	463e      	mov	r6, r7
 800a742:	42be      	cmp	r6, r7
 800a744:	d900      	bls.n	800a748 <__ssputs_r+0x86>
 800a746:	463e      	mov	r6, r7
 800a748:	6820      	ldr	r0, [r4, #0]
 800a74a:	4632      	mov	r2, r6
 800a74c:	4641      	mov	r1, r8
 800a74e:	f7fd fb23 	bl	8007d98 <memmove>
 800a752:	68a3      	ldr	r3, [r4, #8]
 800a754:	1b9b      	subs	r3, r3, r6
 800a756:	60a3      	str	r3, [r4, #8]
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	4433      	add	r3, r6
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	2000      	movs	r0, #0
 800a760:	e7db      	b.n	800a71a <__ssputs_r+0x58>
 800a762:	462a      	mov	r2, r5
 800a764:	f7ff ff7e 	bl	800a664 <_realloc_r>
 800a768:	4606      	mov	r6, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d1e1      	bne.n	800a732 <__ssputs_r+0x70>
 800a76e:	6921      	ldr	r1, [r4, #16]
 800a770:	4650      	mov	r0, sl
 800a772:	f7ff fe97 	bl	800a4a4 <_free_r>
 800a776:	e7c7      	b.n	800a708 <__ssputs_r+0x46>

0800a778 <_svfiprintf_r>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	4698      	mov	r8, r3
 800a77e:	898b      	ldrh	r3, [r1, #12]
 800a780:	061b      	lsls	r3, r3, #24
 800a782:	b09d      	sub	sp, #116	; 0x74
 800a784:	4607      	mov	r7, r0
 800a786:	460d      	mov	r5, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	d50e      	bpl.n	800a7aa <_svfiprintf_r+0x32>
 800a78c:	690b      	ldr	r3, [r1, #16]
 800a78e:	b963      	cbnz	r3, 800a7aa <_svfiprintf_r+0x32>
 800a790:	2140      	movs	r1, #64	; 0x40
 800a792:	f7ff fef3 	bl	800a57c <_malloc_r>
 800a796:	6028      	str	r0, [r5, #0]
 800a798:	6128      	str	r0, [r5, #16]
 800a79a:	b920      	cbnz	r0, 800a7a6 <_svfiprintf_r+0x2e>
 800a79c:	230c      	movs	r3, #12
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	e0d1      	b.n	800a94a <_svfiprintf_r+0x1d2>
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	616b      	str	r3, [r5, #20]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b8:	2330      	movs	r3, #48	; 0x30
 800a7ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a964 <_svfiprintf_r+0x1ec>
 800a7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c2:	f04f 0901 	mov.w	r9, #1
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	b10a      	cbz	r2, 800a7d4 <_svfiprintf_r+0x5c>
 800a7d0:	2a25      	cmp	r2, #37	; 0x25
 800a7d2:	d1f9      	bne.n	800a7c8 <_svfiprintf_r+0x50>
 800a7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d8:	d00b      	beq.n	800a7f2 <_svfiprintf_r+0x7a>
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ff6e 	bl	800a6c2 <__ssputs_r>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f000 80aa 	beq.w	800a940 <_svfiprintf_r+0x1c8>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ee:	445a      	add	r2, fp
 800a7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 80a2 	beq.w	800a940 <_svfiprintf_r+0x1c8>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a806:	f10a 0a01 	add.w	sl, sl, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a812:	931a      	str	r3, [sp, #104]	; 0x68
 800a814:	4654      	mov	r4, sl
 800a816:	2205      	movs	r2, #5
 800a818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81c:	4851      	ldr	r0, [pc, #324]	; (800a964 <_svfiprintf_r+0x1ec>)
 800a81e:	f7f5 fcf7 	bl	8000210 <memchr>
 800a822:	9a04      	ldr	r2, [sp, #16]
 800a824:	b9d8      	cbnz	r0, 800a85e <_svfiprintf_r+0xe6>
 800a826:	06d0      	lsls	r0, r2, #27
 800a828:	bf44      	itt	mi
 800a82a:	2320      	movmi	r3, #32
 800a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a830:	0711      	lsls	r1, r2, #28
 800a832:	bf44      	itt	mi
 800a834:	232b      	movmi	r3, #43	; 0x2b
 800a836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83a:	f89a 3000 	ldrb.w	r3, [sl]
 800a83e:	2b2a      	cmp	r3, #42	; 0x2a
 800a840:	d015      	beq.n	800a86e <_svfiprintf_r+0xf6>
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	4654      	mov	r4, sl
 800a846:	2000      	movs	r0, #0
 800a848:	f04f 0c0a 	mov.w	ip, #10
 800a84c:	4621      	mov	r1, r4
 800a84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a852:	3b30      	subs	r3, #48	; 0x30
 800a854:	2b09      	cmp	r3, #9
 800a856:	d94e      	bls.n	800a8f6 <_svfiprintf_r+0x17e>
 800a858:	b1b0      	cbz	r0, 800a888 <_svfiprintf_r+0x110>
 800a85a:	9207      	str	r2, [sp, #28]
 800a85c:	e014      	b.n	800a888 <_svfiprintf_r+0x110>
 800a85e:	eba0 0308 	sub.w	r3, r0, r8
 800a862:	fa09 f303 	lsl.w	r3, r9, r3
 800a866:	4313      	orrs	r3, r2
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	46a2      	mov	sl, r4
 800a86c:	e7d2      	b.n	800a814 <_svfiprintf_r+0x9c>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d19      	adds	r1, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	9103      	str	r1, [sp, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	bfbb      	ittet	lt
 800a87a:	425b      	neglt	r3, r3
 800a87c:	f042 0202 	orrlt.w	r2, r2, #2
 800a880:	9307      	strge	r3, [sp, #28]
 800a882:	9307      	strlt	r3, [sp, #28]
 800a884:	bfb8      	it	lt
 800a886:	9204      	strlt	r2, [sp, #16]
 800a888:	7823      	ldrb	r3, [r4, #0]
 800a88a:	2b2e      	cmp	r3, #46	; 0x2e
 800a88c:	d10c      	bne.n	800a8a8 <_svfiprintf_r+0x130>
 800a88e:	7863      	ldrb	r3, [r4, #1]
 800a890:	2b2a      	cmp	r3, #42	; 0x2a
 800a892:	d135      	bne.n	800a900 <_svfiprintf_r+0x188>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	9203      	str	r2, [sp, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bfb8      	it	lt
 800a8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a4:	3402      	adds	r4, #2
 800a8a6:	9305      	str	r3, [sp, #20]
 800a8a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a974 <_svfiprintf_r+0x1fc>
 800a8ac:	7821      	ldrb	r1, [r4, #0]
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	f7f5 fcad 	bl	8000210 <memchr>
 800a8b6:	b140      	cbz	r0, 800a8ca <_svfiprintf_r+0x152>
 800a8b8:	2340      	movs	r3, #64	; 0x40
 800a8ba:	eba0 000a 	sub.w	r0, r0, sl
 800a8be:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c2:	9b04      	ldr	r3, [sp, #16]
 800a8c4:	4303      	orrs	r3, r0
 800a8c6:	3401      	adds	r4, #1
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ce:	4826      	ldr	r0, [pc, #152]	; (800a968 <_svfiprintf_r+0x1f0>)
 800a8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d4:	2206      	movs	r2, #6
 800a8d6:	f7f5 fc9b 	bl	8000210 <memchr>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d038      	beq.n	800a950 <_svfiprintf_r+0x1d8>
 800a8de:	4b23      	ldr	r3, [pc, #140]	; (800a96c <_svfiprintf_r+0x1f4>)
 800a8e0:	bb1b      	cbnz	r3, 800a92a <_svfiprintf_r+0x1b2>
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	3307      	adds	r3, #7
 800a8e6:	f023 0307 	bic.w	r3, r3, #7
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	9303      	str	r3, [sp, #12]
 800a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f0:	4433      	add	r3, r6
 800a8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f4:	e767      	b.n	800a7c6 <_svfiprintf_r+0x4e>
 800a8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	2001      	movs	r0, #1
 800a8fe:	e7a5      	b.n	800a84c <_svfiprintf_r+0xd4>
 800a900:	2300      	movs	r3, #0
 800a902:	3401      	adds	r4, #1
 800a904:	9305      	str	r3, [sp, #20]
 800a906:	4619      	mov	r1, r3
 800a908:	f04f 0c0a 	mov.w	ip, #10
 800a90c:	4620      	mov	r0, r4
 800a90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a912:	3a30      	subs	r2, #48	; 0x30
 800a914:	2a09      	cmp	r2, #9
 800a916:	d903      	bls.n	800a920 <_svfiprintf_r+0x1a8>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0c5      	beq.n	800a8a8 <_svfiprintf_r+0x130>
 800a91c:	9105      	str	r1, [sp, #20]
 800a91e:	e7c3      	b.n	800a8a8 <_svfiprintf_r+0x130>
 800a920:	fb0c 2101 	mla	r1, ip, r1, r2
 800a924:	4604      	mov	r4, r0
 800a926:	2301      	movs	r3, #1
 800a928:	e7f0      	b.n	800a90c <_svfiprintf_r+0x194>
 800a92a:	ab03      	add	r3, sp, #12
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	462a      	mov	r2, r5
 800a930:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <_svfiprintf_r+0x1f8>)
 800a932:	a904      	add	r1, sp, #16
 800a934:	4638      	mov	r0, r7
 800a936:	f7fd fc4b 	bl	80081d0 <_printf_float>
 800a93a:	1c42      	adds	r2, r0, #1
 800a93c:	4606      	mov	r6, r0
 800a93e:	d1d6      	bne.n	800a8ee <_svfiprintf_r+0x176>
 800a940:	89ab      	ldrh	r3, [r5, #12]
 800a942:	065b      	lsls	r3, r3, #25
 800a944:	f53f af2c 	bmi.w	800a7a0 <_svfiprintf_r+0x28>
 800a948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94a:	b01d      	add	sp, #116	; 0x74
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	ab03      	add	r3, sp, #12
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	462a      	mov	r2, r5
 800a956:	4b06      	ldr	r3, [pc, #24]	; (800a970 <_svfiprintf_r+0x1f8>)
 800a958:	a904      	add	r1, sp, #16
 800a95a:	4638      	mov	r0, r7
 800a95c:	f7fd fedc 	bl	8008718 <_printf_i>
 800a960:	e7eb      	b.n	800a93a <_svfiprintf_r+0x1c2>
 800a962:	bf00      	nop
 800a964:	0800d460 	.word	0x0800d460
 800a968:	0800d46a 	.word	0x0800d46a
 800a96c:	080081d1 	.word	0x080081d1
 800a970:	0800a6c3 	.word	0x0800a6c3
 800a974:	0800d466 	.word	0x0800d466

0800a978 <_sbrk_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_sbrk_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f6 fefa 	bl	800177c <_sbrk>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_sbrk_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_sbrk_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20001a50 	.word	0x20001a50

0800a998 <_raise_r>:
 800a998:	291f      	cmp	r1, #31
 800a99a:	b538      	push	{r3, r4, r5, lr}
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	d904      	bls.n	800a9ac <_raise_r+0x14>
 800a9a2:	2316      	movs	r3, #22
 800a9a4:	6003      	str	r3, [r0, #0]
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9ae:	b112      	cbz	r2, 800a9b6 <_raise_r+0x1e>
 800a9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <_raise_r+0x32>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 f830 	bl	800aa1c <_getpid_r>
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c6:	f000 b817 	b.w	800a9f8 <_kill_r>
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d00a      	beq.n	800a9e4 <_raise_r+0x4c>
 800a9ce:	1c59      	adds	r1, r3, #1
 800a9d0:	d103      	bne.n	800a9da <_raise_r+0x42>
 800a9d2:	2316      	movs	r3, #22
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	e7e7      	b.n	800a9aa <_raise_r+0x12>
 800a9da:	2400      	movs	r4, #0
 800a9dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	4798      	blx	r3
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e7e0      	b.n	800a9aa <_raise_r+0x12>

0800a9e8 <raise>:
 800a9e8:	4b02      	ldr	r3, [pc, #8]	; (800a9f4 <raise+0xc>)
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f7ff bfd3 	b.w	800a998 <_raise_r>
 800a9f2:	bf00      	nop
 800a9f4:	20000da0 	.word	0x20000da0

0800a9f8 <_kill_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	; (800aa18 <_kill_r+0x20>)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	4611      	mov	r1, r2
 800aa04:	602b      	str	r3, [r5, #0]
 800aa06:	f000 f90b 	bl	800ac20 <_kill>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	d102      	bne.n	800aa14 <_kill_r+0x1c>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	b103      	cbz	r3, 800aa14 <_kill_r+0x1c>
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	20001a50 	.word	0x20001a50

0800aa1c <_getpid_r>:
 800aa1c:	f000 b8f0 	b.w	800ac00 <_getpid>

0800aa20 <__sread>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	f000 f8ba 	bl	800aba0 <_read_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	bfab      	itete	ge
 800aa30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa32:	89a3      	ldrhlt	r3, [r4, #12]
 800aa34:	181b      	addge	r3, r3, r0
 800aa36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa3a:	bfac      	ite	ge
 800aa3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3e:	81a3      	strhlt	r3, [r4, #12]
 800aa40:	bd10      	pop	{r4, pc}

0800aa42 <__swrite>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	461f      	mov	r7, r3
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	05db      	lsls	r3, r3, #23
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4616      	mov	r6, r2
 800aa52:	d505      	bpl.n	800aa60 <__swrite+0x1e>
 800aa54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa58:	2302      	movs	r3, #2
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f000 f868 	bl	800ab30 <_lseek_r>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	463b      	mov	r3, r7
 800aa70:	4628      	mov	r0, r5
 800aa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	f000 b817 	b.w	800aaa8 <_write_r>

0800aa7a <__sseek>:
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa82:	f000 f855 	bl	800ab30 <_lseek_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	bf15      	itete	ne
 800aa8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa96:	81a3      	strheq	r3, [r4, #12]
 800aa98:	bf18      	it	ne
 800aa9a:	81a3      	strhne	r3, [r4, #12]
 800aa9c:	bd10      	pop	{r4, pc}

0800aa9e <__sclose>:
 800aa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa2:	f000 b813 	b.w	800aacc <_close_r>
	...

0800aaa8 <_write_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	; (800aac8 <_write_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f000 f8ca 	bl	800ac50 <_write>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_write_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_write_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20001a50 	.word	0x20001a50

0800aacc <_close_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_close_r+0x1c>)
 800aad0:	2300      	movs	r3, #0
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	f000 f882 	bl	800abe0 <_close>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_close_r+0x1a>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_close_r+0x1a>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	20001a50 	.word	0x20001a50

0800aaec <_fstat_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4d07      	ldr	r5, [pc, #28]	; (800ab0c <_fstat_r+0x20>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	f000 f879 	bl	800abf0 <_fstat>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d102      	bne.n	800ab08 <_fstat_r+0x1c>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	b103      	cbz	r3, 800ab08 <_fstat_r+0x1c>
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20001a50 	.word	0x20001a50

0800ab10 <_isatty_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d06      	ldr	r5, [pc, #24]	; (800ab2c <_isatty_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f000 f878 	bl	800ac10 <_isatty>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_isatty_r+0x1a>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_isatty_r+0x1a>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20001a50 	.word	0x20001a50

0800ab30 <_lseek_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	; (800ab50 <_lseek_r+0x20>)
 800ab34:	4604      	mov	r4, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	4611      	mov	r1, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f000 f876 	bl	800ac30 <_lseek>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_lseek_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_lseek_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20001a50 	.word	0x20001a50

0800ab54 <__ascii_mbtowc>:
 800ab54:	b082      	sub	sp, #8
 800ab56:	b901      	cbnz	r1, 800ab5a <__ascii_mbtowc+0x6>
 800ab58:	a901      	add	r1, sp, #4
 800ab5a:	b142      	cbz	r2, 800ab6e <__ascii_mbtowc+0x1a>
 800ab5c:	b14b      	cbz	r3, 800ab72 <__ascii_mbtowc+0x1e>
 800ab5e:	7813      	ldrb	r3, [r2, #0]
 800ab60:	600b      	str	r3, [r1, #0]
 800ab62:	7812      	ldrb	r2, [r2, #0]
 800ab64:	1e10      	subs	r0, r2, #0
 800ab66:	bf18      	it	ne
 800ab68:	2001      	movne	r0, #1
 800ab6a:	b002      	add	sp, #8
 800ab6c:	4770      	bx	lr
 800ab6e:	4610      	mov	r0, r2
 800ab70:	e7fb      	b.n	800ab6a <__ascii_mbtowc+0x16>
 800ab72:	f06f 0001 	mvn.w	r0, #1
 800ab76:	e7f8      	b.n	800ab6a <__ascii_mbtowc+0x16>

0800ab78 <__malloc_lock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__malloc_lock+0x8>)
 800ab7a:	f7ff b888 	b.w	8009c8e <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20001a45 	.word	0x20001a45

0800ab84 <__malloc_unlock>:
 800ab84:	4801      	ldr	r0, [pc, #4]	; (800ab8c <__malloc_unlock+0x8>)
 800ab86:	f7ff b884 	b.w	8009c92 <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20001a45 	.word	0x20001a45

0800ab90 <_malloc_usable_size_r>:
 800ab90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab94:	1f18      	subs	r0, r3, #4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfbc      	itt	lt
 800ab9a:	580b      	ldrlt	r3, [r1, r0]
 800ab9c:	18c0      	addlt	r0, r0, r3
 800ab9e:	4770      	bx	lr

0800aba0 <_read_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d07      	ldr	r5, [pc, #28]	; (800abc0 <_read_r+0x20>)
 800aba4:	4604      	mov	r4, r0
 800aba6:	4608      	mov	r0, r1
 800aba8:	4611      	mov	r1, r2
 800abaa:	2200      	movs	r2, #0
 800abac:	602a      	str	r2, [r5, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	f000 f846 	bl	800ac40 <_read>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_read_r+0x1e>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_read_r+0x1e>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	20001a50 	.word	0x20001a50

0800abc4 <__ascii_wctomb>:
 800abc4:	b149      	cbz	r1, 800abda <__ascii_wctomb+0x16>
 800abc6:	2aff      	cmp	r2, #255	; 0xff
 800abc8:	bf85      	ittet	hi
 800abca:	238a      	movhi	r3, #138	; 0x8a
 800abcc:	6003      	strhi	r3, [r0, #0]
 800abce:	700a      	strbls	r2, [r1, #0]
 800abd0:	f04f 30ff 	movhi.w	r0, #4294967295
 800abd4:	bf98      	it	ls
 800abd6:	2001      	movls	r0, #1
 800abd8:	4770      	bx	lr
 800abda:	4608      	mov	r0, r1
 800abdc:	4770      	bx	lr
	...

0800abe0 <_close>:
 800abe0:	4b02      	ldr	r3, [pc, #8]	; (800abec <_close+0xc>)
 800abe2:	2258      	movs	r2, #88	; 0x58
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	f04f 30ff 	mov.w	r0, #4294967295
 800abea:	4770      	bx	lr
 800abec:	20001a50 	.word	0x20001a50

0800abf0 <_fstat>:
 800abf0:	4b02      	ldr	r3, [pc, #8]	; (800abfc <_fstat+0xc>)
 800abf2:	2258      	movs	r2, #88	; 0x58
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295
 800abfa:	4770      	bx	lr
 800abfc:	20001a50 	.word	0x20001a50

0800ac00 <_getpid>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <_getpid+0xc>)
 800ac02:	2258      	movs	r2, #88	; 0x58
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0a:	4770      	bx	lr
 800ac0c:	20001a50 	.word	0x20001a50

0800ac10 <_isatty>:
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <_isatty+0xc>)
 800ac12:	2258      	movs	r2, #88	; 0x58
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	2000      	movs	r0, #0
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20001a50 	.word	0x20001a50

0800ac20 <_kill>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	; (800ac2c <_kill+0xc>)
 800ac22:	2258      	movs	r2, #88	; 0x58
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2a:	4770      	bx	lr
 800ac2c:	20001a50 	.word	0x20001a50

0800ac30 <_lseek>:
 800ac30:	4b02      	ldr	r3, [pc, #8]	; (800ac3c <_lseek+0xc>)
 800ac32:	2258      	movs	r2, #88	; 0x58
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3a:	4770      	bx	lr
 800ac3c:	20001a50 	.word	0x20001a50

0800ac40 <_read>:
 800ac40:	4b02      	ldr	r3, [pc, #8]	; (800ac4c <_read+0xc>)
 800ac42:	2258      	movs	r2, #88	; 0x58
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4a:	4770      	bx	lr
 800ac4c:	20001a50 	.word	0x20001a50

0800ac50 <_write>:
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <_write+0xc>)
 800ac52:	2258      	movs	r2, #88	; 0x58
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5a:	4770      	bx	lr
 800ac5c:	20001a50 	.word	0x20001a50

0800ac60 <_exit>:
 800ac60:	e7fe      	b.n	800ac60 <_exit>
	...

0800ac64 <_init>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	bf00      	nop
 800ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6a:	bc08      	pop	{r3}
 800ac6c:	469e      	mov	lr, r3
 800ac6e:	4770      	bx	lr

0800ac70 <_fini>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	bf00      	nop
 800ac74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac76:	bc08      	pop	{r3}
 800ac78:	469e      	mov	lr, r3
 800ac7a:	4770      	bx	lr
