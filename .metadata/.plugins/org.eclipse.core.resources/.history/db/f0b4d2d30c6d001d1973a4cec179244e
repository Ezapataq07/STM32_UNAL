/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : LiDAR_Main.c
 * @author         : Emanuel Zapata Querubin
 * @brief          : Desarrollo del Programa para el Sensor LiDAR 2D
 ******************************************************************************
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* Se incluyen las libreías necesarias */
#include "stm32xxx_hal.h"
#include "vl53lx_api.h"
#include "vl53lx_def.h"
#include "53L3A2.h"
#include "stdio.h"
#include "stdbool.h"
#include "BasicTimer.h"
#include "StepMotorDriver.h"
#include "SysTickDriver.h"
#include "GPIOxDriver.h"
#include "USARTxDriver.h"
#include "FPU_Driver.h"

#include "GPIOxDriver.h"
#include "ExtiDriver.h"
#include "stdint.h"
#include "stdio.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define SIZE_RANGING_DATA	512
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
VL53LX_Dev_t                   dev;
VL53LX_DEV                     Dev = &dev;
int status;
volatile int IntCount;
#define isInterrupt 1

I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;

/* Definición de handlers */
GPIO_Handler_t 		handlerStateLED 					= {0};
BTIMER_Handler_t	handlerStateLedTimer				= {0};
GPIO_Handler_t 		handlerRxPIN	 					= {0};
GPIO_Handler_t 		handlerTxPIN	 					= {0};
USART_Handler_t		handlerUSART1						= {0};
GPIO_Handler_t		encoderOutA							= {0};
GPIO_Handler_t		encoderOutB							= {0};
uint8_t				encoderChannels[2]					= {0};
EXTI_Config_t 		handlerEchoExti = {0};


/* Definición de los handlers que controlan las bobinas del motor */
GPIO_Handler_t		IN1 								= {0};
GPIO_Handler_t		IN2 								= {0};
GPIO_Handler_t		IN3 								= {0};
GPIO_Handler_t		IN4 								= {0};

/* Handlers para el suicheo del sensor */
GPIO_Handler_t 		VL53L3CX_VDD						= {0};

/* Definicion de vairables */
// Para manejo de errores en la medición de distancias
uint16_t 			numMeasurmentErrors 				= 0;
uint8_t				errorMultipleObjects				= 0;
uint8_t				RangeErrors[50]						= {0};
uint8_t				RangeStatus     					= 0;

// Para el control del motor
uint16_t			motorStatus							= 0;
uint16_t			motorDegree							= 0;
StepMotor_Handler_t StepMotor							= {0};

// Para la comunicación USART
char				bufferReception[32]					= {0};
char				bufferData[100]						= {0};
char				rxData 								= '\0';
uint16_t			counterReception					= 0;

// Para el control por comandos
unsigned int		firstParameter 						= 0;
unsigned int		secondParameter						= 0;
char				cmd[32] 							= {0};
char				userMsg[32] = {0};
bool				stringComplete						= false;

// Para el control de la medición
float				rangingData[SIZE_RANGING_DATA]		= {0};
float				meanRangingData						= 0;
float				angleData[SIZE_RANGING_DATA]		= {0};
uint16_t			counterRangigData					= 0;
float				Pulses = 0;

uint32_t	timeStamp = 0;
uint32_t	timeTravel = 0;
float 		distance = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */
/* Definición de los prototipos */
void RangingLoop(void);
void RangingMeasurment(void);
void initSystem(void);
void Initial_Boot_VL53L3CX(void);
void RangeErrorsMsg(uint8_t status);
void RebootVL53L3CX(void);
void parseCommands(char *ptrBufferReception);
void stepMotorMove(StepMotor_Handler_t *pStepMotor, uint16_t numSteps, uint8_t direction);
void LiDAR_Start(void);
void getRangingData(void);
void WelcomeMsg(void);
void StaticRanging(unsigned int numData);
void Static(unsigned int numData);

void initEXTI(void);
void Delay_us(uint16_t us);
void SendUltraPulse(void);
void send_uart2 (char *string);
void getDistance(uint32_t time);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

/* Implementación del Callback para mediciones por interrupciones */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin==VL53L1X_INT_Pin)
  {
    IntCount++;
  }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  initSystem();
  initEXTI();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM5_Init();
  /* USER CODE BEGIN 2 */

  /**Configure the Systick interrupt time
  */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  // Mensaje de bienvenida
  WelcomeMsg();

  HAL_TIM_Base_Start(&htim5);


  Dev->I2cHandle = &hi2c1;
  Dev->I2cDevAddr = 0x52;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Las siguientes operaciones se ejecutan cuando el USART utilizado reciba información
	if (rxData != '\0'){
		// Se comienzan a acumular los caracteres recibidos en un buffer
		bufferReception[counterReception] = rxData;
		counterReception++;
		// Si se recibe el caracter @ se activa la variable de estado que indica que se recibió la información necesaria
		if (rxData == '@'){
			stringComplete = true;
			bufferReception[counterReception] = '\0';  // Se hace nulo la posición del caracter @
			counterReception = 0;
		}
		rxData = '\0'; // Se hace nulo la variable rxData con el fin de que sólo se entre a la condición cuando el Usart recibe datos
	}
	// Las siguientes operaciones se ejecutan cuando el buffer de recepción tiene la información completa
	if (stringComplete){
		// Se llama a la función parseCommands, la cual ejecuta el código correspondiente al comando enviado vía USART
		stringComplete = false;
		parseCommands(bufferReception);
	}



	//SendUltraPulse();
	//HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 84-1;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : VL53L1X_INT_Pin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

}

/* USER CODE BEGIN 4 */

void parseCommands(char *ptrBufferReception){
	/**
	 * La función parseCommands se encarga del control del programa por medio de comandos mediante el USART
	 */
	// Se toma la información del buffer recibido, leyendo el comando y el parámetro ingresado
	sscanf(ptrBufferReception, "%s %u %u %s",  cmd, &firstParameter, &secondParameter, userMsg);
	// Se ejecuta si el comando es "Menu"
	if (strcmp(cmd, "Menu") == 0){
		// Se imprime el Menu de comandos
		writeMsg(&handlerUSART1, "\nHelp Menu CMDS:\n");
		writeMsg(&handlerUSART1, "1)  Menu              -- Print this menu\n");
		writeMsg(&handlerUSART1, "8)  initToF           -- Initialize ToF Sensor\n");
		writeMsg(&handlerUSART1, "2)  StartMeasurement  -- Start Light Speed Measurement\n");
	}
	// Inicializar el Sensor ToF para poder comenzar a medir
	else if (strcmp(cmd, "initToF") == 0){
		writeMsg(&handlerUSART1, "CMD: initToF\n");
		Initial_Boot_VL53L3CX();
	}
	// Se comienza la acción principal del sensor, hacer el mapeo de la superficie 2D
	else if (strcmp(cmd, "StartMeasurement") == 0){
		writeMsg(&handlerUSART1, "CMD: Start\n");
		StaticRanging(firstParameter);
	}
	// Se hacen mediciones de distancia sin movimiento del motor
	else if (strcmp(cmd, "staticRanging") == 0){
		writeMsg(&handlerUSART1, "CMD: staticRanging\n");
		Static(firstParameter);
	}
	else {
		// En caso de que el comando no sea ninguno de los anteriores, se indica por consola que es incorrecto
		writeMsg(&handlerUSART1, "Incorrect Command!!!\n");
	}
}

void stepMotorMove(StepMotor_Handler_t *pStepMotor, uint16_t numSteps, uint8_t direction){
	for (uint16_t k = 0; k < numSteps; k++){
		motorStatus = moveStepMotor(&StepMotor, 1, direction);
		if (motorStatus == WARNING_WRONG_DIRECTION){
			writeMsg(&handlerUSART1, "The motor moved in the incorrect direction\n");
		}
	}
}

void LiDAR_Start(void){
	/**
	 * LiDAR_Start es la funcionalidad principal del proyecto, toma mediciones de distancia en 360° y guarda la información de posición y
	 * distancia en arreglos
	 */
	writeMsg(&handlerUSART1, "LiDAR Ranging starts\n");
	// Se reinician las variables necesarias
	float conversion = 0;
	counterRangigData = 0;
	restartPulses();
	// Se mueve de a 4 pasos el motor y cada 4 pasos se hace una medición, midiendo los angulos con los pulsos
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
		RangingMeasurment();
		Pulses = getPulses();
		angleData[k] = Pulses;
		stepMotorMove(&StepMotor, 4, CLOCKWISE);
	}
	writeMsg(&handlerUSART1, "LiDAR Measurment finished. Wait the motor return to its original position to get the data\n");
	conversion = (float) SIZE_RANGING_DATA;
//	conversion = (conversion*1.40625)/Pulses; 			// Conversion para pasos de a 8
	conversion = (conversion*0.703125)/Pulses;			// Conversión para pasos de a 4
//	conversion = (conversion*0.17578125)/Pulses;		// Conversion para pasos de a 1
	// Se convierte la información de pulsos en ángulos
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
		angleData[k] = angleData[k]*conversion;
	}
	// Se retorna el motor a su posición inicial
	stepMotorMove(&StepMotor, 2048, COUNTERCLOCKWISE);
	writeMsg(&handlerUSART1, "Now you can get the data\n");
}

void getRangingData(void){
	/**
	 * getRangingData se encarga de mostrar los datos de la medición por consola
	 */
	writeMsg(&handlerUSART1, "Angle(degrees)       Distance(mm)\n");
	for (uint16_t k = 0; k < SIZE_RANGING_DATA; k++){
		sprintf(bufferData, "%5f       %5f\n", angleData[k], rangingData[k]);
		writeMsg(&handlerUSART1, bufferData);
	}
}

void StaticRanging(unsigned int numData){
	/**
	 * StaticRanging hace numData mediciones con el sensor ToF
	 */
	for(uint8_t i = 0; i<10; i++){
		counterRangigData = 0;
		RangingMeasurment();
		SendUltraPulse();
		sprintf(bufferData, "Time = %f ps    Distance= %f cm\n",rangingData[0]*3.335640952, distance);
		send_uart2(bufferData);
		HAL_Delay(1000);
	}
	writeMsg(&handlerUSART1, "The Static Ranging has finished");
}

void RangingMeasurment(void){
	/**
	 * RangingMeasurment se encarga de hacer una medición con el sensor ToF y guardarla en un arreglo, realmente hace 5 mediciones y toma el
	 * promedio. Está configurada para que no guarde medidas en caso de que sean erróneas, y que tome medidas solo cuando detecte un objeto
	 */
	int numObjects = 0;
	VL53LX_MultiRangingData_t MultiRangingData;
	VL53LX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
	uint8_t NewDataReady=0;
	uint8_t i = 0;
	HAL_Delay(2);
	if(status){
		writeMsg(&handlerUSART1, "VL53LX_StartMeasurement failed\n");
		while(1);
	}
	if (isInterrupt){
	do // HW interrupt mode
	{
	  __WFI();
	  if(IntCount !=0 ){
		IntCount=0;
		status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
		numObjects = pMultiRangingData->NumberOfObjectsFound;
		RangeStatus = pMultiRangingData->RangeData->RangeStatus;
		// Control de errores, si se detecta un error se muestra por consola cúal es y se reinicia la medición
		// En caso de que hayan muchos errores se manda por consola un mensaje de error general
		if (RangeStatus){
			if (numMeasurmentErrors >= 3){
				writeMsg(&handlerUSART1, "The Tof Sensor is Failing, probably for the above reasons.\n");
			}
			RangeErrorsMsg(RangeStatus);
			numMeasurmentErrors++;
			HAL_Delay(250);
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
			continue;
		}
		// Control de múltiples objetos, si se detecta más de un objeto se reinicia la medición
		// En caso de que se detecte varias veces la presencia de más de un objeto se manda el mensaje por consola
		if (numObjects > 1){
			if (errorMultipleObjects >= 3){
				writeMsg(&handlerUSART1, "There are multiple objects to range. There must only be one.\n");
			}
			errorMultipleObjects++;
			HAL_Delay(250);
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
			continue;
		}
		meanRangingData += (float) pMultiRangingData->RangeData[0].RangeMilliMeter;
		i++;
		if (status==0){
		  status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
		}

	  }
	}
	while(i < 5);
	}
	else{
	do{ // polling mode
	  status = VL53LX_GetMeasurementDataReady(Dev, &NewDataReady);
	  HAL_Delay(2); // 1 ms polling period, could be longer.
	  if((!status)&&(NewDataReady!=0)){
		status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
		RangeStatus = pMultiRangingData->RangeData->RangeStatus;
		if (RangeStatus){
			if (numMeasurmentErrors >= 10){
				printf("%s\n", "The Tof Sensor is Failing");
			}
			RangeErrors[numMeasurmentErrors] = RangeStatus;
			numMeasurmentErrors++;
			pMultiRangingData->RangeData[0].RangeMilliMeter = 0;
			HAL_Delay(500);
			status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
			continue;
		}
		printf("%5d", pMultiRangingData->RangeData[0].RangeMilliMeter);
		i++;
		numMeasurmentErrors = 0;
		printf ("\n");
		if (status==0){
		  status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
		}
	  }
	}
	while (i < 1);
	}
	rangingData[counterRangigData] = meanRangingData/5.0;
	counterRangigData++;
	numMeasurmentErrors = 0;
	errorMultipleObjects = 0;
	meanRangingData = 0;
}

void initSystem(void){
	// Se configura el SysTick
	config_SysTickMs();

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOC;
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_6;
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);


	/* Configuración de las entradas para el Driver del motor */
	IN1.pGPIOx 										= GPIOC;
	IN1.GPIO_PinConfig.GPIO_PinNumber				= PIN_0;
	IN1.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
	IN1.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
	IN1.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
	GPIO_Config(&IN1);


	IN2.pGPIOx 										= GPIOC;
	IN2.GPIO_PinConfig.GPIO_PinNumber				= PIN_1;
	IN2.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
	IN2.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
	IN2.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
	GPIO_Config(&IN2);

	IN3.pGPIOx 										= GPIOC;
	IN3.GPIO_PinConfig.GPIO_PinNumber				= PIN_2;
	IN3.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
	IN3.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
	IN3.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
	GPIO_Config(&IN3);

	IN4.pGPIOx 										= GPIOC;
	IN4.GPIO_PinConfig.GPIO_PinNumber				= PIN_3;
	IN4.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
	IN4.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
	IN4.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_HIGH;
	GPIO_Config(&IN4);

	StepMotor.IN1 = &IN1;
	StepMotor.IN2 = &IN2;
	StepMotor.IN3 = &IN3;
	StepMotor.IN4 = &IN4;

	/* Configuración para el suicheo del Sensor */
	VL53L3CX_VDD.pGPIOx = GPIOB;
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
	VL53L3CX_VDD.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;
	// Se carga la configuración y se inicia con el sensor apagado
	GPIO_Config(&VL53L3CX_VDD);
	GPIO_WritePin(&VL53L3CX_VDD, 0);

	/* Configuración del Timer2, que controla el blinky del StateLED */
	handlerStateLedTimer.ptrTIMx					= TIM2;
	handlerStateLedTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
	handlerStateLedTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_100us;
	handlerStateLedTimer.timerConfig.Timer_period	= 2500;
	// Se carga la configuración del Timer2
	BTimer_Config(&handlerStateLedTimer);

	// Configuración del PIN que recibe la información por la USB (RX) */
	handlerRxPIN.pGPIOx								= GPIOA;
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_10;
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);

	/* Configuración del PIN que envía la información por la USB (TX) */
	handlerTxPIN.pGPIOx								= GPIOA;
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);

	/* Configuración del USART1 */
	handlerUSART1.ptrUSARTx							= USART2;
	handlerUSART1.USART_Config.USART_mode			= USART_MODE_RXTX;
	handlerUSART1.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
	handlerUSART1.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
	handlerUSART1.USART_Config.USART_parity			= USART_PARITY_NONE;
	handlerUSART1.USART_Config.USART_stopbits		= USART_STOPBIT_1;
	handlerUSART1.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
	// Se carga la configuración del USART
	USART_Config(&handlerUSART1);

	/* Configuración para el output A del encoder */
	encoderOutA.pGPIOx 								= GPIOC;
	encoderOutA.GPIO_PinConfig.GPIO_PinNumber 		= PIN_15;
	encoderOutA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_INPUT;
	encoderOutA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
	encoderOutA.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
	// Se carga la configuración
	GPIO_Config(&encoderOutA);

	/* Configuració para el output B del encoder */
	encoderOutB.pGPIOx 								= GPIOC;
	encoderOutB.GPIO_PinConfig.GPIO_PinNumber 		= PIN_14;
	encoderOutB.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_INPUT;
	encoderOutB.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
	encoderOutB.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
	// Se carga la configuración
	GPIO_Config(&encoderOutB);

	// Inicialización del EXTI en el driver del motor
	initStepMotor();


}

void Initial_Boot_VL53L3CX(void){
	/**
	 * Esta función se encarga de inicializar correctamente el Sensor ToF, en caso de no logralo se informará por consola
	 */
	uint8_t byteData;
	uint16_t wordData;
	uint8_t ToFSensor = 1; // 0=Left, 1=Center(default), 2=Right
	GPIO_WritePin(&VL53L3CX_VDD, 0);
	HAL_Delay(2000);
	GPIO_WritePin(&VL53L3CX_VDD, 1);
	HAL_Delay(2);
	XNUCLEO53L3A2_Init();
	ToFSensor = 'c'; // Select ToFSensor: 0=Left, 1=Center, 2=Right
	status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
	HAL_Delay(2);
	status = XNUCLEO53L3A2_ResetId(ToFSensor, 1); // Reset ToF sensor
	HAL_Delay(2);
	VL53LX_RdByte(Dev, 0x010F, &byteData);
	sprintf(bufferData, "VL53LX Model_ID: %02X\n\r", byteData);
	writeMsg(&handlerUSART1, bufferData);
	VL53LX_RdByte(Dev, 0x0110, &byteData);
	sprintf(bufferData, "VL53LX Module_Type: %02X\n\r", byteData);
	writeMsg(&handlerUSART1, bufferData);
	VL53LX_RdWord(Dev, 0x010F, &wordData);
	sprintf(bufferData, "VL53LX: %02X\n\r", wordData);
	writeMsg(&handlerUSART1, bufferData);
	  //////////////////////////////////////////////////////////////////////////////////////////////////
	status = VL53LX_WaitDeviceBooted(Dev);
	while(status != VL53LX_ERROR_NONE){
		writeMsg(&handlerUSART1, "Not Booted\n");
		status = VL53LX_WaitDeviceBooted(Dev);
		HAL_Delay(10);
	}
	writeMsg(&handlerUSART1, "Device Booted\n");
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	status = VL53LX_DataInit(Dev);
	while(status != VL53LX_ERROR_NONE){
		status = VL53LX_DataInit(Dev);
		HAL_Delay(10);
		writeMsg(&handlerUSART1, "Not Initialized\n");
	}
	writeMsg(&handlerUSART1, "Device Initialized\n");
	status = VL53LX_SetDistanceMode(Dev, VL53LX_DISTANCEMODE_MEDIUM);
	///////////////////////////////////////////////////////////////////////////////////////////////////
	status = 1;
	while(status != VL53LX_ERROR_NONE){
		status = VL53LX_StartMeasurement(Dev);
		HAL_Delay(10);
		writeMsg(&handlerUSART1, "Not Measuring\n");
	}
	writeMsg(&handlerUSART1, "Device ready to measure\n");
//	status = VL53LX_PerformRefSpadManagement(Dev);
//	status = VL53LX_SmudgeCorrectionEnable(Dev, VL53LX_SMUDGE_CORRECTION_CONTINUOUS);
//	status = VL53LX_SetXTalkCompensationEnable(Dev, 1);
//	status = VL53LX_SetOffsetCorrectionMode(Dev, VL53LX_OFFSETCORRECTIONMODE_STANDARD);
//	status = VL53LX_PerformOffsetZeroDistanceCalibration(Dev);
//	status = VL53LX_PerformXTalkCalibration(Dev);
}

void RangeErrorsMsg(uint8_t status){
	/**
	 * Esta función contiene los posibles errores que pueden darse durante la etapa de medición, con su respectivo mensaje de error por consola
	 */
	switch(status){
	case VL53LX_RANGESTATUS_SIGMA_FAIL:
	{
		writeMsg(&handlerUSART1, "Sigma estimator outofbounds\n");
		break;
	}
	case VL53LX_RANGESTATUS_SIGNAL_FAIL:
	{
		writeMsg(&handlerUSART1, "Signal too low to detect target\n");
		break;
	}
	case VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL:
	{
		writeMsg(&handlerUSART1, "Target out of bounds\n");
		break;
	}
	case VL53LX_RANGESTATUS_HARDWARE_FAIL:
	{
		writeMsg(&handlerUSART1, "Hardware or Tof sensor failure\n");
		break;
	}
	case VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL:
	{
		writeMsg(&handlerUSART1, "No wraparound check has been done (this is the very first range)\n");
		break;
	}
	case VL53LX_RANGESTATUS_WRAP_TARGET_FAIL:
	{
		writeMsg(&handlerUSART1, "Wraparound occurred\n");
		break;
	}
	case VL53LX_RANGESTATUS_PROCESSING_FAIL:
	{
		writeMsg(&handlerUSART1, "Internal processing error\n");
		break;
	}
	case VL53LX_RANGESTATUS_SYNCRONISATION_INT:
	{
		writeMsg(&handlerUSART1, "Raised one time after init, ranging value has to be ignored\n");
		break;
	}
	case VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE:
	{
		writeMsg(&handlerUSART1, "Ranging is OK, but distance reported is the result of multiple targets merged together.\n");
		break;
	}
	case VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL:
	{
		writeMsg(&handlerUSART1, "There is a target, but signal is too low to report ranging\n");
		break;
	}
	case VL53LX_RANGESTATUS_RANGE_INVALID:
	{
		writeMsg(&handlerUSART1, "Ranging data is negative and has to be ignored\n");
		break;
	}
	case VL53LX_RANGESTATUS_NONE:
	{
		writeMsg(&handlerUSART1, "Target not detected, without no warning or errors raised\n");
		break;
	}
	default:
	{
		break;
	}
	}
}

/* Implementacion del Callback para el timer2 */
void BTimer2_Callback(void){
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD6;
}

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
	rxData = getRxData();
}

void WelcomeMsg(void){
	writeMsg(&handlerUSART1, "\n");
	writeMsg(&handlerUSART1, " @@@@  @@@@@     @@    @@ @@@@@   @@@@  @@@@@      @@@@  @@@@ @@  @@  @@@@   @@@@  @@@@@ \n");
	writeMsg(&handlerUSART1, "@@  @@ @@  @@    @@       @@  @@ @@  @@ @@  @@    @@     @@   @@@ @@ @@     @@  @@ @@  @@\n");
	writeMsg(&handlerUSART1, "   @@  @@  @@    @@    @@ @@  @@ @@@@@@ @@@@@      @@@@  @@@@ @@ @@@  @@@@  @@  @@ @@@@@_\n");
	writeMsg(&handlerUSART1, " @@    @@  @@    @@    @@ @@  @@ @@  @@ @@  @@        @@ @@   @@  @@     @@ @@  @@ @@  @@\n");
	writeMsg(&handlerUSART1, "@@@@@  @@@@@     @@@@@ @@ @@@@@  @@  @@ @@  @@     @@@@  @@@@ @@  @@  @@@@   @@@@  @@  @@\n\n");
	writeMsg(&handlerUSART1, "Write 'Menu @' to see the options\n");
}

void initEXTI(void){
	handlerEchoExti.EXTIx				= EXTI7;
	handlerEchoExti.pinPort				= PA;
	handlerEchoExti.pinPUPD_Mode     	= GPIO_PUPDR_PULLDOWN;
	handlerEchoExti.triggerMode			= FALLING_RISING_TRIGGER;
	exti_Config(&handlerEchoExti);
}



void Exti7_Rising_Callback(void){
	timeStamp = htim5.Instance->CNT;
}

void Exti7_Falling_Callback(void){
	timeTravel = htim5.Instance->CNT-timeStamp;
	getDistance(timeTravel);
}


void SendUltraPulse(void){
	Delay_us(5);
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
	Delay_us(10);
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
}

void Delay_us(uint16_t us){
	__HAL_TIM_SET_COUNTER(&htim5, 0);
	while (__HAL_TIM_GET_COUNTER(&htim5) < us);
}


void getDistance(uint32_t time){
	distance = (float) time / 58.0;
	sprintf(bufferData, "Distance = %f cm\n", distance);
	send_uart2(bufferData);
}

void Static(unsigned int numData){
	/**
	 * StaticRanging hace numData mediciones con el sensor ToF
	 */
	while (numData > 0){
		counterRangigData = 0;
		RangingMeasurment();
		sprintf(bufferData, "Distance = %f mm\n",rangingData[0]);
		writeMsg(&handlerUSART1, bufferData);
		numData--;
		HAL_Delay(10);
	}
	writeMsg(&handlerUSART1, "The Static Ranging has finished");
}


void send_uart2 (char *string)
{
	uint16_t len = strlen (string);
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
