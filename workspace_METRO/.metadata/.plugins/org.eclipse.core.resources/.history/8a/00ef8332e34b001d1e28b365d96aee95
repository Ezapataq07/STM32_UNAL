/* USER CODE BEGIN Header */
/**
 * Este es el c처digo que tiene comunicaci처n SPI para el adxl
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "math.h"
#include "micros.h"
#include <stdbool.h>

#include "AdcDriver.h"
#include "GPIOxDriver.h"
#define ADC_SIGNAL_SIZE 	30000
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio_tx;
DMA_HandleTypeDef hdma_sdio_rx;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim11;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

ADC_Config_t		adcConfig			= {0};
char				bufferData[20]		= "Hola mundo!";
uint16_t			adcData				= 0;
uint16_t			counter				= 0;
char				rxData 				= 0;
char				adcIsComplete		= false;
uint16_t 			adcSignal[ADC_SIGNAL_SIZE]		= {0};
uint16_t			dataPosition		= 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART2_UART_Init(void);
//static void MX_TIM2_Init(void);
//static void MX_TIM11_Init(void);
//static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

void initSystem(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



//#define adxl_address 0x53<<1  //direccion i2c del acelerometro
#define mpu_address 0xD0 //direccion i2c del acelerometro mpu

//variables para almacenar los datos del acelerometro y el encoder
uint8_t data_rec[14];
uint8_t check[1];
int16_t x,y,z,x1,z1;
int16_t y2;
uint32_t encoder;
uint32_t RPM;
float xg, yg, zg;
int16_t gyrox , gyroy, gyroz, temp;
int millis;
uint32_t micros();
//banderas de las interrupciones
int bandera2=0;
int bandera3=0;
int bandera7=0;


//estructuras y variables para el manejo de la sd
FATFS myFatFS;
FIL myFile;
UINT myBytes;
FRESULT fresult;
FRESULT fresult2;
UINT br, bw;

/**** capacity related *****/
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;


//funciones del acelerometro
void adxl_write (uint8_t address, uint8_t value)
{
	uint8_t data[2];
	data[0] = address|0x40;  // multibyte write
	data[1] = value;
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  // pull the cs pin low
	HAL_SPI_Transmit (&hspi1, data, 2, 100);  // write data to register
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  // pull the cs pin high
}


void adxl_read (uint8_t address)
{
	address |= 0x80;  // read operation
	address |= 0x40;  // multibyte read
	uint8_t rec;
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  // pull the pin low
	HAL_SPI_Transmit (&hspi1, &address, 1, 100);  // send address
	HAL_SPI_Receive (&hspi1, data_rec, 14, 100);  // receive 6 bytes data
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  // pull the pin high
}

void adxl_init (void)
{
	adxl_write (0x31, 0x00);  // data_format range= +- 2g
	adxl_write (0x2d, 0x00);  // reset all bits
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
	adxl_write(0x2c,0xF);     // output data rate 3200 Hz
}





/*void mpu_write (uint8_t reg, uint8_t value)
{
uint8_t data2[2];
data2[0] = reg;
data2[1] = value;
HAL_I2C_Master_Transmit(&hi2c1, mpu_address, data2, 2, 10);
}

/// read function

void mpu_Read(uint8_t reg, uint8_t numberofbytes){
	HAL_I2C_Mem_Read(&hi2c1, mpu_address, reg, 1, data_rec, numberofbytes, 100);

}

void mpu_init(void){
	mpu_Read(117,1);
	mpu_Read(107,1);
	mpu_write(107,0x00); //reset all bits saca del estado de sleep al mpu
	mpu_write(0x19,0x07);    //data de muestreo 1khz
	mpu_write(0x1b,0x00);    //configuracion gyroscopio  +- 2g
	mpu_write(0x1c,0x00);	 //configuracion acelerometro	+2 250째/s


}
*/




//uart1

#define BUFFER_SIZE 32
char buffer[BUFFER_SIZE];  // to store strings..

int data_b[1];
int i=0;

int bufsize (char *buf)
{
	int i=0;
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

void send_uart2 (char *string)
{
	uint16_t len = strlen (string);
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
}



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SDIO_SD_Init();
  MX_FATFS_Init();
  MX_USART2_UART_Init();
//  MX_TIM2_Init();
//  MX_TIM11_Init();
//  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  DWT_Init();
 //adxl_init();
 initSystem();
//mpu_init();  //inicializaci처n del adxl345

  //activacion INT del tmr11 por desbordamiento
//  HAL_TIM_Base_Start_IT(&htim11);
//  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE );





  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(encoder){
	 	  RPM=encoder/1000000;	//RPS
	 	  }
	 	  else RPM=0;

	  /*HAL_UART_Receive_IT(&huart1, data_b, 1);
	  if(data_b[0]==49){
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
	  }
	  else if(data_b[0]==48){
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	  }*/



	  	if(bandera3){
	  	bandera3=0;

	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){

//	  		HAL_TIM_Base_Stop(TIM11);

	  		if((fresult2=f_mount(&myFatFS, "/",1)) == FR_OK)

	  		{
	  			send_uart2 ("SD CARD montada satisfactoriamiente\n");
	  			bandera7 = 1;
	  			char myFileName[]="file1.txt";
	  			 /*************** Card capacity details ********************/
	  						  /* Check free space */
	  						  	f_getfree("", &fre_clust, &pfs);
	  						  	clear_buffer();
	  						  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
	  						  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
	  						  	send_uart2(buffer);

	  						  	clear_buffer();
	  						  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
	  						  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
	  						  	send_uart2(buffer);

	  			if ((fresult=f_open(&myFile,myFileName,FA_OPEN_APPEND| FA_READ | FA_WRITE)) == FR_OK) send_uart2("Archivo abierto\n");
	  			else {
	  						  	  send_uart2("El archivo no pudo ser abierto...\n\n");}

	  			/* if ((fresult=f_open(&myFile,myFileName,FA_CREATE_ALWAYS| FA_READ | FA_WRITE)) == FR_OK)
	  			{
	  				fresult=f_lseek(&myFile, f_size(&myFile));
	  				clear_buffer();
	  				sprintf (buffer, "datos f_lseek: %i \n\n",fresult);
	  				send_uart2(buffer);

	  				char myData[] = "Esto es lo que estoy escribiendo al archivo";
	  				//if((fresult=f_write(&myFile,myData,sizeof(myData),&myBytes)) == FR_OK)



	  				if((fresult = f_puts("jjhhj \n ", &myFile)) == FR_OK)
	  				{
	  					//clear_buffer();
	  					send_uart2 ("ERROR!!! in escribir al archivo SD CARD...\n");
	  					//sprintf (buffer, "Numero de error: %i \n\n",fresult);
	  					//send_uart2(buffer);
	  				}


	  				clear_buffer();
	  				send_uart2 ("Se escribio satisfactoriamente\n");
	  				sprintf (buffer, "datos escritos: %i \n\n",fresult);
	  				send_uart2(buffer);

	  				f_close(&myFile);
	  				fresult = f_mount(NULL, "/", 1);
	  					if (fresult == FR_OK) send_uart2 ("SD CARD UNMOUNTED successfully...\n");
	  					else send_uart2("error!!! in UNMOUNTING SD CARD\n");

	  			}
	  			else{
	  				send_uart2 ("ERROR!!! en abrir el archivo\n");
	  				sprintf (buffer, "Numero de error: %i \n\n",fresult);
	  				send_uart2(buffer);

	  			} */


	  		//	HAL_TIM_Base_Start(TIM11);
	  			HAL_Delay(500);

	  		}
	  		else
	  		{
	  			clear_buffer();
	  			send_uart2 ("ERROR!!! in mounting SD CARD...\n");
	  			sprintf (buffer, "Numero de error: %i \n\n",fresult2);
	  			send_uart2(buffer);

	  			}
	  	}
else if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
	  			/* Close file */
//						HAL_TIM_Base_Stop(TIM11);
							f_close(&myFile);

	  					  	clear_buffer();

	  					  	/* Unmount SDCARD */
	  					    	fresult = f_mount(NULL, "/", 1);
	  					    	if (fresult == FR_OK) send_uart2 ("SD CARD UNMOUNTED successfully...\n");
//	  					    	HAL_TIM_Base_Start(TIM11);

	  		}

	  	}

	  	if (bandera7 == 1){
	  		clear_buffer();
	  		sprintf(buffer, "%lu\n\r",micros());
	  		f_puts(buffer, &myFile);


	  		clear_buffer();
	  	    sprintf(buffer, "sffes \n");
	  		f_puts(buffer, &myFile);


	  		clear_buffer();
	  		sprintf(buffer, "%lu\n\r",micros());
	  		f_puts(buffer, &myFile);

	  		f_close(&myFile);

	  		f_mount(NULL, "/", 1);
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	  		bandera7 = 0;
	  		//startContinuousConversion();


//			if (adcIsComplete == true){
//				clear_buffer();
//				sprintf(buffer, "%lu\n\r",micros());
//
//				send_uart2(buffer);
//				for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
//					sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
//					f_puts(bufferData, &myFile);
//					clear_buffer();
//
//				}
//				adcIsComplete = false;
//				f_close(&myFile);
//
//				f_mount(NULL, "/", 1);
//
//				sprintf(buffer, "%lu\n\r",micros());
//				send_uart2(buffer);
//
//				bandera7 = 0;
//				send_uart2("se escribio");
//			}
	  	}

//
//	  	if(bandera2){			//bandera asociada a la interrupion por desbordamiento del tmr11 (0.0138s)
//	  		bandera2=0;
//
//
//	  //sprintf (buffer, "estoy enviando las RPM:%i \n",RPM);
//	  //send_uart2(buffer);
//	  //clear_buffer();
//
//	  		/*millis=HAL_GetTick();
//	  		sprintf (buffer, "lectura adxl: %i \n",millis);
//	  		send_uart2(buffer);
//	  		clear_buffer();*/
//
//	  		adxl_read(0x32);
//
//	  		  		x = (data_rec[1]<<8) | data_rec[0];
//	  		  	    y = (data_rec[3]<<8) | data_rec[2];
//	  		  		z = (data_rec[5]<<8) | data_rec[4];
//
//	  		  		gyrox = x;
//	  		  		gyroy = y;
//	  		  		gyroz = z;
//
///*
//	  		  		gyrox = (data_rec[8]<<8) | data_rec[9];
//	  		  		gyroy = (data_rec[10]<<8) | data_rec[11];
//	  		  		gyroz = (data_rec[12]<<8) | data_rec[13];
//
//
//	  		  	    temp= (data_rec[6]<<8) | data_rec[7];*/
//
//
//
//	  		  		/*millis=HAL_GetTick();
//	  		  				  		  		sprintf (buffer, "lectura adxl: %i \n",millis);
//	  		  				  		  		send_uart2(buffer);
//	  		  				  		  		clear_buffer();*/
//
//
//	  		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
//
//	  			    HAL_TIM_Base_Stop(TIM11);
//
//
//	  //			    sprintf(buffer, "x: %f  y: %f   z; %f \n \n",xg,yg,zg);
//	  //			   			    		  		send_uart2(buffer);
//	  //			   			    		  		clear_buffer();
//
//	  			    //sprintf(buffer, "angx: %f  angy: %f   angz; %f \n \n",angx,angy,angz);
//	  //			    		  		send_uart2(buffer);
//	  //			    		  		f_lseek(&fil, f_size(&fil));
//	  //			    		  		fresult = f_puts(buffer, &fil);
//	  //			    		  		clear_buffer();
//
//
//	  		  		millis=micros();
//	  		  		/*sprintf (buffer, "escritura a la sd: %i \n",millis);
//	  		  		send_uart2(buffer);
//	  		  		clear_buffer();*/
//
//	  		  		sprintf (buffer, "%i %i %i %i %i %i %i %i \n ",millis,x,y,z,gyrox,gyroy,gyroz,encoder);
//	  		  		//send_uart2(buffer);
//	  		  		//sprintf (buffer, "4sdf65s4f65s4df654d6f5");
//
//	  		  		f_puts(buffer, &myFile);
//	  		  		//f_write(&myFile, buffer, bufsize(buffer), &bw);
//
//	  	    		clear_buffer();
//
//	  	    		/*millis=HAL_GetTick();
//	  	    		sprintf (buffer, "escritura a la sd: %i \n",millis);
//	  	    		send_uart2(buffer);
//	  	    		clear_buffer();*/
//
//
//
//	  	    		/*if(fresult=255){
//	  	    		f_mount(&fs, "/", 1);
//	  	    		f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
//	  	    		}*/
//
//
//	  //		        sprintf (buffer, "x2 %d y2 %d z 2%d \n \n",gyrox,gyroy,gyroz);
//	  //				f_lseek(&fil, f_size(&fil));
//	  //				fresult = f_puts(buffer, &fil);
//	  //
//	  //				millis=HAL_GetTick();
//	  //						  		  		sprintf (buffer, "clo: %i",millis);
//	  //						  		  		send_uart(buffer);
//	  //						  		  		clear_buffer();
//
//
//
//	  		  		HAL_TIM_Base_Start(TIM11);
//
//
//	  		}
//
//
//	  	  }



	  	/*  if((bandera1==1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))){

	  		  HAL_TIM_Base_Stop(TIM11);
	  		  HAL_TIM_Base_Stop(TIM10);
	  		  bandera1=0;

	  		  millis=HAL_GetTick();
	  		  		  		sprintf (buffer, "millis: %i",millis);
	  		  		  		send_uart(buffer);
	  		  		  		clear_buffer();

	  		  fresult = f_mount(&fs, "/", 1);
	  		  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);

	  		  millis=HAL_GetTick();
	  		  		  		  		sprintf (buffer, "duraci처n: %i",millis);
	  		  		  		  		send_uart(buffer);
	  		  		  		  		clear_buffer();

	  		  for(j = 0; j < c_tiempo;j++){

	  		  		  sumx += array_xg[j]*0.010;
	  		  		  sumy += array_yg[j]*0.010;
	  		  		  sumz += array_zg[j]*0.010;

	  		  sprintf (buffer, "c_tiempo: %i",j);
	  		  send_uart(buffer);
	  		  clear_buffer();

	  		  sprintf (buffer, "c_tiempo: %i \n", j);
	  		  f_lseek(&fil, f_size(&fil));
	  		  fresult = f_puts(buffer, &fil);
	  		  clear_buffer();


	  		  millis=HAL_GetTick();
	  		  		  		  		sprintf (buffer, "millis: %i",millis);
	  		  		  		  		send_uart(buffer);
	  		  		  		  		clear_buffer();

	  		  	  }
	  		  millis=HAL_GetTick();
	  				  		  		  		sprintf (buffer, "esto dura: %i",millis);
	  				  		  		  		send_uart(buffer);
	  				  		  		  		clear_buffer();
	  		  sprintf (buffer, "x1: %d \n", array_zg_2[0]);
	  				  	  send_uart(buffer);
	  				  	  clear_buffer();

	  		  sprintf (buffer, "x: %f \n", sumx);
	  		  	  send_uart(buffer);
	  		  	  clear_buffer();

	  		  	  sprintf (buffer, "y: %f \n", sumy);
	  		  	  send_uart(buffer);
	  		  	  clear_buffer();

	  		  	  sprintf (buffer, "z: %f \n\n", sumz);
	  		  	  send_uart(buffer);
	  		  	  clear_buffer();
	  		  c_tiempo=0;
	  		  f_close(&fil);
	  		  		  	// Unmount SDCARD
	  		  			fresult = f_mount(NULL, "/", 1);
	  		  			if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
	  		  		 	HAL_TIM_Base_Start(TIM11);
	  		  		 	HAL_TIM_Base_Start(TIM10);

	  		} */





  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{

  /* USER CODE BEGIN SDIO_Init 0 */

  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd.Init.ClockDiv = 0;
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 72-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 900000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
  htim11.Init.Prescaler = 1000-1;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 20;
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  encoder= __HAL_TIM_GET_COUNTER(&htim2);
  __HAL_TIM_SET_COUNTER(&htim2,0);
}



//interrupci처n del bot처n
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
bandera3=1;

}

//interrupci처n por desbordamiento del tmr10
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance==TIM2){
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
			encoder=0;
			}
	if(htim->Instance==TIM11){
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		bandera2=1;
	}


}


void initSystem(void){

	// Configuracion del ADC
	adcConfig.channel			= ADC_CHANNEL_10;
	adcConfig.dataAlignment		= ADC_ALIGNMENT_RIGHT;
	adcConfig.resolution		= ADC_RESOLUTION_12_BIT;
	adcConfig.samplingPeriod	= ADC_SAMPLING_PERIOD_56_CYCLES;

	adc_Config(&adcConfig);
}

void adcComplete_Callback(void){
	adcSignal[dataPosition] = getADC();
	dataPosition++;
	if (dataPosition >= ADC_SIGNAL_SIZE){
		dataPosition = 0;
		adcIsComplete = true;
		stopContinuousConversion();
	}
}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
