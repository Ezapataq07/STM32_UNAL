
AdcPLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c30  08002c30  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f2c  20000084  08002cbc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fb0  08002cbc  00024fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a28  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cf  00000000  00000000  00025adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  000270b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00027620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015378  00000000  00000000  00027ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d61  00000000  00000000  0003ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e1e  00000000  00000000  00043ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c79bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000170c  00000000  00000000  000c7a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002bb8 	.word	0x08002bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08002bb8 	.word	0x08002bb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	2b00      	cmp	r3, #0
 8000594:	db0b      	blt.n	80005ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 021f 	and.w	r2, r3, #31
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <__NVIC_EnableIRQ+0x38>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	095b      	lsrs	r3, r3, #5
 80005a4:	2001      	movs	r0, #1
 80005a6:	fa00 f202 	lsl.w	r2, r0, r2
 80005aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db0a      	blt.n	80005ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	490c      	ldr	r1, [pc, #48]	; (800060c <__NVIC_SetPriority+0x4c>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	0112      	lsls	r2, r2, #4
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	440b      	add	r3, r1
 80005e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e8:	e00a      	b.n	8000600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4908      	ldr	r1, [pc, #32]	; (8000610 <__NVIC_SetPriority+0x50>)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	f003 030f 	and.w	r3, r3, #15
 80005f6:	3b04      	subs	r3, #4
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	440b      	add	r3, r1
 80005fe:	761a      	strb	r2, [r3, #24]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000e100 	.word	0xe000e100
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <adc_Config>:
#include "GPIOxDriver.h"

GPIO_Handler_t 	handlerAdcPin 	= {0};
uint16_t		adcRawData 		= 0;

void adc_Config(ADC_Config_t *adcConfig){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado */
	configAnalogPin(adcConfig->channel);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f91b 	bl	800085c <configAnalogPin>

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2) */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000626:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <adc_Config+0x18c>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a5d      	ldr	r2, [pc, #372]	; (80007a0 <adc_Config+0x18c>)
 800062c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000630:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurarlos
	ADC1->CR1 = 0;
 8000632:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <adc_Config+0x190>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <adc_Config+0x190>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig->resolution){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d83e      	bhi.n	80006c4 <adc_Config+0xb0>
 8000646:	a201      	add	r2, pc, #4	; (adr r2, 800064c <adc_Config+0x38>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	0800065d 	.word	0x0800065d
 8000650:	08000677 	.word	0x08000677
 8000654:	08000691 	.word	0x08000691
 8000658:	080006ab 	.word	0x080006ab
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800065c:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <adc_Config+0x190>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a50      	ldr	r2, [pc, #320]	; (80007a4 <adc_Config+0x190>)
 8000662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000666:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8000668:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <adc_Config+0x190>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a4d      	ldr	r2, [pc, #308]	; (80007a4 <adc_Config+0x190>)
 800066e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000672:	6053      	str	r3, [r2, #4]
		break;
 8000674:	e027      	b.n	80006c6 <adc_Config+0xb2>
	}
	case ADC_RESOLUTION_10_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <adc_Config+0x190>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a4a      	ldr	r2, [pc, #296]	; (80007a4 <adc_Config+0x190>)
 800067c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000680:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8000682:	4b48      	ldr	r3, [pc, #288]	; (80007a4 <adc_Config+0x190>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <adc_Config+0x190>)
 8000688:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800068c:	6053      	str	r3, [r2, #4]
		break;
 800068e:	e01a      	b.n	80006c6 <adc_Config+0xb2>
	}
	case ADC_RESOLUTION_8_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8000690:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <adc_Config+0x190>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a43      	ldr	r2, [pc, #268]	; (80007a4 <adc_Config+0x190>)
 8000696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800069a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 800069c:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <adc_Config+0x190>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	4a40      	ldr	r2, [pc, #256]	; (80007a4 <adc_Config+0x190>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	6053      	str	r3, [r2, #4]
		break;
 80006a8:	e00d      	b.n	80006c6 <adc_Config+0xb2>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <adc_Config+0x190>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4a3d      	ldr	r2, [pc, #244]	; (80007a4 <adc_Config+0x190>)
 80006b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006b4:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <adc_Config+0x190>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <adc_Config+0x190>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c0:	6053      	str	r3, [r2, #4]
		break;
 80006c2:	e000      	b.n	80006c6 <adc_Config+0xb2>
	}
	default:
	{
		break;
 80006c4:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1->CR1 &= ~ADC_CR1_SCAN;
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <adc_Config+0x190>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <adc_Config+0x190>)
 80006cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006d0:	6053      	str	r3, [r2, #4]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */

	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d106      	bne.n	80006e8 <adc_Config+0xd4>
		//Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <adc_Config+0x190>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <adc_Config+0x190>)
 80006e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e4:	6093      	str	r3, [r2, #8]
 80006e6:	e005      	b.n	80006f4 <adc_Config+0xe0>
	}
	else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <adc_Config+0x190>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <adc_Config+0x190>)
 80006ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f2:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <adc_Config+0x190>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <adc_Config+0x190>)
 80006fa:	f023 0302 	bic.w	r3, r3, #2
 80006fe:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling */
	if (adcConfig->channel < ADC_CHANNEL_10){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b09      	cmp	r3, #9
 8000706:	d810      	bhi.n	800072a <adc_Config+0x116>
		ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel)));
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <adc_Config+0x190>)
 800070a:	691a      	ldr	r2, [r3, #16]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	885b      	ldrh	r3, [r3, #2]
 8000710:	4618      	mov	r0, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	460b      	mov	r3, r1
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	440b      	add	r3, r1
 800071e:	fa00 f303 	lsl.w	r3, r0, r3
 8000722:	4920      	ldr	r1, [pc, #128]	; (80007a4 <adc_Config+0x190>)
 8000724:	4313      	orrs	r3, r2
 8000726:	610b      	str	r3, [r1, #16]
 8000728:	e010      	b.n	800074c <adc_Config+0x138>
	}
	else{
		ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3*(adcConfig->channel - 9)));
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <adc_Config+0x190>)
 800072c:	68d9      	ldr	r1, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	885b      	ldrh	r3, [r3, #2]
 8000732:	4618      	mov	r0, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f1a3 0209 	sub.w	r2, r3, #9
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	fa00 f303 	lsl.w	r3, r0, r3
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <adc_Config+0x190>)
 8000748:	430b      	orrs	r3, r1
 800074a:	60d3      	str	r3, [r2, #12]
	}

	/* 8. Configuramos la secuencia y cuantos elemenos hay en la secuencia */
	// Al hacerlo to.do 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 = 0;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <adc_Config+0x190>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el canal de la conversión a la primera posición en la secuencia
	ADC1->SQR3 |= (adcConfig->channel << 0);
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <adc_Config+0x190>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	4611      	mov	r1, r2
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <adc_Config+0x190>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6353      	str	r3, [r2, #52]	; 0x34

	/* 9. Configuramos el preescaler del ADC en 2:1 (el más rápido que se puede tener) */
	ADC->CCR = ADC_CCR_ADCPRE_0;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <adc_Config+0x194>)
 8000764:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000768:	605a      	str	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076a:	b672      	cpsid	i
}
 800076c:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC */
	ADC1->CR1 |= ADC_CR1_EOCIE;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <adc_Config+0x190>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <adc_Config+0x190>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	6053      	str	r3, [r2, #4]

	/* 11.a. Matriculamos la interrupción en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 800077a:	2012      	movs	r0, #18
 800077c:	f7ff ff02 	bl	8000584 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(ADC_IRQn, 4);
 8000780:	2104      	movs	r1, #4
 8000782:	2012      	movs	r0, #18
 8000784:	f7ff ff1c 	bl	80005c0 <__NVIC_SetPriority>

	/* 12. Activamos el módulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <adc_Config+0x190>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <adc_Config+0x190>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000794:	b662      	cpsie	i
}
 8000796:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40012000 	.word	0x40012000
 80007a8:	40012300 	.word	0x40012300

080007ac <startSingleConversion>:

/* */
void startSingleConversion(void){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversión ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <startSingleConversion+0x1c>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <startSingleConversion+0x1c>)
 80007b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007ba:	6093      	str	r3, [r2, #8]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40012000 	.word	0x40012000

080007cc <startContinuousConversion>:

void startContinuousConversion(void){
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_CONT;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <startContinuousConversion+0x28>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <startContinuousConversion+0x28>)
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	6093      	str	r3, [r2, #8]
	/* Iniciamos un ciclo de conversión ADC */
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <startContinuousConversion+0x28>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <startContinuousConversion+0x28>)
 80007e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007e6:	6093      	str	r3, [r2, #8]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40012000 	.word	0x40012000

080007f8 <stopContinuousConversion>:

void stopContinuousConversion(void){
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <stopContinuousConversion+0x1c>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <stopContinuousConversion+0x1c>)
 8000802:	f023 0302 	bic.w	r3, r3, #2
 8000806:	6093      	str	r3, [r2, #8]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40012000 	.word	0x40012000

08000818 <getADC>:

/* Función que me retorna el último dato adquirido por la ADC */
uint16_t getADC(void){
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	return adcRawData;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <getADC+0x14>)
 800081e:	881b      	ldrh	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	200000ac 	.word	0x200000ac

08000830 <ADC_IRQHandler>:

/* Esta es la ISR de la interrupción por conversión ADC */
void ADC_IRQHandler(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interupción por conversión ADC
	if (ADC1->SR & ADC_SR_EOC){
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <ADC_IRQHandler+0x24>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1->DR;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <ADC_IRQHandler+0x24>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <ADC_IRQHandler+0x28>)
 8000848:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 800084a:	f000 fe67 	bl	800151c <adcComplete_Callback>
	}
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40012000 	.word	0x40012000
 8000858:	200000ac 	.word	0x200000ac

0800085c <configAnalogPin>:
__attribute__ ((weak)) void adcComplete_Callback(void){
	__NOP();
}

/* con esta función configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo
	switch (adcChannel){
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	f200 8093 	bhi.w	8000994 <configAnalogPin+0x138>
 800086e:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <configAnalogPin+0x18>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	080008b5 	.word	0x080008b5
 8000878:	080008c3 	.word	0x080008c3
 800087c:	080008d1 	.word	0x080008d1
 8000880:	080008df 	.word	0x080008df
 8000884:	080008ed 	.word	0x080008ed
 8000888:	080008fb 	.word	0x080008fb
 800088c:	08000909 	.word	0x08000909
 8000890:	08000917 	.word	0x08000917
 8000894:	08000925 	.word	0x08000925
 8000898:	08000933 	.word	0x08000933
 800089c:	08000941 	.word	0x08000941
 80008a0:	0800094f 	.word	0x0800094f
 80008a4:	0800095d 	.word	0x0800095d
 80008a8:	0800096b 	.word	0x0800096b
 80008ac:	08000979 	.word	0x08000979
 80008b0:	08000987 	.word	0x08000987

	case ADC_CHANNEL_0:
	{
		// Es el Pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <configAnalogPin+0x150>)
 80008b6:	4a3e      	ldr	r2, [pc, #248]	; (80009b0 <configAnalogPin+0x154>)
 80008b8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <configAnalogPin+0x150>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
		break;
 80008c0:	e069      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1:
	{
		//Es el pin PA1
		handlerAdcPin.pGPIOx						= GPIOA;
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <configAnalogPin+0x150>)
 80008c4:	4a3a      	ldr	r2, [pc, #232]	; (80009b0 <configAnalogPin+0x154>)
 80008c6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <configAnalogPin+0x150>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	711a      	strb	r2, [r3, #4]
		break;
 80008ce:	e062      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_2:
	{
		//Es el pin PA2
		handlerAdcPin.pGPIOx						= GPIOA;
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <configAnalogPin+0x150>)
 80008d2:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <configAnalogPin+0x154>)
 80008d4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <configAnalogPin+0x150>)
 80008d8:	2202      	movs	r2, #2
 80008da:	711a      	strb	r2, [r3, #4]
		break;
 80008dc:	e05b      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_3:
	{
		//Es el pin PA3
		handlerAdcPin.pGPIOx						= GPIOA;
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <configAnalogPin+0x150>)
 80008e0:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <configAnalogPin+0x154>)
 80008e2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <configAnalogPin+0x150>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	711a      	strb	r2, [r3, #4]
		break;
 80008ea:	e054      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_4:
	{
		//Es el pin PA4
		handlerAdcPin.pGPIOx						= GPIOA;
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <configAnalogPin+0x150>)
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <configAnalogPin+0x154>)
 80008f0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <configAnalogPin+0x150>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	711a      	strb	r2, [r3, #4]
		break;
 80008f8:	e04d      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_5:
	{
		//Es el pin PA5
		handlerAdcPin.pGPIOx						= GPIOA;
 80008fa:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <configAnalogPin+0x150>)
 80008fc:	4a2c      	ldr	r2, [pc, #176]	; (80009b0 <configAnalogPin+0x154>)
 80008fe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <configAnalogPin+0x150>)
 8000902:	2205      	movs	r2, #5
 8000904:	711a      	strb	r2, [r3, #4]
		break;
 8000906:	e046      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6:
	{
		//Es el pin PA6
		handlerAdcPin.pGPIOx						= GPIOA;
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <configAnalogPin+0x150>)
 800090a:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <configAnalogPin+0x154>)
 800090c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <configAnalogPin+0x150>)
 8000910:	2206      	movs	r2, #6
 8000912:	711a      	strb	r2, [r3, #4]
		break;
 8000914:	e03f      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7:
	{
		//Es el pin PA7
		handlerAdcPin.pGPIOx						= GPIOA;
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <configAnalogPin+0x150>)
 8000918:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <configAnalogPin+0x154>)
 800091a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <configAnalogPin+0x150>)
 800091e:	2207      	movs	r2, #7
 8000920:	711a      	strb	r2, [r3, #4]
		break;
 8000922:	e038      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8:
	{
		//Es el pin PB0
		handlerAdcPin.pGPIOx						= GPIOB;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <configAnalogPin+0x150>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <configAnalogPin+0x158>)
 8000928:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <configAnalogPin+0x150>)
 800092c:	2200      	movs	r2, #0
 800092e:	711a      	strb	r2, [r3, #4]
		break;
 8000930:	e031      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9:
	{
		//Es el pin PB1
		handlerAdcPin.pGPIOx						= GPIOB;
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <configAnalogPin+0x150>)
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <configAnalogPin+0x158>)
 8000936:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <configAnalogPin+0x150>)
 800093a:	2201      	movs	r2, #1
 800093c:	711a      	strb	r2, [r3, #4]
		break;
 800093e:	e02a      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10:
	{
		//Es el pin PC0
		handlerAdcPin.pGPIOx						= GPIOC;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <configAnalogPin+0x150>)
 8000942:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <configAnalogPin+0x15c>)
 8000944:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <configAnalogPin+0x150>)
 8000948:	2200      	movs	r2, #0
 800094a:	711a      	strb	r2, [r3, #4]
		break;
 800094c:	e023      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11:
	{
		//Es el pin PC1
		handlerAdcPin.pGPIOx						= GPIOC;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <configAnalogPin+0x150>)
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <configAnalogPin+0x15c>)
 8000952:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <configAnalogPin+0x150>)
 8000956:	2201      	movs	r2, #1
 8000958:	711a      	strb	r2, [r3, #4]
		break;
 800095a:	e01c      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12:
	{
		//Es el pin PC2
		handlerAdcPin.pGPIOx						= GPIOC;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <configAnalogPin+0x150>)
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <configAnalogPin+0x15c>)
 8000960:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <configAnalogPin+0x150>)
 8000964:	2202      	movs	r2, #2
 8000966:	711a      	strb	r2, [r3, #4]
		break;
 8000968:	e015      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13:
	{
		//Es el pin PC3
		handlerAdcPin.pGPIOx						= GPIOC;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <configAnalogPin+0x150>)
 800096c:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <configAnalogPin+0x15c>)
 800096e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <configAnalogPin+0x150>)
 8000972:	2203      	movs	r2, #3
 8000974:	711a      	strb	r2, [r3, #4]
		break;
 8000976:	e00e      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14:
	{
		//Es el pin PC4
		handlerAdcPin.pGPIOx						= GPIOC;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <configAnalogPin+0x150>)
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <configAnalogPin+0x15c>)
 800097c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <configAnalogPin+0x150>)
 8000980:	2204      	movs	r2, #4
 8000982:	711a      	strb	r2, [r3, #4]
		break;
 8000984:	e007      	b.n	8000996 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15:
	{
		//Es el pin PC5
		handlerAdcPin.pGPIOx						= GPIOC;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <configAnalogPin+0x150>)
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <configAnalogPin+0x15c>)
 800098a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <configAnalogPin+0x150>)
 800098e:	2205      	movs	r2, #5
 8000990:	711a      	strb	r2, [r3, #4]
		break;
 8000992:	e000      	b.n	8000996 <configAnalogPin+0x13a>
	}
	default:
	{
		break;
 8000994:	bf00      	nop
	}
	}

	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <configAnalogPin+0x150>)
 8000998:	2203      	movs	r2, #3
 800099a:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <configAnalogPin+0x150>)
 800099e:	f000 f84f 	bl	8000a40 <GPIO_Config>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000a0 	.word	0x200000a0
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020800 	.word	0x40020800

080009bc <BTimer2_Callback>:
void stopTimer(BTIMER_Handler_t *ptrTimerConfig){
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}


__attribute__((weak)) void BTimer2_Callback(void){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	 __NOP();
 80009c0:	bf00      	nop
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <BTimer3_Callback>:

__attribute__((weak)) void BTimer3_Callback(void){
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	 __NOP();
 80009d0:	bf00      	nop
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	 __NOP();
 80009e0:	bf00      	nop
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80009f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	f023 0301 	bic.w	r3, r3, #1
 80009fe:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 8000a00:	f7ff ffdc 	bl	80009bc <BTimer2_Callback>

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <TIM3_IRQHandler+0x18>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <TIM3_IRQHandler+0x18>)
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 8000a18:	f7ff ffd8 	bl	80009cc <BTimer3_Callback>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40000400 	.word	0x40000400

08000a24 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <TIM4_IRQHandler+0x18>)
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <TIM4_IRQHandler+0x18>)
 8000a2e:	f023 0301 	bic.w	r3, r3, #1
 8000a32:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 8000a34:	f7ff ffd2 	bl	80009dc <BTimer4_Callback>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40000800 	.word	0x40000800

08000a40 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a88      	ldr	r2, [pc, #544]	; (8000c78 <GPIO_Config+0x238>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d106      	bne.n	8000a68 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000a5a:	4b88      	ldr	r3, [pc, #544]	; (8000c7c <GPIO_Config+0x23c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a87      	ldr	r2, [pc, #540]	; (8000c7c <GPIO_Config+0x23c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	e03a      	b.n	8000ade <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a84      	ldr	r2, [pc, #528]	; (8000c80 <GPIO_Config+0x240>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000a72:	4b82      	ldr	r3, [pc, #520]	; (8000c7c <GPIO_Config+0x23c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a81      	ldr	r2, [pc, #516]	; (8000c7c <GPIO_Config+0x23c>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	e02e      	b.n	8000ade <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a7f      	ldr	r2, [pc, #508]	; (8000c84 <GPIO_Config+0x244>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d106      	bne.n	8000a98 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000a8a:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <GPIO_Config+0x23c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a7b      	ldr	r2, [pc, #492]	; (8000c7c <GPIO_Config+0x23c>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	e022      	b.n	8000ade <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a7a      	ldr	r2, [pc, #488]	; (8000c88 <GPIO_Config+0x248>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d106      	bne.n	8000ab0 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <GPIO_Config+0x23c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <GPIO_Config+0x23c>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	e016      	b.n	8000ade <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a75      	ldr	r2, [pc, #468]	; (8000c8c <GPIO_Config+0x24c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000aba:	4b70      	ldr	r3, [pc, #448]	; (8000c7c <GPIO_Config+0x23c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a6f      	ldr	r2, [pc, #444]	; (8000c7c <GPIO_Config+0x23c>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	e00a      	b.n	8000ade <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a70      	ldr	r2, [pc, #448]	; (8000c90 <GPIO_Config+0x250>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d105      	bne.n	8000ade <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000ad2:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <GPIO_Config+0x23c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a69      	ldr	r2, [pc, #420]	; (8000c7c <GPIO_Config+0x23c>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	795b      	ldrb	r3, [r3, #5]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2103      	movs	r1, #3
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6819      	ldr	r1, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7a1b      	ldrb	r3, [r3, #8]
 8000b22:	461a      	mov	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	791b      	ldrb	r3, [r3, #4]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	408b      	lsls	r3, r1
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	400a      	ands	r2, r1
 8000b48:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6859      	ldr	r1, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	799b      	ldrb	r3, [r3, #6]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	791b      	ldrb	r3, [r3, #4]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2103      	movs	r1, #3
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	400a      	ands	r2, r1
 8000b88:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6899      	ldr	r1, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	79db      	ldrb	r3, [r3, #7]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2103      	movs	r1, #3
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68d9      	ldr	r1, [r3, #12]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	795b      	ldrb	r3, [r3, #5]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d143      	bne.n	8000c6a <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d81f      	bhi.n	8000c2a <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6a1a      	ldr	r2, [r3, #32]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	400a      	ands	r2, r1
 8000c0a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a1a      	ldr	r2, [r3, #32]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7a5b      	ldrb	r3, [r3, #9]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000c28:	e01f      	b.n	8000c6a <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	791b      	ldrb	r3, [r3, #4]
 8000c2e:	3b08      	subs	r3, #8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	4619      	mov	r1, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7a5b      	ldrb	r3, [r3, #9]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40021c00 	.word	0x40021c00

08000c94 <__NVIC_EnableIRQ>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_DisableIRQ>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db12      	blt.n	8000d08 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	490a      	ldr	r1, [pc, #40]	; (8000d14 <__NVIC_DisableIRQ+0x44>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cfc:	f3bf 8f4f 	dsb	sy
}
 8000d00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d02:	f3bf 8f6f 	isb	sy
}
 8000d06:	bf00      	nop
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a88      	ldr	r2, [pc, #544]	; (8000f48 <USART_Config+0x230>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d106      	bne.n	8000d38 <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000d2a:	4b88      	ldr	r3, [pc, #544]	; (8000f4c <USART_Config+0x234>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a87      	ldr	r2, [pc, #540]	; (8000f4c <USART_Config+0x234>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	e016      	b.n	8000d66 <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a84      	ldr	r2, [pc, #528]	; (8000f50 <USART_Config+0x238>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000d42:	4b82      	ldr	r3, [pc, #520]	; (8000f4c <USART_Config+0x234>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a81      	ldr	r2, [pc, #516]	; (8000f4c <USART_Config+0x234>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	e00a      	b.n	8000d66 <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a7f      	ldr	r2, [pc, #508]	; (8000f54 <USART_Config+0x23c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d105      	bne.n	8000d66 <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000d5a:	4b7c      	ldr	r3, [pc, #496]	; (8000f4c <USART_Config+0x234>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a7b      	ldr	r2, [pc, #492]	; (8000f4c <USART_Config+0x234>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	79db      	ldrb	r3, [r3, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d023      	beq.n	8000dc6 <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d8c:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	79db      	ldrb	r3, [r3, #7]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d10b      	bne.n	8000dae <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000da4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	719a      	strb	r2, [r3, #6]
 8000dac:	e013      	b.n	8000dd6 <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dbc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	719a      	strb	r2, [r3, #6]
 8000dc4:	e007      	b.n	8000dd6 <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dd4:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	799b      	ldrb	r3, [r3, #6]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d108      	bne.n	8000df0 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	e007      	b.n	8000e00 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dfe:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7a1b      	ldrb	r3, [r3, #8]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d82f      	bhi.n	8000e68 <USART_Config+0x150>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <USART_Config+0xf8>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e33 	.word	0x08000e33
 8000e18:	08000e45 	.word	0x08000e45
 8000e1c:	08000e57 	.word	0x08000e57
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e2e:	611a      	str	r2, [r3, #16]
		break;
 8000e30:	e01a      	b.n	8000e68 <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e40:	611a      	str	r2, [r3, #16]
		break;
 8000e42:	e011      	b.n	8000e68 <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e52:	611a      	str	r2, [r3, #16]
		break;
 8000e54:	e008      	b.n	8000e68 <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e64:	611a      	str	r2, [r3, #16]
		break;
 8000e66:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f240 6283 	movw	r2, #1667	; 0x683
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	e01a      	b.n	8000eb2 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f240 3241 	movw	r2, #833	; 0x341
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	e010      	b.n	8000eb2 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	795b      	ldrb	r3, [r3, #5]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d104      	bne.n	8000ea2 <USART_Config+0x18a>
		// El valor a cargar es 45.5625 -> Mantiza = 45, fraction = 0.5625
		// Mantiza = 45 = 0x2D, fraction = 84 * 0.5625 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	228b      	movs	r2, #139	; 0x8b
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	e007      	b.n	8000eb2 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	795b      	ldrb	r3, [r3, #5]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d103      	bne.n	8000eb2 <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2211      	movs	r2, #17
 8000eb0:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d84e      	bhi.n	8000f58 <USART_Config+0x240>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <USART_Config+0x1a8>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000ee3 	.word	0x08000ee3
 8000ec8:	08000ef5 	.word	0x08000ef5
 8000ecc:	08000f17 	.word	0x08000f17
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0208 	orr.w	r2, r2, #8
 8000ede:	60da      	str	r2, [r3, #12]
		break;
 8000ee0:	e053      	b.n	8000f8a <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0204 	orr.w	r2, r2, #4
 8000ef0:	60da      	str	r2, [r3, #12]
		break;
 8000ef2:	e04a      	b.n	8000f8a <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0208 	orr.w	r2, r2, #8
 8000f02:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0204 	orr.w	r2, r2, #4
 8000f12:	60da      	str	r2, [r3, #12]
		break;
 8000f14:	e039      	b.n	8000f8a <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0208 	bic.w	r2, r2, #8
 8000f24:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0204 	bic.w	r2, r2, #4
 8000f34:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f44:	60da      	str	r2, [r3, #12]
		break;
 8000f46:	e020      	b.n	8000f8a <USART_Config+0x272>
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40004400 	.word	0x40004400
 8000f54:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0208 	bic.w	r2, r2, #8
 8000f66:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f86:	60da      	str	r2, [r3, #12]
		break;
 8000f88:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d007      	beq.n	8000fa2 <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fa0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb4:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d01a      	beq.n	8000ff4 <USART_Config+0x2dc>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <USART_Config+0x31c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d103      	bne.n	8000fd0 <USART_Config+0x2b8>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8000fc8:	2025      	movs	r0, #37	; 0x25
 8000fca:	f7ff fe63 	bl	8000c94 <__NVIC_EnableIRQ>
 8000fce:	e01a      	b.n	8001006 <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <USART_Config+0x320>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d103      	bne.n	8000fe2 <USART_Config+0x2ca>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8000fda:	2026      	movs	r0, #38	; 0x26
 8000fdc:	f7ff fe5a 	bl	8000c94 <__NVIC_EnableIRQ>
 8000fe0:	e011      	b.n	8001006 <USART_Config+0x2ee>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <USART_Config+0x324>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d10c      	bne.n	8001006 <USART_Config+0x2ee>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8000fec:	2047      	movs	r0, #71	; 0x47
 8000fee:	f7ff fe51 	bl	8000c94 <__NVIC_EnableIRQ>
 8000ff2:	e008      	b.n	8001006 <USART_Config+0x2ee>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 8000ff4:	2025      	movs	r0, #37	; 0x25
 8000ff6:	f7ff fe6b 	bl	8000cd0 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 8000ffa:	2026      	movs	r0, #38	; 0x26
 8000ffc:	f7ff fe68 	bl	8000cd0 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 8001000:	2047      	movs	r0, #71	; 0x47
 8001002:	f7ff fe65 	bl	8000cd0 <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7a5b      	ldrb	r3, [r3, #9]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d003      	beq.n	8001016 <USART_Config+0x2fe>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7a5b      	ldrb	r3, [r3, #9]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d107      	bne.n	8001026 <USART_Config+0x30e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0220 	orr.w	r2, r2, #32
 8001024:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001026:	b662      	cpsie	i
}
 8001028:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40011000 	.word	0x40011000
 8001038:	40004400 	.word	0x40004400
 800103c:	40011400 	.word	0x40011400

08001040 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7a5b      	ldrb	r3, [r3, #9]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <writeChar+0x1c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7a5b      	ldrb	r3, [r3, #9]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d10c      	bne.n	8001076 <writeChar+0x36>
		auxDataToSend = dataToSend;
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <writeChar+0x5c>)
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	e00c      	b.n	800108e <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 8001074:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f7      	beq.n	8001074 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	605a      	str	r2, [r3, #4]
	}
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200000af 	.word	0x200000af

080010a0 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 80010aa:	e008      	b.n	80010be <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffc4 	bl	8001040 <writeChar>
		msgToSend++;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f2      	bne.n	80010ac <writeMsg+0xc>
	}
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return auxRxData;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <getRxData+0x14>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200000ae 	.word	0x200000ae

080010e8 <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	 __NOP();
 80010ec:	bf00      	nop
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_TX_Callback(void){
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	 __NOP();
 80010fc:	bf00      	nop
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	 __NOP();
 800110c:	bf00      	nop
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	 __NOP();
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <USART1_IRQHandler+0x48>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <USART1_IRQHandler+0x48>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <USART1_IRQHandler+0x4c>)
 8001140:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 8001142:	f7ff ffe1 	bl	8001108 <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 8001146:	e011      	b.n	800116c <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <USART1_IRQHandler+0x48>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <USART1_IRQHandler+0x50>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <USART1_IRQHandler+0x48>)
 800115a:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <USART1_IRQHandler+0x48>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <USART1_IRQHandler+0x48>)
 8001162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001166:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 8001168:	f7ff ffbe 	bl	80010e8 <Usart1_TX_Callback>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40011000 	.word	0x40011000
 8001174:	200000ae 	.word	0x200000ae
 8001178:	200000af 	.word	0x200000af

0800117c <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <USART2_IRQHandler+0x48>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <USART2_IRQHandler+0x48>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <USART2_IRQHandler+0x4c>)
 8001194:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 8001196:	f000 f9ad 	bl	80014f4 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 800119a:	e011      	b.n	80011c0 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <USART2_IRQHandler+0x48>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <USART2_IRQHandler+0x50>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <USART2_IRQHandler+0x48>)
 80011ae:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <USART2_IRQHandler+0x48>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <USART2_IRQHandler+0x48>)
 80011b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ba:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 80011bc:	f000 f9a6 	bl	800150c <Usart2_TX_Callback>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40004400 	.word	0x40004400
 80011c8:	200000ae 	.word	0x200000ae
 80011cc:	200000af 	.word	0x200000af

080011d0 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <USART6_IRQHandler+0x48>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <USART6_IRQHandler+0x48>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <USART6_IRQHandler+0x4c>)
 80011e8:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 80011ea:	f7ff ff95 	bl	8001118 <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 80011ee:	e011      	b.n	8001214 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <USART6_IRQHandler+0x48>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <USART6_IRQHandler+0x50>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <USART6_IRQHandler+0x48>)
 8001202:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <USART6_IRQHandler+0x48>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <USART6_IRQHandler+0x48>)
 800120a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800120e:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8001210:	f7ff ff72 	bl	80010f8 <Usart6_TX_Callback>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40011400 	.word	0x40011400
 800121c:	200000ae 	.word	0x200000ae
 8001220:	200000af 	.word	0x200000af

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122a:	f000 fa69 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122e:	f000 f85b 	bl	80012e8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	initSystem();
 8001232:	f000 f8c1 	bl	80013b8 <initSystem>
	char hola[10] = "Hola";
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <main+0xa8>)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123e:	6018      	str	r0, [r3, #0]
 8001240:	3304      	adds	r3, #4
 8001242:	7019      	strb	r1, [r3, #0]
 8001244:	f107 0309 	add.w	r3, r7, #9
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	711a      	strb	r2, [r3, #4]
	writeMsg(&handlerUSART2, hola);
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	481f      	ldr	r0, [pc, #124]	; (80012d0 <main+0xac>)
 8001254:	f7ff ff24 	bl	80010a0 <writeMsg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (rxData != '\0'){
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <main+0xb0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d014      	beq.n	800128a <main+0x66>
			//writeChar(&handlerUSART2, rxData);
			if (rxData == 's'){
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <main+0xb0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b73      	cmp	r3, #115	; 0x73
 8001266:	d101      	bne.n	800126c <main+0x48>
				// Lanzamos una nueva conversión ADC
				startSingleConversion();
 8001268:	f7ff faa0 	bl	80007ac <startSingleConversion>
			}
			if (rxData == 'c'){
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <main+0xb0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b63      	cmp	r3, #99	; 0x63
 8001272:	d101      	bne.n	8001278 <main+0x54>
//				sprintf(bufferData, "t1 = %lu\n\r",HAL_GetTick());
//				writeMsg(&handlerUSART2, bufferData);
				startContinuousConversion();
 8001274:	f7ff faaa 	bl	80007cc <startContinuousConversion>
			}
			if (rxData == 'p'){
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <main+0xb0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b70      	cmp	r3, #112	; 0x70
 800127e:	d101      	bne.n	8001284 <main+0x60>
				stopContinuousConversion();
 8001280:	f7ff faba 	bl	80007f8 <stopContinuousConversion>
			}

			rxData = '\0';
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <main+0xb0>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
		}

		if (adcIsComplete == true){
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <main+0xb4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d1e2      	bne.n	8001258 <main+0x34>
			for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 8001292:	2300      	movs	r3, #0
 8001294:	81fb      	strh	r3, [r7, #14]
 8001296:	e00f      	b.n	80012b8 <main+0x94>
				sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <main+0xb8>)
 800129c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a0:	461a      	mov	r2, r3
 80012a2:	490f      	ldr	r1, [pc, #60]	; (80012e0 <main+0xbc>)
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <main+0xc0>)
 80012a6:	f001 f819 	bl	80022dc <siprintf>
				writeMsg(&handlerUSART2, bufferData);
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <main+0xc0>)
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <main+0xac>)
 80012ae:	f7ff fef7 	bl	80010a0 <writeMsg>
			for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	3301      	adds	r3, #1
 80012b6:	81fb      	strh	r3, [r7, #14]
 80012b8:	89fb      	ldrh	r3, [r7, #14]
 80012ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80012be:	4293      	cmp	r3, r2
 80012c0:	d9ea      	bls.n	8001298 <main+0x74>
			}
			adcIsComplete = false;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <main+0xb4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 80012c8:	e7c6      	b.n	8001258 <main+0x34>
 80012ca:	bf00      	nop
 80012cc:	08002bd8 	.word	0x08002bd8
 80012d0:	200000e0 	.word	0x200000e0
 80012d4:	20000172 	.word	0x20000172
 80012d8:	20000173 	.word	0x20000173
 80012dc:	20000174 	.word	0x20000174
 80012e0:	08002bd0 	.word	0x08002bd0
 80012e4:	20000000 	.word	0x20000000

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ffe8 	bl	80022cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <SystemClock_Config+0xc8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <SystemClock_Config+0xc8>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <SystemClock_Config+0xc8>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <SystemClock_Config+0xcc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <SystemClock_Config+0xcc>)
 8001332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemClock_Config+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001358:	2308      	movs	r3, #8
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800135c:	2340      	movs	r3, #64	; 0x40
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fb1f 	bl	80019b0 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001378:	f000 f8f8 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2101      	movs	r1, #1
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fd81 	bl	8001ea0 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013a4:	f000 f8e2 	bl	800156c <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <initSystem>:

/* USER CODE BEGIN 4 */
void initSystem(void){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	//RCC_Config();

	// Configuración para el State LED
	handlerStateLED.pGPIOx 								= GPIOA;
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <initSystem+0x118>)
 80013be:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <initSystem+0x11c>)
 80013c0:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80013c2:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <initSystem+0x118>)
 80013c4:	2205      	movs	r2, #5
 80013c6:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 80013c8:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <initSystem+0x118>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <initSystem+0x118>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 80013d4:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <initSystem+0x118>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <initSystem+0x118>)
 80013dc:	2201      	movs	r2, #1
 80013de:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Está configuración no es relevante para el PIN en este caso
 80013e0:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <initSystem+0x118>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 80013e6:	483a      	ldr	r0, [pc, #232]	; (80014d0 <initSystem+0x118>)
 80013e8:	f7ff fb2a 	bl	8000a40 <GPIO_Config>

	// Configuración para el Test LED
	handlerTestLED.pGPIOx 								= GPIOB;
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <initSystem+0x120>)
 80013ee:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <initSystem+0x124>)
 80013f0:	601a      	str	r2, [r3, #0]
	handlerTestLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <initSystem+0x120>)
 80013f4:	2209      	movs	r2, #9
 80013f6:	711a      	strb	r2, [r3, #4]
	handlerTestLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <initSystem+0x120>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	715a      	strb	r2, [r3, #5]
	handlerTestLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <initSystem+0x120>)
 8001400:	2200      	movs	r2, #0
 8001402:	721a      	strb	r2, [r3, #8]
	handlerTestLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;	// Está configuración no es relevante para el PIN en este caso
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <initSystem+0x120>)
 8001406:	2200      	movs	r2, #0
 8001408:	71da      	strb	r2, [r3, #7]
	handlerTestLED.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <initSystem+0x120>)
 800140c:	2201      	movs	r2, #1
 800140e:	719a      	strb	r2, [r3, #6]
	handlerTestLED.GPIO_PinConfig.GPIO_PinAltFunMode	= AF0;					// Está configuración no es relevante para el PIN en este caso
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <initSystem+0x120>)
 8001412:	2200      	movs	r2, #0
 8001414:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del State LED
	GPIO_Config(&handlerTestLED);
 8001416:	4830      	ldr	r0, [pc, #192]	; (80014d8 <initSystem+0x120>)
 8001418:	f7ff fb12 	bl	8000a40 <GPIO_Config>

	// Configuración del PIN que recibe la información por la USB
	handlerRxPIN.pGPIOx								= GPIOA;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <initSystem+0x128>)
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <initSystem+0x11c>)
 8001420:	601a      	str	r2, [r3, #0]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <initSystem+0x128>)
 8001424:	2203      	movs	r2, #3
 8001426:	711a      	strb	r2, [r3, #4]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <initSystem+0x128>)
 800142a:	2202      	movs	r2, #2
 800142c:	715a      	strb	r2, [r3, #5]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <initSystem+0x128>)
 8001430:	2200      	movs	r2, #0
 8001432:	721a      	strb	r2, [r3, #8]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <initSystem+0x128>)
 8001436:	2200      	movs	r2, #0
 8001438:	71da      	strb	r2, [r3, #7]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <initSystem+0x128>)
 800143c:	2201      	movs	r2, #1
 800143e:	719a      	strb	r2, [r3, #6]
	handlerRxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <initSystem+0x128>)
 8001442:	2207      	movs	r2, #7
 8001444:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del Rx PIN
	GPIO_Config(&handlerRxPIN);
 8001446:	4826      	ldr	r0, [pc, #152]	; (80014e0 <initSystem+0x128>)
 8001448:	f7ff fafa 	bl	8000a40 <GPIO_Config>

	// Configuración del PIN que envía la información por la USB (TX)
	handlerTxPIN.pGPIOx								= GPIOA;
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <initSystem+0x12c>)
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <initSystem+0x11c>)
 8001450:	601a      	str	r2, [r3, #0]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <initSystem+0x12c>)
 8001454:	2202      	movs	r2, #2
 8001456:	711a      	strb	r2, [r3, #4]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <initSystem+0x12c>)
 800145a:	2202      	movs	r2, #2
 800145c:	715a      	strb	r2, [r3, #5]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <initSystem+0x12c>)
 8001460:	2200      	movs	r2, #0
 8001462:	721a      	strb	r2, [r3, #8]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <initSystem+0x12c>)
 8001466:	2200      	movs	r2, #0
 8001468:	71da      	strb	r2, [r3, #7]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <initSystem+0x12c>)
 800146c:	2201      	movs	r2, #1
 800146e:	719a      	strb	r2, [r3, #6]
	handlerTxPIN.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <initSystem+0x12c>)
 8001472:	2207      	movs	r2, #7
 8001474:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del Tx PIN
	GPIO_Config(&handlerTxPIN);
 8001476:	481b      	ldr	r0, [pc, #108]	; (80014e4 <initSystem+0x12c>)
 8001478:	f7ff fae2 	bl	8000a40 <GPIO_Config>

	// Configuración del USART2
	handlerUSART2.ptrUSARTx							= USART2;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <initSystem+0x130>)
 800147e:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <initSystem+0x134>)
 8001480:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_mode			= USART_MODE_RXTX;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <initSystem+0x130>)
 8001484:	2202      	movs	r2, #2
 8001486:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <initSystem+0x130>)
 800148a:	2202      	movs	r2, #2
 800148c:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <initSystem+0x130>)
 8001490:	2200      	movs	r2, #0
 8001492:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity			= USART_PARITY_NONE;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <initSystem+0x130>)
 8001496:	2200      	movs	r2, #0
 8001498:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <initSystem+0x130>)
 800149c:	2200      	movs	r2, #0
 800149e:	721a      	strb	r2, [r3, #8]
	handlerUSART2.USART_Config.USART_interrupt		= USART_INTERRUPT_RX;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <initSystem+0x130>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	725a      	strb	r2, [r3, #9]

	// Se carga la configuración del USART
	USART_Config(&handlerUSART2);
 80014a6:	4810      	ldr	r0, [pc, #64]	; (80014e8 <initSystem+0x130>)
 80014a8:	f7ff fc36 	bl	8000d18 <USART_Config>

	// Configuracion del ADC
	adcConfig.channel			= ADC_CHANNEL_10;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <initSystem+0x138>)
 80014ae:	220a      	movs	r2, #10
 80014b0:	701a      	strb	r2, [r3, #0]
	adcConfig.dataAlignment		= ADC_ALIGNMENT_RIGHT;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <initSystem+0x138>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution		= ADC_RESOLUTION_8_BIT;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <initSystem+0x138>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod	= ADC_SAMPLING_PERIOD_56_CYCLES;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <initSystem+0x138>)
 80014c0:	2203      	movs	r2, #3
 80014c2:	805a      	strh	r2, [r3, #2]

	adc_Config(&adcConfig);
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <initSystem+0x138>)
 80014c6:	f7ff f8a5 	bl	8000614 <adc_Config>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000b0 	.word	0x200000b0
 80014d4:	40020000 	.word	0x40020000
 80014d8:	200000bc 	.word	0x200000bc
 80014dc:	40020400 	.word	0x40020400
 80014e0:	200000c8 	.word	0x200000c8
 80014e4:	200000d4 	.word	0x200000d4
 80014e8:	200000e0 	.word	0x200000e0
 80014ec:	40004400 	.word	0x40004400
 80014f0:	2000016c 	.word	0x2000016c

080014f4 <Usart2_RX_Callback>:

/* Implementacion del Callback para el Usart2 */
void Usart2_RX_Callback(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80014f8:	f7ff fdea 	bl	80010d0 <getRxData>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b01      	ldr	r3, [pc, #4]	; (8001508 <Usart2_RX_Callback+0x14>)
 8001502:	701a      	strb	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000172 	.word	0x20000172

0800150c <Usart2_TX_Callback>:

void Usart2_TX_Callback(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	__NOP();
 8001510:	bf00      	nop
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <adcComplete_Callback>:

void adcComplete_Callback(void){
 800151c:	b598      	push	{r3, r4, r7, lr}
 800151e:	af00      	add	r7, sp, #0
	adcSignal[dataPosition] = getADC();
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <adcComplete_Callback+0x44>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	461c      	mov	r4, r3
 8001526:	f7ff f977 	bl	8000818 <getADC>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <adcComplete_Callback+0x48>)
 8001530:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <adcComplete_Callback+0x44>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <adcComplete_Callback+0x44>)
 800153e:	801a      	strh	r2, [r3, #0]
	if (dataPosition >= ADC_SIGNAL_SIZE){
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <adcComplete_Callback+0x44>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	f242 720f 	movw	r2, #9999	; 0x270f
 8001548:	4293      	cmp	r3, r2
 800154a:	d907      	bls.n	800155c <adcComplete_Callback+0x40>
		dataPosition = 0;
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <adcComplete_Callback+0x44>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <adcComplete_Callback+0x4c>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
		stopContinuousConversion();
 8001558:	f7ff f94e 	bl	80007f8 <stopContinuousConversion>
		//sprintf(bufferData, "t2 = %lu\n\r",HAL_GetTick());
		//writeMsg(&handlerUSART2, bufferData);
	}
}
 800155c:	bf00      	nop
 800155e:	bd98      	pop	{r3, r4, r7, pc}
 8001560:	20004f94 	.word	0x20004f94
 8001564:	20000174 	.word	0x20000174
 8001568:	20000173 	.word	0x20000173

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_MspInit+0x4c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015b6:	2007      	movs	r0, #7
 80015b8:	f000 f9c6 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f8c6 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f000 fe14 	bl	8002278 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20020000 	.word	0x20020000
 800167c:	00000400 	.word	0x00000400
 8001680:	20004f98 	.word	0x20004f98
 8001684:	20004fb0 	.word	0x20004fb0

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b2:	490e      	ldr	r1, [pc, #56]	; (80016ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c8:	4c0b      	ldr	r4, [pc, #44]	; (80016f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016d6:	f7ff ffd7 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f000 fdd3 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff fda1 	bl	8001224 <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80016f0:	08002c38 	.word	0x08002c38
  ldr r2, =_sbss
 80016f4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80016f8:	20004fb0 	.word	0x20004fb0

080016fc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <DMA1_Stream0_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_Init+0x40>)
 800170a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_Init+0x40>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_Init+0x40>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f90d 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f808 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff ff20 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x54>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x58>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f917 	bl	8001996 <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f000 f8ed 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_InitTick+0x5c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000014 	.word	0x20000014
 800179c:	2000001c 	.word	0x2000001c
 80017a0:	20000018 	.word	0x20000018

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000001c 	.word	0x2000001c
 80017c8:	20004f9c 	.word	0x20004f9c

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20004f9c 	.word	0x20004f9c

080017e4 <__NVIC_SetPriorityGrouping>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_SetPriority>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff47 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff5c 	bl	800182c <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffb0 	bl	8001904 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e267      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d075      	beq.n	8001aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d00c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d112      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f2:	d10b      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d05b      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x108>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d157      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e242      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x74>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e01d      	b.n	8001a60 <HAL_RCC_OscConfig+0xb0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x98>
 8001a2e:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6f      	ldr	r2, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6c      	ldr	r2, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0xb0>
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a68      	ldr	r2, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a65      	ldr	r2, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff feb0 	bl	80017cc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff feac 	bl	80017cc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e207      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0xc0>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fe9c 	bl	80017cc <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff fe98 	bl	80017cc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1f3      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0xe8>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d11c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x152>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e1c7      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x244>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff fe51 	bl	80017cc <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fe4d 	bl	80017cc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1a8      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4925      	ldr	r1, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x244>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fe30 	bl	80017cc <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fe2c 	bl	80017cc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e187      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d036      	beq.n	8001c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x248>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fe10 	bl	80017cc <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fe0c 	bl	80017cc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e167      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x200>
 8001bce:	e01b      	b.n	8001c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x248>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fdf9 	bl	80017cc <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	e00e      	b.n	8001bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff fdf5 	bl	80017cc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d907      	bls.n	8001bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e150      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470000 	.word	0x42470000
 8001bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ea      	bne.n	8001bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8097 	beq.w	8001d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fdb5 	bl	80017cc <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff fdb1 	bl	80017cc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e10c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2ea>
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a63      	ldr	r2, [pc, #396]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x324>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x30c>
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x324>
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cce:	f023 0304 	bic.w	r3, r3, #4
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d015      	beq.n	8001d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fd76 	bl	80017cc <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fd72 	bl	80017cc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0cb      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ee      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff fd60 	bl	80017cc <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff fd5c 	bl	80017cc <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0b5      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ee      	bne.n	8001d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a1 	beq.w	8001e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d05c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d141      	bne.n	8001de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fd30 	bl	80017cc <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff fd2c 	bl	80017cc <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e087      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	019b      	lsls	r3, r3, #6
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	491b      	ldr	r1, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fd05 	bl	80017cc <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fd01 	bl	80017cc <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e05c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x416>
 8001de4:	e054      	b.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fcee 	bl	80017cc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff fcea 	bl	80017cc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e045      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x444>
 8001e12:	e03d      	b.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e038      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000
 8001e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d028      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d121      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0cc      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b68      	ldr	r3, [pc, #416]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d90c      	bls.n	8001edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d044      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d119      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e067      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7ff fc1c 	bl	80017cc <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7ff fc18 	bl	80017cc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e04f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d20c      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f821 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fb7c 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00
 800205c:	40023800 	.word	0x40023800
 8002060:	08002be4 	.word	0x08002be4
 8002064:	20000014 	.word	0x20000014
 8002068:	20000018 	.word	0x20000018

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002070:	b094      	sub	sp, #80	; 0x50
 8002072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
 8002078:	2300      	movs	r3, #0
 800207a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800207c:	2300      	movs	r3, #0
 800207e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002084:	4b79      	ldr	r3, [pc, #484]	; (800226c <HAL_RCC_GetSysClockFreq+0x200>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d00d      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 8002090:	2b08      	cmp	r3, #8
 8002092:	f200 80e1 	bhi.w	8002258 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
 800209a:	2b04      	cmp	r3, #4
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800209e:	e0db      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_GetSysClockFreq+0x204>)
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020a4:	e0db      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b73      	ldr	r3, [pc, #460]	; (8002274 <HAL_RCC_GetSysClockFreq+0x208>)
 80020a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020aa:	e0d8      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_RCC_GetSysClockFreq+0x200>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b6:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCC_GetSysClockFreq+0x200>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d063      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c2:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_GetSysClockFreq+0x200>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	2200      	movs	r2, #0
 80020ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80020cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
 80020d6:	2300      	movs	r3, #0
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
 80020da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020de:	4622      	mov	r2, r4
 80020e0:	462b      	mov	r3, r5
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	0159      	lsls	r1, r3, #5
 80020ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f0:	0150      	lsls	r0, r2, #5
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4621      	mov	r1, r4
 80020f8:	1a51      	subs	r1, r2, r1
 80020fa:	6139      	str	r1, [r7, #16]
 80020fc:	4629      	mov	r1, r5
 80020fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002110:	4659      	mov	r1, fp
 8002112:	018b      	lsls	r3, r1, #6
 8002114:	4651      	mov	r1, sl
 8002116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800211a:	4651      	mov	r1, sl
 800211c:	018a      	lsls	r2, r1, #6
 800211e:	4651      	mov	r1, sl
 8002120:	ebb2 0801 	subs.w	r8, r2, r1
 8002124:	4659      	mov	r1, fp
 8002126:	eb63 0901 	sbc.w	r9, r3, r1
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800213a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213e:	4690      	mov	r8, r2
 8002140:	4699      	mov	r9, r3
 8002142:	4623      	mov	r3, r4
 8002144:	eb18 0303 	adds.w	r3, r8, r3
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	462b      	mov	r3, r5
 800214c:	eb49 0303 	adc.w	r3, r9, r3
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800215e:	4629      	mov	r1, r5
 8002160:	024b      	lsls	r3, r1, #9
 8002162:	4621      	mov	r1, r4
 8002164:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002168:	4621      	mov	r1, r4
 800216a:	024a      	lsls	r2, r1, #9
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002172:	2200      	movs	r2, #0
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
 8002176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800217c:	f7fe f880 	bl	8000280 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002188:	e058      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_RCC_GetSysClockFreq+0x200>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	2200      	movs	r2, #0
 8002192:	4618      	mov	r0, r3
 8002194:	4611      	mov	r1, r2
 8002196:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800219a:	623b      	str	r3, [r7, #32]
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021a4:	4642      	mov	r2, r8
 80021a6:	464b      	mov	r3, r9
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	0159      	lsls	r1, r3, #5
 80021b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b6:	0150      	lsls	r0, r2, #5
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4641      	mov	r1, r8
 80021be:	ebb2 0a01 	subs.w	sl, r2, r1
 80021c2:	4649      	mov	r1, r9
 80021c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021dc:	ebb2 040a 	subs.w	r4, r2, sl
 80021e0:	eb63 050b 	sbc.w	r5, r3, fp
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	00eb      	lsls	r3, r5, #3
 80021ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021f2:	00e2      	lsls	r2, r4, #3
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	4643      	mov	r3, r8
 80021fa:	18e3      	adds	r3, r4, r3
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	464b      	mov	r3, r9
 8002200:	eb45 0303 	adc.w	r3, r5, r3
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002212:	4629      	mov	r1, r5
 8002214:	028b      	lsls	r3, r1, #10
 8002216:	4621      	mov	r1, r4
 8002218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800221c:	4621      	mov	r1, r4
 800221e:	028a      	lsls	r2, r1, #10
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002226:	2200      	movs	r2, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	61fa      	str	r2, [r7, #28]
 800222c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002230:	f7fe f826 	bl	8000280 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4613      	mov	r3, r2
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_GetSysClockFreq+0x200>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	3301      	adds	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800224c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800224e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x204>)
 800225a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002260:	4618      	mov	r0, r3
 8002262:	3750      	adds	r7, #80	; 0x50
 8002264:	46bd      	mov	sp, r7
 8002266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	00f42400 	.word	0x00f42400
 8002274:	007a1200 	.word	0x007a1200

08002278 <__errno>:
 8002278:	4b01      	ldr	r3, [pc, #4]	; (8002280 <__errno+0x8>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000020 	.word	0x20000020

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	4d0d      	ldr	r5, [pc, #52]	; (80022bc <__libc_init_array+0x38>)
 8002288:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <__libc_init_array+0x3c>)
 800228a:	1b64      	subs	r4, r4, r5
 800228c:	10a4      	asrs	r4, r4, #2
 800228e:	2600      	movs	r6, #0
 8002290:	42a6      	cmp	r6, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	4d0b      	ldr	r5, [pc, #44]	; (80022c4 <__libc_init_array+0x40>)
 8002296:	4c0c      	ldr	r4, [pc, #48]	; (80022c8 <__libc_init_array+0x44>)
 8002298:	f000 fc8e 	bl	8002bb8 <_init>
 800229c:	1b64      	subs	r4, r4, r5
 800229e:	10a4      	asrs	r4, r4, #2
 80022a0:	2600      	movs	r6, #0
 80022a2:	42a6      	cmp	r6, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ac:	4798      	blx	r3
 80022ae:	3601      	adds	r6, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b6:	4798      	blx	r3
 80022b8:	3601      	adds	r6, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	08002c30 	.word	0x08002c30
 80022c0:	08002c30 	.word	0x08002c30
 80022c4:	08002c30 	.word	0x08002c30
 80022c8:	08002c34 	.word	0x08002c34

080022cc <memset>:
 80022cc:	4402      	add	r2, r0
 80022ce:	4603      	mov	r3, r0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d100      	bne.n	80022d6 <memset+0xa>
 80022d4:	4770      	bx	lr
 80022d6:	f803 1b01 	strb.w	r1, [r3], #1
 80022da:	e7f9      	b.n	80022d0 <memset+0x4>

080022dc <siprintf>:
 80022dc:	b40e      	push	{r1, r2, r3}
 80022de:	b500      	push	{lr}
 80022e0:	b09c      	sub	sp, #112	; 0x70
 80022e2:	ab1d      	add	r3, sp, #116	; 0x74
 80022e4:	9002      	str	r0, [sp, #8]
 80022e6:	9006      	str	r0, [sp, #24]
 80022e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <siprintf+0x38>)
 80022ee:	9107      	str	r1, [sp, #28]
 80022f0:	9104      	str	r1, [sp, #16]
 80022f2:	4909      	ldr	r1, [pc, #36]	; (8002318 <siprintf+0x3c>)
 80022f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80022f8:	9105      	str	r1, [sp, #20]
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	a902      	add	r1, sp, #8
 8002300:	f000 f868 	bl	80023d4 <_svfiprintf_r>
 8002304:	9b02      	ldr	r3, [sp, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	b01c      	add	sp, #112	; 0x70
 800230c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002310:	b003      	add	sp, #12
 8002312:	4770      	bx	lr
 8002314:	20000020 	.word	0x20000020
 8002318:	ffff0208 	.word	0xffff0208

0800231c <__ssputs_r>:
 800231c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002320:	688e      	ldr	r6, [r1, #8]
 8002322:	429e      	cmp	r6, r3
 8002324:	4682      	mov	sl, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4690      	mov	r8, r2
 800232a:	461f      	mov	r7, r3
 800232c:	d838      	bhi.n	80023a0 <__ssputs_r+0x84>
 800232e:	898a      	ldrh	r2, [r1, #12]
 8002330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002334:	d032      	beq.n	800239c <__ssputs_r+0x80>
 8002336:	6825      	ldr	r5, [r4, #0]
 8002338:	6909      	ldr	r1, [r1, #16]
 800233a:	eba5 0901 	sub.w	r9, r5, r1
 800233e:	6965      	ldr	r5, [r4, #20]
 8002340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002348:	3301      	adds	r3, #1
 800234a:	444b      	add	r3, r9
 800234c:	106d      	asrs	r5, r5, #1
 800234e:	429d      	cmp	r5, r3
 8002350:	bf38      	it	cc
 8002352:	461d      	movcc	r5, r3
 8002354:	0553      	lsls	r3, r2, #21
 8002356:	d531      	bpl.n	80023bc <__ssputs_r+0xa0>
 8002358:	4629      	mov	r1, r5
 800235a:	f000 fb63 	bl	8002a24 <_malloc_r>
 800235e:	4606      	mov	r6, r0
 8002360:	b950      	cbnz	r0, 8002378 <__ssputs_r+0x5c>
 8002362:	230c      	movs	r3, #12
 8002364:	f8ca 3000 	str.w	r3, [sl]
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236e:	81a3      	strh	r3, [r4, #12]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002378:	6921      	ldr	r1, [r4, #16]
 800237a:	464a      	mov	r2, r9
 800237c:	f000 fabe 	bl	80028fc <memcpy>
 8002380:	89a3      	ldrh	r3, [r4, #12]
 8002382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238a:	81a3      	strh	r3, [r4, #12]
 800238c:	6126      	str	r6, [r4, #16]
 800238e:	6165      	str	r5, [r4, #20]
 8002390:	444e      	add	r6, r9
 8002392:	eba5 0509 	sub.w	r5, r5, r9
 8002396:	6026      	str	r6, [r4, #0]
 8002398:	60a5      	str	r5, [r4, #8]
 800239a:	463e      	mov	r6, r7
 800239c:	42be      	cmp	r6, r7
 800239e:	d900      	bls.n	80023a2 <__ssputs_r+0x86>
 80023a0:	463e      	mov	r6, r7
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	4632      	mov	r2, r6
 80023a6:	4641      	mov	r1, r8
 80023a8:	f000 fab6 	bl	8002918 <memmove>
 80023ac:	68a3      	ldr	r3, [r4, #8]
 80023ae:	1b9b      	subs	r3, r3, r6
 80023b0:	60a3      	str	r3, [r4, #8]
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	4433      	add	r3, r6
 80023b6:	6023      	str	r3, [r4, #0]
 80023b8:	2000      	movs	r0, #0
 80023ba:	e7db      	b.n	8002374 <__ssputs_r+0x58>
 80023bc:	462a      	mov	r2, r5
 80023be:	f000 fba5 	bl	8002b0c <_realloc_r>
 80023c2:	4606      	mov	r6, r0
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d1e1      	bne.n	800238c <__ssputs_r+0x70>
 80023c8:	6921      	ldr	r1, [r4, #16]
 80023ca:	4650      	mov	r0, sl
 80023cc:	f000 fabe 	bl	800294c <_free_r>
 80023d0:	e7c7      	b.n	8002362 <__ssputs_r+0x46>
	...

080023d4 <_svfiprintf_r>:
 80023d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d8:	4698      	mov	r8, r3
 80023da:	898b      	ldrh	r3, [r1, #12]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	b09d      	sub	sp, #116	; 0x74
 80023e0:	4607      	mov	r7, r0
 80023e2:	460d      	mov	r5, r1
 80023e4:	4614      	mov	r4, r2
 80023e6:	d50e      	bpl.n	8002406 <_svfiprintf_r+0x32>
 80023e8:	690b      	ldr	r3, [r1, #16]
 80023ea:	b963      	cbnz	r3, 8002406 <_svfiprintf_r+0x32>
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	f000 fb19 	bl	8002a24 <_malloc_r>
 80023f2:	6028      	str	r0, [r5, #0]
 80023f4:	6128      	str	r0, [r5, #16]
 80023f6:	b920      	cbnz	r0, 8002402 <_svfiprintf_r+0x2e>
 80023f8:	230c      	movs	r3, #12
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	e0d1      	b.n	80025a6 <_svfiprintf_r+0x1d2>
 8002402:	2340      	movs	r3, #64	; 0x40
 8002404:	616b      	str	r3, [r5, #20]
 8002406:	2300      	movs	r3, #0
 8002408:	9309      	str	r3, [sp, #36]	; 0x24
 800240a:	2320      	movs	r3, #32
 800240c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002410:	f8cd 800c 	str.w	r8, [sp, #12]
 8002414:	2330      	movs	r3, #48	; 0x30
 8002416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80025c0 <_svfiprintf_r+0x1ec>
 800241a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800241e:	f04f 0901 	mov.w	r9, #1
 8002422:	4623      	mov	r3, r4
 8002424:	469a      	mov	sl, r3
 8002426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800242a:	b10a      	cbz	r2, 8002430 <_svfiprintf_r+0x5c>
 800242c:	2a25      	cmp	r2, #37	; 0x25
 800242e:	d1f9      	bne.n	8002424 <_svfiprintf_r+0x50>
 8002430:	ebba 0b04 	subs.w	fp, sl, r4
 8002434:	d00b      	beq.n	800244e <_svfiprintf_r+0x7a>
 8002436:	465b      	mov	r3, fp
 8002438:	4622      	mov	r2, r4
 800243a:	4629      	mov	r1, r5
 800243c:	4638      	mov	r0, r7
 800243e:	f7ff ff6d 	bl	800231c <__ssputs_r>
 8002442:	3001      	adds	r0, #1
 8002444:	f000 80aa 	beq.w	800259c <_svfiprintf_r+0x1c8>
 8002448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800244a:	445a      	add	r2, fp
 800244c:	9209      	str	r2, [sp, #36]	; 0x24
 800244e:	f89a 3000 	ldrb.w	r3, [sl]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80a2 	beq.w	800259c <_svfiprintf_r+0x1c8>
 8002458:	2300      	movs	r3, #0
 800245a:	f04f 32ff 	mov.w	r2, #4294967295
 800245e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002462:	f10a 0a01 	add.w	sl, sl, #1
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	9307      	str	r3, [sp, #28]
 800246a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800246e:	931a      	str	r3, [sp, #104]	; 0x68
 8002470:	4654      	mov	r4, sl
 8002472:	2205      	movs	r2, #5
 8002474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002478:	4851      	ldr	r0, [pc, #324]	; (80025c0 <_svfiprintf_r+0x1ec>)
 800247a:	f7fd feb1 	bl	80001e0 <memchr>
 800247e:	9a04      	ldr	r2, [sp, #16]
 8002480:	b9d8      	cbnz	r0, 80024ba <_svfiprintf_r+0xe6>
 8002482:	06d0      	lsls	r0, r2, #27
 8002484:	bf44      	itt	mi
 8002486:	2320      	movmi	r3, #32
 8002488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800248c:	0711      	lsls	r1, r2, #28
 800248e:	bf44      	itt	mi
 8002490:	232b      	movmi	r3, #43	; 0x2b
 8002492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002496:	f89a 3000 	ldrb.w	r3, [sl]
 800249a:	2b2a      	cmp	r3, #42	; 0x2a
 800249c:	d015      	beq.n	80024ca <_svfiprintf_r+0xf6>
 800249e:	9a07      	ldr	r2, [sp, #28]
 80024a0:	4654      	mov	r4, sl
 80024a2:	2000      	movs	r0, #0
 80024a4:	f04f 0c0a 	mov.w	ip, #10
 80024a8:	4621      	mov	r1, r4
 80024aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024ae:	3b30      	subs	r3, #48	; 0x30
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d94e      	bls.n	8002552 <_svfiprintf_r+0x17e>
 80024b4:	b1b0      	cbz	r0, 80024e4 <_svfiprintf_r+0x110>
 80024b6:	9207      	str	r2, [sp, #28]
 80024b8:	e014      	b.n	80024e4 <_svfiprintf_r+0x110>
 80024ba:	eba0 0308 	sub.w	r3, r0, r8
 80024be:	fa09 f303 	lsl.w	r3, r9, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	9304      	str	r3, [sp, #16]
 80024c6:	46a2      	mov	sl, r4
 80024c8:	e7d2      	b.n	8002470 <_svfiprintf_r+0x9c>
 80024ca:	9b03      	ldr	r3, [sp, #12]
 80024cc:	1d19      	adds	r1, r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	9103      	str	r1, [sp, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfbb      	ittet	lt
 80024d6:	425b      	neglt	r3, r3
 80024d8:	f042 0202 	orrlt.w	r2, r2, #2
 80024dc:	9307      	strge	r3, [sp, #28]
 80024de:	9307      	strlt	r3, [sp, #28]
 80024e0:	bfb8      	it	lt
 80024e2:	9204      	strlt	r2, [sp, #16]
 80024e4:	7823      	ldrb	r3, [r4, #0]
 80024e6:	2b2e      	cmp	r3, #46	; 0x2e
 80024e8:	d10c      	bne.n	8002504 <_svfiprintf_r+0x130>
 80024ea:	7863      	ldrb	r3, [r4, #1]
 80024ec:	2b2a      	cmp	r3, #42	; 0x2a
 80024ee:	d135      	bne.n	800255c <_svfiprintf_r+0x188>
 80024f0:	9b03      	ldr	r3, [sp, #12]
 80024f2:	1d1a      	adds	r2, r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	9203      	str	r2, [sp, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bfb8      	it	lt
 80024fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002500:	3402      	adds	r4, #2
 8002502:	9305      	str	r3, [sp, #20]
 8002504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80025d0 <_svfiprintf_r+0x1fc>
 8002508:	7821      	ldrb	r1, [r4, #0]
 800250a:	2203      	movs	r2, #3
 800250c:	4650      	mov	r0, sl
 800250e:	f7fd fe67 	bl	80001e0 <memchr>
 8002512:	b140      	cbz	r0, 8002526 <_svfiprintf_r+0x152>
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	eba0 000a 	sub.w	r0, r0, sl
 800251a:	fa03 f000 	lsl.w	r0, r3, r0
 800251e:	9b04      	ldr	r3, [sp, #16]
 8002520:	4303      	orrs	r3, r0
 8002522:	3401      	adds	r4, #1
 8002524:	9304      	str	r3, [sp, #16]
 8002526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800252a:	4826      	ldr	r0, [pc, #152]	; (80025c4 <_svfiprintf_r+0x1f0>)
 800252c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002530:	2206      	movs	r2, #6
 8002532:	f7fd fe55 	bl	80001e0 <memchr>
 8002536:	2800      	cmp	r0, #0
 8002538:	d038      	beq.n	80025ac <_svfiprintf_r+0x1d8>
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <_svfiprintf_r+0x1f4>)
 800253c:	bb1b      	cbnz	r3, 8002586 <_svfiprintf_r+0x1b2>
 800253e:	9b03      	ldr	r3, [sp, #12]
 8002540:	3307      	adds	r3, #7
 8002542:	f023 0307 	bic.w	r3, r3, #7
 8002546:	3308      	adds	r3, #8
 8002548:	9303      	str	r3, [sp, #12]
 800254a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254c:	4433      	add	r3, r6
 800254e:	9309      	str	r3, [sp, #36]	; 0x24
 8002550:	e767      	b.n	8002422 <_svfiprintf_r+0x4e>
 8002552:	fb0c 3202 	mla	r2, ip, r2, r3
 8002556:	460c      	mov	r4, r1
 8002558:	2001      	movs	r0, #1
 800255a:	e7a5      	b.n	80024a8 <_svfiprintf_r+0xd4>
 800255c:	2300      	movs	r3, #0
 800255e:	3401      	adds	r4, #1
 8002560:	9305      	str	r3, [sp, #20]
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 0c0a 	mov.w	ip, #10
 8002568:	4620      	mov	r0, r4
 800256a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800256e:	3a30      	subs	r2, #48	; 0x30
 8002570:	2a09      	cmp	r2, #9
 8002572:	d903      	bls.n	800257c <_svfiprintf_r+0x1a8>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0c5      	beq.n	8002504 <_svfiprintf_r+0x130>
 8002578:	9105      	str	r1, [sp, #20]
 800257a:	e7c3      	b.n	8002504 <_svfiprintf_r+0x130>
 800257c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002580:	4604      	mov	r4, r0
 8002582:	2301      	movs	r3, #1
 8002584:	e7f0      	b.n	8002568 <_svfiprintf_r+0x194>
 8002586:	ab03      	add	r3, sp, #12
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	462a      	mov	r2, r5
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <_svfiprintf_r+0x1f8>)
 800258e:	a904      	add	r1, sp, #16
 8002590:	4638      	mov	r0, r7
 8002592:	f3af 8000 	nop.w
 8002596:	1c42      	adds	r2, r0, #1
 8002598:	4606      	mov	r6, r0
 800259a:	d1d6      	bne.n	800254a <_svfiprintf_r+0x176>
 800259c:	89ab      	ldrh	r3, [r5, #12]
 800259e:	065b      	lsls	r3, r3, #25
 80025a0:	f53f af2c 	bmi.w	80023fc <_svfiprintf_r+0x28>
 80025a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025a6:	b01d      	add	sp, #116	; 0x74
 80025a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ac:	ab03      	add	r3, sp, #12
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	462a      	mov	r2, r5
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <_svfiprintf_r+0x1f8>)
 80025b4:	a904      	add	r1, sp, #16
 80025b6:	4638      	mov	r0, r7
 80025b8:	f000 f87a 	bl	80026b0 <_printf_i>
 80025bc:	e7eb      	b.n	8002596 <_svfiprintf_r+0x1c2>
 80025be:	bf00      	nop
 80025c0:	08002bf4 	.word	0x08002bf4
 80025c4:	08002bfe 	.word	0x08002bfe
 80025c8:	00000000 	.word	0x00000000
 80025cc:	0800231d 	.word	0x0800231d
 80025d0:	08002bfa 	.word	0x08002bfa

080025d4 <_printf_common>:
 80025d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d8:	4616      	mov	r6, r2
 80025da:	4699      	mov	r9, r3
 80025dc:	688a      	ldr	r2, [r1, #8]
 80025de:	690b      	ldr	r3, [r1, #16]
 80025e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bfb8      	it	lt
 80025e8:	4613      	movlt	r3, r2
 80025ea:	6033      	str	r3, [r6, #0]
 80025ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025f0:	4607      	mov	r7, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	b10a      	cbz	r2, 80025fa <_printf_common+0x26>
 80025f6:	3301      	adds	r3, #1
 80025f8:	6033      	str	r3, [r6, #0]
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	0699      	lsls	r1, r3, #26
 80025fe:	bf42      	ittt	mi
 8002600:	6833      	ldrmi	r3, [r6, #0]
 8002602:	3302      	addmi	r3, #2
 8002604:	6033      	strmi	r3, [r6, #0]
 8002606:	6825      	ldr	r5, [r4, #0]
 8002608:	f015 0506 	ands.w	r5, r5, #6
 800260c:	d106      	bne.n	800261c <_printf_common+0x48>
 800260e:	f104 0a19 	add.w	sl, r4, #25
 8002612:	68e3      	ldr	r3, [r4, #12]
 8002614:	6832      	ldr	r2, [r6, #0]
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	42ab      	cmp	r3, r5
 800261a:	dc26      	bgt.n	800266a <_printf_common+0x96>
 800261c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002620:	1e13      	subs	r3, r2, #0
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	bf18      	it	ne
 8002626:	2301      	movne	r3, #1
 8002628:	0692      	lsls	r2, r2, #26
 800262a:	d42b      	bmi.n	8002684 <_printf_common+0xb0>
 800262c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002630:	4649      	mov	r1, r9
 8002632:	4638      	mov	r0, r7
 8002634:	47c0      	blx	r8
 8002636:	3001      	adds	r0, #1
 8002638:	d01e      	beq.n	8002678 <_printf_common+0xa4>
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	68e5      	ldr	r5, [r4, #12]
 800263e:	6832      	ldr	r2, [r6, #0]
 8002640:	f003 0306 	and.w	r3, r3, #6
 8002644:	2b04      	cmp	r3, #4
 8002646:	bf08      	it	eq
 8002648:	1aad      	subeq	r5, r5, r2
 800264a:	68a3      	ldr	r3, [r4, #8]
 800264c:	6922      	ldr	r2, [r4, #16]
 800264e:	bf0c      	ite	eq
 8002650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002654:	2500      	movne	r5, #0
 8002656:	4293      	cmp	r3, r2
 8002658:	bfc4      	itt	gt
 800265a:	1a9b      	subgt	r3, r3, r2
 800265c:	18ed      	addgt	r5, r5, r3
 800265e:	2600      	movs	r6, #0
 8002660:	341a      	adds	r4, #26
 8002662:	42b5      	cmp	r5, r6
 8002664:	d11a      	bne.n	800269c <_printf_common+0xc8>
 8002666:	2000      	movs	r0, #0
 8002668:	e008      	b.n	800267c <_printf_common+0xa8>
 800266a:	2301      	movs	r3, #1
 800266c:	4652      	mov	r2, sl
 800266e:	4649      	mov	r1, r9
 8002670:	4638      	mov	r0, r7
 8002672:	47c0      	blx	r8
 8002674:	3001      	adds	r0, #1
 8002676:	d103      	bne.n	8002680 <_printf_common+0xac>
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002680:	3501      	adds	r5, #1
 8002682:	e7c6      	b.n	8002612 <_printf_common+0x3e>
 8002684:	18e1      	adds	r1, r4, r3
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	2030      	movs	r0, #48	; 0x30
 800268a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800268e:	4422      	add	r2, r4
 8002690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002698:	3302      	adds	r3, #2
 800269a:	e7c7      	b.n	800262c <_printf_common+0x58>
 800269c:	2301      	movs	r3, #1
 800269e:	4622      	mov	r2, r4
 80026a0:	4649      	mov	r1, r9
 80026a2:	4638      	mov	r0, r7
 80026a4:	47c0      	blx	r8
 80026a6:	3001      	adds	r0, #1
 80026a8:	d0e6      	beq.n	8002678 <_printf_common+0xa4>
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7d9      	b.n	8002662 <_printf_common+0x8e>
	...

080026b0 <_printf_i>:
 80026b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026b4:	7e0f      	ldrb	r7, [r1, #24]
 80026b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026b8:	2f78      	cmp	r7, #120	; 0x78
 80026ba:	4691      	mov	r9, r2
 80026bc:	4680      	mov	r8, r0
 80026be:	460c      	mov	r4, r1
 80026c0:	469a      	mov	sl, r3
 80026c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026c6:	d807      	bhi.n	80026d8 <_printf_i+0x28>
 80026c8:	2f62      	cmp	r7, #98	; 0x62
 80026ca:	d80a      	bhi.n	80026e2 <_printf_i+0x32>
 80026cc:	2f00      	cmp	r7, #0
 80026ce:	f000 80d8 	beq.w	8002882 <_printf_i+0x1d2>
 80026d2:	2f58      	cmp	r7, #88	; 0x58
 80026d4:	f000 80a3 	beq.w	800281e <_printf_i+0x16e>
 80026d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026e0:	e03a      	b.n	8002758 <_printf_i+0xa8>
 80026e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026e6:	2b15      	cmp	r3, #21
 80026e8:	d8f6      	bhi.n	80026d8 <_printf_i+0x28>
 80026ea:	a101      	add	r1, pc, #4	; (adr r1, 80026f0 <_printf_i+0x40>)
 80026ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026f0:	08002749 	.word	0x08002749
 80026f4:	0800275d 	.word	0x0800275d
 80026f8:	080026d9 	.word	0x080026d9
 80026fc:	080026d9 	.word	0x080026d9
 8002700:	080026d9 	.word	0x080026d9
 8002704:	080026d9 	.word	0x080026d9
 8002708:	0800275d 	.word	0x0800275d
 800270c:	080026d9 	.word	0x080026d9
 8002710:	080026d9 	.word	0x080026d9
 8002714:	080026d9 	.word	0x080026d9
 8002718:	080026d9 	.word	0x080026d9
 800271c:	08002869 	.word	0x08002869
 8002720:	0800278d 	.word	0x0800278d
 8002724:	0800284b 	.word	0x0800284b
 8002728:	080026d9 	.word	0x080026d9
 800272c:	080026d9 	.word	0x080026d9
 8002730:	0800288b 	.word	0x0800288b
 8002734:	080026d9 	.word	0x080026d9
 8002738:	0800278d 	.word	0x0800278d
 800273c:	080026d9 	.word	0x080026d9
 8002740:	080026d9 	.word	0x080026d9
 8002744:	08002853 	.word	0x08002853
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	602a      	str	r2, [r5, #0]
 8002750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002758:	2301      	movs	r3, #1
 800275a:	e0a3      	b.n	80028a4 <_printf_i+0x1f4>
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	6829      	ldr	r1, [r5, #0]
 8002760:	0606      	lsls	r6, r0, #24
 8002762:	f101 0304 	add.w	r3, r1, #4
 8002766:	d50a      	bpl.n	800277e <_printf_i+0xce>
 8002768:	680e      	ldr	r6, [r1, #0]
 800276a:	602b      	str	r3, [r5, #0]
 800276c:	2e00      	cmp	r6, #0
 800276e:	da03      	bge.n	8002778 <_printf_i+0xc8>
 8002770:	232d      	movs	r3, #45	; 0x2d
 8002772:	4276      	negs	r6, r6
 8002774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002778:	485e      	ldr	r0, [pc, #376]	; (80028f4 <_printf_i+0x244>)
 800277a:	230a      	movs	r3, #10
 800277c:	e019      	b.n	80027b2 <_printf_i+0x102>
 800277e:	680e      	ldr	r6, [r1, #0]
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002786:	bf18      	it	ne
 8002788:	b236      	sxthne	r6, r6
 800278a:	e7ef      	b.n	800276c <_printf_i+0xbc>
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	1d19      	adds	r1, r3, #4
 8002792:	6029      	str	r1, [r5, #0]
 8002794:	0601      	lsls	r1, r0, #24
 8002796:	d501      	bpl.n	800279c <_printf_i+0xec>
 8002798:	681e      	ldr	r6, [r3, #0]
 800279a:	e002      	b.n	80027a2 <_printf_i+0xf2>
 800279c:	0646      	lsls	r6, r0, #25
 800279e:	d5fb      	bpl.n	8002798 <_printf_i+0xe8>
 80027a0:	881e      	ldrh	r6, [r3, #0]
 80027a2:	4854      	ldr	r0, [pc, #336]	; (80028f4 <_printf_i+0x244>)
 80027a4:	2f6f      	cmp	r7, #111	; 0x6f
 80027a6:	bf0c      	ite	eq
 80027a8:	2308      	moveq	r3, #8
 80027aa:	230a      	movne	r3, #10
 80027ac:	2100      	movs	r1, #0
 80027ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027b2:	6865      	ldr	r5, [r4, #4]
 80027b4:	60a5      	str	r5, [r4, #8]
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	bfa2      	ittt	ge
 80027ba:	6821      	ldrge	r1, [r4, #0]
 80027bc:	f021 0104 	bicge.w	r1, r1, #4
 80027c0:	6021      	strge	r1, [r4, #0]
 80027c2:	b90e      	cbnz	r6, 80027c8 <_printf_i+0x118>
 80027c4:	2d00      	cmp	r5, #0
 80027c6:	d04d      	beq.n	8002864 <_printf_i+0x1b4>
 80027c8:	4615      	mov	r5, r2
 80027ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80027ce:	fb03 6711 	mls	r7, r3, r1, r6
 80027d2:	5dc7      	ldrb	r7, [r0, r7]
 80027d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027d8:	4637      	mov	r7, r6
 80027da:	42bb      	cmp	r3, r7
 80027dc:	460e      	mov	r6, r1
 80027de:	d9f4      	bls.n	80027ca <_printf_i+0x11a>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d10b      	bne.n	80027fc <_printf_i+0x14c>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	07de      	lsls	r6, r3, #31
 80027e8:	d508      	bpl.n	80027fc <_printf_i+0x14c>
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	6861      	ldr	r1, [r4, #4]
 80027ee:	4299      	cmp	r1, r3
 80027f0:	bfde      	ittt	le
 80027f2:	2330      	movle	r3, #48	; 0x30
 80027f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027fc:	1b52      	subs	r2, r2, r5
 80027fe:	6122      	str	r2, [r4, #16]
 8002800:	f8cd a000 	str.w	sl, [sp]
 8002804:	464b      	mov	r3, r9
 8002806:	aa03      	add	r2, sp, #12
 8002808:	4621      	mov	r1, r4
 800280a:	4640      	mov	r0, r8
 800280c:	f7ff fee2 	bl	80025d4 <_printf_common>
 8002810:	3001      	adds	r0, #1
 8002812:	d14c      	bne.n	80028ae <_printf_i+0x1fe>
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	b004      	add	sp, #16
 800281a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800281e:	4835      	ldr	r0, [pc, #212]	; (80028f4 <_printf_i+0x244>)
 8002820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002824:	6829      	ldr	r1, [r5, #0]
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	f851 6b04 	ldr.w	r6, [r1], #4
 800282c:	6029      	str	r1, [r5, #0]
 800282e:	061d      	lsls	r5, r3, #24
 8002830:	d514      	bpl.n	800285c <_printf_i+0x1ac>
 8002832:	07df      	lsls	r7, r3, #31
 8002834:	bf44      	itt	mi
 8002836:	f043 0320 	orrmi.w	r3, r3, #32
 800283a:	6023      	strmi	r3, [r4, #0]
 800283c:	b91e      	cbnz	r6, 8002846 <_printf_i+0x196>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	f023 0320 	bic.w	r3, r3, #32
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	2310      	movs	r3, #16
 8002848:	e7b0      	b.n	80027ac <_printf_i+0xfc>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	6023      	str	r3, [r4, #0]
 8002852:	2378      	movs	r3, #120	; 0x78
 8002854:	4828      	ldr	r0, [pc, #160]	; (80028f8 <_printf_i+0x248>)
 8002856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800285a:	e7e3      	b.n	8002824 <_printf_i+0x174>
 800285c:	0659      	lsls	r1, r3, #25
 800285e:	bf48      	it	mi
 8002860:	b2b6      	uxthmi	r6, r6
 8002862:	e7e6      	b.n	8002832 <_printf_i+0x182>
 8002864:	4615      	mov	r5, r2
 8002866:	e7bb      	b.n	80027e0 <_printf_i+0x130>
 8002868:	682b      	ldr	r3, [r5, #0]
 800286a:	6826      	ldr	r6, [r4, #0]
 800286c:	6961      	ldr	r1, [r4, #20]
 800286e:	1d18      	adds	r0, r3, #4
 8002870:	6028      	str	r0, [r5, #0]
 8002872:	0635      	lsls	r5, r6, #24
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	d501      	bpl.n	800287c <_printf_i+0x1cc>
 8002878:	6019      	str	r1, [r3, #0]
 800287a:	e002      	b.n	8002882 <_printf_i+0x1d2>
 800287c:	0670      	lsls	r0, r6, #25
 800287e:	d5fb      	bpl.n	8002878 <_printf_i+0x1c8>
 8002880:	8019      	strh	r1, [r3, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	6123      	str	r3, [r4, #16]
 8002886:	4615      	mov	r5, r2
 8002888:	e7ba      	b.n	8002800 <_printf_i+0x150>
 800288a:	682b      	ldr	r3, [r5, #0]
 800288c:	1d1a      	adds	r2, r3, #4
 800288e:	602a      	str	r2, [r5, #0]
 8002890:	681d      	ldr	r5, [r3, #0]
 8002892:	6862      	ldr	r2, [r4, #4]
 8002894:	2100      	movs	r1, #0
 8002896:	4628      	mov	r0, r5
 8002898:	f7fd fca2 	bl	80001e0 <memchr>
 800289c:	b108      	cbz	r0, 80028a2 <_printf_i+0x1f2>
 800289e:	1b40      	subs	r0, r0, r5
 80028a0:	6060      	str	r0, [r4, #4]
 80028a2:	6863      	ldr	r3, [r4, #4]
 80028a4:	6123      	str	r3, [r4, #16]
 80028a6:	2300      	movs	r3, #0
 80028a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ac:	e7a8      	b.n	8002800 <_printf_i+0x150>
 80028ae:	6923      	ldr	r3, [r4, #16]
 80028b0:	462a      	mov	r2, r5
 80028b2:	4649      	mov	r1, r9
 80028b4:	4640      	mov	r0, r8
 80028b6:	47d0      	blx	sl
 80028b8:	3001      	adds	r0, #1
 80028ba:	d0ab      	beq.n	8002814 <_printf_i+0x164>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	079b      	lsls	r3, r3, #30
 80028c0:	d413      	bmi.n	80028ea <_printf_i+0x23a>
 80028c2:	68e0      	ldr	r0, [r4, #12]
 80028c4:	9b03      	ldr	r3, [sp, #12]
 80028c6:	4298      	cmp	r0, r3
 80028c8:	bfb8      	it	lt
 80028ca:	4618      	movlt	r0, r3
 80028cc:	e7a4      	b.n	8002818 <_printf_i+0x168>
 80028ce:	2301      	movs	r3, #1
 80028d0:	4632      	mov	r2, r6
 80028d2:	4649      	mov	r1, r9
 80028d4:	4640      	mov	r0, r8
 80028d6:	47d0      	blx	sl
 80028d8:	3001      	adds	r0, #1
 80028da:	d09b      	beq.n	8002814 <_printf_i+0x164>
 80028dc:	3501      	adds	r5, #1
 80028de:	68e3      	ldr	r3, [r4, #12]
 80028e0:	9903      	ldr	r1, [sp, #12]
 80028e2:	1a5b      	subs	r3, r3, r1
 80028e4:	42ab      	cmp	r3, r5
 80028e6:	dcf2      	bgt.n	80028ce <_printf_i+0x21e>
 80028e8:	e7eb      	b.n	80028c2 <_printf_i+0x212>
 80028ea:	2500      	movs	r5, #0
 80028ec:	f104 0619 	add.w	r6, r4, #25
 80028f0:	e7f5      	b.n	80028de <_printf_i+0x22e>
 80028f2:	bf00      	nop
 80028f4:	08002c05 	.word	0x08002c05
 80028f8:	08002c16 	.word	0x08002c16

080028fc <memcpy>:
 80028fc:	440a      	add	r2, r1
 80028fe:	4291      	cmp	r1, r2
 8002900:	f100 33ff 	add.w	r3, r0, #4294967295
 8002904:	d100      	bne.n	8002908 <memcpy+0xc>
 8002906:	4770      	bx	lr
 8002908:	b510      	push	{r4, lr}
 800290a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800290e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002912:	4291      	cmp	r1, r2
 8002914:	d1f9      	bne.n	800290a <memcpy+0xe>
 8002916:	bd10      	pop	{r4, pc}

08002918 <memmove>:
 8002918:	4288      	cmp	r0, r1
 800291a:	b510      	push	{r4, lr}
 800291c:	eb01 0402 	add.w	r4, r1, r2
 8002920:	d902      	bls.n	8002928 <memmove+0x10>
 8002922:	4284      	cmp	r4, r0
 8002924:	4623      	mov	r3, r4
 8002926:	d807      	bhi.n	8002938 <memmove+0x20>
 8002928:	1e43      	subs	r3, r0, #1
 800292a:	42a1      	cmp	r1, r4
 800292c:	d008      	beq.n	8002940 <memmove+0x28>
 800292e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002936:	e7f8      	b.n	800292a <memmove+0x12>
 8002938:	4402      	add	r2, r0
 800293a:	4601      	mov	r1, r0
 800293c:	428a      	cmp	r2, r1
 800293e:	d100      	bne.n	8002942 <memmove+0x2a>
 8002940:	bd10      	pop	{r4, pc}
 8002942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800294a:	e7f7      	b.n	800293c <memmove+0x24>

0800294c <_free_r>:
 800294c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800294e:	2900      	cmp	r1, #0
 8002950:	d044      	beq.n	80029dc <_free_r+0x90>
 8002952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002956:	9001      	str	r0, [sp, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f1a1 0404 	sub.w	r4, r1, #4
 800295e:	bfb8      	it	lt
 8002960:	18e4      	addlt	r4, r4, r3
 8002962:	f000 f913 	bl	8002b8c <__malloc_lock>
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <_free_r+0x94>)
 8002968:	9801      	ldr	r0, [sp, #4]
 800296a:	6813      	ldr	r3, [r2, #0]
 800296c:	b933      	cbnz	r3, 800297c <_free_r+0x30>
 800296e:	6063      	str	r3, [r4, #4]
 8002970:	6014      	str	r4, [r2, #0]
 8002972:	b003      	add	sp, #12
 8002974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002978:	f000 b90e 	b.w	8002b98 <__malloc_unlock>
 800297c:	42a3      	cmp	r3, r4
 800297e:	d908      	bls.n	8002992 <_free_r+0x46>
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	1961      	adds	r1, r4, r5
 8002984:	428b      	cmp	r3, r1
 8002986:	bf01      	itttt	eq
 8002988:	6819      	ldreq	r1, [r3, #0]
 800298a:	685b      	ldreq	r3, [r3, #4]
 800298c:	1949      	addeq	r1, r1, r5
 800298e:	6021      	streq	r1, [r4, #0]
 8002990:	e7ed      	b.n	800296e <_free_r+0x22>
 8002992:	461a      	mov	r2, r3
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	b10b      	cbz	r3, 800299c <_free_r+0x50>
 8002998:	42a3      	cmp	r3, r4
 800299a:	d9fa      	bls.n	8002992 <_free_r+0x46>
 800299c:	6811      	ldr	r1, [r2, #0]
 800299e:	1855      	adds	r5, r2, r1
 80029a0:	42a5      	cmp	r5, r4
 80029a2:	d10b      	bne.n	80029bc <_free_r+0x70>
 80029a4:	6824      	ldr	r4, [r4, #0]
 80029a6:	4421      	add	r1, r4
 80029a8:	1854      	adds	r4, r2, r1
 80029aa:	42a3      	cmp	r3, r4
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	d1e0      	bne.n	8002972 <_free_r+0x26>
 80029b0:	681c      	ldr	r4, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	6053      	str	r3, [r2, #4]
 80029b6:	4421      	add	r1, r4
 80029b8:	6011      	str	r1, [r2, #0]
 80029ba:	e7da      	b.n	8002972 <_free_r+0x26>
 80029bc:	d902      	bls.n	80029c4 <_free_r+0x78>
 80029be:	230c      	movs	r3, #12
 80029c0:	6003      	str	r3, [r0, #0]
 80029c2:	e7d6      	b.n	8002972 <_free_r+0x26>
 80029c4:	6825      	ldr	r5, [r4, #0]
 80029c6:	1961      	adds	r1, r4, r5
 80029c8:	428b      	cmp	r3, r1
 80029ca:	bf04      	itt	eq
 80029cc:	6819      	ldreq	r1, [r3, #0]
 80029ce:	685b      	ldreq	r3, [r3, #4]
 80029d0:	6063      	str	r3, [r4, #4]
 80029d2:	bf04      	itt	eq
 80029d4:	1949      	addeq	r1, r1, r5
 80029d6:	6021      	streq	r1, [r4, #0]
 80029d8:	6054      	str	r4, [r2, #4]
 80029da:	e7ca      	b.n	8002972 <_free_r+0x26>
 80029dc:	b003      	add	sp, #12
 80029de:	bd30      	pop	{r4, r5, pc}
 80029e0:	20004fa0 	.word	0x20004fa0

080029e4 <sbrk_aligned>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	4e0e      	ldr	r6, [pc, #56]	; (8002a20 <sbrk_aligned+0x3c>)
 80029e8:	460c      	mov	r4, r1
 80029ea:	6831      	ldr	r1, [r6, #0]
 80029ec:	4605      	mov	r5, r0
 80029ee:	b911      	cbnz	r1, 80029f6 <sbrk_aligned+0x12>
 80029f0:	f000 f8bc 	bl	8002b6c <_sbrk_r>
 80029f4:	6030      	str	r0, [r6, #0]
 80029f6:	4621      	mov	r1, r4
 80029f8:	4628      	mov	r0, r5
 80029fa:	f000 f8b7 	bl	8002b6c <_sbrk_r>
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d00a      	beq.n	8002a18 <sbrk_aligned+0x34>
 8002a02:	1cc4      	adds	r4, r0, #3
 8002a04:	f024 0403 	bic.w	r4, r4, #3
 8002a08:	42a0      	cmp	r0, r4
 8002a0a:	d007      	beq.n	8002a1c <sbrk_aligned+0x38>
 8002a0c:	1a21      	subs	r1, r4, r0
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f000 f8ac 	bl	8002b6c <_sbrk_r>
 8002a14:	3001      	adds	r0, #1
 8002a16:	d101      	bne.n	8002a1c <sbrk_aligned+0x38>
 8002a18:	f04f 34ff 	mov.w	r4, #4294967295
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	20004fa4 	.word	0x20004fa4

08002a24 <_malloc_r>:
 8002a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a28:	1ccd      	adds	r5, r1, #3
 8002a2a:	f025 0503 	bic.w	r5, r5, #3
 8002a2e:	3508      	adds	r5, #8
 8002a30:	2d0c      	cmp	r5, #12
 8002a32:	bf38      	it	cc
 8002a34:	250c      	movcc	r5, #12
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	4607      	mov	r7, r0
 8002a3a:	db01      	blt.n	8002a40 <_malloc_r+0x1c>
 8002a3c:	42a9      	cmp	r1, r5
 8002a3e:	d905      	bls.n	8002a4c <_malloc_r+0x28>
 8002a40:	230c      	movs	r3, #12
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	2600      	movs	r6, #0
 8002a46:	4630      	mov	r0, r6
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a4c:	4e2e      	ldr	r6, [pc, #184]	; (8002b08 <_malloc_r+0xe4>)
 8002a4e:	f000 f89d 	bl	8002b8c <__malloc_lock>
 8002a52:	6833      	ldr	r3, [r6, #0]
 8002a54:	461c      	mov	r4, r3
 8002a56:	bb34      	cbnz	r4, 8002aa6 <_malloc_r+0x82>
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	f7ff ffc2 	bl	80029e4 <sbrk_aligned>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	4604      	mov	r4, r0
 8002a64:	d14d      	bne.n	8002b02 <_malloc_r+0xde>
 8002a66:	6834      	ldr	r4, [r6, #0]
 8002a68:	4626      	mov	r6, r4
 8002a6a:	2e00      	cmp	r6, #0
 8002a6c:	d140      	bne.n	8002af0 <_malloc_r+0xcc>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	4631      	mov	r1, r6
 8002a72:	4638      	mov	r0, r7
 8002a74:	eb04 0803 	add.w	r8, r4, r3
 8002a78:	f000 f878 	bl	8002b6c <_sbrk_r>
 8002a7c:	4580      	cmp	r8, r0
 8002a7e:	d13a      	bne.n	8002af6 <_malloc_r+0xd2>
 8002a80:	6821      	ldr	r1, [r4, #0]
 8002a82:	3503      	adds	r5, #3
 8002a84:	1a6d      	subs	r5, r5, r1
 8002a86:	f025 0503 	bic.w	r5, r5, #3
 8002a8a:	3508      	adds	r5, #8
 8002a8c:	2d0c      	cmp	r5, #12
 8002a8e:	bf38      	it	cc
 8002a90:	250c      	movcc	r5, #12
 8002a92:	4629      	mov	r1, r5
 8002a94:	4638      	mov	r0, r7
 8002a96:	f7ff ffa5 	bl	80029e4 <sbrk_aligned>
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d02b      	beq.n	8002af6 <_malloc_r+0xd2>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	442b      	add	r3, r5
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	e00e      	b.n	8002ac4 <_malloc_r+0xa0>
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	1b52      	subs	r2, r2, r5
 8002aaa:	d41e      	bmi.n	8002aea <_malloc_r+0xc6>
 8002aac:	2a0b      	cmp	r2, #11
 8002aae:	d916      	bls.n	8002ade <_malloc_r+0xba>
 8002ab0:	1961      	adds	r1, r4, r5
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	6025      	str	r5, [r4, #0]
 8002ab6:	bf18      	it	ne
 8002ab8:	6059      	strne	r1, [r3, #4]
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	bf08      	it	eq
 8002abe:	6031      	streq	r1, [r6, #0]
 8002ac0:	5162      	str	r2, [r4, r5]
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	f104 060b 	add.w	r6, r4, #11
 8002aca:	f000 f865 	bl	8002b98 <__malloc_unlock>
 8002ace:	f026 0607 	bic.w	r6, r6, #7
 8002ad2:	1d23      	adds	r3, r4, #4
 8002ad4:	1af2      	subs	r2, r6, r3
 8002ad6:	d0b6      	beq.n	8002a46 <_malloc_r+0x22>
 8002ad8:	1b9b      	subs	r3, r3, r6
 8002ada:	50a3      	str	r3, [r4, r2]
 8002adc:	e7b3      	b.n	8002a46 <_malloc_r+0x22>
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	bf0c      	ite	eq
 8002ae4:	6032      	streq	r2, [r6, #0]
 8002ae6:	605a      	strne	r2, [r3, #4]
 8002ae8:	e7ec      	b.n	8002ac4 <_malloc_r+0xa0>
 8002aea:	4623      	mov	r3, r4
 8002aec:	6864      	ldr	r4, [r4, #4]
 8002aee:	e7b2      	b.n	8002a56 <_malloc_r+0x32>
 8002af0:	4634      	mov	r4, r6
 8002af2:	6876      	ldr	r6, [r6, #4]
 8002af4:	e7b9      	b.n	8002a6a <_malloc_r+0x46>
 8002af6:	230c      	movs	r3, #12
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4638      	mov	r0, r7
 8002afc:	f000 f84c 	bl	8002b98 <__malloc_unlock>
 8002b00:	e7a1      	b.n	8002a46 <_malloc_r+0x22>
 8002b02:	6025      	str	r5, [r4, #0]
 8002b04:	e7de      	b.n	8002ac4 <_malloc_r+0xa0>
 8002b06:	bf00      	nop
 8002b08:	20004fa0 	.word	0x20004fa0

08002b0c <_realloc_r>:
 8002b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b10:	4680      	mov	r8, r0
 8002b12:	4614      	mov	r4, r2
 8002b14:	460e      	mov	r6, r1
 8002b16:	b921      	cbnz	r1, 8002b22 <_realloc_r+0x16>
 8002b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	f7ff bf81 	b.w	8002a24 <_malloc_r>
 8002b22:	b92a      	cbnz	r2, 8002b30 <_realloc_r+0x24>
 8002b24:	f7ff ff12 	bl	800294c <_free_r>
 8002b28:	4625      	mov	r5, r4
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b30:	f000 f838 	bl	8002ba4 <_malloc_usable_size_r>
 8002b34:	4284      	cmp	r4, r0
 8002b36:	4607      	mov	r7, r0
 8002b38:	d802      	bhi.n	8002b40 <_realloc_r+0x34>
 8002b3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b3e:	d812      	bhi.n	8002b66 <_realloc_r+0x5a>
 8002b40:	4621      	mov	r1, r4
 8002b42:	4640      	mov	r0, r8
 8002b44:	f7ff ff6e 	bl	8002a24 <_malloc_r>
 8002b48:	4605      	mov	r5, r0
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d0ed      	beq.n	8002b2a <_realloc_r+0x1e>
 8002b4e:	42bc      	cmp	r4, r7
 8002b50:	4622      	mov	r2, r4
 8002b52:	4631      	mov	r1, r6
 8002b54:	bf28      	it	cs
 8002b56:	463a      	movcs	r2, r7
 8002b58:	f7ff fed0 	bl	80028fc <memcpy>
 8002b5c:	4631      	mov	r1, r6
 8002b5e:	4640      	mov	r0, r8
 8002b60:	f7ff fef4 	bl	800294c <_free_r>
 8002b64:	e7e1      	b.n	8002b2a <_realloc_r+0x1e>
 8002b66:	4635      	mov	r5, r6
 8002b68:	e7df      	b.n	8002b2a <_realloc_r+0x1e>
	...

08002b6c <_sbrk_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4d06      	ldr	r5, [pc, #24]	; (8002b88 <_sbrk_r+0x1c>)
 8002b70:	2300      	movs	r3, #0
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fe fd50 	bl	800161c <_sbrk>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_sbrk_r+0x1a>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_sbrk_r+0x1a>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	20004fa8 	.word	0x20004fa8

08002b8c <__malloc_lock>:
 8002b8c:	4801      	ldr	r0, [pc, #4]	; (8002b94 <__malloc_lock+0x8>)
 8002b8e:	f000 b811 	b.w	8002bb4 <__retarget_lock_acquire_recursive>
 8002b92:	bf00      	nop
 8002b94:	20004fac 	.word	0x20004fac

08002b98 <__malloc_unlock>:
 8002b98:	4801      	ldr	r0, [pc, #4]	; (8002ba0 <__malloc_unlock+0x8>)
 8002b9a:	f000 b80c 	b.w	8002bb6 <__retarget_lock_release_recursive>
 8002b9e:	bf00      	nop
 8002ba0:	20004fac 	.word	0x20004fac

08002ba4 <_malloc_usable_size_r>:
 8002ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ba8:	1f18      	subs	r0, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bfbc      	itt	lt
 8002bae:	580b      	ldrlt	r3, [r1, r0]
 8002bb0:	18c0      	addlt	r0, r0, r3
 8002bb2:	4770      	bx	lr

08002bb4 <__retarget_lock_acquire_recursive>:
 8002bb4:	4770      	bx	lr

08002bb6 <__retarget_lock_release_recursive>:
 8002bb6:	4770      	bx	lr

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
