
SDIO_4BIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c14  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c4  080051c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  2000000c  080051d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012c4  080051d8  000212c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010983  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f5  00000000  00000000  000309bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000331b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00033f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018403  00000000  00000000  00034c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001244c  00000000  00000000  0004d05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb0b  00000000  00000000  0005f4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebfb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  000ec004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004d94 	.word	0x08004d94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004d94 	.word	0x08004d94

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <Ringbuf_init+0x3c>)
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <Ringbuf_init+0x40>)
 80004e4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <Ringbuf_init+0x44>)
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <Ringbuf_init+0x48>)
 80004ea:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <Ringbuf_init+0x4c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <Ringbuf_init+0x4c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f042 0201 	orr.w	r2, r2, #1
 80004fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <Ringbuf_init+0x4c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	68da      	ldr	r2, [r3, #12]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <Ringbuf_init+0x4c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f042 0220 	orr.w	r2, r2, #32
 800050a:	60da      	str	r2, [r3, #12]
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000fc 	.word	0x200000fc
 800051c:	2000006c 	.word	0x2000006c
 8000520:	20000100 	.word	0x20000100
 8000524:	200000b4 	.word	0x200000b4
 8000528:	20000028 	.word	0x20000028

0800052c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	3301      	adds	r3, #1
 800053e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000542:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	429a      	cmp	r2, r3
 800054c:	d007      	beq.n	800055e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	79f9      	ldrb	r1, [r7, #7]
 8000556:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Uart_write>:
    return c;
  }
}

void Uart_write(int c)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	if (c>0)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	dd21      	ble.n	80005be <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <Uart_write+0x60>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	3301      	adds	r3, #1
 8000582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000586:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000588:	bf00      	nop
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <Uart_write+0x60>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	429a      	cmp	r2, r3
 8000594:	d0f9      	beq.n	800058a <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <Uart_write+0x60>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <Uart_write+0x60>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	b2c9      	uxtb	r1, r1
 80005a4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <Uart_write+0x60>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <Uart_write+0x64>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68da      	ldr	r2, [r3, #12]
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <Uart_write+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005bc:	60da      	str	r2, [r3, #12]
	}
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000100 	.word	0x20000100
 80005d0:	20000028 	.word	0x20000028

080005d4 <Uart_sendstring>:
	}
  else return -1;
}

void Uart_sendstring (const char *s)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80005dc:	e006      	b.n	80005ec <Uart_sendstring+0x18>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffc0 	bl	800056c <Uart_write>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f4      	bne.n	80005de <Uart_sendstring+0xa>
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <Uart_isr>:
	return 0;
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	2b00      	cmp	r3, #0
 8000620:	d013      	beq.n	800064a <Uart_isr+0x4a>
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00e      	beq.n	800064a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <Uart_isr+0xac>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff72 	bl	800052c <store_char>
        return;
 8000648:	e02c      	b.n	80006a4 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000650:	2b00      	cmp	r3, #0
 8000652:	d027      	beq.n	80006a4 <Uart_isr+0xa4>
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	2b00      	cmp	r3, #0
 800065c:	d022      	beq.n	80006a4 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <Uart_isr+0xb0>)
 8000660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <Uart_isr+0xb0>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	429a      	cmp	r2, r3
 8000668:	d108      	bne.n	800067c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000678:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800067a:	e012      	b.n	80006a2 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <Uart_isr+0xb0>)
 800067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <Uart_isr+0xb0>)
 8000682:	5cd3      	ldrb	r3, [r2, r3]
 8000684:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <Uart_isr+0xb0>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	3301      	adds	r3, #1
 800068c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <Uart_isr+0xb0>)
 8000692:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7bba      	ldrb	r2, [r7, #14]
 80006a0:	605a      	str	r2, [r3, #4]
    	return;
 80006a2:	bf00      	nop
    }
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000fc 	.word	0x200000fc
 80006b0:	200000b4 	.word	0x200000b4

080006b4 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e007      	b.n	80006d0 <clear_buffer+0x1c>
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <clear_buffer+0x30>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b7f      	cmp	r3, #127	; 0x7f
 80006d4:	ddf4      	ble.n	80006c0 <clear_buffer+0xc>
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	2000113c 	.word	0x2000113c

080006e8 <send_uart>:
{
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
}

void send_uart (char *string)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
//	uint8_t len = strlen ((const char *) string);
//	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
	Uart_sendstring(string);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff6f 	bl	80005d4 <Uart_sendstring>
	clear_buffer();
 80006f6:	f7ff ffdd 	bl	80006b4 <clear_buffer>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <mount_sd>:
		else break;
	}
}

void mount_sd (void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8000708:	2201      	movs	r2, #1
 800070a:	490a      	ldr	r1, [pc, #40]	; (8000734 <mount_sd+0x30>)
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <mount_sd+0x34>)
 800070e:	f004 fa73 	bl	8004bf8 <f_mount>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <mount_sd+0x38>)
 8000718:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <mount_sd+0x38>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <mount_sd+0x26>
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <mount_sd+0x3c>)
 8000724:	f7ff ffe0 	bl	80006e8 <send_uart>
	else send_uart("SD CARD mounted successfully...\n");
}
 8000728:	e002      	b.n	8000730 <mount_sd+0x2c>
	else send_uart("SD CARD mounted successfully...\n");
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <mount_sd+0x40>)
 800072c:	f7ff ffdc 	bl	80006e8 <send_uart>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08004dac 	.word	0x08004dac
 8000738:	20000104 	.word	0x20000104
 800073c:	20001138 	.word	0x20001138
 8000740:	08004db0 	.word	0x08004db0
 8000744:	08004dd0 	.word	0x08004dd0

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 faa8 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f80e 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f8be 	bl	80008d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000758:	f000 f892 	bl	8000880 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800075c:	f000 f870 	bl	8000840 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000760:	f003 fc3c 	bl	8003fdc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();   // Init the ring buffer
 8000764:	f7ff feba 	bl	80004dc <Ringbuf_init>

  mount_sd();
 8000768:	f7ff ffcc 	bl	8000704 <mount_sd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x24>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fb00 	bl	8004d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a26      	ldr	r2, [pc, #152]	; (8000838 <SystemClock_Config+0xc8>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <SystemClock_Config+0xc8>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <SystemClock_Config+0xcc>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <SystemClock_Config+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007ec:	2305      	movs	r3, #5
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fd99 	bl	800132c <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 f8d6 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2103      	movs	r1, #3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fffb 	bl	800181c <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800082c:	f000 f8c0 	bl	80009b0 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	; 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <MX_SDIO_SD_Init+0x3c>)
 8000848:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <MX_SDIO_SD_Init+0x38>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	200011bc 	.word	0x200011bc
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART2_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008b8:	f002 fb5b 	bl	8002f72 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f875 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20001240 	.word	0x20001240
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xd0>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a25      	ldr	r2, [pc, #148]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <MX_GPIO_Init+0xd0>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_GPIO_Init+0xd4>)
 8000960:	f000 fcca 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_GPIO_Init+0xd8>)
 800097c:	f000 fb38 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_GPIO_Init+0xd4>)
 8000998:	f000 fb2a 	bl	8000ff0 <HAL_GPIO_Init>

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020800 	.word	0x40020800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 fab6 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <HAL_SD_MspInit+0x100>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d16a      	bne.n	8000b04 <HAL_SD_MspInit+0xf8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a36      	ldr	r2, [pc, #216]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a2f      	ldr	r2, [pc, #188]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <HAL_SD_MspInit+0x104>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a9e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4816      	ldr	r0, [pc, #88]	; (8000b14 <HAL_SD_MspInit+0x108>)
 8000abc:	f000 fa98 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <HAL_SD_MspInit+0x10c>)
 8000ade:	f000 fa87 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000ae2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000af4:	230c      	movs	r3, #12
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <HAL_SD_MspInit+0x110>)
 8000b00:	f000 fa76 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_UART_MspInit+0x94>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d133      	bne.n	8000baa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_UART_MspInit+0x9c>)
 8000b96:	f000 fa2b 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2026      	movs	r0, #38	; 0x26
 8000ba0:	f000 f9ef 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba4:	2026      	movs	r0, #38	; 0x26
 8000ba6:	f000 fa08 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f89a 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART2_IRQHandler+0x10>)
 8000c1a:	f7ff fcf1 	bl	8000600 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001240 	.word	0x20001240

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c76:	f7ff ffd7 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f004 f85f 	bl	8004d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fd63 	bl	8000748 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c90:	080051cc 	.word	0x080051cc
  ldr r2, =_sbss
 8000c94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c98:	200012c4 	.word	0x200012c4

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f94f 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe72 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f967 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f92f 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20001284 	.word	0x20001284

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20001284 	.word	0x20001284

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e159      	b.n	80012c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8148 	bne.w	80012ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	2b02      	cmp	r3, #2
 8001040:	d130      	bne.n	80010a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a2 	beq.w	80012ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a49      	ldr	r2, [pc, #292]	; (80012e0 <HAL_GPIO_Init+0x2f0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x202>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_GPIO_Init+0x2f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1fe>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <HAL_GPIO_Init+0x2f8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a46      	ldr	r2, [pc, #280]	; (80012ec <HAL_GPIO_Init+0x2fc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1f6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_GPIO_Init+0x300>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1f2>
 80011de:	2304      	movs	r3, #4
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x304>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f aea2 	bls.w	800100c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e267      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d075      	beq.n	8001436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d00c      	beq.n	8001370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001356:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d112      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b82      	ldr	r3, [pc, #520]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136e:	d10b      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4b7e      	ldr	r3, [pc, #504]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d05b      	beq.n	8001434 <HAL_RCC_OscConfig+0x108>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d157      	bne.n	8001434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e242      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d106      	bne.n	80013a0 <HAL_RCC_OscConfig+0x74>
 8001392:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a75      	ldr	r2, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0xb0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x98>
 80013aa:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6f      	ldr	r2, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b6d      	ldr	r3, [pc, #436]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6c      	ldr	r2, [pc, #432]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0xb0>
 80013c4:	4b69      	ldr	r3, [pc, #420]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a68      	ldr	r2, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a65      	ldr	r2, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fcc2 	bl	8000d6c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fcbe 	bl	8000d6c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e207      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0xc0>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fcae 	bl	8000d6c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fcaa 	bl	8000d6c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1f3      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0xe8>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001456:	2b08      	cmp	r3, #8
 8001458:	d11c      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x152>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1c7      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	e03a      	b.n	800150a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_OscConfig+0x244>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff fc63 	bl	8000d6c <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc5f 	bl	8000d6c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1a8      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4925      	ldr	r1, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x244>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc42 	bl	8000d6c <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc3e 	bl	8000d6c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e187      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d036      	beq.n	8001584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d016      	beq.n	800154c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_RCC_OscConfig+0x248>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fc22 	bl	8000d6c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fc1e 	bl	8000d6c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e167      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x200>
 800154a:	e01b      	b.n	8001584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_RCC_OscConfig+0x248>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fc0b 	bl	8000d6c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	e00e      	b.n	8001578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fc07 	bl	8000d6c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d907      	bls.n	8001578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e150      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	42470000 	.word	0x42470000
 8001574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800157a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ea      	bne.n	800155a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8097 	beq.w	80016c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b81      	ldr	r3, [pc, #516]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a7c      	ldr	r2, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a73      	ldr	r2, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015da:	f7ff fbc7 	bl	8000d6c <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7ff fbc3 	bl	8000d6c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e10c      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x2ea>
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x324>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x30c>
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a5e      	ldr	r2, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x324>
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 0304 	bic.w	r3, r3, #4
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d015      	beq.n	8001684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fb88 	bl	8000d6c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	e00a      	b.n	8001676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fb84 	bl	8000d6c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0cb      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ee      	beq.n	8001660 <HAL_RCC_OscConfig+0x334>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fb72 	bl	8000d6c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fb6e 	bl	8000d6c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0b5      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a38      	ldr	r2, [pc, #224]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a1 	beq.w	800180c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d05c      	beq.n	8001790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d141      	bne.n	8001762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb42 	bl	8000d6c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb3e 	bl	8000d6c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e087      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	491b      	ldr	r1, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fb17 	bl	8000d6c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fb13 	bl	8000d6c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e05c      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x416>
 8001760:	e054      	b.n	800180c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fb00 	bl	8000d6c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fafc 	bl	8000d6c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e045      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x444>
 800178e:	e03d      	b.n	800180c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e038      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000
 80017a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x4ec>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d028      	beq.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d121      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d11a      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d111      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cc      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d90c      	bls.n	8001858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d044      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e067      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4934      	ldr	r1, [pc, #208]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff fa2e 	bl	8000d6c <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff fa2a 	bl	8000d6c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20c      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f98e 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08005190 	.word	0x08005190
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	b094      	sub	sp, #80	; 0x50
 80019ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	647b      	str	r3, [r7, #68]	; 0x44
 80019f4:	2300      	movs	r3, #0
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f8:	2300      	movs	r3, #0
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a00:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d00d      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x40>
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	f200 80e1 	bhi.w	8001bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x34>
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a1a:	e0db      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a20:	e0db      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a26:	e0d8      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a28:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a32:	4b6d      	ldr	r3, [pc, #436]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	2200      	movs	r2, #0
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
 8001a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	0159      	lsls	r1, r3, #5
 8001a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6c:	0150      	lsls	r0, r2, #5
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4621      	mov	r1, r4
 8001a74:	1a51      	subs	r1, r2, r1
 8001a76:	6139      	str	r1, [r7, #16]
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	018b      	lsls	r3, r1, #6
 8001a90:	4651      	mov	r1, sl
 8001a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a96:	4651      	mov	r1, sl
 8001a98:	018a      	lsls	r2, r1, #6
 8001a9a:	4651      	mov	r1, sl
 8001a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4699      	mov	r9, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	eb18 0303 	adds.w	r3, r8, r3
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	eb49 0303 	adc.w	r3, r9, r3
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ada:	4629      	mov	r1, r5
 8001adc:	024b      	lsls	r3, r1, #9
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	024a      	lsls	r2, r1, #9
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aee:	2200      	movs	r2, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001af8:	f7fe fb6e 	bl	80001d8 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b04:	e058      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4611      	mov	r1, r2
 8001b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b20:	4642      	mov	r2, r8
 8001b22:	464b      	mov	r3, r9
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	f04f 0100 	mov.w	r1, #0
 8001b2c:	0159      	lsls	r1, r3, #5
 8001b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b32:	0150      	lsls	r0, r2, #5
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4641      	mov	r1, r8
 8001b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b3e:	4649      	mov	r1, r9
 8001b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b58:	ebb2 040a 	subs.w	r4, r2, sl
 8001b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	00eb      	lsls	r3, r5, #3
 8001b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6e:	00e2      	lsls	r2, r4, #3
 8001b70:	4614      	mov	r4, r2
 8001b72:	461d      	mov	r5, r3
 8001b74:	4643      	mov	r3, r8
 8001b76:	18e3      	adds	r3, r4, r3
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	eb45 0303 	adc.w	r3, r5, r3
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8e:	4629      	mov	r1, r5
 8001b90:	028b      	lsls	r3, r1, #10
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b98:	4621      	mov	r1, r4
 8001b9a:	028a      	lsls	r2, r1, #10
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	61fa      	str	r2, [r7, #28]
 8001ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bac:	f7fe fb14 	bl	80001d8 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd2:	e002      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetSysClockFreq+0x204>)
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3750      	adds	r7, #80	; 0x50
 8001be0:	46bd      	mov	sp, r7
 8001be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	080051a0 	.word	0x080051a0

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	080051a0 	.word	0x080051a0

08001c5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e022      	b.n	8001cb4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7fe fec3 	bl	8000a0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f814 	bl	8001cbc <HAL_SD_InitCard>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00a      	b.n	8001cb4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af04      	add	r7, sp, #16
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001cd8:	2376      	movs	r3, #118	; 0x76
 8001cda:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681d      	ldr	r5, [r3, #0]
 8001ce0:	466c      	mov	r4, sp
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f001 fbfd 	bl	80034f4 <SDIO_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e04f      	b.n	8001dac <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001d0c:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_SD_InitCard+0xf8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fc35 	bl	8003586 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_SD_InitCard+0xf8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7ff f82e 	bl	8000d84 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 ff03 	bl	8002b34 <SD_PowerON>
 8001d2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e02e      	b.n	8001dac <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fe22 	bl	8002998 <SD_InitCard>
 8001d54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e01b      	b.n	8001dac <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fc94 	bl	80036aa <SDMMC_CmdBlockLength>
 8001d82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00f      	beq.n	8001daa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_SD_InitCard+0xfc>)
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bdb0      	pop	{r4, r5, r7, pc}
 8001db4:	422580a0 	.word	0x422580a0
 8001db8:	004005ff 	.word	0x004005ff

08001dbc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b092      	sub	sp, #72	; 0x48
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001dca:	f7fe ffcf 	bl	8000d6c <HAL_GetTick>
 8001dce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d107      	bne.n	8001dee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1bd      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	f040 81b0 	bne.w	800215c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	441a      	add	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d907      	bls.n	8001e20 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e1a4      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2203      	movs	r2, #3
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d002      	beq.n	8001e3e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3a:	025b      	lsls	r3, r3, #9
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	025b      	lsls	r3, r3, #9
 8001e48:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e4a:	2390      	movs	r3, #144	; 0x90
 8001e4c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f107 0214 	add.w	r2, r7, #20
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fbf4 	bl	8003652 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d90a      	bls.n	8001e86 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2202      	movs	r2, #2
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fc58 	bl	8003732 <SDMMC_CmdReadMultiBlock>
 8001e82:	6478      	str	r0, [r7, #68]	; 0x44
 8001e84:	e009      	b.n	8001e9a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fc2b 	bl	80036ee <SDMMC_CmdReadSingleBlock>
 8001e98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7a      	ldr	r2, [pc, #488]	; (8002090 <HAL_SD_ReadBlocks+0x2d4>)
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e151      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001eca:	e061      	b.n	8001f90 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03c      	beq.n	8001f54 <HAL_SD_ReadBlocks+0x198>
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d039      	beq.n	8001f54 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee4:	e033      	b.n	8001f4e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 fb2d 	bl	800354a <SDIO_ReadFIFO>
 8001ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	3301      	adds	r3, #1
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f02:	3b01      	subs	r3, #1
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3301      	adds	r3, #1
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	0c1b      	lsrs	r3, r3, #16
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	3301      	adds	r3, #1
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	0e1b      	lsrs	r3, r3, #24
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	3301      	adds	r3, #1
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f44:	3b01      	subs	r3, #1
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f50:	2b07      	cmp	r3, #7
 8001f52:	d9c8      	bls.n	8001ee6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001f54:	f7fe ff0a 	bl	8000d6c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d902      	bls.n	8001f6a <HAL_SD_ReadBlocks+0x1ae>
 8001f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d112      	bne.n	8001f90 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_SD_ReadBlocks+0x2d4>)
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0ec      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f96:	f240 332a 	movw	r3, #810	; 0x32a
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d095      	beq.n	8001ecc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d022      	beq.n	8001ff4 <HAL_SD_ReadBlocks+0x238>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d91f      	bls.n	8001ff4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d01b      	beq.n	8001ff4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fc1d 	bl	8003800 <SDMMC_CmdStopTransfer>
 8001fc6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <HAL_SD_ReadBlocks+0x2d4>)
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0ba      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d012      	beq.n	8002028 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_SD_ReadBlocks+0x2d4>)
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	f043 0208 	orr.w	r2, r3, #8
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0a0      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d012      	beq.n	800205c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <HAL_SD_ReadBlocks+0x2d4>)
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	f043 0202 	orr.w	r2, r3, #2
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e086      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_SD_ReadBlocks+0x2d4>)
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e06c      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
 8002090:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fa56 	bl	800354a <SDIO_ReadFIFO>
 800209e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020aa:	3301      	adds	r3, #1
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b0:	3b01      	subs	r3, #1
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	3301      	adds	r3, #1
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c6:	3b01      	subs	r3, #1
 80020c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	3301      	adds	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020dc:	3b01      	subs	r3, #1
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	0e1b      	lsrs	r3, r3, #24
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	3301      	adds	r3, #1
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f2:	3b01      	subs	r3, #1
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80020f6:	f7fe fe39 	bl	8000d6c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002102:	429a      	cmp	r2, r3
 8002104:	d902      	bls.n	800210c <HAL_SD_ReadBlocks+0x350>
 8002106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002108:	2b00      	cmp	r3, #0
 800210a:	d112      	bne.n	8002132 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_SD_ReadBlocks+0x3b8>)
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e01b      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_SD_ReadBlocks+0x38a>
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1a6      	bne.n	8002094 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f240 523a 	movw	r2, #1338	; 0x53a
 800214e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e006      	b.n	800216a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3748      	adds	r7, #72	; 0x48
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	004005ff 	.word	0x004005ff

08002178 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b092      	sub	sp, #72	; 0x48
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7fe fdf1 	bl	8000d6c <HAL_GetTick>
 800218a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e166      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 8159 	bne.w	800246a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	441a      	add	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d907      	bls.n	80021dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e14d      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80021f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f6:	025b      	lsls	r3, r3, #9
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	025b      	lsls	r3, r3, #9
 8002204:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002206:	2390      	movs	r3, #144	; 0x90
 8002208:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f107 0218 	add.w	r2, r7, #24
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fa16 	bl	8003652 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d90a      	bls.n	8002242 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002238:	4618      	mov	r0, r3
 800223a:	f001 fabe 	bl	80037ba <SDMMC_CmdWriteMultiBlock>
 800223e:	6478      	str	r0, [r7, #68]	; 0x44
 8002240:	e009      	b.n	8002256 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2210      	movs	r2, #16
 8002246:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fa91 	bl	8003776 <SDMMC_CmdWriteSingleBlock>
 8002254:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a87      	ldr	r2, [pc, #540]	; (8002480 <HAL_SD_WriteBlocks+0x308>)
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226a:	431a      	orrs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0fa      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002286:	e065      	b.n	8002354 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d040      	beq.n	8002318 <HAL_SD_WriteBlocks+0x1a0>
 8002296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03d      	beq.n	8002318 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
 80022a0:	e037      	b.n	8002312 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	3301      	adds	r3, #1
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b0:	3b01      	subs	r3, #1
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	021a      	lsls	r2, r3, #8
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	3301      	adds	r3, #1
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	3b01      	subs	r3, #1
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	041a      	lsls	r2, r3, #16
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	3301      	adds	r3, #1
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	3b01      	subs	r3, #1
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	061a      	lsls	r2, r3, #24
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	3301      	adds	r3, #1
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f8:	3b01      	subs	r3, #1
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f107 0214 	add.w	r2, r7, #20
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f001 f92c 	bl	8003564 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800230c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230e:	3301      	adds	r3, #1
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
 8002312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002314:	2b07      	cmp	r3, #7
 8002316:	d9c4      	bls.n	80022a2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002318:	f7fe fd28 	bl	8000d6c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002324:	429a      	cmp	r2, r3
 8002326:	d902      	bls.n	800232e <HAL_SD_WriteBlocks+0x1b6>
 8002328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232a:	2b00      	cmp	r3, #0
 800232c:	d112      	bne.n	8002354 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a53      	ldr	r2, [pc, #332]	; (8002480 <HAL_SD_WriteBlocks+0x308>)
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800233a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e091      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235a:	f240 331a 	movw	r3, #794	; 0x31a
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d091      	beq.n	8002288 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d022      	beq.n	80023b8 <HAL_SD_WriteBlocks+0x240>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d91f      	bls.n	80023b8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	2b03      	cmp	r3, #3
 800237e:	d01b      	beq.n	80023b8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fa3b 	bl	8003800 <SDMMC_CmdStopTransfer>
 800238a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <HAL_SD_WriteBlocks+0x308>)
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e05f      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <HAL_SD_WriteBlocks+0x308>)
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	f043 0208 	orr.w	r2, r3, #8
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e045      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a20      	ldr	r2, [pc, #128]	; (8002480 <HAL_SD_WriteBlocks+0x308>)
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e02b      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <HAL_SD_WriteBlocks+0x308>)
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e011      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f240 523a 	movw	r2, #1338	; 0x53a
 800245c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e006      	b.n	8002478 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3748      	adds	r7, #72	; 0x48
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	004005ff 	.word	0x004005ff

08002484 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002492:	0f9b      	lsrs	r3, r3, #30
 8002494:	b2da      	uxtb	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249e:	0e9b      	lsrs	r3, r3, #26
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b0:	0e1b      	lsrs	r3, r3, #24
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e4:	0d1b      	lsrs	r3, r3, #20
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002502:	0bdb      	lsrs	r3, r3, #15
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002514:	0b9b      	lsrs	r3, r3, #14
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002526:	0b5b      	lsrs	r3, r3, #13
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002538:	0b1b      	lsrs	r3, r3, #12
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	d163      	bne.n	800261c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002558:	009a      	lsls	r2, r3, #2
 800255a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002564:	0f92      	lsrs	r2, r2, #30
 8002566:	431a      	orrs	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002570:	0edb      	lsrs	r3, r3, #27
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	b2da      	uxtb	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	b2da      	uxtb	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002594:	0d5b      	lsrs	r3, r3, #21
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	b2da      	uxtb	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b8:	0bdb      	lsrs	r3, r3, #15
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	3302      	adds	r3, #2
 80025dc:	2201      	movs	r2, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80025e6:	fb03 f202 	mul.w	r2, r3, r2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7a1b      	ldrb	r3, [r3, #8]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002608:	0a52      	lsrs	r2, r2, #9
 800260a:	fb03 f202 	mul.w	r2, r3, r2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002618:	661a      	str	r2, [r3, #96]	; 0x60
 800261a:	e031      	b.n	8002680 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	2b01      	cmp	r3, #1
 8002622:	d11d      	bne.n	8002660 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	3301      	adds	r3, #1
 8002640:	029a      	lsls	r2, r3, #10
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002654:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	661a      	str	r2, [r3, #96]	; 0x60
 800265e:	e00f      	b.n	8002680 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_SD_GetCardCSD+0x344>)
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e09d      	b.n	80027bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002684:	0b9b      	lsrs	r3, r3, #14
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	09db      	lsrs	r3, r3, #7
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	0fdb      	lsrs	r3, r3, #31
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	0f5b      	lsrs	r3, r3, #29
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	0d9b      	lsrs	r3, r3, #22
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	0d5b      	lsrs	r3, r3, #21
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	0bdb      	lsrs	r3, r3, #15
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	0b9b      	lsrs	r3, r3, #14
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	0b1b      	lsrs	r3, r3, #12
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	0a9b      	lsrs	r3, r3, #10
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	b2da      	uxtb	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	b2da      	uxtb	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	004005ff 	.word	0x004005ff

080027cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b08e      	sub	sp, #56	; 0x38
 8002828:	af04      	add	r7, sp, #16
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2203      	movs	r2, #3
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	2b03      	cmp	r3, #3
 8002842:	d02e      	beq.n	80028a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d106      	bne.n	800285a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
 8002858:	e029      	b.n	80028ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002860:	d10a      	bne.n	8002878 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa1c 	bl	8002ca0 <SD_WideBus_Enable>
 8002868:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
 8002876:	e01a      	b.n	80028ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa59 	bl	8002d36 <SD_WideBus_Disable>
 8002884:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
 8002892:	e00c      	b.n	80028ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
 80028a0:	e005      	b.n	80028ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_SD_ConfigWideBusOperation+0x130>)
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028cc:	e01f      	b.n	800290e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681d      	ldr	r5, [r3, #0]
 80028f4:	466c      	mov	r4, sp
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002908:	4628      	mov	r0, r5
 800290a:	f000 fdf3 	bl	80034f4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fec7 	bl	80036aa <SDMMC_CmdBlockLength>
 800291c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_SD_ConfigWideBusOperation+0x130>)
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800294a:	4618      	mov	r0, r3
 800294c:	3728      	adds	r7, #40	; 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bdb0      	pop	{r4, r5, r7, pc}
 8002952:	bf00      	nop
 8002954:	004005ff 	.word	0x004005ff

08002958 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f970 	bl	8002c50 <SD_SendStatus>
 8002970:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800298e:	693b      	ldr	r3, [r7, #16]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b094      	sub	sp, #80	; 0x50
 800299c:	af04      	add	r7, sp, #16
 800299e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80029a0:	2301      	movs	r3, #1
 80029a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fdfa 	bl	80035a2 <SDIO_GetPowerState>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80029b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029b8:	e0b8      	b.n	8002b2c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d02f      	beq.n	8002a22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f824 	bl	8003a14 <SDMMC_CmdSendCID>
 80029cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80029d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d6:	e0a9      	b.n	8002b2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fe24 	bl	800362c <SDIO_GetResponse>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2104      	movs	r1, #4
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fe1b 	bl	800362c <SDIO_GetResponse>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2108      	movs	r1, #8
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fe12 	bl	800362c <SDIO_GetResponse>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	210c      	movs	r1, #12
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fe09 	bl	800362c <SDIO_GetResponse>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d00d      	beq.n	8002a46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f107 020e 	add.w	r2, r7, #14
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f82a 	bl	8003a8e <SDMMC_CmdSetRelAdd>
 8002a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SD_InitCard+0xae>
    {
      return errorstate;
 8002a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a44:	e072      	b.n	8002b2c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d036      	beq.n	8002abc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	461a      	mov	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fff4 	bl	8003a50 <SDMMC_CmdSendCSD>
 8002a68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a72:	e05b      	b.n	8002b2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fdd6 	bl	800362c <SDIO_GetResponse>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fdcd 	bl	800362c <SDIO_GetResponse>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2108      	movs	r1, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fdc4 	bl	800362c <SDIO_GetResponse>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	210c      	movs	r1, #12
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fdbb 	bl	800362c <SDIO_GetResponse>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fdb2 	bl	800362c <SDIO_GetResponse>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	0d1a      	lsrs	r2, r3, #20
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fcd4 	bl	8002484 <HAL_SD_GetCardCSD>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ae6:	e021      	b.n	8002b2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	2200      	movs	r2, #0
 8002af4:	461c      	mov	r4, r3
 8002af6:	4615      	mov	r5, r2
 8002af8:	4622      	mov	r2, r4
 8002afa:	462b      	mov	r3, r5
 8002afc:	4608      	mov	r0, r1
 8002afe:	f000 fea1 	bl	8003844 <SDMMC_CmdSelDesel>
 8002b02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <SD_InitCard+0x176>
  {
    return errorstate;
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0c:	e00e      	b.n	8002b2c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681d      	ldr	r5, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	466c      	mov	r4, sp
 8002b16:	f103 0210 	add.w	r2, r3, #16
 8002b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b20:	3304      	adds	r3, #4
 8002b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b24:	4628      	mov	r0, r5
 8002b26:	f000 fce5 	bl	80034f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3740      	adds	r7, #64	; 0x40
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}

08002b34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fe9c 	bl	800388a <SDMMC_CmdGoIdleState>
 8002b52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	e072      	b.n	8002c44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 feaf 	bl	80038c6 <SDMMC_CmdOperCond>
 8002b68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe85 	bl	800388a <SDMMC_CmdGoIdleState>
 8002b80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	e05b      	b.n	8002c44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d137      	bne.n	8002c0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 feaf 	bl	8003904 <SDMMC_CmdAppCommand>
 8002ba6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02d      	beq.n	8002c0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002bb2:	e047      	b.n	8002c44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fea2 	bl	8003904 <SDMMC_CmdAppCommand>
 8002bc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <SD_PowerON+0x98>
    {
      return errorstate;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	e03b      	b.n	8002c44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	491e      	ldr	r1, [pc, #120]	; (8002c4c <SD_PowerON+0x118>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 feb8 	bl	8003948 <SDMMC_CmdAppOperCommand>
 8002bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002be4:	e02e      	b.n	8002c44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fd1d 	bl	800362c <SDIO_GetResponse>
 8002bf2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	0fdb      	lsrs	r3, r3, #31
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <SD_PowerON+0xcc>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <SD_PowerON+0xce>
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]

    count++;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d802      	bhi.n	8002c1a <SD_PowerON+0xe6>
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0cc      	beq.n	8002bb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d902      	bls.n	8002c2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	e00c      	b.n	8002c44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
 8002c3a:	e002      	b.n	8002c42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	c1100000 	.word	0xc1100000

08002c50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c64:	e018      	b.n	8002c98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f000 ff2c 	bl	8003ad0 <SDMMC_CmdSendStatus>
 8002c78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	e009      	b.n	8002c98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fcce 	bl	800362c <SDIO_GetResponse>
 8002c90:	4602      	mov	r2, r0
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fcb8 	bl	800362c <SDIO_GetResponse>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cc6:	d102      	bne.n	8002cce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ccc:	e02f      	b.n	8002d2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f879 	bl	8002dcc <SD_FindSCR>
 8002cda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	e023      	b.n	8002d2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01c      	beq.n	8002d2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 fe01 	bl	8003904 <SDMMC_CmdAppCommand>
 8002d02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	e00f      	b.n	8002d2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fe3a 	bl	800398e <SDMMC_CmdBusWidth>
 8002d1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	e003      	b.n	8002d2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e001      	b.n	8002d2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fc6d 	bl	800362c <SDIO_GetResponse>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d5c:	d102      	bne.n	8002d64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d62:	e02f      	b.n	8002dc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f82e 	bl	8002dcc <SD_FindSCR>
 8002d70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	e023      	b.n	8002dc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01c      	beq.n	8002dc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 fdb6 	bl	8003904 <SDMMC_CmdAppCommand>
 8002d98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	e00f      	b.n	8002dc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fdef 	bl	800398e <SDMMC_CmdBusWidth>
 8002db0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	e003      	b.n	8002dc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e001      	b.n	8002dc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b08f      	sub	sp, #60	; 0x3c
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002dd6:	f7fd ffc9 	bl	8000d6c <HAL_GetTick>
 8002dda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2108      	movs	r1, #8
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fc59 	bl	80036aa <SDMMC_CmdBlockLength>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	e0b2      	b.n	8002f6a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f000 fd77 	bl	8003904 <SDMMC_CmdAppCommand>
 8002e16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	e0a3      	b.n	8002f6a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002e2c:	2330      	movs	r3, #48	; 0x30
 8002e2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e30:	2302      	movs	r3, #2
 8002e32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f107 0210 	add.w	r2, r7, #16
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fc03 	bl	8003652 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fdbe 	bl	80039d2 <SDMMC_CmdSendSCR>
 8002e56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02a      	beq.n	8002eb4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	e083      	b.n	8002f6a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00f      	beq.n	8002e90 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f107 0208 	add.w	r2, r7, #8
 8002e7c:	18d4      	adds	r4, r2, r3
 8002e7e:	4608      	mov	r0, r1
 8002e80:	f000 fb63 	bl	800354a <SDIO_ReadFIFO>
 8002e84:	4603      	mov	r3, r0
 8002e86:	6023      	str	r3, [r4, #0]
      index++;
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	e006      	b.n	8002e9e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d012      	beq.n	8002ec4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002e9e:	f7fd ff65 	bl	8000d6c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d102      	bne.n	8002eb4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002eae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002eb2:	e05a      	b.n	8002f6a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0cf      	beq.n	8002e62 <SD_FindSCR+0x96>
 8002ec2:	e000      	b.n	8002ec6 <SD_FindSCR+0xfa>
      break;
 8002ec4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002edc:	2308      	movs	r3, #8
 8002ede:	e044      	b.n	8002f6a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e037      	b.n	8002f6a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e02a      	b.n	8002f6a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	061a      	lsls	r2, r3, #24
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0e1b      	lsrs	r3, r3, #24
 8002f3a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	601a      	str	r2, [r3, #0]
    scr++;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	3304      	adds	r3, #4
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	061a      	lsls	r2, r3, #24
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0e1b      	lsrs	r3, r3, #24
 8002f62:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	373c      	adds	r7, #60	; 0x3c
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}

08002f72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e03f      	b.n	8003004 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fdc1 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2224      	movs	r2, #36	; 0x24
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f828 	bl	800300c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b0c0      	sub	sp, #256	; 0x100
 8003012:	af00      	add	r7, sp, #0
 8003014:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	ea40 0301 	orr.w	r3, r0, r1
 8003034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	431a      	orrs	r2, r3
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003064:	f021 010c 	bic.w	r1, r1, #12
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003072:	430b      	orrs	r3, r1
 8003074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003086:	6999      	ldr	r1, [r3, #24]
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	ea40 0301 	orr.w	r3, r0, r1
 8003092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b8f      	ldr	r3, [pc, #572]	; (80032d8 <UART_SetConfig+0x2cc>)
 800309c:	429a      	cmp	r2, r3
 800309e:	d005      	beq.n	80030ac <UART_SetConfig+0xa0>
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b8d      	ldr	r3, [pc, #564]	; (80032dc <UART_SetConfig+0x2d0>)
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d104      	bne.n	80030b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ac:	f7fe fdc2 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 80030b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030b4:	e003      	b.n	80030be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030b6:	f7fe fda9 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80030ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	f040 810c 	bne.w	80032e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030de:	4622      	mov	r2, r4
 80030e0:	462b      	mov	r3, r5
 80030e2:	1891      	adds	r1, r2, r2
 80030e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80030e6:	415b      	adcs	r3, r3
 80030e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ee:	4621      	mov	r1, r4
 80030f0:	eb12 0801 	adds.w	r8, r2, r1
 80030f4:	4629      	mov	r1, r5
 80030f6:	eb43 0901 	adc.w	r9, r3, r1
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800310a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800310e:	4690      	mov	r8, r2
 8003110:	4699      	mov	r9, r3
 8003112:	4623      	mov	r3, r4
 8003114:	eb18 0303 	adds.w	r3, r8, r3
 8003118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800311c:	462b      	mov	r3, r5
 800311e:	eb49 0303 	adc.w	r3, r9, r3
 8003122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003132:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800313a:	460b      	mov	r3, r1
 800313c:	18db      	adds	r3, r3, r3
 800313e:	653b      	str	r3, [r7, #80]	; 0x50
 8003140:	4613      	mov	r3, r2
 8003142:	eb42 0303 	adc.w	r3, r2, r3
 8003146:	657b      	str	r3, [r7, #84]	; 0x54
 8003148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800314c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003150:	f7fd f842 	bl	80001d8 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <UART_SetConfig+0x2d4>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	011c      	lsls	r4, r3, #4
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800316c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	64b9      	str	r1, [r7, #72]	; 0x48
 800317c:	415b      	adcs	r3, r3
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003184:	4641      	mov	r1, r8
 8003186:	eb12 0a01 	adds.w	sl, r2, r1
 800318a:	4649      	mov	r1, r9
 800318c:	eb43 0b01 	adc.w	fp, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800319c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a4:	4692      	mov	sl, r2
 80031a6:	469b      	mov	fp, r3
 80031a8:	4643      	mov	r3, r8
 80031aa:	eb1a 0303 	adds.w	r3, sl, r3
 80031ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b2:	464b      	mov	r3, r9
 80031b4:	eb4b 0303 	adc.w	r3, fp, r3
 80031b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031d0:	460b      	mov	r3, r1
 80031d2:	18db      	adds	r3, r3, r3
 80031d4:	643b      	str	r3, [r7, #64]	; 0x40
 80031d6:	4613      	mov	r3, r2
 80031d8:	eb42 0303 	adc.w	r3, r2, r3
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
 80031de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031e6:	f7fc fff7 	bl	80001d8 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <UART_SetConfig+0x2d4>)
 80031f2:	fba3 2301 	umull	r2, r3, r3, r1
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2264      	movs	r2, #100	; 0x64
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	1acb      	subs	r3, r1, r3
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <UART_SetConfig+0x2d4>)
 8003208:	fba3 2302 	umull	r2, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003214:	441c      	add	r4, r3
 8003216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003220:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003230:	415b      	adcs	r3, r3
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003238:	4641      	mov	r1, r8
 800323a:	1851      	adds	r1, r2, r1
 800323c:	6339      	str	r1, [r7, #48]	; 0x30
 800323e:	4649      	mov	r1, r9
 8003240:	414b      	adcs	r3, r1
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003250:	4659      	mov	r1, fp
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4651      	mov	r1, sl
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4642      	mov	r2, r8
 8003266:	189b      	adds	r3, r3, r2
 8003268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800326c:	464b      	mov	r3, r9
 800326e:	460a      	mov	r2, r1
 8003270:	eb42 0303 	adc.w	r3, r2, r3
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003284:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800328c:	460b      	mov	r3, r1
 800328e:	18db      	adds	r3, r3, r3
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
 8003292:	4613      	mov	r3, r2
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800329e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032a2:	f7fc ff99 	bl	80001d8 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <UART_SetConfig+0x2d4>)
 80032ac:	fba3 1302 	umull	r1, r3, r3, r2
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	2164      	movs	r1, #100	; 0x64
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	3332      	adds	r3, #50	; 0x32
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <UART_SetConfig+0x2d4>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	f003 0207 	and.w	r2, r3, #7
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4422      	add	r2, r4
 80032d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032d4:	e105      	b.n	80034e2 <UART_SetConfig+0x4d6>
 80032d6:	bf00      	nop
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40011400 	.word	0x40011400
 80032e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032f6:	4642      	mov	r2, r8
 80032f8:	464b      	mov	r3, r9
 80032fa:	1891      	adds	r1, r2, r2
 80032fc:	6239      	str	r1, [r7, #32]
 80032fe:	415b      	adcs	r3, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003306:	4641      	mov	r1, r8
 8003308:	1854      	adds	r4, r2, r1
 800330a:	4649      	mov	r1, r9
 800330c:	eb43 0501 	adc.w	r5, r3, r1
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	00eb      	lsls	r3, r5, #3
 800331a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331e:	00e2      	lsls	r2, r4, #3
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	4643      	mov	r3, r8
 8003326:	18e3      	adds	r3, r4, r3
 8003328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800332c:	464b      	mov	r3, r9
 800332e:	eb45 0303 	adc.w	r3, r5, r3
 8003332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003352:	4629      	mov	r1, r5
 8003354:	008b      	lsls	r3, r1, #2
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800335c:	4621      	mov	r1, r4
 800335e:	008a      	lsls	r2, r1, #2
 8003360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003364:	f7fc ff38 	bl	80001d8 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <UART_SetConfig+0x4e4>)
 800336e:	fba3 2302 	umull	r2, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	011c      	lsls	r4, r3, #4
 8003376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003380:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	1891      	adds	r1, r2, r2
 800338e:	61b9      	str	r1, [r7, #24]
 8003390:	415b      	adcs	r3, r3
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003398:	4641      	mov	r1, r8
 800339a:	1851      	adds	r1, r2, r1
 800339c:	6139      	str	r1, [r7, #16]
 800339e:	4649      	mov	r1, r9
 80033a0:	414b      	adcs	r3, r1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b0:	4659      	mov	r1, fp
 80033b2:	00cb      	lsls	r3, r1, #3
 80033b4:	4651      	mov	r1, sl
 80033b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ba:	4651      	mov	r1, sl
 80033bc:	00ca      	lsls	r2, r1, #3
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	4642      	mov	r2, r8
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033cc:	464b      	mov	r3, r9
 80033ce:	460a      	mov	r2, r1
 80033d0:	eb42 0303 	adc.w	r3, r2, r3
 80033d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033f0:	4649      	mov	r1, r9
 80033f2:	008b      	lsls	r3, r1, #2
 80033f4:	4641      	mov	r1, r8
 80033f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fa:	4641      	mov	r1, r8
 80033fc:	008a      	lsls	r2, r1, #2
 80033fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003402:	f7fc fee9 	bl	80001d8 <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <UART_SetConfig+0x4e4>)
 800340c:	fba3 1302 	umull	r1, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	2164      	movs	r1, #100	; 0x64
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	3332      	adds	r3, #50	; 0x32
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <UART_SetConfig+0x4e4>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342a:	441c      	add	r4, r3
 800342c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003430:	2200      	movs	r2, #0
 8003432:	673b      	str	r3, [r7, #112]	; 0x70
 8003434:	677a      	str	r2, [r7, #116]	; 0x74
 8003436:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800343a:	4642      	mov	r2, r8
 800343c:	464b      	mov	r3, r9
 800343e:	1891      	adds	r1, r2, r2
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	415b      	adcs	r3, r3
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800344a:	4641      	mov	r1, r8
 800344c:	1851      	adds	r1, r2, r1
 800344e:	6039      	str	r1, [r7, #0]
 8003450:	4649      	mov	r1, r9
 8003452:	414b      	adcs	r3, r1
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003462:	4659      	mov	r1, fp
 8003464:	00cb      	lsls	r3, r1, #3
 8003466:	4651      	mov	r1, sl
 8003468:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346c:	4651      	mov	r1, sl
 800346e:	00ca      	lsls	r2, r1, #3
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	4603      	mov	r3, r0
 8003476:	4642      	mov	r2, r8
 8003478:	189b      	adds	r3, r3, r2
 800347a:	66bb      	str	r3, [r7, #104]	; 0x68
 800347c:	464b      	mov	r3, r9
 800347e:	460a      	mov	r2, r1
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	663b      	str	r3, [r7, #96]	; 0x60
 8003490:	667a      	str	r2, [r7, #100]	; 0x64
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800349e:	4649      	mov	r1, r9
 80034a0:	008b      	lsls	r3, r1, #2
 80034a2:	4641      	mov	r1, r8
 80034a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a8:	4641      	mov	r1, r8
 80034aa:	008a      	lsls	r2, r1, #2
 80034ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034b0:	f7fc fe92 	bl	80001d8 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <UART_SetConfig+0x4e4>)
 80034ba:	fba3 1302 	umull	r1, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2164      	movs	r1, #100	; 0x64
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	3332      	adds	r3, #50	; 0x32
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <UART_SetConfig+0x4e4>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4422      	add	r2, r4
 80034e0:	609a      	str	r2, [r3, #8]
}
 80034e2:	bf00      	nop
 80034e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	51eb851f 	.word	0x51eb851f

080034f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80034f4:	b084      	sub	sp, #16
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	f107 001c 	add.w	r0, r7, #28
 8003502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800350a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800350c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800350e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003512:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003516:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800351a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800351e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800352e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	b004      	add	sp, #16
 8003548:	4770      	bx	lr

0800354a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2203      	movs	r2, #3
 8003592:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0303 	and.w	r3, r3, #3
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80035e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80035e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80035f8:	f023 030f 	bic.w	r3, r3, #15
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	b2db      	uxtb	r3, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3314      	adds	r3, #20
 800363a:	461a      	mov	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4413      	add	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
}  
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003678:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800367e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003684:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800369c:	2300      	movs	r3, #0

}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b088      	sub	sp, #32
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80036b8:	2310      	movs	r3, #16
 80036ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff74 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	2110      	movs	r1, #16
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa19 	bl	8003b14 <SDMMC_GetCmdResp1>
 80036e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036e4:	69fb      	ldr	r3, [r7, #28]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b088      	sub	sp, #32
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80036fc:	2311      	movs	r3, #17
 80036fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003700:	2340      	movs	r3, #64	; 0x40
 8003702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff52 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	2111      	movs	r1, #17
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f9f7 	bl	8003b14 <SDMMC_GetCmdResp1>
 8003726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003728:	69fb      	ldr	r3, [r7, #28]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003740:	2312      	movs	r3, #18
 8003742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003744:	2340      	movs	r3, #64	; 0x40
 8003746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800374c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003750:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003752:	f107 0308 	add.w	r3, r7, #8
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff30 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	2112      	movs	r1, #18
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f9d5 	bl	8003b14 <SDMMC_GetCmdResp1>
 800376a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800376c:	69fb      	ldr	r3, [r7, #28]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003784:	2318      	movs	r3, #24
 8003786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff0e 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	2118      	movs	r1, #24
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f9b3 	bl	8003b14 <SDMMC_GetCmdResp1>
 80037ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037b0:	69fb      	ldr	r3, [r7, #28]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b088      	sub	sp, #32
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80037c8:	2319      	movs	r3, #25
 80037ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037cc:	2340      	movs	r3, #64	; 0x40
 80037ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff feec 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	2119      	movs	r1, #25
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f991 	bl	8003b14 <SDMMC_GetCmdResp1>
 80037f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037f4:	69fb      	ldr	r3, [r7, #28]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800380c:	230c      	movs	r3, #12
 800380e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003810:	2340      	movs	r3, #64	; 0x40
 8003812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800381e:	f107 0308 	add.w	r3, r7, #8
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff feca 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800382a:	4a05      	ldr	r2, [pc, #20]	; (8003840 <SDMMC_CmdStopTransfer+0x40>)
 800382c:	210c      	movs	r1, #12
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f970 	bl	8003b14 <SDMMC_GetCmdResp1>
 8003834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003836:	69fb      	ldr	r3, [r7, #28]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	05f5e100 	.word	0x05f5e100

08003844 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003854:	2307      	movs	r3, #7
 8003856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003858:	2340      	movs	r3, #64	; 0x40
 800385a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003864:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003866:	f107 0310 	add.w	r3, r7, #16
 800386a:	4619      	mov	r1, r3
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fea6 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	2107      	movs	r1, #7
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f94b 	bl	8003b14 <SDMMC_GetCmdResp1>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003882:	4618      	mov	r0, r3
 8003884:	3728      	adds	r7, #40	; 0x28
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fe85 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb65 	bl	8003f84 <SDMMC_GetCmdError>
 80038ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038bc:	69fb      	ldr	r3, [r7, #28]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b088      	sub	sp, #32
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80038ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80038d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80038d4:	2308      	movs	r3, #8
 80038d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038d8:	2340      	movs	r3, #64	; 0x40
 80038da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038e6:	f107 0308 	add.w	r3, r7, #8
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fe66 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 faf8 	bl	8003ee8 <SDMMC_GetCmdResp7>
 80038f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038fa:	69fb      	ldr	r3, [r7, #28]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003912:	2337      	movs	r3, #55	; 0x37
 8003914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800391e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fe47 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	2137      	movs	r1, #55	; 0x37
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8ec 	bl	8003b14 <SDMMC_GetCmdResp1>
 800393c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800393e:	69fb      	ldr	r3, [r7, #28]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800395e:	2329      	movs	r3, #41	; 0x29
 8003960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003962:	2340      	movs	r3, #64	; 0x40
 8003964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800396a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800396e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe21 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f9ff 	bl	8003d80 <SDMMC_GetCmdResp3>
 8003982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003984:	69fb      	ldr	r3, [r7, #28]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b088      	sub	sp, #32
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800399c:	2306      	movs	r3, #6
 800399e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039a0:	2340      	movs	r3, #64	; 0x40
 80039a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fe02 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	2106      	movs	r1, #6
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8a7 	bl	8003b14 <SDMMC_GetCmdResp1>
 80039c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039c8:	69fb      	ldr	r3, [r7, #28]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b088      	sub	sp, #32
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80039de:	2333      	movs	r3, #51	; 0x33
 80039e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039f0:	f107 0308 	add.w	r3, r7, #8
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fde1 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	2133      	movs	r1, #51	; 0x33
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f886 	bl	8003b14 <SDMMC_GetCmdResp1>
 8003a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a20:	2302      	movs	r3, #2
 8003a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a24:	23c0      	movs	r3, #192	; 0xc0
 8003a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fdc0 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f956 	bl	8003cf0 <SDMMC_GetCmdResp2>
 8003a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a46:	69fb      	ldr	r3, [r7, #28]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003a5e:	2309      	movs	r3, #9
 8003a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a62:	23c0      	movs	r3, #192	; 0xc0
 8003a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fda1 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f937 	bl	8003cf0 <SDMMC_GetCmdResp2>
 8003a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a84:	69fb      	ldr	r3, [r7, #28]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b088      	sub	sp, #32
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aa0:	2340      	movs	r3, #64	; 0x40
 8003aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fd82 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	2103      	movs	r1, #3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f99c 	bl	8003dfc <SDMMC_GetCmdResp6>
 8003ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003ade:	230d      	movs	r3, #13
 8003ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fd61 	bl	80035be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	210d      	movs	r1, #13
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f806 	bl	8003b14 <SDMMC_GetCmdResp1>
 8003b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <SDMMC_GetCmdResp1+0x1d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a70      	ldr	r2, [pc, #448]	; (8003ce8 <SDMMC_GetCmdResp1+0x1d4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0a5a      	lsrs	r2, r3, #9
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	fb02 f303 	mul.w	r3, r2, r3
 8003b34:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	1e5a      	subs	r2, r3, #1
 8003b3a:	61fa      	str	r2, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b44:	e0c9      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <SDMMC_GetCmdResp1+0x22>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b72:	2304      	movs	r3, #4
 8003b74:	e0b1      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0a6      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22c5      	movs	r2, #197	; 0xc5
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fd3d 	bl	8003612 <SDIO_GetCommandResponse>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d001      	beq.n	8003ba6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e099      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fd3f 	bl	800362c <SDIO_GetResponse>
 8003bae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4b4e      	ldr	r3, [pc, #312]	; (8003cec <SDMMC_GetCmdResp1+0x1d8>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e08d      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da02      	bge.n	8003bca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc8:	e087      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003bd4:	2340      	movs	r3, #64	; 0x40
 8003bd6:	e080      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	e079      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf4:	e071      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c04:	e069      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c14:	e061      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c24:	e059      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c34:	e051      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c44:	e049      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c54:	e041      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c64:	e039      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c74:	e031      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c84:	e029      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003c90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c94:	e021      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ca4:	e019      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cb4:	e011      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003cc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cc4:	e009      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003cd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003cd4:	e001      	b.n	8003cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	10624dd3 	.word	0x10624dd3
 8003cec:	fdffe008 	.word	0xfdffe008

08003cf0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <SDMMC_GetCmdResp2+0x88>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <SDMMC_GetCmdResp2+0x8c>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0a5b      	lsrs	r3, r3, #9
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	60fa      	str	r2, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d1c:	e026      	b.n	8003d6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ef      	beq.n	8003d0e <SDMMC_GetCmdResp2+0x1e>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2204      	movs	r2, #4
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e00e      	b.n	8003d6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e003      	b.n	8003d6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	22c5      	movs	r2, #197	; 0xc5
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	10624dd3 	.word	0x10624dd3

08003d80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d88:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <SDMMC_GetCmdResp3+0x74>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <SDMMC_GetCmdResp3+0x78>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0a5b      	lsrs	r3, r3, #9
 8003d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003da8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003dac:	e01b      	b.n	8003de6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ef      	beq.n	8003d9e <SDMMC_GetCmdResp3+0x1e>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ea      	bne.n	8003d9e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	e003      	b.n	8003de6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	22c5      	movs	r2, #197	; 0xc5
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000000 	.word	0x20000000
 8003df8:	10624dd3 	.word	0x10624dd3

08003dfc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	460b      	mov	r3, r1
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e0a:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <SDMMC_GetCmdResp6+0xe4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a35      	ldr	r2, [pc, #212]	; (8003ee4 <SDMMC_GetCmdResp6+0xe8>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	0a5b      	lsrs	r3, r3, #9
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	61fa      	str	r2, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e2e:	e052      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <SDMMC_GetCmdResp6+0x24>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ea      	bne.n	8003e20 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	e03a      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e02f      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff fbcb 	bl	8003612 <SDIO_GetCommandResponse>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	7afb      	ldrb	r3, [r7, #11]
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d001      	beq.n	8003e8a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e025      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	22c5      	movs	r2, #197	; 0xc5
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e90:	2100      	movs	r1, #0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff fbca 	bl	800362c <SDIO_GetResponse>
 8003e98:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e011      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec0:	e009      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed0:	e001      	b.n	8003ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	10624dd3 	.word	0x10624dd3

08003ee8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <SDMMC_GetCmdResp7+0x94>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <SDMMC_GetCmdResp7+0x98>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0a5b      	lsrs	r3, r3, #9
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	60fa      	str	r2, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f14:	e02c      	b.n	8003f70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ef      	beq.n	8003f06 <SDMMC_GetCmdResp7+0x1e>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ea      	bne.n	8003f06 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f42:	2304      	movs	r3, #4
 8003f44:	e014      	b.n	8003f70 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e009      	b.n	8003f70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2240      	movs	r2, #64	; 0x40
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f6e:	2300      	movs	r3, #0
  
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	10624dd3 	.word	0x10624dd3

08003f84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <SDMMC_GetCmdError+0x50>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <SDMMC_GetCmdError+0x54>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0a5b      	lsrs	r3, r3, #9
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	fb02 f303 	mul.w	r3, r2, r3
 8003fa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1e5a      	subs	r2, r3, #1
 8003fa6:	60fa      	str	r2, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fb0:	e009      	b.n	8003fc6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f1      	beq.n	8003fa2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	22c5      	movs	r2, #197	; 0xc5
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <MX_FATFS_Init+0x18>)
 8003fe2:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <MX_FATFS_Init+0x1c>)
 8003fe4:	f000 fe9a 	bl	8004d1c <FATFS_LinkDriver>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <MX_FATFS_Init+0x20>)
 8003fee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	2000128c 	.word	0x2000128c
 8003ff8:	080051a8 	.word	0x080051a8
 8003ffc:	20001288 	.word	0x20001288

08004000 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800400a:	f000 f879 	bl	8004100 <BSP_SD_IsDetected>
 800400e:	4603      	mov	r3, r0
 8004010:	2b01      	cmp	r3, #1
 8004012:	d001      	beq.n	8004018 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e012      	b.n	800403e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004018:	480b      	ldr	r0, [pc, #44]	; (8004048 <BSP_SD_Init+0x48>)
 800401a:	f7fd fe1f 	bl	8001c5c <HAL_SD_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800402c:	4806      	ldr	r0, [pc, #24]	; (8004048 <BSP_SD_Init+0x48>)
 800402e:	f7fe fbf9 	bl	8002824 <HAL_SD_ConfigWideBusOperation>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800403c:	79fb      	ldrb	r3, [r7, #7]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200011bc 	.word	0x200011bc

0800404c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	4806      	ldr	r0, [pc, #24]	; (8004084 <BSP_SD_ReadBlocks+0x38>)
 800406a:	f7fd fea7 	bl	8001dbc <HAL_SD_ReadBlocks>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200011bc 	.word	0x200011bc

08004088 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	4806      	ldr	r0, [pc, #24]	; (80040c0 <BSP_SD_WriteBlocks+0x38>)
 80040a6:	f7fe f867 	bl	8002178 <HAL_SD_WriteBlocks>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200011bc 	.word	0x200011bc

080040c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80040c8:	4805      	ldr	r0, [pc, #20]	; (80040e0 <BSP_SD_GetCardState+0x1c>)
 80040ca:	f7fe fc45 	bl	8002958 <HAL_SD_GetCardState>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
}
 80040da:	4618      	mov	r0, r3
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200011bc 	.word	0x200011bc

080040e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <BSP_SD_GetCardInfo+0x18>)
 80040f0:	f7fe fb6c 	bl	80027cc <HAL_SD_GetCardInfo>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	200011bc 	.word	0x200011bc

08004100 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004106:	2301      	movs	r3, #1
 8004108:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	b2db      	uxtb	r3, r3
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <SD_CheckStatus+0x38>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800412c:	f7ff ffca 	bl	80040c4 <BSP_SD_GetCardState>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <SD_CheckStatus+0x38>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <SD_CheckStatus+0x38>)
 8004144:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004146:	4b03      	ldr	r3, [pc, #12]	; (8004154 <SD_CheckStatus+0x38>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b2db      	uxtb	r3, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000009 	.word	0x20000009

08004158 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <SD_initialize+0x38>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004168:	f7ff ff4a 	bl	8004000 <BSP_SD_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ffd1 	bl	800411c <SD_CheckStatus>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <SD_initialize+0x38>)
 8004180:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <SD_initialize+0x38>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b2db      	uxtb	r3, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000009 	.word	0x20000009

08004194 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ffbb 	bl	800411c <SD_CheckStatus>
 80041a6:	4603      	mov	r3, r0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4603      	mov	r3, r0
 80041be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80041c4:	f04f 33ff 	mov.w	r3, #4294967295
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	68b8      	ldr	r0, [r7, #8]
 80041ce:	f7ff ff3d 	bl	800404c <BSP_SD_ReadBlocks>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80041d8:	bf00      	nop
 80041da:	f7ff ff73 	bl	80040c4 <BSP_SD_GetCardState>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1fa      	bne.n	80041da <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4603      	mov	r3, r0
 8004200:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f7ff ff3a 	bl	8004088 <BSP_SD_WriteBlocks>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800421a:	bf00      	nop
 800421c:	f7ff ff52 	bl	80040c4 <BSP_SD_GetCardState>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1fa      	bne.n	800421c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	603a      	str	r2, [r7, #0]
 800423e:	71fb      	strb	r3, [r7, #7]
 8004240:	460b      	mov	r3, r1
 8004242:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800424a:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <SD_ioctl+0xac>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <SD_ioctl+0x28>
 8004258:	2303      	movs	r3, #3
 800425a:	e03c      	b.n	80042d6 <SD_ioctl+0xa2>

  switch (cmd)
 800425c:	79bb      	ldrb	r3, [r7, #6]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d834      	bhi.n	80042cc <SD_ioctl+0x98>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <SD_ioctl+0x34>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	08004281 	.word	0x08004281
 8004270:	08004299 	.word	0x08004299
 8004274:	080042b3 	.word	0x080042b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800427e:	e028      	b.n	80042d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff2d 	bl	80040e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004296:	e01c      	b.n	80042d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff21 	bl	80040e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042b0:	e00f      	b.n	80042d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ff14 	bl	80040e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	0a5a      	lsrs	r2, r3, #9
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042ca:	e002      	b.n	80042d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80042d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3730      	adds	r7, #48	; 0x30
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000009 	.word	0x20000009

080042e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <disk_status+0x30>)
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	79fa      	ldrb	r2, [r7, #7]
 80042fc:	4905      	ldr	r1, [pc, #20]	; (8004314 <disk_status+0x30>)
 80042fe:	440a      	add	r2, r1
 8004300:	7a12      	ldrb	r2, [r2, #8]
 8004302:	4610      	mov	r0, r2
 8004304:	4798      	blx	r3
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]
  return stat;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200012b8 	.word	0x200012b8

08004318 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <disk_initialize+0x48>)
 800432a:	5cd3      	ldrb	r3, [r2, r3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d111      	bne.n	8004354 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <disk_initialize+0x48>)
 8004334:	2101      	movs	r1, #1
 8004336:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <disk_initialize+0x48>)
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	79fa      	ldrb	r2, [r7, #7]
 8004346:	4906      	ldr	r1, [pc, #24]	; (8004360 <disk_initialize+0x48>)
 8004348:	440a      	add	r2, r1
 800434a:	7a12      	ldrb	r2, [r2, #8]
 800434c:	4610      	mov	r0, r2
 800434e:	4798      	blx	r3
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200012b8 	.word	0x200012b8

08004364 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <disk_read+0x3c>)
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	689c      	ldr	r4, [r3, #8]
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <disk_read+0x3c>)
 8004384:	4413      	add	r3, r2
 8004386:	7a18      	ldrb	r0, [r3, #8]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	47a0      	blx	r4
 8004390:	4603      	mov	r3, r0
 8004392:	75fb      	strb	r3, [r7, #23]
  return res;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
}
 8004396:	4618      	mov	r0, r3
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	bf00      	nop
 80043a0:	200012b8 	.word	0x200012b8

080043a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4603      	mov	r3, r0
 80043b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <disk_write+0x3c>)
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68dc      	ldr	r4, [r3, #12]
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <disk_write+0x3c>)
 80043c4:	4413      	add	r3, r2
 80043c6:	7a18      	ldrb	r0, [r3, #8]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	47a0      	blx	r4
 80043d0:	4603      	mov	r3, r0
 80043d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}
 80043de:	bf00      	nop
 80043e0:	200012b8 	.word	0x200012b8

080043e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	603a      	str	r2, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
 80043f0:	460b      	mov	r3, r1
 80043f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <disk_ioctl+0x38>)
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	79fa      	ldrb	r2, [r7, #7]
 8004402:	4906      	ldr	r1, [pc, #24]	; (800441c <disk_ioctl+0x38>)
 8004404:	440a      	add	r2, r1
 8004406:	7a10      	ldrb	r0, [r2, #8]
 8004408:	79b9      	ldrb	r1, [r7, #6]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	4798      	blx	r3
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
  return res;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	200012b8 	.word	0x200012b8

08004420 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3301      	adds	r3, #1
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004430:	89fb      	ldrh	r3, [r7, #14]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	b21a      	sxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b21b      	sxth	r3, r3
 800443c:	4313      	orrs	r3, r2
 800443e:	b21b      	sxth	r3, r3
 8004440:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004442:	89fb      	ldrh	r3, [r7, #14]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3303      	adds	r3, #3
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	3202      	adds	r2, #2
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	3201      	adds	r2, #1
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
	return rv;
 8004488:	68fb      	ldr	r3, [r7, #12]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e010      	b.n	80044c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80044a6:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <clear_lock+0x44>)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4413      	add	r3, r2
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d105      	bne.n	80044c2 <clear_lock+0x2a>
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <clear_lock+0x44>)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d9eb      	bls.n	80044a6 <clear_lock+0xe>
	}
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20001298 	.word	0x20001298

080044e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	78db      	ldrb	r3, [r3, #3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d034      	beq.n	800455e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7858      	ldrb	r0, [r3, #1]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004504:	2301      	movs	r3, #1
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	f7ff ff4c 	bl	80043a4 <disk_write>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	e022      	b.n	800455e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	429a      	cmp	r2, r3
 800452c:	d217      	bcs.n	800455e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	789b      	ldrb	r3, [r3, #2]
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e010      	b.n	8004558 <sync_window+0x78>
					wsect += fs->fsize;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4413      	add	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7858      	ldrb	r0, [r3, #1]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800454a:	2301      	movs	r3, #1
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	f7ff ff29 	bl	80043a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3b01      	subs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d8eb      	bhi.n	8004536 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d01b      	beq.n	80045b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ffad 	bl	80044e0 <sync_window>
 8004586:	4603      	mov	r3, r0
 8004588:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7858      	ldrb	r0, [r3, #1]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800459a:	2301      	movs	r3, #1
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f7ff fee1 	bl	8004364 <disk_read>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d031      	beq.n	800463c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e002      	b.n	80045e6 <get_ldnumber+0x24>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d903      	bls.n	80045f6 <get_ldnumber+0x34>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b3a      	cmp	r3, #58	; 0x3a
 80045f4:	d1f4      	bne.n	80045e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b3a      	cmp	r3, #58	; 0x3a
 80045fc:	d11c      	bne.n	8004638 <get_ldnumber+0x76>
			tp = *path;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	60fa      	str	r2, [r7, #12]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	3b30      	subs	r3, #48	; 0x30
 800460e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b09      	cmp	r3, #9
 8004614:	d80e      	bhi.n	8004634 <get_ldnumber+0x72>
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10a      	bne.n	8004634 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <get_ldnumber+0x72>
					vol = (int)i;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	e002      	b.n	800463e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800463c:	693b      	ldr	r3, [r7, #16]
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	70da      	strb	r2, [r3, #3]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f04f 32ff 	mov.w	r2, #4294967295
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ff7e 	bl	8004568 <move_window>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <check_fs+0x2a>
 8004672:	2304      	movs	r3, #4
 8004674:	e038      	b.n	80046e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3334      	adds	r3, #52	; 0x34
 800467a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fece 	bl	8004420 <ld_word>
 8004684:	4603      	mov	r3, r0
 8004686:	461a      	mov	r2, r3
 8004688:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <check_fs+0x48>
 8004690:	2303      	movs	r3, #3
 8004692:	e029      	b.n	80046e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800469a:	2be9      	cmp	r3, #233	; 0xe9
 800469c:	d009      	beq.n	80046b2 <check_fs+0x66>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046a4:	2beb      	cmp	r3, #235	; 0xeb
 80046a6:	d11e      	bne.n	80046e6 <check_fs+0x9a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046ae:	2b90      	cmp	r3, #144	; 0x90
 80046b0:	d119      	bne.n	80046e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3334      	adds	r3, #52	; 0x34
 80046b6:	3336      	adds	r3, #54	; 0x36
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fec9 	bl	8004450 <ld_dword>
 80046be:	4603      	mov	r3, r0
 80046c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046c4:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <check_fs+0xa4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <check_fs+0x82>
 80046ca:	2300      	movs	r3, #0
 80046cc:	e00c      	b.n	80046e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3334      	adds	r3, #52	; 0x34
 80046d2:	3352      	adds	r3, #82	; 0x52
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff febb 	bl	8004450 <ld_dword>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <check_fs+0xa8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <check_fs+0x9a>
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80046e6:	2302      	movs	r3, #2
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	00544146 	.word	0x00544146
 80046f4:	33544146 	.word	0x33544146

080046f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b096      	sub	sp, #88	; 0x58
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff ff58 	bl	80045c2 <get_ldnumber>
 8004712:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004716:	2b00      	cmp	r3, #0
 8004718:	da01      	bge.n	800471e <find_volume+0x26>
 800471a:	230b      	movs	r3, #11
 800471c:	e262      	b.n	8004be4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800471e:	4a9f      	ldr	r2, [pc, #636]	; (800499c <find_volume+0x2a4>)
 8004720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <find_volume+0x3a>
 800472e:	230c      	movs	r3, #12
 8004730:	e258      	b.n	8004be4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004736:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01a      	beq.n	800477e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fdc9 	bl	80042e4 <disk_status>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10c      	bne.n	800477e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <find_volume+0x82>
 800476a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004776:	230a      	movs	r3, #10
 8004778:	e234      	b.n	8004be4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800477a:	2300      	movs	r3, #0
 800477c:	e232      	b.n	8004be4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	b2da      	uxtb	r2, r3
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fdc1 	bl	8004318 <disk_initialize>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800479c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80047a8:	2303      	movs	r3, #3
 80047aa:	e21b      	b.n	8004be4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <find_volume+0xca>
 80047b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80047be:	230a      	movs	r3, #10
 80047c0:	e210      	b.n	8004be4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	7858      	ldrb	r0, [r3, #1]
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	330c      	adds	r3, #12
 80047ca:	461a      	mov	r2, r3
 80047cc:	2102      	movs	r1, #2
 80047ce:	f7ff fe09 	bl	80043e4 <disk_ioctl>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <find_volume+0xe4>
 80047d8:	2301      	movs	r3, #1
 80047da:	e203      	b.n	8004be4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	899b      	ldrh	r3, [r3, #12]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d80d      	bhi.n	8004802 <find_volume+0x10a>
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	899b      	ldrh	r3, [r3, #12]
 80047ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ee:	d308      	bcc.n	8004802 <find_volume+0x10a>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	899b      	ldrh	r3, [r3, #12]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	899b      	ldrh	r3, [r3, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <find_volume+0x10e>
 8004802:	2301      	movs	r3, #1
 8004804:	e1ee      	b.n	8004be4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800480a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800480c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800480e:	f7ff ff1d 	bl	800464c <check_fs>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800481c:	2b02      	cmp	r3, #2
 800481e:	d149      	bne.n	80048b4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004820:	2300      	movs	r3, #0
 8004822:	643b      	str	r3, [r7, #64]	; 0x40
 8004824:	e01e      	b.n	8004864 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004834:	4413      	add	r3, r2
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	3304      	adds	r3, #4
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <find_volume+0x158>
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	3308      	adds	r3, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fe02 	bl	8004450 <ld_dword>
 800484c:	4602      	mov	r2, r0
 800484e:	e000      	b.n	8004852 <find_volume+0x15a>
 8004850:	2200      	movs	r2, #0
 8004852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	3358      	adds	r3, #88	; 0x58
 8004858:	443b      	add	r3, r7
 800485a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800485e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004860:	3301      	adds	r3, #1
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
 8004864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004866:	2b03      	cmp	r3, #3
 8004868:	d9dd      	bls.n	8004826 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800486a:	2300      	movs	r3, #0
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800486e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <find_volume+0x182>
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	3b01      	subs	r3, #1
 8004878:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800487a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	3358      	adds	r3, #88	; 0x58
 8004880:	443b      	add	r3, r7
 8004882:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004886:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <find_volume+0x1a2>
 800488e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004892:	f7ff fedb 	bl	800464c <check_fs>
 8004896:	4603      	mov	r3, r0
 8004898:	e000      	b.n	800489c <find_volume+0x1a4>
 800489a:	2303      	movs	r3, #3
 800489c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80048a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d905      	bls.n	80048b4 <find_volume+0x1bc>
 80048a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048aa:	3301      	adds	r3, #1
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
 80048ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d9e2      	bls.n	800487a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80048b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d101      	bne.n	80048c0 <find_volume+0x1c8>
 80048bc:	2301      	movs	r3, #1
 80048be:	e191      	b.n	8004be4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80048c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d901      	bls.n	80048cc <find_volume+0x1d4>
 80048c8:	230d      	movs	r3, #13
 80048ca:	e18b      	b.n	8004be4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	3334      	adds	r3, #52	; 0x34
 80048d0:	330b      	adds	r3, #11
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fda4 	bl	8004420 <ld_word>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	899b      	ldrh	r3, [r3, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <find_volume+0x1f0>
 80048e4:	230d      	movs	r3, #13
 80048e6:	e17d      	b.n	8004be4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80048e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ea:	3334      	adds	r3, #52	; 0x34
 80048ec:	3316      	adds	r3, #22
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fd96 	bl	8004420 <ld_word>
 80048f4:	4603      	mov	r3, r0
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <find_volume+0x214>
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	3334      	adds	r3, #52	; 0x34
 8004902:	3324      	adds	r3, #36	; 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fda3 	bl	8004450 <ld_dword>
 800490a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004910:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	789b      	ldrb	r3, [r3, #2]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d005      	beq.n	8004930 <find_volume+0x238>
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	789b      	ldrb	r3, [r3, #2]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d001      	beq.n	8004930 <find_volume+0x238>
 800492c:	230d      	movs	r3, #13
 800492e:	e159      	b.n	8004be4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	789b      	ldrb	r3, [r3, #2]
 8004934:	461a      	mov	r2, r3
 8004936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004944:	b29a      	uxth	r2, r3
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	895b      	ldrh	r3, [r3, #10]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <find_volume+0x26c>
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	895b      	ldrh	r3, [r3, #10]
 8004956:	461a      	mov	r2, r3
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	895b      	ldrh	r3, [r3, #10]
 800495c:	3b01      	subs	r3, #1
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <find_volume+0x270>
 8004964:	230d      	movs	r3, #13
 8004966:	e13d      	b.n	8004be4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	3334      	adds	r3, #52	; 0x34
 800496c:	3311      	adds	r3, #17
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fd56 	bl	8004420 <ld_word>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	891b      	ldrh	r3, [r3, #8]
 8004980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004982:	8992      	ldrh	r2, [r2, #12]
 8004984:	0952      	lsrs	r2, r2, #5
 8004986:	b292      	uxth	r2, r2
 8004988:	fbb3 f1f2 	udiv	r1, r3, r2
 800498c:	fb01 f202 	mul.w	r2, r1, r2
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <find_volume+0x2a8>
 8004998:	230d      	movs	r3, #13
 800499a:	e123      	b.n	8004be4 <find_volume+0x4ec>
 800499c:	20001290 	.word	0x20001290

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	3334      	adds	r3, #52	; 0x34
 80049a4:	3313      	adds	r3, #19
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fd3a 	bl	8004420 <ld_word>
 80049ac:	4603      	mov	r3, r0
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80049b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <find_volume+0x2cc>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	3334      	adds	r3, #52	; 0x34
 80049ba:	3320      	adds	r3, #32
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fd47 	bl	8004450 <ld_dword>
 80049c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	3334      	adds	r3, #52	; 0x34
 80049c8:	330e      	adds	r3, #14
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fd28 	bl	8004420 <ld_word>
 80049d0:	4603      	mov	r3, r0
 80049d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80049d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <find_volume+0x2e6>
 80049da:	230d      	movs	r3, #13
 80049dc:	e102      	b.n	8004be4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80049de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	4413      	add	r3, r2
 80049e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e6:	8911      	ldrh	r1, [r2, #8]
 80049e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ea:	8992      	ldrh	r2, [r2, #12]
 80049ec:	0952      	lsrs	r2, r2, #5
 80049ee:	b292      	uxth	r2, r2
 80049f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80049f4:	b292      	uxth	r2, r2
 80049f6:	4413      	add	r3, r2
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80049fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d201      	bcs.n	8004a06 <find_volume+0x30e>
 8004a02:	230d      	movs	r3, #13
 8004a04:	e0ee      	b.n	8004be4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0e:	8952      	ldrh	r2, [r2, #10]
 8004a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <find_volume+0x328>
 8004a1c:	230d      	movs	r3, #13
 8004a1e:	e0e1      	b.n	8004be4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8004a20:	2303      	movs	r3, #3
 8004a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d802      	bhi.n	8004a36 <find_volume+0x33e>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d802      	bhi.n	8004a46 <find_volume+0x34e>
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a52:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004a54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	441a      	add	r2, r3
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8004a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	441a      	add	r2, r3
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8004a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d11e      	bne.n	8004aae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	3334      	adds	r3, #52	; 0x34
 8004a74:	332a      	adds	r3, #42	; 0x2a
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fcd2 	bl	8004420 <ld_word>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <find_volume+0x38e>
 8004a82:	230d      	movs	r3, #13
 8004a84:	e0ae      	b.n	8004be4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	891b      	ldrh	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <find_volume+0x39a>
 8004a8e:	230d      	movs	r3, #13
 8004a90:	e0a8      	b.n	8004be4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	3334      	adds	r3, #52	; 0x34
 8004a96:	332c      	adds	r3, #44	; 0x2c
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fcd9 	bl	8004450 <ld_dword>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004aac:	e01f      	b.n	8004aee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	891b      	ldrh	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <find_volume+0x3c2>
 8004ab6:	230d      	movs	r3, #13
 8004ab8:	e094      	b.n	8004be4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	441a      	add	r2, r3
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004ac6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d103      	bne.n	8004ad6 <find_volume+0x3de>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	e00a      	b.n	8004aec <find_volume+0x3f4>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	4613      	mov	r3, r2
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4413      	add	r3, r2
 8004ae0:	085a      	lsrs	r2, r3, #1
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	899b      	ldrh	r3, [r3, #12]
 8004af6:	4619      	mov	r1, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afa:	440b      	add	r3, r1
 8004afc:	3b01      	subs	r3, #1
 8004afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b00:	8989      	ldrh	r1, [r1, #12]
 8004b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d201      	bcs.n	8004b0e <find_volume+0x416>
 8004b0a:	230d      	movs	r3, #13
 8004b0c:	e06a      	b.n	8004be4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	f04f 32ff 	mov.w	r2, #4294967295
 8004b14:	615a      	str	r2, [r3, #20]
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d149      	bne.n	8004bc0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	3334      	adds	r3, #52	; 0x34
 8004b30:	3330      	adds	r3, #48	; 0x30
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fc74 	bl	8004420 <ld_word>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d140      	bne.n	8004bc0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	3301      	adds	r3, #1
 8004b42:	4619      	mov	r1, r3
 8004b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b46:	f7ff fd0f 	bl	8004568 <move_window>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d137      	bne.n	8004bc0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	2200      	movs	r2, #0
 8004b54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	3334      	adds	r3, #52	; 0x34
 8004b5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fc5e 	bl	8004420 <ld_word>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d127      	bne.n	8004bc0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	3334      	adds	r3, #52	; 0x34
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fc6b 	bl	8004450 <ld_dword>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <find_volume+0x4f4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d11e      	bne.n	8004bc0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	3334      	adds	r3, #52	; 0x34
 8004b86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fc60 	bl	8004450 <ld_dword>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <find_volume+0x4f8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d113      	bne.n	8004bc0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	3334      	adds	r3, #52	; 0x34
 8004b9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fc55 	bl	8004450 <ld_dword>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	3334      	adds	r3, #52	; 0x34
 8004bb0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fc4b 	bl	8004450 <ld_dword>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004bc6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <find_volume+0x4fc>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <find_volume+0x4fc>)
 8004bd2:	801a      	strh	r2, [r3, #0]
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <find_volume+0x4fc>)
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bde:	f7ff fc5b 	bl	8004498 <clear_lock>
#endif
	return FR_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3758      	adds	r7, #88	; 0x58
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	41615252 	.word	0x41615252
 8004bf0:	61417272 	.word	0x61417272
 8004bf4:	20001294 	.word	0x20001294

08004bf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004c0a:	f107 0310 	add.w	r3, r7, #16
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fcd7 	bl	80045c2 <get_ldnumber>
 8004c14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da01      	bge.n	8004c20 <f_mount+0x28>
 8004c1c:	230b      	movs	r3, #11
 8004c1e:	e02b      	b.n	8004c78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004c20:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <f_mount+0x88>)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004c30:	69b8      	ldr	r0, [r7, #24]
 8004c32:	f7ff fc31 	bl	8004498 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	490d      	ldr	r1, [pc, #52]	; (8004c80 <f_mount+0x88>)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <f_mount+0x66>
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d001      	beq.n	8004c62 <f_mount+0x6a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e00a      	b.n	8004c78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004c62:	f107 010c 	add.w	r1, r7, #12
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fd43 	bl	80046f8 <find_volume>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20001290 	.word	0x20001290

08004c84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004c9a:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004c9c:	7a5b      	ldrb	r3, [r3, #9]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d131      	bne.n	8004d08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004ca6:	7a5b      	ldrb	r3, [r3, #9]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004cb2:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004cb4:	7a5b      	ldrb	r3, [r3, #9]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004cc4:	7a5b      	ldrb	r3, [r3, #9]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	79fa      	ldrb	r2, [r7, #7]
 8004cd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004cd4:	7a5b      	ldrb	r3, [r3, #9]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	b2d1      	uxtb	r1, r2
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <FATFS_LinkDriverEx+0x94>)
 8004cde:	7251      	strb	r1, [r2, #9]
 8004ce0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004ce2:	7dbb      	ldrb	r3, [r7, #22]
 8004ce4:	3330      	adds	r3, #48	; 0x30
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	223a      	movs	r2, #58	; 0x3a
 8004cf2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	222f      	movs	r2, #47	; 0x2f
 8004cfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3303      	adds	r3, #3
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	200012b8 	.word	0x200012b8

08004d1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ffaa 	bl	8004c84 <FATFS_LinkDriverEx>
 8004d30:	4603      	mov	r3, r0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <__libc_init_array>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	4d0d      	ldr	r5, [pc, #52]	; (8004d74 <__libc_init_array+0x38>)
 8004d40:	4c0d      	ldr	r4, [pc, #52]	; (8004d78 <__libc_init_array+0x3c>)
 8004d42:	1b64      	subs	r4, r4, r5
 8004d44:	10a4      	asrs	r4, r4, #2
 8004d46:	2600      	movs	r6, #0
 8004d48:	42a6      	cmp	r6, r4
 8004d4a:	d109      	bne.n	8004d60 <__libc_init_array+0x24>
 8004d4c:	4d0b      	ldr	r5, [pc, #44]	; (8004d7c <__libc_init_array+0x40>)
 8004d4e:	4c0c      	ldr	r4, [pc, #48]	; (8004d80 <__libc_init_array+0x44>)
 8004d50:	f000 f820 	bl	8004d94 <_init>
 8004d54:	1b64      	subs	r4, r4, r5
 8004d56:	10a4      	asrs	r4, r4, #2
 8004d58:	2600      	movs	r6, #0
 8004d5a:	42a6      	cmp	r6, r4
 8004d5c:	d105      	bne.n	8004d6a <__libc_init_array+0x2e>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d64:	4798      	blx	r3
 8004d66:	3601      	adds	r6, #1
 8004d68:	e7ee      	b.n	8004d48 <__libc_init_array+0xc>
 8004d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6e:	4798      	blx	r3
 8004d70:	3601      	adds	r6, #1
 8004d72:	e7f2      	b.n	8004d5a <__libc_init_array+0x1e>
 8004d74:	080051c4 	.word	0x080051c4
 8004d78:	080051c4 	.word	0x080051c4
 8004d7c:	080051c4 	.word	0x080051c4
 8004d80:	080051c8 	.word	0x080051c8

08004d84 <memset>:
 8004d84:	4402      	add	r2, r0
 8004d86:	4603      	mov	r3, r0
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d100      	bne.n	8004d8e <memset+0xa>
 8004d8c:	4770      	bx	lr
 8004d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d92:	e7f9      	b.n	8004d88 <memset+0x4>

08004d94 <_init>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr

08004da0 <_fini>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr
