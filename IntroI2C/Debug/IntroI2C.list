
IntroI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f44  08001f44  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001f44  08001f44  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f44  08001f44  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f44  08001f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f48  08001f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200000a8  08001ff0  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001ff0  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030ac  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bb5  00000000  00000000  0002317a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00023d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000218  00000000  00000000  00023fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f966  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000349d  00000000  00000000  00033b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055320  00000000  00000000  00036fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c2fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c68  00000000  00000000  0008c34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ec4 	.word	0x08001ec4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08001ec4 	.word	0x08001ec4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
void initSystem(void);

/**
 * Función principal del programa
 */
int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	// Se inicializa la configuración
	initSystem();
 8000286:	f000 f8b1 	bl	80003ec <initSystem>
	writeMsg(&handlerCommTerminal, bufferData);
 800028a:	4950      	ldr	r1, [pc, #320]	; (80003cc <main+0x14c>)
 800028c:	4850      	ldr	r0, [pc, #320]	; (80003d0 <main+0x150>)
 800028e:	f001 f8bf 	bl	8001410 <writeMsg>

	/* Ciclo principal del programa */
	while(1){
		// Hacemos un "eco" con el valor que nos llega por el serial
		if (rxData != '\0'){
 8000292:	4b50      	ldr	r3, [pc, #320]	; (80003d4 <main+0x154>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x12>
			writeChar(&handlerCommTerminal, rxData);
 800029a:	4b4e      	ldr	r3, [pc, #312]	; (80003d4 <main+0x154>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	484b      	ldr	r0, [pc, #300]	; (80003d0 <main+0x150>)
 80002a2:	f001 f887 	bl	80013b4 <writeChar>

			if (rxData == 'd'){
 80002a6:	4b4b      	ldr	r3, [pc, #300]	; (80003d4 <main+0x154>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b64      	cmp	r3, #100	; 0x64
 80002ac:	d116      	bne.n	80002dc <main+0x5c>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, WHO_AM_I);
 80002ae:	2175      	movs	r1, #117	; 0x75
 80002b0:	4849      	ldr	r0, [pc, #292]	; (80003d8 <main+0x158>)
 80002b2:	f000 fdc2 	bl	8000e3a <I2C_readByte>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b48      	ldr	r3, [pc, #288]	; (80003dc <main+0x15c>)
 80002bc:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002be:	4b47      	ldr	r3, [pc, #284]	; (80003dc <main+0x15c>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4946      	ldr	r1, [pc, #280]	; (80003e0 <main+0x160>)
 80002c6:	4841      	ldr	r0, [pc, #260]	; (80003cc <main+0x14c>)
 80002c8:	f001 f990 	bl	80015ec <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80002cc:	493f      	ldr	r1, [pc, #252]	; (80003cc <main+0x14c>)
 80002ce:	4840      	ldr	r0, [pc, #256]	; (80003d0 <main+0x150>)
 80002d0:	f001 f89e 	bl	8001410 <writeMsg>
				rxData = '\0';
 80002d4:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <main+0x154>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e7da      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'p'){
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <main+0x154>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b70      	cmp	r3, #112	; 0x70
 80002e2:	d116      	bne.n	8000312 <main+0x92>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, PWR_CTL);
 80002e4:	216b      	movs	r1, #107	; 0x6b
 80002e6:	483c      	ldr	r0, [pc, #240]	; (80003d8 <main+0x158>)
 80002e8:	f000 fda7 	bl	8000e3a <I2C_readByte>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b3a      	ldr	r3, [pc, #232]	; (80003dc <main+0x15c>)
 80002f2:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <main+0x15c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	4939      	ldr	r1, [pc, #228]	; (80003e0 <main+0x160>)
 80002fc:	4833      	ldr	r0, [pc, #204]	; (80003cc <main+0x14c>)
 80002fe:	f001 f975 	bl	80015ec <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000302:	4932      	ldr	r1, [pc, #200]	; (80003cc <main+0x14c>)
 8000304:	4832      	ldr	r0, [pc, #200]	; (80003d0 <main+0x150>)
 8000306:	f001 f883 	bl	8001410 <writeMsg>
				rxData = '\0';
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <main+0x154>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e7bf      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'r'){
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <main+0x154>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b72      	cmp	r3, #114	; 0x72
 8000318:	d108      	bne.n	800032c <main+0xac>
				I2C_writeByte(&handlerAccelerometer, PWR_CTL, 0x00);
 800031a:	2200      	movs	r2, #0
 800031c:	216b      	movs	r1, #107	; 0x6b
 800031e:	482e      	ldr	r0, [pc, #184]	; (80003d8 <main+0x158>)
 8000320:	f000 fdb6 	bl	8000e90 <I2C_writeByte>
				rxData = '\0';
 8000324:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <main+0x154>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e7b2      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'x'){
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <main+0x154>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b78      	cmp	r3, #120	; 0x78
 8000332:	d121      	bne.n	8000378 <main+0xf8>
				uint8_t	AccelX_low = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_L);
 8000334:	213c      	movs	r1, #60	; 0x3c
 8000336:	4828      	ldr	r0, [pc, #160]	; (80003d8 <main+0x158>)
 8000338:	f000 fd7f 	bl	8000e3a <I2C_readByte>
 800033c:	4603      	mov	r3, r0
 800033e:	70fb      	strb	r3, [r7, #3]
				uint8_t AccelX_high = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_H);
 8000340:	213b      	movs	r1, #59	; 0x3b
 8000342:	4825      	ldr	r0, [pc, #148]	; (80003d8 <main+0x158>)
 8000344:	f000 fd79 	bl	8000e3a <I2C_readByte>
 8000348:	4603      	mov	r3, r0
 800034a:	70bb      	strb	r3, [r7, #2]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	b21a      	sxth	r2, r3
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	b21b      	sxth	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	803b      	strh	r3, [r7, #0]
				sprintf(bufferData,"AccelX = %d \n", (int) AccelX);
 800035a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800035e:	461a      	mov	r2, r3
 8000360:	4920      	ldr	r1, [pc, #128]	; (80003e4 <main+0x164>)
 8000362:	481a      	ldr	r0, [pc, #104]	; (80003cc <main+0x14c>)
 8000364:	f001 f942 	bl	80015ec <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000368:	4918      	ldr	r1, [pc, #96]	; (80003cc <main+0x14c>)
 800036a:	4819      	ldr	r0, [pc, #100]	; (80003d0 <main+0x150>)
 800036c:	f001 f850 	bl	8001410 <writeMsg>
				rxData = '\0';
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <main+0x154>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	e78c      	b.n	8000292 <main+0x12>
			}
			else if (rxData == 'y'){
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <main+0x154>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b79      	cmp	r3, #121	; 0x79
 800037e:	d121      	bne.n	80003c4 <main+0x144>
				uint8_t	AccelY_low = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_L);
 8000380:	213e      	movs	r1, #62	; 0x3e
 8000382:	4815      	ldr	r0, [pc, #84]	; (80003d8 <main+0x158>)
 8000384:	f000 fd59 	bl	8000e3a <I2C_readByte>
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
				uint8_t AccelY_high = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_H);
 800038c:	213d      	movs	r1, #61	; 0x3d
 800038e:	4812      	ldr	r0, [pc, #72]	; (80003d8 <main+0x158>)
 8000390:	f000 fd53 	bl	8000e3a <I2C_readByte>
 8000394:	4603      	mov	r3, r0
 8000396:	71bb      	strb	r3, [r7, #6]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	b21a      	sxth	r2, r3
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	b21b      	sxth	r3, r3
 80003a2:	4313      	orrs	r3, r2
 80003a4:	80bb      	strh	r3, [r7, #4]
				sprintf(bufferData,"AccelY = %d \n", (int) AccelY);
 80003a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003aa:	461a      	mov	r2, r3
 80003ac:	490e      	ldr	r1, [pc, #56]	; (80003e8 <main+0x168>)
 80003ae:	4807      	ldr	r0, [pc, #28]	; (80003cc <main+0x14c>)
 80003b0:	f001 f91c 	bl	80015ec <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80003b4:	4905      	ldr	r1, [pc, #20]	; (80003cc <main+0x14c>)
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <main+0x150>)
 80003b8:	f001 f82a 	bl	8001410 <writeMsg>
				rxData = '\0';
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <main+0x154>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
 80003c2:	e766      	b.n	8000292 <main+0x12>
			}
			else {
				rxData = '\0';
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <main+0x154>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 80003ca:	e762      	b.n	8000292 <main+0x12>
 80003cc:	20000000 	.word	0x20000000
 80003d0:	200000f8 	.word	0x200000f8
 80003d4:	20000184 	.word	0x20000184
 80003d8:	200001a0 	.word	0x200001a0
 80003dc:	200001a8 	.word	0x200001a8
 80003e0:	08001edc 	.word	0x08001edc
 80003e4:	08001ef0 	.word	0x08001ef0
 80003e8:	08001f00 	.word	0x08001f00

080003ec <initSystem>:
		}
	}
	return 0;
}

void initSystem(void){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

	/* Configuración del State LED */
	handlerStateLED.pGPIOx 								= GPIOA;
 80003f0:	4b55      	ldr	r3, [pc, #340]	; (8000548 <initSystem+0x15c>)
 80003f2:	4a56      	ldr	r2, [pc, #344]	; (800054c <initSystem+0x160>)
 80003f4:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80003f6:	4b54      	ldr	r3, [pc, #336]	; (8000548 <initSystem+0x15c>)
 80003f8:	2205      	movs	r2, #5
 80003fa:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;		// Se configura el PIN en modo OUTPUT
 80003fc:	4b52      	ldr	r3, [pc, #328]	; (8000548 <initSystem+0x15c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;	// Se define el OUTPUT TYPE como Push-Pull, para poder hacer el blinky
 8000402:	4b51      	ldr	r3, [pc, #324]	; (8000548 <initSystem+0x15c>)
 8000404:	2200      	movs	r2, #0
 8000406:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;	// Se configura el OUTPUT con una velocidad MEDIUM
 8000408:	4b4f      	ldr	r3, [pc, #316]	; (8000548 <initSystem+0x15c>)
 800040a:	2201      	movs	r2, #1
 800040c:	719a      	strb	r2, [r3, #6]
	// Se carga la configuración del State LED
	GPIO_Config(&handlerStateLED);
 800040e:	484e      	ldr	r0, [pc, #312]	; (8000548 <initSystem+0x15c>)
 8000410:	f000 fa7a 	bl	8000908 <GPIO_Config>

	/* Configurando los pines sobre los que funciona el USART */
	handlerPinTX.pGPIOx								= GPIOA;
 8000414:	4b4e      	ldr	r3, [pc, #312]	; (8000550 <initSystem+0x164>)
 8000416:	4a4d      	ldr	r2, [pc, #308]	; (800054c <initSystem+0x160>)
 8000418:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 800041a:	4b4d      	ldr	r3, [pc, #308]	; (8000550 <initSystem+0x164>)
 800041c:	2202      	movs	r2, #2
 800041e:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000420:	4b4b      	ldr	r3, [pc, #300]	; (8000550 <initSystem+0x164>)
 8000422:	2202      	movs	r2, #2
 8000424:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000426:	4b4a      	ldr	r3, [pc, #296]	; (8000550 <initSystem+0x164>)
 8000428:	2200      	movs	r2, #0
 800042a:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800042c:	4b48      	ldr	r3, [pc, #288]	; (8000550 <initSystem+0x164>)
 800042e:	2200      	movs	r2, #0
 8000430:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8000432:	4b47      	ldr	r3, [pc, #284]	; (8000550 <initSystem+0x164>)
 8000434:	2202      	movs	r2, #2
 8000436:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <initSystem+0x164>)
 800043a:	2207      	movs	r2, #7
 800043c:	725a      	strb	r2, [r3, #9]

	// Llamamos a la función config, para que se encargue de cargar las configuración en los registros adecuados
	GPIO_Config(&handlerPinTX);
 800043e:	4844      	ldr	r0, [pc, #272]	; (8000550 <initSystem+0x164>)
 8000440:	f000 fa62 	bl	8000908 <GPIO_Config>


	/* Configurando los pines sobre los que funciona el USART */
	handlerPinRX.pGPIOx								= GPIOA;
 8000444:	4b43      	ldr	r3, [pc, #268]	; (8000554 <initSystem+0x168>)
 8000446:	4a41      	ldr	r2, [pc, #260]	; (800054c <initSystem+0x160>)
 8000448:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 800044a:	4b42      	ldr	r3, [pc, #264]	; (8000554 <initSystem+0x168>)
 800044c:	2203      	movs	r2, #3
 800044e:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000450:	4b40      	ldr	r3, [pc, #256]	; (8000554 <initSystem+0x168>)
 8000452:	2202      	movs	r2, #2
 8000454:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000456:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <initSystem+0x168>)
 8000458:	2200      	movs	r2, #0
 800045a:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800045c:	4b3d      	ldr	r3, [pc, #244]	; (8000554 <initSystem+0x168>)
 800045e:	2200      	movs	r2, #0
 8000460:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8000462:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <initSystem+0x168>)
 8000464:	2202      	movs	r2, #2
 8000466:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 8000468:	4b3a      	ldr	r3, [pc, #232]	; (8000554 <initSystem+0x168>)
 800046a:	2207      	movs	r2, #7
 800046c:	725a      	strb	r2, [r3, #9]

	// Llamamos a la función config, para que se encargue de cargar las configuración en los registros adecuados
	GPIO_Config(&handlerPinRX);
 800046e:	4839      	ldr	r0, [pc, #228]	; (8000554 <initSystem+0x168>)
 8000470:	f000 fa4a 	bl	8000908 <GPIO_Config>

	/* Configuramos la comunicación serial */
	handlerCommTerminal.ptrUSARTx						= USART2;
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <initSystem+0x16c>)
 8000476:	4a39      	ldr	r2, [pc, #228]	; (800055c <initSystem+0x170>)
 8000478:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <initSystem+0x16c>)
 800047c:	2200      	movs	r2, #0
 800047e:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity		= USART_PARITY_NONE;
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <initSystem+0x16c>)
 8000482:	2200      	movs	r2, #0
 8000484:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits		= USART_STOPBIT_1;
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <initSystem+0x16c>)
 8000488:	2200      	movs	r2, #0
 800048a:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <initSystem+0x16c>)
 800048e:	2202      	movs	r2, #2
 8000490:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_mode			= USART_MODE_RXTX;
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <initSystem+0x16c>)
 8000494:	2202      	movs	r2, #2
 8000496:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_interrupt	= USART_INTERRUPT_RX;
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <initSystem+0x16c>)
 800049a:	2201      	movs	r2, #1
 800049c:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerCommTerminal);
 800049e:	482e      	ldr	r0, [pc, #184]	; (8000558 <initSystem+0x16c>)
 80004a0:	f000 fdec 	bl	800107c <USART_Config>

	/* Configuramos el Timer */
	handlerStateLEDTimer.ptrTIMx					= TIM2;
 80004a4:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <initSystem+0x174>)
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004aa:	601a      	str	r2, [r3, #0]
	handlerStateLEDTimer.timerConfig.Timer_mode		= TIMER_MODE_UP;
 80004ac:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <initSystem+0x174>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	711a      	strb	r2, [r3, #4]
	handlerStateLEDTimer.timerConfig.Timer_speed	= TIMER_INCR_SPEED_100us;
 80004b2:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <initSystem+0x174>)
 80004b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80004b8:	80da      	strh	r2, [r3, #6]
	handlerStateLEDTimer.timerConfig.Timer_period	= 2500;
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <initSystem+0x174>)
 80004bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80004c0:	609a      	str	r2, [r3, #8]

	BTimer_Config(&handlerStateLEDTimer);
 80004c2:	4827      	ldr	r0, [pc, #156]	; (8000560 <initSystem+0x174>)
 80004c4:	f000 f91a 	bl	80006fc <BTimer_Config>

	/* Llamamos a la función para configurar y activar el SysTick */
	config_SysTickMs();
 80004c8:	f000 fd1e 	bl	8000f08 <config_SysTickMs>

	/* Configurando los pines sobre los que funciona el I2C1 */
	handlerI2CSCL.pGPIOx								= GPIOB;
 80004cc:	4b25      	ldr	r3, [pc, #148]	; (8000564 <initSystem+0x178>)
 80004ce:	4a26      	ldr	r2, [pc, #152]	; (8000568 <initSystem+0x17c>)
 80004d0:	601a      	str	r2, [r3, #0]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <initSystem+0x178>)
 80004d4:	2206      	movs	r2, #6
 80004d6:	711a      	strb	r2, [r3, #4]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80004d8:	4b22      	ldr	r3, [pc, #136]	; (8000564 <initSystem+0x178>)
 80004da:	2202      	movs	r2, #2
 80004dc:	715a      	strb	r2, [r3, #5]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <initSystem+0x178>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	721a      	strb	r2, [r3, #8]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <initSystem+0x178>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	71da      	strb	r2, [r3, #7]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <initSystem+0x178>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	719a      	strb	r2, [r3, #6]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <initSystem+0x178>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSCL);
 80004f6:	481b      	ldr	r0, [pc, #108]	; (8000564 <initSystem+0x178>)
 80004f8:	f000 fa06 	bl	8000908 <GPIO_Config>

	/* Configurando los pines sobre los que funciona el I2C1 */
	handlerI2CSDA.pGPIOx								= GPIOB;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <initSystem+0x180>)
 80004fe:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <initSystem+0x17c>)
 8000500:	601a      	str	r2, [r3, #0]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <initSystem+0x180>)
 8000504:	2207      	movs	r2, #7
 8000506:	711a      	strb	r2, [r3, #4]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <initSystem+0x180>)
 800050a:	2202      	movs	r2, #2
 800050c:	715a      	strb	r2, [r3, #5]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <initSystem+0x180>)
 8000510:	2201      	movs	r2, #1
 8000512:	721a      	strb	r2, [r3, #8]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <initSystem+0x180>)
 8000516:	2201      	movs	r2, #1
 8000518:	71da      	strb	r2, [r3, #7]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <initSystem+0x180>)
 800051c:	2202      	movs	r2, #2
 800051e:	719a      	strb	r2, [r3, #6]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <initSystem+0x180>)
 8000522:	2204      	movs	r2, #4
 8000524:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSDA);
 8000526:	4811      	ldr	r0, [pc, #68]	; (800056c <initSystem+0x180>)
 8000528:	f000 f9ee 	bl	8000908 <GPIO_Config>

	handlerAccelerometer.ptrI2Cx		= I2C1;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <initSystem+0x184>)
 800052e:	4a11      	ldr	r2, [pc, #68]	; (8000574 <initSystem+0x188>)
 8000530:	601a      	str	r2, [r3, #0]
	handlerAccelerometer.modeI2C		= I2C_MODE_FM;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <initSystem+0x184>)
 8000534:	2201      	movs	r2, #1
 8000536:	715a      	strb	r2, [r3, #5]
	handlerAccelerometer.slaveAddress	= 0b1101000;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <initSystem+0x184>)
 800053a:	2268      	movs	r2, #104	; 0x68
 800053c:	711a      	strb	r2, [r3, #4]
	I2C_Config(&handlerAccelerometer);
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <initSystem+0x184>)
 8000540:	f000 fb0a 	bl	8000b58 <I2C_Config>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000c4 	.word	0x200000c4
 800054c:	40020000 	.word	0x40020000
 8000550:	200000d0 	.word	0x200000d0
 8000554:	200000dc 	.word	0x200000dc
 8000558:	200000f8 	.word	0x200000f8
 800055c:	40004400 	.word	0x40004400
 8000560:	200000e8 	.word	0x200000e8
 8000564:	20000194 	.word	0x20000194
 8000568:	40020400 	.word	0x40020400
 800056c:	20000188 	.word	0x20000188
 8000570:	200001a0 	.word	0x200001a0
 8000574:	40005400 	.word	0x40005400

08000578 <Usart2_RX_Callback>:

/* Callback para la recepción del USART2 */

void Usart2_RX_Callback(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	rxData = getRxData();
 800057c:	f000 ff60 	bl	8001440 <getRxData>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b01      	ldr	r3, [pc, #4]	; (800058c <Usart2_RX_Callback+0x14>)
 8000586:	701a      	strb	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000184 	.word	0x20000184

08000590 <BTimer2_Callback>:

/**/
void BTimer2_Callback(void){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx->ODR ^= GPIO_ODR_OD5;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <BTimer2_Callback+0x1c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <BTimer2_Callback+0x1c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f082 0220 	eor.w	r2, r2, #32
 80005a2:	615a      	str	r2, [r3, #20]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	200000c4 	.word	0x200000c4

080005b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <_sbrk+0x5c>)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <_sbrk+0x60>)
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <_sbrk+0x64>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <_sbrk+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e0:	f000 ffda 	bl	8001598 <__errno>
 80005e4:	4603      	mov	r3, r0
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e009      	b.n	8000604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <_sbrk+0x64>)
 8000600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20020000 	.word	0x20020000
 8000610:	00000400 	.word	0x00000400
 8000614:	200001ac 	.word	0x200001ac
 8000618:	200001d8 	.word	0x200001d8

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 ffab 	bl	80015a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fe17 	bl	8000280 <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000660:	08001f4c 	.word	0x08001f4c
  ldr r2, =_sbss
 8000664:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000668:	200001d4 	.word	0x200001d4

0800066c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	; (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <BTimer_Config>:

/*
 * Función que configura un Timer básico para que genere interrupcines de forma periódica
 */

void BTimer_Config(BTIMER_Handler_t *ptrTimerConfig){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrTimerConfig->ptrTIMx;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a53      	ldr	r2, [pc, #332]	; (8000858 <BTimer_Config+0x15c>)
 800070a:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 1. Activar la señal de reloj para el periferico especifico */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000718:	d106      	bne.n	8000728 <BTimer_Config+0x2c>
		// Activamos la señal del TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <BTimer_Config+0x160>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <BTimer_Config+0x160>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	e022      	b.n	800076e <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a4c      	ldr	r2, [pc, #304]	; (8000860 <BTimer_Config+0x164>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <BTimer_Config+0x44>
		// Activamos la señal del TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <BTimer_Config+0x160>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <BTimer_Config+0x160>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	e016      	b.n	800076e <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a47      	ldr	r2, [pc, #284]	; (8000864 <BTimer_Config+0x168>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <BTimer_Config+0x5c>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <BTimer_Config+0x160>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a43      	ldr	r2, [pc, #268]	; (800085c <BTimer_Config+0x160>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	e00a      	b.n	800076e <BTimer_Config+0x72>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a42      	ldr	r2, [pc, #264]	; (8000868 <BTimer_Config+0x16c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d105      	bne.n	800076e <BTimer_Config+0x72>
		// Activamos la señal del TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000762:	4b3e      	ldr	r3, [pc, #248]	; (800085c <BTimer_Config+0x160>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a3d      	ldr	r2, [pc, #244]	; (800085c <BTimer_Config+0x160>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuramos el modo del timer (UP or DOWN) */
	if (ptrTimerConfig->timerConfig.Timer_mode == TIMER_MODE_UP){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10c      	bne.n	8000790 <BTimer_Config+0x94>
		// Configuramos el timer en modo UP
		ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f022 0210 	bic.w	r2, r2, #16
 8000784:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
 800078e:	e00d      	b.n	80007ac <BTimer_Config+0xb0>
	} else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0210 	orr.w	r2, r2, #16
 800079e:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) el valor del periodo
		ptrTimerConfig->ptrTIMx->CNT = ptrTimerConfig->timerConfig.Timer_period -1;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3a01      	subs	r2, #1
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig->ptrTIMx->PSC = ptrTimerConfig->timerConfig.Timer_speed -1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	88db      	ldrh	r3, [r3, #6]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig->ptrTIMx->ARR = ptrTimerConfig->timerConfig.Timer_period -1;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3a01      	subs	r2, #1
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse */
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0201 	orr.w	r2, r2, #1
 80007d2:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupcion debida a un "update event" */
	ptrTimerConfig->ptrTIMx->DIER |= TIM_DIER_UIE;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f042 0201 	orr.w	r2, r2, #1
 80007e2:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcion en el NVIC */
	if (ptrTimerConfig->ptrTIMx == TIM2){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ec:	d107      	bne.n	80007fe <BTimer_Config+0x102>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 80007ee:	201c      	movs	r0, #28
 80007f0:	f7ff ff3e 	bl	8000670 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 80007f4:	2103      	movs	r1, #3
 80007f6:	201c      	movs	r0, #28
 80007f8:	f7ff ff56 	bl	80006a8 <__NVIC_SetPriority>
 80007fc:	e025      	b.n	800084a <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM3){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <BTimer_Config+0x164>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d107      	bne.n	8000818 <BTimer_Config+0x11c>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000808:	201d      	movs	r0, #29
 800080a:	f7ff ff31 	bl	8000670 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM3_IRQn, 3);
 800080e:	2103      	movs	r1, #3
 8000810:	201d      	movs	r0, #29
 8000812:	f7ff ff49 	bl	80006a8 <__NVIC_SetPriority>
 8000816:	e018      	b.n	800084a <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM4){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <BTimer_Config+0x168>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d107      	bne.n	8000832 <BTimer_Config+0x136>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000822:	201e      	movs	r0, #30
 8000824:	f7ff ff24 	bl	8000670 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM4_IRQn, 1);
 8000828:	2101      	movs	r1, #1
 800082a:	201e      	movs	r0, #30
 800082c:	f7ff ff3c 	bl	80006a8 <__NVIC_SetPriority>
 8000830:	e00b      	b.n	800084a <BTimer_Config+0x14e>
	}
	else if (ptrTimerConfig->ptrTIMx == TIM5){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <BTimer_Config+0x16c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <BTimer_Config+0x14e>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM5_IRQn);
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f7ff ff17 	bl	8000670 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 4);
 8000842:	2104      	movs	r1, #4
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f7ff ff2f 	bl	80006a8 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800084a:	b662      	cpsie	i
}
 800084c:	bf00      	nop
	}


	/* 8. Activamos las interrupciones globales */
	__enable_irq();
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001b0 	.word	0x200001b0
 800085c:	40023800 	.word	0x40023800
 8000860:	40000400 	.word	0x40000400
 8000864:	40000800 	.word	0x40000800
 8000868:	40000c00 	.word	0x40000c00

0800086c <BTimer3_Callback>:

__attribute__((weak)) void BTimer2_Callback(void){
	 __NOP();
}

__attribute__((weak)) void BTimer3_Callback(void){
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	 __NOP();
 8000870:	bf00      	nop
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <BTimer4_Callback>:

__attribute__((weak)) void BTimer4_Callback(void){
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
	 __NOP();
 800087e:	bf00      	nop
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <BTimer5_Callback>:

__attribute__((weak)) void BTimer5_Callback(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	 __NOP();
 800088c:	bf00      	nop
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <TIM2_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM2 */
void TIM2_IRQHandler(void){
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 800089a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	6113      	str	r3, [r2, #16]
	BTimer2_Callback();
 80008aa:	f7ff fe71 	bl	8000590 <BTimer2_Callback>

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <TIM3_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM3 */
void TIM3_IRQHandler(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <TIM3_IRQHandler+0x18>)
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	4a03      	ldr	r2, [pc, #12]	; (80008cc <TIM3_IRQHandler+0x18>)
 80008be:	f023 0301 	bic.w	r3, r3, #1
 80008c2:	6113      	str	r3, [r2, #16]
	BTimer3_Callback();
 80008c4:	f7ff ffd2 	bl	800086c <BTimer3_Callback>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40000400 	.word	0x40000400

080008d0 <TIM4_IRQHandler>:

/* Rutina de artencion a la interrupcion del TIM4 */
void TIM4_IRQHandler(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <TIM4_IRQHandler+0x18>)
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <TIM4_IRQHandler+0x18>)
 80008da:	f023 0301 	bic.w	r3, r3, #1
 80008de:	6113      	str	r3, [r2, #16]
	BTimer4_Callback();
 80008e0:	f7ff ffcb 	bl	800087a <BTimer4_Callback>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40000800 	.word	0x40000800

080008ec <TIM5_IRQHandler>:


/* Rutina de artencion a la interrupcion del TIM4 */
void TIM5_IRQHandler(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <TIM5_IRQHandler+0x18>)
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	4a03      	ldr	r2, [pc, #12]	; (8000904 <TIM5_IRQHandler+0x18>)
 80008f6:	f023 0301 	bic.w	r3, r3, #1
 80008fa:	6113      	str	r3, [r2, #16]
	BTimer5_Callback();
 80008fc:	f7ff ffc4 	bl	8000888 <BTimer5_Callback>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40000c00 	.word	0x40000c00

08000908 <GPIO_Config>:
 *  que el sistema permita configurar el periférico X.Lo primero y más importante es activar la señal del
 *  reloj principal hacia ese elemento específico relacionado con el periférico RCC, a esto llamaremos
 *  simplemente "activar el periférico o activar la señal de reloj del periférico"
 * */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	// variable para hacer to do paso a paso
	uint32_t auxConfig = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
	 // 1) Activar el periférico
	// Verificamos para GPIDA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a87      	ldr	r2, [pc, #540]	; (8000b3c <GPIO_Config+0x234>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000922:	4b87      	ldr	r3, [pc, #540]	; (8000b40 <GPIO_Config+0x238>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a86      	ldr	r2, [pc, #536]	; (8000b40 <GPIO_Config+0x238>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	e03a      	b.n	80009a6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx== GPIOB){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a83      	ldr	r2, [pc, #524]	; (8000b44 <GPIO_Config+0x23c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800093a:	4b81      	ldr	r3, [pc, #516]	; (8000b40 <GPIO_Config+0x238>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a80      	ldr	r2, [pc, #512]	; (8000b40 <GPIO_Config+0x238>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	e02e      	b.n	80009a6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx== GPIOC){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a7e      	ldr	r2, [pc, #504]	; (8000b48 <GPIO_Config+0x240>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d106      	bne.n	8000960 <GPIO_Config+0x58>
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000952:	4b7b      	ldr	r3, [pc, #492]	; (8000b40 <GPIO_Config+0x238>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a7a      	ldr	r2, [pc, #488]	; (8000b40 <GPIO_Config+0x238>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	e022      	b.n	80009a6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if (pGPIOHandler->pGPIOx== GPIOD){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a79      	ldr	r2, [pc, #484]	; (8000b4c <GPIO_Config+0x244>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <GPIO_Config+0x70>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800096a:	4b75      	ldr	r3, [pc, #468]	; (8000b40 <GPIO_Config+0x238>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a74      	ldr	r2, [pc, #464]	; (8000b40 <GPIO_Config+0x238>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	e016      	b.n	80009a6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if (pGPIOHandler->pGPIOx== GPIOE){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a74      	ldr	r2, [pc, #464]	; (8000b50 <GPIO_Config+0x248>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <GPIO_Config+0x88>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000982:	4b6f      	ldr	r3, [pc, #444]	; (8000b40 <GPIO_Config+0x238>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a6e      	ldr	r2, [pc, #440]	; (8000b40 <GPIO_Config+0x238>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	e00a      	b.n	80009a6 <GPIO_Config+0x9e>
		}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx== GPIOH){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a6f      	ldr	r2, [pc, #444]	; (8000b54 <GPIO_Config+0x24c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d105      	bne.n	80009a6 <GPIO_Config+0x9e>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800099a:	4b69      	ldr	r3, [pc, #420]	; (8000b40 <GPIO_Config+0x238>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a68      	ldr	r2, [pc, #416]	; (8000b40 <GPIO_Config+0x238>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el resgistro GPIOx_MODER
	//Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to do eso lo cargamos en la variables auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	60fb      	str	r3, [r7, #12]

	//Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2103      	movs	r1, #3
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	400a      	ands	r2, r1
 80009d4:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]

	//3) Configurando el registro GPIOx_OTYPER
	//De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7a1b      	ldrb	r3, [r3, #8]
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	4619      	mov	r1, r3
 8000a02:	2301      	movs	r3, #1
 8000a04:	408b      	lsls	r3, r1
 8000a06:	43db      	mvns	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	400a      	ands	r2, r1
 8000a10:	605a      	str	r2, [r3, #4]
	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6859      	ldr	r1, [r3, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	605a      	str	r2, [r3, #4]

	 //4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	799b      	ldrb	r3, [r3, #6]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2103      	movs	r1, #3
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	400a      	ands	r2, r1
 8000a50:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6899      	ldr	r1, [r3, #8]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull-up,pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	79db      	ldrb	r3, [r3, #7]
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	60fb      	str	r3, [r7, #12]

	// Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2103      	movs	r1, #3
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	400a      	ands	r2, r1
 8000a90:	60da      	str	r2, [r3, #12]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68d9      	ldr	r1, [r3, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d143      	bne.n	8000b32 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d81f      	bhi.n	8000af2 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]

			//limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 <<auxPosition);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6a1a      	ldr	r2, [r3, #32]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7a5b      	ldrb	r3, [r3, #9]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	621a      	str	r2, [r3, #32]
		// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}

} // Fin del GPIO_config
 8000af0:	e01f      	b.n	8000b32 <GPIO_Config+0x22a>
			auxPosition = 4 *(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber - 8);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	3b08      	subs	r3, #8
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b02:	210f      	movs	r1, #15
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	400a      	ands	r2, r1
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7a5b      	ldrb	r3, [r3, #9]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40021c00 	.word	0x40021c00

08000b58 <I2C_Config>:
 * Además, estos pines deben ser configurados como salidas open-drain y con las resistencias en modo pull-up
 */

uint8_t auxByte = 0;

void I2C_Config(I2C_Handler_t	*ptrHandlerI2C){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

	/* 1. Activamos la señal de reloj para el módulo I2C seleccionado */
	if (ptrHandlerI2C->ptrI2Cx == I2C1){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a45      	ldr	r2, [pc, #276]	; (8000c7c <I2C_Config+0x124>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <I2C_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <I2C_Config+0x128>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a44      	ldr	r2, [pc, #272]	; (8000c80 <I2C_Config+0x128>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	e016      	b.n	8000ba6 <I2C_Config+0x4e>
	}
	else if (ptrHandlerI2C->ptrI2Cx == I2C2){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a41      	ldr	r2, [pc, #260]	; (8000c84 <I2C_Config+0x12c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d106      	bne.n	8000b90 <I2C_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000b82:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <I2C_Config+0x128>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a3e      	ldr	r2, [pc, #248]	; (8000c80 <I2C_Config+0x128>)
 8000b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	e00a      	b.n	8000ba6 <I2C_Config+0x4e>
	}
	else if (ptrHandlerI2C->ptrI2Cx == I2C3){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a3c      	ldr	r2, [pc, #240]	; (8000c88 <I2C_Config+0x130>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d105      	bne.n	8000ba6 <I2C_Config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <I2C_Config+0x128>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a38      	ldr	r2, [pc, #224]	; (8000c80 <I2C_Config+0x128>)
 8000ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periférico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bb4:	601a      	str	r2, [r3, #0]
	__NOP();
 8000bb6:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bc6:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada por el periférico para generar la señal de reloj para el bus I2C */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración anterior
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000bd6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f042 0210 	orr.w	r2, r2, #16
 8000be6:	605a      	str	r2, [r3, #4]

	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la velocidad del reloj y el tiempo máximo para el cambio de la señal (T-Rise)
	 * To.do comienza con los dos registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	795b      	ldrb	r3, [r3, #5]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d118      	bne.n	8000c32 <I2C_Config+0xda>
		// Estamos en el modo "standar"
		// Seleccionamos el modo estándar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	69da      	ldr	r2, [r3, #28]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c0e:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	69da      	ldr	r2, [r3, #28]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000c1e:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6a1a      	ldr	r2, [r3, #32]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0211 	orr.w	r2, r2, #17
 8000c2e:	621a      	str	r2, [r3, #32]
 8000c30:	e017      	b.n	8000c62 <I2C_Config+0x10a>
	}
	else {
		// Estamos en el modo "fast"
		// Seleccionamos el modo rápido
		ptrHandlerI2C->ptrI2Cx->CCR |= I2C_CCR_FS;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	69da      	ldr	r2, [r3, #28]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c40:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	69da      	ldr	r2, [r3, #28]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f042 020e 	orr.w	r2, r2, #14
 8000c50:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6a1a      	ldr	r2, [r3, #32]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f042 0206 	orr.w	r2, r2, #6
 8000c60:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el módulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 0201 	orr.w	r2, r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40005800 	.word	0x40005800
 8000c88:	40005c00 	.word	0x40005c00

08000c8c <I2C_startTransaction>:


void I2C_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	/* Verificamos que la línea no está ocupada - bit "busy" en I2C_CR2 */
	while (ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8000c94:	e000      	b.n	8000c98 <I2C_startTransaction+0xc>
		__NOP();
 8000c96:	bf00      	nop
	while (ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f7      	bne.n	8000c96 <I2C_startTransaction+0xa>
	}
	/* Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cb4:	601a      	str	r2, [r3, #0]

	/* Esperamos a que la bander del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1 */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000cb6:	e000      	b.n	8000cba <I2C_startTransaction+0x2e>
		__NOP();
 8000cb8:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f7      	beq.n	8000cb8 <I2C_startTransaction+0x2c>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <I2C_sendSlaveAddressRW>:

void I2C_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t readOrWrite){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	/* Enviamos la dirección del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente pase se envia la direccion de memoria que se desea leer */
	ptrHandlerI2C->ptrI2Cx->DR = (ptrHandlerI2C->slaveAddress << 1) | readOrWrite;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	005a      	lsls	r2, r3, #1
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que la bandera del evento "addr" se levante (esto nos indica que la dirección fue enviada satisfactoriamente) */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8000cf0:	e000      	b.n	8000cf4 <I2C_sendSlaveAddressRW+0x20>
		__NOP();
 8000cf2:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f7      	beq.n	8000cf2 <I2C_sendSlaveAddressRW+0x1e>
	}

	/* Debemos limpiar la bandera de la recepción de ACK de la "addr", para lo cual debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <I2C_sendSlaveAddressRW+0x50>)
 8000d0c:	701a      	strb	r2, [r3, #0]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <I2C_sendSlaveAddressRW+0x50>)
 8000d18:	701a      	strb	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	200001b4 	.word	0x200001b4

08000d28 <I2C_sendMemoryAddress>:

void I2C_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	/* Enviaamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que el byte sea transmitido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8000d3c:	e000      	b.n	8000d40 <I2C_sendMemoryAddress+0x18>
		__NOP();
 8000d3e:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f7      	beq.n	8000d3e <I2C_sendMemoryAddress+0x16>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <I2C_reStartTransaction>:

void I2C_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	/* Debemos generar una señal de RESTART, o sea, enviar un nuevo START */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d70:	601a      	str	r2, [r3, #0]

	/* Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entoncs la negación (!) es 1 */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000d72:	e000      	b.n	8000d76 <I2C_reStartTransaction+0x1c>
		__NOP();
 8000d74:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f7      	beq.n	8000d74 <I2C_reStartTransaction+0x1a>
	}
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <I2C_sendNoAck>:

void I2C_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	/* Activamos la indicación para la no-ACK (indicación para el Slave de terminar)
	 * (Debemos escribir cero en la posición ACK del CR1 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <I2C_stopTransaction>:
	/* Activamos la indicación para la ACK (indicación para el Slave de seguir enviando datos)
	 * (Debemos escribir 1 en la posición ACK del CR1) */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

void I2C_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	/* Generamos la condición de STOP */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dc8:	601a      	str	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <I2C_readDataByte>:

uint8_t I2C_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	/* Esperamos hasta que el byte entrante sea recibido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8000ddc:	e000      	b.n	8000de0 <I2C_readDataByte+0xc>
		__NOP();
 8000dde:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f7      	beq.n	8000dde <I2C_readDataByte+0xa>
	}

	/* Leemos el byte recibido */
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	799b      	ldrb	r3, [r3, #6]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <I2C_sendDataByte>:

void I2C_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	/* Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR =  dataToWrite;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	78fa      	ldrb	r2, [r7, #3]
 8000e1a:	611a      	str	r2, [r3, #16]

	/* Esperamos hasta que el byte sea transmitido */
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8000e1c:	e000      	b.n	8000e20 <I2C_sendDataByte+0x18>
		__NOP();
 8000e1e:	bf00      	nop
	while ( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f7      	beq.n	8000e1e <I2C_sendDataByte+0x16>
	}
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <I2C_readByte>:

/**/
uint8_t I2C_readByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	70fb      	strb	r3, [r7, #3]
	uint8_t readData = '\0';
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
	/* 1 */
	I2C_startTransaction(ptrHandlerI2C);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff1e 	bl	8000c8c <I2C_startTransaction>

	/* 2 */
	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 8000e50:	2100      	movs	r1, #0
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff3e 	bl	8000cd4 <I2C_sendSlaveAddressRW>

	/* 3 */
	I2C_sendMemoryAddress(ptrHandlerI2C, memAddr);
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff63 	bl	8000d28 <I2C_sendMemoryAddress>

	/* 4 */
	I2C_reStartTransaction(ptrHandlerI2C);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff79 	bl	8000d5a <I2C_reStartTransaction>

	/* 5 */
	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_READ_DATA);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff32 	bl	8000cd4 <I2C_sendSlaveAddressRW>

	/* 6 */
	I2C_sendNoAck(ptrHandlerI2C);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff8d 	bl	8000d90 <I2C_sendNoAck>

	/* 7 */
	I2C_stopTransaction(ptrHandlerI2C);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff9b 	bl	8000db2 <I2C_stopTransaction>

	/* 8 */
	readData=I2C_readDataByte(ptrHandlerI2C);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffa9 	bl	8000dd4 <I2C_readDataByte>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]

	return readData;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <I2C_writeByte>:

	return readBytes;
}

/**/
void I2C_writeByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr, uint8_t dataToWrite){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	70bb      	strb	r3, [r7, #2]

	I2C_startTransaction(ptrHandlerI2C);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fef3 	bl	8000c8c <I2C_startTransaction>

	I2C_sendSlaveAddressRW(ptrHandlerI2C, I2C_WRITE_DATA);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff13 	bl	8000cd4 <I2C_sendSlaveAddressRW>

	I2C_sendMemoryAddress(ptrHandlerI2C, memAddr);
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff38 	bl	8000d28 <I2C_sendMemoryAddress>

	I2C_sendDataByte(ptrHandlerI2C, dataToWrite);
 8000eb8:	78bb      	ldrb	r3, [r7, #2]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ffa3 	bl	8000e08 <I2C_sendDataByte>

	I2C_stopTransaction(ptrHandlerI2C);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff75 	bl	8000db2 <I2C_stopTransaction>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <__NVIC_EnableIRQ>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4906      	ldr	r1, [pc, #24]	; (8000f04 <__NVIC_EnableIRQ+0x34>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <config_SysTickMs>:
uint64_t ticks;
uint32_t sysTicksStart = 0;
uint32_t sysTicksEnd   = 0;

/**/
void config_SysTickMs(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8000f0c:	4914      	ldr	r1, [pc, #80]	; (8000f60 <config_SysTickMs+0x58>)
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	e9c1 2300 	strd	r2, r3, [r1]

	// Cargando el valor del limite de icrementos que representan 1ms
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f1c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f20:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop

	// Desactivamos la interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	6013      	str	r3, [r2, #0]

	// Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ffc2 	bl	8000ed0 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <config_SysTickMs+0x5c>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f58:	b662      	cpsie	i
}
 8000f5a:	bf00      	nop

	// Activamos las interrupciones globales
	__enable_irq();
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001b8 	.word	0x200001b8
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <SysTick_Handler>:
uint64_t getTicksMs(void){
	return ticks;
}

/**/
void SysTick_Handler(void){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	//Verificamos que la interrupción se lanzó
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <SysTick_Handler+0x38>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00e      	beq.n	8000f96 <SysTick_Handler+0x2e>
		//Limpiamos la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <SysTick_Handler+0x38>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <SysTick_Handler+0x38>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
		//Incrementamos en 1 el contador
		ticks++;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <SysTick_Handler+0x3c>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	1c50      	adds	r0, r2, #1
 8000f8c:	f143 0100 	adc.w	r1, r3, #0
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Handler+0x3c>)
 8000f92:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010
 8000fa4:	200001b8 	.word	0x200001b8

08000fa8 <__NVIC_EnableIRQ>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <__NVIC_EnableIRQ+0x34>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_DisableIRQ>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db12      	blt.n	8001018 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	490a      	ldr	r1, [pc, #40]	; (8001024 <__NVIC_DisableIRQ+0x44>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	3320      	adds	r3, #32
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800100c:	f3bf 8f4f 	dsb	sy
}
 8001010:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001012:	f3bf 8f6f 	isb	sy
}
 8001016:	bf00      	nop
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj del periférico que se está utilizando
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]


	/* 1. Activamos la señal del reloj que viene desde el BUS al que pertenece el periférico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a88      	ldr	r2, [pc, #544]	; (80012ac <USART_Config+0x230>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d106      	bne.n	800109c <USART_Config+0x20>
		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <USART_Config+0x234>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <USART_Config+0x234>)
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	e016      	b.n	80010ca <USART_Config+0x4e>
	}
	/* Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a84      	ldr	r2, [pc, #528]	; (80012b4 <USART_Config+0x238>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <USART_Config+0x38>
		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <USART_Config+0x234>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a81      	ldr	r2, [pc, #516]	; (80012b0 <USART_Config+0x234>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	e00a      	b.n	80010ca <USART_Config+0x4e>
	}
	/* Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <USART_Config+0x23c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d105      	bne.n	80010ca <USART_Config+0x4e>
		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <USART_Config+0x234>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a7b      	ldr	r2, [pc, #492]	; (80012b0 <USART_Config+0x234>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
	 * Por último activamos el módulo USART cuando to-do está correctamente configurado
	 */


	/* 2.1 Comienzo por limpiar los registros, para cargar la configuración desde 0 */
	ptrUsartHandler->ptrUSARTx->CR1	= 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2	= 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

	/* 2.2. Configuración del Parity: */
	//Verificamos si el parity está activado o no
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	79db      	ldrb	r3, [r3, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d023      	beq.n	800112a <USART_Config+0xae>
		// Si se entra aquí, entonces se desea el parity-check, así que lo activamos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010f0:	60da      	str	r2, [r3, #12]
		//Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	79db      	ldrb	r3, [r3, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d10b      	bne.n	8001112 <USART_Config+0x96>
			// Es Even, entonces cargamos la configuración adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001108:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	719a      	strb	r2, [r3, #6]
 8001110:	e013      	b.n	800113a <USART_Config+0xbe>
		} else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuración
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001120:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	719a      	strb	r2, [r3, #6]
 8001128:	e007      	b.n	800113a <USART_Config+0xbe>
		}
	} else{
		// Si llegamos acá, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001138:	60da      	str	r2, [r3, #12]
	}

	/* 2.3. Configuramos el tamaño del dato */
	// Verificamos si el tamaño es de 8 bits
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d108      	bne.n	8001154 <USART_Config+0xd8>
		// El registro CR1, bit M (Word length) es 0: 8 Data Bits; 1: 9  Data Bits
		ptrUsartHandler->ptrUSARTx->CR1 &= ~ (USART_CR1_M);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	e007      	b.n	8001164 <USART_Config+0xe8>
	} else{
		// Else significa que se desean 9 bits de datos
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001162:	60da      	str	r2, [r3, #12]
	}

	/* 2.4. Configuramos los stop bits (SFR USART_CR2) */
	switch (ptrUsartHandler->USART_Config.USART_stopbits){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7a1b      	ldrb	r3, [r3, #8]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d82f      	bhi.n	80011cc <USART_Config+0x150>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <USART_Config+0xf8>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	08001197 	.word	0x08001197
 800117c:	080011a9 	.word	0x080011a9
 8001180:	080011bb 	.word	0x080011bb
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001192:	611a      	str	r2, [r3, #16]
		break;
 8001194:	e01a      	b.n	80011cc <USART_Config+0x150>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011a4:	611a      	str	r2, [r3, #16]
		break;
 80011a6:	e011      	b.n	80011cc <USART_Config+0x150>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011b6:	611a      	str	r2, [r3, #16]
		break;
 80011b8:	e008      	b.n	80011cc <USART_Config+0x150>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits del STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011c8:	611a      	str	r2, [r3, #16]
		break;
 80011ca:	bf00      	nop
	}
	}

	/* 2.5. Configuración del Baudrate (SFR USART_BRR) */
	// Ver tabla de valores (Tabla 75), Frec= 16MHz, overr = 0;
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	795b      	ldrb	r3, [r3, #5]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <USART_Config+0x164>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f240 6283 	movw	r2, #1667	; 0x683
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	e01a      	b.n	8001216 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	795b      	ldrb	r3, [r3, #5]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <USART_Config+0x178>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x0341
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f240 3241 	movw	r2, #833	; 0x341
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	e010      	b.n	8001216 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	795b      	ldrb	r3, [r3, #5]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d104      	bne.n	8001206 <USART_Config+0x18a>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// El valor a cargar es 0x0811
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	228b      	movs	r2, #139	; 0x8b
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	e007      	b.n	8001216 <USART_Config+0x19a>
	}
	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_921600){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d103      	bne.n	8001216 <USART_Config+0x19a>
		// El valor a cargar es 1.0625 -> Mantiza = 1, fraction = 0.0625
		// Mantiza = 1 = 0x1, fraction = 16 * 0.0625 = 1
		// El valor a cargar es 0x011
		ptrUsartHandler->ptrUSARTx->BRR = 0x011;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2211      	movs	r2, #17
 8001214:	609a      	str	r2, [r3, #8]
	}

	/* 2.6. Configuramos el modo: TX only, RX only, RXTX, disable */
	switch (ptrUsartHandler->USART_Config.USART_mode){
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	791b      	ldrb	r3, [r3, #4]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d84e      	bhi.n	80012bc <USART_Config+0x240>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <USART_Config+0x1a8>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001235 	.word	0x08001235
 8001228:	08001247 	.word	0x08001247
 800122c:	08001259 	.word	0x08001259
 8001230:	0800127b 	.word	0x0800127b
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0208 	orr.w	r2, r2, #8
 8001242:	60da      	str	r2, [r3, #12]
		break;
 8001244:	e053      	b.n	80012ee <USART_Config+0x272>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0204 	orr.w	r2, r2, #4
 8001254:	60da      	str	r2, [r3, #12]
		break;
 8001256:	e04a      	b.n	80012ee <USART_Config+0x272>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0208 	orr.w	r2, r2, #8
 8001266:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_RE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0204 	orr.w	r2, r2, #4
 8001276:	60da      	str	r2, [r3, #12]
		break;
 8001278:	e039      	b.n	80012ee <USART_Config+0x272>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0208 	bic.w	r2, r2, #8
 8001288:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0204 	bic.w	r2, r2, #4
 8001298:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012a8:	60da      	str	r2, [r3, #12]
		break;
 80012aa:	e020      	b.n	80012ee <USART_Config+0x272>
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0208 	bic.w	r2, r2, #8
 80012ca:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0204 	bic.w	r2, r2, #4
 80012da:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ea:	60da      	str	r2, [r3, #12]
		break;
 80012ec:	bf00      	nop
	}
	}


	/* 2.7. Activamos el módulo serial */
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d007      	beq.n	8001306 <USART_Config+0x28a>
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001304:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001306:	b672      	cpsid	i
}
 8001308:	bf00      	nop
	}

	/* 0. Desactivamos las interrupciones globales */
	__disable_irq();

	ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001318:	60da      	str	r2, [r3, #12]

	if (ptrUsartHandler->USART_Config.USART_interrupt != USART_INTERRUPT_DISABLE){
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7a5b      	ldrb	r3, [r3, #9]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d022      	beq.n	8001368 <USART_Config+0x2ec>
		/* Activamos la señal de la interrupcion en el NVIC */
		if (ptrUsartHandler->ptrUSARTx == USART1){
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <USART_Config+0x32c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d107      	bne.n	800133c <USART_Config+0x2c0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 800132c:	2025      	movs	r0, #37	; 0x25
 800132e:	f7ff fe3b 	bl	8000fa8 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART1_IRQn, 1);
 8001332:	2101      	movs	r1, #1
 8001334:	2025      	movs	r0, #37	; 0x25
 8001336:	f7ff fe77 	bl	8001028 <__NVIC_SetPriority>
 800133a:	e01e      	b.n	800137a <USART_Config+0x2fe>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART2){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <USART_Config+0x330>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d107      	bne.n	8001356 <USART_Config+0x2da>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8001346:	2026      	movs	r0, #38	; 0x26
 8001348:	f7ff fe2e 	bl	8000fa8 <__NVIC_EnableIRQ>
			__NVIC_SetPriority(USART2_IRQn, 2);
 800134c:	2102      	movs	r1, #2
 800134e:	2026      	movs	r0, #38	; 0x26
 8001350:	f7ff fe6a 	bl	8001028 <__NVIC_SetPriority>
 8001354:	e011      	b.n	800137a <USART_Config+0x2fe>
		}
		else if (ptrUsartHandler->ptrUSARTx == USART6){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <USART_Config+0x334>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d10c      	bne.n	800137a <USART_Config+0x2fe>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001360:	2047      	movs	r0, #71	; 0x47
 8001362:	f7ff fe21 	bl	8000fa8 <__NVIC_EnableIRQ>
 8001366:	e008      	b.n	800137a <USART_Config+0x2fe>
		}
	}
	else {
		__NVIC_DisableIRQ(USART1_IRQn);
 8001368:	2025      	movs	r0, #37	; 0x25
 800136a:	f7ff fe39 	bl	8000fe0 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART2_IRQn);
 800136e:	2026      	movs	r0, #38	; 0x26
 8001370:	f7ff fe36 	bl	8000fe0 <__NVIC_DisableIRQ>
		__NVIC_DisableIRQ(USART6_IRQn);
 8001374:	2047      	movs	r0, #71	; 0x47
 8001376:	f7ff fe33 	bl	8000fe0 <__NVIC_DisableIRQ>
	}

	/*2.8. Configuramos el modo de interrupcion RX, pues las interrupciones para TX se controlan desde el writeChar*/
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7a5b      	ldrb	r3, [r3, #9]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d003      	beq.n	800138a <USART_Config+0x30e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7a5b      	ldrb	r3, [r3, #9]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <USART_Config+0x31e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800139a:	b662      	cpsie	i
}
 800139c:	bf00      	nop
	}

	/* 8. Activamos las interrupciones globales */
	__enable_irq();

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40011400 	.word	0x40011400

080013b4 <writeChar>:

/* Función para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
	if ((ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_TX) || (ptrUsartHandler->USART_Config.USART_interrupt == USART_INTERRUPT_RXTX)){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <writeChar+0x1c>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7a5b      	ldrb	r3, [r3, #9]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d10c      	bne.n	80013ea <writeChar+0x36>
		auxDataToSend = dataToSend;
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <writeChar+0x58>)
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	7013      	strb	r3, [r2, #0]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	e00c      	b.n	8001402 <writeChar+0x4e>
	}
	else {
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
			__NOP();
 80013e8:	bf00      	nop
		while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f7      	beq.n	80013e8 <writeChar+0x34>
		}
		// Escribimos el dataToSend en el Data Register
		ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	605a      	str	r2, [r3, #4]
	}
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	200001c1 	.word	0x200001c1

08001410 <writeMsg>:

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	while (*msgToSend != '\0'){
 800141a:	e008      	b.n	800142e <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffc6 	bl	80013b4 <writeChar>
		msgToSend++;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	603b      	str	r3, [r7, #0]
	while (*msgToSend != '\0'){
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <writeMsg+0xc>
	}
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <getRxData>:
	char dataReceived;
	dataReceived = (char) ptrUsartHandler->ptrUSARTx->DR;
	return dataReceived;
}

char getRxData(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return auxRxData;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <getRxData+0x10>)
 8001446:	781b      	ldrb	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200001c0 	.word	0x200001c0

08001454 <Usart1_TX_Callback>:

/*
 * *** Configuración de USART por interrupciones ***
 */

__attribute__((weak)) void Usart1_TX_Callback(void){
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	 __NOP();
 8001458:	bf00      	nop
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <Usart2_TX_Callback>:

__attribute__((weak)) void Usart2_TX_Callback(void){
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
	 __NOP();
 8001466:	bf00      	nop
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <Usart6_TX_Callback>:

__attribute__((weak)) void Usart6_TX_Callback(void){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	 __NOP();
 8001474:	bf00      	nop
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <Usart1_RX_Callback>:

__attribute__((weak)) void Usart1_RX_Callback(void){
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
	 __NOP();
 8001482:	bf00      	nop
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <Usart6_RX_Callback>:

__attribute__((weak)) void Usart2_RX_Callback(void){
	 __NOP();
}

__attribute__((weak)) void Usart6_RX_Callback(void){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	 __NOP();
 8001490:	bf00      	nop
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <USART1_IRQHandler>:



/* Rutina de artencion a la interrupcion del USART1 */
void USART1_IRQHandler(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)){
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <USART1_IRQHandler+0x48>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <USART1_IRQHandler+0x20>
		auxRxData = USART1->DR;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <USART1_IRQHandler+0x48>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <USART1_IRQHandler+0x4c>)
 80014b4:	701a      	strb	r2, [r3, #0]
		Usart1_RX_Callback();
 80014b6:	f7ff ffe2 	bl	800147e <Usart1_RX_Callback>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
		USART1->DR = auxDataToSend;
		USART1->CR1 &= ~USART_CR1_TXEIE;
		Usart1_TX_Callback();
	}
}
 80014ba:	e011      	b.n	80014e0 <USART1_IRQHandler+0x44>
	else if ((USART1->CR1 & USART_CR1_TXEIE)){
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <USART1_IRQHandler+0x48>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <USART1_IRQHandler+0x44>
		USART1->DR = auxDataToSend;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <USART1_IRQHandler+0x50>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <USART1_IRQHandler+0x48>)
 80014ce:	605a      	str	r2, [r3, #4]
		USART1->CR1 &= ~USART_CR1_TXEIE;
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <USART1_IRQHandler+0x48>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <USART1_IRQHandler+0x48>)
 80014d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014da:	60d3      	str	r3, [r2, #12]
		Usart1_TX_Callback();
 80014dc:	f7ff ffba 	bl	8001454 <Usart1_TX_Callback>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40011000 	.word	0x40011000
 80014e8:	200001c0 	.word	0x200001c0
 80014ec:	200001c1 	.word	0x200001c1

080014f0 <USART2_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART2 */
void USART2_IRQHandler(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)){
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <USART2_IRQHandler+0x48>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <USART2_IRQHandler+0x20>
		auxRxData = USART2->DR;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <USART2_IRQHandler+0x48>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <USART2_IRQHandler+0x4c>)
 8001508:	701a      	strb	r2, [r3, #0]
		Usart2_RX_Callback();
 800150a:	f7ff f835 	bl	8000578 <Usart2_RX_Callback>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
		USART2->DR = auxDataToSend;
		USART2->CR1 &= ~USART_CR1_TXEIE;
		Usart2_TX_Callback();
	}
}
 800150e:	e011      	b.n	8001534 <USART2_IRQHandler+0x44>
	else if ((USART2->CR1 & USART_CR1_TXEIE)){
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <USART2_IRQHandler+0x48>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <USART2_IRQHandler+0x44>
		USART2->DR = auxDataToSend;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <USART2_IRQHandler+0x50>)
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <USART2_IRQHandler+0x48>)
 8001522:	605a      	str	r2, [r3, #4]
		USART2->CR1 &= ~USART_CR1_TXEIE;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <USART2_IRQHandler+0x48>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <USART2_IRQHandler+0x48>)
 800152a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800152e:	60d3      	str	r3, [r2, #12]
		Usart2_TX_Callback();
 8001530:	f7ff ff97 	bl	8001462 <Usart2_TX_Callback>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40004400 	.word	0x40004400
 800153c:	200001c0 	.word	0x200001c0
 8001540:	200001c1 	.word	0x200001c1

08001544 <USART6_IRQHandler>:

/* Rutina de artencion a la interrupcion del USART6 */
void USART6_IRQHandler(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	if ((USART6->SR & USART_SR_RXNE)){
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <USART6_IRQHandler+0x48>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <USART6_IRQHandler+0x20>
		auxRxData = USART6->DR;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <USART6_IRQHandler+0x48>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <USART6_IRQHandler+0x4c>)
 800155c:	701a      	strb	r2, [r3, #0]
		Usart6_RX_Callback();
 800155e:	f7ff ff95 	bl	800148c <Usart6_RX_Callback>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
		USART6->DR = auxDataToSend;
		USART6->CR1 &= ~USART_CR1_TXEIE;
		Usart6_TX_Callback();
	}
}
 8001562:	e011      	b.n	8001588 <USART6_IRQHandler+0x44>
	else if ((USART6->CR1 & USART_CR1_TXEIE)){
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <USART6_IRQHandler+0x48>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <USART6_IRQHandler+0x44>
		USART6->DR = auxDataToSend;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <USART6_IRQHandler+0x50>)
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <USART6_IRQHandler+0x48>)
 8001576:	605a      	str	r2, [r3, #4]
		USART6->CR1 &= ~USART_CR1_TXEIE;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <USART6_IRQHandler+0x48>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <USART6_IRQHandler+0x48>)
 800157e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001582:	60d3      	str	r3, [r2, #12]
		Usart6_TX_Callback();
 8001584:	f7ff ff74 	bl	8001470 <Usart6_TX_Callback>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40011400 	.word	0x40011400
 8001590:	200001c0 	.word	0x200001c0
 8001594:	200001c1 	.word	0x200001c1

08001598 <__errno>:
 8001598:	4b01      	ldr	r3, [pc, #4]	; (80015a0 <__errno+0x8>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000040 	.word	0x20000040

080015a4 <__libc_init_array>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4d0d      	ldr	r5, [pc, #52]	; (80015dc <__libc_init_array+0x38>)
 80015a8:	4c0d      	ldr	r4, [pc, #52]	; (80015e0 <__libc_init_array+0x3c>)
 80015aa:	1b64      	subs	r4, r4, r5
 80015ac:	10a4      	asrs	r4, r4, #2
 80015ae:	2600      	movs	r6, #0
 80015b0:	42a6      	cmp	r6, r4
 80015b2:	d109      	bne.n	80015c8 <__libc_init_array+0x24>
 80015b4:	4d0b      	ldr	r5, [pc, #44]	; (80015e4 <__libc_init_array+0x40>)
 80015b6:	4c0c      	ldr	r4, [pc, #48]	; (80015e8 <__libc_init_array+0x44>)
 80015b8:	f000 fc84 	bl	8001ec4 <_init>
 80015bc:	1b64      	subs	r4, r4, r5
 80015be:	10a4      	asrs	r4, r4, #2
 80015c0:	2600      	movs	r6, #0
 80015c2:	42a6      	cmp	r6, r4
 80015c4:	d105      	bne.n	80015d2 <__libc_init_array+0x2e>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015cc:	4798      	blx	r3
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7ee      	b.n	80015b0 <__libc_init_array+0xc>
 80015d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d6:	4798      	blx	r3
 80015d8:	3601      	adds	r6, #1
 80015da:	e7f2      	b.n	80015c2 <__libc_init_array+0x1e>
 80015dc:	08001f44 	.word	0x08001f44
 80015e0:	08001f44 	.word	0x08001f44
 80015e4:	08001f44 	.word	0x08001f44
 80015e8:	08001f48 	.word	0x08001f48

080015ec <siprintf>:
 80015ec:	b40e      	push	{r1, r2, r3}
 80015ee:	b500      	push	{lr}
 80015f0:	b09c      	sub	sp, #112	; 0x70
 80015f2:	ab1d      	add	r3, sp, #116	; 0x74
 80015f4:	9002      	str	r0, [sp, #8]
 80015f6:	9006      	str	r0, [sp, #24]
 80015f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <siprintf+0x38>)
 80015fe:	9107      	str	r1, [sp, #28]
 8001600:	9104      	str	r1, [sp, #16]
 8001602:	4909      	ldr	r1, [pc, #36]	; (8001628 <siprintf+0x3c>)
 8001604:	f853 2b04 	ldr.w	r2, [r3], #4
 8001608:	9105      	str	r1, [sp, #20]
 800160a:	6800      	ldr	r0, [r0, #0]
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	a902      	add	r1, sp, #8
 8001610:	f000 f868 	bl	80016e4 <_svfiprintf_r>
 8001614:	9b02      	ldr	r3, [sp, #8]
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	b01c      	add	sp, #112	; 0x70
 800161c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001620:	b003      	add	sp, #12
 8001622:	4770      	bx	lr
 8001624:	20000040 	.word	0x20000040
 8001628:	ffff0208 	.word	0xffff0208

0800162c <__ssputs_r>:
 800162c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001630:	688e      	ldr	r6, [r1, #8]
 8001632:	429e      	cmp	r6, r3
 8001634:	4682      	mov	sl, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4690      	mov	r8, r2
 800163a:	461f      	mov	r7, r3
 800163c:	d838      	bhi.n	80016b0 <__ssputs_r+0x84>
 800163e:	898a      	ldrh	r2, [r1, #12]
 8001640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001644:	d032      	beq.n	80016ac <__ssputs_r+0x80>
 8001646:	6825      	ldr	r5, [r4, #0]
 8001648:	6909      	ldr	r1, [r1, #16]
 800164a:	eba5 0901 	sub.w	r9, r5, r1
 800164e:	6965      	ldr	r5, [r4, #20]
 8001650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001658:	3301      	adds	r3, #1
 800165a:	444b      	add	r3, r9
 800165c:	106d      	asrs	r5, r5, #1
 800165e:	429d      	cmp	r5, r3
 8001660:	bf38      	it	cc
 8001662:	461d      	movcc	r5, r3
 8001664:	0553      	lsls	r3, r2, #21
 8001666:	d531      	bpl.n	80016cc <__ssputs_r+0xa0>
 8001668:	4629      	mov	r1, r5
 800166a:	f000 fb61 	bl	8001d30 <_malloc_r>
 800166e:	4606      	mov	r6, r0
 8001670:	b950      	cbnz	r0, 8001688 <__ssputs_r+0x5c>
 8001672:	230c      	movs	r3, #12
 8001674:	f8ca 3000 	str.w	r3, [sl]
 8001678:	89a3      	ldrh	r3, [r4, #12]
 800167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167e:	81a3      	strh	r3, [r4, #12]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001688:	6921      	ldr	r1, [r4, #16]
 800168a:	464a      	mov	r2, r9
 800168c:	f000 fabe 	bl	8001c0c <memcpy>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	6126      	str	r6, [r4, #16]
 800169e:	6165      	str	r5, [r4, #20]
 80016a0:	444e      	add	r6, r9
 80016a2:	eba5 0509 	sub.w	r5, r5, r9
 80016a6:	6026      	str	r6, [r4, #0]
 80016a8:	60a5      	str	r5, [r4, #8]
 80016aa:	463e      	mov	r6, r7
 80016ac:	42be      	cmp	r6, r7
 80016ae:	d900      	bls.n	80016b2 <__ssputs_r+0x86>
 80016b0:	463e      	mov	r6, r7
 80016b2:	6820      	ldr	r0, [r4, #0]
 80016b4:	4632      	mov	r2, r6
 80016b6:	4641      	mov	r1, r8
 80016b8:	f000 fab6 	bl	8001c28 <memmove>
 80016bc:	68a3      	ldr	r3, [r4, #8]
 80016be:	1b9b      	subs	r3, r3, r6
 80016c0:	60a3      	str	r3, [r4, #8]
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	4433      	add	r3, r6
 80016c6:	6023      	str	r3, [r4, #0]
 80016c8:	2000      	movs	r0, #0
 80016ca:	e7db      	b.n	8001684 <__ssputs_r+0x58>
 80016cc:	462a      	mov	r2, r5
 80016ce:	f000 fba3 	bl	8001e18 <_realloc_r>
 80016d2:	4606      	mov	r6, r0
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1e1      	bne.n	800169c <__ssputs_r+0x70>
 80016d8:	6921      	ldr	r1, [r4, #16]
 80016da:	4650      	mov	r0, sl
 80016dc:	f000 fabe 	bl	8001c5c <_free_r>
 80016e0:	e7c7      	b.n	8001672 <__ssputs_r+0x46>
	...

080016e4 <_svfiprintf_r>:
 80016e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	4698      	mov	r8, r3
 80016ea:	898b      	ldrh	r3, [r1, #12]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	b09d      	sub	sp, #116	; 0x74
 80016f0:	4607      	mov	r7, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4614      	mov	r4, r2
 80016f6:	d50e      	bpl.n	8001716 <_svfiprintf_r+0x32>
 80016f8:	690b      	ldr	r3, [r1, #16]
 80016fa:	b963      	cbnz	r3, 8001716 <_svfiprintf_r+0x32>
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	f000 fb17 	bl	8001d30 <_malloc_r>
 8001702:	6028      	str	r0, [r5, #0]
 8001704:	6128      	str	r0, [r5, #16]
 8001706:	b920      	cbnz	r0, 8001712 <_svfiprintf_r+0x2e>
 8001708:	230c      	movs	r3, #12
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	e0d1      	b.n	80018b6 <_svfiprintf_r+0x1d2>
 8001712:	2340      	movs	r3, #64	; 0x40
 8001714:	616b      	str	r3, [r5, #20]
 8001716:	2300      	movs	r3, #0
 8001718:	9309      	str	r3, [sp, #36]	; 0x24
 800171a:	2320      	movs	r3, #32
 800171c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001720:	f8cd 800c 	str.w	r8, [sp, #12]
 8001724:	2330      	movs	r3, #48	; 0x30
 8001726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80018d0 <_svfiprintf_r+0x1ec>
 800172a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800172e:	f04f 0901 	mov.w	r9, #1
 8001732:	4623      	mov	r3, r4
 8001734:	469a      	mov	sl, r3
 8001736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800173a:	b10a      	cbz	r2, 8001740 <_svfiprintf_r+0x5c>
 800173c:	2a25      	cmp	r2, #37	; 0x25
 800173e:	d1f9      	bne.n	8001734 <_svfiprintf_r+0x50>
 8001740:	ebba 0b04 	subs.w	fp, sl, r4
 8001744:	d00b      	beq.n	800175e <_svfiprintf_r+0x7a>
 8001746:	465b      	mov	r3, fp
 8001748:	4622      	mov	r2, r4
 800174a:	4629      	mov	r1, r5
 800174c:	4638      	mov	r0, r7
 800174e:	f7ff ff6d 	bl	800162c <__ssputs_r>
 8001752:	3001      	adds	r0, #1
 8001754:	f000 80aa 	beq.w	80018ac <_svfiprintf_r+0x1c8>
 8001758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800175a:	445a      	add	r2, fp
 800175c:	9209      	str	r2, [sp, #36]	; 0x24
 800175e:	f89a 3000 	ldrb.w	r3, [sl]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a2 	beq.w	80018ac <_svfiprintf_r+0x1c8>
 8001768:	2300      	movs	r3, #0
 800176a:	f04f 32ff 	mov.w	r2, #4294967295
 800176e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001772:	f10a 0a01 	add.w	sl, sl, #1
 8001776:	9304      	str	r3, [sp, #16]
 8001778:	9307      	str	r3, [sp, #28]
 800177a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800177e:	931a      	str	r3, [sp, #104]	; 0x68
 8001780:	4654      	mov	r4, sl
 8001782:	2205      	movs	r2, #5
 8001784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001788:	4851      	ldr	r0, [pc, #324]	; (80018d0 <_svfiprintf_r+0x1ec>)
 800178a:	f7fe fd29 	bl	80001e0 <memchr>
 800178e:	9a04      	ldr	r2, [sp, #16]
 8001790:	b9d8      	cbnz	r0, 80017ca <_svfiprintf_r+0xe6>
 8001792:	06d0      	lsls	r0, r2, #27
 8001794:	bf44      	itt	mi
 8001796:	2320      	movmi	r3, #32
 8001798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800179c:	0711      	lsls	r1, r2, #28
 800179e:	bf44      	itt	mi
 80017a0:	232b      	movmi	r3, #43	; 0x2b
 80017a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017a6:	f89a 3000 	ldrb.w	r3, [sl]
 80017aa:	2b2a      	cmp	r3, #42	; 0x2a
 80017ac:	d015      	beq.n	80017da <_svfiprintf_r+0xf6>
 80017ae:	9a07      	ldr	r2, [sp, #28]
 80017b0:	4654      	mov	r4, sl
 80017b2:	2000      	movs	r0, #0
 80017b4:	f04f 0c0a 	mov.w	ip, #10
 80017b8:	4621      	mov	r1, r4
 80017ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017be:	3b30      	subs	r3, #48	; 0x30
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d94e      	bls.n	8001862 <_svfiprintf_r+0x17e>
 80017c4:	b1b0      	cbz	r0, 80017f4 <_svfiprintf_r+0x110>
 80017c6:	9207      	str	r2, [sp, #28]
 80017c8:	e014      	b.n	80017f4 <_svfiprintf_r+0x110>
 80017ca:	eba0 0308 	sub.w	r3, r0, r8
 80017ce:	fa09 f303 	lsl.w	r3, r9, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	9304      	str	r3, [sp, #16]
 80017d6:	46a2      	mov	sl, r4
 80017d8:	e7d2      	b.n	8001780 <_svfiprintf_r+0x9c>
 80017da:	9b03      	ldr	r3, [sp, #12]
 80017dc:	1d19      	adds	r1, r3, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	9103      	str	r1, [sp, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfbb      	ittet	lt
 80017e6:	425b      	neglt	r3, r3
 80017e8:	f042 0202 	orrlt.w	r2, r2, #2
 80017ec:	9307      	strge	r3, [sp, #28]
 80017ee:	9307      	strlt	r3, [sp, #28]
 80017f0:	bfb8      	it	lt
 80017f2:	9204      	strlt	r2, [sp, #16]
 80017f4:	7823      	ldrb	r3, [r4, #0]
 80017f6:	2b2e      	cmp	r3, #46	; 0x2e
 80017f8:	d10c      	bne.n	8001814 <_svfiprintf_r+0x130>
 80017fa:	7863      	ldrb	r3, [r4, #1]
 80017fc:	2b2a      	cmp	r3, #42	; 0x2a
 80017fe:	d135      	bne.n	800186c <_svfiprintf_r+0x188>
 8001800:	9b03      	ldr	r3, [sp, #12]
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	9203      	str	r2, [sp, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	bfb8      	it	lt
 800180c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001810:	3402      	adds	r4, #2
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80018d4 <_svfiprintf_r+0x1f0>
 8001818:	7821      	ldrb	r1, [r4, #0]
 800181a:	2203      	movs	r2, #3
 800181c:	4650      	mov	r0, sl
 800181e:	f7fe fcdf 	bl	80001e0 <memchr>
 8001822:	b140      	cbz	r0, 8001836 <_svfiprintf_r+0x152>
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	eba0 000a 	sub.w	r0, r0, sl
 800182a:	fa03 f000 	lsl.w	r0, r3, r0
 800182e:	9b04      	ldr	r3, [sp, #16]
 8001830:	4303      	orrs	r3, r0
 8001832:	3401      	adds	r4, #1
 8001834:	9304      	str	r3, [sp, #16]
 8001836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800183a:	4827      	ldr	r0, [pc, #156]	; (80018d8 <_svfiprintf_r+0x1f4>)
 800183c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001840:	2206      	movs	r2, #6
 8001842:	f7fe fccd 	bl	80001e0 <memchr>
 8001846:	2800      	cmp	r0, #0
 8001848:	d038      	beq.n	80018bc <_svfiprintf_r+0x1d8>
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <_svfiprintf_r+0x1f8>)
 800184c:	bb1b      	cbnz	r3, 8001896 <_svfiprintf_r+0x1b2>
 800184e:	9b03      	ldr	r3, [sp, #12]
 8001850:	3307      	adds	r3, #7
 8001852:	f023 0307 	bic.w	r3, r3, #7
 8001856:	3308      	adds	r3, #8
 8001858:	9303      	str	r3, [sp, #12]
 800185a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800185c:	4433      	add	r3, r6
 800185e:	9309      	str	r3, [sp, #36]	; 0x24
 8001860:	e767      	b.n	8001732 <_svfiprintf_r+0x4e>
 8001862:	fb0c 3202 	mla	r2, ip, r2, r3
 8001866:	460c      	mov	r4, r1
 8001868:	2001      	movs	r0, #1
 800186a:	e7a5      	b.n	80017b8 <_svfiprintf_r+0xd4>
 800186c:	2300      	movs	r3, #0
 800186e:	3401      	adds	r4, #1
 8001870:	9305      	str	r3, [sp, #20]
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0c0a 	mov.w	ip, #10
 8001878:	4620      	mov	r0, r4
 800187a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800187e:	3a30      	subs	r2, #48	; 0x30
 8001880:	2a09      	cmp	r2, #9
 8001882:	d903      	bls.n	800188c <_svfiprintf_r+0x1a8>
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0c5      	beq.n	8001814 <_svfiprintf_r+0x130>
 8001888:	9105      	str	r1, [sp, #20]
 800188a:	e7c3      	b.n	8001814 <_svfiprintf_r+0x130>
 800188c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001890:	4604      	mov	r4, r0
 8001892:	2301      	movs	r3, #1
 8001894:	e7f0      	b.n	8001878 <_svfiprintf_r+0x194>
 8001896:	ab03      	add	r3, sp, #12
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	462a      	mov	r2, r5
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_svfiprintf_r+0x1fc>)
 800189e:	a904      	add	r1, sp, #16
 80018a0:	4638      	mov	r0, r7
 80018a2:	f3af 8000 	nop.w
 80018a6:	1c42      	adds	r2, r0, #1
 80018a8:	4606      	mov	r6, r0
 80018aa:	d1d6      	bne.n	800185a <_svfiprintf_r+0x176>
 80018ac:	89ab      	ldrh	r3, [r5, #12]
 80018ae:	065b      	lsls	r3, r3, #25
 80018b0:	f53f af2c 	bmi.w	800170c <_svfiprintf_r+0x28>
 80018b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018b6:	b01d      	add	sp, #116	; 0x74
 80018b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018bc:	ab03      	add	r3, sp, #12
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	462a      	mov	r2, r5
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_svfiprintf_r+0x1fc>)
 80018c4:	a904      	add	r1, sp, #16
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f87a 	bl	80019c0 <_printf_i>
 80018cc:	e7eb      	b.n	80018a6 <_svfiprintf_r+0x1c2>
 80018ce:	bf00      	nop
 80018d0:	08001f0e 	.word	0x08001f0e
 80018d4:	08001f14 	.word	0x08001f14
 80018d8:	08001f18 	.word	0x08001f18
 80018dc:	00000000 	.word	0x00000000
 80018e0:	0800162d 	.word	0x0800162d

080018e4 <_printf_common>:
 80018e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018e8:	4616      	mov	r6, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	688a      	ldr	r2, [r1, #8]
 80018ee:	690b      	ldr	r3, [r1, #16]
 80018f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bfb8      	it	lt
 80018f8:	4613      	movlt	r3, r2
 80018fa:	6033      	str	r3, [r6, #0]
 80018fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001900:	4607      	mov	r7, r0
 8001902:	460c      	mov	r4, r1
 8001904:	b10a      	cbz	r2, 800190a <_printf_common+0x26>
 8001906:	3301      	adds	r3, #1
 8001908:	6033      	str	r3, [r6, #0]
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	0699      	lsls	r1, r3, #26
 800190e:	bf42      	ittt	mi
 8001910:	6833      	ldrmi	r3, [r6, #0]
 8001912:	3302      	addmi	r3, #2
 8001914:	6033      	strmi	r3, [r6, #0]
 8001916:	6825      	ldr	r5, [r4, #0]
 8001918:	f015 0506 	ands.w	r5, r5, #6
 800191c:	d106      	bne.n	800192c <_printf_common+0x48>
 800191e:	f104 0a19 	add.w	sl, r4, #25
 8001922:	68e3      	ldr	r3, [r4, #12]
 8001924:	6832      	ldr	r2, [r6, #0]
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	42ab      	cmp	r3, r5
 800192a:	dc26      	bgt.n	800197a <_printf_common+0x96>
 800192c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001930:	1e13      	subs	r3, r2, #0
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	bf18      	it	ne
 8001936:	2301      	movne	r3, #1
 8001938:	0692      	lsls	r2, r2, #26
 800193a:	d42b      	bmi.n	8001994 <_printf_common+0xb0>
 800193c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001940:	4649      	mov	r1, r9
 8001942:	4638      	mov	r0, r7
 8001944:	47c0      	blx	r8
 8001946:	3001      	adds	r0, #1
 8001948:	d01e      	beq.n	8001988 <_printf_common+0xa4>
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	68e5      	ldr	r5, [r4, #12]
 800194e:	6832      	ldr	r2, [r6, #0]
 8001950:	f003 0306 	and.w	r3, r3, #6
 8001954:	2b04      	cmp	r3, #4
 8001956:	bf08      	it	eq
 8001958:	1aad      	subeq	r5, r5, r2
 800195a:	68a3      	ldr	r3, [r4, #8]
 800195c:	6922      	ldr	r2, [r4, #16]
 800195e:	bf0c      	ite	eq
 8001960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001964:	2500      	movne	r5, #0
 8001966:	4293      	cmp	r3, r2
 8001968:	bfc4      	itt	gt
 800196a:	1a9b      	subgt	r3, r3, r2
 800196c:	18ed      	addgt	r5, r5, r3
 800196e:	2600      	movs	r6, #0
 8001970:	341a      	adds	r4, #26
 8001972:	42b5      	cmp	r5, r6
 8001974:	d11a      	bne.n	80019ac <_printf_common+0xc8>
 8001976:	2000      	movs	r0, #0
 8001978:	e008      	b.n	800198c <_printf_common+0xa8>
 800197a:	2301      	movs	r3, #1
 800197c:	4652      	mov	r2, sl
 800197e:	4649      	mov	r1, r9
 8001980:	4638      	mov	r0, r7
 8001982:	47c0      	blx	r8
 8001984:	3001      	adds	r0, #1
 8001986:	d103      	bne.n	8001990 <_printf_common+0xac>
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001990:	3501      	adds	r5, #1
 8001992:	e7c6      	b.n	8001922 <_printf_common+0x3e>
 8001994:	18e1      	adds	r1, r4, r3
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	2030      	movs	r0, #48	; 0x30
 800199a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800199e:	4422      	add	r2, r4
 80019a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019a8:	3302      	adds	r3, #2
 80019aa:	e7c7      	b.n	800193c <_printf_common+0x58>
 80019ac:	2301      	movs	r3, #1
 80019ae:	4622      	mov	r2, r4
 80019b0:	4649      	mov	r1, r9
 80019b2:	4638      	mov	r0, r7
 80019b4:	47c0      	blx	r8
 80019b6:	3001      	adds	r0, #1
 80019b8:	d0e6      	beq.n	8001988 <_printf_common+0xa4>
 80019ba:	3601      	adds	r6, #1
 80019bc:	e7d9      	b.n	8001972 <_printf_common+0x8e>
	...

080019c0 <_printf_i>:
 80019c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019c4:	7e0f      	ldrb	r7, [r1, #24]
 80019c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019c8:	2f78      	cmp	r7, #120	; 0x78
 80019ca:	4691      	mov	r9, r2
 80019cc:	4680      	mov	r8, r0
 80019ce:	460c      	mov	r4, r1
 80019d0:	469a      	mov	sl, r3
 80019d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019d6:	d807      	bhi.n	80019e8 <_printf_i+0x28>
 80019d8:	2f62      	cmp	r7, #98	; 0x62
 80019da:	d80a      	bhi.n	80019f2 <_printf_i+0x32>
 80019dc:	2f00      	cmp	r7, #0
 80019de:	f000 80d8 	beq.w	8001b92 <_printf_i+0x1d2>
 80019e2:	2f58      	cmp	r7, #88	; 0x58
 80019e4:	f000 80a3 	beq.w	8001b2e <_printf_i+0x16e>
 80019e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019f0:	e03a      	b.n	8001a68 <_printf_i+0xa8>
 80019f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019f6:	2b15      	cmp	r3, #21
 80019f8:	d8f6      	bhi.n	80019e8 <_printf_i+0x28>
 80019fa:	a101      	add	r1, pc, #4	; (adr r1, 8001a00 <_printf_i+0x40>)
 80019fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a00:	08001a59 	.word	0x08001a59
 8001a04:	08001a6d 	.word	0x08001a6d
 8001a08:	080019e9 	.word	0x080019e9
 8001a0c:	080019e9 	.word	0x080019e9
 8001a10:	080019e9 	.word	0x080019e9
 8001a14:	080019e9 	.word	0x080019e9
 8001a18:	08001a6d 	.word	0x08001a6d
 8001a1c:	080019e9 	.word	0x080019e9
 8001a20:	080019e9 	.word	0x080019e9
 8001a24:	080019e9 	.word	0x080019e9
 8001a28:	080019e9 	.word	0x080019e9
 8001a2c:	08001b79 	.word	0x08001b79
 8001a30:	08001a9d 	.word	0x08001a9d
 8001a34:	08001b5b 	.word	0x08001b5b
 8001a38:	080019e9 	.word	0x080019e9
 8001a3c:	080019e9 	.word	0x080019e9
 8001a40:	08001b9b 	.word	0x08001b9b
 8001a44:	080019e9 	.word	0x080019e9
 8001a48:	08001a9d 	.word	0x08001a9d
 8001a4c:	080019e9 	.word	0x080019e9
 8001a50:	080019e9 	.word	0x080019e9
 8001a54:	08001b63 	.word	0x08001b63
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	1d1a      	adds	r2, r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	602a      	str	r2, [r5, #0]
 8001a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0a3      	b.n	8001bb4 <_printf_i+0x1f4>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	6829      	ldr	r1, [r5, #0]
 8001a70:	0606      	lsls	r6, r0, #24
 8001a72:	f101 0304 	add.w	r3, r1, #4
 8001a76:	d50a      	bpl.n	8001a8e <_printf_i+0xce>
 8001a78:	680e      	ldr	r6, [r1, #0]
 8001a7a:	602b      	str	r3, [r5, #0]
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	da03      	bge.n	8001a88 <_printf_i+0xc8>
 8001a80:	232d      	movs	r3, #45	; 0x2d
 8001a82:	4276      	negs	r6, r6
 8001a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a88:	485e      	ldr	r0, [pc, #376]	; (8001c04 <_printf_i+0x244>)
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	e019      	b.n	8001ac2 <_printf_i+0x102>
 8001a8e:	680e      	ldr	r6, [r1, #0]
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a96:	bf18      	it	ne
 8001a98:	b236      	sxthne	r6, r6
 8001a9a:	e7ef      	b.n	8001a7c <_printf_i+0xbc>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	1d19      	adds	r1, r3, #4
 8001aa2:	6029      	str	r1, [r5, #0]
 8001aa4:	0601      	lsls	r1, r0, #24
 8001aa6:	d501      	bpl.n	8001aac <_printf_i+0xec>
 8001aa8:	681e      	ldr	r6, [r3, #0]
 8001aaa:	e002      	b.n	8001ab2 <_printf_i+0xf2>
 8001aac:	0646      	lsls	r6, r0, #25
 8001aae:	d5fb      	bpl.n	8001aa8 <_printf_i+0xe8>
 8001ab0:	881e      	ldrh	r6, [r3, #0]
 8001ab2:	4854      	ldr	r0, [pc, #336]	; (8001c04 <_printf_i+0x244>)
 8001ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2308      	moveq	r3, #8
 8001aba:	230a      	movne	r3, #10
 8001abc:	2100      	movs	r1, #0
 8001abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ac2:	6865      	ldr	r5, [r4, #4]
 8001ac4:	60a5      	str	r5, [r4, #8]
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	bfa2      	ittt	ge
 8001aca:	6821      	ldrge	r1, [r4, #0]
 8001acc:	f021 0104 	bicge.w	r1, r1, #4
 8001ad0:	6021      	strge	r1, [r4, #0]
 8001ad2:	b90e      	cbnz	r6, 8001ad8 <_printf_i+0x118>
 8001ad4:	2d00      	cmp	r5, #0
 8001ad6:	d04d      	beq.n	8001b74 <_printf_i+0x1b4>
 8001ad8:	4615      	mov	r5, r2
 8001ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ade:	fb03 6711 	mls	r7, r3, r1, r6
 8001ae2:	5dc7      	ldrb	r7, [r0, r7]
 8001ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ae8:	4637      	mov	r7, r6
 8001aea:	42bb      	cmp	r3, r7
 8001aec:	460e      	mov	r6, r1
 8001aee:	d9f4      	bls.n	8001ada <_printf_i+0x11a>
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d10b      	bne.n	8001b0c <_printf_i+0x14c>
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	07de      	lsls	r6, r3, #31
 8001af8:	d508      	bpl.n	8001b0c <_printf_i+0x14c>
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	6861      	ldr	r1, [r4, #4]
 8001afe:	4299      	cmp	r1, r3
 8001b00:	bfde      	ittt	le
 8001b02:	2330      	movle	r3, #48	; 0x30
 8001b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b0c:	1b52      	subs	r2, r2, r5
 8001b0e:	6122      	str	r2, [r4, #16]
 8001b10:	f8cd a000 	str.w	sl, [sp]
 8001b14:	464b      	mov	r3, r9
 8001b16:	aa03      	add	r2, sp, #12
 8001b18:	4621      	mov	r1, r4
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	f7ff fee2 	bl	80018e4 <_printf_common>
 8001b20:	3001      	adds	r0, #1
 8001b22:	d14c      	bne.n	8001bbe <_printf_i+0x1fe>
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	b004      	add	sp, #16
 8001b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b2e:	4835      	ldr	r0, [pc, #212]	; (8001c04 <_printf_i+0x244>)
 8001b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b34:	6829      	ldr	r1, [r5, #0]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b3c:	6029      	str	r1, [r5, #0]
 8001b3e:	061d      	lsls	r5, r3, #24
 8001b40:	d514      	bpl.n	8001b6c <_printf_i+0x1ac>
 8001b42:	07df      	lsls	r7, r3, #31
 8001b44:	bf44      	itt	mi
 8001b46:	f043 0320 	orrmi.w	r3, r3, #32
 8001b4a:	6023      	strmi	r3, [r4, #0]
 8001b4c:	b91e      	cbnz	r6, 8001b56 <_printf_i+0x196>
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	f023 0320 	bic.w	r3, r3, #32
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	2310      	movs	r3, #16
 8001b58:	e7b0      	b.n	8001abc <_printf_i+0xfc>
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	2378      	movs	r3, #120	; 0x78
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <_printf_i+0x248>)
 8001b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b6a:	e7e3      	b.n	8001b34 <_printf_i+0x174>
 8001b6c:	0659      	lsls	r1, r3, #25
 8001b6e:	bf48      	it	mi
 8001b70:	b2b6      	uxthmi	r6, r6
 8001b72:	e7e6      	b.n	8001b42 <_printf_i+0x182>
 8001b74:	4615      	mov	r5, r2
 8001b76:	e7bb      	b.n	8001af0 <_printf_i+0x130>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	6826      	ldr	r6, [r4, #0]
 8001b7c:	6961      	ldr	r1, [r4, #20]
 8001b7e:	1d18      	adds	r0, r3, #4
 8001b80:	6028      	str	r0, [r5, #0]
 8001b82:	0635      	lsls	r5, r6, #24
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	d501      	bpl.n	8001b8c <_printf_i+0x1cc>
 8001b88:	6019      	str	r1, [r3, #0]
 8001b8a:	e002      	b.n	8001b92 <_printf_i+0x1d2>
 8001b8c:	0670      	lsls	r0, r6, #25
 8001b8e:	d5fb      	bpl.n	8001b88 <_printf_i+0x1c8>
 8001b90:	8019      	strh	r1, [r3, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	6123      	str	r3, [r4, #16]
 8001b96:	4615      	mov	r5, r2
 8001b98:	e7ba      	b.n	8001b10 <_printf_i+0x150>
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	1d1a      	adds	r2, r3, #4
 8001b9e:	602a      	str	r2, [r5, #0]
 8001ba0:	681d      	ldr	r5, [r3, #0]
 8001ba2:	6862      	ldr	r2, [r4, #4]
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	f7fe fb1a 	bl	80001e0 <memchr>
 8001bac:	b108      	cbz	r0, 8001bb2 <_printf_i+0x1f2>
 8001bae:	1b40      	subs	r0, r0, r5
 8001bb0:	6060      	str	r0, [r4, #4]
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	6123      	str	r3, [r4, #16]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bbc:	e7a8      	b.n	8001b10 <_printf_i+0x150>
 8001bbe:	6923      	ldr	r3, [r4, #16]
 8001bc0:	462a      	mov	r2, r5
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	47d0      	blx	sl
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d0ab      	beq.n	8001b24 <_printf_i+0x164>
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	079b      	lsls	r3, r3, #30
 8001bd0:	d413      	bmi.n	8001bfa <_printf_i+0x23a>
 8001bd2:	68e0      	ldr	r0, [r4, #12]
 8001bd4:	9b03      	ldr	r3, [sp, #12]
 8001bd6:	4298      	cmp	r0, r3
 8001bd8:	bfb8      	it	lt
 8001bda:	4618      	movlt	r0, r3
 8001bdc:	e7a4      	b.n	8001b28 <_printf_i+0x168>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4632      	mov	r2, r6
 8001be2:	4649      	mov	r1, r9
 8001be4:	4640      	mov	r0, r8
 8001be6:	47d0      	blx	sl
 8001be8:	3001      	adds	r0, #1
 8001bea:	d09b      	beq.n	8001b24 <_printf_i+0x164>
 8001bec:	3501      	adds	r5, #1
 8001bee:	68e3      	ldr	r3, [r4, #12]
 8001bf0:	9903      	ldr	r1, [sp, #12]
 8001bf2:	1a5b      	subs	r3, r3, r1
 8001bf4:	42ab      	cmp	r3, r5
 8001bf6:	dcf2      	bgt.n	8001bde <_printf_i+0x21e>
 8001bf8:	e7eb      	b.n	8001bd2 <_printf_i+0x212>
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	f104 0619 	add.w	r6, r4, #25
 8001c00:	e7f5      	b.n	8001bee <_printf_i+0x22e>
 8001c02:	bf00      	nop
 8001c04:	08001f1f 	.word	0x08001f1f
 8001c08:	08001f30 	.word	0x08001f30

08001c0c <memcpy>:
 8001c0c:	440a      	add	r2, r1
 8001c0e:	4291      	cmp	r1, r2
 8001c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c14:	d100      	bne.n	8001c18 <memcpy+0xc>
 8001c16:	4770      	bx	lr
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c22:	4291      	cmp	r1, r2
 8001c24:	d1f9      	bne.n	8001c1a <memcpy+0xe>
 8001c26:	bd10      	pop	{r4, pc}

08001c28 <memmove>:
 8001c28:	4288      	cmp	r0, r1
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	eb01 0402 	add.w	r4, r1, r2
 8001c30:	d902      	bls.n	8001c38 <memmove+0x10>
 8001c32:	4284      	cmp	r4, r0
 8001c34:	4623      	mov	r3, r4
 8001c36:	d807      	bhi.n	8001c48 <memmove+0x20>
 8001c38:	1e43      	subs	r3, r0, #1
 8001c3a:	42a1      	cmp	r1, r4
 8001c3c:	d008      	beq.n	8001c50 <memmove+0x28>
 8001c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c46:	e7f8      	b.n	8001c3a <memmove+0x12>
 8001c48:	4402      	add	r2, r0
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	428a      	cmp	r2, r1
 8001c4e:	d100      	bne.n	8001c52 <memmove+0x2a>
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c5a:	e7f7      	b.n	8001c4c <memmove+0x24>

08001c5c <_free_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4605      	mov	r5, r0
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d041      	beq.n	8001ce8 <_free_r+0x8c>
 8001c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c68:	1f0c      	subs	r4, r1, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfb8      	it	lt
 8001c6e:	18e4      	addlt	r4, r4, r3
 8001c70:	f000 f912 	bl	8001e98 <__malloc_lock>
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <_free_r+0x90>)
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	b933      	cbnz	r3, 8001c88 <_free_r+0x2c>
 8001c7a:	6063      	str	r3, [r4, #4]
 8001c7c:	6014      	str	r4, [r2, #0]
 8001c7e:	4628      	mov	r0, r5
 8001c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c84:	f000 b90e 	b.w	8001ea4 <__malloc_unlock>
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	d908      	bls.n	8001c9e <_free_r+0x42>
 8001c8c:	6820      	ldr	r0, [r4, #0]
 8001c8e:	1821      	adds	r1, r4, r0
 8001c90:	428b      	cmp	r3, r1
 8001c92:	bf01      	itttt	eq
 8001c94:	6819      	ldreq	r1, [r3, #0]
 8001c96:	685b      	ldreq	r3, [r3, #4]
 8001c98:	1809      	addeq	r1, r1, r0
 8001c9a:	6021      	streq	r1, [r4, #0]
 8001c9c:	e7ed      	b.n	8001c7a <_free_r+0x1e>
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	b10b      	cbz	r3, 8001ca8 <_free_r+0x4c>
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	d9fa      	bls.n	8001c9e <_free_r+0x42>
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	1850      	adds	r0, r2, r1
 8001cac:	42a0      	cmp	r0, r4
 8001cae:	d10b      	bne.n	8001cc8 <_free_r+0x6c>
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	4401      	add	r1, r0
 8001cb4:	1850      	adds	r0, r2, r1
 8001cb6:	4283      	cmp	r3, r0
 8001cb8:	6011      	str	r1, [r2, #0]
 8001cba:	d1e0      	bne.n	8001c7e <_free_r+0x22>
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	6053      	str	r3, [r2, #4]
 8001cc2:	4401      	add	r1, r0
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	e7da      	b.n	8001c7e <_free_r+0x22>
 8001cc8:	d902      	bls.n	8001cd0 <_free_r+0x74>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	602b      	str	r3, [r5, #0]
 8001cce:	e7d6      	b.n	8001c7e <_free_r+0x22>
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	1821      	adds	r1, r4, r0
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	bf04      	itt	eq
 8001cd8:	6819      	ldreq	r1, [r3, #0]
 8001cda:	685b      	ldreq	r3, [r3, #4]
 8001cdc:	6063      	str	r3, [r4, #4]
 8001cde:	bf04      	itt	eq
 8001ce0:	1809      	addeq	r1, r1, r0
 8001ce2:	6021      	streq	r1, [r4, #0]
 8001ce4:	6054      	str	r4, [r2, #4]
 8001ce6:	e7ca      	b.n	8001c7e <_free_r+0x22>
 8001ce8:	bd38      	pop	{r3, r4, r5, pc}
 8001cea:	bf00      	nop
 8001cec:	200001c4 	.word	0x200001c4

08001cf0 <sbrk_aligned>:
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	4e0e      	ldr	r6, [pc, #56]	; (8001d2c <sbrk_aligned+0x3c>)
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	6831      	ldr	r1, [r6, #0]
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	b911      	cbnz	r1, 8001d02 <sbrk_aligned+0x12>
 8001cfc:	f000 f8bc 	bl	8001e78 <_sbrk_r>
 8001d00:	6030      	str	r0, [r6, #0]
 8001d02:	4621      	mov	r1, r4
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 f8b7 	bl	8001e78 <_sbrk_r>
 8001d0a:	1c43      	adds	r3, r0, #1
 8001d0c:	d00a      	beq.n	8001d24 <sbrk_aligned+0x34>
 8001d0e:	1cc4      	adds	r4, r0, #3
 8001d10:	f024 0403 	bic.w	r4, r4, #3
 8001d14:	42a0      	cmp	r0, r4
 8001d16:	d007      	beq.n	8001d28 <sbrk_aligned+0x38>
 8001d18:	1a21      	subs	r1, r4, r0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 f8ac 	bl	8001e78 <_sbrk_r>
 8001d20:	3001      	adds	r0, #1
 8001d22:	d101      	bne.n	8001d28 <sbrk_aligned+0x38>
 8001d24:	f04f 34ff 	mov.w	r4, #4294967295
 8001d28:	4620      	mov	r0, r4
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	200001c8 	.word	0x200001c8

08001d30 <_malloc_r>:
 8001d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d34:	1ccd      	adds	r5, r1, #3
 8001d36:	f025 0503 	bic.w	r5, r5, #3
 8001d3a:	3508      	adds	r5, #8
 8001d3c:	2d0c      	cmp	r5, #12
 8001d3e:	bf38      	it	cc
 8001d40:	250c      	movcc	r5, #12
 8001d42:	2d00      	cmp	r5, #0
 8001d44:	4607      	mov	r7, r0
 8001d46:	db01      	blt.n	8001d4c <_malloc_r+0x1c>
 8001d48:	42a9      	cmp	r1, r5
 8001d4a:	d905      	bls.n	8001d58 <_malloc_r+0x28>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	2600      	movs	r6, #0
 8001d52:	4630      	mov	r0, r6
 8001d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d58:	4e2e      	ldr	r6, [pc, #184]	; (8001e14 <_malloc_r+0xe4>)
 8001d5a:	f000 f89d 	bl	8001e98 <__malloc_lock>
 8001d5e:	6833      	ldr	r3, [r6, #0]
 8001d60:	461c      	mov	r4, r3
 8001d62:	bb34      	cbnz	r4, 8001db2 <_malloc_r+0x82>
 8001d64:	4629      	mov	r1, r5
 8001d66:	4638      	mov	r0, r7
 8001d68:	f7ff ffc2 	bl	8001cf0 <sbrk_aligned>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	4604      	mov	r4, r0
 8001d70:	d14d      	bne.n	8001e0e <_malloc_r+0xde>
 8001d72:	6834      	ldr	r4, [r6, #0]
 8001d74:	4626      	mov	r6, r4
 8001d76:	2e00      	cmp	r6, #0
 8001d78:	d140      	bne.n	8001dfc <_malloc_r+0xcc>
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	4638      	mov	r0, r7
 8001d80:	eb04 0803 	add.w	r8, r4, r3
 8001d84:	f000 f878 	bl	8001e78 <_sbrk_r>
 8001d88:	4580      	cmp	r8, r0
 8001d8a:	d13a      	bne.n	8001e02 <_malloc_r+0xd2>
 8001d8c:	6821      	ldr	r1, [r4, #0]
 8001d8e:	3503      	adds	r5, #3
 8001d90:	1a6d      	subs	r5, r5, r1
 8001d92:	f025 0503 	bic.w	r5, r5, #3
 8001d96:	3508      	adds	r5, #8
 8001d98:	2d0c      	cmp	r5, #12
 8001d9a:	bf38      	it	cc
 8001d9c:	250c      	movcc	r5, #12
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4638      	mov	r0, r7
 8001da2:	f7ff ffa5 	bl	8001cf0 <sbrk_aligned>
 8001da6:	3001      	adds	r0, #1
 8001da8:	d02b      	beq.n	8001e02 <_malloc_r+0xd2>
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	442b      	add	r3, r5
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	e00e      	b.n	8001dd0 <_malloc_r+0xa0>
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	1b52      	subs	r2, r2, r5
 8001db6:	d41e      	bmi.n	8001df6 <_malloc_r+0xc6>
 8001db8:	2a0b      	cmp	r2, #11
 8001dba:	d916      	bls.n	8001dea <_malloc_r+0xba>
 8001dbc:	1961      	adds	r1, r4, r5
 8001dbe:	42a3      	cmp	r3, r4
 8001dc0:	6025      	str	r5, [r4, #0]
 8001dc2:	bf18      	it	ne
 8001dc4:	6059      	strne	r1, [r3, #4]
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	bf08      	it	eq
 8001dca:	6031      	streq	r1, [r6, #0]
 8001dcc:	5162      	str	r2, [r4, r5]
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	4638      	mov	r0, r7
 8001dd2:	f104 060b 	add.w	r6, r4, #11
 8001dd6:	f000 f865 	bl	8001ea4 <__malloc_unlock>
 8001dda:	f026 0607 	bic.w	r6, r6, #7
 8001dde:	1d23      	adds	r3, r4, #4
 8001de0:	1af2      	subs	r2, r6, r3
 8001de2:	d0b6      	beq.n	8001d52 <_malloc_r+0x22>
 8001de4:	1b9b      	subs	r3, r3, r6
 8001de6:	50a3      	str	r3, [r4, r2]
 8001de8:	e7b3      	b.n	8001d52 <_malloc_r+0x22>
 8001dea:	6862      	ldr	r2, [r4, #4]
 8001dec:	42a3      	cmp	r3, r4
 8001dee:	bf0c      	ite	eq
 8001df0:	6032      	streq	r2, [r6, #0]
 8001df2:	605a      	strne	r2, [r3, #4]
 8001df4:	e7ec      	b.n	8001dd0 <_malloc_r+0xa0>
 8001df6:	4623      	mov	r3, r4
 8001df8:	6864      	ldr	r4, [r4, #4]
 8001dfa:	e7b2      	b.n	8001d62 <_malloc_r+0x32>
 8001dfc:	4634      	mov	r4, r6
 8001dfe:	6876      	ldr	r6, [r6, #4]
 8001e00:	e7b9      	b.n	8001d76 <_malloc_r+0x46>
 8001e02:	230c      	movs	r3, #12
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4638      	mov	r0, r7
 8001e08:	f000 f84c 	bl	8001ea4 <__malloc_unlock>
 8001e0c:	e7a1      	b.n	8001d52 <_malloc_r+0x22>
 8001e0e:	6025      	str	r5, [r4, #0]
 8001e10:	e7de      	b.n	8001dd0 <_malloc_r+0xa0>
 8001e12:	bf00      	nop
 8001e14:	200001c4 	.word	0x200001c4

08001e18 <_realloc_r>:
 8001e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1c:	4680      	mov	r8, r0
 8001e1e:	4614      	mov	r4, r2
 8001e20:	460e      	mov	r6, r1
 8001e22:	b921      	cbnz	r1, 8001e2e <_realloc_r+0x16>
 8001e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e28:	4611      	mov	r1, r2
 8001e2a:	f7ff bf81 	b.w	8001d30 <_malloc_r>
 8001e2e:	b92a      	cbnz	r2, 8001e3c <_realloc_r+0x24>
 8001e30:	f7ff ff14 	bl	8001c5c <_free_r>
 8001e34:	4625      	mov	r5, r4
 8001e36:	4628      	mov	r0, r5
 8001e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e3c:	f000 f838 	bl	8001eb0 <_malloc_usable_size_r>
 8001e40:	4284      	cmp	r4, r0
 8001e42:	4607      	mov	r7, r0
 8001e44:	d802      	bhi.n	8001e4c <_realloc_r+0x34>
 8001e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e4a:	d812      	bhi.n	8001e72 <_realloc_r+0x5a>
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	4640      	mov	r0, r8
 8001e50:	f7ff ff6e 	bl	8001d30 <_malloc_r>
 8001e54:	4605      	mov	r5, r0
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d0ed      	beq.n	8001e36 <_realloc_r+0x1e>
 8001e5a:	42bc      	cmp	r4, r7
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	4631      	mov	r1, r6
 8001e60:	bf28      	it	cs
 8001e62:	463a      	movcs	r2, r7
 8001e64:	f7ff fed2 	bl	8001c0c <memcpy>
 8001e68:	4631      	mov	r1, r6
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	f7ff fef6 	bl	8001c5c <_free_r>
 8001e70:	e7e1      	b.n	8001e36 <_realloc_r+0x1e>
 8001e72:	4635      	mov	r5, r6
 8001e74:	e7df      	b.n	8001e36 <_realloc_r+0x1e>
	...

08001e78 <_sbrk_r>:
 8001e78:	b538      	push	{r3, r4, r5, lr}
 8001e7a:	4d06      	ldr	r5, [pc, #24]	; (8001e94 <_sbrk_r+0x1c>)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	4604      	mov	r4, r0
 8001e80:	4608      	mov	r0, r1
 8001e82:	602b      	str	r3, [r5, #0]
 8001e84:	f7fe fb94 	bl	80005b0 <_sbrk>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d102      	bne.n	8001e92 <_sbrk_r+0x1a>
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	b103      	cbz	r3, 8001e92 <_sbrk_r+0x1a>
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
 8001e94:	200001cc 	.word	0x200001cc

08001e98 <__malloc_lock>:
 8001e98:	4801      	ldr	r0, [pc, #4]	; (8001ea0 <__malloc_lock+0x8>)
 8001e9a:	f000 b811 	b.w	8001ec0 <__retarget_lock_acquire_recursive>
 8001e9e:	bf00      	nop
 8001ea0:	200001d0 	.word	0x200001d0

08001ea4 <__malloc_unlock>:
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <__malloc_unlock+0x8>)
 8001ea6:	f000 b80c 	b.w	8001ec2 <__retarget_lock_release_recursive>
 8001eaa:	bf00      	nop
 8001eac:	200001d0 	.word	0x200001d0

08001eb0 <_malloc_usable_size_r>:
 8001eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eb4:	1f18      	subs	r0, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bfbc      	itt	lt
 8001eba:	580b      	ldrlt	r3, [r1, r0]
 8001ebc:	18c0      	addlt	r0, r0, r3
 8001ebe:	4770      	bx	lr

08001ec0 <__retarget_lock_acquire_recursive>:
 8001ec0:	4770      	bx	lr

08001ec2 <__retarget_lock_release_recursive>:
 8001ec2:	4770      	bx	lr

08001ec4 <_init>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	bf00      	nop
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr

08001ed0 <_fini>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr
